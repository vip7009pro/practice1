var sql = require("mssql");
var jwt = require("jsonwebtoken");
const moment = require("moment");
const { existsSync } = require("fs");
const fs = require("fs");
var util = require('util');
var log_file = fs.createWriteStream(__dirname + '/log/debug.log', { flags: 'a' });
var log_stdout = process.stdout;
console.log = function (d) { //
  //log_file.write(util.format(d) + '\n');
  log_stdout.write(util.format(d) + '\n');
};
require("dotenv").config();
const fetch = require('node-fetch');
let CURRENT_API_URL = 'https://script.google.com/macros/s/AKfycbyD_LRqVLETu8IvuiqDSsbItdmzRw3p_q9gCv12UOer0V-5OnqtbJvKjK86bfgGbUM1NA/exec'
function removeVietnameseTones(str) {
  str = str.replace(/à|á|ạ|ả|ã|â|ầ|ấ|ậ|ẩ|ẫ|ă|ằ|ắ|ặ|ẳ|ẵ/g, "a");
  str = str.replace(/è|é|ẹ|ẻ|ẽ|ê|ề|ế|ệ|ể|ễ/g, "e");
  str = str.replace(/ì|í|ị|ỉ|ĩ/g, "i");
  str = str.replace(/ò|ó|ọ|ỏ|õ|ô|ồ|ố|ộ|ổ|ỗ|ơ|ờ|ớ|ợ|ở|ỡ/g, "o");
  str = str.replace(/ù|ú|ụ|ủ|ũ|ư|ừ|ứ|ự|ử|ữ/g, "u");
  str = str.replace(/ỳ|ý|ỵ|ỷ|ỹ/g, "y");
  str = str.replace(/đ/g, "d");
  str = str.replace(/À|Á|Ạ|Ả|Ã|Â|Ầ|Ấ|Ậ|Ẩ|Ẫ|Ă|Ằ|Ắ|Ặ|Ẳ|Ẵ/g, "A");
  str = str.replace(/È|É|Ẹ|Ẻ|Ẽ|Ê|Ề|Ế|Ệ|Ể|Ễ/g, "E");
  str = str.replace(/Ì|Í|Ị|Ỉ|Ĩ/g, "I");
  str = str.replace(/Ò|Ó|Ọ|Ỏ|Õ|Ô|Ồ|Ố|Ộ|Ổ|Ỗ|Ơ|Ờ|Ớ|Ợ|Ở|Ỡ/g, "O");
  str = str.replace(/Ù|Ú|Ụ|Ủ|Ũ|Ư|Ừ|Ứ|Ự|Ử|Ữ/g, "U");
  str = str.replace(/Ỳ|Ý|Ỵ|Ỷ|Ỹ/g, "Y");
  str = str.replace(/Đ/g, "D");
  // Some system encode vietnamese combining accent as individual utf-8 characters
  // Một vài bộ encode coi các dấu mũ, dấu chữ như một kí tự riêng biệt nên thêm hai dòng này
  str = str.replace(/\u0300|\u0301|\u0303|\u0309|\u0323/g, ""); // ̀ ́ ̃ ̉ ̣  huyền, sắc, ngã, hỏi, nặng
  str = str.replace(/\u02C6|\u0306|\u031B/g, ""); // ˆ ̆ ̛  Â, Ê, Ă, Ơ, Ư
  // Remove extra spaces
  // Bỏ các khoảng trắng liền nhau
  str = str.replace(/ + /g, " ");
  str = str.trim();
  // Remove punctuations
  // Bỏ dấu câu, kí tự đặc biệt
  str = str.replace(
    /!|@|%|\^|\*|\(|\)|\+|\=|\<|\>|\?|\/|,|\.|\:|\;|\'|\"|\&|\#|\[|\]|~|\$|_|`|-|{|}|\||\\/g,
    " "
  );
  return str;
}
function generate_condition_get_invoice(
  $inspect_time_checkvalue,
  $start_date,
  $end_date,
  $input_cust_name,
  $input_code_cms,
  $input_code_KD,
  $product_type,
  $empl_name,
  $po_no,
  $material,
  $invoice_no,
  $ctr_cd
) {
  $condition = "WHERE ZTBDelivery.CTR_CD = '" + $ctr_cd + "' ";
  if ($inspect_time_checkvalue == false) {
    $inspect_time_checkvalue =
      " AND ZTBDelivery.DELIVERY_DATE BETWEEN '" +
      $start_date +
      "' AND  '" +
      $end_date +
      "' ";
  } else {
    $inspect_time_checkvalue = "";
  }
  if ($input_cust_name != "") {
    $input_cust_name =
      " AND M110.CUST_NAME_KD LIKE '%" + $input_cust_name + "%'";
  }
  if ($input_code_cms != "") {
    $input_code_cms = " AND M100.G_CODE = '" + $input_code_cms + "'";
  }
  if ($input_code_KD != "") {
    $input_code_KD = " AND M100.G_NAME LIKE  '%" + $input_code_KD + "%'";
  }
  if ($product_type != "") {
    $product_type = " AND M100.PROD_TYPE=  '" + $product_type + "'";
  }
  if ($empl_name != "") {
    $empl_name = " AND M010.EMPL_NAME LIKE  '%" + $empl_name + "%'";
  }
  if ($po_no != "") {
    $po_no = " AND ZTBPOTable.PO_NO =  '" + $po_no + "'";
  }
  if ($material != "") {
    $material = " AND M100.PROD_MAIN_MATERIAL LIKE  '%" + $material + "%'";
  }
  if ($invoice_no != "") {
    $invoice_no = " AND ZTBDelivery.INVOICE_NO = '" + $invoice_no + "'";
  }
  $condition =
    $condition +
    $inspect_time_checkvalue +
    $input_cust_name +
    $input_code_cms +
    $input_code_KD +
    $product_type +
    $empl_name +
    $po_no +
    $material +
    $invoice_no;
  return $condition;
}
function generate_condition_get_plan(
  $inspect_time_checkvalue,
  $start_date,
  $end_date,
  $input_cust_name,
  $input_code_cms,
  $input_code_KD,
  $product_type,
  $empl_name,
  $material,
  $ctr_cd
) {
  $condition = "WHERE ZTBPLANTB.CTR_CD= '" + $ctr_cd + "' ";
  if ($inspect_time_checkvalue == false) {
    $inspect_time_checkvalue =
      " AND ZTBPLANTB.PLAN_DATE BETWEEN '" +
      $start_date +
      "' AND  '" +
      $end_date +
      "' ";
  } else {
    $inspect_time_checkvalue = "";
  }
  if ($input_cust_name != "") {
    $input_cust_name =
      " AND M110.CUST_NAME_KD LIKE '%" + $input_cust_name + "%'";
  }
  if ($input_code_cms != "") {
    $input_code_cms = " AND M100.G_CODE = '" + $input_code_cms + "'";
  }
  if ($input_code_KD != "") {
    $input_code_KD = " AND M100.G_NAME LIKE  '%" + $input_code_KD + "%'";
  }
  if ($product_type != "") {
    $product_type = " AND M100.PROD_TYPE=  '" + $product_type + "'";
  }
  if ($empl_name != "") {
    $empl_name = " AND M010.EMPL_NAME LIKE  '%" + $empl_name + "%'";
  }
  if ($material != "") {
    $material = " AND M100.PROD_MAIN_MATERIAL LIKE  '%" + $material + "%'";
  }
  $condition =
    $condition +
    $inspect_time_checkvalue +
    $input_cust_name +
    $input_code_cms +
    $input_code_KD +
    $product_type +
    $empl_name +
    $material;
  return $condition;
}
function generate_condition_get_fcst(
  $inspect_time_checkvalue,
  $start_date,
  $end_date,
  $input_cust_name,
  $input_code_cms,
  $input_code_KD,
  $product_type,
  $empl_name,
  $material,
  $ctr_cd
) {
  $condition = "WHERE ZTBFCSTTB.CTR_CD= '" + $ctr_cd + "' ";
  if ($inspect_time_checkvalue == false) {
    const start_weeknum = moment($start_date, "YYYY-MM-DD")
      .add(1, "day")
      .isoWeek();
    const end_weeknum = moment($end_date, "YYYY-MM-DD").add(1, "day").isoWeek();
    const yearnum = moment($start_date, "YYYY-MM-DD").add(1, "day").year();
    $inspect_time_checkvalue =
      " AND ZTBFCSTTB.FCSTWEEKNO BETWEEN '" +
      start_weeknum +
      "' AND  '" +
      end_weeknum +
      "' AND ZTBFCSTTB.FCSTYEAR = " +
      yearnum;
  } else {
    $inspect_time_checkvalue = "";
  }
  if ($input_cust_name != "") {
    $input_cust_name =
      " AND M110.CUST_NAME_KD LIKE '%" + $input_cust_name + "%'";
  }
  if ($input_code_cms != "") {
    $input_code_cms = " AND M100.G_CODE = '" + $input_code_cms + "'";
  }
  if ($input_code_KD != "") {
    $input_code_KD = " AND M100.G_NAME LIKE  '%" + $input_code_KD + "%'";
  }
  if ($product_type != "") {
    $product_type = " AND M100.PROD_TYPE=  '" + $product_type + "'";
  }
  if ($empl_name != "") {
    $empl_name = " AND M010.EMPL_NAME LIKE  '%" + $empl_name + "%'";
  }
  if ($material != "") {
    $material = " AND M100.PROD_MAIN_MATERIAL LIKE  '%" + $material + "%'";
  }
  $condition =
    $condition +
    $inspect_time_checkvalue +
    $input_cust_name +
    $input_code_cms +
    $input_code_KD +
    $product_type +
    $empl_name +
    $material;
  return $condition;
}
function generate_condition_get_po(
  $inspect_time_checkvalue,
  $start_date,
  $end_date,
  $input_cust_name,
  $input_code_cms,
  $input_code_KD,
  $product_type,
  $empl_name,
  $po_no,
  $over,
  $id,
  $material,
  $justPoBalance,
  $ctr_cd
) {
  $condition = " WHERE ZTBPOTable.CTR_CD='" + $ctr_cd + "' ";
  if ($inspect_time_checkvalue == false) {
    $inspect_time_checkvalue =
      " AND ZTBPOTable.PO_DATE BETWEEN '" +
      $start_date +
      "' AND  '" +
      $end_date +
      "' ";
  } else {
    $inspect_time_checkvalue = "";
  }
  if ($input_cust_name != "") {
    $input_cust_name =
      " AND M110.CUST_NAME_KD LIKE '%" + $input_cust_name + "%'";
  }
  if ($input_code_cms != "") {
    $input_code_cms = " AND M100.G_CODE = '" + $input_code_cms + "'";
  }
  if ($input_code_KD != "") {
    $input_code_KD = " AND M100.G_NAME LIKE  '%" + $input_code_KD + "%'";
  }
  if ($product_type != "") {
    $product_type = " AND M100.PROD_TYPE=  '" + $product_type + "'";
  }
  if ($empl_name != "") {
    $empl_name = " AND M010.EMPL_NAME LIKE  '%" + $empl_name + "%'";
  }
  if ($po_no != "") {
    $po_no = " AND ZTBPOTable.PO_NO =  '" + $po_no + "'";
  }
  if ($over != "") {
    $over = "";
  }
  if ($id != "") {
    $id = "AND ZTBPOTable.PO_ID=" + $id;
  }
  if ($material != "") {
    $material = "AND M100.PROD_MAIN_MATERIAL LIKE '%" + $material + "%' ";
  }
  if ($justPoBalance != false) {
    //$justPoBalance = "AND (ZTBPOTable.PO_QTY - AA.TotalDelivered) <>0";
    $justPoBalance = "AND POTB.PO_BALANCE <>0";
  } else {
    $justPoBalance = "";
  }
  $condition =
    $condition +
    $inspect_time_checkvalue +
    $input_cust_name +
    $input_code_cms +
    $input_code_KD +
    $product_type +
    $empl_name +
    $po_no +
    $over +
    $material +
    $justPoBalance +
    $id;
  return $condition;
}
function generate_condition_get_ycsx(
  $inspect_time_checkvalue,
  $start_date,
  $end_date,
  $input_cust_name,
  $input_code_cms,
  $input_code_KD,
  $product_type,
  $empl_name,
  $phan_loai,
  $ycsxpending,
  $prod_request_no,
  $material,
  $inspect_input,
  $phanloaihang,
  $ctr_cd,
  $material_yes
) {
  console.log('material yes :::: ', $material_yes)
  $condition = ` WHERE P400.CTR_CD= '${$ctr_cd}' `;
  $temp_start_date = moment($start_date).format("YYYYMMDD");
  $temp_end_date = moment($end_date).format("YYYYMMDD");
  if ($inspect_time_checkvalue == false) {
    $inspect_time_checkvalue =
      " AND P400.PROD_REQUEST_DATE BETWEEN '" +
      $temp_start_date +
      "' AND  '" +
      $temp_end_date +
      "' ";
  } else {
    $inspect_time_checkvalue = "";
  }
  if ($input_cust_name != "") {
    $input_cust_name =
      " AND M110.CUST_NAME_KD LIKE '%" + $input_cust_name + "%'";
  }
  if ($input_code_cms != "") {
    $input_code_cms = " AND M100.G_CODE = '" + $input_code_cms + "'";
  }
  if ($input_code_KD != "") {
    $input_code_KD = " AND M100.G_NAME LIKE  '%" + $input_code_KD + "%'";
  }
  if ($product_type != "") {
    $product_type = " AND M100.PROD_TYPE=  '" + $product_type + "'";
  }
  if ($empl_name != "") {
    $empl_name = " AND M010.EMPL_NAME LIKE  '%" + $empl_name + "%'";
  }
  if ($prod_request_no != "") {
    $prod_request_no = "AND P400.PROD_REQUEST_NO='" + $prod_request_no + "'";
  }
  if ($material != "") {
    $material = "AND M100.PROD_MAIN_MATERIAL LIKE '%" + $material + "%' ";
  }
  if ($inspect_input != false) {
    $inspect_input = " AND LOT_TOTAL_INPUT_QTY_EA<>0 ";
  } else {
    $inspect_input = "";
  }
  if ($ycsxpending !== false) {
    $ycsxpending = ` AND NOT (P400.YCSX_PENDING =0 OR isnull(INSPECT_OUTPUT_TB.LOT_TOTAL_OUTPUT_QTY_EA, 0) >= P400.PROD_REQUEST_QTY OR M100.USE_YN='N') `;
  } else {
    $ycsxpending = "";
  }
  if ($phan_loai !== "") {
    if ($phan_loai !== "00") {
      if ($phan_loai == "22") {
        $phan_loai = ` AND P400.CODE_55<> '04' `;
      } else {
        $phan_loai = ` AND P400.CODE_55= '${$phan_loai}' `;
      }
    } else {
      $phan_loai = "";
    }
  }
  if ($phanloaihang !== 'ALL' && $phanloaihang !== undefined) {
    $phanloaihang = ` AND P400.PL_HANG='${$phanloaihang}'`;
  }
  else {
    $phanloaihang = '';
  }
  console.log('material_yes',$material_yes)
  if($material_yes){
    $material_yes = ` AND P400.MATERIAL_YN='Y' `;
  }
  else {
    $material_yes = '';
  }
  $condition =
    $condition +
    $inspect_time_checkvalue +
    $input_cust_name +
    $input_code_cms +
    $input_code_KD +
    $product_type +
    $empl_name +
    $material +
    $inspect_input +
    $phan_loai +
    $prod_request_no +
    $ycsxpending +
    $phanloaihang +
    $material_yes;
    console.log($condition)
  return $condition;
}
function generate_condition_get_inspection_input(
  $inspect_time_checkvalue,
  $start_date,
  $end_date,
  $input_cust_name,
  $input_code_cms,
  $input_code_KD,
  $product_type,
  $empl_name,
  $ycsx_no,
  $ctr_cd
) {
  $condition = "WHERE ZTBINSPECTINPUTTB.CTR_CD= '" + $ctr_cd + "' ";
  if ($inspect_time_checkvalue == false) {
    $inspect_time_checkvalue =
      " AND ZTBINSPECTINPUTTB.INPUT_DATETIME BETWEEN '" +
      $start_date +
      " 00:00:00' AND  '" +
      $end_date +
      " 23:59:59' ";
  } else {
    $inspect_time_checkvalue = "";
  }
  if ($input_cust_name != "") {
    $input_cust_name =
      " AND M110.CUST_NAME_KD LIKE '%" + $input_cust_name + "%'";
  }
  if ($input_code_cms != "") {
    $input_code_cms = " AND M100.G_CODE = '" + $input_code_cms + "'";
  }
  if ($input_code_KD != "") {
    $input_code_KD = " AND M100.G_NAME LIKE  '%" + $input_code_KD + "%'";
  }
  if ($product_type != "") {
    $product_type = " AND M100.PROD_TYPE=  '" + $product_type + "'";
  }
  if ($empl_name != "") {
    $empl_name = " AND M010.EMPL_NAME LIKE  '%" + $empl_name + "%'";
  }
  if ($ycsx_no != "") {
    $ycsx_no = " AND P400.PROD_REQUEST_NO =  '" + $ycsx_no + "'";
  }
  $condition =
    $condition +
    $inspect_time_checkvalue +
    $input_cust_name +
    $input_code_cms +
    $input_code_KD +
    $product_type +
    $empl_name +
    $ycsx_no;
  return $condition;
}
function generate_condition_get_inspection_output(
  $inspect_time_checkvalue,
  $start_date,
  $end_date,
  $input_cust_name,
  $input_code_cms,
  $input_code_KD,
  $product_type,
  $empl_name,
  $ycsx_no,
  $ctr_cd
) {
  $condition = "WHERE ZTBINSPECTOUTPUTTB.CTR_CD='" + $ctr_cd + "' ";
  if ($inspect_time_checkvalue == false) {
    $inspect_time_checkvalue =
      " AND ZTBINSPECTOUTPUTTB.OUTPUT_DATETIME BETWEEN '" +
      $start_date +
      " 00:00:00' AND  '" +
      $end_date +
      " 23:59:59' ";
  } else {
    $inspect_time_checkvalue = "";
  }
  if ($input_cust_name != "") {
    $input_cust_name =
      " AND M110.CUST_NAME_KD LIKE '%" + $input_cust_name + "%'";
  }
  if ($input_code_cms != "") {
    $input_code_cms = " AND M100.G_CODE = '" + $input_code_cms + "'";
  }
  if ($input_code_KD != "") {
    $input_code_KD = " AND M100.G_NAME LIKE  '%" + $input_code_KD + "%'";
  }
  if ($product_type != "") {
    $product_type = " AND M100.PROD_TYPE=  '" + $product_type + "'";
  }
  if ($empl_name != "") {
    $empl_name = " AND M010.EMPL_NAME LIKE  '%" + $empl_name + "%'";
  }
  if ($ycsx_no != "") {
    $ycsx_no = " AND P400.PROD_REQUEST_NO =  '" + $ycsx_no + "'";
  }
  $condition =
    $condition +
    $inspect_time_checkvalue +
    $input_cust_name +
    $input_code_cms +
    $input_code_KD +
    $product_type +
    $empl_name +
    $ycsx_no;
  return $condition;
}
function generate_condition_get_inspection_inoutycsx(
  $input_cust_name,
  $input_code_cms,
  $input_code_KD,
  $product_type,
  $empl_name,
  $ycsx_no,
  $ctr_cd
) {
  $condition = "WHERE INPUTTB.CTR_CD= '" + $ctr_cd + "' ";
  if ($input_cust_name != "") {
    $input_cust_name =
      " AND M110.CUST_NAME_KD LIKE '%" + $input_cust_name + "%'";
  }
  if ($input_code_cms != "") {
    $input_code_cms = " AND M100.G_CODE = '" + $input_code_cms + "'";
  }
  if ($input_code_KD != "") {
    $input_code_KD = " AND M100.G_NAME LIKE  '%" + $input_code_KD + "%'";
  }
  if ($product_type != "") {
    $product_type = " AND M100.PROD_TYPE=  '" + $product_type + "'";
  }
  if ($empl_name != "") {
    $empl_name = " AND M010.EMPL_NAME LIKE  '%" + $empl_name + "%'";
  }
  if ($ycsx_no != "") {
    $ycsx_no = " AND P400.PROD_REQUEST_NO =  '" + $ycsx_no + "'";
  }
  $condition =
    $condition +
    $input_cust_name +
    $input_code_cms +
    $input_code_KD +
    $product_type +
    $empl_name +
    $ycsx_no;
  return $condition;
}
function generate_condition_get_inspection_ng_data(
  $inspect_time_checkvalue,
  $fromdate,
  $todate,
  $input_cust_name,
  $input_code_cms,
  $input_code_KD,
  $product_type,
  $empl_name,
  $ycsx_no,
  $ctr_cd
) {
  $condition = "WHERE ZTBINSPECTNGTB.CTR_CD= '" + $ctr_cd + "' ";
  if ($inspect_time_checkvalue == false) {
    $inspect_time_checkvalue =
      " AND ZTBINSPECTNGTB.INSPECT_DATETIME BETWEEN '" +
      $fromdate +
      " 00:00:00' AND  '" +
      $todate +
      " 23:59:59' ";
  } else {
    $inspect_time_checkvalue = "";
  }
  if ($input_cust_name != "") {
    $input_cust_name =
      " AND M110.CUST_NAME_KD LIKE '%" + $input_cust_name + "%'";
  }
  if ($input_code_cms != "") {
    $input_code_cms = " AND M100.G_CODE = '" + $input_code_cms + "'";
  }
  if ($input_code_KD != "") {
    $input_code_KD = " AND M100.G_NAME LIKE  '%" + $input_code_KD + "%'";
  }
  if ($product_type != "") {
    $product_type = " AND M100.PROD_TYPE=  '" + $product_type + "'";
  }
  if ($empl_name != "") {
    $empl_name = " AND M010.EMPL_NAME LIKE  '%" + $empl_name + "%'";
  }
  if ($ycsx_no != "") {
    $ycsx_no = " AND ZTBINSPECTNGTB.PROD_REQUEST_NO =  '" + $ycsx_no + "'";
  }
  $condition +=
    $inspect_time_checkvalue +
    $input_cust_name +
    $input_code_cms +
    $input_code_KD +
    $product_type +
    $empl_name +
    $ycsx_no;
  return $condition;
}
function generate_condition_get_dtc_data(
  $inspect_time_checkvalue,
  $fromdate,
  $todate,
  $input_code_cms,
  $input_code_KD,
  $ycsx_no,
  $m_name,
  $m_code,
  $test_name,
  $test_type,
  $id,
  $ctr_cd
) {
  $condition = "WHERE ZTB_REL_REQUESTTABLE.CTR_CD= '" + $ctr_cd + "' ";
  if ($inspect_time_checkvalue === false) {
    $inspect_time_checkvalue =
      " AND ZTB_REL_REQUESTTABLE.TEST_FINISH_TIME BETWEEN '" +
      $fromdate +
      " 00:00:00' AND  '" +
      $todate +
      " 23:59:59' ";
  } else {
    $inspect_time_checkvalue = "";
  }
  if ($input_code_cms != "") {
    $input_code_cms = " AND M100.G_CODE = '" + $input_code_cms + "'";
  }
  if ($input_code_KD != "") {
    $input_code_KD = " AND M100.G_NAME LIKE  '%" + $input_code_KD + "%'";
  }
  if ($ycsx_no != "") {
    $ycsx_no =
      " AND ZTB_REL_REQUESTTABLE.PROD_REQUEST_NO =  '" + $ycsx_no + "'";
  }
  if ($id != "") {
    $id = " AND ZTB_REL_REQUESTTABLE.DTC_ID =  '" + $id + "'";
  }
  if ($m_code != "") {
    $m_code = " AND M090.M_CODE =  '" + $m_code + "'";
  }
  if ($m_name != "") {
    $m_name = " AND M090.M_NAME LIKE  '%" + $m_name + "%'";
  }
  if ($test_name !== "0") {
    $test_name = " AND ZTB_REL_RESULT.TEST_CODE ='" + $test_name + "'";
  } else {
    $test_name = "";
  }
  if ($test_type !== "0") {
    $test_type = " AND ZTB_REL_TESTTYPE.TEST_TYPE_CODE ='" + $test_type + "'";
  } else {
    $test_type = "";
  }
  $condition +=
    $inspect_time_checkvalue +
    $input_code_cms +
    $input_code_KD +
    $ycsx_no +
    $m_name +
    $m_code +
    $test_name +
    $test_type +
    $id;
  return $condition;
}
function generate_condition_pqc1(
  $inspect_time_checkvalue,
  $start_date,
  $end_date,
  $input_cust_name,
  $input_code_cms,
  $input_code_KD,
  $ycsx_no,
  $process_lot_no,
  $inspec_ID,
  $inspect_factory,
  $ctr_cd
) {
  $condition = "WHERE ZTBPQC1TABLE.CTR_CD= '" + $ctr_cd + "' ";
  if ($inspect_time_checkvalue == false) {
    $inspect_time_checkvalue =
      " AND SETTING_OK_TIME BETWEEN '" +
      $start_date +
      " 00:00:00' AND  '" +
      $end_date +
      " 23:59:59' ";
  } else {
    $inspect_time_checkvalue = "";
  }
  if ($input_cust_name != "") {
    $input_cust_name =
      " AND M110.CUST_NAME_KD LIKE '%" + $input_cust_name + "%'";
  }
  if ($input_code_cms != "") {
    $input_code_cms = " AND M100.G_CODE = '" + $input_code_cms + "'";
  }
  if ($input_code_KD != "") {
    $input_code_KD = " AND M100.G_NAME LIKE  '%" + $input_code_KD + "%'";
  }
  if ($ycsx_no != "") {
    $ycsx_no = " AND P400.PROD_REQUEST_NO = '" + $ycsx_no + "'";
  }
  if ($process_lot_no != "") {
    $process_lot_no =
      " AND ZTBPQC1TABLE.PROCESS_LOT_NO = '" + $process_lot_no + "'";
  }
  if ($inspec_ID != "") {
    $inspec_ID = " AND ZTBPQC1TABLE.PQC1_ID = '" + $inspec_ID + "'";
  }
  if ($inspect_factory != "All") {
    $inspect_factory = " AND ZTBPQC1TABLE.FACTORY = '" + $inspect_factory + "'";
  } else {
    $inspect_factory = "";
  }
  $condition =
    $condition +
    $inspect_time_checkvalue +
    $input_cust_name +
    $input_code_cms +
    $input_code_KD +
    $ycsx_no +
    $process_lot_no +
    $inspec_ID +
    $inspect_factory;
  return $condition;
}
function generate_condition_pqc3(
  $inspect_time_checkvalue,
  $start_date,
  $end_date,
  $input_cust_name,
  $input_code_cms,
  $input_code_KD,
  $ycsx_no,
  $process_lot_no,
  $inspec_ID,
  $inspect_factory,
  $ctr_cd
) {
  $condition = "WHERE ZTBPQC3TABLE.CTR_CD ='" + $ctr_cd + "' ";
  if ($inspect_time_checkvalue == false) {
    $inspect_time_checkvalue =
      " AND OCCURR_TIME BETWEEN '" +
      $start_date +
      " 00:00:00' AND  '" +
      $end_date +
      " 23:59:59' ";
  } else {
    $inspect_time_checkvalue = "";
  }
  if ($input_cust_name != "") {
    $input_cust_name =
      " AND M110.CUST_NAME_KD LIKE '%" + $input_cust_name + "%'";
  }
  if ($input_code_cms != "") {
    $input_code_cms = " AND M100.G_CODE = '" + $input_code_cms + "'";
  }
  if ($input_code_KD != "") {
    $input_code_KD = " AND M100.G_NAME LIKE  '%" + $input_code_KD + "%'";
  }
  if ($ycsx_no != "") {
    $ycsx_no = " AND ZTBPQC3TABLE.PROD_REQUEST_NO = '" + $ycsx_no + "'";
  }
  if ($process_lot_no != "") {
    $process_lot_no =
      " AND ZTBPQC3TABLE.PROCESS_LOT_NO = '" + $process_lot_no + "'";
  }
  if ($inspec_ID != "") {
    $inspec_ID = " AND ZTBPQC3TABLE.PQC3_ID = '" + $inspec_ID + "'";
  }
  if ($inspect_factory != "All") {
    $inspect_factory = " AND ZTBPQC1TABLE.FACTORY = '" + $inspect_factory + "'";
  } else {
    $inspect_factory = "";
  }
  $condition =
    $condition +
    $inspect_time_checkvalue +
    $input_cust_name +
    $input_code_cms +
    $input_code_KD +
    $ycsx_no +
    $process_lot_no +
    $inspec_ID +
    $inspect_factory;
  return $condition;
}
function returnDateFormat(today) {
  let year = today.getFullYear();
  let month = today.getMonth();
  let date = today.getDate();
  if (month + 1 < 10) month = "0" + (month + 1);
  if (date < 10) date = "0" + date;
  return year + "-" + month + "-" + date;
}
const config = {
  user: process.env.DB_USER,
  password: process.env.DB_PASS,
  server: process.env.DB_SERVER,
  database: process.env.DB_NAME,
  port: parseInt(process.env.DB_PORT),
  trustServerCertificate: true,
  requestTimeout: 300000,
};
exports.openConnection = function () {
  sql.connect(config);
}
function isNumber(str) {
  return /^[0-9]+$/.test(str) && str.length == 4;
}
function asyncQuery2(queryString) {
  return new Promise((resolve, reject) => {
    sql.connect(config, (err) => {
      if (err) console.log(err);
      let sqlRequest = new sql.Request();
      sqlRequest.query(queryString, function (err, data) {
        if (err) {
          //console.log("co loi tron async " + err + ' ');
          return reject(err + " ");
        }
        return resolve("OK");
      });
    });
  }).catch((err) => {
    //console.log("Loi dc catch 2: " + err + ' ');
  });
}
function asyncQuery(queryString) {
  return new Promise((resolve, reject) => {
    sql.connect(config, (err) => {
      if (err) console.log(err);
      let sqlRequest = new sql.Request();
      sqlRequest.query(queryString, function (err, data) {
        if (err) {
          //console.log(err);
          return reject(err);
        }
        var rs = data.recordset;
        if (rs.hasOwnProperty("length")) {
          // //console.log("co property");
        } else {
          //  //console.log("khong co property");
        }
        ////console.log('length of dataset: ' + rs.length);
        let kk;
        if (rs.length != 0) {
          kk = JSON.stringify(rs);
          resolve(kk);
        } else {
          resolve(0);
        }
      });
    });
  }).catch((err) => {
    //console.log("Loi dc catch: " + err + ' ');
  });
}
const queryDB = async (query) => {
  let kq = "";
  try {
    //await sql.connect(config);    
    //await sql.connect('Server=192.168.1.2,5005;Database=CMS_VINA;User Id=sa;Password=*11021201$; MultipleActiveResultSets=True; Encrypt=false');   
    const result = await sql.query(query);
    if (result.rowsAffected[0] > 0) {
      if (result.recordset) {
        kq = { tk_status: "OK", data: result.recordset };
      } else {
        kq = { tk_status: "OK", message: "Modify data thanh cong" };
      }
    } else {
      kq = { tk_status: "NG", message: "Không có dòng dữ liệu nào" };
    }
    //await sql.close();
  } catch (err) {
    ////console.log(err);
    kq = { tk_status: "NG", message: err + " " };
  }
  return kq;
};
exports.checklogin_index = function (req, res, next) {
  ////console.log("bam login ma cung loi?");
  try {
    ////console.log("token client la: " + req.cookies.token);
    var token = req.cookies.token;
    //console.log('token= ' + token);
    //console.log("req", req);
    if (token === undefined)
      token =
        req.body.DATA?.token_string === undefined
          ? req.body.token_string
          : req.body.DATA.token_string;
    //console.log('req', req);
    var decoded = jwt.verify(token, "nguyenvanhung");
    //console.log(decoded);
    //console.log(decoded["exp"]);
    let payload_json = JSON.parse(decoded["payload"]);
    //console.log(payload_json);
    //console.log(payload_json[0]);
    ////console.log('Cookie client = ' + req.cookies.token);
    req.payload_data = payload_json[0];
    ////console.log(payload_json);
    if (payload_json[0]["WORK_STATUS_CODE"] === 0) {
      req.coloiko = "coloi";
    } else {
      req.coloiko = "kocoloi";
    }
    next();
  } catch (err) {
    console.log("Loi check login index = " + err + " ");
    req.coloiko = "coloi";
    next();
  }
};
exports.checklogin_index_update = function (req, res, next) {
  ////console.log("bam login ma cung loi?");
  try {
    req.coloiko = "kocoloi";
    next();
  } catch (err) {
    console.log("Loi check login index = " + err + " ");
    req.coloiko = "coloi";
    next();
  }
};
exports.checklogin_login = function (req, res, next) {
  try {
    console.log("token client la: " + req.cookies.token);
    var token = req.cookies.token;
    var decoded = jwt.verify(token, "nguyenvanhung");
    console.log("token= " + token);
    let payload_json = JSON.parse(decoded["payload"]);
    ////console.log(payload_json[0]);
    ////console.log('Cookie client = ' + req.cookies.token);
    req.payload_data = payload_json[0];
    //console.log("Di qua check login-login");
    res.redirect("/");
    next();
  } catch (err) {
    //console.log('Chua dang nhap nen fai ve day ' + err + ' ');
    next();
  }
};
exports.process_api = function async(req, res) {
  ////console.log(req.files.file);
  //let nhanvien = req.payload_data['EMPL_NO'];
  var qr = req.body;
  let rightnow = new Date().toLocaleString();
  /*     if(req?.payload_data['EMPL_NO']!== undefined) console.log(req.payload_data['EMPL_NO']); */
  console.log(moment().format("YYYY-MM-DD HH:mm:ss") + ":" + qr["command"]);
  let DATA = qr["DATA"];
  if (
    1 /* qr["command"] ==='login' || req.payload_data["EMPL_NO"]==='NHU1903' */
  ) {
    switch (qr["command"]) {
      case "check_chua_pd":
        s(async () => {
          var today = new Date();
          var today_format = moment().format("YYYY-MM-DD");
          //console.log(today_format);
          let kqua;
          let query = `SELECT COUNT(EMPL_NO) AS CPD FROM ZTBOFFREGISTRATIONTB WHERE CTR_CD='${DATA.CTR_CD}' AND APPLY_DATE = '${today_format}' AND APPROVAL_STATUS = 2`;
          kqua = await asyncQuery(query);
          let chuapdqty = JSON.parse(kqua)[0]["CPD"];
          //console.log(chuapdqty);
          res.send(chuapdqty + "");
        })();
        break;
      case "login2":
        try {
          let DATA = qr["DATA"];
          let username = DATA.user;
          let password = DATA.pass;
          var loginResult = false;
          (async () => {
            let kqua;
            let query =
              `SELECT ZTBEMPLINFO.CTR_CD,ZTBEMPLINFO.EMPL_NO,ZTBEMPLINFO.CMS_ID,ZTBEMPLINFO.FIRST_NAME,ZTBEMPLINFO.MIDLAST_NAME,ZTBEMPLINFO.DOB,ZTBEMPLINFO.HOMETOWN,ZTBEMPLINFO.SEX_CODE,ZTBEMPLINFO.ADD_PROVINCE,ZTBEMPLINFO.ADD_DISTRICT,ZTBEMPLINFO.ADD_COMMUNE,ZTBEMPLINFO.ADD_VILLAGE,ZTBEMPLINFO.PHONE_NUMBER,ZTBEMPLINFO.WORK_START_DATE,ZTBEMPLINFO.PASSWORD,ZTBEMPLINFO.EMAIL,ZTBEMPLINFO.WORK_POSITION_CODE,ZTBEMPLINFO.WORK_SHIFT_CODE,ZTBEMPLINFO.POSITION_CODE,ZTBEMPLINFO.JOB_CODE,ZTBEMPLINFO.FACTORY_CODE,ZTBEMPLINFO.WORK_STATUS_CODE,ZTBEMPLINFO.REMARK,ZTBEMPLINFO.ONLINE_DATETIME,ZTBSEX.SEX_NAME,ZTBSEX.SEX_NAME_KR,ZTBWORKSTATUS.WORK_STATUS_NAME,ZTBWORKSTATUS.WORK_STATUS_NAME_KR,ZTBFACTORY.FACTORY_NAME,ZTBFACTORY.FACTORY_NAME_KR,ZTBJOB.JOB_NAME,ZTBJOB.JOB_NAME_KR,ZTBPOSITION.POSITION_NAME,ZTBPOSITION.POSITION_NAME_KR,ZTBWORKSHIFT.WORK_SHIF_NAME,ZTBWORKSHIFT.WORK_SHIF_NAME_KR,ZTBWORKPOSITION.SUBDEPTCODE,ZTBWORKPOSITION.WORK_POSITION_NAME,ZTBWORKPOSITION.WORK_POSITION_NAME_KR,ZTBWORKPOSITION.ATT_GROUP_CODE,ZTBSUBDEPARTMENT.MAINDEPTCODE,ZTBSUBDEPARTMENT.SUBDEPTNAME,ZTBSUBDEPARTMENT.SUBDEPTNAME_KR,ZTBMAINDEPARMENT.MAINDEPTNAME,ZTBMAINDEPARMENT.MAINDEPTNAME_KR FROM ZTBEMPLINFO LEFT JOIN ZTBSEX ON (ZTBSEX.SEX_CODE = ZTBEMPLINFO.SEX_CODE AND ZTBSEX.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBWORKSTATUS ON (ZTBWORKSTATUS.WORK_STATUS_CODE = ZTBEMPLINFO.WORK_STATUS_CODE AND ZTBWORKSTATUS.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBFACTORY ON (ZTBFACTORY.FACTORY_CODE = ZTBEMPLINFO.FACTORY_CODE AND ZTBFACTORY.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBJOB ON (ZTBJOB.JOB_CODE = ZTBEMPLINFO.JOB_CODE AND ZTBJOB.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBPOSITION ON (ZTBPOSITION.POSITION_CODE = ZTBEMPLINFO.POSITION_CODE AND ZTBPOSITION.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBWORKSHIFT ON (ZTBWORKSHIFT.WORK_SHIFT_CODE = ZTBEMPLINFO.WORK_SHIFT_CODE AND ZTBWORKSHIFT.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBWORKPOSITION ON (ZTBWORKPOSITION.WORK_POSITION_CODE = ZTBEMPLINFO.WORK_POSITION_CODE AND ZTBWORKPOSITION.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBSUBDEPARTMENT ON (ZTBSUBDEPARTMENT.SUBDEPTCODE = ZTBWORKPOSITION.SUBDEPTCODE AND ZTBSUBDEPARTMENT.CTR_CD = ZTBWORKPOSITION.CTR_CD) LEFT JOIN ZTBMAINDEPARMENT ON (ZTBMAINDEPARMENT.MAINDEPTCODE = ZTBSUBDEPARTMENT.MAINDEPTCODE AND ZTBMAINDEPARMENT.CTR_CD = ZTBSUBDEPARTMENT.CTR_CD)  WHERE ZTBEMPLINFO.CTR_CD='${DATA.CTR_CD}' AND ZTBEMPLINFO.EMPL_NO = '${username}' AND PASSWORD = '${password}'`;
            kqua = await asyncQuery(query);
            ////console.log(kqua);
            loginResult = kqua;
            //console.log("KET QUA LOGIN = " + loginResult);
            if (loginResult != 0) {
              var token = jwt.sign({ payload: loginResult }, "nguyenvanhung", {
                expiresIn: 3600 * 100000,
              });
              res.cookie("token", token);
              ////console.log(token);
              res.send({
                tk_status: "ok",
                token_content: token,
                user_data: loginResult,
              });
              //console.log('login thanh cong');
            } else {
              res.send({ tk_status: "ng", token_content: token, message: "Tên đăng nhập hoặc mật khẩu sai" });
              //console.log('login that bai');
            }
          })();
        } catch (err) {
          //console.log("Loi day neh: " + err + ' ');
        }
        break;
      case "login3":
        try {
          (async () => {
            let kqua;
            let query =
              `SELECT ZTBEMPLINFO.CTR_CD,ZTBEMPLINFO.EMPL_NO,ZTBEMPLINFO.CMS_ID,ZTBEMPLINFO.FIRST_NAME,ZTBEMPLINFO.MIDLAST_NAME,ZTBEMPLINFO.DOB,ZTBEMPLINFO.HOMETOWN,ZTBEMPLINFO.SEX_CODE,ZTBEMPLINFO.ADD_PROVINCE,ZTBEMPLINFO.ADD_DISTRICT,ZTBEMPLINFO.ADD_COMMUNE,ZTBEMPLINFO.ADD_VILLAGE,ZTBEMPLINFO.PHONE_NUMBER,ZTBEMPLINFO.WORK_START_DATE,ZTBEMPLINFO.PASSWORD,ZTBEMPLINFO.EMAIL,ZTBEMPLINFO.WORK_POSITION_CODE,ZTBEMPLINFO.WORK_SHIFT_CODE,ZTBEMPLINFO.POSITION_CODE,ZTBEMPLINFO.JOB_CODE,ZTBEMPLINFO.FACTORY_CODE,ZTBEMPLINFO.WORK_STATUS_CODE,ZTBEMPLINFO.REMARK,ZTBEMPLINFO.ONLINE_DATETIME,ZTBSEX.SEX_NAME,ZTBSEX.SEX_NAME_KR,ZTBWORKSTATUS.WORK_STATUS_NAME,ZTBWORKSTATUS.WORK_STATUS_NAME_KR,ZTBFACTORY.FACTORY_NAME,ZTBFACTORY.FACTORY_NAME_KR,ZTBJOB.JOB_NAME,ZTBJOB.JOB_NAME_KR,ZTBPOSITION.POSITION_NAME,ZTBPOSITION.POSITION_NAME_KR,ZTBWORKSHIFT.WORK_SHIF_NAME,ZTBWORKSHIFT.WORK_SHIF_NAME_KR,ZTBWORKPOSITION.SUBDEPTCODE,ZTBWORKPOSITION.WORK_POSITION_NAME,ZTBWORKPOSITION.WORK_POSITION_NAME_KR,ZTBWORKPOSITION.ATT_GROUP_CODE,ZTBSUBDEPARTMENT.MAINDEPTCODE,ZTBSUBDEPARTMENT.SUBDEPTNAME,ZTBSUBDEPARTMENT.SUBDEPTNAME_KR,ZTBMAINDEPARMENT.MAINDEPTNAME,ZTBMAINDEPARMENT.MAINDEPTNAME_KR FROM ZTBEMPLINFO LEFT JOIN ZTBSEX ON (ZTBSEX.SEX_CODE = ZTBEMPLINFO.SEX_CODE AND ZTBSEX.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBWORKSTATUS ON(ZTBWORKSTATUS.WORK_STATUS_CODE = ZTBEMPLINFO.WORK_STATUS_CODE AND ZTBWORKSTATUS.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBFACTORY ON (ZTBFACTORY.FACTORY_CODE = ZTBEMPLINFO.FACTORY_CODE AND ZTBFACTORY.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBJOB ON (ZTBJOB.JOB_CODE = ZTBEMPLINFO.JOB_CODE AND ZTBJOB.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBPOSITION ON (ZTBPOSITION.POSITION_CODE = ZTBEMPLINFO.POSITION_CODE AND ZTBPOSITION.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBWORKSHIFT ON (ZTBWORKSHIFT.WORK_SHIFT_CODE = ZTBEMPLINFO.WORK_SHIFT_CODE AND ZTBWORKSHIFT.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBWORKPOSITION ON (ZTBWORKPOSITION.WORK_POSITION_CODE = ZTBEMPLINFO.WORK_POSITION_CODE AND ZTBWORKPOSITION.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBSUBDEPARTMENT ON (ZTBSUBDEPARTMENT.SUBDEPTCODE = ZTBWORKPOSITION.SUBDEPTCODE AND ZTBSUBDEPARTMENT.CTR_CD = ZTBWORKPOSITION.CTR_CD) LEFT JOIN ZTBMAINDEPARMENT ON (ZTBMAINDEPARMENT.MAINDEPTCODE = ZTBSUBDEPARTMENT.MAINDEPTCODE AND ZTBMAINDEPARMENT.CTR_CD = ZTBSUBDEPARTMENT.CTR_CD) WHERE  ZTBEMPLINFO.CTR_CD='${DATA.CTR_CD}'`;
            kqua = await asyncQuery(query);
            ////console.log(kqua);
            loginResult = kqua;
            //console.log("KET QUA LOGIN = " + loginResult);
            if (loginResult != 0) {
              var token = jwt.sign({ payload: loginResult }, "nguyenvanhung", {
                expiresIn: 3600 * 100000,
              });
              res.cookie("token", token);
              ////console.log(token);
              //res.send({ tk_status: "ok", token_content: token, user_data: loginResult });
              //console.log('login thanh cong');
              res.send(kqua);
            } else {
              res.send(kqua);
              //res.send({ tk_status: "ng", token_content: token });
              //console.log('login that bai');
            }
          })();
        } catch (err) {
          //console.log("Loi day neh: " + err + ' ');
        }
        break;
      case "login":
        //console.log("post request from login page !");
        //console.log('USER = ' + qr['user']);
        //console.log('PASS = ' + qr['pass']);
        try {
          (async () => {
            let username = qr["user"];
            let password = qr["pass"];
            let ctr_cd = qr["ctr_cd"];
            let kqua;
            let query = `SELECT ZTBEMPLINFO.EMPL_IMAGE,ZTBEMPLINFO.CTR_CD,ZTBEMPLINFO.EMPL_NO,ZTBEMPLINFO.CMS_ID,ZTBEMPLINFO.FIRST_NAME,ZTBEMPLINFO.MIDLAST_NAME,ZTBEMPLINFO.DOB,ZTBEMPLINFO.HOMETOWN,ZTBEMPLINFO.SEX_CODE,ZTBEMPLINFO.ADD_PROVINCE,ZTBEMPLINFO.ADD_DISTRICT,ZTBEMPLINFO.ADD_COMMUNE,ZTBEMPLINFO.ADD_VILLAGE,ZTBEMPLINFO.PHONE_NUMBER,ZTBEMPLINFO.WORK_START_DATE,ZTBEMPLINFO.PASSWORD,ZTBEMPLINFO.EMAIL,ZTBEMPLINFO.WORK_POSITION_CODE,ZTBEMPLINFO.WORK_SHIFT_CODE,ZTBEMPLINFO.POSITION_CODE,ZTBEMPLINFO.JOB_CODE,ZTBEMPLINFO.FACTORY_CODE,ZTBEMPLINFO.WORK_STATUS_CODE,ZTBEMPLINFO.REMARK,ZTBEMPLINFO.ONLINE_DATETIME,ZTBSEX.SEX_NAME,ZTBSEX.SEX_NAME_KR,ZTBWORKSTATUS.WORK_STATUS_NAME,ZTBWORKSTATUS.WORK_STATUS_NAME_KR,ZTBFACTORY.FACTORY_NAME,ZTBFACTORY.FACTORY_NAME_KR,ZTBJOB.JOB_NAME,ZTBJOB.JOB_NAME_KR,ZTBPOSITION.POSITION_NAME,ZTBPOSITION.POSITION_NAME_KR,ZTBWORKSHIFT.WORK_SHIF_NAME,ZTBWORKSHIFT.WORK_SHIF_NAME_KR,ZTBWORKPOSITION.SUBDEPTCODE,ZTBWORKPOSITION.WORK_POSITION_NAME,ZTBWORKPOSITION.WORK_POSITION_NAME_KR,ZTBWORKPOSITION.ATT_GROUP_CODE,ZTBSUBDEPARTMENT.MAINDEPTCODE,ZTBSUBDEPARTMENT.SUBDEPTNAME,ZTBSUBDEPARTMENT.SUBDEPTNAME_KR,ZTBMAINDEPARMENT.MAINDEPTNAME,ZTBMAINDEPARMENT.MAINDEPTNAME_KR FROM ZTBEMPLINFO LEFT JOIN ZTBSEX ON (ZTBSEX.SEX_CODE = ZTBEMPLINFO.SEX_CODE AND ZTBSEX.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBWORKSTATUS ON(ZTBWORKSTATUS.WORK_STATUS_CODE = ZTBEMPLINFO.WORK_STATUS_CODE AND ZTBWORKSTATUS.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBFACTORY ON (ZTBFACTORY.FACTORY_CODE = ZTBEMPLINFO.FACTORY_CODE AND ZTBFACTORY.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBJOB ON (ZTBJOB.JOB_CODE = ZTBEMPLINFO.JOB_CODE AND ZTBJOB.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBPOSITION ON (ZTBPOSITION.POSITION_CODE = ZTBEMPLINFO.POSITION_CODE AND ZTBPOSITION.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBWORKSHIFT ON (ZTBWORKSHIFT.WORK_SHIFT_CODE = ZTBEMPLINFO.WORK_SHIFT_CODE AND ZTBWORKSHIFT.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBWORKPOSITION ON (ZTBWORKPOSITION.WORK_POSITION_CODE = ZTBEMPLINFO.WORK_POSITION_CODE AND ZTBWORKPOSITION.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBSUBDEPARTMENT ON (ZTBSUBDEPARTMENT.SUBDEPTCODE = ZTBWORKPOSITION.SUBDEPTCODE AND ZTBSUBDEPARTMENT.CTR_CD = ZTBWORKPOSITION.CTR_CD) LEFT JOIN ZTBMAINDEPARMENT ON (ZTBMAINDEPARMENT.MAINDEPTCODE = ZTBSUBDEPARTMENT.MAINDEPTCODE AND ZTBMAINDEPARMENT.CTR_CD = ZTBSUBDEPARTMENT.CTR_CD) WHERE ZTBEMPLINFO.CTR_CD='${ctr_cd}' AND ZTBEMPLINFO.EMPL_NO = '${username}' AND PASSWORD = '${password}'`;
            kqua = await asyncQuery(query);
            //console.log('kqua',kqua);
            loginResult = kqua;
            //console.log("KET QUA LOGIN = " + loginResult);
            if (loginResult != 0) {
              var token = jwt.sign({ payload: loginResult }, "nguyenvanhung", {
                expiresIn: 3600 * 24 * 1,
              });
              res.cookie("token", token);
              ////console.log(token);
              res.send({
                tk_status: "ok",
                token_content: token,
                userData: loginResult,
              });
              //console.log('login thanh cong');
            } else {
              res.send({ tk_status: "ng", token_content: token });
              console.log({ tk_status: "ng", token_content: token });
              //console.log('login that bai');
            }
          })();
        } catch (err) {
          //console.log("Loi day neh: " + err + ' ');
        }
        break;
      case "logout":
        res.cookie("token", "reset");
        res.send("loged out");
        break;
      case "checklogin":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `SELECT WORK_STATUS_CODE FROM ZTBEMPLINFO WHERE EMPL_NO='${EMPL_NO}' AND CTR_CD='${DATA.CTR_CD}'`;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log('ketqua check login',checkkq);
          if (checkkq.data[0].WORK_STATUS_CODE === 0) {
            res.send({ tk_status: "ng", message: "Đã nghỉ việc" });
          } else {
            res.send({ tk_status: "ok", data: req.payload_data });
          }
        })();
        //console.log(qr['command']);
        break;
      case "insertchat":
        (async () => {
          let EMPL_NO = qr["EMPL_NO"];
          let CHATTIME = moment().format("YYYY-MM-DD HH:mm:ss");
          ////console.log(CHATTIME);
          let MESSAGE = qr["MESSAGE"];
          let checkkq = "OK";
          let setpdQuery = `INSERT INTO ZCHATTB (CTR_CD,EMPL_NO,CHATTIME,MESSAGE) VALUES ('${DATA.CTR_CD}','${EMPL_NO}','${CHATTIME}',N'${MESSAGE}')`;
          checkkq = await asyncQuery2(setpdQuery);
          if (checkkq != "OK") {
            res.send({
              tk_status: "NG",
              message: "Có lỗi khi lưu tin nhắn lên hệ thống",
            });
          } else {
            res.send({ tk_status: "OK" });
          }
        })();
        break;
      case "getchat":
        (async () => {
          let kqua;
          let query = `SELECT TOP 1000 ZCHATTB.EMPL_NO, CHATTIME, ZCHATTB.MESSAGE, ZTBEMPLINFO.MIDLAST_NAME, ZTBEMPLINFO.FIRST_NAME FROM ZCHATTB JOIN ZTBEMPLINFO ON (ZTBEMPLINFO.EMPL_NO = ZCHATTB.EMPL_NO AND ZTBEMPLINFO.CTR_CD = ZCHATTB.CTR_CD) WHERE ZCHATTB.CTR_CD='${DATA.CTR_CD}' ORDER BY CHATTIME ASC`;
          kqua = await asyncQuery(query);
          if (kqua == 0) {
            res.send({ tk_status: "NG", data: kqua });
          } else {
            res.send({ tk_status: "OK", data: kqua });
          }
        })();
        break;
      case "insert_pqc1":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `INSERT INTO ZTBPQC1TABLE (CTR_CD,PROCESS_LOT_NO,LINEQC_PIC,PROD_PIC,PROD_LEADER,STEPS,CAVITY,SETTING_OK_TIME,FACTORY,REMARK,INS_DATE,REMARK2,PROD_REQUEST_NO,G_CODE,PLAN_ID,PROCESS_NUMBER,LINE_NO) VALUES('${DATA.CTR_CD}','${DATA.PROCESS_LOT_NO}','${DATA.LINEQC_PIC}','${DATA.PROD_PIC}','${DATA.PROD_LEADER}','${DATA.STEPS}','${DATA.CAVITY}','${DATA.SETTING_OK_TIME}','${DATA.FACTORY}','${DATA.REMARK}',GETDATE(),'${DATA.REMARK}','${DATA.PROD_REQUEST_NO}','${DATA.G_CODE}','${DATA.PLAN_ID}','${DATA.PROCESS_NUMBER}','${DATA.LINE_NO}')`;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "updatepqc1sampleqty":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `UPDATE ZTBPQC1TABLE SET INSPECT_SAMPLE_QTY=${DATA.INSPECT_SAMPLE_QTY} WHERE CTR_CD='${DATA.CTR_CD}' AND PQC1_ID=${DATA.PQC1_ID}`;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "getpqc1id":
        (async () => {
          let EMPL_NO = qr["EMPL_NO"];
          let PROCESS_LOT_NO = qr["PROCESS_LOT_NO"];
          let kqua;
          let query = `SELECT PQC1_ID FROM ZTBPQC1TABLE WHERE CTR_CD='${DATA.CTR_CD}' AND LINEQC_PIC='${EMPL_NO}' AND PROCESS_LOT_NO='${PROCESS_LOT_NO}'`;
          ////console.log(query);
          kqua = await queryDB(query);
          res.send(kqua);
        })();
        break;
      case "insert_pqc2":
        (async () => {
          ////console.log(DATA);
          let currenttime = moment().format("YYYY-MM-DD HH:mm:ss");
          let checkkq = "OK";
          let setpdQuery = `INSERT INTO ZTBPQC2TABLE (CTR_CD, PROCESS_LOT_NO, LINEQC_PIC, TIME1, TIME2, TIME3, CHECK1, CHECK2, CHECK3, REMARK, INS_DATE, UPD_DATE, PQC1_ID) VALUES ('${DATA.CTR_CD}','${DATA.PROCESS_LOT_NO}','${DATA.LINEQC_PIC}','${DATA.CHECKSHEET.TIME1}','${DATA.CHECKSHEET.TIME2}','${DATA.CHECKSHEET.TIME3}','${DATA.CHECKSHEET.CHECK1}','${DATA.CHECKSHEET.CHECK2}','${DATA.CHECKSHEET.CHECK3}','${DATA.REMARK}','${currenttime}','${currenttime}',${DATA.PQC1_ID})`;
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
        })();
        break;
      case "insert_pqc3":
        (async () => {
          ////console.log(DATA);
          let currenttime = moment().format("YYYY-MM-DD HH:mm:ss");
          let checkkq = "OK";
          let setpdQuery = `INSERT INTO ZTBPQC3TABLE (CTR_CD, PROCESS_LOT_NO, LINEQC_PIC, OCCURR_TIME, INSPECT_QTY, DEFECT_QTY, DEFECT_PHENOMENON, DEFECT_IMAGE_LINK, REMARK, INS_DATE, UPD_DATE, PQC1_ID, ERR_CODE, PROD_REQUEST_NO, G_CODE) VALUES('${DATA.CTR_CD}','${DATA.PROCESS_LOT_NO}','${DATA.LINEQC_PIC}','${DATA.OCCURR_TIME}',${DATA.INSPECT_QTY},${DATA.DEFECT_QTY},N'${DATA.DEFECT_PHENOMENON}','${DATA.DEFECT_IMAGE_LINK}',N'${DATA.REMARK}','${currenttime}','${currenttime}',${DATA.PQC1_ID},'${DATA.ERR_CODE}','${DATA.PROD_REQUEST_NO}','${DATA.G_CODE}')`;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
        })();
        break;
      case "checkktdtc":
        (async () => {
          let kqua;
          let query = `SELECT * FROM (SELECT  P501.CTR_CD,P500.M_CODE, SUBSTRING(P501.M_LOT_NO,0,7) AS LOT_TO, M090.WIDTH_CD FROM P501 JOIN P500 ON (P501.PROCESS_IN_DATE =P500.PROCESS_IN_DATE AND P501.PROCESS_IN_NO =P500.PROCESS_IN_NO AND P501.PROCESS_IN_SEQ =P500.PROCESS_IN_SEQ AND P501.CTR_CD =P500.CTR_CD) JOIN M090 ON  (M090.M_CODE = P500.M_CODE AND M090.CTR_CD = P500.CTR_CD) WHERE P501.CTR_CD='${DATA.CTR_CD}' AND P501.PROCESS_LOT_NO='${DATA.PROCESS_LOT_NO}') AS AA JOIN (SELECT CTR_CD,TRANGTHAI, M_CODE, SIZE, LOTCMS FROM NHAP_NVL WHERE CTR_CD='${DATA.CTR_CD}') AS BB ON (AA.LOT_TO = BB.LOTCMS AND AA.M_CODE =  BB.M_CODE AND AA.WIDTH_CD = BB.SIZE AND AA.CTR_CD = BB.CTR_CD) WHERE AA.CTR_CD='${DATA.CTR_CD}'`;
          ////console.log(query);
          kqua = await queryDB(query);
          res.send(kqua);
        })();
        break;
      case "checkMNAME":
        (async () => {
          let kqua;
          let query = `SELECT DISTINCT M_NAME FROM M090 WHERE M_NAME LIKE '%${DATA.M_NAME}%' AND CTR_CD='${DATA.CTR_CD}'`;
          ////console.log(query);
          kqua = await queryDB(query);
          res.send(kqua);
        })();
        break;
      case "checkMNAMEfromLot":
        (async () => {
          let kqua;
          let query = `SELECT O302.PLAN_ID, I222.LOTNCC, O302.LOC_CD, O302.WAHS_CD, O302.M_CODE, M090.M_NAME, M090.WIDTH_CD, O302.OUT_CFM_QTY, O302.ROLL_QTY, O302.LIEUQL_SX, O302.OUT_DATE FROM O302 JOIN M090 ON (M090.M_CODE = O302.M_CODE AND M090.CTR_CD = O302.CTR_CD) LEFT JOIN I222 ON (I222.M_LOT_NO = O302.M_LOT_NO AND I222.CTR_CD = O302.CTR_CD AND I222.CTR_CD = M090.CTR_CD) WHERE O302.M_LOT_NO='${DATA.M_LOT_NO}' AND O302.CTR_CD='${DATA.CTR_CD}'`;
          //console.log(query);
          kqua = await queryDB(query);
          res.send(kqua);
        })();
        break;
      case "checkMNAMEfromLotI222XuatKho":
        (async () => {
          let kqua;
          let query = `SELECT RETURNVLTB.RETURN_QTY, I222.USE_YN, CHITHITB.LIEUQL_SX, I222.LOC_CD, I222.WAHS_CD,  M110.CUST_NAME_KD, I222.CUST_CD, I222.M_CODE, M090.M_NAME, M090.WIDTH_CD, I222.IN_CFM_QTY, I222.ROLL_QTY, I222.IN_DATE, M110.CUST_NAME_KD, M090.FSC, M090.FSC_CODE FROM I222 
          LEFT JOIN M090 ON (M090.M_CODE = I222.M_CODE AND M090.CTR_CD = I222.CTR_CD) 
          LEFT JOIN M110 ON (M110.CUST_CD = I222.CUST_CD AND M110.CTR_CD = I222.CTR_CD) 
          LEFT JOIN (SELECT * FROM ZTB_QLSXCHITHI WHERE PLAN_ID='${DATA.PLAN_ID}') AS CHITHITB ON (CHITHITB.M_CODE = I222.M_CODE AND CHITHITB.CTR_CD = I222.CTR_CD)
          LEFT JOIN (SELECT * FROM RETURN_NVL WHERE M_LOT_NO='${DATA.M_LOT_NO}' AND USE_YN='Y') AS RETURNVLTB ON (RETURNVLTB.M_LOT_NO = I222.M_LOT_NO AND RETURNVLTB.CTR_CD = I222.CTR_CD)
          WHERE I222.M_LOT_NO='${DATA.M_LOT_NO}' AND I222.CTR_CD='${DATA.CTR_CD}'`;
          ////console.log(query);
          kqua = await queryDB(query);
          res.send(kqua);
        })();
        break;
      case "checkMNAMEfromLotI222":
        (async () => {
          let kqua;
          let query = `SELECT I221.EXP_DATE, I222.LOTNCC, M110.CUST_NAME_KD, I222.CUST_CD, I222.M_CODE, M090.M_NAME, M090.WIDTH_CD, I222.IN_CFM_QTY, I222.ROLL_QTY FROM I222 JOIN M090 ON (M090.M_CODE = I222.M_CODE AND M090.CTR_CD = I222.CTR_CD) LEFT JOIN M110 ON (M110.CUST_CD = I222.CUST_CD AND M110.CTR_CD = I222.CTR_CD) LEFT JOIN I221 ON (I221.IN_DATE=I222.IN_DATE AND I221.IN_NO=I222.IN_NO AND I221.IN_SEQ=I222.IN_SEQ AND I221.CTR_CD = I222.CTR_CD) WHERE I222.M_LOT_NO='${DATA.M_LOT_NO}' AND I222.CTR_CD='${DATA.CTR_CD}'`;
          ////console.log(query);
          kqua = await queryDB(query);
          res.send(kqua);
        })();
        break;
      case "checkMNAMEfromLotI222Total":
        (async () => {
          let kqua;
          let query = ` SELECT  M_CODE, SUBSTRING(M_LOT_NO,1,6) AS LOTCMS, SUM(IN_CFM_QTY* ROLL_QTY) AS TOTAL_CFM_QTY, SUM(ROLL_QTY) AS TOTAL_ROLL FROM I222 WHERE I222.CTR_CD='${DATA.CTR_CD}' AND M_CODE='${DATA.M_CODE}' AND  SUBSTRING(M_LOT_NO,1,6)='${DATA.LOTCMS}' GROUP BY  M_CODE, SUBSTRING(M_LOT_NO,1,6)  `;
          console.log(query);
          kqua = await queryDB(query);
          console.log(kqua);
          res.send(kqua);
        })();
        break;
      case "checkPQC3_IDfromPLAN_ID":
        (async () => {
          let kqua;
          let query = `SELECT DISTINCT P501.PLAN_ID, ZTBPQC3TABLE.PQC3_ID,  ZTBPQC3TABLE.DEFECT_PHENOMENON FROM P501 LEFT JOIN ZTBPQC3TABLE ON (P501.PROCESS_LOT_NO = ZTBPQC3TABLE.PROCESS_LOT_NO) WHERE P501.PLAN_ID='${DATA.PLAN_ID}' AND P501.CTR_CD='${DATA.CTR_CD}' AND ZTBPQC3TABLE.PQC3_ID is not null`;
          ////console.log(query);
          kqua = await queryDB(query);
          res.send(kqua);
        })();
        break;
      case "workdaycheck":
        (async () => {
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let startOfYear = moment().startOf("year").format("YYYY-MM-DD");
          let kqua;
          let query = `SELECT COUNT(EMPL_NO) AS WORK_DAY FROM ZTBATTENDANCETB WHERE CTR_CD='${DATA.CTR_CD}' AND EMPL_NO='${EMPL_NO}' AND ON_OFF=1 AND APPLY_DATE >='${startOfYear}' `;
          ////console.log(query);
          kqua = await queryDB(query);
          res.send(kqua);
        })();
        break;
      case "tangcadaycheck":
        (async () => {
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let startOfYear = moment().startOf("year").format("YYYY-MM-DD");
          let kqua;
          let query = `SELECT COUNT(EMPL_NO) AS TANGCA_DAY FROM ZTBATTENDANCETB WHERE CTR_CD='${DATA.CTR_CD}' AND EMPL_NO='${EMPL_NO}' AND ON_OFF=1 AND APPLY_DATE >='${startOfYear}' AND OVERTIME=1`;
          ////console.log(query);
          kqua = await queryDB(query);
          res.send(kqua);
        })();
        break;
      case "nghidaycheck":
        (async () => {
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let startOfYear = moment().startOf("year").format("YYYY-MM-DD");
          let kqua;
          let query = `SELECT COUNT(EMPL_NO) AS NGHI_DAY FROM ZTBOFFREGISTRATIONTB WHERE CTR_CD='${DATA.CTR_CD}' AND EMPL_NO = '${EMPL_NO}' AND APPLY_DATE >= '${startOfYear}' AND REASON_CODE <>2`;
          ////console.log(query);
          kqua = await queryDB(query);
          res.send(kqua);
        })();
        break;
      case "xacnhanchamcong":
        (async () => {
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let kqua;
          let query = `UPDATE ZTBATTENDANCETB SET XACNHAN='${DATA.confirm_worktime}' WHERE CTR_CD='${DATA.CTR_CD}' AND EMPL_NO='${EMPL_NO}' AND APPLY_DATE='${DATA.confirm_date}' AND XACNHAN is null`;
          ////console.log(query);
          kqua = await queryDB(query);
          res.send(kqua);
        })();
        break;
      case "countxacnhanchamcong":
        (async () => {
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let kqua;
          let startOfYear = moment().startOf("year").format("YYYY-MM-DD");
          let query = `SELECT COUNT(XACNHAN) AS COUTNXN FROM ZTBATTENDANCETB WHERE CTR_CD='${DATA.CTR_CD}' AND EMPL_NO='${EMPL_NO}' AND XACNHAN is not null AND APPLY_DATE >='${startOfYear}' `;
          ////console.log(query);
          kqua = await queryDB(query);
          res.send(kqua);
        })();
        break;
      case "countthuongphat":
        (async () => {
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let kqua;
          let startOfYear = moment().startOf("year").format("YYYY-MM-DD");
          let querythuong = `SELECT TP_EMPL_NO, SUM(CASE WHEN PL_HINHTHUC='KT' THEN isnull(DIEM,0) ELSE 0 END) AS THUONG, SUM(CASE WHEN PL_HINHTHUC='KL' THEN isnull(DIEM,0)  ELSE 0 END) AS PHAT FROM ZTBTHUONGPHATTB WHERE CTR_CD='${DATA.CTR_CD}' AND TP_EMPL_NO='${EMPL_NO}' GROUP BY TP_EMPL_NO`;
          ////console.log(query);
          kqua = await queryDB(querythuong);
          res.send(kqua);
        })();
        break;
      case "get_invoice":
        //console.log(qr);
        (async () => {
          ////console.log(DATA);
          //let EMPL_NO = req.payload_data['EMPL_NO'];
          let kqua;
          let startOfYear = moment().startOf("year").format("YYYY-MM-DD");
          let query = "";
          switch (DATA.OPTIONS) {
            case "Tra cứu PO":
              //console.log('vao po');
              query = ` SELECT ZTBPOTable.PO_ID,DATEPART(isowk, PO_DATE) AS WEEKNUM,M010.EMPL_NAME,ZTBPOTable.CUST_CD,M110.CUST_NAME_KD,ZTBPOTable.EMPL_NO,ZTBPOTable.G_CODE,M100.G_NAME,M100.G_NAME_KD,ZTBPOTable.PO_NO,ZTBPOTable.PO_DATE,ZTBPOTable.RD_DATE, ZTBPOTable.PROD_PRICE,ZTBPOTable.PO_QTY,  isnull(ZTBDELI.DELIVERY_QTY,0) AS DELIVERY_QTY , (ZTBPOTable.PO_QTY- isnull(ZTBDELI.DELIVERY_QTY,0)) AS PO_BALANCE_QTY,  
                            isnull((ZTBPOTable.PROD_PRICE*ZTBPOTable.PO_QTY),0) AS PO_AMOUNT , isnull((ZTBDELI.DELIVERY_QTY* ZTBPOTable.PROD_PRICE),0) AS DELIVERED_AMOUNT, isnull(((ZTBPOTable.PO_QTY- isnull(ZTBDELI.DELIVERY_QTY,0))*ZTBPOTable.PROD_PRICE),0) AS PO_BALANCE_AMOUNT, M100.PROD_TYPE, M100.PROD_MODEL, M100.PROD_PROJECT, ZTBPOTable.REMARK
                            FROM ZTBPOTable
                            LEFT JOIN M110 ON (M110.CUST_CD = ZTBPOTable.CUST_CD AND M110.CTR_CD = ZTBPOTable.CTR_CD)
                            LEFT JOIN M100 ON (M100.G_CODE = ZTBPOTable.G_CODE AND M100.CTR_CD = ZTBPOTable.CTR_CD)
                            LEFT JOIN (SELECT CTR_CD, CUST_CD, G_CODE, PO_NO, SUM(DELIVERY_QTY) AS DELIVERY_QTY FROM  ZTBDelivery GROUP BY CTR_CD,CUST_CD, PO_NO, G_CODE) AS ZTBDELI ON ( ZTBDELI.PO_NO = ZTBPOTable.PO_NO AND ZTBDELI.G_CODE = ZTBPOTable.G_CODE AND ZTBDELI.CUST_CD = ZTBPOTable.CUST_CD AND ZTBDELI.CTR_CD = ZTBPOTable.CTR_CD)
                            LEFT JOIN M010 ON (ZTBPOTable.EMPL_NO = M010.EMPL_NO AND ZTBPOTable.CTR_CD = M010.CTR_CD)
                            ${generate_condition_get_po(
                DATA.ALLTIME,
                DATA.FROM_DATE,
                DATA.TO_DATE,
                DATA.CUST_NAME,
                DATA.G_CODE,
                DATA.G_NAME,
                DATA.PROD_TYPE,
                DATA.EMPL_NAME,
                DATA.PO_NO,
                "",
                "",
                "",
                "",
                ""
              )}
                            ORDER BY ZTBPOTable.PO_ID DESC`;
              //console.log(query);
              kqua = await queryDB(query);
              ////console.log(kqua);
              res.send(kqua);
              break;
            case "Tra cứu invoice":
              //console.log('vao invoice');
              query = `SELECT M100.G_NAME, ZTBDelivery.G_CODE, M010.EMPL_NAME, M110.CUST_NAME_KD, ZTBDelivery.DELIVERY_DATE, ZTBDelivery.DELIVERY_QTY, ZTBPOTable.PROD_PRICE, (ZTBDelivery.DELIVERY_QTY * ZTBPOTable.PROD_PRICE) AS DELIVERED_AMOUNT, ZTBPOTable.PO_NO, M100.PROD_TYPE FROM ZTBDelivery
                            JOIN M100 ON (M100.G_CODE = ZTBDelivery.G_CODE)
                            JOIN ZTBPOTable ON (ZTBDelivery.G_CODE = ZTBPOTable.G_CODE AND ZTBDelivery.PO_NO = ZTBPOTable.PO_NO AND ZTBDelivery.CUST_CD = ZTBPOTable.CUST_CD)
                            JOIN M110 ON (M110.CUST_CD = ZTBDelivery.CUST_CD AND M110.CTR_CD = ZTBDelivery.CTR_CD)
                            JOIN M010 ON (M010.EMPL_NO = ZTBDelivery.EMPL_NO AND M010.CTR_CD = ZTBDelivery.CTR_CD)
                             ${generate_condition_get_invoice(
                DATA.ALLTIME,
                DATA.FROM_DATE,
                DATA.TO_DATE,
                DATA.CUST_NAME,
                DATA.G_CODE,
                DATA.G_NAME,
                DATA.PROD_TYPE,
                DATA.EMPL_NAME,
                DATA.PO_NO,
                DATA.CTR_CD
              )} ORDER BY ZTBDelivery.DELIVERY_ID DESC`;
              //console.log(query);
              kqua = await queryDB(query);
              ////console.log(kqua);
              res.send(kqua);
              break;
            case "Tra cứu kế hoạch":
              break;
            case "Tra cứu FCST":
              break;
            case "Tra cứu YCSX":
              break;
          }
          //query = `SELECT * FROM ZTBEMPLINFO`;
        })();
        break;
      case "get_inspection":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let kqua;
          let startOfYear = moment().startOf("year").format("YYYY-MM-DD");
          let query = "";
          switch (DATA.OPTIONS) {
            case "Nhập Kiểm (LOT)":
              query = `SELECT ZTBINSPECTINPUTTB.INSPECT_INPUT_ID,M110.CUST_NAME_KD, M010.EMPL_NAME,ZTBINSPECTINPUTTB.G_CODE,M100.G_NAME,M100.PROD_TYPE,M100.G_NAME_KD,ZTBINSPECTINPUTTB.PROD_REQUEST_NO,P400.PROD_REQUEST_DATE,P400.PROD_REQUEST_QTY,ZTBINSPECTINPUTTB.PROCESS_LOT_NO,P501_A.M_LOT_NO,I222.LOTNCC,  P501_A.INS_DATE AS PROD_DATETIME, ZTBINSPECTINPUTTB.INPUT_DATETIME,ZTBINSPECTINPUTTB.INPUT_QTY_EA,ZTBINSPECTINPUTTB.INPUT_QTY_KG,ZTBINSPECTINPUTTB.REMARK,ZTBINSPECTINPUTTB.CNDB_ENCODES,P400.EMPL_NO AS PIC_KD
              FROM ZTBINSPECTINPUTTB
              LEFT JOIN P400 ON (P400.PROD_REQUEST_NO = ZTBINSPECTINPUTTB.PROD_REQUEST_NO AND P400.CTR_CD = ZTBINSPECTINPUTTB.CTR_CD)
              LEFT JOIN M010 ON (M010.EMPL_NO = P400.EMPL_NO AND M010.CTR_CD = P400.CTR_CD)                   
              LEFT JOIN (SELECT * FROM P501 WHERE INS_DATE>'2021-07-01') AS P501_A ON (P501_A.PROCESS_LOT_NO = ZTBINSPECTINPUTTB.PROCESS_LOT_NO AND P501_A.CTR_CD = ZTBINSPECTINPUTTB.CTR_CD)
              LEFT JOIN M100 ON (M100.G_CODE = ZTBINSPECTINPUTTB.G_CODE AND M100.CTR_CD = ZTBINSPECTINPUTTB.CTR_CD)
              LEFT JOIN M110 ON (M110.CUST_CD = P400.CUST_CD AND M110.CTR_CD = P400.CTR_CD)
              LEFT JOIN I222 ON P501_A.M_LOT_NO = I222.M_LOT_NO AND  P501_A.CTR_CD = I222.CTR_CD
                ${generate_condition_get_inspection_input(
                DATA.ALLTIME,
                DATA.FROM_DATE,
                DATA.TO_DATE,
                DATA.CUST_NAME,
                DATA.G_CODE,
                DATA.G_NAME,
                DATA.PROD_TYPE,
                DATA.EMPL_NAME,
                DATA.PROD_REQUEST_NO,
                DATA.CTR_CD
              )}
                            ORDER BY ZTBINSPECTINPUTTB.INSPECT_INPUT_ID DESC`;
              //console.log(query);
              kqua = await queryDB(query);
              ////console.log(kqua);
              res.send(kqua);
              break;
            case "Xuất Kiểm (LOT)":
              query = `SELECT ZTBINSPECTOUTPUTTB.STATUS, ZTBINSPECTOUTPUTTB.INSPECT_OUTPUT_ID,M110.CUST_NAME_KD, M010.EMPL_NAME,ZTBINSPECTOUTPUTTB.G_CODE,M100.G_NAME,M100.PROD_TYPE,M100.G_NAME_KD,ZTBINSPECTOUTPUTTB.PROD_REQUEST_NO,P400.PROD_REQUEST_DATE,P400.PROD_REQUEST_QTY,ZTBINSPECTOUTPUTTB.PROCESS_LOT_NO,P501_A.INS_DATE AS PROD_DATETIME, ZTBINSPECTOUTPUTTB.OUTPUT_DATETIME,ZTBINSPECTOUTPUTTB.OUTPUT_QTY_EA,ZTBINSPECTOUTPUTTB.REMARK,P400.EMPL_NO AS PIC_KD,CASE 
              WHEN (DATEPART(HOUR,OUTPUT_DATETIME) >=8 AND DATEPART(HOUR,OUTPUT_DATETIME) <20) THEN 'CA NGAY'
              ELSE 'CA DEM' END AS CA_LAM_VIEC,
              CASE 
              WHEN DATEPART(HOUR,OUTPUT_DATETIME) < 8  THEN CONVERT(date,DATEADD(DAY,-1,OUTPUT_DATETIME))
              ELSE CONVERT(date,OUTPUT_DATETIME) END  AS NGAY_LAM_VIEC, P501_A.M_LOT_NO, I222.LOTNCC
              FROM ZTBINSPECTOUTPUTTB
              LEFT JOIN P400 ON (P400.PROD_REQUEST_NO = ZTBINSPECTOUTPUTTB.PROD_REQUEST_NO AND P400.CTR_CD = ZTBINSPECTOUTPUTTB.CTR_CD)
              LEFT JOIN M010 ON (M010.EMPL_NO = P400.EMPL_NO AND M010.CTR_CD = P400.CTR_CD)                    
              LEFT JOIN (SELECT * FROM P501 WHERE INS_DATE>'2021-07-01') AS P501_A ON (P501_A.PROCESS_LOT_NO = ZTBINSPECTOUTPUTTB.PROCESS_LOT_NO AND P501_A.CTR_CD = ZTBINSPECTOUTPUTTB.CTR_CD)
              LEFT JOIN M100 ON (M100.G_CODE = ZTBINSPECTOUTPUTTB.G_CODE AND M100.CTR_CD = ZTBINSPECTOUTPUTTB.CTR_CD)
              LEFT JOIN M110 ON (M110.CUST_CD = P400.CUST_CD AND M110.CTR_CD = P400.CTR_CD)
              LEFT JOIN I222 ON P501_A.M_LOT_NO = I222.M_LOT_NO AND P501_A.CTR_CD = I222.CTR_CD
              ${generate_condition_get_inspection_output(
                DATA.ALLTIME,
                DATA.FROM_DATE,
                DATA.TO_DATE,
                DATA.CUST_NAME,
                DATA.G_CODE,
                DATA.G_NAME,
                DATA.PROD_TYPE,
                DATA.EMPL_NAME,
                DATA.PROD_REQUEST_NO,
                DATA.CTR_CD
              )} ORDER BY ZTBINSPECTOUTPUTTB.INSPECT_OUTPUT_ID DESC`;
              //console.log(query);
              kqua = await queryDB(query);
              ////console.log(kqua);
              res.send(kqua);
              break;
            case "Nhập Xuất Kiểm (YCSX)":
              query = `  SELECT M010.EMPL_NAME AS PIC_KD,M110.CUST_NAME_KD, M100.G_CODE, M100.G_NAME, M100.G_NAME_KD, INPUTTB.PROD_REQUEST_NO, P400.PROD_REQUEST_DATE, P400.PROD_REQUEST_QTY, INPUTTB.INPUT_QTY AS LOT_TOTAL_INPUT_QTY_EA, isnull(OUTPUTTB.OUTPUT_QTY,0) AS LOT_TOTAL_OUTPUT_QTY_EA, isnull(INSPECTTABLE.DA_KIEM_TRA,0) AS DA_KIEM_TRA, isnull(INSPECTTABLE.OK_QTY,0) AS OK_QTY, isnull(INSPECTTABLE.LOSS_NG_QTY,0) AS LOSS_NG_QTY, (isnull(INPUTTB.INPUT_QTY,0) -  isnull(INSPECTTABLE.DA_KIEM_TRA,0)) AS INSPECT_BALANCE FROM 
            (SELECT CTR_CD,PROD_REQUEST_NO, SUM(INPUT_QTY_EA) AS INPUT_QTY FROM ZTBINSPECTINPUTTB  GROUP BY CTR_CD,PROD_REQUEST_NO) AS INPUTTB
            LEFT JOIN (SELECT CTR_CD,PROD_REQUEST_NO, SUM(OUTPUT_QTY_EA) AS OUTPUT_QTY FROM ZTBINSPECTOUTPUTTB  GROUP BY CTR_CD,PROD_REQUEST_NO) AS OUTPUTTB
            ON (INPUTTB.CTR_CD = OUTPUTTB.CTR_CD AND INPUTTB.PROD_REQUEST_NO = OUTPUTTB.PROD_REQUEST_NO)
            LEFT JOIN (SELECT CTR_CD,PROD_REQUEST_NO, SUM(INSPECT_TOTAL_QTY) AS DA_KIEM_TRA,SUM(INSPECT_OK_QTY) AS OK_QTY,SUM(INSPECT_TOTAL_QTY- INSPECT_OK_QTY) AS LOSS_NG_QTY FROM ZTBINSPECTNGTB GROUP BY CTR_CD,PROD_REQUEST_NO) AS INSPECTTABLE ON (INPUTTB.PROD_REQUEST_NO = INSPECTTABLE.PROD_REQUEST_NO AND INPUTTB.CTR_CD = INSPECTTABLE.CTR_CD)
            LEFT JOIN P400 ON (P400.PROD_REQUEST_NO = INPUTTB.PROD_REQUEST_NO AND P400.CTR_CD = INPUTTB.CTR_CD)
            LEFT JOIN M100 ON (P400.G_CODE = M100.G_CODE AND P400.CTR_CD = M100.CTR_CD)
            LEFT JOIN M010 ON (M010.EMPL_NO = P400.EMPL_NO AND M010.CTR_CD = P400.CTR_CD)
            LEFT JOIN M110 ON (M110.CUST_CD = P400.CUST_CD AND M110.CTR_CD = P400.CTR_CD) 
                             ${generate_condition_get_inspection_inoutycsx(
                DATA.CUST_NAME,
                DATA.G_CODE,
                DATA.G_NAME,
                DATA.PROD_TYPE,
                DATA.EMPL_NAME,
                DATA.PROD_REQUEST_NO,
                DATA.CTR_CD
              )} ORDER BY P400.PROD_REQUEST_DATE DESC`;
              //console.log(query);
              kqua = await queryDB(query);
              ////console.log(kqua);
              res.send(kqua);
              break;
            case "Nhật Ký Kiểm Tra":
              query = `SELECT ZTBINSPECTNGTB.INSPECT_ID, CONCAT(datepart(YEAR,INSPECT_START_TIME),'_',datepart(ISO_WEEK,DATEADD(day,2,INSPECT_START_TIME))) AS YEAR_WEEK, M110.CUST_NAME_KD,ZTBINSPECTNGTB.PROD_REQUEST_NO,M100.G_NAME_KD,M100.G_NAME,ZTBINSPECTNGTB.G_CODE,M100.PROD_TYPE,ZTBINSPECTNGTB.M_LOT_NO,I222.LOTNCC, isnull(M090.M_NAME,'NO_INFO') as M_NAME,isnull(M090.WIDTH_CD,0) as WIDTH_CD,ZTBINSPECTNGTB.EMPL_NO AS INSPECTOR,ZTBINSPECTNGTB.LINEQC_PIC AS LINEQC,ZTBINSPECTNGTB.PROD_PIC,M100.CODE_33 AS UNIT ,ZTBINSPECTNGTB.PROCESS_LOT_NO,ZTBINSPECTNGTB.PROCESS_IN_DATE,ZTBINSPECTNGTB.INSPECT_DATETIME, ZTBINSPECTNGTB.INSPECT_START_TIME,ZTBINSPECTNGTB.INSPECT_FINISH_TIME,ZTBINSPECTNGTB.FACTORY,ZTBINSPECTNGTB.LINEQC_PIC,ZTBINSPECTNGTB.MACHINE_NO,(ZTBINSPECTNGTB.INSPECT_TOTAL_QTY - ZTBINSPECTNGTB.ERR32) AS INSPECT_TOTAL_QTY,ZTBINSPECTNGTB.INSPECT_OK_QTY,CAST(INSPECT_TOTAL_QTY AS float)/(CAST(DATEDIFF(MINUTE, ZTBINSPECTNGTB.INSPECT_START_TIME,ZTBINSPECTNGTB.INSPECT_FINISH_TIME) AS float) / CAST(60 as float) )  AS INSPECT_SPEED,(ERR1+ERR2+ERR3) AS INSPECT_TOTAL_LOSS_QTY, (ERR4+ERR5+ERR6+ERR7+ERR8+ERR9+ERR10+ERR11+ERR12+ERR13+ERR14+ERR15+ERR16+ERR17+ERR18+ERR19+ERR20+ERR21+ERR22+ERR23+ERR24+ERR25+ERR26+ERR27+ERR28+ERR29+ERR30+ERR31) AS INSPECT_TOTAL_NG_QTY, (ERR4+ERR5+ERR6+ERR7+ERR8+ERR9+ERR10+ERR11) AS MATERIAL_NG_QTY, (ERR12+ERR13+ERR14+ERR15+ERR16+ERR17+ERR18+ERR19+ERR20+ERR21+ERR22+ERR23+ERR24+ERR25+ERR26+ERR27+ERR28+ERR29+ERR30+ERR31) AS PROCESS_NG_QTY,M100.PROD_LAST_PRICE AS PROD_PRICE,ZTBINSPECTNGTB.ERR1,ZTBINSPECTNGTB.ERR2,ZTBINSPECTNGTB.ERR3,ZTBINSPECTNGTB.ERR4,ZTBINSPECTNGTB.ERR5,ZTBINSPECTNGTB.ERR6,ZTBINSPECTNGTB.ERR7,ZTBINSPECTNGTB.ERR8,ZTBINSPECTNGTB.ERR9,ZTBINSPECTNGTB.ERR10,ZTBINSPECTNGTB.ERR11,ZTBINSPECTNGTB.ERR12,ZTBINSPECTNGTB.ERR13,ZTBINSPECTNGTB.ERR14,ZTBINSPECTNGTB.ERR15,ZTBINSPECTNGTB.ERR16,ZTBINSPECTNGTB.ERR17,ZTBINSPECTNGTB.ERR18,ZTBINSPECTNGTB.ERR19,ZTBINSPECTNGTB.ERR20,ZTBINSPECTNGTB.ERR21,ZTBINSPECTNGTB.ERR22,ZTBINSPECTNGTB.ERR23,ZTBINSPECTNGTB.ERR24,ZTBINSPECTNGTB.ERR25,ZTBINSPECTNGTB.ERR26,ZTBINSPECTNGTB.ERR27,ZTBINSPECTNGTB.ERR28,ZTBINSPECTNGTB.ERR29,ZTBINSPECTNGTB.ERR30,ZTBINSPECTNGTB.ERR31,ZTBINSPECTNGTB.ERR32, isnull(ZTBINSPECTNGTB.CNDB_ENCODES,'') AS CNDB_ENCODES  FROM ZTBINSPECTNGTB  
              LEFT JOIN M110 ON (ZTBINSPECTNGTB.CUST_CD = M110.CUST_CD AND ZTBINSPECTNGTB.CTR_CD = M110.CTR_CD)  
              LEFT JOIN M100 ON (ZTBINSPECTNGTB.G_CODE = M100.G_CODE AND ZTBINSPECTNGTB.CTR_CD = M100.CTR_CD) 
              LEFT JOIN M090 ON(ZTBINSPECTNGTB.M_CODE = M090.M_CODE AND ZTBINSPECTNGTB.CTR_CD = M090.CTR_CD)
              LEFT JOIN I222 ON(I222.M_LOT_NO = ZTBINSPECTNGTB.M_LOT_NO AND I222.CTR_CD = ZTBINSPECTNGTB.CTR_CD)      
                             ${generate_condition_get_inspection_ng_data(
                DATA.ALLTIME,
                DATA.FROM_DATE,
                DATA.TO_DATE,
                DATA.CUST_NAME,
                DATA.G_CODE,
                DATA.G_NAME,
                DATA.PROD_TYPE,
                DATA.EMPL_NAME,
                DATA.PROD_REQUEST_NO,
                DATA.CTR_CD
              )} ORDER BY INSPECT_ID DESC`;
              //console.log(query);
              kqua = await queryDB(query);
              ////console.log(kqua);
              res.send(kqua);
              break;
          }
          //query = `SELECT * FROM ZTBEMPLINFO`;
        })();
        break;
      case "get_listcode":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let kqua;
          let startOfYear = moment().startOf("year").format("YYYY-MM-DD");
          let query = "";
          query = `SELECT G_CODE as id, G_NAME as name, PROD_LAST_PRICE from M100 WHERE CTR_CD='${DATA.CTR_CD}' AND USE_YN='Y'`;
          //console.log(query);
          kqua = await queryDB(query);
          ////console.log(kqua);
          res.send(kqua);
        })();
        break;
      case "get_listcustomer":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let kqua;
          let startOfYear = moment().startOf("year").format("YYYY-MM-DD");
          let query = "";
          query = `SELECT USE_YN,CUST_TYPE, CUST_CD, CUST_NAME_KD, CUST_NAME,  CUST_ADDR1, CUST_ADDR2,CUST_ADDR3,TAX_NO, CUST_NUMBER,  BOSS_NAME, TEL_NO1, FAX_NO, CUST_POSTAL,  CHARGE_EMAIL AS EMAIL, REMK, INS_DATE, INS_EMPL, UPD_DATE, UPD_EMPL FROM M110 WHERE CTR_CD='${DATA.CTR_CD}'`;
          //console.log(query);
          kqua = await queryDB(query);
          ////console.log(kqua);
          res.send(kqua);
        })();
        break;
      case "add_customer":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let kqua;
          let startOfYear = moment().startOf("year").format("YYYY-MM-DD");
          let query = "";
          query = `INSERT INTO M110 (CTR_CD, CUST_TYPE, CUST_CD, CUST_NAME, CUST_NAME_KD, CUST_ADDR1, TAX_NO,CUST_NUMBER, BOSS_NAME, TEL_NO1, FAX_NO, CUST_POSTAL,REMK, INS_DATE, INS_EMPL, UPD_DATE, UPD_EMPL,CUST_ADDR2, CUST_ADDR3, CHARGE_EMAIL,USE_YN) VALUES ('${DATA.CTR_CD}','${DATA.CUST_TYPE}','${DATA.CUST_CD}', N'${DATA.CUST_NAME}','${DATA.CUST_NAME_KD}',N'${DATA.CUST_ADDR1}','${DATA.TAX_NO}','${DATA.CUST_NUMBER}',N'${DATA.BOSS_NAME}','${DATA.TEL_NO1}','${DATA.FAX_NO}','${DATA.CUST_POSTAL}',N'${DATA.REMK}',GETDATE(), '${EMPL_NO}',GETDATE(), '${EMPL_NO}',N'${DATA.ADDR2}',N'${DATA.ADDR3}',N'${DATA.EMAIL}','${DATA.USE_YN}')`;
          //console.log(query);
          kqua = await queryDB(query);
          //console.log(kqua);
          res.send(kqua);
        })();
        break;
      case "edit_customer":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let kqua;
          let startOfYear = moment().startOf("year").format("YYYY-MM-DD");
          let query = "";
          query = ` UPDATE M110 SET USE_YN='${DATA.USE_YN}', CUST_NAME = N'${DATA.CUST_NAME}', CUST_NAME_KD ='${DATA.CUST_NAME_KD}', CUST_ADDR1 =N'${DATA.CUST_ADDR1}', CUST_ADDR2 =N'${DATA.CUST_ADDR2}',CUST_ADDR3 =N'${DATA.CUST_ADDR3}',CHARGE_EMAIL =N'${DATA.EMAIL}',TAX_NO ='${DATA.TAX_NO}', CUST_NUMBER ='${DATA.CUST_NUMBER}',BOSS_NAME =N'${DATA.BOSS_NAME}',  TEL_NO1 ='${DATA.TEL_NO1}', FAX_NO ='${DATA.FAX_NO}', CUST_POSTAL ='${DATA.CUST_POSTAL}', REMK =N'${DATA.REMK}',CUST_TYPE =N'${DATA.CUST_TYPE}', UPD_EMPL ='${EMPL_NO}', UPD_DATE = GETDATE() WHERE CTR_CD='${DATA.CTR_CD}' AND CUST_CD='${DATA.CUST_CD}'`;
          //console.log(query);
          kqua = await queryDB(query);
          ////console.log(kqua);
          res.send(kqua);
        })();
        break;
      case "checkMaterialExist":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let kqua;
          let startOfYear = moment().startOf("year").format("YYYY-MM-DD");
          let query = "";
          query = `SELECT * FROM ZTB_MATERIAL_TB WHERE CTR_CD='${DATA.CTR_CD}' AND M_NAME ='${DATA.M_NAME}'`;
          console.log(query);
          kqua = await queryDB(query);
          ////console.log(kqua);
          res.send(kqua);
        })();
        break;
      case "addMaterial":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let kqua;
          let startOfYear = moment().startOf("year").format("YYYY-MM-DD");
          let query = "";
          query = `INSERT INTO ZTB_MATERIAL_TB (CTR_CD, M_NAME, DESCR, CUST_CD, SSPRICE, CMSPRICE, SLITTING_PRICE, MASTER_WIDTH, ROLL_LENGTH, USE_YN, INS_DATE, INS_EMPL, UPD_DATE, UPD_EMPL) VALUES ('${DATA.CTR_CD}', '${DATA.M_NAME.trim()}',N'${DATA.DESCR.trim()}','${DATA.CUST_CD.trim()}','${DATA.SSPRICE}','${DATA.CMSPRICE}','${DATA.SLITTING_PRICE}','${DATA.MASTER_WIDTH}','${DATA.ROLL_LENGTH}', 'Y', GETDATE(),'${EMPL_NO}',GETDATE(),'${EMPL_NO}')`;
          console.log(query);
          kqua = await queryDB(query);
          ////console.log(kqua);
          res.send(kqua);
        })();
        break;
      case "updateMaterial":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let kqua;
          let startOfYear = moment().startOf("year").format("YYYY-MM-DD");
          let query = "";
          query = `UPDATE ZTB_MATERIAL_TB SET EXP_DATE='${DATA.EXP_DATE}', M_NAME='${DATA.M_NAME.trim()}', CUST_CD ='${DATA.CUST_CD.trim()}',DESCR =N'${DATA.DESCR.trim()}',SSPRICE ='${DATA.SSPRICE}',CMSPRICE ='${DATA.CMSPRICE}',SLITTING_PRICE ='${DATA.SLITTING_PRICE}', MASTER_WIDTH ='${DATA.MASTER_WIDTH}',ROLL_LENGTH ='${DATA.ROLL_LENGTH}',UPD_EMPL ='${EMPL_NO}', UPD_DATE=GETDATE(), USE_YN='${DATA.USE_YN}', FSC='${DATA.FSC}', FSC_CODE='${DATA.FSC_CODE}'  WHERE CTR_CD='${DATA.CTR_CD}' AND M_ID='${DATA.M_ID}' `;
          kqua = await queryDB(query);
          ////console.log(kqua);
          res.send(kqua);
        })();
        break;
      case "updateM090FSC":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let kqua;
          let startOfYear = moment().startOf("year").format("YYYY-MM-DD");
          let query = "";
          query = `UPDATE M090 SET FSC='${DATA.FSC}', FSC_CODE='${DATA.FSC_CODE}', INS_DATE='${moment().format('YYYY-MM-DD HH:mm:ss')}', UPD_EMPL='${EMPL_NO}' WHERE CTR_CD='${DATA.CTR_CD}' AND M_NAME='${DATA.M_NAME}'`;
          console.log(query);
          kqua = await queryDB(query);
          ////console.log(kqua);
          res.send(kqua);
        })();
        break;
      case "insert_po":
        (async () => {
          //////console.log(DATA);
          let currenttime = moment().format("YYYY-MM-DD HH:mm:ss");
          let checkkq = "OK";
          let setpdQuery = `INSERT INTO ZTBPOTable (CTR_CD, CUST_CD, EMPL_NO,G_CODE, PO_NO, PO_QTY, PO_DATE, RD_DATE, PROD_PRICE,BEP,REMARK) VALUES ('${DATA.CTR_CD}','${DATA.CUST_CD
            }', '${DATA.EMPL_NO}','${DATA.G_CODE}', '${DATA.PO_NO}', '${DATA.PO_QTY}', '${DATA.PO_DATE}', '${DATA.RD_DATE}', '${DATA.PROD_PRICE}','${DATA.BEP}',N'${DATA.REMARK ?? ""}')`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          ////console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "insert_invoice":
        (async () => {
          //////console.log(DATA);
          let currenttime = moment().format("YYYY-MM-DD HH:mm:ss");
          let checkkq = "OK";
          let setpdQuery = `INSERT INTO ZTBDelivery (CTR_CD, CUST_CD, EMPL_NO, G_CODE, PO_NO, DELIVERY_QTY, DELIVERY_DATE, NOCANCEL, REMARK, INVOICE_NO) VALUES ('${DATA.CTR_CD}','${DATA.CUST_CD
            }', '${DATA.EMPL_NO}', '${DATA.G_CODE}', '${DATA.PO_NO}', '${DATA.DELIVERY_QTY}', '${DATA.DELIVERY_DATE}', 1,'${DATA.REMARK}', '${DATA.INVOICE_NO === undefined ? "" : DATA.INVOICE_NO
            }')`;
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "get_last_prod_request_no":
        (async () => {
          ////console.log(DATA);
          let currenttime = moment().format("YYYY-MM-DD HH:mm:ss");
          let checkkq = "OK";
          let setpdQuery = `SELECT TOP 1 PROD_REQUEST_NO FROM P400 WHERE CTR_CD='${DATA.CTR_CD}' ORDER BY INS_DATE DESC`;
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "insert_new_ycsx":
        (async () => {
          ////console.log(DATA);
          let currenttime = moment().format("YYYY-MM-DD HH:mm:ss");
          let checkkq = "OK";
          let setpdQuery = ` INSERT INTO P400 (CTR_CD, PROD_REQUEST_DATE, PROD_REQUEST_NO, CODE_50, CODE_03, CODE_55, G_CODE, RIV_NO, PROD_REQUEST_QTY, CUST_CD, EMPL_NO, DELIVERY_DT, REMK, G_CODE2) VALUES ('${DATA.CTR_CD}', '${DATA.PROD_REQUEST_DATE}', '${DATA.PROD_REQUEST_NO}', '${DATA.CODE_50}', '${DATA.CODE_03}', '${DATA.CODE_55}', '${DATA.G_CODE}', '${DATA.RIV_NO}', '${DATA.PROD_REQUEST_QTY}', '${DATA.CUST_CD}', '${DATA.EMPL_NO}', '${DATA.DELIVERY_DATE}', '${DATA.REMARK}', '${DATA.G_CODE}')`;
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "getmaindept":
        (async () => {
          ////console.log(DATA);
          let currenttime = moment().format("YYYY-MM-DD HH:mm:ss");
          let checkkq = "OK";
          let setpdQuery = `SELECt MAINDEPTCODE AS id, CTR_CD, MAINDEPTCODE, MAINDEPTNAME, MAINDEPTNAME_KR FROM ZTBMAINDEPARMENT WHERE CTR_CD='${DATA.CTR_CD}'`;
          //console.log("Nguyen van hung");
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          ////console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "insertmaindept":
        (async () => {
          ////console.log(DATA);
          let JOB_NAME = req.payload_data["JOB_NAME"];
          if (JOB_NAME === "Leader" || JOB_NAME === "ADMIN") {
            let checkkq = "OK";
            let setpdQuery = `INSERT INTO ZTBMAINDEPARMENT (CTR_CD, MAINDEPTCODE, MAINDEPTNAME, MAINDEPTNAME_KR) VALUES ('${DATA.CTR_CD}',${DATA.MAINDEPTCODE},N'${DATA.MAINDEPTNAME}',N'${DATA.MAINDEPTNAME_KR}')`;
            ////console.log(setpdQuery);
            checkkq = await queryDB(setpdQuery);
            //console.log(checkkq);
            res.send(checkkq);
          } else {
            res.send({ tk_status: "NG", message: "Bạn không phải leader" });
          }
        })();
        break;
      case "updatemaindept":
        (async () => {
          ////console.log(DATA);
          let JOB_NAME = req.payload_data["JOB_NAME"];
          if (JOB_NAME === "Leader" || JOB_NAME === "ADMIN") {
            let checkkq = "OK";
            let setpdQuery = `UPDATE ZTBMAINDEPARMENT SET MAINDEPTCODE=${DATA.MAINDEPTCODE}, MAINDEPTNAME='${DATA.MAINDEPTNAME}', MAINDEPTNAME_KR ='${DATA.MAINDEPTNAME_KR}' WHERE CTR_CD='${DATA.CTR_CD}' AND MAINDEPTCODE= ${DATA.MAINDEPTCODE}`;
            ////console.log(setpdQuery);
            checkkq = await queryDB(setpdQuery);
            //console.log(checkkq);
            res.send(checkkq);
          } else {
            res.send({ tk_status: "NG", message: "Bạn không phải leader" });
          }
        })();
        break;
      case "deletemaindept":
        (async () => {
          ////console.log(DATA);
          let JOB_NAME = req.payload_data["JOB_NAME"];
          if (JOB_NAME === "Leader" || JOB_NAME === "ADMIN") {
            let checkkq = "OK";
            let setpdQuery = `DELETE FROM ZTBMAINDEPARMENT WHERE CTR_CD='${DATA.CTR_CD}' AND MAINDEPTCODE= ${DATA.MAINDEPTCODE}`;
            ////console.log(setpdQuery);
            checkkq = await queryDB(setpdQuery);
            //console.log(checkkq);
            res.send(checkkq);
          } else {
            res.send({ tk_status: "NG", message: "Bạn không phải leader" });
          }
        })();
        break;
      case "getsubdept":
        (async () => {
          ////console.log(DATA);
          let currenttime = moment().format("YYYY-MM-DD HH:mm:ss");
          let checkkq = "OK";
          let setpdQuery = `SELECT SUBDEPTCODE AS id, CTR_CD, MAINDEPTCODE, SUBDEPTCODE,SUBDEPTNAME, SUBDEPTNAME_KR FROM ZTBSUBDEPARTMENT WHERE CTR_CD='${DATA.CTR_CD}' AND MAINDEPTCODE=${DATA.MAINDEPTCODE}`;
          //console.log("Nguyen van hung");
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "insertsubdept":
        (async () => {
          ////console.log(DATA);
          let JOB_NAME = req.payload_data["JOB_NAME"];
          if (JOB_NAME === "Leader" || JOB_NAME === "ADMIN") {
            let checkkq = "OK";
            let setpdQuery = `INSERT INTO ZTBSUBDEPARTMENT (CTR_CD, MAINDEPTCODE, SUBDEPTCODE, SUBDEPTNAME, SUBDEPTNAME_KR) VALUES ('${DATA.CTR_CD}',${DATA.MAINDEPTCODE},${DATA.SUBDEPTCODE},N'${DATA.SUBDEPTNAME}',N'${DATA.SUBDEPTNAME_KR}')`;
            ////console.log(setpdQuery);
            checkkq = await queryDB(setpdQuery);
            //console.log(checkkq);
            res.send(checkkq);
          } else {
            res.send({ tk_status: "NG", message: "Bạn không phải leader" });
          }
        })();
        break;
      case "updatesubdept":
        (async () => {
          ////console.log(DATA);
          let JOB_NAME = req.payload_data["JOB_NAME"];
          if (JOB_NAME === "Leader" || JOB_NAME === "ADMIN") {
            let checkkq = "OK";
            let setpdQuery = `UPDATE ZTBSUBDEPARTMENT SET SUBDEPTCODE=${DATA.SUBDEPTCODE}, SUBDEPTNAME='${DATA.SUBDEPTNAME}', SUBDEPTNAME_KR ='${DATA.SUBDEPTNAME_KR}' WHERE CTR_CD='${DATA.CTR_CD}' AND  SUBDEPTCODE= ${DATA.SUBDEPTCODE}`;
            ////console.log(setpdQuery);
            checkkq = await queryDB(setpdQuery);
            //console.log(checkkq);
            res.send(checkkq);
          } else {
            res.send({ tk_status: "NG", message: "Bạn không phải leader" });
          }
        })();
        break;
      case "deletesubdept":
        (async () => {
          ////console.log(DATA);
          let JOB_NAME = req.payload_data["JOB_NAME"];
          if (JOB_NAME === "Leader" || JOB_NAME === "ADMIN") {
            let checkkq = "OK";
            let setpdQuery = `DELETE FROM ZTBSUBDEPARTMENT WHERE CTR_CD='${DATA.CTR_CD}' AND SUBDEPTCODE= ${DATA.SUBDEPTCODE}`;
            ////console.log(setpdQuery);
            checkkq = await queryDB(setpdQuery);
            //console.log(checkkq);
            res.send(checkkq);
          } else {
            res.send({ tk_status: "NG", message: "Bạn không phải leader" });
          }
        })();
        break;
      case "getworkposition":
        (async () => {
          ////console.log(DATA);
          let currenttime = moment().format("YYYY-MM-DD HH:mm:ss");
          let checkkq = "OK";
          let setpdQuery = `SELECT WORK_POSITION_CODE AS id, CTR_CD, SUBDEPTCODE, WORK_POSITION_CODE,WORK_POSITION_NAME, WORK_POSITION_NAME_KR, ATT_GROUP_CODE FROM ZTBWORKPOSITION WHERE CTR_CD='${DATA.CTR_CD}' AND SUBDEPTCODE=${DATA.SUBDEPTCODE}`;
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "insertworkposition":
        (async () => {
          ////console.log(DATA);
          let JOB_NAME = req.payload_data["JOB_NAME"];
          if (JOB_NAME === "Leader" || JOB_NAME === "ADMIN") {
            let checkkq = "OK";
            let setpdQuery = `INSERT INTO ZTBWORKPOSITION (CTR_CD, SUBDEPTCODE, WORK_POSITION_CODE, WORK_POSITION_NAME, WORK_POSITION_NAME_KR, ATT_GROUP_CODE) VALUES ('${DATA.CTR_CD}',${DATA.SUBDEPTCODE},${DATA.WORK_POSITION_CODE},N'${DATA.WORK_POSITION_NAME}',N'${DATA.WORK_POSITION_NAME_KR}',${DATA.ATT_GROUP_CODE})`;
            ////console.log(setpdQuery);
            checkkq = await queryDB(setpdQuery);
            //console.log(checkkq);
            res.send(checkkq);
          } else {
            res.send({ tk_status: "NG", message: "Bạn không phải leader" });
          }
        })();
        break;
      case "updateworkposition":
        (async () => {
          ////console.log(DATA);
          let JOB_NAME = req.payload_data["JOB_NAME"];
          if (JOB_NAME === "Leader" || JOB_NAME === "ADMIN") {
            let checkkq = "OK";
            let setpdQuery = `UPDATE ZTBWORKPOSITION SET SUBDEPTCODE=${DATA.SUBDEPTCODE}, WORK_POSITION_NAME='${DATA.WORK_POSITION_NAME}', WORK_POSITION_NAME_KR ='${DATA.WORK_POSITION_NAME_KR}' WHERE CTR_CD='${DATA.CTR_CD}' AND WORK_POSITION_CODE= ${DATA.WORK_POSITION_CODE}`;
            ////console.log(setpdQuery);
            checkkq = await queryDB(setpdQuery);
            //console.log(checkkq);
            res.send(checkkq);
          } else {
            res.send({ tk_status: "NG", message: "Bạn không phải leader" });
          }
        })();
        break;
      case "deleteworkposition":
        (async () => {
          ////console.log(DATA);
          let JOB_NAME = req.payload_data["JOB_NAME"];
          if (JOB_NAME === "Leader" || JOB_NAME === "ADMIN") {
            let checkkq = "OK";
            let setpdQuery = `DELETE FROM ZTBWORKPOSITION WHERE CTR_CD='${DATA.CTR_CD}' AND WORK_POSITION_CODE= ${DATA.WORK_POSITION_CODE}`;
            ////console.log(setpdQuery);
            checkkq = await queryDB(setpdQuery);
            //console.log(checkkq);
            res.send(checkkq);
          } else {
            res.send({ tk_status: "NG", message: "Bạn không phải leader" });
          }
        })();
        break;
      case "getemployee_full":
        (async () => {
          //////console.log(DATA);
          let currenttime = moment().format("YYYY-MM-DD HH:mm:ss");
          let checkkq = "OK";
          let setpdQuery = `SELECT ZTBEMPLINFO.NV_CCID, ZTBEMPLINFO.EMPL_NO AS id, ZTBEMPLINFO.EMPL_NO,ZTBEMPLINFO.CMS_ID,ZTBEMPLINFO.FIRST_NAME,ZTBEMPLINFO.MIDLAST_NAME,ZTBEMPLINFO.DOB,ZTBEMPLINFO.HOMETOWN,ZTBEMPLINFO.ADD_PROVINCE,ZTBEMPLINFO.ADD_DISTRICT,ZTBEMPLINFO.ADD_COMMUNE,ZTBEMPLINFO.ADD_VILLAGE,ZTBEMPLINFO.PHONE_NUMBER,ZTBEMPLINFO.WORK_START_DATE, PASSWORD,ZTBEMPLINFO.EMAIL,ZTBEMPLINFO.REMARK,ZTBEMPLINFO.ONLINE_DATETIME,ZTBEMPLINFO.CTR_CD,ZTBSEX.SEX_CODE,ZTBSEX.SEX_NAME,ZTBSEX.SEX_NAME_KR,ZTBWORKSTATUS.WORK_STATUS_CODE,ZTBWORKSTATUS.WORK_STATUS_NAME,ZTBWORKSTATUS.WORK_STATUS_NAME_KR,ZTBFACTORY.FACTORY_CODE,ZTBFACTORY.FACTORY_NAME,ZTBFACTORY.FACTORY_NAME_KR,ZTBJOB.JOB_CODE,ZTBJOB.JOB_NAME,ZTBJOB.JOB_NAME_KR,ZTBPOSITION.POSITION_CODE,ZTBPOSITION.POSITION_NAME,ZTBPOSITION.POSITION_NAME_KR,ZTBWORKSHIFT.WORK_SHIFT_CODE,ZTBWORKSHIFT.WORK_SHIF_NAME,ZTBWORKSHIFT.WORK_SHIF_NAME_KR,ZTBWORKPOSITION.WORK_POSITION_CODE,ZTBWORKPOSITION.WORK_POSITION_NAME,ZTBWORKPOSITION.WORK_POSITION_NAME_KR,ZTBWORKPOSITION.ATT_GROUP_CODE,ZTBSUBDEPARTMENT.SUBDEPTCODE,ZTBSUBDEPARTMENT.SUBDEPTNAME,ZTBSUBDEPARTMENT.SUBDEPTNAME_KR,ZTBMAINDEPARMENT.MAINDEPTCODE,ZTBMAINDEPARMENT.MAINDEPTNAME,ZTBMAINDEPARMENT.MAINDEPTNAME_KR, ZTBEMPLINFO.EMPL_IMAGE, ZTBEMPLINFO.RESIGN_DATE  FROM ZTBEMPLINFO LEFT JOIN ZTBSEX ON (ZTBSEX.SEX_CODE = ZTBEMPLINFO.SEX_CODE AND ZTBSEX.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBWORKSTATUS ON(ZTBWORKSTATUS.WORK_STATUS_CODE = ZTBEMPLINFO.WORK_STATUS_CODE AND ZTBWORKSTATUS.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBFACTORY ON (ZTBFACTORY.FACTORY_CODE = ZTBEMPLINFO.FACTORY_CODE AND ZTBFACTORY.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBJOB ON (ZTBJOB.JOB_CODE = ZTBEMPLINFO.JOB_CODE AND ZTBJOB.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBPOSITION ON (ZTBPOSITION.POSITION_CODE = ZTBEMPLINFO.POSITION_CODE AND ZTBPOSITION.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBWORKSHIFT ON (ZTBWORKSHIFT.WORK_SHIFT_CODE = ZTBEMPLINFO.WORK_SHIFT_CODE AND ZTBWORKSHIFT.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBWORKPOSITION ON (ZTBWORKPOSITION.WORK_POSITION_CODE = ZTBEMPLINFO.WORK_POSITION_CODE AND ZTBWORKPOSITION.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBSUBDEPARTMENT ON (ZTBSUBDEPARTMENT.SUBDEPTCODE = ZTBWORKPOSITION.SUBDEPTCODE AND ZTBSUBDEPARTMENT.CTR_CD = ZTBWORKPOSITION.CTR_CD) LEFT JOIN ZTBMAINDEPARMENT ON (ZTBMAINDEPARMENT.MAINDEPTCODE = ZTBSUBDEPARTMENT.MAINDEPTCODE AND ZTBMAINDEPARMENT.CTR_CD = ZTBSUBDEPARTMENT.CTR_CD)`;
          //////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          ////console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "insertemployee":
        (async () => {
          ////console.log(DATA);
          let JOB_NAME = req.payload_data["JOB_NAME"];
          if (JOB_NAME === "Leader" || JOB_NAME === "ADMIN") {
            let checkkq = "OK";
            let setpdQuery = `INSERT INTO ZTBEMPLINFO (CTR_CD,EMPL_NO,CMS_ID,FIRST_NAME,MIDLAST_NAME,DOB,HOMETOWN,SEX_CODE,ADD_PROVINCE,ADD_DISTRICT,ADD_COMMUNE,ADD_VILLAGE,PHONE_NUMBER,WORK_START_DATE,PASSWORD,EMAIL,WORK_POSITION_CODE,WORK_SHIFT_CODE,POSITION_CODE,JOB_CODE,FACTORY_CODE,WORK_STATUS_CODE,NV_CCID) VALUES ('${DATA.CTR_CD}',N'${DATA.EMPL_NO}' ,N'${DATA.CMS_ID}' ,N'${DATA.FIRST_NAME}' ,N'${DATA.MIDLAST_NAME}' ,N'${DATA.DOB}' ,N'${DATA.HOMETOWN}' ,N'${DATA.SEX_CODE}' ,N'${DATA.ADD_PROVINCE}' ,N'${DATA.ADD_DISTRICT}' ,N'${DATA.ADD_COMMUNE}' ,N'${DATA.ADD_VILLAGE}' ,N'${DATA.PHONE_NUMBER}' ,N'${DATA.WORK_START_DATE}' ,N'${DATA.PASSWORD}' ,N'${DATA.EMAIL}' ,N'${DATA.WORK_POSITION_CODE}' ,N'${DATA.WORK_SHIFT_CODE}' ,N'${DATA.POSITION_CODE}' ,N'${DATA.JOB_CODE}' ,N'${DATA.FACTORY_CODE}' ,N'${DATA.WORK_STATUS_CODE}',${DATA.NV_CCID})`;
            ////console.log(setpdQuery);
            let insertoldempl = `INSERT INTO M010 (CTR_CD,EMPL_NO, EMPL_NAME, PASSWD) VALUES ('${DATA.CTR_CD}','${DATA.EMPL_NO
              }','${removeVietnameseTones(
                DATA.MIDLAST_NAME
              )} ${removeVietnameseTones(DATA.FIRST_NAME)}','${DATA.PASSWORD}')`;
            console.log(insertoldempl);
            checkkq = await queryDB(insertoldempl);
            checkkq = await queryDB(setpdQuery);
            //console.log(checkkq);
            res.send(checkkq);
          } else {
            res.send({ tk_status: "NG", message: "Bạn không phải leader" });
          }
        })();
        break;
      case "updateemployee":
        (async () => {
          ////console.log(DATA);
          let JOB_NAME = req.payload_data["JOB_NAME"];
          if (JOB_NAME === "Leader" || JOB_NAME === "ADMIN") {
            let checkkq = "OK";
            let checkresigndate =
              DATA.WORK_STATUS_CODE === 0
                ? `, RESIGN_DATE='${DATA.RESIGN_DATE}'`
                : ``;
            let setpdQuery = `UPDATE ZTBEMPLINFO SET CMS_ID= N'${DATA.CMS_ID}' ,FIRST_NAME= N'${DATA.FIRST_NAME}' ,MIDLAST_NAME= N'${DATA.MIDLAST_NAME}' ,DOB= N'${DATA.DOB}' ,HOMETOWN= N'${DATA.HOMETOWN}' ,SEX_CODE= N'${DATA.SEX_CODE}' ,ADD_PROVINCE= N'${DATA.ADD_PROVINCE}' ,ADD_DISTRICT= N'${DATA.ADD_DISTRICT}' ,ADD_COMMUNE= N'${DATA.ADD_COMMUNE}' ,ADD_VILLAGE= N'${DATA.ADD_VILLAGE}' ,PHONE_NUMBER= N'${DATA.PHONE_NUMBER}' ,WORK_START_DATE= N'${DATA.WORK_START_DATE}' ,PASSWORD= N'${DATA.PASSWORD}' ,EMAIL= N'${DATA.EMAIL}' ,WORK_POSITION_CODE= N'${DATA.WORK_POSITION_CODE}' ,WORK_SHIFT_CODE= N'${DATA.WORK_SHIFT_CODE}' ,POSITION_CODE= N'${DATA.POSITION_CODE}' ,JOB_CODE= N'${DATA.JOB_CODE}' ,FACTORY_CODE= N'${DATA.FACTORY_CODE}' ,WORK_STATUS_CODE= N'${DATA.WORK_STATUS_CODE}', NV_CCID=${DATA.NV_CCID} ${checkresigndate} WHERE CTR_CD='${DATA.CTR_CD}' AND EMPL_NO= '${DATA.EMPL_NO}'`;
            console.log(setpdQuery);
            checkkq = await queryDB(setpdQuery);
            console.log(checkkq);
            res.send(checkkq);
          } else {
            res.send({ tk_status: "NG", message: "Bạn không phải leader" });
          }
        })();
        break;
      case "updateM010":
        (async () => {
          ////console.log(DATA);
          let JOB_NAME = req.payload_data["JOB_NAME"];
          if (JOB_NAME === "Leader" || JOB_NAME === "ADMIN") {
            let checkkq = "OK";
            let setpdQuery = `UPDATE M010 SET EMPL_NAME='${removeVietnameseTones(DATA.MIDLAST_NAME)} ${removeVietnameseTones(DATA.FIRST_NAME)}' WHERE CTR_CD='${DATA.CTR_CD}' AND  EMPL_NO= '${DATA.EMPL_NO}'`;
            //console.log(setpdQuery);
            checkkq = await queryDB(setpdQuery);
            //console.log(checkkq);
            res.send(checkkq);
          } else {
            res.send({ tk_status: "NG", message: "Bạn không phải leader" });
          }
        })();
        break;
      case "diemdanhnhom":
        //console.log(qr);
        (async () => {
          let kqua;
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let $team_name = DATA.team_name_list;
          let $vitrilamviec = req.payload_data["ATT_GROUP_CODE"];
          let $subdeptname = req.payload_data["SUBDEPTNAME"];
          let $condition = "";
          switch ($team_name) {
            case 0:
              $condition = " AND ZTBEMPLINFO.WORK_SHIFT_CODE <> 2";
              break;
            case 1:
              $condition = " AND ZTBEMPLINFO.WORK_SHIFT_CODE <> 1";
              break;
            case 2:
              $condition = " AND ZTBEMPLINFO.WORK_SHIFT_CODE =1";
              break;
            case 3:
              $condition = " AND ZTBEMPLINFO.WORK_SHIFT_CODE =2";
              break;
            case 4:
              $condition = " AND ZTBEMPLINFO.WORK_SHIFT_CODE =0";
              break;
            case 5:
              $condition = "";
              break;
          }
          if (
            JOB_NAME == "Leader" ||
            JOB_NAME == "Sub Leader" ||
            JOB_NAME == "Dept Staff" ||
            JOB_NAME == "ADMIN"
          ) {
            var today = new Date();
            let today_format = moment().format("YYYY-MM-DD");
            //console.log(today_format);
            //let today_format = '2022-09-30';
            let tradiemdanhQuery = `DECLARE @tradate DATE SET @tradate='${today_format}' SELECT ZTBEMPLINFO.CALV, ZTBEMPLINFO.EMPL_NO as id,ZTBEMPLINFO.EMPL_NO,CMS_ID,MIDLAST_NAME,FIRST_NAME,PHONE_NUMBER,SEX_NAME,WORK_STATUS_NAME,FACTORY_NAME,JOB_NAME,WORK_SHIF_NAME,ZTBEMPLINFO.WORK_POSITION_CODE, WORK_POSITION_NAME,SUBDEPTNAME,MAINDEPTNAME,REQUEST_DATE,ZTBOFFREGISTRATIONTB_1.APPLY_DATE,APPROVAL_STATUS,OFF_ID,CA_NGHI,ON_OFF,OVERTIME_INFO,OVERTIME, REASON_NAME, ZTBOFFREGISTRATIONTB_1.REMARK FROM ZTBEMPLINFO LEFT JOIN ZTBSEX ON (ZTBSEX.SEX_CODE = ZTBEMPLINFO.SEX_CODE AND ZTBSEX.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBWORKSTATUS ON(ZTBWORKSTATUS.WORK_STATUS_CODE = ZTBEMPLINFO.WORK_STATUS_CODE AND ZTBWORKSTATUS.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBFACTORY ON (ZTBFACTORY.FACTORY_CODE = ZTBEMPLINFO.FACTORY_CODE AND ZTBFACTORY.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBJOB ON (ZTBJOB.JOB_CODE = ZTBEMPLINFO.JOB_CODE AND ZTBJOB.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBPOSITION ON (ZTBPOSITION.POSITION_CODE = ZTBEMPLINFO.POSITION_CODE AND ZTBPOSITION.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBWORKSHIFT ON (ZTBWORKSHIFT.WORK_SHIFT_CODE = ZTBEMPLINFO.WORK_SHIFT_CODE AND ZTBWORKSHIFT.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBWORKPOSITION ON (ZTBWORKPOSITION.WORK_POSITION_CODE = ZTBEMPLINFO.WORK_POSITION_CODE AND ZTBWORKPOSITION.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBSUBDEPARTMENT ON (ZTBSUBDEPARTMENT.SUBDEPTCODE = ZTBWORKPOSITION.SUBDEPTCODE AND ZTBSUBDEPARTMENT.CTR_CD = ZTBWORKPOSITION.CTR_CD) LEFT JOIN ZTBMAINDEPARMENT ON (ZTBMAINDEPARMENT.MAINDEPTCODE = ZTBSUBDEPARTMENT.MAINDEPTCODE AND ZTBMAINDEPARMENT.CTR_CD = ZTBSUBDEPARTMENT.CTR_CD) LEFT JOIN ( SELECT * FROM ZTBOFFREGISTRATIONTB WHERE ZTBOFFREGISTRATIONTB.APPLY_DATE = @tradate ) AS ZTBOFFREGISTRATIONTB_1 ON (ZTBOFFREGISTRATIONTB_1.EMPL_NO = ZTBEMPLINFO.EMPL_NO AND ZTBOFFREGISTRATIONTB_1.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN (	SELECT * FROM ZTBATTENDANCETB WHERE APPLY_DATE= @tradate ) AS ZTBATTENDANCETB_1 ON (ZTBATTENDANCETB_1.EMPL_NO = ZTBEMPLINFO.EMPL_NO AND ZTBATTENDANCETB_1.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBREASON ON (ZTBREASON.REASON_CODE = ZTBOFFREGISTRATIONTB_1.REASON_CODE AND ZTBREASON.CTR_CD = ZTBOFFREGISTRATIONTB_1.CTR_CD) WHERE ZTBEMPLINFO.CTR_CD='${DATA.CTR_CD}' AND ZTBWORKPOSITION.ATT_GROUP_CODE = ${$vitrilamviec} AND ZTBEMPLINFO.WORK_STATUS_CODE <> 2 AND ZTBEMPLINFO.WORK_STATUS_CODE <> 0 ${$condition}`;
            if (JOB_NAME == "Leader")
              tradiemdanhQuery = `DECLARE @tradate DATE SET @tradate='${today_format}' SELECT ZTBEMPLINFO.CALV, ZTBEMPLINFO.EMPL_NO as id,ZTBEMPLINFO.EMPL_NO,CMS_ID,MIDLAST_NAME,FIRST_NAME,PHONE_NUMBER,SEX_NAME,WORK_STATUS_NAME,FACTORY_NAME,JOB_NAME,WORK_SHIF_NAME,ZTBEMPLINFO.WORK_POSITION_CODE, WORK_POSITION_NAME,SUBDEPTNAME,MAINDEPTNAME,REQUEST_DATE,ZTBOFFREGISTRATIONTB_1.APPLY_DATE,APPROVAL_STATUS,OFF_ID,CA_NGHI,ON_OFF,OVERTIME_INFO,OVERTIME, REASON_NAME, ZTBOFFREGISTRATIONTB_1.REMARK FROM ZTBEMPLINFO LEFT JOIN ZTBSEX ON (ZTBSEX.SEX_CODE = ZTBEMPLINFO.SEX_CODE AND ZTBSEX.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBWORKSTATUS ON(ZTBWORKSTATUS.WORK_STATUS_CODE = ZTBEMPLINFO.WORK_STATUS_CODE AND ZTBWORKSTATUS.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBFACTORY ON (ZTBFACTORY.FACTORY_CODE = ZTBEMPLINFO.FACTORY_CODE AND ZTBFACTORY.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBJOB ON (ZTBJOB.JOB_CODE = ZTBEMPLINFO.JOB_CODE AND ZTBJOB.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBPOSITION ON (ZTBPOSITION.POSITION_CODE = ZTBEMPLINFO.POSITION_CODE AND ZTBPOSITION.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBWORKSHIFT ON (ZTBWORKSHIFT.WORK_SHIFT_CODE = ZTBEMPLINFO.WORK_SHIFT_CODE AND ZTBWORKSHIFT.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBWORKPOSITION ON (ZTBWORKPOSITION.WORK_POSITION_CODE = ZTBEMPLINFO.WORK_POSITION_CODE AND ZTBWORKPOSITION.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBSUBDEPARTMENT ON (ZTBSUBDEPARTMENT.SUBDEPTCODE = ZTBWORKPOSITION.SUBDEPTCODE AND ZTBSUBDEPARTMENT.CTR_CD = ZTBWORKPOSITION.CTR_CD) LEFT JOIN ZTBMAINDEPARMENT ON (ZTBMAINDEPARMENT.MAINDEPTCODE = ZTBSUBDEPARTMENT.MAINDEPTCODE AND ZTBMAINDEPARMENT.CTR_CD = ZTBSUBDEPARTMENT.CTR_CD) LEFT JOIN ( SELECT * FROM ZTBOFFREGISTRATIONTB WHERE ZTBOFFREGISTRATIONTB.APPLY_DATE = @tradate ) AS ZTBOFFREGISTRATIONTB_1 ON (ZTBOFFREGISTRATIONTB_1.EMPL_NO = ZTBEMPLINFO.EMPL_NO AND ZTBOFFREGISTRATIONTB_1.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN (	SELECT * FROM ZTBATTENDANCETB WHERE APPLY_DATE= @tradate ) AS ZTBATTENDANCETB_1 ON (ZTBATTENDANCETB_1.EMPL_NO = ZTBEMPLINFO.EMPL_NO AND ZTBATTENDANCETB_1.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBREASON ON (ZTBREASON.REASON_CODE = ZTBOFFREGISTRATIONTB_1.REASON_CODE AND ZTBREASON.CTR_CD = ZTBOFFREGISTRATIONTB_1.CTR_CD) WHERE ZTBEMPLINFO.CTR_CD='${DATA.CTR_CD}' AND   (ZTBWORKPOSITION.ATT_GROUP_CODE = ${$vitrilamviec} OR ZTBSUBDEPARTMENT.SUBDEPTNAME = '${$subdeptname}') AND ZTBEMPLINFO.WORK_STATUS_CODE <> 2 AND ZTBEMPLINFO.WORK_STATUS_CODE <> 0 ${$condition}`;
            ////console.log(tradiemdanhQuery);
            //checkkq = await asyncQuery(tradiemdanhQuery);x
            checkkq = await queryDB(tradiemdanhQuery);
            res.send(checkkq);
            ////console.log('check kq = ' + checkkq);
          } else {
            res.send({ tk_status: "NG", message: "Không phải leader" });
          }
        })();
        break;
      case "diemdanhnhomBP":
        //console.log(qr);
        (async () => {
          let kqua;
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let MAINDEPTCODE = req.payload_data["MAINDEPTCODE"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let $team_name = DATA.team_name_list;
          let $vitrilamviec = req.payload_data["ATT_GROUP_CODE"];
          let $subdeptname = req.payload_data["SUBDEPTNAME"];
          let $condition = "";
          switch ($team_name) {
            case 0:
              $condition = " AND ZTBEMPLINFO.WORK_SHIFT_CODE <> 2";
              break;
            case 1:
              $condition = " AND ZTBEMPLINFO.WORK_SHIFT_CODE <> 1";
              break;
            case 2:
              $condition = " AND ZTBEMPLINFO.WORK_SHIFT_CODE =1";
              break;
            case 3:
              $condition = " AND ZTBEMPLINFO.WORK_SHIFT_CODE =2";
              break;
            case 4:
              $condition = " AND ZTBEMPLINFO.WORK_SHIFT_CODE =0";
              break;
            case 5:
              $condition = "";
              break;
          }
          if (
            JOB_NAME == "Leader" ||
            JOB_NAME == "Sub Leader" ||
            JOB_NAME == "Dept Staff" ||
            JOB_NAME == "ADMIN"
          ) {
            var today = new Date();
            let today_format = moment().format("YYYY-MM-DD");
            //console.log(today_format);
            //let today_format = '2022-09-30';
            let tradiemdanhQuery = `DECLARE @tradate DATE SET @tradate='${today_format}' SELECT ZTBEMPLINFO.CALV, ZTBEMPLINFO.EMPL_NO as id,ZTBEMPLINFO.EMPL_NO,CMS_ID,MIDLAST_NAME,FIRST_NAME,PHONE_NUMBER,SEX_NAME,WORK_STATUS_NAME,FACTORY_NAME,JOB_NAME,WORK_SHIF_NAME,ZTBEMPLINFO.WORK_POSITION_CODE, WORK_POSITION_NAME,SUBDEPTNAME,MAINDEPTNAME,REQUEST_DATE,ZTBOFFREGISTRATIONTB_1.APPLY_DATE,APPROVAL_STATUS,OFF_ID,CA_NGHI,ON_OFF,OVERTIME_INFO,OVERTIME, REASON_NAME, ZTBOFFREGISTRATIONTB_1.REMARK FROM ZTBEMPLINFO LEFT JOIN ZTBSEX ON (ZTBSEX.SEX_CODE = ZTBEMPLINFO.SEX_CODE AND ZTBSEX.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBWORKSTATUS ON(ZTBWORKSTATUS.WORK_STATUS_CODE = ZTBEMPLINFO.WORK_STATUS_CODE AND ZTBWORKSTATUS.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBFACTORY ON (ZTBFACTORY.FACTORY_CODE = ZTBEMPLINFO.FACTORY_CODE AND ZTBFACTORY.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBJOB ON (ZTBJOB.JOB_CODE = ZTBEMPLINFO.JOB_CODE AND ZTBJOB.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBPOSITION ON (ZTBPOSITION.POSITION_CODE = ZTBEMPLINFO.POSITION_CODE AND ZTBPOSITION.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBWORKSHIFT ON (ZTBWORKSHIFT.WORK_SHIFT_CODE = ZTBEMPLINFO.WORK_SHIFT_CODE AND ZTBWORKSHIFT.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBWORKPOSITION ON (ZTBWORKPOSITION.WORK_POSITION_CODE = ZTBEMPLINFO.WORK_POSITION_CODE AND ZTBWORKPOSITION.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBSUBDEPARTMENT ON (ZTBSUBDEPARTMENT.SUBDEPTCODE = ZTBWORKPOSITION.SUBDEPTCODE AND ZTBSUBDEPARTMENT.CTR_CD = ZTBWORKPOSITION.CTR_CD) LEFT JOIN ZTBMAINDEPARMENT ON (ZTBMAINDEPARMENT.MAINDEPTCODE = ZTBSUBDEPARTMENT.MAINDEPTCODE AND ZTBMAINDEPARMENT.CTR_CD = ZTBSUBDEPARTMENT.CTR_CD) LEFT JOIN ( SELECT * FROM ZTBOFFREGISTRATIONTB WHERE ZTBOFFREGISTRATIONTB.APPLY_DATE = @tradate ) AS ZTBOFFREGISTRATIONTB_1 ON (ZTBOFFREGISTRATIONTB_1.EMPL_NO = ZTBEMPLINFO.EMPL_NO AND ZTBOFFREGISTRATIONTB_1.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN (	SELECT * FROM ZTBATTENDANCETB WHERE APPLY_DATE= @tradate ) AS ZTBATTENDANCETB_1 ON (ZTBATTENDANCETB_1.EMPL_NO = ZTBEMPLINFO.EMPL_NO AND ZTBATTENDANCETB_1.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBREASON ON (ZTBREASON.REASON_CODE = ZTBOFFREGISTRATIONTB_1.REASON_CODE AND ZTBREASON.CTR_CD = ZTBOFFREGISTRATIONTB_1.CTR_CD) WHERE ZTBEMPLINFO.CTR_CD='${DATA.CTR_CD}'  AND ZTBMAINDEPARMENT.MAINDEPTCODE=${MAINDEPTCODE} AND ZTBEMPLINFO.WORK_STATUS_CODE <> 2 AND ZTBEMPLINFO.WORK_STATUS_CODE <> 0 ${$condition}`;
            //console.log(tradiemdanhQuery);
            //checkkq = await asyncQuery(tradiemdanhQuery);x
            checkkq = await queryDB(tradiemdanhQuery);
            res.send(checkkq);
            ////console.log('check kq = ' + checkkq);
          } else {
            res.send({ tk_status: "NG", message: "Không phải leader" });
          }
        })();
        break;
      case "diemdanhnhomNS":
        //console.log(qr);
        (async () => {
          let kqua;
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let MAINDEPTCODE = req.payload_data["MAINDEPTCODE"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let $team_name = DATA.team_name_list;
          let $vitrilamviec = req.payload_data["ATT_GROUP_CODE"];
          let $subdeptname = req.payload_data["SUBDEPTNAME"];
          let $condition = "";
          switch ($team_name) {
            case 0:
              $condition = " AND ZTBEMPLINFO.WORK_SHIFT_CODE <> 2";
              break;
            case 1:
              $condition = " AND ZTBEMPLINFO.WORK_SHIFT_CODE <> 1";
              break;
            case 2:
              $condition = " AND ZTBEMPLINFO.WORK_SHIFT_CODE =1";
              break;
            case 3:
              $condition = " AND ZTBEMPLINFO.WORK_SHIFT_CODE =2";
              break;
            case 4:
              $condition = " AND ZTBEMPLINFO.WORK_SHIFT_CODE =0";
              break;
            case 5:
              $condition = "";
              break;
          }
          if (
            JOB_NAME == "Leader" ||
            JOB_NAME == "Sub Leader" ||
            JOB_NAME == "Dept Staff" ||
            JOB_NAME == "ADMIN"
          ) {
            var today = new Date();
            let today_format = moment().format("YYYY-MM-DD");
            //console.log(today_format);
            //let today_format = '2022-09-30';
            let tradiemdanhQuery = `DECLARE @tradate DATE SET @tradate='${today_format}' SELECT ZTBEMPLINFO.CALV, ZTBEMPLINFO.EMPL_NO as id,ZTBEMPLINFO.EMPL_NO,CMS_ID,MIDLAST_NAME,FIRST_NAME,PHONE_NUMBER,SEX_NAME,WORK_STATUS_NAME,FACTORY_NAME,JOB_NAME,WORK_SHIF_NAME,ZTBEMPLINFO.WORK_POSITION_CODE, WORK_POSITION_NAME,SUBDEPTNAME,MAINDEPTNAME,REQUEST_DATE,ZTBOFFREGISTRATIONTB_1.APPLY_DATE,APPROVAL_STATUS,OFF_ID,CA_NGHI,ON_OFF,OVERTIME_INFO,OVERTIME, REASON_NAME, ZTBOFFREGISTRATIONTB_1.REMARK FROM ZTBEMPLINFO LEFT JOIN ZTBSEX ON (ZTBSEX.SEX_CODE = ZTBEMPLINFO.SEX_CODE AND ZTBSEX.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBWORKSTATUS ON(ZTBWORKSTATUS.WORK_STATUS_CODE = ZTBEMPLINFO.WORK_STATUS_CODE AND ZTBWORKSTATUS.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBFACTORY ON (ZTBFACTORY.FACTORY_CODE = ZTBEMPLINFO.FACTORY_CODE AND ZTBFACTORY.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBJOB ON (ZTBJOB.JOB_CODE = ZTBEMPLINFO.JOB_CODE AND ZTBJOB.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBPOSITION ON (ZTBPOSITION.POSITION_CODE = ZTBEMPLINFO.POSITION_CODE AND ZTBPOSITION.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBWORKSHIFT ON (ZTBWORKSHIFT.WORK_SHIFT_CODE = ZTBEMPLINFO.WORK_SHIFT_CODE AND ZTBWORKSHIFT.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBWORKPOSITION ON (ZTBWORKPOSITION.WORK_POSITION_CODE = ZTBEMPLINFO.WORK_POSITION_CODE AND ZTBWORKPOSITION.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBSUBDEPARTMENT ON (ZTBSUBDEPARTMENT.SUBDEPTCODE = ZTBWORKPOSITION.SUBDEPTCODE AND ZTBSUBDEPARTMENT.CTR_CD = ZTBWORKPOSITION.CTR_CD) LEFT JOIN ZTBMAINDEPARMENT ON (ZTBMAINDEPARMENT.MAINDEPTCODE = ZTBSUBDEPARTMENT.MAINDEPTCODE AND ZTBMAINDEPARMENT.CTR_CD = ZTBSUBDEPARTMENT.CTR_CD) LEFT JOIN ( SELECT * FROM ZTBOFFREGISTRATIONTB WHERE ZTBOFFREGISTRATIONTB.APPLY_DATE = @tradate ) AS ZTBOFFREGISTRATIONTB_1 ON (ZTBOFFREGISTRATIONTB_1.EMPL_NO = ZTBEMPLINFO.EMPL_NO AND ZTBOFFREGISTRATIONTB_1.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN (	SELECT * FROM ZTBATTENDANCETB WHERE APPLY_DATE= @tradate ) AS ZTBATTENDANCETB_1 ON (ZTBATTENDANCETB_1.EMPL_NO = ZTBEMPLINFO.EMPL_NO AND ZTBATTENDANCETB_1.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBREASON ON (ZTBREASON.REASON_CODE = ZTBOFFREGISTRATIONTB_1.REASON_CODE AND ZTBREASON.CTR_CD = ZTBOFFREGISTRATIONTB_1.CTR_CD) WHERE ZTBEMPLINFO.CTR_CD='${DATA.CTR_CD}'   AND ZTBEMPLINFO.WORK_STATUS_CODE <> 2 AND ZTBEMPLINFO.WORK_STATUS_CODE <> 0 ${$condition}`;
            //console.log(tradiemdanhQuery);
            //checkkq = await asyncQuery(tradiemdanhQuery);x
            checkkq = await queryDB(tradiemdanhQuery);
            res.send(checkkq);
            ////console.log('check kq = ' + checkkq);
          } else {
            res.send({ tk_status: "NG", message: "Không phải leader" });
          }
        })();
        break;
      case "setdiemdanhnhom":
        //console.log(qr);
        (async () => {
          let kqua;
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let CURRENT_TEAM = DATA.CURRENT_TEAM;
          let CURRENT_CA = DATA.CURRENT_CA;
          //console.log("CURRENT_TEAM:" + CURRENT_TEAM);
          let diemdanhvalue = DATA.diemdanhvalue;
          let EMPL_NO = DATA.EMPL_NO;
          if (
            JOB_NAME == "Leader" ||
            JOB_NAME == "Sub Leader" ||
            JOB_NAME == "Dept Staff" ||
            JOB_NAME == "ADMIN"
          ) {
            var today = new Date();
            //var today_format = moment().format('YYYY-MM-DD');
            var today_format = moment().format("YYYY-MM-DD");
            let checkAttQuery = `SELECT ON_OFF FROM ZTBATTENDANCETB WHERE CTR_CD='${DATA.CTR_CD}' AND EMPL_NO='${EMPL_NO}' AND APPLY_DATE='${today_format}'`;
            //console.log(checkAttQuery);
            let checkAttKQ = await queryDB(checkAttQuery);
            //console.log('checkqa = ' + checkAttKQ);
            //console.log(checkAttKQ);
            if (checkAttKQ.tk_status === "NG") {
              //console.log('Chua diem danh, se them moi diem danh');
              let insert_diemdanhQuery = `INSERT INTO ZTBATTENDANCETB (CTR_CD, EMPL_NO, APPLY_DATE, ON_OFF, CURRENT_TEAM, CURRENT_CA) VALUES ('${DATA.CTR_CD}', '${EMPL_NO}', '${today_format}', ${diemdanhvalue}, '${CURRENT_TEAM}', '${CURRENT_CA}')`;
              console.log(insert_diemdanhQuery);
              let insert_dd = await queryDB(insert_diemdanhQuery);
              res.send(insert_dd);
            } else {
              let update_diemdanhQuery = `UPDATE ZTBATTENDANCETB SET ON_OFF = ${diemdanhvalue}, CURRENT_TEAM='${CURRENT_TEAM}' WHERE CTR_CD='${DATA.CTR_CD}' AND EMPL_NO='${EMPL_NO}' AND APPLY_DATE='${today_format}'`;
              console.log(update_diemdanhQuery)
              let update_dd = await queryDB(update_diemdanhQuery);
              res.send(update_dd);
              //console.log('da diem danh, update gia tri diem danh');
            }
          } else {
            res.send("NO_LEADER");
          }
        })();
        break;
      case "setdiemdanhnhom2":
        //console.log(qr);
        (async () => {
          let kqua;
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let CURRENT_TEAM = DATA.CURRENT_TEAM;
          let CURRENT_CA = DATA.CURRENT_CA;
          //console.log("CURRENT_TEAM:" + CURRENT_TEAM);
          let diemdanhvalue = DATA.diemdanhvalue;
          let EMPL_NO = DATA.EMPL_NO;
          if (
            JOB_NAME == "Leader" ||
            JOB_NAME == "Sub Leader" ||
            JOB_NAME == "Dept Staff" ||
            JOB_NAME == "ADMIN"
          ) {
            var today = new Date();
            //var today_format = moment().format('YYYY-MM-DD');
            var today_format = moment().format("YYYY-MM-DD");
            let checkAttQuery = `SELECT ON_OFF FROM ZTBATTENDANCETB WHERE CTR_CD='${DATA.CTR_CD}' AND EMPL_NO='${DATA.EMPL_NO}' AND APPLY_DATE='${DATA.APPLY_DATE}'`;
            //console.log(checkAttQuery);
            let checkAttKQ = await queryDB(checkAttQuery);
            //console.log('checkqa = ' + checkAttKQ);
            //console.log(checkAttKQ);
            if (checkAttKQ.tk_status === "NG") {
              //console.log('Chua diem danh, se them moi diem danh');
              let insert_diemdanhQuery = `INSERT INTO ZTBATTENDANCETB (CTR_CD, EMPL_NO, APPLY_DATE, ON_OFF, CURRENT_TEAM, CURRENT_CA) VALUES ('${DATA.CTR_CD}', '${DATA.EMPL_NO}', '${DATA.APPLY_DATE}', ${diemdanhvalue}, '${CURRENT_TEAM}', '${CURRENT_CA}')`;
              //console.log(insert_diemdanhQuery);
              let insert_dd = await queryDB(insert_diemdanhQuery);
              res.send(insert_dd);
            } else {
              let update_diemdanhQuery = `UPDATE ZTBATTENDANCETB SET ON_OFF = ${diemdanhvalue}, CURRENT_TEAM='${CURRENT_TEAM}' WHERE CTR_CD='${DATA.CTR_CD}' AND EMPL_NO='${DATA.EMPL_NO}' AND APPLY_DATE='${DATA.APPLY_DATE}'`;
              //console.log(update_diemdanhQuery)
              let update_dd = await queryDB(update_diemdanhQuery);
              res.send(update_dd);
              //console.log('da diem danh, update gia tri diem danh');
            }
          } else {
            res.send("NO_LEADER");
          }
        })();
        break;
      case "dangkytangcanhom":
        //console.log(qr);
        (async () => {
          let kqua;
          let EMPL_NO = DATA.EMPL_NO;
          let OVERTIME_INFO = DATA.overtime_info;
          let tangcavalue = DATA.tangcavalue;
          var today = new Date();
          //var today_format = moment().format('YYYY-MM-DD');
          var today_format = moment().format("YYYY-MM-DD");
          let checkkq = "OK";
          let checkAttQuery = `SELECT ON_OFF FROM ZTBATTENDANCETB WHERE  CTR_CD='${DATA.CTR_CD}' AND EMPL_NO='${EMPL_NO}' AND APPLY_DATE='${today_format}'`;
          //console.log(checkAttQuery);
          let checkAttKQ = await queryDB(checkAttQuery);
          if (checkAttKQ.tk_status == "OK") {
            let query = `UPDATE ZTBATTENDANCETB SET OVERTIME=${tangcavalue}, OVERTIME_INFO='${OVERTIME_INFO}' WHERE CTR_CD='${DATA.CTR_CD}' AND EMPL_NO='${EMPL_NO}' AND ON_OFF=1 AND APPLY_DATE='${today_format}'`;
            //console.log(query);
            kqua = await queryDB(query);
            if (kqua.tk_status == "OK") {
              res.send(kqua);
            } else {
              res.send({
                tk_status: "NG",
                message: "Chưa điểm danh nên không tăng ca được",
              });
            }
            //console.log(kqua);
          } else {
            res.send({
              tk_status: "NG",
              message: "Chưa điểm danh nên không tăng ca được",
            });
          }
        })();
        break;
      case "setteamnhom":
        //console.log(qr);
        (async () => {
          let kqua;
          let EMPL_NO = DATA.EMPL_NO;
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let $teamvalue = DATA.teamvalue;
          ////console.log($teamvalue +  EMPL_NO);
          if (
            JOB_NAME == "Leader" ||
            JOB_NAME == "Sub Leader" ||
            JOB_NAME == "Dept Staff" ||
            JOB_NAME == "ADMIN"
          ) {
            var today = new Date();
            let checkkq = "OK";
            let setpdQuery = `UPDATE ZTBEMPLINFO SET WORK_SHIFT_CODE=${$teamvalue} WHERE CTR_CD='${DATA.CTR_CD}' AND EMPL_NO='${EMPL_NO}'`;
            let updateam_diemdanh = `UPDATE ZTBATTENDANCETB SET CURRENT_TEAM= ${$teamvalue} WHERE CTR_CD='${DATA.CTR_CD}' AND APPLY_DATE ='${moment().format(
              "YYYY-MM-DD")}' AND EMPL_NO='${DATA.EMPL_NO}'`;
            //////console.log(setpdQuery);
            checkkq = await queryDB(setpdQuery);
            checkkq2 = await queryDB(updateam_diemdanh);
            res.send(checkkq);
          } else {
            res.send({ tk_status: "NG", message: "Không phải leader" });
          }
        })();
        break;
      case "dangkynghi2":
        //console.log(qr);
        (async () => {
          let kqua;
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let START_DATE = DATA.ngaybatdau;
          let END_DATE = DATA.ngayketthuc;
          let REASON_CODE = DATA.reason_code;
          let REMARK_CONTENT = DATA.remark_content;
          let CANGHI = DATA.canghi;
          var from = new Date(START_DATE);
          var to = new Date(END_DATE);
          var today = new Date();
          var today_format = moment().format("YYYY-MM-DD");
          let checkkq = "OK";
          if (CANGHI === 1) {
            for (var day = from; day <= to; day.setDate(day.getDate() + 1)) {
              let apply_date = moment(day).format("YYYY-MM-DD");
              //console.log(apply_date);
              let query = `INSERT INTO ZTBOFFREGISTRATIONTB (CTR_CD,EMPL_NO,REQUEST_DATE,APPLY_DATE,REASON_CODE,REMARK,APPROVAL_STATUS,CA_NGHI) VALUES ('${DATA.CTR_CD}','${EMPL_NO}','${today_format}','${apply_date}',${REASON_CODE},N'${REMARK_CONTENT}',2,${CANGHI})`;
              //console.log(query);
              kqua = await queryDB(query);
              if (kqua.tk_status != "OK") checkkq = "NG";
            }
          } else if (CANGHI === 2) {
            for (var day = from; day < to; day.setDate(day.getDate() + 1)) {
              let apply_date = moment(day).format("YYYY-MM-DD");
              //console.log(apply_date);
              let query = `INSERT INTO ZTBOFFREGISTRATIONTB (CTR_CD,EMPL_NO,REQUEST_DATE,APPLY_DATE,REASON_CODE,REMARK,APPROVAL_STATUS,CA_NGHI) VALUES ('${DATA.CTR_CD}','${EMPL_NO}','${today_format}','${apply_date}',${REASON_CODE},N'${REMARK_CONTENT}',2,${CANGHI})`;
              //console.log(query);
              kqua = await queryDB(query);
              if (kqua.tk_status != "OK") checkkq = "NG";
            }
          }
          if (checkkq === "OK") {
            res.send({ tk_status: "OK" });
          } else {
            res.send({
              tk_status: "NG",
              message: "Ngày đã dược đăng ký rồi, không thể đăng ký lại",
            });
          }
        })();
        //res.send('ket qua tra ve' + req.cookies.token);
        break;
      case "dangkynghi2_AUTO":
        //console.log(qr);
        (async () => {
          let kqua;
          //console.log(DATA);
          let EMPL_NO = DATA.EMPL_NO;
          let START_DATE = DATA.ngaybatdau;
          let END_DATE = DATA.ngayketthuc;
          let REASON_CODE = DATA.reason_code;
          let REMARK_CONTENT = DATA.remark_content;
          let CANGHI = DATA.canghi;
          var from = new Date(START_DATE);
          var to = new Date(END_DATE);
          var today = new Date();
          var today_format = moment().format("YYYY-MM-DD");
          let checkkq = "OK";
          if (CANGHI === 1) {
            for (var day = from; day <= to; day.setDate(day.getDate() + 1)) {
              let apply_date = moment(day).format("YYYY-MM-DD");
              //console.log(apply_date);
              let query = `INSERT INTO ZTBOFFREGISTRATIONTB (CTR_CD,EMPL_NO,REQUEST_DATE,APPLY_DATE,REASON_CODE,REMARK,APPROVAL_STATUS,CA_NGHI) VALUES ('${DATA.CTR_CD}','${EMPL_NO}','${today_format}','${apply_date}',${REASON_CODE},N'${REMARK_CONTENT}',1,${CANGHI})`;
              //console.log(query);
              kqua = await queryDB(query);
              if (kqua.tk_status != "OK") checkkq = "NG";
            }
          } else if (CANGHI === 2) {
            for (var day = from; day < to; day.setDate(day.getDate() + 1)) {
              let apply_date = moment(day).format("YYYY-MM-DD");
              //console.log(apply_date);
              let query = `INSERT INTO ZTBOFFREGISTRATIONTB (CTR_CD,EMPL_NO,REQUEST_DATE,APPLY_DATE,REASON_CODE,REMARK,APPROVAL_STATUS,CA_NGHI) VALUES ('${DATA.CTR_CD}','${EMPL_NO}','${today_format}','${apply_date}',${REASON_CODE},N'${REMARK_CONTENT}',1,${CANGHI})`;
              //console.log(query);
              kqua = await queryDB(query);
              if (kqua.tk_status != "OK") checkkq = "NG";
            }
          }
          if (checkkq === "OK") {
            res.send({ tk_status: "OK" });
          } else {
            res.send({
              tk_status: "NG",
              message: "Ngày đã dược đăng ký rồi, không thể đăng ký lại",
            });
          }
        })();
        //res.send('ket qua tra ve' + req.cookies.token);
        break;
      case "dangkytangcacanhan":
        //console.log(qr);
        (async () => {
          let kqua;
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let START_TIME = DATA.over_start;
          let FINISH_TIME = DATA.over_finish;
          let OVERTIME_INFO = START_TIME + "-" + FINISH_TIME;
          if (isNumber(START_TIME) && isNumber(FINISH_TIME)) {
            //console.log("la number");
            var today = new Date();
            var today_format = moment().format("YYYY-MM-DD");
            let checkAttQuery = `SELECT ON_OFF FROM ZTBATTENDANCETB WHERE CTR_CD='${DATA.CTR_CD}' AND EMPL_NO='${EMPL_NO}' AND APPLY_DATE='${today_format}'`;
            console.log(checkAttQuery);
            let checkAttKQ = await queryDB(checkAttQuery);
            if (checkAttKQ.tk_status != "NG") {
              let query = `UPDATE ZTBATTENDANCETB SET OVERTIME=1, OVERTIME_INFO='${OVERTIME_INFO}' WHERE CTR_CD='${DATA.CTR_CD}' AND EMPL_NO='${EMPL_NO}' AND ON_OFF=1 AND APPLY_DATE='${today_format}'`;
              console.log(query);
              kqua = await queryDB(query);
              res.send(kqua);
            } else {
              res.send({
                tk_status: "NG",
                message: "Lỗi, chưa điểm danh nên không đăng ký tăng ca được",
              });
            }
          } else {
            res.send({
              tk_status: "NG",
              message: "Lỗi, nhập sai định dạng giờ phút",
            });
          }
        })();
        break;
      case "pheduyetnhom":
        (async () => {
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let $vitrilamviec = req.payload_data["ATT_GROUP_CODE"];
          let $subdeptname = req.payload_data["SUBDEPTNAME"];
          if (
            JOB_NAME == "Leader" ||
            JOB_NAME == "Sub Leader" ||
            JOB_NAME == "Dept Staff" ||
            JOB_NAME == "ADMIN"
          ) {
            let kqua;
            let query = "";
            if (JOB_NAME == "Leader") {
              query = `SELECT ZTBOFFREGISTRATIONTB.OFF_ID AS id, ZTBOFFREGISTRATIONTB.CTR_CD,ZTBOFFREGISTRATIONTB.EMPL_NO,ZTBOFFREGISTRATIONTB.REQUEST_DATE,ZTBOFFREGISTRATIONTB.APPLY_DATE,ZTBOFFREGISTRATIONTB.REASON_CODE,ZTBOFFREGISTRATIONTB.REMARK,ZTBOFFREGISTRATIONTB.APPROVAL_STATUS,ZTBOFFREGISTRATIONTB.OFF_ID,ZTBOFFREGISTRATIONTB.CA_NGHI,ZTBEMPLINFO.CMS_ID,ZTBEMPLINFO.FIRST_NAME,ZTBEMPLINFO.MIDLAST_NAME,ZTBEMPLINFO.DOB,ZTBEMPLINFO.HOMETOWN,ZTBEMPLINFO.SEX_CODE,ZTBEMPLINFO.ADD_PROVINCE,ZTBEMPLINFO.ADD_DISTRICT,ZTBEMPLINFO.ADD_COMMUNE,ZTBEMPLINFO.ADD_VILLAGE,ZTBEMPLINFO.PHONE_NUMBER,ZTBEMPLINFO.WORK_START_DATE,ZTBEMPLINFO.PASSWORD,ZTBEMPLINFO.EMAIL,ZTBEMPLINFO.WORK_POSITION_CODE,ZTBEMPLINFO.WORK_SHIFT_CODE,ZTBEMPLINFO.POSITION_CODE,ZTBEMPLINFO.JOB_CODE,ZTBEMPLINFO.FACTORY_CODE,ZTBEMPLINFO.WORK_STATUS_CODE,ZTBEMPLINFO.ONLINE_DATETIME,ZTBSEX.SEX_NAME,ZTBSEX.SEX_NAME_KR,ZTBWORKSTATUS.WORK_STATUS_NAME,ZTBWORKSTATUS.WORK_STATUS_NAME_KR,ZTBFACTORY.FACTORY_NAME,ZTBFACTORY.FACTORY_NAME_KR,ZTBJOB.JOB_NAME,ZTBJOB.JOB_NAME_KR,ZTBPOSITION.POSITION_NAME,ZTBPOSITION.POSITION_NAME_KR,ZTBWORKSHIFT.WORK_SHIF_NAME,ZTBWORKSHIFT.WORK_SHIF_NAME_KR,ZTBWORKPOSITION.SUBDEPTCODE,ZTBWORKPOSITION.WORK_POSITION_NAME,ZTBWORKPOSITION.WORK_POSITION_NAME_KR,ZTBWORKPOSITION.ATT_GROUP_CODE,ZTBSUBDEPARTMENT.MAINDEPTCODE,ZTBSUBDEPARTMENT.SUBDEPTNAME,ZTBSUBDEPARTMENT.SUBDEPTNAME_KR,ZTBMAINDEPARMENT.MAINDEPTNAME,ZTBMAINDEPARMENT.MAINDEPTNAME_KR,ZTBREASON.REASON_NAME,ZTBREASON.REASON_NAME_KR,ZTBATTENDANCETB.ON_OFF,ZTBATTENDANCETB.OVERTIME_INFO,ZTBATTENDANCETB.OVERTIME FROM ZTBOFFREGISTRATIONTB JOIN ZTBEMPLINFO ON (ZTBEMPLINFO.EMPL_NO = ZTBOFFREGISTRATIONTB.EMPL_NO AND ZTBEMPLINFO.CTR_CD = ZTBOFFREGISTRATIONTB.CTR_CD) JOIN ZTBSEX ON (ZTBSEX.SEX_CODE = ZTBEMPLINFO.SEX_CODE AND ZTBSEX.CTR_CD = ZTBEMPLINFO.CTR_CD) JOIN ZTBWORKSTATUS ON(ZTBWORKSTATUS.WORK_STATUS_CODE = ZTBEMPLINFO.WORK_STATUS_CODE AND ZTBWORKSTATUS.CTR_CD = ZTBEMPLINFO.CTR_CD) JOIN ZTBFACTORY ON (ZTBFACTORY.FACTORY_CODE = ZTBEMPLINFO.FACTORY_CODE AND ZTBFACTORY.CTR_CD = ZTBEMPLINFO.CTR_CD) JOIN ZTBJOB ON (ZTBJOB.JOB_CODE = ZTBEMPLINFO.JOB_CODE AND ZTBJOB.CTR_CD = ZTBEMPLINFO.CTR_CD) JOIN ZTBPOSITION ON (ZTBPOSITION.POSITION_CODE = ZTBEMPLINFO.POSITION_CODE AND ZTBPOSITION.CTR_CD = ZTBEMPLINFO.CTR_CD) JOIN ZTBWORKSHIFT ON (ZTBWORKSHIFT.WORK_SHIFT_CODE = ZTBEMPLINFO.WORK_SHIFT_CODE AND ZTBWORKSHIFT.CTR_CD = ZTBEMPLINFO.CTR_CD) JOIN ZTBWORKPOSITION ON (ZTBWORKPOSITION.WORK_POSITION_CODE = ZTBEMPLINFO.WORK_POSITION_CODE AND ZTBWORKPOSITION.CTR_CD = ZTBEMPLINFO.CTR_CD) JOIN ZTBSUBDEPARTMENT ON (ZTBSUBDEPARTMENT.SUBDEPTCODE = ZTBWORKPOSITION.SUBDEPTCODE AND ZTBSUBDEPARTMENT.CTR_CD = ZTBWORKPOSITION.CTR_CD) JOIN ZTBMAINDEPARMENT ON (ZTBMAINDEPARMENT.MAINDEPTCODE = ZTBSUBDEPARTMENT.MAINDEPTCODE AND ZTBMAINDEPARMENT.CTR_CD = ZTBSUBDEPARTMENT.CTR_CD) JOIN ZTBREASON ON (ZTBREASON.REASON_CODE = ZTBOFFREGISTRATIONTB.REASON_CODE AND ZTBREASON.CTR_CD = ZTBOFFREGISTRATIONTB.CTR_CD) LEFT JOIN ZTBATTENDANCETB ON (ZTBATTENDANCETB.APPLY_DATE = ZTBOFFREGISTRATIONTB.APPLY_DATE AND ZTBATTENDANCETB.EMPL_NO = ZTBOFFREGISTRATIONTB.EMPL_NO AND ZTBATTENDANCETB.CTR_CD = ZTBOFFREGISTRATIONTB.CTR_CD) WHERE ZTBOFFREGISTRATIONTB.CTR_CD='${DATA.CTR_CD}' AND  (ZTBSUBDEPARTMENT.SUBDEPTNAME='${$subdeptname}' OR ZTBWORKPOSITION.ATT_GROUP_CODE='${$vitrilamviec}') ORDER BY OFF_ID DESC`;
            } else {
              query = `SELECT ZTBOFFREGISTRATIONTB.OFF_ID AS id,ZTBOFFREGISTRATIONTB.CTR_CD,ZTBOFFREGISTRATIONTB.EMPL_NO,ZTBOFFREGISTRATIONTB.REQUEST_DATE,ZTBOFFREGISTRATIONTB.APPLY_DATE,ZTBOFFREGISTRATIONTB.REASON_CODE,ZTBOFFREGISTRATIONTB.REMARK,ZTBOFFREGISTRATIONTB.APPROVAL_STATUS,ZTBOFFREGISTRATIONTB.OFF_ID,ZTBOFFREGISTRATIONTB.CA_NGHI,ZTBEMPLINFO.CMS_ID,ZTBEMPLINFO.FIRST_NAME,ZTBEMPLINFO.MIDLAST_NAME,ZTBEMPLINFO.DOB,ZTBEMPLINFO.HOMETOWN,ZTBEMPLINFO.SEX_CODE,ZTBEMPLINFO.ADD_PROVINCE,ZTBEMPLINFO.ADD_DISTRICT,ZTBEMPLINFO.ADD_COMMUNE,ZTBEMPLINFO.ADD_VILLAGE,ZTBEMPLINFO.PHONE_NUMBER,ZTBEMPLINFO.WORK_START_DATE,ZTBEMPLINFO.PASSWORD,ZTBEMPLINFO.EMAIL,ZTBEMPLINFO.WORK_POSITION_CODE,ZTBEMPLINFO.WORK_SHIFT_CODE,ZTBEMPLINFO.POSITION_CODE,ZTBEMPLINFO.JOB_CODE,ZTBEMPLINFO.FACTORY_CODE,ZTBEMPLINFO.WORK_STATUS_CODE,ZTBEMPLINFO.ONLINE_DATETIME,ZTBSEX.SEX_NAME,ZTBSEX.SEX_NAME_KR,ZTBWORKSTATUS.WORK_STATUS_NAME,ZTBWORKSTATUS.WORK_STATUS_NAME_KR,ZTBFACTORY.FACTORY_NAME,ZTBFACTORY.FACTORY_NAME_KR,ZTBJOB.JOB_NAME,ZTBJOB.JOB_NAME_KR,ZTBPOSITION.POSITION_NAME,ZTBPOSITION.POSITION_NAME_KR,ZTBWORKSHIFT.WORK_SHIF_NAME,ZTBWORKSHIFT.WORK_SHIF_NAME_KR,ZTBWORKPOSITION.SUBDEPTCODE,ZTBWORKPOSITION.WORK_POSITION_NAME,ZTBWORKPOSITION.WORK_POSITION_NAME_KR,ZTBWORKPOSITION.ATT_GROUP_CODE,ZTBSUBDEPARTMENT.MAINDEPTCODE,ZTBSUBDEPARTMENT.SUBDEPTNAME,ZTBSUBDEPARTMENT.SUBDEPTNAME_KR,ZTBMAINDEPARMENT.MAINDEPTNAME,ZTBMAINDEPARMENT.MAINDEPTNAME_KR,ZTBREASON.REASON_NAME,ZTBREASON.REASON_NAME_KR,ZTBATTENDANCETB.ON_OFF,ZTBATTENDANCETB.OVERTIME_INFO,ZTBATTENDANCETB.OVERTIME FROM ZTBOFFREGISTRATIONTB JOIN ZTBEMPLINFO ON (ZTBEMPLINFO.EMPL_NO = ZTBOFFREGISTRATIONTB.EMPL_NO AND ZTBEMPLINFO.CTR_CD = ZTBOFFREGISTRATIONTB.CTR_CD) JOIN ZTBSEX ON (ZTBSEX.SEX_CODE = ZTBEMPLINFO.SEX_CODE AND ZTBSEX.CTR_CD = ZTBEMPLINFO.CTR_CD) JOIN ZTBWORKSTATUS ON(ZTBWORKSTATUS.WORK_STATUS_CODE = ZTBEMPLINFO.WORK_STATUS_CODE AND ZTBWORKSTATUS.CTR_CD = ZTBEMPLINFO.CTR_CD) JOIN ZTBFACTORY ON (ZTBFACTORY.FACTORY_CODE = ZTBEMPLINFO.FACTORY_CODE AND ZTBFACTORY.CTR_CD = ZTBEMPLINFO.CTR_CD) JOIN ZTBJOB ON (ZTBJOB.JOB_CODE = ZTBEMPLINFO.JOB_CODE AND ZTBJOB.CTR_CD = ZTBEMPLINFO.CTR_CD) JOIN ZTBPOSITION ON (ZTBPOSITION.POSITION_CODE = ZTBEMPLINFO.POSITION_CODE AND ZTBPOSITION.CTR_CD = ZTBEMPLINFO.CTR_CD) JOIN ZTBWORKSHIFT ON (ZTBWORKSHIFT.WORK_SHIFT_CODE = ZTBEMPLINFO.WORK_SHIFT_CODE AND ZTBWORKSHIFT.CTR_CD = ZTBEMPLINFO.CTR_CD) JOIN ZTBWORKPOSITION ON (ZTBWORKPOSITION.WORK_POSITION_CODE = ZTBEMPLINFO.WORK_POSITION_CODE AND ZTBWORKPOSITION.CTR_CD = ZTBEMPLINFO.CTR_CD) JOIN ZTBSUBDEPARTMENT ON (ZTBSUBDEPARTMENT.SUBDEPTCODE = ZTBWORKPOSITION.SUBDEPTCODE AND ZTBSUBDEPARTMENT.CTR_CD = ZTBWORKPOSITION.CTR_CD) JOIN ZTBMAINDEPARMENT ON (ZTBMAINDEPARMENT.MAINDEPTCODE = ZTBSUBDEPARTMENT.MAINDEPTCODE AND ZTBMAINDEPARMENT.CTR_CD = ZTBSUBDEPARTMENT.CTR_CD) JOIN ZTBREASON ON (ZTBREASON.REASON_CODE = ZTBOFFREGISTRATIONTB.REASON_CODE AND ZTBREASON.CTR_CD = ZTBOFFREGISTRATIONTB.CTR_CD) LEFT JOIN ZTBATTENDANCETB ON (ZTBATTENDANCETB.APPLY_DATE = ZTBOFFREGISTRATIONTB.APPLY_DATE AND ZTBATTENDANCETB.EMPL_NO = ZTBOFFREGISTRATIONTB.EMPL_NO AND ZTBATTENDANCETB.CTR_CD = ZTBOFFREGISTRATIONTB.CTR_CD) WHERE ZTBOFFREGISTRATIONTB.CTR_CD='${DATA.CTR_CD}' AND ZTBWORKPOSITION.ATT_GROUP_CODE='${$vitrilamviec}' ORDER BY OFF_ID DESC`;
            }
            //console.log(query);
            kqua = await queryDB(query);
            // //console.log(kqua);
            res.send(kqua);
          } else {
            res.send({
              tk_status: "NG",
              message: "Không phải leader or staff",
            });
          }
        })();
        break;
      case "pheduyetnhomBP":
        (async () => {
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTCODE = req.payload_data["MAINDEPTCODE"];
          let $vitrilamviec = req.payload_data["ATT_GROUP_CODE"];
          let $subdeptname = req.payload_data["SUBDEPTNAME"];
          if (
            JOB_NAME == "Leader" ||
            JOB_NAME == "Sub Leader" ||
            JOB_NAME == "Dept Staff" ||
            JOB_NAME == "ADMIN"
          ) {
            let kqua;
            let query = `SELECT ZTBOFFREGISTRATIONTB.OFF_ID AS id, ZTBOFFREGISTRATIONTB.CTR_CD,ZTBOFFREGISTRATIONTB.EMPL_NO,ZTBOFFREGISTRATIONTB.REQUEST_DATE,ZTBOFFREGISTRATIONTB.APPLY_DATE,ZTBOFFREGISTRATIONTB.REASON_CODE,ZTBOFFREGISTRATIONTB.REMARK,ZTBOFFREGISTRATIONTB.APPROVAL_STATUS,ZTBOFFREGISTRATIONTB.OFF_ID,ZTBOFFREGISTRATIONTB.CA_NGHI,ZTBEMPLINFO.CMS_ID,ZTBEMPLINFO.FIRST_NAME,ZTBEMPLINFO.MIDLAST_NAME,ZTBEMPLINFO.DOB,ZTBEMPLINFO.HOMETOWN,ZTBEMPLINFO.SEX_CODE,ZTBEMPLINFO.ADD_PROVINCE,ZTBEMPLINFO.ADD_DISTRICT,ZTBEMPLINFO.ADD_COMMUNE,ZTBEMPLINFO.ADD_VILLAGE,ZTBEMPLINFO.PHONE_NUMBER,ZTBEMPLINFO.WORK_START_DATE,ZTBEMPLINFO.PASSWORD,ZTBEMPLINFO.EMAIL,ZTBEMPLINFO.WORK_POSITION_CODE,ZTBEMPLINFO.WORK_SHIFT_CODE,ZTBEMPLINFO.POSITION_CODE,ZTBEMPLINFO.JOB_CODE,ZTBEMPLINFO.FACTORY_CODE,ZTBEMPLINFO.WORK_STATUS_CODE,ZTBEMPLINFO.ONLINE_DATETIME,ZTBSEX.SEX_NAME,ZTBSEX.SEX_NAME_KR,ZTBWORKSTATUS.WORK_STATUS_NAME,ZTBWORKSTATUS.WORK_STATUS_NAME_KR,ZTBFACTORY.FACTORY_NAME,ZTBFACTORY.FACTORY_NAME_KR,ZTBJOB.JOB_NAME,ZTBJOB.JOB_NAME_KR,ZTBPOSITION.POSITION_NAME,ZTBPOSITION.POSITION_NAME_KR,ZTBWORKSHIFT.WORK_SHIF_NAME,ZTBWORKSHIFT.WORK_SHIF_NAME_KR,ZTBWORKPOSITION.SUBDEPTCODE,ZTBWORKPOSITION.WORK_POSITION_NAME,ZTBWORKPOSITION.WORK_POSITION_NAME_KR,ZTBWORKPOSITION.ATT_GROUP_CODE,ZTBSUBDEPARTMENT.MAINDEPTCODE,ZTBSUBDEPARTMENT.SUBDEPTNAME,ZTBSUBDEPARTMENT.SUBDEPTNAME_KR,ZTBMAINDEPARMENT.MAINDEPTNAME,ZTBMAINDEPARMENT.MAINDEPTNAME_KR,ZTBREASON.REASON_NAME,ZTBREASON.REASON_NAME_KR,ZTBATTENDANCETB.ON_OFF,ZTBATTENDANCETB.OVERTIME_INFO,ZTBATTENDANCETB.OVERTIME FROM ZTBOFFREGISTRATIONTB JOIN ZTBEMPLINFO ON (ZTBEMPLINFO.EMPL_NO = ZTBOFFREGISTRATIONTB.EMPL_NO AND ZTBEMPLINFO.CTR_CD = ZTBOFFREGISTRATIONTB.CTR_CD) JOIN ZTBSEX ON (ZTBSEX.SEX_CODE = ZTBEMPLINFO.SEX_CODE AND ZTBSEX.CTR_CD = ZTBEMPLINFO.CTR_CD) JOIN ZTBWORKSTATUS ON(ZTBWORKSTATUS.WORK_STATUS_CODE = ZTBEMPLINFO.WORK_STATUS_CODE AND ZTBWORKSTATUS.CTR_CD = ZTBEMPLINFO.CTR_CD) JOIN ZTBFACTORY ON (ZTBFACTORY.FACTORY_CODE = ZTBEMPLINFO.FACTORY_CODE AND ZTBFACTORY.CTR_CD = ZTBEMPLINFO.CTR_CD) JOIN ZTBJOB ON (ZTBJOB.JOB_CODE = ZTBEMPLINFO.JOB_CODE AND ZTBJOB.CTR_CD = ZTBEMPLINFO.CTR_CD) JOIN ZTBPOSITION ON (ZTBPOSITION.POSITION_CODE = ZTBEMPLINFO.POSITION_CODE AND ZTBPOSITION.CTR_CD = ZTBEMPLINFO.CTR_CD) JOIN ZTBWORKSHIFT ON (ZTBWORKSHIFT.WORK_SHIFT_CODE = ZTBEMPLINFO.WORK_SHIFT_CODE AND ZTBWORKSHIFT.CTR_CD = ZTBEMPLINFO.CTR_CD) JOIN ZTBWORKPOSITION ON (ZTBWORKPOSITION.WORK_POSITION_CODE = ZTBEMPLINFO.WORK_POSITION_CODE AND ZTBWORKPOSITION.CTR_CD = ZTBEMPLINFO.CTR_CD) JOIN ZTBSUBDEPARTMENT ON (ZTBSUBDEPARTMENT.SUBDEPTCODE = ZTBWORKPOSITION.SUBDEPTCODE AND ZTBSUBDEPARTMENT.CTR_CD = ZTBWORKPOSITION.CTR_CD) JOIN ZTBMAINDEPARMENT ON (ZTBMAINDEPARMENT.MAINDEPTCODE = ZTBSUBDEPARTMENT.MAINDEPTCODE AND ZTBMAINDEPARMENT.CTR_CD = ZTBSUBDEPARTMENT.CTR_CD) JOIN ZTBREASON ON (ZTBREASON.REASON_CODE = ZTBOFFREGISTRATIONTB.REASON_CODE AND ZTBREASON.CTR_CD = ZTBOFFREGISTRATIONTB.CTR_CD) LEFT JOIN ZTBATTENDANCETB ON (ZTBATTENDANCETB.APPLY_DATE = ZTBOFFREGISTRATIONTB.APPLY_DATE AND ZTBATTENDANCETB.EMPL_NO = ZTBOFFREGISTRATIONTB.EMPL_NO AND ZTBATTENDANCETB.CTR_CD = ZTBOFFREGISTRATIONTB.CTR_CD) WHERE ZTBOFFREGISTRATIONTB.CTR_CD='${DATA.CTR_CD}' AND ZTBMAINDEPARMENT.MAINDEPTCODE=${MAINDEPTCODE}  ORDER BY OFF_ID DESC`;
            kqua = await queryDB(query);
            // //console.log(kqua);
            res.send(kqua);
          } else {
            res.send({
              tk_status: "NG",
              message: "Không phải leader or staff",
            });
          }
        })();
        break;
      case "pheduyetnhomNS":
        (async () => {
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTCODE = req.payload_data["MAINDEPTCODE"];
          let $vitrilamviec = req.payload_data["ATT_GROUP_CODE"];
          let $subdeptname = req.payload_data["SUBDEPTNAME"];
          if (
            JOB_NAME == "Leader" ||
            JOB_NAME == "Sub Leader" ||
            JOB_NAME == "Dept Staff" ||
            JOB_NAME == "ADMIN"
          ) {
            let kqua;
            let query = `SELECT ZTBOFFREGISTRATIONTB.OFF_ID AS id, ZTBOFFREGISTRATIONTB.CTR_CD,ZTBOFFREGISTRATIONTB.EMPL_NO,ZTBOFFREGISTRATIONTB.REQUEST_DATE,ZTBOFFREGISTRATIONTB.APPLY_DATE,ZTBOFFREGISTRATIONTB.REASON_CODE,ZTBOFFREGISTRATIONTB.REMARK,ZTBOFFREGISTRATIONTB.APPROVAL_STATUS,ZTBOFFREGISTRATIONTB.OFF_ID,ZTBOFFREGISTRATIONTB.CA_NGHI,ZTBEMPLINFO.CMS_ID,ZTBEMPLINFO.FIRST_NAME,ZTBEMPLINFO.MIDLAST_NAME,ZTBEMPLINFO.DOB,ZTBEMPLINFO.HOMETOWN,ZTBEMPLINFO.SEX_CODE,ZTBEMPLINFO.ADD_PROVINCE,ZTBEMPLINFO.ADD_DISTRICT,ZTBEMPLINFO.ADD_COMMUNE,ZTBEMPLINFO.ADD_VILLAGE,ZTBEMPLINFO.PHONE_NUMBER,ZTBEMPLINFO.WORK_START_DATE,ZTBEMPLINFO.PASSWORD,ZTBEMPLINFO.EMAIL,ZTBEMPLINFO.WORK_POSITION_CODE,ZTBEMPLINFO.WORK_SHIFT_CODE,ZTBEMPLINFO.POSITION_CODE,ZTBEMPLINFO.JOB_CODE,ZTBEMPLINFO.FACTORY_CODE,ZTBEMPLINFO.WORK_STATUS_CODE,ZTBEMPLINFO.ONLINE_DATETIME,ZTBSEX.SEX_NAME,ZTBSEX.SEX_NAME_KR,ZTBWORKSTATUS.WORK_STATUS_NAME,ZTBWORKSTATUS.WORK_STATUS_NAME_KR,ZTBFACTORY.FACTORY_NAME,ZTBFACTORY.FACTORY_NAME_KR,ZTBJOB.JOB_NAME,ZTBJOB.JOB_NAME_KR,ZTBPOSITION.POSITION_NAME,ZTBPOSITION.POSITION_NAME_KR,ZTBWORKSHIFT.WORK_SHIF_NAME,ZTBWORKSHIFT.WORK_SHIF_NAME_KR,ZTBWORKPOSITION.SUBDEPTCODE,ZTBWORKPOSITION.WORK_POSITION_NAME,ZTBWORKPOSITION.WORK_POSITION_NAME_KR,ZTBWORKPOSITION.ATT_GROUP_CODE,ZTBSUBDEPARTMENT.MAINDEPTCODE,ZTBSUBDEPARTMENT.SUBDEPTNAME,ZTBSUBDEPARTMENT.SUBDEPTNAME_KR,ZTBMAINDEPARMENT.MAINDEPTNAME,ZTBMAINDEPARMENT.MAINDEPTNAME_KR,ZTBREASON.REASON_NAME,ZTBREASON.REASON_NAME_KR,ZTBATTENDANCETB.ON_OFF,ZTBATTENDANCETB.OVERTIME_INFO,ZTBATTENDANCETB.OVERTIME FROM ZTBOFFREGISTRATIONTB JOIN ZTBEMPLINFO ON (ZTBEMPLINFO.EMPL_NO = ZTBOFFREGISTRATIONTB.EMPL_NO AND ZTBEMPLINFO.CTR_CD = ZTBOFFREGISTRATIONTB.CTR_CD) JOIN ZTBSEX ON (ZTBSEX.SEX_CODE = ZTBEMPLINFO.SEX_CODE AND ZTBSEX.CTR_CD = ZTBEMPLINFO.CTR_CD) JOIN ZTBWORKSTATUS ON(ZTBWORKSTATUS.WORK_STATUS_CODE = ZTBEMPLINFO.WORK_STATUS_CODE AND ZTBWORKSTATUS.CTR_CD = ZTBEMPLINFO.CTR_CD) JOIN ZTBFACTORY ON (ZTBFACTORY.FACTORY_CODE = ZTBEMPLINFO.FACTORY_CODE AND ZTBFACTORY.CTR_CD = ZTBEMPLINFO.CTR_CD) JOIN ZTBJOB ON (ZTBJOB.JOB_CODE = ZTBEMPLINFO.JOB_CODE AND ZTBJOB.CTR_CD = ZTBEMPLINFO.CTR_CD) JOIN ZTBPOSITION ON (ZTBPOSITION.POSITION_CODE = ZTBEMPLINFO.POSITION_CODE AND ZTBPOSITION.CTR_CD = ZTBEMPLINFO.CTR_CD) JOIN ZTBWORKSHIFT ON (ZTBWORKSHIFT.WORK_SHIFT_CODE = ZTBEMPLINFO.WORK_SHIFT_CODE AND ZTBWORKSHIFT.CTR_CD = ZTBEMPLINFO.CTR_CD) JOIN ZTBWORKPOSITION ON (ZTBWORKPOSITION.WORK_POSITION_CODE = ZTBEMPLINFO.WORK_POSITION_CODE AND ZTBWORKPOSITION.CTR_CD = ZTBEMPLINFO.CTR_CD) JOIN ZTBSUBDEPARTMENT ON (ZTBSUBDEPARTMENT.SUBDEPTCODE = ZTBWORKPOSITION.SUBDEPTCODE AND ZTBSUBDEPARTMENT.CTR_CD = ZTBWORKPOSITION.CTR_CD) JOIN ZTBMAINDEPARMENT ON (ZTBMAINDEPARMENT.MAINDEPTCODE = ZTBSUBDEPARTMENT.MAINDEPTCODE AND ZTBMAINDEPARMENT.CTR_CD = ZTBSUBDEPARTMENT.CTR_CD) JOIN ZTBREASON ON (ZTBREASON.REASON_CODE = ZTBOFFREGISTRATIONTB.REASON_CODE AND ZTBREASON.CTR_CD = ZTBOFFREGISTRATIONTB.CTR_CD) LEFT JOIN ZTBATTENDANCETB ON (ZTBATTENDANCETB.APPLY_DATE = ZTBOFFREGISTRATIONTB.APPLY_DATE AND ZTBATTENDANCETB.EMPL_NO = ZTBOFFREGISTRATIONTB.EMPL_NO AND ZTBATTENDANCETB.CTR_CD = ZTBOFFREGISTRATIONTB.CTR_CD) WHERE ZTBOFFREGISTRATIONTB.CTR_CD='${DATA.CTR_CD}'  ORDER BY OFF_ID DESC`;
            kqua = await queryDB(query);
            // //console.log(kqua);
            res.send(kqua);
          } else {
            res.send({
              tk_status: "NG",
              message: "Không phải leader or staff",
            });
          }
        })();
        break;
      case "setpheduyetnhom":
        //console.log(qr);
        (async () => {
          let kqua;
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let $off_id = DATA.off_id;
          let $pheduyetvalue = DATA.pheduyetvalue;
          if (
            JOB_NAME == "Leader" ||
            JOB_NAME == "Sub Leader" ||
            JOB_NAME == "Dept Staff" ||
            JOB_NAME == "ADMIN"
          ) {
            var today = new Date();
            let checkkq = "OK";
            let setpdQuery = `UPDATE ZTBOFFREGISTRATIONTB SET APPROVAL_STATUS=${$pheduyetvalue} WHERE OFF_ID=${$off_id} AND CTR_CD='${DATA.CTR_CD}'`;
            if ($pheduyetvalue == "3")
              setpdQuery =
                `DELETE FROM ZTBOFFREGISTRATIONTB WHERE OFF_ID=${$off_id} AND CTR_CD='${DATA.CTR_CD}'`;
            checkkq = await queryDB(setpdQuery);
            if (checkkq.tk_status != "OK") {
              res.send({
                tk_status: "NG",
                message:
                  "Có lỗi khi đăng ký, xem lại thông tin đã nhập đã đúng định dạng chưa",
              });
            } else {
              res.send(checkkq);
            }
          } else {
            res.send({ tk_status: "NG", message: "NO_LEADER" });
          }
        })();
        break;
      case "xacnhanchamcongnhom":
        (async () => {
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let kqua;
          let query = `UPDATE ZTBATTENDANCETB SET XACNHAN='${DATA.confirm_worktime}' WHERE CTR_CD='${DATA.CTR_CD}' AND EMPL_NO='${EMPL_NO}' AND APPLY_DATE='${DATA.confirm_date}' AND XACNHAN is null`;
          //console.log(query);
          kqua = await queryDB(query);
          res.send(kqua);
        })();
        break;
      case "mydiemdanhnhom":
        (async () => {
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let START_DATE = DATA.from_date;
          let END_DATE = DATA.to_date;
          let kqua;
          let query = `DECLARE @empl varchar(10); DECLARE @startdate DATE; DECLARE @enddate DATE        
           SET @startdate='${START_DATE}'
           SET @enddate='${END_DATE}'
		   SET @empl='${EMPL_NO}'
           SELECT  
		   ZTBEMPLINFOA.DATE_COLUMN,
		   ZTBEMPLINFOA.NV_CCID,
             ZTBEMPLINFOA.EMPL_NO, 
             ZTBEMPLINFOA.CMS_ID, 
             ZTBEMPLINFOA.MIDLAST_NAME, 
             ZTBEMPLINFOA.FIRST_NAME, 
             ZTBEMPLINFOA.PHONE_NUMBER, 
             ZTBSEX.SEX_NAME, 
             ZTBWORKSTATUS.WORK_STATUS_NAME, 
             ZTBFACTORY.FACTORY_NAME, 
             ZTBJOB.JOB_NAME, 
             ZTBWORKSHIFT.WORK_SHIF_NAME, 
             ZTBWORKPOSITION.WORK_POSITION_NAME, 
             ZTBSUBDEPARTMENT.SUBDEPTNAME, 
             ZTBMAINDEPARMENT.MAINDEPTNAME, 
             ZTBOFFREGISTRATIONTB.REQUEST_DATE, 
             ZTBATTENDANCETB.APPLY_DATE, 
             ZTBOFFREGISTRATIONTB.APPROVAL_STATUS, 
             ZTBOFFREGISTRATIONTB.OFF_ID, 
             ZTBOFFREGISTRATIONTB.CA_NGHI, 
             ZTBATTENDANCETB.ON_OFF, 
             ZTBATTENDANCETB.OVERTIME_INFO, 
             ZTBATTENDANCETB.OVERTIME, 
             ZTBREASON.REASON_NAME, 
             ZTBOFFREGISTRATIONTB.REMARK, 
             ZTBATTENDANCETB.XACNHAN,
			 ZTB_CALV.CA_CODE,	
			 ZTB_CALV.CA_NAME,	
			 ZTB_CALV.IN_START,	
			 ZTB_CALV.IN_END,
			 ZTB_CALV.OUT_START,
			 ZTB_CALV.OUT_END,
			 CCTB.[1] AS CHECK1,
			 CCTB.[2] AS CHECK2,
			 CCTB.[3] AS CHECK3
       FROM 
       (SELECT DATE_COLUMN, NV_CCID,EMPL_NO,CMS_ID,FIRST_NAME,MIDLAST_NAME,DOB,HOMETOWN,SEX_CODE,ADD_PROVINCE,ADD_DISTRICT,ADD_COMMUNE,ADD_VILLAGE,PHONE_NUMBER,WORK_START_DATE,PASSWORD,EMAIL,WORK_POSITION_CODE,WORK_SHIFT_CODE,POSITION_CODE,JOB_CODE,FACTORY_CODE,WORK_STATUS_CODE,REMARK,ONLINE_DATETIME,EMPL_IMAGE,RESIGN_DATE, DATETABLE.CTR_CD  FROM DATETABLE CROSS JOIN ZTBEMPLINFO WHERE DATETABLE.DATE_COLUMN BETWEEN @startdate AND @enddate AND ZTBEMPLINFO.WORK_STATUS_CODE<>0) AS ZTBEMPLINFOA 
       LEFT JOIN (SELECT DATETABLE.CTR_CD, DATETABLE.DATE_COLUMN, ZTBATTENDANCETB.EMPL_NO,  ZTBATTENDANCETB.APPLY_DATE,  ZTBATTENDANCETB.ON_OFF,  ZTBATTENDANCETB.REMARK,  ZTBATTENDANCETB.OVERTIME_INFO, ZTBATTENDANCETB.OVERTIME, ZTBATTENDANCETB.XACNHAN,CURRENT_TEAM , ZTBATTENDANCETB.CURRENT_CA FROM DATETABLE LEFT JOIN ZTBATTENDANCETB ON (DATETABLE.DATE_COLUMN = ZTBATTENDANCETB.APPLY_DATE AND DATETABLE.CTR_CD = ZTBATTENDANCETB.CTR_CD) WHERE DATETABLE.DATE_COLUMN BETWEEN @startdate AND @enddate) AS ZTBATTENDANCETB ON (
         ZTBEMPLINFOA.EMPL_NO = ZTBATTENDANCETB.EMPL_NO AND ZTBEMPLINFOA.DATE_COLUMN = ZTBATTENDANCETB.APPLY_DATE AND ZTBEMPLINFOA.CTR_CD = ZTBATTENDANCETB.CTR_CD
       ) 
       LEFT JOIN ZTBSEX ON (
         ZTBSEX.SEX_CODE = ZTBEMPLINFOA.SEX_CODE AND ZTBSEX.CTR_CD = ZTBEMPLINFOA.CTR_CD
       ) 
       LEFT JOIN ZTBWORKSTATUS ON(
         ZTBWORKSTATUS.WORK_STATUS_CODE = ZTBEMPLINFOA.WORK_STATUS_CODE AND ZTBWORKSTATUS.CTR_CD = ZTBEMPLINFOA.CTR_CD
       ) 
       LEFT JOIN ZTBFACTORY ON (
         ZTBFACTORY.FACTORY_CODE = ZTBEMPLINFOA.FACTORY_CODE AND ZTBFACTORY.CTR_CD = ZTBEMPLINFOA.CTR_CD
       ) 
       LEFT JOIN ZTBJOB ON (
         ZTBJOB.JOB_CODE = ZTBEMPLINFOA.JOB_CODE AND ZTBJOB.CTR_CD = ZTBEMPLINFOA.CTR_CD
       ) 
       LEFT JOIN ZTBPOSITION ON (
         ZTBPOSITION.POSITION_CODE = ZTBEMPLINFOA.POSITION_CODE AND ZTBPOSITION.CTR_CD = ZTBEMPLINFOA.CTR_CD
       ) 
       LEFT JOIN ZTBWORKSHIFT ON (
         ZTBWORKSHIFT.WORK_SHIFT_CODE = ZTBEMPLINFOA.WORK_SHIFT_CODE AND ZTBWORKSHIFT.CTR_CD = ZTBEMPLINFOA.CTR_CD
       ) 
       LEFT JOIN ZTBWORKPOSITION ON (
         ZTBWORKPOSITION.WORK_POSITION_CODE = ZTBEMPLINFOA.WORK_POSITION_CODE AND ZTBWORKPOSITION.CTR_CD = ZTBEMPLINFOA.CTR_CD
       ) 
       LEFT JOIN ZTBSUBDEPARTMENT ON (
         ZTBSUBDEPARTMENT.SUBDEPTCODE = ZTBWORKPOSITION.SUBDEPTCODE AND ZTBSUBDEPARTMENT.CTR_CD = ZTBWORKPOSITION.CTR_CD
       ) 
       LEFT JOIN ZTBMAINDEPARMENT ON (
         ZTBMAINDEPARMENT.MAINDEPTCODE = ZTBSUBDEPARTMENT.MAINDEPTCODE AND ZTBMAINDEPARMENT.CTR_CD = ZTBSUBDEPARTMENT.CTR_CD
       ) 
       LEFT JOIN ZTBOFFREGISTRATIONTB ON (
         ZTBOFFREGISTRATIONTB.EMPL_NO = ZTBATTENDANCETB.EMPL_NO 
         AND ZTBOFFREGISTRATIONTB.APPLY_DATE = ZTBATTENDANCETB.APPLY_DATE
         AND ZTBOFFREGISTRATIONTB.CTR_CD = ZTBATTENDANCETB.CTR_CD
       ) 
       LEFT JOIN ZTBREASON ON (
         ZTBOFFREGISTRATIONTB.REASON_CODE = ZTBREASON.REASON_CODE AND ZTBOFFREGISTRATIONTB.CTR_CD = ZTBREASON.CTR_CD
       )   
 LEFT JOIN ZTB_CALV ON (ZTB_CALV.CA_CODE = ZTBATTENDANCETB.CURRENT_CA AND ZTB_CALV.CTR_CD = ZTBATTENDANCETB.CTR_CD)
LEFT JOIN (
			SELECT * FROM 
				(SELECT NV_CCID, CHECK_DATE, CHECK_DATETIME, RANK() OVER (PARTITION BY NV_CCID, CHECK_DATE ORDER BY CHECK_DATETIME ASC) AS CHECKNO FROM fn_cleanchamcong(10))
				AS STB
				PIVOT
				(
				MIN(STB.CHECK_DATETIME)
				FOR STB.CHECKNO IN ([1],[2],[3],[4],[5],[6])
				) AS pvtb
			 ) AS CCTB			
			 ON (CCTB.CHECK_DATE = ZTBEMPLINFOA.DATE_COLUMN AND CCTB.NV_CCID = ZTBEMPLINFOA.NV_CCID)	
 WHERE ZTBEMPLINFOA.WORK_STATUS_CODE =1  AND ZTBEMPLINFOA.EMPL_NO=@empl AND ZTBEMPLINFOA.DATE_COLUMN BETWEEN @startdate AND @enddate AND ZTBEMPLINFOA.CTR_CD='${DATA.CTR_CD}'
 ORDER BY ZTBEMPLINFOA.DATE_COLUMN DESC, ZTBEMPLINFOA.POSITION_CODE ASC`;
          //console.log(query);
          kqua = await queryDB(query);
          res.send(kqua);
        })();
        break;
      case "diemdanhsummarynhom": /* chua sua CTR_CD */
        (async () => {
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          if (
            JOB_NAME == "Leader" ||
            JOB_NAME == "Sub Leader" ||
            JOB_NAME == "Dept Staff" ||
            JOB_NAME == "ADMIN"
          ) {
            let kqua;
            let query =
              "DECLARE @tradate As DATE; SET @tradate = '" +
              DATA.todate +
              "' SELECT CONCAT(TONG_FULL.MAINDEPTNAME, TONG_FULL.SUBDEPTNAME) As id, TONG_FULL.MAINDEPTNAME, TONG_FULL.SUBDEPTNAME, (TONG_FULL.NhaMay1+TONG_FULL.NhaMay2) AS TOTAL_ALL, (isnull(TONG_ON.NhaMay1,0) + isnull(TONG_ON.NhaMay2,0)) AS TOTAL_ON, (isnull(TONG_OFF.NhaMay1,0)+ isnull(TONG_OFF.NhaMay2,0)) AS TOTAL_OFF, (isnull(TONG_NULL.NhaMay1,0)+ isnull(TONG_NULL.NhaMay2,0)) AS TOTAL_CDD, isnull(TONG_FULL.NhaMay1,0) as TOTAL_NM1, isnull(TONG_FULL.NhaMay2,0) as TOTAL_NM2, isnull(TONG_ON.NhaMay1,0) as ON_NM1, isnull(TONG_ON.NhaMay2,0) as ON_NM2, isnull(TONG_OFF.NhaMay1,0) as OFF_NM1, isnull(TONG_OFF.NhaMay2,0) as OFF_NM2, isnull(TONG_NULL.NhaMay1,0) as CDD_NM1, isnull(TONG_NULL.NhaMay2,0) as CDD_NM2 FROM fn_DiemDanhTong_FULL(@tradate) AS TONG_FULL LEFT JOIN (SELECT * FROM fn_DiemDanhTong_ON(@tradate)) AS TONG_ON ON (TONG_ON.SUBDEPTNAME = TONG_FULL.SUBDEPTNAME) LEFT JOIN (SELECT * FROM fn_DiemDanhTong_OFF(@tradate)) AS TONG_OFF ON (TONG_OFF.SUBDEPTNAME = TONG_FULL.SUBDEPTNAME) LEFT JOIN (SELECT * FROM fn_DiemDanhTong_NULL(@tradate)) AS TONG_NULL ON (TONG_NULL.SUBDEPTNAME = TONG_FULL.SUBDEPTNAME) ORDER BY MAINDEPTNAME DESC, SUBDEPTNAME ASC";
            kqua = await queryDB(query);
            // //console.log(kqua);
            res.send(kqua);
          } else {
            res.send({ tk_status: "NG", message: "Không phải leader" });
          }
        })();
        break;
      case "getmaindeptlist":
        (async () => {
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let kqua;
          let query = `SELECT * FROM ZTBMAINDEPARMENT WHERE CTR_CD='${DATA.CTR_CD}'`;
          kqua = await queryDB(query);
          res.send(kqua);
        })();
        break;
      case "workpositionlist":
        (async () => {
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let kqua;
          let query = `SELECT * FROM ZTBWORKPOSITION WHERE CTR_CD='${DATA.CTR_CD}'`;
          kqua = await queryDB(query);
          res.send(kqua);
        })();
        break;
      case "workpositionlist_BP":
        (async () => {
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTCODE = req.payload_data["MAINDEPTCODE"];
          let kqua;
          let query = `SELECT ZTBWORKPOSITION.CTR_CD, ZTBWORKPOSITION.SUBDEPTCODE, ZTBWORKPOSITION.WORK_POSITION_CODE, ZTBWORKPOSITION.WORK_POSITION_NAME, ZTBWORKPOSITION.WORK_POSITION_NAME_KR, ZTBWORKPOSITION.ATT_GROUP_CODE  FROM ZTBWORKPOSITION JOIN ZTBSUBDEPARTMENT ON (ZTBWORKPOSITION.SUBDEPTCODE = ZTBSUBDEPARTMENT.SUBDEPTCODE AND ZTBWORKPOSITION.CTR_CD = ZTBSUBDEPARTMENT.CTR_CD) 
                    JOIN ZTBMAINDEPARMENT ON (ZTBMAINDEPARMENT.MAINDEPTCODE = ZTBSUBDEPARTMENT.MAINDEPTCODE AND ZTBMAINDEPARMENT.CTR_CD = ZTBSUBDEPARTMENT.CTR_CD)
                    WHERE ZTBMAINDEPARMENT.MAINDEPTCODE=${MAINDEPTCODE} AND ZTBWORKPOSITION.CTR_CD='${DATA.CTR_CD}'`;
          kqua = await queryDB(query);
          res.send(kqua);
        })();
        break;
      case "workpositionlist_NS":
        (async () => {
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTCODE = req.payload_data["MAINDEPTCODE"];
          let kqua;
          let query = `SELECT ZTBWORKPOSITION.CTR_CD, ZTBWORKPOSITION.SUBDEPTCODE, ZTBWORKPOSITION.WORK_POSITION_CODE, ZTBWORKPOSITION.WORK_POSITION_NAME, ZTBWORKPOSITION.WORK_POSITION_NAME_KR, ZTBWORKPOSITION.ATT_GROUP_CODE  FROM ZTBWORKPOSITION JOIN ZTBSUBDEPARTMENT ON (ZTBWORKPOSITION.SUBDEPTCODE = ZTBSUBDEPARTMENT.SUBDEPTCODE AND ZTBWORKPOSITION.CTR_CD = ZTBSUBDEPARTMENT.CTR_CD) 
                    JOIN ZTBMAINDEPARMENT ON (ZTBMAINDEPARMENT.MAINDEPTCODE = ZTBSUBDEPARTMENT.MAINDEPTCODE AND ZTBMAINDEPARMENT.CTR_CD = ZTBSUBDEPARTMENT.CTR_CD)
                    WHERE  ZTBWORKPOSITION.CTR_CD='${DATA.CTR_CD}'`;
          kqua = await queryDB(query);
          res.send(kqua);
        })();
        break;
      case "diemdanhhistorynhom":
        (async () => {
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let start_date = DATA.start_date;
          let end_date = DATA.end_date;
          let maindeptcode = DATA.MAINDEPTCODE;
          let workshiftcode = DATA.WORK_SHIFT_CODE;
          let factorycode = DATA.FACTORY_CODE;
          //////console.log(DATA);
          let condition = `DD_TT.CTR_CD='${DATA.CTR_CD}' `;
          if (maindeptcode != 0) {
            condition += ` AND DD_TT.MAINDEPTCODE = ${maindeptcode}`;
          }
          switch (workshiftcode) {
            case 1:
              condition += ` AND DD_TT.WORK_SHIFT_CODE = 1 `;
              break;
            case 2:
              condition += ` AND DD_TT.WORK_SHIFT_CODE = 2 `;
              break;
            case 3:
              condition += ` AND DD_TT.WORK_SHIFT_CODE = 0 `;
              break;
            case 4:
              condition += ` AND DD_TT.WORK_SHIFT_CODE <> 2 `;
              break;
            case 5:
              condition += ` AND DD_TT.WORK_SHIFT_CODE <> 1 `;
              break;
          }
          if (factorycode != 0) {
            condition += ` AND DD_TT.FACTORY_CODE = ${factorycode} `;
          }
          if (
            JOB_NAME == "Leader" ||
            JOB_NAME == "Sub Leader" ||
            JOB_NAME == "Dept Staff" ||
            JOB_NAME == "ADMIN"
          ) {
            let kqua;
            let query = `DECLARE @empl varchar(10); DECLARE @startdate DATE; DECLARE @enddate DATE; SET @startdate='${start_date}' SET @enddate='${end_date}' SELECT DD_TT.APPLY_DATE as id,DD_TT.APPLY_DATE, COUNT(DD_TT.ON_OFF) AS TOTAL, COUNT(CASE DD_TT.ON_OFF WHEN 1 THEN 1 ELSE null END) AS TOTAL_ON, COUNT(CASE DD_TT.ON_OFF WHEN 0 THEN 1 ELSE null END) AS TOTAL_OFF, CAST(COUNT(CASE DD_TT.ON_OFF WHEN 1 THEN 1 ELSE null END) AS FLOAT) / CAST ( COUNT(DD_TT.ON_OFF) AS FLOAT) * 100 AS ON_RATE FROM ( SELECT ZTBATTENDANCETB.CTR_CD,ZTBEMPLINFO.EMPL_NO,CMS_ID,MIDLAST_NAME,FIRST_NAME,PHONE_NUMBER,SEX_NAME,WORK_STATUS_NAME,FACTORY_NAME,  ZTBMAINDEPARMENT.MAINDEPTCODE,ZTBWORKSHIFT.WORK_SHIFT_CODE, ZTBFACTORY.FACTORY_CODE, JOB_NAME,WORK_SHIF_NAME,WORK_POSITION_NAME,SUBDEPTNAME,MAINDEPTNAME,REQUEST_DATE,ZTBATTENDANCETB.APPLY_DATE,APPROVAL_STATUS,OFF_ID,CA_NGHI,ON_OFF,OVERTIME_INFO,OVERTIME, REASON_NAME, ZTBOFFREGISTRATIONTB.REMARK, ZTBATTENDANCETB.XACNHAN FROM ZTBATTENDANCETB LEFT JOIN ZTBEMPLINFO ON (ZTBEMPLINFO.EMPL_NO = ZTBATTENDANCETB.EMPL_NO AND ZTBEMPLINFO.CTR_CD = ZTBATTENDANCETB.CTR_CD) LEFT JOIN ZTBSEX ON (ZTBSEX.SEX_CODE = ZTBEMPLINFO.SEX_CODE AND ZTBSEX.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBWORKSTATUS ON(ZTBWORKSTATUS.WORK_STATUS_CODE = ZTBEMPLINFO.WORK_STATUS_CODE AND ZTBWORKSTATUS.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBFACTORY ON (ZTBFACTORY.FACTORY_CODE = ZTBEMPLINFO.FACTORY_CODE AND ZTBFACTORY.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBJOB ON (ZTBJOB.JOB_CODE = ZTBEMPLINFO.JOB_CODE AND ZTBJOB.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBPOSITION ON (ZTBPOSITION.POSITION_CODE = ZTBEMPLINFO.POSITION_CODE AND ZTBPOSITION.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBWORKSHIFT ON (ZTBWORKSHIFT.WORK_SHIFT_CODE = ZTBEMPLINFO.WORK_SHIFT_CODE AND ZTBWORKSHIFT.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBWORKPOSITION ON (ZTBWORKPOSITION.WORK_POSITION_CODE = ZTBEMPLINFO.WORK_POSITION_CODE AND ZTBWORKPOSITION.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBSUBDEPARTMENT ON (ZTBSUBDEPARTMENT.SUBDEPTCODE = ZTBWORKPOSITION.SUBDEPTCODE AND ZTBSUBDEPARTMENT.CTR_CD = ZTBWORKPOSITION.CTR_CD) LEFT JOIN ZTBMAINDEPARMENT ON (ZTBMAINDEPARMENT.MAINDEPTCODE = ZTBSUBDEPARTMENT.MAINDEPTCODE AND ZTBMAINDEPARMENT.CTR_CD = ZTBSUBDEPARTMENT.CTR_CD) LEFT JOIN ZTBOFFREGISTRATIONTB ON (ZTBOFFREGISTRATIONTB.EMPL_NO = ZTBATTENDANCETB.EMPL_NO AND ZTBOFFREGISTRATIONTB.APPLY_DATE = ZTBATTENDANCETB.APPLY_DATE AND ZTBOFFREGISTRATIONTB.CTR_CD = ZTBATTENDANCETB.CTR_CD) LEFT JOIN ZTBREASON ON ( ZTBOFFREGISTRATIONTB.REASON_CODE = ZTBREASON.REASON_CODE AND ZTBOFFREGISTRATIONTB.CTR_CD = ZTBREASON.CTR_CD) WHERE ZTBATTENDANCETB.APPLY_DATE BETWEEN @startdate AND @enddate AND ZTBATTENDANCETB.CTR_CD='${DATA.CTR_CD}' ) AS DD_TT WHERE  ${condition} GROUP BY DD_TT.APPLY_DATE ORDER BY DD_TT.APPLY_DATE ASC`;
            //console.log(query);
            kqua = await queryDB(query);
            res.send(kqua);
          } else {
            res.send({ tk_status: "NG", message: "Không phải leader" });
          }
        })();
        break;
      case "diemdanhfull":
        (async () => {
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let START_DATE = DATA.from_date;
          let END_DATE = DATA.to_date;
          let kqua;
          let query = `DECLARE @empl varchar(10); DECLARE @startdate DATE; DECLARE @enddate DATE        
           SET @startdate='${START_DATE}'
           SET @enddate='${END_DATE}'
           SELECT  
		   ZTBEMPLINFOA.DATE_COLUMN,
             ZTBEMPLINFOA.EMPL_NO, 
             CMS_ID, 
             MIDLAST_NAME, 
             FIRST_NAME, 
             PHONE_NUMBER, 
             SEX_NAME, 
             WORK_STATUS_NAME, 
             FACTORY_NAME, 
             JOB_NAME, 
             WORK_SHIF_NAME, 
             WORK_POSITION_NAME, 
             SUBDEPTNAME, 
             MAINDEPTNAME, 
             REQUEST_DATE, 
             ZTBATTENDANCETB.APPLY_DATE, 
             APPROVAL_STATUS, 
             OFF_ID, 
             CA_NGHI, 
             ON_OFF, 
             OVERTIME_INFO, 
             OVERTIME, 
             REASON_NAME, 
             ZTBOFFREGISTRATIONTB.REMARK, 
             ZTBATTENDANCETB.XACNHAN 
           FROM 
             (SELECT DATE_COLUMN, EMPL_NO,CMS_ID,FIRST_NAME,MIDLAST_NAME,DOB,HOMETOWN,SEX_CODE,ADD_PROVINCE,ADD_DISTRICT,ADD_COMMUNE,ADD_VILLAGE,PHONE_NUMBER,WORK_START_DATE,PASSWORD,EMAIL,WORK_POSITION_CODE,WORK_SHIFT_CODE,POSITION_CODE,JOB_CODE,FACTORY_CODE,WORK_STATUS_CODE,REMARK,ONLINE_DATETIME,EMPL_IMAGE,RESIGN_DATE,DATETABLE.CTR_CD  FROM DATETABLE CROSS JOIN ZTBEMPLINFO WHERE DATETABLE.DATE_COLUMN BETWEEN @startdate AND @enddate AND ZTBEMPLINFO.WORK_STATUS_CODE<>0) AS ZTBEMPLINFOA 
             LEFT JOIN (SELECT DATETABLE.CTR_CD, DATETABLE.DATE_COLUMN, ZTBATTENDANCETB.EMPL_NO,  ZTBATTENDANCETB.APPLY_DATE,  ZTBATTENDANCETB.ON_OFF,  ZTBATTENDANCETB.REMARK,  ZTBATTENDANCETB.OVERTIME_INFO, ZTBATTENDANCETB.OVERTIME, ZTBATTENDANCETB.XACNHAN,CURRENT_TEAM FROM DATETABLE LEFT JOIN ZTBATTENDANCETB ON (DATETABLE.DATE_COLUMN = ZTBATTENDANCETB.APPLY_DATE AND DATETABLE.CTR_CD = ZTBATTENDANCETB.CTR_CD) WHERE DATETABLE.DATE_COLUMN BETWEEN @startdate AND @enddate) AS ZTBATTENDANCETB ON (
               ZTBEMPLINFOA.EMPL_NO = ZTBATTENDANCETB.EMPL_NO AND ZTBEMPLINFOA.DATE_COLUMN = ZTBATTENDANCETB.APPLY_DATE
             ) 
             LEFT JOIN ZTBSEX ON (
               ZTBSEX.SEX_CODE = ZTBEMPLINFOA.SEX_CODE AND ZTBSEX.CTR_CD = ZTBEMPLINFOA.CTR_CD
             ) 
             LEFT JOIN ZTBWORKSTATUS ON(
               ZTBWORKSTATUS.WORK_STATUS_CODE = ZTBEMPLINFOA.WORK_STATUS_CODE AND ZTBWORKSTATUS.CTR_CD = ZTBEMPLINFOA.CTR_CD
             ) 
             LEFT JOIN ZTBFACTORY ON (
               ZTBFACTORY.FACTORY_CODE = ZTBEMPLINFOA.FACTORY_CODE AND ZTBFACTORY.CTR_CD = ZTBEMPLINFOA.CTR_CD
             ) 
             LEFT JOIN ZTBJOB ON (
               ZTBJOB.JOB_CODE = ZTBEMPLINFOA.JOB_CODE AND ZTBJOB.CTR_CD = ZTBEMPLINFOA.CTR_CD
             ) 
             LEFT JOIN ZTBPOSITION ON (
               ZTBPOSITION.POSITION_CODE = ZTBEMPLINFOA.POSITION_CODE AND ZTBPOSITION.CTR_CD = ZTBEMPLINFOA.CTR_CD
             ) 
             LEFT JOIN ZTBWORKSHIFT ON (
               ZTBWORKSHIFT.WORK_SHIFT_CODE = ZTBEMPLINFOA.WORK_SHIFT_CODE AND ZTBWORKSHIFT.CTR_CD = ZTBEMPLINFOA.CTR_CD
             ) 
             LEFT JOIN ZTBWORKPOSITION ON (
               ZTBWORKPOSITION.WORK_POSITION_CODE = ZTBEMPLINFOA.WORK_POSITION_CODE AND ZTBWORKPOSITION.CTR_CD = ZTBEMPLINFOA.CTR_CD
             ) 
             LEFT JOIN ZTBSUBDEPARTMENT ON (
               ZTBSUBDEPARTMENT.SUBDEPTCODE = ZTBWORKPOSITION.SUBDEPTCODE AND ZTBSUBDEPARTMENT.CTR_CD = ZTBWORKPOSITION.CTR_CD
             ) 
             LEFT JOIN ZTBMAINDEPARMENT ON (
               ZTBMAINDEPARMENT.MAINDEPTCODE = ZTBSUBDEPARTMENT.MAINDEPTCODE AND ZTBMAINDEPARMENT.CTR_CD = ZTBSUBDEPARTMENT.CTR_CD
             ) 
             LEFT JOIN ZTBOFFREGISTRATIONTB ON (
               ZTBOFFREGISTRATIONTB.EMPL_NO = ZTBATTENDANCETB.EMPL_NO 
               AND ZTBOFFREGISTRATIONTB.APPLY_DATE = ZTBATTENDANCETB.APPLY_DATE
               AND ZTBOFFREGISTRATIONTB.CTR_CD = ZTBATTENDANCETB.CTR_CD
             ) 
             LEFT JOIN ZTBREASON ON (
               ZTBOFFREGISTRATIONTB.REASON_CODE = ZTBREASON.REASON_CODE
               AND ZTBOFFREGISTRATIONTB.CTR_CD = ZTBREASON.CTR_CD
             )   
			 WHERE ZTBEMPLINFOA.WORK_STATUS_CODE =1 AND ZTBEMPLINFOA.CTR_CD='${DATA.CTR_CD}'
			 ORDER BY ZTBEMPLINFOA.DATE_COLUMN DESC, ZTBEMPLINFOA.POSITION_CODE ASC`;
          kqua = await queryDB(query);
          res.send(kqua);
        })();
        break;
      case "traPODataFull":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let kqua;
          let query = `WITH ZTBDLVR AS 
(SELECT CTR_CD,CUST_CD, G_CODE, PO_NO, SUM(DELIVERY_QTY) AS DELIVERY_QTY FROM ZTBDelivery GROUP BY CTR_CD,CUST_CD, G_CODE, PO_NO),
POTB AS
(
SELECT ZTBPOTable.CTR_CD, ZTBPOTable.G_CODE, ZTBPOTable.CUST_CD, ZTBPOTable.PO_NO,ZTBPOTable.PO_QTY, isnull(ZTBDLVR.DELIVERY_QTY,0) AS DELIVERY_QTY, (ZTBPOTable.PO_QTY-isnull(ZTBDLVR.DELIVERY_QTY,0)) AS PO_BALANCE FROM ZTBPOTable LEFT JOIN ZTBDLVR ON (ZTBPOTable.G_CODE = ZTBDLVR.G_CODE AND ZTBPOTable.CUST_CD = ZTBDLVR.CUST_CD AND ZTBPOTable.PO_NO = ZTBDLVR.PO_NO AND ZTBPOTable.CTR_CD = ZTBDLVR.CTR_CD)
),
FULLBOM AS 
(
SELECT 
		BBB.CTR_CD,
        BBB.G_CODE, 
        string_agg(BBB.M_NAME, ', ') AS M_NAME_FULLBOM 
        FROM 
        (
            SELECT 
            DISTINCT AAA.CTR_CD, AAA.G_CODE, 
            M090.M_NAME 
            FROM 
            (
                (
                SELECT 
                    DISTINCT CTR_CD, G_CODE, 
                    M_CODE 
                FROM 
                    M140
                ) AS AAA 
                LEFT JOIN M090 ON (AAA.M_CODE = M090.M_CODE AND AAA.CTR_CD = M090.CTR_CD)
            )
        ) AS BBB 
        GROUP BY 
		BBB.CTR_CD,
        BBB.G_CODE
), 
PRICE_STATUS AS 
(SELECT DISTINCT CTR_CD, G_CODE, ROUND(PROD_PRICE,6) AS PROD_PRICE,  FINAL FROM PROD_PRICE_TABLE)
SELECT ZTBPOTable.PO_ID, M110.CUST_NAME_KD,  ZTBPOTable.PO_NO, M100.G_NAME, M100.G_NAME_KD, M100.DESCR, ZTBPOTable.G_CODE,    ZTBPOTable.PO_DATE, ZTBPOTable.RD_DATE, ROUND(isnull(ZTBPOTable.BEP,0),6) AS BEP, ZTBPOTable.PROD_PRICE, POTB.PO_QTY, POTB.DELIVERY_QTY AS TOTAL_DELIVERED, POTB.PO_BALANCE, (ZTBPOTable.PROD_PRICE*POTB.PO_QTY) AS PO_AMOUNT, (ZTBPOTable.PROD_PRICE*POTB.DELIVERY_QTY) AS DELIVERED_AMOUNT, (ZTBPOTable.PROD_PRICE*POTB.PO_BALANCE) AS BALANCE_AMOUNT, (isnull(ZTBPOTable.BEP,0)*POTB.DELIVERY_QTY) AS DELIVERED_BEP_AMOUNT, M010.EMPL_NAME,M100.PROD_TYPE, FULLBOM.M_NAME_FULLBOM, M100.PROD_MAIN_MATERIAL, ZTBPOTable.CUST_CD,ZTBPOTable.EMPL_NO,DATEPART(MONTH, PO_DATE) AS POMONTH, DATEPART( ISOWK, DATEADD(day,1,PO_DATE))  AS POWEEKNUM, CASE WHEN (
        ZTBPOTable.RD_DATE < GETDATE()-1
    ) 
    AND (
        POTB.PO_BALANCE <> 0
    ) THEN 'OVER' ELSE 'OK' END AS OVERDUE, ZTBPOTable.REMARK, PRICE_STATUS.FINAL, M100.QL_HSD, M100.EXP_DATE
FROM ZTBPOTable 
LEFT JOIN POTB ON ZTBPOTable.G_CODE = POTB.G_CODE AND ZTBPOTable.CUST_CD = POTB.CUST_CD AND ZTBPOTable.PO_NO = POTB.PO_NO AND ZTBPOTable.CTR_CD = POTB.CTR_CD
LEFT JOIN M110 ON (M110.CUST_CD = ZTBPOTable.CUST_CD AND M110.CTR_CD = ZTBPOTable.CTR_CD)
LEFT JOIN M100 ON (M100.G_CODE = ZTBPOTable.G_CODE AND M100.CTR_CD = ZTBPOTable.CTR_CD)
LEFT JOIN M010 ON (ZTBPOTable.EMPL_NO = M010.EMPL_NO AND ZTBPOTable.CTR_CD = M010.CTR_CD)
LEFT JOIN PRICE_STATUS ON PRICE_STATUS.G_CODE = ZTBPOTable.G_CODE AND PRICE_STATUS.PROD_PRICE = ROUND(ZTBPOTable.PROD_PRICE,6) AND PRICE_STATUS.CTR_CD = ZTBPOTable.CTR_CD
LEFT JOIN FULLBOM ON FULLBOM.G_CODE = ZTBPOTable.G_CODE AND FULLBOM.CTR_CD = ZTBPOTable.CTR_CD
         ${generate_condition_get_po(
            DATA.alltime,
            DATA.start_date,
            DATA.end_date,
            DATA.cust_name,
            DATA.codeCMS,
            DATA.codeKD,
            DATA.prod_type,
            DATA.empl_name,
            DATA.po_no,
            DATA.over,
            DATA.id,
            DATA.material,
            DATA.justPoBalance,
            DATA.CTR_CD
          )} ORDER BY ZTBPOTable.PO_ID DESC`;
          kqua = await queryDB(query);
          res.send(kqua);
        })();
        break;
      case "traInvoiceDataFull":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let kqua;
          query = `SELECT  ZTBDelivery.DELIVERY_ID, ZTBDelivery.CUST_CD,M110.CUST_NAME_KD,ZTBDelivery.EMPL_NO,M010.EMPL_NAME,ZTBDelivery.G_CODE,M100.G_NAME,M100.G_NAME_KD, M100.DESCR,ZTBPOTable.PO_ID, ZTBDelivery.PO_NO,ZTBPOTable.PO_DATE, ZTBPOTable.RD_DATE, ZTBDelivery.DELIVERY_DATE,ZTBDelivery.DELIVERY_QTY,isnull(ZTBPOTable.BEP,0) AS BEP, ZTBPOTable.PROD_PRICE,  (ZTBDelivery.DELIVERY_QTY*ZTBPOTable.PROD_PRICE) AS DELIVERED_AMOUNT,(isnull(ZTBPOTable.BEP,0)*ZTBDelivery.DELIVERY_QTY) AS DELIVERED_BEP_AMOUNT ,ZTBDelivery.REMARK,ZTBDelivery.INVOICE_NO,M100.PROD_MAIN_MATERIAL,M100.PROD_TYPE,M100.PROD_MODEL,M100.PROD_PROJECT, DATEPART(YEAR,DELIVERY_DATE) AS YEARNUM,DATEPART( ISOWK, DATEADD(day,1,DELIVERY_DATE)) AS WEEKNUM,CASE WHEN ZTBPOTable.RD_DATE < ZTBDelivery.DELIVERY_DATE THEN 'OVER' ELSE 'OK' END AS OVERDUE
          FROM ZTBDelivery
          LEFT JOIN M110 ON (M110.CUST_CD = ZTBDelivery.CUST_CD AND M110.CTR_CD = ZTBDelivery.CTR_CD)
          LEFT JOIN M010 ON (M010.EMPL_NO = ZTBDelivery.EMPL_NO AND M010.CTR_CD = ZTBDelivery.CTR_CD)
          LEFT JOIN M100 ON (M100.G_CODE = ZTBDelivery.G_CODE AND M100.CTR_CD = ZTBDelivery.CTR_CD)
          LEFT JOIN ZTBPOTable ON (ZTBDelivery.PO_NO = ZTBPOTable.PO_NO AND ZTBDelivery.G_CODE = ZTBPOTable.G_CODE AND ZTBDelivery.CUST_CD = ZTBPOTable.CUST_CD AND ZTBDelivery.CTR_CD = ZTBPOTable.CTR_CD)
                     ${generate_condition_get_invoice(
            DATA.alltime,
            DATA.start_date,
            DATA.end_date,
            DATA.cust_name,
            DATA.codeCMS,
            DATA.codeKD,
            DATA.prod_type,
            DATA.empl_name,
            DATA.po_no,
            DATA.material,
            DATA.invoice_no,
            DATA.CTR_CD
          )} ORDER BY ZTBDelivery.DELIVERY_ID DESC`;
          ///console.log(query);
          kqua = await queryDB(query);
          res.send(kqua);
        })();
        break;
      case "checkPOExist":
        (async () => {
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let kqua;
          //let query = `SELECT * FROM ZTBPoTable WHERE G_CODE='${DATA.G_CODE}' AND CUST_CD='${DATA.CUST_CD}' AND PO_NO='${DATA.PO_NO}'`;
          let query = `SELECT  ZTBPOTable.CUST_CD,  ZTBPOTable.PO_DATE, ZTBPOTable.PO_NO, ZTBPOTable.G_CODE,(ZTBPOTable.PO_QTY-AA.TotalDelivered) As PO_BALANCE FROM (SELECT ZTBPOTable.EMPL_NO, ZTBPOTable.CUST_CD, ZTBPOTable.G_CODE, ZTBPOTable.PO_NO, isnull(SUM(ZTBDelivery.DELIVERY_QTY),0) AS TotalDelivered FROM ZTBPOTable  LEFT JOIN ZTBDelivery ON (ZTBDelivery.CTR_CD = ZTBPOTable.CTR_CD AND ZTBDelivery.CUST_CD = ZTBPOTable.CUST_CD AND ZTBDelivery.G_CODE = ZTBPOTable.G_CODE AND ZTBDelivery.PO_NO = ZTBPOTable.PO_NO) GROUP BY ZTBPOTable.CTR_CD,ZTBPOTable.EMPL_NO,ZTBPOTable.G_CODE,ZTBPOTable.CUST_CD,ZTBPOTable.PO_NO) AS AA LEFT JOIN M010 ON (M010.EMPL_NO = AA.EMPL_NO) LEFT JOIN M100 ON (M100.G_CODE = AA.G_CODE) LEFT JOIN ZTBPOTable ON (AA.CUST_CD = ZTBPOTable.CUST_CD AND AA.G_CODE = ZTBPOTable.G_CODE AND AA.PO_NO = ZTBPOTable.PO_NO) JOIN M110 ON (M110.CUST_CD = AA.CUST_CD) WHERE ZTBPOTable.G_CODE='${DATA.G_CODE}' AND ZTBPOTable.CUST_CD='${DATA.CUST_CD}' AND ZTBPOTable.PO_NO='${DATA.PO_NO}' AND ZTBPOTable.CTR_CD='${DATA.CTR_CD}'`;
          kqua = await queryDB(query);
          ////console.log(kqua);
          res.send(kqua);
          //console.log(kqua);
        })();
        break;
      case "checkGCodeVer":
        (async () => {
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let kqua;
          let query = `SELECT USE_YN FROM M100 WHERE G_CODE='${DATA.G_CODE}' AND CTR_CD='${DATA.CTR_CD}'`;
          kqua = await queryDB(query);
          ////console.log(kqua);
          res.send(kqua);
        })();
        break;
      case "selectcodeList":
        (async () => {
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let kqua;
          let condition = ``;
          if (DATA.G_NAME !== undefined && DATA.G_NAME !== null && DATA.G_NAME !== '') {
            condition = ` AND  M100.G_NAME LIKE '%${DATA.G_NAME}%'`;
          }
          let query = `SELECT G_CODE , G_NAME, G_NAME_KD, PROD_LAST_PRICE, USE_YN FROM M100 WHERE CTR_CD='${DATA.CTR_CD}'  ${condition}`;
          kqua = await queryDB(query);
          ////console.log(kqua);
          res.send(kqua);
        })();
        break;
      case "selectcustomerList":
        (async () => {
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let kqua;
          let query = `SELECT DISTINCT CUST_CD , CUST_NAME_KD  FROM M110 WHERE CTR_CD='${DATA.CTR_CD}' AND CUST_TYPE ='KH' ORDER BY CUST_NAME_KD ASC`;
          kqua = await queryDB(query);
          ////console.log(kqua);
          res.send(kqua);
        })();
        break;
      case "selectVendorList":
        (async () => {
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let kqua;
          let query = `SELECT DISTINCT CUST_CD , CUST_NAME_KD  FROM M110 WHERE CTR_CD='${DATA.CTR_CD}' AND CUST_TYPE ='NCC' ORDER BY CUST_NAME_KD ASC`;
          kqua = await queryDB(query);
          ////console.log(kqua);
          res.send(kqua);
        })();
        break;
      case "selectCustomerAndVendorList":
        (async () => {
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let kqua;
          let query = `SELECT DISTINCT CUST_CD , CUST_NAME_KD  FROM M110 WHERE CTR_CD='${DATA.CTR_CD}' ORDER BY CUST_NAME_KD ASC`;
          kqua = await queryDB(query);
          ////console.log(kqua);
          res.send(kqua);
        })();
        break;
      case "update_po":
        (async () => {
          ////console.log(DATA);
          let currenttime = moment().format("YYYY-MM-DD HH:mm:ss");
          let checkkq = "OK";
          let setpdQuery = `UPDATE ZTBPOTable SET PO_QTY=${DATA.PO_QTY}, PO_DATE='${DATA.PO_DATE}', RD_DATE='${DATA.RD_DATE}', PROD_PRICE=${DATA.PROD_PRICE},BEP=${DATA.BEP}, REMARK='${DATA.REMARK}', G_CODE='${DATA.G_CODE}',CUST_CD='${DATA.CUST_CD}', EMPL_NO='${DATA.EMPL_NO}' WHERE CTR_CD='${DATA.CTR_CD}' AND PO_ID=${DATA.PO_ID}`;
          //////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "delete_po":
        (async () => {
          ////console.log(DATA);
          let currenttime = moment().format("YYYY-MM-DD HH:mm:ss");
          let checkkq = "OK";
          let setpdQuery = `DELETE FROM ZTBPOTable WHERE CTR_CD='${DATA.CTR_CD}' AND PO_ID=${DATA.PO_ID}`;
          //////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "delete_invoice":
        (async () => {
          ////console.log(DATA);
          let currenttime = moment().format("YYYY-MM-DD HH:mm:ss");
          let checkkq = "OK";
          let setpdQuery = `DELETE FROM ZTBDelivery WHERE CTR_CD='${DATA.CTR_CD}' AND DELIVERY_ID=${DATA.DELIVERY_ID}`;
          //////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "update_invoice":
        (async () => {
          ////console.log(DATA);
          let currenttime = moment().format("YYYY-MM-DD HH:mm:ss");
          let checkkq = "OK";
          let setpdQuery = `UPDATE ZTBDelivery SET CUST_CD='${DATA.CUST_CD}', G_CODE='${DATA.G_CODE}', PO_NO='${DATA.PO_NO}',  DELIVERY_DATE='${DATA.DELIVERY_DATE}', EMPL_NO='${DATA.EMPL_NO}', DELIVERY_QTY='${DATA.DELIVERY_QTY}', REMARK='${DATA.REMARK}' WHERE CTR_CD='${DATA.CTR_CD}' AND DELIVERY_ID=${DATA.DELIVERY_ID}`;
          //////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "update_invoice_no":
        (async () => {
          ////console.log(DATA);
          let currenttime = moment().format("YYYY-MM-DD HH:mm:ss");
          let checkkq = "OK";
          let setpdQuery = `UPDATE ZTBDelivery SET INVOICE_NO='${DATA.INVOICE_NO}' WHERE CTR_CD='${DATA.CTR_CD}' AND DELIVERY_ID=${DATA.DELIVERY_ID}`;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "traPlanDataFull":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let kqua;
          query = `SELECT ZTBPLANTB.PLAN_ID, M010.EMPL_NAME, ZTBPLANTB.EMPL_NO, M110.CUST_NAME_KD, ZTBPLANTB.CUST_CD, ZTBPLANTB.G_CODE, M100.G_NAME_KD, M100.G_NAME,  M100.PROD_TYPE ,M100.PROD_MAIN_MATERIAL, ZTBPLANTB.PLAN_DATE, ZTBPLANTB.D1,ZTBPLANTB.D2,ZTBPLANTB.D3,ZTBPLANTB.D4,ZTBPLANTB.D5,ZTBPLANTB.D6,ZTBPLANTB.D7,ZTBPLANTB.D8, ZTBPLANTB.D9, ZTBPLANTB.D10, ZTBPLANTB.D11, ZTBPLANTB.D12, ZTBPLANTB.D13, ZTBPLANTB.D14, ZTBPLANTB.D15,  ZTBPLANTB.REMARK  FROM ZTBPLANTB JOIN M100 ON (M100.G_CODE = ZTBPLANTB.G_CODE AND M100.CTR_CD = ZTBPLANTB.CTR_CD) JOIN M110 ON (M110.CUST_CD = ZTBPLANTB.CUST_CD AND M110.CTR_CD = ZTBPLANTB.CTR_CD) JOIN M010 ON (M010.EMPL_NO= ZTBPLANTB.EMPL_NO AND M010.CTR_CD= ZTBPLANTB.CTR_CD) ${generate_condition_get_plan(
            DATA.alltime,
            DATA.start_date,
            DATA.end_date,
            DATA.cust_name,
            DATA.codeCMS,
            DATA.codeKD,
            DATA.prod_type,
            DATA.empl_name,
            DATA.material,
            DATA.CTR_CD
          )} ORDER BY ZTBPLANTB.PLAN_ID DESC`;
          kqua = await queryDB(query);
          ////console.log(kqua);
          res.send(kqua);
        })();
        break;
      case "delete_plan":
        (async () => {
          ////console.log(DATA);
          let currenttime = moment().format("YYYY-MM-DD HH:mm:ss");
          let checkkq = "OK";
          let setpdQuery = `DELETE FROM ZTBPLANTB WHERE CTR_CD='${DATA.CTR_CD}' AND PLAN_ID=${DATA.PLAN_ID}`;
          //////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "delete_shortage":
        (async () => {
          ////console.log(DATA);
          let currenttime = moment().format("YYYY-MM-DD HH:mm:ss");
          let checkkq = "OK";
          let setpdQuery = `DELETE FROM ZTB_SHORTAGE_LIST WHERE CTR_CD='${DATA.CTR_CD}' AND ST_ID=${DATA.ST_ID}`;
          //////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "checkPlanExist":
        (async () => {
          ////console.log(DATA);
          let currenttime = moment().format("YYYY-MM-DD HH:mm:ss");
          let checkkq = "OK";
          let setpdQuery = `SELECT * FROM ZTBPLANTB WHERE CTR_CD='${DATA.CTR_CD}' AND G_CODE='${DATA.G_CODE}' AND CUST_CD='${DATA.CUST_CD}'  AND PLAN_DATE='${DATA.PLAN_DATE}' `;
          //////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "checkShortageExist":
        (async () => {
          ////console.log(DATA);
          let currenttime = moment().format("YYYY-MM-DD HH:mm:ss");
          let checkkq = "OK";
          let setpdQuery = `SELECT * FROM ZTBPLANTB WHERE CTR_CD='${DATA.CTR_CD}' AND G_CODE='${DATA.G_CODE}' AND CUST_CD='${DATA.CUST_CD}'  AND PLAN_DATE='${DATA.PLAN_DATE}' `;
          //////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "insert_plan":
        (async () => {
          //////console.log(DATA);
          let currenttime = moment().format("YYYY-MM-DD HH:mm:ss");
          let checkkq = "OK";
          let setpdQuery = `INSERT INTO ZTBPLANTB (CTR_CD,EMPL_NO,CUST_CD,G_CODE,PLAN_DATE,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,REMARK) VALUES ('${DATA.CTR_CD}','${DATA.EMPL_NO}','${DATA.CUST_CD}', '${DATA.G_CODE}', '${DATA.PLAN_DATE}', ${DATA.D1},${DATA.D2},${DATA.D3},${DATA.D4},${DATA.D5},${DATA.D6},${DATA.D7},${DATA.D8},${DATA.D9},${DATA.D10},${DATA.D11},${DATA.D12},${DATA.D13},${DATA.D14},${DATA.D15},'${DATA.REMARK}')`;
          //////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "insert_shortage":
        (async () => {
          //////console.log(DATA);
          let currenttime = moment().format("YYYY-MM-DD HH:mm:ss");
          let checkkq = "OK";
          let setpdQuery = `INSERT INTO ZTB_SHORTAGE_LIST (CTR_CD,G_CODE,CUST_CD,EMPL_NO,PLAN_DATE,D1_9H,D1_13H,D1_19H,D1_21H,D1_23H,D1_OTHER,D2_9H,D2_13H,D2_21H,D3_SANG,D3_CHIEU,D4_SANG,D4_CHIEU,PRIORITY,INS_EMPL,INS_DATE,UPD_EMPL,UPD_DATE) VALUES ('${DATA.CTR_CD}','${DATA.G_CODE}','${DATA.CUST_CD}','${DATA.EMPL_NO}','${DATA.PLAN_DATE}','${DATA.D1_9H}','${DATA.D1_13H}','${DATA.D1_19H}','${DATA.D1_21H}','${DATA.D1_23H}','${DATA.D1_OTHER}','${DATA.D2_9H}','${DATA.D2_13H}','${DATA.D2_21H}','${DATA.D3_SANG}','${DATA.D3_CHIEU}','${DATA.D4_SANG}','${DATA.D4_CHIEU}','${DATA.PRIORITY}','${DATA.INS_EMPL}',GETDATE(),'${DATA.UPD_EMPL}',GETDATE())`;
          //////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "traFcstDataFull":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let kqua;
          query = `SELECT ZTBFCSTTB.FCST_ID, ZTBFCSTTB.FCSTYEAR, ZTBFCSTTB.FCSTWEEKNO,ZTBFCSTTB.G_CODE, M100.G_NAME_KD, M100.G_NAME, M010.EMPL_NAME,ZTBFCSTTB.EMPL_NO, M110.CUST_NAME_KD, M100.DESCR, M100.PROD_PROJECT, M100.PROD_MODEL, M100.PROD_MAIN_MATERIAL, ZTBFCSTTB.PROD_PRICE,ZTBFCSTTB.W1,ZTBFCSTTB.W2,ZTBFCSTTB.W3,ZTBFCSTTB.W4,ZTBFCSTTB.W5,ZTBFCSTTB.W6,ZTBFCSTTB.W7,ZTBFCSTTB.W8,ZTBFCSTTB.W9,ZTBFCSTTB.W10,ZTBFCSTTB.W11,ZTBFCSTTB.W12,ZTBFCSTTB.W13,ZTBFCSTTB.W14,ZTBFCSTTB.W15,ZTBFCSTTB.W16,ZTBFCSTTB.W17,ZTBFCSTTB.W18,ZTBFCSTTB.W19,ZTBFCSTTB.W20,ZTBFCSTTB.W21,ZTBFCSTTB.W22, ZTBFCSTTB.PROD_PRICE * ZTBFCSTTB.W1 AS W1A,ZTBFCSTTB.PROD_PRICE * ZTBFCSTTB.W2 AS W2A,ZTBFCSTTB.PROD_PRICE * ZTBFCSTTB.W3  AS W3A,ZTBFCSTTB.PROD_PRICE * ZTBFCSTTB.W4  AS W4A,ZTBFCSTTB.PROD_PRICE * ZTBFCSTTB.W5 AS W5A,ZTBFCSTTB.PROD_PRICE * ZTBFCSTTB.W6 AS W6A,ZTBFCSTTB.PROD_PRICE * ZTBFCSTTB.W7 AS W7A,ZTBFCSTTB.PROD_PRICE * ZTBFCSTTB.W8 AS W8A,ZTBFCSTTB.PROD_PRICE * ZTBFCSTTB.W9 AS W9A,ZTBFCSTTB.PROD_PRICE * ZTBFCSTTB.W10 AS W10A,ZTBFCSTTB.PROD_PRICE * ZTBFCSTTB.W11 AS W11A,ZTBFCSTTB.PROD_PRICE * ZTBFCSTTB.W12 AS W12A,ZTBFCSTTB.PROD_PRICE * ZTBFCSTTB.W13 AS W13A,ZTBFCSTTB.PROD_PRICE * ZTBFCSTTB.W14 AS W14A,ZTBFCSTTB.PROD_PRICE * ZTBFCSTTB.W15 AS W15A,ZTBFCSTTB.PROD_PRICE * ZTBFCSTTB.W16 AS W16A,ZTBFCSTTB.PROD_PRICE * ZTBFCSTTB.W17 AS W17A,ZTBFCSTTB.PROD_PRICE * ZTBFCSTTB.W18 AS W18A,ZTBFCSTTB.PROD_PRICE * ZTBFCSTTB.W19 AS W19A,ZTBFCSTTB.PROD_PRICE * ZTBFCSTTB.W20 AS W20A,ZTBFCSTTB.PROD_PRICE * ZTBFCSTTB.W21 AS W21A,ZTBFCSTTB.PROD_PRICE * ZTBFCSTTB.W22 AS W22A  FROM ZTBFCSTTB JOIN M100 ON (M100.G_CODE = ZTBFCSTTB.G_CODE AND M100.CTR_CD = ZTBFCSTTB.CTR_CD) JOIN M110 ON(M110.CUST_CD = ZTBFCSTTB.CUST_CD AND M110.CTR_CD = ZTBFCSTTB.CTR_CD) JOIN M010 ON (M010.EMPL_NO = ZTBFCSTTB.EMPL_NO AND M010.CTR_CD = ZTBFCSTTB.CTR_CD) ${generate_condition_get_fcst(
            DATA.alltime,
            DATA.start_date,
            DATA.end_date,
            DATA.cust_name,
            DATA.codeCMS,
            DATA.codeKD,
            DATA.prod_type,
            DATA.empl_name,
            DATA.material,
            DATA.CTR_CD
          )} `;
          kqua = await queryDB(query);
          ////console.log(kqua);
          res.send(kqua);
        })();
        break;
      case "delete_fcst":
        (async () => {
          ////console.log(DATA);
          let currenttime = moment().format("YYYY-MM-DD HH:mm:ss");
          let checkkq = "OK";
          let setpdQuery = `DELETE FROM ZTBFCSTTB WHERE CTR_CD='${DATA.CTR_CD}' AND FCST_ID=${DATA.FCST_ID}`;
          //////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          ////console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "checkFcstExist":
        (async () => {
          ////console.log(DATA);
          let currenttime = moment().format("YYYY-MM-DD HH:mm:ss");
          let checkkq = "OK";
          let setpdQuery = `SELECT * FROM ZTBFCSTTB WHERE CTR_CD='${DATA.CTR_CD}' AND G_CODE='${DATA.G_CODE}' AND CUST_CD='${DATA.CUST_CD}'  AND FCSTYEAR=${DATA.FCSTYEAR}  AND FCSTWEEKNO= ${DATA.FCSTWEEKNO}`;
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          ////console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "insert_fcst":
        (async () => {
          //////console.log(DATA);
          let currenttime = moment().format("YYYY-MM-DD HH:mm:ss");
          let checkkq = "OK";
          let setpdQuery = `INSERT INTO ZTBFCSTTB (CTR_CD, EMPL_NO,CUST_CD,G_CODE,PROD_PRICE,FCSTYEAR,FCSTWEEKNO,W1,W2,W3,W4,W5,W6,W7,W8,W9,W10,W11,W12,W13,W14,W15,W16,W17,W18,W19,W20,W21,W22) VALUES ('${DATA.CTR_CD}','${DATA.EMPL_NO}','${DATA.CUST_CD}','${DATA.G_CODE}','${DATA.PROD_PRICE}','${DATA.YEAR}','${DATA.WEEKNO}','${DATA.W1}','${DATA.W2}','${DATA.W3}','${DATA.W4}','${DATA.W5}','${DATA.W6}','${DATA.W7}','${DATA.W8}','${DATA.W9}','${DATA.W10}','${DATA.W11}','${DATA.W12}','${DATA.W13}','${DATA.W14}','${DATA.W15}','${DATA.W16}','${DATA.W17}','${DATA.W18}','${DATA.W19}','${DATA.W20}','${DATA.W21}','${DATA.W22}')`;
          //////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "traYCSXDataFull":
        (async () => {
          //console.log(DATA);
          let currenttime = moment().format("YYYY-MM-DD HH:mm:ss");
          let checkkq = "OK";
          let setpdQuery = `WITH 
          AMAZONTB AS
          ( SELECT DISTINCT CTR_CD,PROD_REQUEST_NO FROM AMAZONE_DATA),
          PLANTABLE AS 
          (SELECT DISTINCT CTR_CD,PROD_REQUEST_NO FROM ZTB_QLSXPLAN),
          INSPECT_INPUT_TB AS 
          (
          SELECT CTR_CD,PROD_REQUEST_NO, SUM(INPUT_QTY_EA) AS LOT_TOTAL_INPUT_QTY_EA FROM ZTBINSPECTINPUTTB GROUP BY CTR_CD,PROD_REQUEST_NO
          ),
          INSPECT_OUTPUT_TB AS 
          (
          SELECT CTR_CD,PROD_REQUEST_NO, SUM(OUTPUT_QTY_EA) AS LOT_TOTAL_OUTPUT_QTY_EA FROM ZTBINSPECTOUTPUTTB WHERE SORTING='N' GROUP BY CTR_CD,PROD_REQUEST_NO
          ),
          WH_TABLE AS 
          (SELECT I660.CTR_CD, I660.PROD_REQUEST_NO, SUM(I660.IN_QTY) AS INPUT_QTY,SUM(CASE WHEN I660.SORTING='Y' THEN I660.IN_QTY ELSE 0 END) AS SORTING_INPUT, SUM(CASE WHEN I660.SORTING='N' THEN I660.IN_QTY ELSE 0 END) AS NORMAL_INPUT, SUM(CASE WHEN I660.STATUS='N' AND I660.USE_YN ='Y' THEN I660.IN_QTY ELSE 0 END) AS STOCK,SUM(CASE WHEN I660.STATUS='B' AND I660.USE_YN ='Y' THEN I660.IN_QTY ELSE 0 END) AS BLOCK_QTY,SUM(CASE WHEN I660.USE_YN <> 'Y' AND O660.CUST_CD IN ('1222','6969','KH999') THEN I660.IN_QTY ELSE 0 END) AS OUTPUTNB_QTY, SUM(CASE WHEN I660.USE_YN <> 'Y' AND O660.CUST_CD <> '1222' AND O660.CUST_CD <> '6969' AND O660.CUST_CD <> 'KH999' THEN I660.IN_QTY ELSE 0 END) AS OUTPUTKH_QTY, SUM(CASE WHEN I660.USE_YN <> 'Y' THEN I660.IN_QTY ELSE 0 END) AS OUTPUT_QTY FROM I660 
          LEFT JOIN O660 ON O660.AUTO_ID_IN = I660.AUTO_ID  AND O660.CTR_CD = I660.CTR_CD
          GROUP BY I660.CTR_CD,I660.PROD_REQUEST_NO
          ),
		  BOM_MAIN_M AS 
		  (SELECT DISTINCT M140.CTR_CD,G_CODE, M090.M_NAME  FROM M140 
		  LEFT JOIN M090 ON (M140.M_CODE = M090.M_CODE)
		  WHERE LIEUQL_SX = 1) 
          SELECT 
          P400.DELIVERY_DT,
                    P400.PL_HANG,
                    CASE WHEN AMAZONTB.PROD_REQUEST_NO is not null THEN '1' END AS DAUPAMZ,
                    PLANTABLE.PROD_REQUEST_NO AS DACHITHI,
                    M100.G_NAME_KD,
                    P400.PO_NO,
                    P400.G_CODE,
                    M100.PROD_TYPE,
                    M100.PROD_MAIN_MATERIAL,
                    M100.DESCR,
                    M100.PDBV,
                    M100.PDBV_EMPL,
                    M100.PDBV_DATE,
                    M100.G_NAME,
                    M100.G_WIDTH,
                    M100.G_LENGTH,
                    M100.PROD_PRINT_TIMES,
                    M100.G_C,
                    M100.G_C_R,
                    M010.EMPL_NAME,
                    M010.EMPL_NO,
                    M110.CUST_NAME_KD,
                    M110.CUST_CD,
                    P400.PROD_REQUEST_NO,
                    P400.PROD_REQUEST_DATE,
                    P400.PROD_REQUEST_QTY,		 
                    P400.USE_YN, 
                    P400.MATERIAL_YN,
                    isnull(INSPECT_INPUT_TB.LOT_TOTAL_INPUT_QTY_EA, 0) AS LOT_TOTAL_INPUT_QTY_EA,
                    isnull(INSPECT_OUTPUT_TB.LOT_TOTAL_OUTPUT_QTY_EA, 0) AS LOT_TOTAL_OUTPUT_QTY_EA,
                isnull(WH_TABLE.INPUT_QTY,0) AS INPUT_QTY,
                isnull(WH_TABLE.SORTING_INPUT,0) AS SORTING_INPUT,
                isnull(WH_TABLE.NORMAL_INPUT,0) AS NORMAL_INPUT,
				isnull(WH_TABLE.OUTPUTNB_QTY,0) AS OUTPUTNB_QTY,
				isnull(WH_TABLE.OUTPUTKH_QTY,0) AS OUTPUTKH_QTY,
                isnull(WH_TABLE.OUTPUT_QTY,0) AS OUTPUT_QTY,
                isnull(WH_TABLE.STOCK,0) AS STOCK,
                isnull(WH_TABLE.BLOCK_QTY,0) AS BLOCK_QTY,	
                 isnull(INSPECT_INPUT_TB.LOT_TOTAL_INPUT_QTY_EA, 0) - isnull(INSPECT_OUTPUT_TB.LOT_TOTAL_OUTPUT_QTY_EA, 0) AS INSPECT_BALANCE,
                  (CASE WHEN P400.YCSX_PENDING = 1 THEN (isnull(P400.PROD_REQUEST_QTY, 0) - isnull(INSPECT_OUTPUT_TB.LOT_TOTAL_OUTPUT_QTY_EA, 0)) WHEN P400.YCSX_PENDING = 0 THEN 0 END ) AS SHORTAGE_YCSX,
                CASE WHEN (P400.YCSX_PENDING =0 OR isnull(INSPECT_OUTPUT_TB.LOT_TOTAL_OUTPUT_QTY_EA, 0) >= P400.PROD_REQUEST_QTY OR M100.USE_YN='N') THEN 0 ELSE 1 END AS YCSX_PENDING,
                P400.CODE_55 AS PHAN_LOAI,
                    P400.REMK AS REMARK,
                    P400.PO_TDYCSX,
                    (
                        P400.TKHO_TDYCSX + P400.BTP_TDYCSX + P400.CK_TDYCSX - P400.BLOCK_TDYCSX
                    ) AS TOTAL_TKHO_TDYCSX,
                    P400.TKHO_TDYCSX,
                    P400.BTP_TDYCSX,
                    P400.CK_TDYCSX,
                    P400.BLOCK_TDYCSX,
                    P400.FCST_TDYCSX,
                    P400.W1,
                    P400.W2,
                    P400.W3,
                    P400.W4,
                    P400.W5,
                    P400.W6,
                    P400.W7,
                    P400.W8,
                    P400.PDUYET,
                    P400.CODE_50 AS LOAIXH,
                    M100.BANVE,
                    M100.NO_INSPECTION,                    
					CASE WHEN BOM_MAIN_M.M_NAME = M100.PROD_MAIN_MATERIAL THEN 'Y' ELSE 'N' END AS SETVL,
          ZTB_DM_HISTORY.LOSS_SX1,
                    ZTB_DM_HISTORY.LOSS_SX2,
                    ZTB_DM_HISTORY.LOSS_SX3,
                    ZTB_DM_HISTORY.LOSS_SX4,
                    ZTB_DM_HISTORY.LOSS_SETTING1,
                    ZTB_DM_HISTORY.LOSS_SETTING2,
                    ZTB_DM_HISTORY.LOSS_SETTING3,
                    ZTB_DM_HISTORY.LOSS_SETTING4,
                    ZTB_DM_HISTORY.LOSS_KT,
                    ZTB_DM_HISTORY.INS_DATE,
                    ZTB_DM_HISTORY.INS_EMPL,
                    ZTB_DM_HISTORY.UPD_DATE,
                    ZTB_DM_HISTORY.UPD_EMPL
          FROM P400
          LEFT JOIN AMAZONTB ON (AMAZONTB.PROD_REQUEST_NO = P400.PROD_REQUEST_NO AND AMAZONTB.CTR_CD = P400.CTR_CD)
          LEFT JOIN PLANTABLE ON (PLANTABLE.PROD_REQUEST_NO = P400.PROD_REQUEST_NO AND PLANTABLE.CTR_CD = P400.CTR_CD)
          LEFT JOIN  INSPECT_INPUT_TB ON (INSPECT_INPUT_TB.PROD_REQUEST_NO = P400.PROD_REQUEST_NO AND INSPECT_INPUT_TB.CTR_CD = P400.CTR_CD)
          LEFT JOIN INSPECT_OUTPUT_TB ON (INSPECT_OUTPUT_TB.PROD_REQUEST_NO = P400.PROD_REQUEST_NO AND INSPECT_OUTPUT_TB.CTR_CD = P400.CTR_CD)
          LEFT JOIN WH_TABLE ON (WH_TABLE.PROD_REQUEST_NO = P400.PROD_REQUEST_NO AND WH_TABLE.CTR_CD = P400.CTR_CD)
          LEFT JOIN M100 ON (P400.G_CODE = M100.G_CODE AND P400.CTR_CD = M100.CTR_CD)
		  LEFT JOIN BOM_MAIN_M ON (M100.G_CODE = BOM_MAIN_M.G_CODE AND M100.CTR_CD = BOM_MAIN_M.CTR_CD)
          LEFT JOIN M010 ON (P400.EMPL_NO = M010.EMPL_NO AND P400.CTR_CD = M010.CTR_CD)
          LEFT JOIN M110 ON (P400.CUST_CD = M110.CUST_CD AND P400.CTR_CD = M110.CTR_CD)
          LEFT JOIN ZTB_DM_HISTORY ON (P400.PROD_REQUEST_NO= ZTB_DM_HISTORY.PROD_REQUEST_NO AND P400.CTR_CD= ZTB_DM_HISTORY.CTR_CD)
           ${generate_condition_get_ycsx(
            DATA.alltime,
            DATA.start_date,
            DATA.end_date,
            DATA.cust_name,
            DATA.codeCMS,
            DATA.codeKD,
            DATA.prod_type,
            DATA.empl_name,
            DATA.phanloai,
            DATA.ycsx_pending,
            DATA.prod_request_no,
            DATA.material,
            DATA.inspect_inputcheck,
            DATA.phanloaihang,
            DATA.CTR_CD,
            DATA.material_yes
          )} ORDER BY P400.PROD_REQUEST_NO DESC`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          ////console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "traYCSXDataFull_QLSX":
        (async () => {
          ////console.log(DATA);
          console.log(DATA.material_yes);
          let currenttime = moment().format("YYYY-MM-DD HH:mm:ss");
          let checkkq = "OK";
          let setpdQuery = `
          WITH
          PLANTABLE AS 
          (SELECT DISTINCT CTR_CD, PROD_REQUEST_NO  FROM ZTB_QLSXPLAN),
          INSPECT_INPUT_TB AS 
          (
          SELECT CTR_CD,PROD_REQUEST_NO, SUM(INPUT_QTY_EA) AS LOT_TOTAL_INPUT_QTY_EA FROM ZTBINSPECTINPUTTB GROUP BY CTR_CD,PROD_REQUEST_NO
          ),
          INSPECT_OUTPUT_TB AS 
          (
          SELECT CTR_CD,PROD_REQUEST_NO, SUM(OUTPUT_QTY_EA) AS LOT_TOTAL_OUTPUT_QTY_EA FROM ZTBINSPECTOUTPUTTB WHERE SORTING ='N' GROUP BY CTR_CD,PROD_REQUEST_NO
          ),
          WH_TABLE AS 
          (SELECT CTR_CD, I660.PROD_REQUEST_NO, SUM(I660.IN_QTY) AS INPUT_QTY, SUM(CASE WHEN STATUS='N' AND I660.USE_YN ='Y' THEN I660.IN_QTY ELSE 0 END) AS STOCK,SUM(CASE WHEN STATUS='B' AND I660.USE_YN ='Y' THEN I660.IN_QTY ELSE 0 END) AS BLOCK_QTY, SUM(CASE WHEN I660.USE_YN <> 'Y' THEN I660.IN_QTY ELSE 0 END) AS OUTPUT_QTY FROM I660  GROUP BY CTR_CD,I660.PROD_REQUEST_NO),
          ZTBDLVR AS
          (SELECT CTR_CD,G_CODE, SUM(DELIVERY_QTY) AS DELIVERY_QTY FROM ZTBDelivery GROUP BY CTR_CD,G_CODE),
          POTB AS
          (
          SELECT CTR_CD,G_CODE, SUM(ZTBPOTable.PO_QTY) AS PO_QTY FROM ZTBPOTable GROUP BY CTR_CD,G_CODE
          ),
          PO_TON AS
          (
            SELECT POTB.CTR_CD,POTB.G_CODE, (POTB.PO_QTY- ZTBDLVR.DELIVERY_QTY) AS PO_BALANCE FROM POTB LEFT JOIN ZTBDLVR ON (POTB.G_CODE =ZTBDLVR.G_CODE AND POTB.CTR_CD =ZTBDLVR.CTR_CD )
          ),
          AA AS
          (
            SELECT
			  PVTB.CTR_CD,
              PVTB.PROD_REQUEST_NO,
              isnull(PVTB.[1], 0) AS CD1,
              isnull(PVTB.[2], 0) AS CD2,
              isnull(PVTB.[3], 0) AS CD3,
              isnull(PVTB.[4], 0) AS CD4
            FROM
              (
                SELECT
				  ZTB_QLSXPLAN.CTR_CD,
                  ZTB_QLSXPLAN.PROD_REQUEST_NO,
                  ZTB_QLSXPLAN.PROCESS_NUMBER,
                  SUM(isnull(SX_RESULT, 0)) AS KETQUASX
                FROM
                  ZTB_SX_RESULT
                  LEFT JOIN ZTB_QLSXPLAN ON (ZTB_QLSXPLAN.PLAN_ID = ZTB_SX_RESULT.PLAN_ID AND ZTB_QLSXPLAN.CTR_CD = ZTB_SX_RESULT.CTR_CD)
                WHERE
                  ZTB_QLSXPLAN.STEP = 0
                GROUP BY
				  ZTB_QLSXPLAN.CTR_CD,
                  ZTB_QLSXPLAN.PROD_REQUEST_NO,
                  ZTB_QLSXPLAN.PROCESS_NUMBER
              ) AS PV PIVOT (
                SUM(PV.KETQUASX) FOR PV.PROCESS_NUMBER IN ([1], [2], [3], [4])
              ) AS PVTB
          ),
		  LOSSKT AS (
           SELECT BB.CTR_CD,BB.G_CODE, SUM(BB.INSPECT_TOTAL_QTY) AS INSPECT_TOTAL_QTY, SUM(BB.TOTAL_NG) AS TOTAL_NG FROM 
            (
            SELECT AA.CTR_CD,AA.G_CODE, AA.INSPECT_DATE,AA.INSPECT_TOTAL_QTY, AA.TOTAL_NG, COUNT(G_CODE) OVER(PARTITION BY G_CODE ORDER BY INSPECT_DATE DESC) AS CNT 
            FROM 
            (
            SELECT  CTR_CD,G_CODE,CAST(INSPECT_DATETIME AS date) AS INSPECT_DATE, SUM(INSPECT_TOTAL_QTY-ERR32) AS INSPECT_TOTAL_QTY, SUM(ERR1+ERR2+ERR3+ERR4+ERR5+ERR6+ERR7+ERR8+ERR9+ERR10+ERR11+ERR12+ERR13+ERR14+ERR15+ERR16+ERR17+ERR18+ERR19+ERR20+ERR21+ERR22+ERR23+ERR24+ERR25+ERR26+ERR27+ERR28+ERR29+ERR30+ERR31
            ) AS TOTAL_NG FROM ZTBINSPECTNGTB
            GROUP BY CTR_CD,G_CODE,CAST(INSPECT_DATETIME AS date)
            ) AS AA
            ) AS BB
            WHERE BB.CNT <=10 AND BB.INSPECT_TOTAL_QTY <> 0
            GROUP BY BB.CTR_CD, BB.G_CODE
          )
          SELECT 
          M100.FACTORY,
                    M100.Setting1,
                    M100.Setting2,
                    M100.Step1,
                    M100.Step2,
                    M100.LOSS_SX1,
                    M100.LOSS_SX2,
                    M100.LOSS_SETTING1,
                    M100.LOSS_SETTING2,
                    M100.NOTE,
                    M100.UPH1,
                    M100.UPH2,
                    M100.Step3,
                    M100.Step4,
                    M100.EQ3,
                    M100.EQ4,
                    M100.UPH3,
                    M100.UPH4,
                    M100.Setting3,
                    M100.Setting4,
                    M100.LOSS_SX3,
                    M100.LOSS_SX4,
                    M100.LOSS_SETTING3,
                    M100.LOSS_SETTING4,
                    P400.G_CODE,
                    M100.PROD_TYPE,
                    M100.PROD_MAIN_MATERIAL,
                    M100.DESCR,
                    M100.PDBV,
                    M100.PDBV_EMPL,
                    M100.PDBV_DATE,
                    M100.G_NAME,
                    M100.G_NAME_KD,
                    M100.G_WIDTH,
                    M100.G_LENGTH,
                    M100.PROD_PRINT_TIMES,
                    M100.G_C,
                    M100.G_C_R,
                    M010.EMPL_NAME,
                    M010.EMPL_NO,
                    M110.CUST_NAME_KD,
                    M110.CUST_CD,
                    P400.PROD_REQUEST_NO,
                    P400.PROD_REQUEST_DATE,
                    P400.DELIVERY_DT,
                    P400.PL_HANG,
                    P400.MATERIAL_YN,
                    P400.PROD_REQUEST_QTY,                  
                   CASE WHEN (P400.YCSX_PENDING =0 OR isnull(INSPECT_OUTPUT_TB.LOT_TOTAL_OUTPUT_QTY_EA, 0) >= P400.PROD_REQUEST_QTY) THEN 0 ELSE 1 END AS YCSX_PENDING,
                    P400.CODE_55 AS PHAN_LOAI,
                    P400.REMK AS REMARK,         
                    P400.PDUYET,
                    P400.CODE_50 AS LOAIXH,
                    M100.BANVE,
                    M100.NO_INSPECTION,
                    isnull(PO_TON.PO_BALANCE, 0) AS PO_BALANCE,
                    M100.EQ1,
                    M100.EQ2,
                    isnull(AA.CD1, 0) AS CD1,
                    isnull(AA.CD2, 0) AS CD2,
                    isnull(AA.CD3, 0) AS CD3,
                    isnull(AA.CD4, 0) AS CD4, 
                    isnull(INSPECT_OUTPUT_TB.LOT_TOTAL_OUTPUT_QTY_EA, 0) AS LOT_TOTAL_OUTPUT_QTY_EA,
                    PLANTABLE.PROD_REQUEST_NO AS DACHITHI, CASE WHEN M100.PD <>0 THEN
					CEILING((P400.PROD_REQUEST_QTY*(1+(isnull(LOSS_SX2,0)+isnull(LOSS_SX3,0)+isnull(LOSS_SX4,0))*1.0/100+isnull((LOSSKT.TOTAL_NG*1.0/LOSSKT.INSPECT_TOTAL_QTY),0)) + (isnull(LOSS_SETTING2,0)+isnull(LOSS_SETTING3,0)+isnull(LOSS_SETTING4,0))*1.0/M100.PD*(M100.G_C*M100.G_C_R)*1000)) ELSE 0 END AS SLC_CD1,
CASE WHEN M100.PD <>0 THEN CEILING((P400.PROD_REQUEST_QTY*(1+(isnull(LOSS_SX3,0)+isnull(LOSS_SX4,0))*1.0/100+isnull((LOSSKT.TOTAL_NG*1.0/LOSSKT.INSPECT_TOTAL_QTY),0)) + (isnull(LOSS_SETTING3,0)+isnull(LOSS_SETTING4,0))*1.0/M100.PD*(M100.G_C*M100.G_C_R)*1000)) ELSE 0 END AS SLC_CD2,
CASE WHEN M100.PD <>0 THEN CEILING((P400.PROD_REQUEST_QTY*(1+(isnull(LOSS_SX4,0))*1.0/100+isnull((LOSSKT.TOTAL_NG*1.0/LOSSKT.INSPECT_TOTAL_QTY),0)) + (isnull(LOSS_SETTING4,0))*1.0/M100.PD*(M100.G_C*M100.G_C_R)*1000)) ELSE 0 END AS SLC_CD3,
CASE WHEN M100.PD <>0 THEN CEILING((P400.PROD_REQUEST_QTY*(1+(0)*1.0/100+isnull((LOSSKT.TOTAL_NG*1.0/LOSSKT.INSPECT_TOTAL_QTY),0)) + (0)*1.0/M100.PD*(M100.G_C*M100.G_C_R)*1000)) ELSE 0 END AS SLC_CD4
          FROM P400
          LEFT JOIN M100 ON (M100.G_CODE =P400.G_CODE AND M100.CTR_CD =P400.CTR_CD)
          LEFT JOIN M010 ON (M010.EMPL_NO= P400.EMPL_NO AND M010.CTR_CD =P400.CTR_CD)
          LEFT JOIN M110 ON (M110.CUST_CD = P400.CUST_CD AND M110.CTR_CD =P400.CTR_CD)
          LEFT JOIN PO_TON ON (PO_TON.G_CODE = P400.G_CODE AND PO_TON.CTR_CD =P400.CTR_CD)
          LEFT JOIN AA ON (AA.PROD_REQUEST_NO = P400.PROD_REQUEST_NO AND AA.CTR_CD =P400.CTR_CD)         
          LEFT JOIN INSPECT_OUTPUT_TB ON (INSPECT_OUTPUT_TB.PROD_REQUEST_NO = P400.PROD_REQUEST_NO AND INSPECT_OUTPUT_TB.CTR_CD =P400.CTR_CD)
          LEFT JOIN PLANTABLE ON (PLANTABLE.PROD_REQUEST_NO = P400.PROD_REQUEST_NO AND PLANTABLE.CTR_CD =P400.CTR_CD)
		  LEFT JOIN LOSSKT ON (LOSSKT.G_CODE = P400.G_CODE AND LOSSKT.CTR_CD =P400.CTR_CD)
         ${generate_condition_get_ycsx(
            DATA.alltime,
            DATA.start_date,
            DATA.end_date,
            DATA.cust_name,
            DATA.codeCMS,
            DATA.codeKD,
            DATA.prod_type,
            DATA.empl_name,
            DATA.phanloai,
            DATA.ycsx_pending,
            DATA.prod_request_no,
            DATA.material,
            DATA.inspect_inputcheck,
            DATA.phanloaihang,
            DATA.CTR_CD,
            DATA.material_yes
          )} ORDER BY P400.PROD_REQUEST_NO DESC`;
          checkkq = await queryDB(setpdQuery);
          ////console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "traYCSXDataFull_QLSX_New":
        (async () => {
          ////console.log(DATA);
          let currenttime = moment().format("YYYY-MM-DD HH:mm:ss");
          let checkkq = "OK";
          let setpdQuery = `
          WITH
          PLANTABLE AS 
          (SELECT DISTINCT CTR_CD, PROD_REQUEST_NO  FROM ZTB_QLSXPLAN),
          INSPECT_INPUT_TB AS 
          (
          SELECT CTR_CD,PROD_REQUEST_NO, SUM(INPUT_QTY_EA) AS LOT_TOTAL_INPUT_QTY_EA FROM ZTBINSPECTINPUTTB GROUP BY CTR_CD,PROD_REQUEST_NO
          ),
          INSPECT_OUTPUT_TB AS 
          (
          SELECT CTR_CD,PROD_REQUEST_NO, SUM(OUTPUT_QTY_EA) AS LOT_TOTAL_OUTPUT_QTY_EA FROM ZTBINSPECTOUTPUTTB WHERE SORTING ='N' GROUP BY CTR_CD,PROD_REQUEST_NO
          ),
          WH_TABLE AS 
          (SELECT CTR_CD, I660.PROD_REQUEST_NO, SUM(I660.IN_QTY) AS INPUT_QTY, SUM(CASE WHEN STATUS='N' AND I660.USE_YN ='Y' THEN I660.IN_QTY ELSE 0 END) AS STOCK,SUM(CASE WHEN STATUS='B' AND I660.USE_YN ='Y' THEN I660.IN_QTY ELSE 0 END) AS BLOCK_QTY, SUM(CASE WHEN I660.USE_YN <> 'Y' THEN I660.IN_QTY ELSE 0 END) AS OUTPUT_QTY FROM I660  GROUP BY CTR_CD,I660.PROD_REQUEST_NO),
          ZTBDLVR AS
          (SELECT CTR_CD,G_CODE, SUM(DELIVERY_QTY) AS DELIVERY_QTY FROM ZTBDelivery GROUP BY CTR_CD,G_CODE),
          POTB AS
          (
          SELECT CTR_CD,G_CODE, SUM(ZTBPOTable.PO_QTY) AS PO_QTY FROM ZTBPOTable GROUP BY CTR_CD,G_CODE
          ),
          PO_TON AS
          (
            SELECT POTB.CTR_CD,POTB.G_CODE, (POTB.PO_QTY- ZTBDLVR.DELIVERY_QTY) AS PO_BALANCE FROM POTB LEFT JOIN ZTBDLVR ON (POTB.G_CODE =ZTBDLVR.G_CODE AND POTB.CTR_CD =ZTBDLVR.CTR_CD )
          ),
          AA AS
          (
            SELECT
			  PVTB.CTR_CD,
              PVTB.PROD_REQUEST_NO,
              isnull(PVTB.[1], 0) AS CD1,
              isnull(PVTB.[2], 0) AS CD2,
              isnull(PVTB.[3], 0) AS CD3,
              isnull(PVTB.[4], 0) AS CD4
            FROM
              (
                SELECT
				  ZTB_QLSXPLAN.CTR_CD,
                  ZTB_QLSXPLAN.PROD_REQUEST_NO,
                  ZTB_QLSXPLAN.PROCESS_NUMBER,
                  SUM(isnull(SX_RESULT, 0)) AS KETQUASX
                FROM
                  ZTB_SX_RESULT
                  LEFT JOIN ZTB_QLSXPLAN ON (ZTB_QLSXPLAN.PLAN_ID = ZTB_SX_RESULT.PLAN_ID AND ZTB_QLSXPLAN.CTR_CD = ZTB_SX_RESULT.CTR_CD)
                WHERE
                  ZTB_QLSXPLAN.STEP = 0
                GROUP BY
				  ZTB_QLSXPLAN.CTR_CD,
                  ZTB_QLSXPLAN.PROD_REQUEST_NO,
                  ZTB_QLSXPLAN.PROCESS_NUMBER
              ) AS PV PIVOT (
                SUM(PV.KETQUASX) FOR PV.PROCESS_NUMBER IN ([1], [2], [3], [4])
              ) AS PVTB
          ),
		  LOSSKT AS (
SELECT BB.G_CODE, SUM(BB.INSPECT_TOTAL_QTY) AS INSPECT_TOTAL_QTY, SUM(BB.TOTAL_NG) AS TOTAL_NG, BB.CTR_CD FROM
(
SELECT AA.G_CODE, AA.INSPECT_DATE,AA.INSPECT_TOTAL_QTY, AA.TOTAL_NG, COUNT(G_CODE) OVER(PARTITION BY G_CODE ORDER BY INSPECT_DATE DESC) AS CNT, AA.CTR_CD
FROM
(
SELECT  G_CODE,CAST(INSPECT_DATETIME AS date) AS INSPECT_DATE, SUM(INSPECT_TOTAL_QTY-ERR32) AS INSPECT_TOTAL_QTY, SUM(ERR1+ERR2+ERR3+ERR4+ERR5+ERR6+ERR7+ERR8+ERR9+ERR10+ERR11+ERR12+ERR13+ERR14+ERR15+ERR16+ERR17+ERR18+ERR19+ERR20+ERR21+ERR22+ERR23+ERR24+ERR25+ERR26+ERR27+ERR28+ERR29+ERR30+ERR31
) AS TOTAL_NG, CTR_CD FROM ZTBINSPECTNGTB
WHERE CTR_CD='${DATA.CTR_CD}'
GROUP BY G_CODE,CAST(INSPECT_DATETIME AS date), CTR_CD
) AS AA
) AS BB
WHERE BB.CNT <=10 AND BB.INSPECT_TOTAL_QTY<>0
GROUP BY BB.G_CODE, BB.CTR_CD
),
ZTB_PROD_PROCESS_TB2 AS (
SELECT CTR_CD,G_CODE,PROCESS_NUMBER,EQ_SERIES,SETTING_TIME,UPH,STEP,LOSS_SX,LOSS_SETTING,INS_DATE,INS_EMPL,UPD_DATE,UPD_EMPL,FACTORY,SUM(LOSS_SX) OVER (PARTITION BY G_CODE ORDER BY PROCESS_NUMBER ROWS BETWEEN 1 FOLLOWING AND UNBOUNDED FOLLOWING) AS Total_LOSS_SX,SUM(LOSS_SETTING) OVER (PARTITION BY G_CODE ORDER BY PROCESS_NUMBER ROWS BETWEEN 1 FOLLOWING AND UNBOUNDED FOLLOWING) AS Total_LOSS_SETTING FROM ZTB_PROD_PROCESS_TB
),
SLCTB AS
(SELECT P400.CTR_CD, P400.PROD_REQUEST_DATE, P400.PROD_REQUEST_QTY, P400.G_CODE,P400.PROD_REQUEST_NO,ZTB_PROD_PROCESS_TB2.PROCESS_NUMBER, CEILING(P400.PROD_REQUEST_QTY*(1+(isnull(ZTB_PROD_PROCESS_TB2.Total_LOSS_SX,0) + isnull(LOSSKT.TOTAL_NG*1.0/LOSSKT.INSPECT_TOTAL_QTY*100,0) )*1.0/100) + isnull(ZTB_PROD_PROCESS_TB2.Total_LOSS_SETTING,0)*1.0/M100.PD*1000*(M100.G_C*M100.G_C_R)) AS SLC  
FROM P400 
LEFT JOIN ZTB_PROD_PROCESS_TB2 ON P400.G_CODE = ZTB_PROD_PROCESS_TB2.G_CODE AND P400.CTR_CD = ZTB_PROD_PROCESS_TB2.CTR_CD
LEFT JOIN M100 ON M100.CTR_CD = P400.CTR_CD AND M100.G_CODE = P400.G_CODE
LEFT JOIN LOSSKT ON LOSSKT.CTR_CD = P400.CTR_CD AND LOSSKT.G_CODE = P400.G_CODE
),
SLC_PVTB AS
(
SELECT SLCTB.CTR_CD,SLCTB.PROD_REQUEST_NO, SLCTB.PROD_REQUEST_DATE, SLCTB.PROD_REQUEST_QTY, SLCTB.[1] AS SLC_CD1, SLCTB.[2] AS SLC_CD2, SLCTB.[3] AS SLC_CD3, SLCTB.[4] AS SLC_CD4 
FROM (
SELECT 
CTR_CD,
PROD_REQUEST_NO, 
PROD_REQUEST_DATE,
PROD_REQUEST_QTY,
PROCESS_NUMBER,
SLC
FROM 
SLCTB
) AS SourceTable
PIVOT (
MAX(SLC) FOR PROCESS_NUMBER IN ([1], [2], [3], [4], [5]) -- Add as many process numbers as you have
) AS SLCTB
)
          SELECT 
          M100.FACTORY,
                    M100.Setting1,
                    M100.Setting2,
                    M100.Step1,
                    M100.Step2,
                    M100.LOSS_SX1,
                    M100.LOSS_SX2,
                    M100.LOSS_SETTING1,
                    M100.LOSS_SETTING2,
                    M100.NOTE,
                    M100.UPH1,
                    M100.UPH2,
                    M100.Step3,
                    M100.Step4,
                    M100.EQ3,
                    M100.EQ4,
                    M100.UPH3,
                    M100.UPH4,
                    M100.Setting3,
                    M100.Setting4,
                    M100.LOSS_SX3,
                    M100.LOSS_SX4,
                    M100.LOSS_SETTING3,
                    M100.LOSS_SETTING4,
                    P400.G_CODE,
                    M100.PROD_TYPE,
                    M100.PROD_MAIN_MATERIAL,
                    M100.DESCR,
                    M100.PDBV,
                    M100.PDBV_EMPL,
                    M100.PDBV_DATE,
                    M100.G_NAME,
                    M100.G_NAME_KD,
                    M100.G_WIDTH,
                    M100.G_LENGTH,
                    M100.PROD_PRINT_TIMES,
                    M100.G_C,
                    M100.G_C_R,
                    M010.EMPL_NAME,
                    M010.EMPL_NO,
                    M110.CUST_NAME_KD,
                    M110.CUST_CD,
                    P400.PROD_REQUEST_NO,
                    P400.PROD_REQUEST_DATE,
                    P400.DELIVERY_DT,
                    P400.PL_HANG,
                    P400.PROD_REQUEST_QTY,                  
                   CASE WHEN (P400.YCSX_PENDING =0 OR isnull(INSPECT_OUTPUT_TB.LOT_TOTAL_OUTPUT_QTY_EA, 0) >= P400.PROD_REQUEST_QTY) THEN 0 ELSE 1 END AS YCSX_PENDING,
                    P400.CODE_55 AS PHAN_LOAI,
                    P400.REMK AS REMARK,         
                    P400.PDUYET,
                    P400.CODE_50 AS LOAIXH,
                    M100.BANVE,
                    M100.NO_INSPECTION,
                    isnull(PO_TON.PO_BALANCE, 0) AS PO_BALANCE,
                    M100.EQ1,
                    M100.EQ2,
                    isnull(AA.CD1, 0) AS CD1,
                    isnull(AA.CD2, 0) AS CD2,
                    isnull(AA.CD3, 0) AS CD3,
                    isnull(AA.CD4, 0) AS CD4, 
                    isnull(INSPECT_OUTPUT_TB.LOT_TOTAL_OUTPUT_QTY_EA, 0) AS LOT_TOTAL_OUTPUT_QTY_EA,
                    PLANTABLE.PROD_REQUEST_NO AS DACHITHI, 
					(isnull(SLC_PVTB.SLC_CD1,0)- isnull(AA.CD1,0)) AS TON_CD1,
					(isnull(SLC_PVTB.SLC_CD2,0)- isnull(AA.CD2,0)) AS TON_CD2,
					(isnull(SLC_PVTB.SLC_CD3,0)- isnull(AA.CD3,0)) AS TON_CD3,
					(isnull(SLC_PVTB.SLC_CD4,0)- isnull(AA.CD4,0)) AS TON_CD4,
					isnull(SLC_PVTB.SLC_CD1,0) AS SLC_CD1, isnull(SLC_PVTB.SLC_CD2,0) AS SLC_CD2, isnull(SLC_PVTB.SLC_CD3,0) AS SLC_CD3, isnull(SLC_PVTB.SLC_CD4,0) AS SLC_CD4
					
          FROM P400
          LEFT JOIN M100 ON (M100.G_CODE =P400.G_CODE AND M100.CTR_CD =P400.CTR_CD)
          LEFT JOIN M010 ON (M010.EMPL_NO= P400.EMPL_NO AND M010.CTR_CD =P400.CTR_CD)
          LEFT JOIN M110 ON (M110.CUST_CD = P400.CUST_CD AND M110.CTR_CD =P400.CTR_CD)
          LEFT JOIN PO_TON ON (PO_TON.G_CODE = P400.G_CODE AND PO_TON.CTR_CD =P400.CTR_CD)
          LEFT JOIN AA ON (AA.PROD_REQUEST_NO = P400.PROD_REQUEST_NO AND AA.CTR_CD =P400.CTR_CD)         
          LEFT JOIN INSPECT_OUTPUT_TB ON (INSPECT_OUTPUT_TB.PROD_REQUEST_NO = P400.PROD_REQUEST_NO AND INSPECT_OUTPUT_TB.CTR_CD =P400.CTR_CD)
          LEFT JOIN PLANTABLE ON (PLANTABLE.PROD_REQUEST_NO = P400.PROD_REQUEST_NO AND PLANTABLE.CTR_CD =P400.CTR_CD)
		  LEFT JOIN LOSSKT ON (LOSSKT.G_CODE = P400.G_CODE AND LOSSKT.CTR_CD =P400.CTR_CD)
		  LEFT JOIN SLC_PVTB ON (SLC_PVTB.PROD_REQUEST_NO = P400.PROD_REQUEST_NO AND SLC_PVTB.CTR_CD = P400.CTR_CD)
         ${generate_condition_get_ycsx(
            DATA.alltime,
            DATA.start_date,
            DATA.end_date,
            DATA.cust_name,
            DATA.codeCMS,
            DATA.codeKD,
            DATA.prod_type,
            DATA.empl_name,
            DATA.phanloai,
            DATA.ycsx_pending,
            DATA.prod_request_no,
            DATA.material,
            DATA.inspect_inputcheck,
            DATA.phanloaihang,
            DATA.CTR_CD,
            DATA.material_yes
          )} ORDER BY P400.PROD_REQUEST_NO DESC`;
          checkkq = await queryDB(setpdQuery);
          console.log(setpdQuery);
          ////console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "getP400":
        (async () => {
          ////console.log(DATA);
          let currenttime = moment().format("YYYY-MM-DD HH:mm:ss");
          let checkkq = "OK";
          let setpdQuery = `SELECT * FROM P400 WHERE CTR_CD='${DATA.CTR_CD}' AND PROD_REQUEST_NO='${DATA.PROD_REQUEST_NO}' AND PROD_REQUEST_DATE='${DATA.PROD_REQUEST_DATE}'`;
          //////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          ////console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "checkLastYCSX":
        (async () => {
          ////console.log(DATA);
          let currenttime = moment().format("YYYYMMDD");
          let checkkq = "OK";
          let setpdQuery = `SELECT TOP 1 * FROM P400 WHERE CTR_CD='${DATA.CTR_CD}' AND PROD_REQUEST_DATE='${currenttime}' ORDER BY INS_DATE DESC`;
          //////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "getSystemDateTime":
        (async () => {
          ////console.log(DATA);
          let currenttime = moment().format("YYYY-MM-DD HH:mm:ss");
          let checkkq = "OK";
          let setpdQuery = `SELECT GETDATE() AS SYSTEM_DATETIME`;
          //////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          ////console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "checkpobalance_tdycsx":
        (async () => {
          ////console.log(DATA);
          let currenttime = moment().format("YYYY-MM-DD HH:mm:ss");
          let checkkq = "OK";
          let setpdQuery = `WITH POTB AS
          (
          SELECT CTR_CD, G_CODE, SUM(PO_QTY) AS PO_QTY FROM ZTBPOTable WHERE G_CODE='${DATA.G_CODE}' AND CTR_CD='${DATA.CTR_CD}' GROUP BY CTR_CD, G_CODE
          ),
          DLTB AS
          (
          SELECT CTR_CD, G_CODE, SUM(DELIVERY_QTY) AS DELIVERY_QTY FROM ZTBDelivery WHERE G_CODE='${DATA.G_CODE}' AND CTR_CD='${DATA.CTR_CD}' GROUP BY CTR_CD, G_CODE
          )
          SELECT POTB.G_CODE, (isnull(POTB.PO_QTY,0)- isnull(DLTB.DELIVERY_QTY,0)) AS PO_BALANCE FROM POTB LEFT JOIN DLTB ON POTB.G_CODE = DLTB.G_CODE AND POTB.CTR_CD = DLTB.CTR_CD WHERE POTB.CTR_CD='${DATA.CTR_CD}'`;
          //////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          ////console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "checkpobalance_allcode":
        (async () => {
          ////console.log(DATA);
          let currenttime = moment().format("YYYY-MM-DD HH:mm:ss");
          let checkkq = "OK";
          let setpdQuery = `SELECT AA.G_CODE, (SUM(ZTBPOTable.PO_QTY)-SUM(AA.TotalDelivered)) As PO_BALANCE FROM (SELECT ZTBPOTable.CTR_CD, SELECT ZTBPOTable.EMPL_NO, ZTBPOTable.CUST_CD, ZTBPOTable.G_CODE, ZTBPOTable.PO_NO, isnull(SUM(ZTBDelivery.DELIVERY_QTY),0) AS TotalDelivered FROM ZTBPOTable LEFT JOIN ZTBDelivery ON (ZTBDelivery.CTR_CD = ZTBPOTable.CTR_CD AND ZTBDelivery.CUST_CD = ZTBPOTable.CUST_CD AND ZTBDelivery.G_CODE = ZTBPOTable.G_CODE AND ZTBDelivery.PO_NO = ZTBPOTable.PO_NO AND ZTBDelivery.CTR_CD = ZTBPOTable.CTR_CD) GROUP BY ZTBPOTable.CTR_CD,ZTBPOTable.EMPL_NO,ZTBPOTable.G_CODE,ZTBPOTable.CUST_CD,ZTBPOTable.PO_NO) AS AA JOIN ZTBPOTable ON ( AA.CUST_CD = ZTBPOTable.CUST_CD AND AA.G_CODE = ZTBPOTable.G_CODE AND AA.PO_NO = ZTBPOTable.PO_NO AND AA.CTR_CD = ZTBPOTable.CTR_CD) WHERE ZTBPOTable.CTR_CD='${DATA.CTR_CD}' GROUP BY AA.G_CODE`;
          //////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          ////console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "checktonkho_tdycsx": // chua update CTR_CD
        (async () => {
          ////console.log(DATA);
          let currenttime = moment().format("YYYY-MM-DD HH:mm:ss");
          let checkkq = "OK";
          let setpdQuery = `SELECT M100.G_CODE, isnull(TONKIEM.INSPECT_BALANCE_QTY,0) AS CHO_KIEM, isnull(TONKIEM.WAIT_CS_QTY,0) AS CHO_CS_CHECK,isnull(TONKIEM.WAIT_SORTING_RMA,0) CHO_KIEM_RMA, isnull(TONKIEM.TOTAL_WAIT,0) AS TONG_TON_KIEM, isnull(BTP.BTP_QTY_EA,0) AS BTP, isnull(THANHPHAM.TONKHO,0) AS TON_TP, isnull(tbl_Block_table2.Block_Qty,0) AS BLOCK_QTY, (isnull(TONKIEM.TOTAL_WAIT,0) + isnull(BTP.BTP_QTY_EA,0)+ isnull(THANHPHAM.TONKHO,0) - isnull(tbl_Block_table2.Block_Qty,0)) AS GRAND_TOTAL_STOCK FROM M100 LEFT JOIN ( SELECT Product_MaVach, isnull([IN],0) AS NHAPKHO, isnull([OUT],0) AS XUATKHO, (isnull([IN],0)- isnull([OUT],0)) AS TONKHO FROM ( SELECT Product_Mavach, IO_Type, IO_Qty FROM tbl_InputOutput ) AS SourceTable PIVOT ( SUM(IO_Qty) FOR IO_Type IN ([IN], [OUT]) ) AS PivotTable ) AS THANHPHAM ON (THANHPHAM.Product_MaVach = M100.G_CODE) LEFT JOIN ( SELECT ZTB_WAIT_INSPECT.G_CODE, M100.G_NAME, M100.G_NAME_KD, SUM(INSPECT_BALANCE_QTY) AS INSPECT_BALANCE_QTY, SUM(WAIT_CS_QTY) AS WAIT_CS_QTY, SUM(WAIT_SORTING_RMA) AS WAIT_SORTING_RMA, SUM(INSPECT_BALANCE_QTY+ WAIT_CS_QTY+ WAIT_SORTING_RMA) AS TOTAL_WAIT FROM ZTB_WAIT_INSPECT JOIN M100 ON ( M100.G_CODE = ZTB_WAIT_INSPECT.G_CODE) WHERE UPDATE_DATE=CONVERT(date,GETDATE()) AND CALAMVIEC = 'DEM' GROUP BY ZTB_WAIT_INSPECT.G_CODE, M100.G_NAME, M100.G_NAME_KD) AS TONKIEM ON (THANHPHAM.Product_MaVach = TONKIEM.G_CODE) LEFT JOIN ( SELECT Product_MaVach, SUM(Block_Qty) AS Block_Qty from tbl_Block2 GROUP BY Product_MaVach ) AS tbl_Block_table2 ON (tbl_Block_table2.Product_MaVach= M100.G_CODE) LEFT JOIN ( SELECT ZTB_HALF_GOODS.G_CODE, M100.G_NAME, SUM(BTP_QTY_EA) AS BTP_QTY_EA FROM ZTB_HALF_GOODS JOIN M100 ON (M100.G_CODE = ZTB_HALF_GOODS.G_CODE) WHERE UPDATE_DATE = CONVERT(date,GETDATE()) GROUP BY ZTB_HALF_GOODS.G_CODE, M100.G_NAME) AS BTP ON (BTP.G_CODE = THANHPHAM.Product_MaVach) WHERE M100.G_CODE='${DATA.G_CODE}'`;
          //////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          ////console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "checkfcst_tdycsx":
        (async () => {
          ////console.log(DATA);
          let currenttime = moment().format("YYYY-MM-DD HH:mm:ss");
          let checkkq = "OK";
          let setpdQuery = `SELECT G_CODE, SUM(W1) AS W1, SUM(W2) AS W2, SUM(W3) AS W3, SUM(W4) AS W4, SUM(W5) AS W5, SUM(W6) AS W6, SUM(W7) AS W7, SUM(W8) AS W8 FROM ZTBFCSTTB WHERE FCSTYEAR = YEAR(GETDATE()) AND FCSTWEEKNO = (SELECT MAX(FCSTWEEKNO) FROM ZTBFCSTTB WHERE FCSTYEAR = YEAR(GETDATE()) AND CTR_CD='${DATA.CTR_CD}') AND G_CODE='${DATA.G_CODE}' AND ZTBFCSTTB.CTR_CD='${DATA.CTR_CD}' GROUP BY G_CODE`;
          //////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          ////console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "insert_ycsx":
        (async () => {
          ////console.log(DATA);
          let currenttime = moment().format("YYYY-MM-DD HH:mm:ss");
          let checkkq = "OK";
          let setpdQuery = `INSERT INTO P400 (CTR_CD, PROD_REQUEST_DATE,PROD_REQUEST_NO,CODE_50,CODE_03,CODE_55,G_CODE,RIV_NO,PROD_REQUEST_QTY,CUST_CD,EMPL_NO,REMK,USE_YN,DELIVERY_DT,INS_DATE,INS_EMPL,UPD_DATE,UPD_EMPL,YCSX_PENDING,G_CODE2,PO_TDYCSX,TKHO_TDYCSX,FCST_TDYCSX,W1,W2,W3,W4,W5,W6,W7,W8,BTP_TDYCSX,CK_TDYCSX,PDUYET,BLOCK_TDYCSX,PO_NO, PL_HANG, MATERIAL_YN) VALUES ('${DATA.CTR_CD}',FORMAT(GETDATE(), 'yyyyMMdd'),'${DATA.PROD_REQUEST_NO}','${DATA.CODE_50}','${DATA.CODE_03}','${DATA.CODE_55}','${DATA.G_CODE}','${DATA.RIV_NO}','${DATA.PROD_REQUEST_QTY}','${DATA.CUST_CD}','${DATA.EMPL_NO}',N'${DATA.REMK ?? ''}','${DATA.USE_YN}','${DATA.DELIVERY_DT}',GETDATE(),'${DATA.INS_EMPL}',GETDATE(),'${DATA.UPD_EMPL}','${DATA.YCSX_PENDING}','${DATA.G_CODE2}','${DATA.PO_TDYCSX}','${DATA.TKHO_TDYCSX}','${DATA.FCST_TDYCSX}','${DATA.W1}','${DATA.W2}','${DATA.W3}','${DATA.W4}','${DATA.W5}','${DATA.W6}','${DATA.W7}','${DATA.W8}','${DATA.BTP_TDYCSX}','${DATA.CK_TDYCSX}','${DATA.PDUYET}','${DATA.BLOCK_TDYCSX}','${DATA.PO_NO}','${DATA.PHANLOAI}','${DATA.MATERIAL_YN}')`;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "getLastProcessLotNo":
        (async () => {
          ////console.log(DATA);
          let currenttime = moment().format("YYYY-MM-DD HH:mm:ss");
          let checkkq = "OK";
          let setpdQuery = `SELECT TOP 1 PROCESS_LOT_NO,SUBSTRING(PROCESS_LOT_NO,6,3) AS SEQ_NO, INS_DATE FROM P501 WHERE P501.CTR_CD='${DATA.CTR_CD}' AND SUBSTRING(PROCESS_LOT_NO,1,2) = '${DATA.machine}' AND PROCESS_IN_DATE = '${DATA.in_date}' ORDER BY INS_DATE DESC`;
          //////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          ////console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "checkYCSXO300":
        (async () => {
          ////console.log(DATA);
          let currenttime = moment().format("YYYY-MM-DD HH:mm:ss");
          let checkkq = "OK";
          let setpdQuery = `SELECT TOP 1 * FROM O300 WHERE CTR_CD='${DATA.CTR_CD}' AND PROD_REQUEST_NO = '${DATA.PROD_REQUEST_NO}'`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          ////console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "checkYCSXQLSXPLAN":
        (async () => {
          ////console.log(DATA);
          let currenttime = moment().format("YYYY-MM-DD HH:mm:ss");
          let checkkq = "OK";
          let setpdQuery = `SELECT TOP 1 * FROM ZTB_QLSXPLAN WHERE CTR_CD='${DATA.CTR_CD}' AND PROD_REQUEST_NO = '${DATA.PROD_REQUEST_NO}'`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          ////console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "checkProcessInNoP500":
        (async () => {
          ////console.log(DATA);
          let in_date = moment().format("YYYYMMDD");
          let checkkq = "OK";
          let setpdQuery = `SELECT TOP 1 PROCESS_IN_DATE, PROCESS_IN_NO, EQUIPMENT_CD FROM P500 WHERE CTR_CD='${DATA.CTR_CD}' AND PROCESS_IN_DATE='${in_date}'  ORDER BY INS_DATE DESC`;
          //////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          ////console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "insert_p500":
        (async () => {
          ////console.log(DATA);
          let checkkq = "OK";
          let setpdQuery = `INSERT INTO P500 (CTR_CD, PROCESS_IN_DATE, PROCESS_IN_NO, PROCESS_IN_SEQ, M_LOT_IN_SEQ, PROD_REQUEST_DATE, PROD_REQUEST_NO, G_CODE, M_CODE, M_LOT_NO, EMPL_NO, EQUIPMENT_CD, SCAN_RESULT, INS_DATE, INS_EMPL, UPD_DATE, UPD_EMPL, FACTORY, PLAN_ID, PR_NB) VALUES ('${DATA.CTR_CD}','${DATA.in_date
            }','${DATA.next_process_in_no}','${DATA.PROD_REQUEST_NO.substring(
              4,
              7
            )}','${DATA.PROD_REQUEST_DATE.substring(5, 8)}','${DATA.PROD_REQUEST_DATE
            }','${DATA.PROD_REQUEST_NO}','${DATA.G_CODE}', '','','${DATA.EMPL_NO
            }','${DATA.phanloai}01','OK',GETDATE(),'${DATA.EMPL_NO}',GETDATE(),'${DATA.EMPL_NO
            }','NM1','${DATA.PLAN_ID}',${DATA.PR_NB ?? 0})`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "insert_p501":
        (async () => {
          ////console.log(DATA);
          let currenttime = moment().format("YYYY-MM-DD HH:mm:ss");
          let checkkq = "OK";
          let setpdQuery = `INSERT INTO P501 (CTR_CD,PROCESS_IN_DATE,PROCESS_IN_NO,PROCESS_IN_SEQ,M_LOT_IN_SEQ,PROCESS_PRT_SEQ,M_LOT_NO,PROCESS_LOT_NO,INS_DATE,INS_EMPL,UPD_DATE,UPD_EMPL, PLAN_ID, PROCESS_NUMBER, TEMP_QTY, USE_YN) VALUES  ('${DATA.CTR_CD}','${DATA.in_date}','${DATA.next_process_in_no}','${DATA.PROD_REQUEST_NO.substring(4,7)}','${DATA.PROD_REQUEST_DATE.substring(5, 8)}','${DATA.next_process_prt_seq}','','${DATA.next_process_lot_no}',GETDATE(),'${DATA.EMPL_NO}',GETDATE(),'${DATA.EMPL_NO}','${DATA.PLAN_ID}',${DATA.PROCESS_NUMBER ?? 0}, ${DATA.TEMP_QTY ?? 0},'${DATA.USE_YN}')`;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "delete_ycsx":
        (async () => {
          ////console.log(DATA);
          let currenttime = moment().format("YYYY-MM-DD HH:mm:ss");
          let checkkq = "OK";
          let setpdQuery = `DELETE FROM P400 WHERE CTR_CD='${DATA.CTR_CD}' AND PROD_REQUEST_NO='${DATA.PROD_REQUEST_NO}'`;
          //////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "checkYcsxExist":
        (async () => {
          ////console.log(DATA);
          let checkkq = "OK";
          let setpdQuery = `SELECT * FROM P400 WHERE CTR_CD='${DATA.CTR_CD}' AND PROD_REQUEST_NO= ${DATA.PROD_REQUEST_NO}`;
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          ////console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "update_ycsx":
        (async () => {
          ////console.log(DATA);
          let currenttime = moment().format("YYYY-MM-DD HH:mm:ss");
          let checkkq = "OK";
          let setpdQuery = `UPDATE P400 SET REMK='${DATA.REMK}', CODE_50='${DATA.CODE_50}', CODE_55='${DATA.CODE_55}', PROD_REQUEST_QTY='${DATA.PROD_REQUEST_QTY}', UPD_EMPL='${DATA.EMPL_NO}', DELIVERY_DT='${DATA.DELIVERY_DT}', UPD_DATE=GETDATE() WHERE CTR_CD='${DATA.CTR_CD}' AND PROD_REQUEST_NO='${DATA.PROD_REQUEST_NO}'`;
          //////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "setpending_ycsx":
        (async () => {
          ////console.log(DATA);
          let currenttime = moment().format("YYYY-MM-DD HH:mm:ss");
          let checkkq = "OK";
          /* let USE_YN = DATA.YCSX_PENDING===1?'N':'Y';
          let setpdQuery = `UPDATE P400 SET YCSX_PENDING='${DATA.YCSX_PENDING}', USE_YN='${USE_YN}' WHERE PROD_REQUEST_NO='${DATA.PROD_REQUEST_NO}'`; */
          let setpdQuery = `UPDATE P400 SET YCSX_PENDING='${DATA.YCSX_PENDING}' WHERE CTR_CD='${DATA.CTR_CD}' AND PROD_REQUEST_NO='${DATA.PROD_REQUEST_NO}'`;
          //////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "setopen_ycsx":
        (async () => {
          ////console.log(DATA);
          let currenttime = moment().format("YYYY-MM-DD HH:mm:ss");
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let checkkq = "OK";
          /* let USE_YN = DATA.YCSX_PENDING===1?'N':'Y';
          let setpdQuery = `UPDATE P400 SET YCSX_PENDING='${DATA.YCSX_PENDING}', USE_YN='${USE_YN}' WHERE PROD_REQUEST_NO='${DATA.PROD_REQUEST_NO}'`; */
          let setpdQuery = `UPDATE P400 SET USE_YN='${DATA.USE_YN}', UPD_DATE=GETDATE(), UPD_EMPL='${EMPL_NO}' WHERE CTR_CD='${DATA.CTR_CD}' AND PROD_REQUEST_NO='${DATA.PROD_REQUEST_NO}'`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "pheduyet_ycsx":
        (async () => {
          ////console.log(DATA);
          let currenttime = moment().format("YYYY-MM-DD HH:mm:ss");
          let checkkq = "OK";
          let setpdQuery = `UPDATE P400 SET PDUYET='${DATA.PDUYET}' WHERE CTR_CD='${DATA.CTR_CD}' AND PROD_REQUEST_NO='${DATA.PROD_REQUEST_NO}'`;
          //////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "ycsx_fullinfo":
        (async () => {
          ////console.log(DATA);
          let currenttime = moment().format("YYYY-MM-DD HH:mm:ss");
          let checkkq = "OK";
          let setpdQuery = `WITH IQCTB AS
(
SELECT CTR_CD, M_CODE, SUM(TOTAL_IN_QTY) AS IQC_STOCK  FROM ZTB_SX_NG_MATERIAL WHERE QC_PASS='Y' AND USE_YN='Y' AND PHANLOAI='NVL' GROUP BY CTR_CD, M_CODE
)
SELECT M100.USE_YN,M100.G_NAME_KD,isnull(M100.FSC_CODE,'01') AS FSC_CODE, isnull(M100.FSC,'N') AS FSC, M100.PDBV, M140.LIEUQL_SX, M100.PROD_MAIN_MATERIAL, M100.PO_TYPE, P400.REMK,P400.PROD_REQUEST_QTY,P400.PROD_REQUEST_NO,P400.PROD_REQUEST_DATE,P400.G_CODE,P400.DELIVERY_DT,P400.CODE_55,P400.CODE_50,M140.RIV_NO,M140.M_QTY,M140.M_CODE,M110.CUST_NAME,M100.ROLE_EA_QTY,M100.PACK_DRT,M100.G_WIDTH,M100.G_SG_R,M100.G_SG_L,M100.G_R,M100.G_NAME,M100.G_LG, M100.PROD_PRINT_TIMES, M100.G_LENGTH,M100.G_CODE_C,M100.G_CG,M100.G_C,M100.G_C_R,M100.PD, M100.CODE_33,M090.M_NAME,M090.WIDTH_CD,M010.EMPL_NO,M010.EMPL_NAME, P400.CODE_03,M140.REMK AS REMARK , (isnull(M090.STOCK_CFM_NM1,0) + isnull(STOCK_CFM_NM2,0)) AS TONLIEU, (isnull(M090.HOLDING_CFM_NM1,0) + isnull(M090.HOLDING_CFM_NM2,0)) AS HOLDING, (isnull(M090.STOCK_CFM_NM1,0) + isnull(STOCK_CFM_NM2,0) + isnull(M090.HOLDING_CFM_NM1,0) + isnull(M090.HOLDING_CFM_NM2,0)) AS TONG_TON_LIEU,isnull(IQCTB.IQC_STOCK,0) AS IQC_STOCK, P400.PDUYET, M100.NO_INSPECTION, M100.PROD_DIECUT_STEP, M100.PROD_PRINT_TIMES,M100.FACTORY, M100.EQ1, M100.EQ2, M100.EQ3,M100.EQ4,M100.Setting1, M100.Setting2, M100.Setting3,M100.Setting4,M100.UPH1, M100.UPH2,M100.UPH3,M100.UPH4, M100.Step1, M100.Step2, M100.Step3,M100.Step4,M100.LOSS_SX1, M100.LOSS_SX2, M100.LOSS_SX3, M100.LOSS_SX4, M100.LOSS_SETTING1 , M100.LOSS_SETTING2 ,M100.LOSS_SETTING3, M100.LOSS_SETTING4, M100.NOTE, M100.PROD_TYPE, P400.PL_HANG, M100.EXP_DATE, M100.PD_HSD, M100.QL_HSD FROM P400 
                    LEFT JOIN M100 ON P400.G_CODE = M100.G_CODE AND P400.CTR_CD = M100.CTR_CD
                    LEFT JOIN M010 ON P400.EMPL_NO = M010.EMPL_NO AND P400.CTR_CD = M010.CTR_CD
                    LEFT JOIN M140 ON P400.G_CODE = M140.G_CODE AND P400.CTR_CD = M140.CTR_CD
                    LEFT JOIN M090 ON M090.M_CODE = M140.M_CODE AND M090.CTR_CD = M140.CTR_CD
                    LEFT JOIN M110 ON M110.CUST_CD = P400.CUST_CD AND M110.CTR_CD = P400.CTR_CD
					LEFT JOIN IQCTB ON M090.M_CODE = IQCTB.M_CODE AND M090.CTR_CD = IQCTB.CTR_CD
                    WHERE P400.PROD_REQUEST_NO='${DATA.PROD_REQUEST_NO}' AND P400.CTR_CD='${DATA.CTR_CD}'`;
          //////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          ////console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "check_inventorydate":
        (async () => {
          ////console.log(DATA);
          let currenttime = moment().format("YYYY-MM-DD HH:mm:ss");
          let checkkq = "OK";
          let setpdQuery = `SELECT MAX(INVENTORY_DATE) AS INVENTORY_DATE FROM KIEMKE_NVL WHERE CTR_CD='${DATA.CTR_CD}'`;
          //////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "check_banve": //chua update CTR_CD
        (async () => {
          ////console.log(DATA);
          const draw_path = "C:\\xampp\\htdocs\\banve\\";
          if (!existsSync(draw_path + DATA.filename)) {
            res.send({ tk_status: "OK" });
          } else {
            res.send({ tk_status: "NG" });
          }
        })();
        break;
      case "update_banve_value":
        (async () => {
          ////console.log(DATA);
          let checkkq = "OK";
          let setpdQuery = `UPDATE M100 SET BANVE='${DATA.banvevalue}' WHERE CTR_CD='${DATA.CTR_CD}'AND G_CODE= '${DATA.G_CODE}'`;
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "update_appsheet_value":
        (async () => {
          ////console.log(DATA);
          let checkkq = "OK";
          let setpdQuery = `UPDATE M100 SET APPSHEET='${DATA.appsheetvalue}' WHERE CTR_CD='${DATA.CTR_CD}' AND G_CODE= '${DATA.G_CODE}'`;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "check_amazon_data":
        (async () => {
          //////console.log(DATA);
          let checkkq = "OK";
          let setpdQuery = `SELECT * FROM AMAZONE_DATA WHERE CTR_CD='${DATA.CTR_CD}' AND DATA_1='${DATA.DATA}' OR DATA_2='${DATA.DATA}' OR  DATA_3='${DATA.DATA}' OR DATA_4='${DATA.DATA}' `;
          //////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          ////console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "checkIDCongViecAMZ":
        (async () => {
          //////console.log(DATA);
          let checkkq = "OK";
          let setpdQuery = `SELECT TOP 1 * FROM AMAZONE_DATA WHERE CTR_CD='${DATA.CTR_CD}' AND NO_IN='${DATA.NO_IN}' OR PROD_REQUEST_NO='${DATA.PROD_REQUEST_NO}'`;
          //////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          ////console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "get_ycsxInfo2":
        (async () => {
          ////console.log(DATA);
          let checkkq = "OK";
          let setpdQuery = `SELECT P400.CODE_50, P400.G_CODE, M100.G_NAME, P400.PROD_REQUEST_DATE, P400.PROD_REQUEST_NO, P400.PROD_REQUEST_QTY, M100.PROD_MODEL, P400.PL_HANG FROM P400 JOIN M100 ON (P400.G_CODE = M100.G_CODE) WHERE P400.CTR_CD='${DATA.CTR_CD}' AND P400.PROD_REQUEST_NO='${DATA.ycsxno}'`;
          //////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "get_cavityAmazon":
        (async () => {
          ////console.log(DATA);
          let checkkq = "OK";
          let setpdQuery = `SELECT TOP 1 CAVITY_PRINT FROM BOM_AMAZONE LEFT JOIN DESIGN_AMAZONE ON (BOM_AMAZONE.G_CODE_MAU = DESIGN_AMAZONE.G_CODE_MAU AND  BOM_AMAZONE.DOITUONG_NO = DESIGN_AMAZONE.DOITUONG_NO) WHERE BOM_AMAZONE.CTR_CD='${DATA.CTR_CD}' AND BOM_AMAZONE.G_CODE='${DATA.g_code}'`;
          //////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "insertData_Amazon":
        (async () => {
          ////console.log(DATA);
          let checkkq = "OK";
          let setpdQuery = `INSERT INTO AMAZONE_DATA (CTR_CD,G_CODE,PROD_REQUEST_NO,NO_IN,ROW_NO,DATA_1,DATA_2,DATA_3,DATA_4,PRINT_STATUS,INLAI_COUNT,REMARK,INS_DATE,INS_EMPL,UPD_DATE,UPD_EMPL) VALUES ('${DATA.CTR_CD}','${DATA.G_CODE}','${DATA.PROD_REQUEST_NO}','${DATA.NO_IN}','${DATA.ROW_NO}','${DATA.DATA_1}','${DATA.DATA_2}','${DATA.DATA_3}','${DATA.DATA_4}','${DATA.PRINT_STATUS}','${DATA.INLAI_COUNT}','${DATA.REMARK}',GETDATE(),'${DATA.INS_EMPL}',GETDATE(),'${DATA.INS_EMPL}')`;
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "insertData_Amazon_SuperFast":
        (async () => {
          ////console.log(DATA);
          let checkkq = "OK";
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let uploadAmazonData = DATA.AMZDATA;
          let sql_insert_string = `INSERT INTO AMAZONE_DATA (CTR_CD,G_CODE,PROD_REQUEST_NO,NO_IN,ROW_NO,DATA_1,DATA_2,DATA_3,DATA_4,PRINT_STATUS,INLAI_COUNT,REMARK,INS_DATE,INS_EMPL,UPD_DATE,UPD_EMPL) VALUES `;
          for (let i = 0; i < uploadAmazonData.length; i++) {
            sql_insert_string += `('${DATA.CTR_CD}','${uploadAmazonData[i].G_CODE}','${uploadAmazonData[i].PROD_REQUEST_NO}','${uploadAmazonData[i].NO_IN}','${uploadAmazonData[i].ROW_NO}','${uploadAmazonData[i].DATA1}','${uploadAmazonData[i].DATA2}','','','OK','${uploadAmazonData[i].INLAI_COUNT}','${uploadAmazonData[i].REMARK}',GETDATE(),'${EMPL_NO}',GETDATE(),'${EMPL_NO}'),`;
          }
          sql_insert_string = sql_insert_string.substring(
            0,
            sql_insert_string.length - 1
          );
          let setpdQuery = `
          BEGIN TRANSACTION;
          BEGIN TRY
          ${sql_insert_string} 
          COMMIT;           
          END TRY
          BEGIN CATCH
          ROLLBACK;
          PRINT 'Co Loi: ' + ERROR_MESSAGE();
          END CATCH
          `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "traPOFullCMS": //chua update CTR_CD
        (async () => {
          ////console.log(DATA);
          let checkkq = "OK";
          let condition = " WHERE 1=1 ";
          if (DATA.codeSearch !== "") {
            condition += ` AND TONKHOFULL.G_NAME LIKE '%${DATA.codeSearch}%'`;
          }
          if (DATA.allcode !== false) {
            condition += ` AND PO_TABLE_1.PO_BALANCE >0 `;
          }
          let setpdQuery = `WITH POTB AS (
    SELECT CTR_CD, G_CODE, SUM(PO_QTY) AS PO_QTY FROM ZTBPOTable GROUP BY CTR_CD, G_CODE
),
DLTB AS (
   SELECT CTR_CD, G_CODE, SUM(DELIVERY_QTY) AS DELIVERY_QTY FROM ZTBDelivery GROUP BY CTR_CD, G_CODE
),
PO_TABLE_1 AS (
    SELECT 
        POTB.G_CODE, 
        POTB.PO_QTY, 
        isnull(DLTB.DELIVERY_QTY,0) AS TOTAL_DELIVERED, 
        (POTB.PO_QTY - isnull(DLTB.DELIVERY_QTY,0)) AS PO_BALANCE 
    FROM POTB LEFT JOIN DLTB ON POTB.CTR_CD = DLTB.CTR_CD AND POTB.G_CODE = DLTB.G_CODE    
),
THANHPHAM AS (
    SELECT 
        Product_MaVach, 
        ISNULL([IN], 0) AS NHAPKHO, 
        ISNULL([OUT], 0) AS XUATKHO, 
        (ISNULL([IN], 0) - ISNULL([OUT], 0)) AS TONKHO 
    FROM (
        SELECT 
            Product_Mavach, 
            IO_Type, 
            IO_Qty 
        FROM 
            tbl_InputOutput
    ) AS SourceTable 
    PIVOT (
        SUM(IO_Qty) FOR IO_Type IN ([IN], [OUT])
    ) AS PivotTable
),
TONKIEM AS (
    SELECT 
        ZTB_WAIT_INSPECT.G_CODE,         
        SUM(INSPECT_BALANCE_QTY) AS INSPECT_BALANCE_QTY, 
        SUM(WAIT_CS_QTY) AS WAIT_CS_QTY, 
        SUM(WAIT_SORTING_RMA) AS WAIT_SORTING_RMA, 
        SUM(
            INSPECT_BALANCE_QTY + WAIT_CS_QTY + WAIT_SORTING_RMA
        ) AS TOTAL_WAIT 
    FROM  ZTB_WAIT_INSPECT
    WHERE 
        UPDATE_DATE = CONVERT(date, GETDATE()) 
        AND CALAMVIEC = 'DEM' 
    GROUP BY 
        ZTB_WAIT_INSPECT.G_CODE        
),
BTP AS (
    SELECT 
        ZTB_HALF_GOODS.G_CODE,
        SUM(BTP_QTY_EA) AS BTP_QTY_EA 
    FROM 
        ZTB_HALF_GOODS 
    WHERE 
        UPDATE_DATE = CONVERT(date, GETDATE()) 
    GROUP BY 
        ZTB_HALF_GOODS.G_CODE 
),
tbl_Block_table2 AS (
    SELECT 
        Product_MaVach, 
        SUM(Block_Qty) AS Block_Qty 
    FROM 
        tbl_Block2 
    GROUP BY 
        Product_MaVach
),
TONKHOFULL AS (
    SELECT 
        M100.G_CODE, 
        M100.G_NAME, 
        M100.G_NAME_KD, 
        ISNULL(TONKIEM.INSPECT_BALANCE_QTY, 0) AS CHO_KIEM, 
        ISNULL(TONKIEM.WAIT_CS_QTY, 0) AS CHO_CS_CHECK, 
        ISNULL(TONKIEM.WAIT_SORTING_RMA, 0) AS CHO_KIEM_RMA, 
        ISNULL(TONKIEM.TOTAL_WAIT, 0) AS TONG_TON_KIEM, 
        ISNULL(BTP.BTP_QTY_EA, 0) AS BTP, 
        ISNULL(THANHPHAM.TONKHO, 0) AS TON_TP, 
        ISNULL(tbl_Block_table2.Block_Qty, 0) AS BLOCK_QTY, 
        (ISNULL(TONKIEM.TOTAL_WAIT, 0) + ISNULL(BTP.BTP_QTY_EA, 0) + ISNULL(THANHPHAM.TONKHO, 0) - ISNULL(tbl_Block_table2.Block_Qty, 0)) AS GRAND_TOTAL_STOCK 
    FROM 
        M100 
        LEFT JOIN THANHPHAM ON (
            THANHPHAM.Product_MaVach = M100.G_CODE
        ) 
        LEFT JOIN TONKIEM ON (
            M100.G_CODE = TONKIEM.G_CODE
        ) 
        LEFT JOIN tbl_Block_table2 ON (
            tbl_Block_table2.Product_MaVach = M100.G_CODE
        ) 
        LEFT JOIN BTP ON (
            BTP.G_CODE = M100.G_CODE
        )
)
SELECT 
    PO_TABLE_1.G_CODE, 
    TONKHOFULL.G_NAME, 
    TONKHOFULL.G_NAME_KD, 
    PO_TABLE_1.PO_QTY, 
    TOTAL_DELIVERED, 
    PO_TABLE_1.PO_BALANCE, 
    TONKHOFULL.CHO_KIEM, 
    TONKHOFULL.CHO_CS_CHECK, 
    TONKHOFULL.CHO_KIEM_RMA, 
    TONKHOFULL.TONG_TON_KIEM, 
    TONKHOFULL.BTP, 
    TONKHOFULL.TON_TP, 
    TONKHOFULL.BLOCK_QTY, 
    TONKHOFULL.GRAND_TOTAL_STOCK, 
    (TONKHOFULL.GRAND_TOTAL_STOCK - PO_TABLE_1.PO_BALANCE) AS THUA_THIEU 
FROM 
    PO_TABLE_1 
    LEFT JOIN TONKHOFULL ON TONKHOFULL.G_CODE = PO_TABLE_1.G_CODE  
          ${condition}`;
          //////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          ////console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "traPOFullCMS_New": //chua update CTR_CD
        (async () => {
          ////console.log(DATA);
          let checkkq = "OK";
          let condition = " WHERE 1=1 ";
          if (DATA.codeSearch !== "") {
            condition += ` AND TONKHOFULL.G_NAME LIKE '%${DATA.codeSearch}%'`;
          }
          if (DATA.allcode !== false) {
            condition += ` AND PO_TABLE_1.PO_BALANCE >0 `;
          }
          let setpdQuery = `WITH POTB AS (
    SELECT CTR_CD, G_CODE, SUM(PO_QTY) AS PO_QTY FROM ZTBPOTable GROUP BY CTR_CD, G_CODE
),
DLTB AS (
   SELECT CTR_CD, G_CODE, SUM(DELIVERY_QTY) AS DELIVERY_QTY FROM ZTBDelivery GROUP BY CTR_CD, G_CODE
),
PO_TABLE_1 AS (
    SELECT 
        POTB.G_CODE, 
        POTB.PO_QTY, 
        isnull(DLTB.DELIVERY_QTY,0) AS TOTAL_DELIVERED, 
        (POTB.PO_QTY - isnull(DLTB.DELIVERY_QTY,0)) AS PO_BALANCE 
    FROM POTB LEFT JOIN DLTB ON POTB.CTR_CD = DLTB.CTR_CD AND POTB.G_CODE = DLTB.G_CODE    
),
THANHPHAM AS (
    SELECT 
        Product_MaVach, 
        ISNULL([IN], 0) AS NHAPKHO, 
        ISNULL([OUT], 0) AS XUATKHO, 
        (ISNULL([IN], 0) - ISNULL([OUT], 0)) AS TONKHO 
    FROM (
        SELECT 
            Product_Mavach, 
            IO_Type, 
            IO_Qty 
        FROM 
            tbl_InputOutput
    ) AS SourceTable 
    PIVOT (
        SUM(IO_Qty) FOR IO_Type IN ([IN], [OUT])
    ) AS PivotTable
),
TONKIEM AS (
    SELECT 
        ZTB_WAIT_INSPECT.G_CODE,         
        SUM(INSPECT_BALANCE_QTY) AS INSPECT_BALANCE_QTY, 
        SUM(WAIT_CS_QTY) AS WAIT_CS_QTY, 
        SUM(WAIT_SORTING_RMA) AS WAIT_SORTING_RMA, 
        SUM(
            INSPECT_BALANCE_QTY + WAIT_CS_QTY + WAIT_SORTING_RMA
        ) AS TOTAL_WAIT 
    FROM  ZTB_WAIT_INSPECT
    WHERE 
        UPDATE_DATE = CONVERT(date, GETDATE()) 
        AND CALAMVIEC = 'DEM' 
    GROUP BY 
        ZTB_WAIT_INSPECT.G_CODE        
),
TONKIEM_NEW AS
(
SELECT CTR_CD, G_CODE, SUM(INPUT_QTY_EA) AS INSPECT_BALANCE_QTY FROM ZTBINSPECTINPUTTB WHERE INSPECT_YN='Y' AND P400_YN='Y' GROUP BY CTR_CD, G_CODE
),
BTP AS (
    SELECT 
        ZTB_HALF_GOODS.G_CODE,
        SUM(BTP_QTY_EA) AS BTP_QTY_EA 
    FROM 
        ZTB_HALF_GOODS 
    WHERE 
        UPDATE_DATE = CONVERT(date, GETDATE()) 
    GROUP BY 
        ZTB_HALF_GOODS.G_CODE 
),
tbl_Block_table2 AS (
    SELECT 
        Product_MaVach, 
        SUM(Block_Qty) AS Block_Qty 
    FROM 
        tbl_Block2 
    GROUP BY 
        Product_MaVach
),
TONKHOFULL AS (
    SELECT 
        M100.G_CODE, 
        M100.G_NAME, 
        M100.USE_YN,
        M100.G_NAME_KD, 
        ISNULL(TONKIEM_NEW.INSPECT_BALANCE_QTY, 0) AS CHO_KIEM, 
        ISNULL(TONKIEM.WAIT_CS_QTY, 0) AS CHO_CS_CHECK, 
        ISNULL(TONKIEM.WAIT_SORTING_RMA, 0) AS CHO_KIEM_RMA, 
        (ISNULL(TONKIEM_NEW.INSPECT_BALANCE_QTY, 0) + ISNULL(TONKIEM.WAIT_CS_QTY, 0) + ISNULL(TONKIEM.WAIT_SORTING_RMA, 0)) AS TONG_TON_KIEM, 
        ISNULL(M100.BTP_QTY, 0) AS BTP, 
        ISNULL(THANHPHAM.TONKHO, 0) AS TON_TP, 
        ISNULL(tbl_Block_table2.Block_Qty, 0) AS BLOCK_QTY, 
        (ISNULL(TONKIEM_NEW.INSPECT_BALANCE_QTY, 0) + ISNULL(TONKIEM.WAIT_CS_QTY, 0) + ISNULL(TONKIEM.WAIT_SORTING_RMA, 0) + ISNULL(M100.BTP_QTY, 0) + ISNULL(THANHPHAM.TONKHO, 0) - ISNULL(tbl_Block_table2.Block_Qty, 0)) AS GRAND_TOTAL_STOCK 
    FROM 
        M100 
        LEFT JOIN THANHPHAM ON (
            THANHPHAM.Product_MaVach = M100.G_CODE
        ) 
        LEFT JOIN TONKIEM ON (
            M100.G_CODE = TONKIEM.G_CODE
        ) 
		LEFT JOIN TONKIEM_NEW ON (
            M100.G_CODE = TONKIEM_NEW.G_CODE
        ) 
        LEFT JOIN tbl_Block_table2 ON (
            tbl_Block_table2.Product_MaVach = M100.G_CODE
        ) 
        LEFT JOIN BTP ON (
            BTP.G_CODE = M100.G_CODE
        )
)
SELECT 
    PO_TABLE_1.G_CODE, 
    TONKHOFULL.G_NAME, 
    TONKHOFULL.G_NAME_KD, 
    PO_TABLE_1.PO_QTY, 
    TOTAL_DELIVERED, 
    PO_TABLE_1.PO_BALANCE, 
    TONKHOFULL.CHO_KIEM, 
    TONKHOFULL.CHO_CS_CHECK, 
    TONKHOFULL.CHO_KIEM_RMA, 
    TONKHOFULL.TONG_TON_KIEM, 
    TONKHOFULL.BTP, 
    TONKHOFULL.TON_TP, 
    TONKHOFULL.BLOCK_QTY, 
    TONKHOFULL.GRAND_TOTAL_STOCK, 
    (TONKHOFULL.GRAND_TOTAL_STOCK - PO_TABLE_1.PO_BALANCE) AS THUA_THIEU ,
    TONKHOFULL.USE_YN
FROM 
    PO_TABLE_1 
    LEFT JOIN TONKHOFULL ON TONKHOFULL.G_CODE = PO_TABLE_1.G_CODE  
          ${condition}`;
          //////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          ////console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "traPOFullCMS_New_bk": //chua update CTR_CD
        (async () => {
          ////console.log(DATA);
          let checkkq = "OK";
          let condition = " WHERE 1=1 ";
          if (DATA.codeSearch !== "") {
            condition += ` AND TONKHOFULL.G_NAME LIKE '%${DATA.codeSearch}%'`;
          }
          if (DATA.allcode !== false) {
            condition += ` AND PO_TABLE_1.PO_BALANCE >0 `;
          }
          let setpdQuery = `WITH POTB AS (
    SELECT CTR_CD, G_CODE, SUM(PO_QTY) AS PO_QTY FROM ZTBPOTable GROUP BY CTR_CD, G_CODE
),
DLTB AS (
   SELECT CTR_CD, G_CODE, SUM(DELIVERY_QTY) AS DELIVERY_QTY FROM ZTBDelivery GROUP BY CTR_CD, G_CODE
),
PO_TABLE_1 AS (
    SELECT 
        POTB.G_CODE, 
        POTB.PO_QTY, 
        isnull(DLTB.DELIVERY_QTY,0) AS TOTAL_DELIVERED, 
        (POTB.PO_QTY - isnull(DLTB.DELIVERY_QTY,0)) AS PO_BALANCE 
    FROM POTB LEFT JOIN DLTB ON POTB.CTR_CD = DLTB.CTR_CD AND POTB.G_CODE = DLTB.G_CODE    
),
THANHPHAM AS (
    SELECT 
        Product_MaVach, 
        ISNULL([IN], 0) AS NHAPKHO, 
        ISNULL([OUT], 0) AS XUATKHO, 
        (ISNULL([IN], 0) - ISNULL([OUT], 0)) AS TONKHO 
    FROM (
        SELECT 
            Product_Mavach, 
            IO_Type, 
            IO_Qty 
        FROM 
            tbl_InputOutput
    ) AS SourceTable 
    PIVOT (
        SUM(IO_Qty) FOR IO_Type IN ([IN], [OUT])
    ) AS PivotTable
),
tbl_Block_table2 AS (
    SELECT 
        Product_MaVach, 
        SUM(Block_Qty) AS Block_Qty 
    FROM 
        tbl_Block2 
    GROUP BY 
        Product_MaVach
),
TONKHOFULL AS (
    SELECT 
        M100.G_CODE, 
        M100.G_NAME, 
        M100.USE_YN,
        M100.G_NAME_KD, 
        M100.TONKIEM_QTY AS CHO_KIEM, 
        0 AS CHO_CS_CHECK, 
        0 AS CHO_KIEM_RMA, 
        M100.TONKIEM_QTY AS TONG_TON_KIEM, 
        ISNULL(M100.BTP_QTY, 0) AS BTP, 
        ISNULL(THANHPHAM.TONKHO, 0) AS TON_TP, 
        ISNULL(tbl_Block_table2.Block_Qty, 0) AS BLOCK_QTY, 
        (M100.TONKIEM_QTY + ISNULL(M100.BTP_QTY, 0) + ISNULL(THANHPHAM.TONKHO, 0) - ISNULL(tbl_Block_table2.Block_Qty, 0)) AS GRAND_TOTAL_STOCK 
    FROM 
        M100 
        LEFT JOIN THANHPHAM ON (
            THANHPHAM.Product_MaVach = M100.G_CODE
        )        
        LEFT JOIN tbl_Block_table2 ON (
            tbl_Block_table2.Product_MaVach = M100.G_CODE
        )       
)
SELECT 
    PO_TABLE_1.G_CODE, 
    TONKHOFULL.G_NAME, 
    TONKHOFULL.G_NAME_KD, 
    PO_TABLE_1.PO_QTY, 
    TOTAL_DELIVERED, 
    PO_TABLE_1.PO_BALANCE, 
    TONKHOFULL.CHO_KIEM, 
    TONKHOFULL.CHO_CS_CHECK, 
    TONKHOFULL.CHO_KIEM_RMA, 
    TONKHOFULL.TONG_TON_KIEM, 
    TONKHOFULL.BTP, 
    TONKHOFULL.TON_TP, 
    TONKHOFULL.BLOCK_QTY, 
    TONKHOFULL.GRAND_TOTAL_STOCK, 
    (TONKHOFULL.GRAND_TOTAL_STOCK - PO_TABLE_1.PO_BALANCE) AS THUA_THIEU ,
    TONKHOFULL.USE_YN
FROM 
    PO_TABLE_1 
    LEFT JOIN TONKHOFULL ON TONKHOFULL.G_CODE = PO_TABLE_1.G_CODE
          ${condition}`;
          //////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          ////console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "traPOFullCMS2":
        (async () => {
          ////console.log(DATA);
          let checkkq = "OK";
          let condition = " WHERE 1=1 ";
          if (DATA.codeSearch !== "") {
            condition += ` AND TONKHOFULL.G_NAME LIKE ''%${DATA.codeSearch}%''`;
          }
          if (DATA.allcode !== false) {
            condition += ` AND PO_TABLE_1.PO_BALANCE >0 `;
          }
          let startdate = moment().add(-7, "month").format("YYYY-MM-01");
          let enddate = moment().add(0, "day").format("YYYY-MM-DD");
          let setpdQuery = `
          DECLARE @StartDate DATE = '${startdate}'; -- Thay đổi start date tại đây
DECLARE @EndDate DATE = '${enddate}'; -- Thay đổi end date tại đây
DECLARE @CurrentDate DATE = @StartDate;
DECLARE @str1 VARCHAR(MAX) = '';
WHILE @CurrentDate <= @EndDate
BEGIN
    SET  @str1 =  @str1 + 'ISNULL([' + FORMAT(@CurrentDate, 'yyyy_MM') + '],0) + ';
    SET @CurrentDate = DATEADD(MONTH, 1, @CurrentDate);
END
-- Xóa dấu phẩy cuối cùng
SET  @str1 = LEFT( @str1, LEN( @str1) - 1);
SET @CurrentDate = @StartDate;
DECLARE @ttmonth int;
SET @ttmonth= 0;
WHILE @CurrentDate <= @EndDate
BEGIN
SET @CurrentDate = DATEADD(MONTH, 1, @CurrentDate);
SET  @ttmonth += 1;   
END
SET @CurrentDate = @StartDate;
DECLARE @str2 VARCHAR(MAX) = '';
DECLARE @stt int, @temptt int;
SET @stt= 0;
SET @temptt = 0;
WHILE @CurrentDate <= @EndDate
BEGIN
	SET @temptt = @ttmonth - @stt;
    SET  @str2 =  @str2 + 'ISNULL([' + FORMAT(@CurrentDate, 'yyyy_MM') + '],0) AS M_'+CAST(@temptt as varchar)+', ';
    SET @CurrentDate = DATEADD(MONTH, 1, @CurrentDate);
	SET @stt =  @stt + 1;
END
-- Xóa dấu phẩy cuối cùng
SET  @str2 = LEFT( @str2, LEN( @str2) - 1);
SET @CurrentDate = @StartDate;
DECLARE @str3 VARCHAR(MAX) = '';
WHILE @CurrentDate <= @EndDate
BEGIN
    SET  @str3 =  @str3 + '[' + FORMAT(@CurrentDate, 'yyyy_MM')+'], ';
    SET @CurrentDate = DATEADD(MONTH, 1, @CurrentDate);
END
-- Xóa dấu phẩy cuối cùng
SET  @str3 = LEFT( @str3, LEN( @str3) - 1);
SET @CurrentDate = @StartDate;
DECLARE @str4 VARCHAR(MAX) = '';
DECLARE @stt2 int, @temptt2 int;
SET @stt2= 0;
SET @temptt2 = 0;
WHILE @CurrentDate <= @EndDate
BEGIN
	SET @temptt2 = @ttmonth - @stt2;
    SET  @str4 =  @str4 + 'ISNULL([M_' + CAST(@temptt2 as varchar) + '],0) AS M_'+CAST(@temptt2 as varchar)+', ';
    SET @CurrentDate = DATEADD(MONTH, 1, @CurrentDate);
	SET @stt2 =  @stt2 + 1;
END
print(@str2)
declare @query varchar(max) 
select 
@query = '
SELECT 
          PO_TABLE_1.G_CODE, 
          TONKHOFULL.G_NAME, 
          TONKHOFULL.G_NAME_KD, 
		  '+@str4+'
          PO_TABLE_1.PO_QTY, 
          TOTAL_DELIVERED, 
          PO_TABLE_1.PO_BALANCE, 
          TONKHOFULL.CHO_KIEM, 
          TONKHOFULL.CHO_CS_CHECK, 
          TONKHOFULL.CHO_KIEM_RMA, 
          TONKHOFULL.TONG_TON_KIEM, 
          TONKHOFULL.BTP, 
          TONKHOFULL.TON_TP, 
          TONKHOFULL.BLOCK_QTY, 
          TONKHOFULL.GRAND_TOTAL_STOCK, 
          (
            TONKHOFULL.GRAND_TOTAL_STOCK - PO_TABLE_1.PO_BALANCE
          ) AS THUA_THIEU, 
          isnull(YCSXBLTB.YCSX_BALANCE, 0) AS YCSX_BALANCE, 
          isnull(YCSXBLTB.YCSX_QTY, 0) AS YCSX_QTY, 
          isnull(YCSXBLTB.KETQUASX, 0) AS KETQUASX, 
          isnull(YCSXBLTB.NHAPKHO, 0) AS NHAPKHO 
        FROM 
          (
            SELECT 
              CTR_CD,
              G_CODE, 
              SUM(PO_QTY) AS PO_QTY, 
              SUM(TOTAL_DELIVERED) AS TOTAL_DELIVERED, 
              SUM(PO_BALANCE) AS PO_BALANCE 
            FROM 
              (
                SELECT 
                  AA.CTR_CD,
                  AA.G_CODE, 
                  ZTBPOTable.PO_QTY, 
                  AA.TotalDelivered as TOTAL_DELIVERED, 
                  (
                    ZTBPOTable.PO_QTY - AA.TotalDelivered
                  ) As PO_BALANCE 
                FROM 
                  (
                    SELECT 
                      ZTBPOTable.CTR_CD,
                      ZTBPOTable.EMPL_NO, 
                      ZTBPOTable.CUST_CD, 
                      ZTBPOTable.G_CODE, 
                      ZTBPOTable.PO_NO, 
                      isnull(
                        SUM(ZTBDelivery.DELIVERY_QTY), 
                        0
                      ) AS TotalDelivered 
                    FROM 
                      ZTBPOTable 
                      LEFT JOIN ZTBDelivery ON (
                        ZTBDelivery.CTR_CD = ZTBPOTable.CTR_CD 
                        AND ZTBDelivery.CUST_CD = ZTBPOTable.CUST_CD 
                        AND ZTBDelivery.G_CODE = ZTBPOTable.G_CODE 
                        AND ZTBDelivery.PO_NO = ZTBPOTable.PO_NO
                      ) 
                    GROUP BY 
                      ZTBPOTable.CTR_CD, 
                      ZTBPOTable.EMPL_NO, 
                      ZTBPOTable.G_CODE, 
                      ZTBPOTable.CUST_CD, 
                      ZTBPOTable.PO_NO
                  ) AS AA 
                  LEFT JOIN ZTBPOTable ON (
                    AA.CTR_CD = ZTBPOTable.CTR_CD
                    AND AA.CUST_CD = ZTBPOTable.CUST_CD 
                    AND AA.G_CODE = ZTBPOTable.G_CODE 
                    AND AA.PO_NO = ZTBPOTable.PO_NO
                  )
              ) AS PO_BALANCE_TABLE 
            GROUP BY 
              CTR_CD,
              G_CODE
          ) AS PO_TABLE_1 
          LEFT JOIN (
            SELECT 
              M100.CTR_CD,
              M100.G_CODE, 
              M100.G_NAME, 
              M100.G_NAME_KD, 
              isnull(TONKIEM.INSPECT_BALANCE_QTY, 0) AS CHO_KIEM, 
              isnull(TONKIEM.WAIT_CS_QTY, 0) AS CHO_CS_CHECK, 
              isnull(TONKIEM.WAIT_SORTING_RMA, 0) CHO_KIEM_RMA, 
              isnull(TONKIEM.TOTAL_WAIT, 0) AS TONG_TON_KIEM, 
              isnull(BTP.BTP_QTY_EA, 0) AS BTP, 
              isnull(THANHPHAM.STOCK, 0) AS TON_TP, 
              isnull(THANHPHAM.BLOCK_QTY, 0) AS BLOCK_QTY, 
              (
                isnull(TONKIEM.TOTAL_WAIT, 0) + isnull(BTP.BTP_QTY_EA, 0)+ isnull(THANHPHAM.STOCK, 0) - isnull(THANHPHAM.BLOCK_QTY, 0)
              ) AS GRAND_TOTAL_STOCK 
            FROM 
              M100 
              LEFT JOIN (
            SELECT  AA.CTR_CD, AA.G_CODE, M100.G_NAME, M100.G_NAME_KD,M100.PROD_TYPE,  AA.STOCK, AA.BLOCK_QTY, (AA.STOCK+ AA.BLOCK_QTY) AS TOTAL_STOCK FROM 
            (
            SELECT CTR_CD, G_CODE, SUM(CASE WHEN STATUS=''N'' THEN I660.IN_QTY ELSE 0 END) AS STOCK,SUM(CASE WHEN STATUS=''B'' THEN I660.IN_QTY ELSE 0 END) AS BLOCK_QTY FROM I660 WHERE USE_YN =''Y''  AND (I660.REMARK is null OR  I660.REMARK<> ''Pending Huy ton'')GROUP BY CTR_CD, G_CODE
            ) AS AA
            LEFT JOIN M100 ON (M100.CTR_CD = AA.CTR_CD AND M100.G_CODE = AA.G_CODE)        
              ) AS THANHPHAM ON (
                THANHPHAM.CTR_CD = M100.CTR_CD
                AND THANHPHAM.G_CODE = M100.G_CODE
              ) 
              LEFT JOIN (
                SELECT 
                  ZTB_WAIT_INSPECT.CTR_CD,
                  ZTB_WAIT_INSPECT.G_CODE, 
                  M100.G_NAME, 
                  M100.G_NAME_KD, 
                  SUM(INSPECT_BALANCE_QTY) AS INSPECT_BALANCE_QTY, 
                  SUM(WAIT_CS_QTY) AS WAIT_CS_QTY, 
                  SUM(WAIT_SORTING_RMA) AS WAIT_SORTING_RMA, 
                  SUM(
                    INSPECT_BALANCE_QTY + WAIT_CS_QTY + WAIT_SORTING_RMA
                  ) AS TOTAL_WAIT 
                FROM 
                  ZTB_WAIT_INSPECT 
                  JOIN M100 ON (
                    M100.CTR_CD = ZTB_WAIT_INSPECT.CTR_CD
                    AND M100.G_CODE = ZTB_WAIT_INSPECT.G_CODE
                  ) 
                WHERE 
                  UPDATE_DATE = CONVERT(
                    date, 
                    GETDATE()
                  ) 
                  AND CALAMVIEC = ''DEM'' 
                GROUP BY 
                  ZTB_WAIT_INSPECT.CTR_CD,
                  ZTB_WAIT_INSPECT.G_CODE, 
                  M100.G_NAME, 
                  M100.G_NAME_KD
              ) AS TONKIEM ON (
                M100.CTR_CD = TONKIEM.CTR_CD
                AND M100.G_CODE = TONKIEM.G_CODE
              )             
              LEFT JOIN (
                SELECT 
                  ZTB_HALF_GOODS.CTR_CD,
                  ZTB_HALF_GOODS.G_CODE, 
                  M100.G_NAME, 
                  SUM(BTP_QTY_EA) AS BTP_QTY_EA 
                FROM 
                  ZTB_HALF_GOODS 
                  JOIN M100 ON (
                    M100.CTR_CD = ZTB_HALF_GOODS.CTR_CD
                    AND M100.G_CODE = ZTB_HALF_GOODS.G_CODE
                  ) 
                WHERE 
                  UPDATE_DATE = CONVERT(
                    date, 
                    GETDATE()
                  ) 
                GROUP BY 
                  ZTB_HALF_GOODS.CTR_CD,
                  ZTB_HALF_GOODS.G_CODE, 
                  M100.G_NAME
              ) AS BTP ON (
                BTP.CTR_CD = THANHPHAM.CTR_CD
                AND BTP.G_CODE = THANHPHAM.G_CODE
              )
          ) AS TONKHOFULL ON (
            TONKHOFULL.CTR_CD = PO_TABLE_1.CTR_CD
            AND TONKHOFULL.G_CODE = PO_TABLE_1.G_CODE
          ) 
          LEFT JOIN (
            SELECT 
              P400.CTR_CD,
              P400.G_CODE, 
              SUM(P400.PROD_REQUEST_QTY) AS YCSX_QTY, 
              SUM(
                isnull(BB.KETQUASX, 0)
              ) AS KETQUASX, 
              (
                SUM(P400.PROD_REQUEST_QTY) - SUM(
                  isnull(BB.KETQUASX, 0)
                )
              ) AS YCSX_BALANCE, 
              SUM(
                isnull(INS_OUTPUT_TB.INS_OUTPUT, 0)
              ) AS NHAPKHO 
            FROM 
              P400 
              LEFT JOIN (
                SELECT 
                  CTR_CD,
                  PROD_REQUEST_NO, 
                  SUM(OUTPUT_QTY_EA) AS INS_OUTPUT 
                FROM 
                  ZTBINSPECTOUTPUTTB 
                GROUP BY 
                  CTR_CD,
                  PROD_REQUEST_NO
              ) AS INS_OUTPUT_TB ON (
                INS_OUTPUT_TB.CTR_CD = P400.CTR_CD
                AND INS_OUTPUT_TB.PROD_REQUEST_NO = P400.PROD_REQUEST_NO
              ) 
              LEFT JOIN (
                SELECT 
                  ZTB_QLSXPLAN.CTR_CD,
                  ZTB_QLSXPLAN.PROD_REQUEST_NO, 
                  SUM(
                    CASE WHEN ZTB_QLSXPLAN.PROCESS_NUMBER = 1 
                    AND ZTB_QLSXPLAN.STEP = 0 THEN isnull(SX_RESULT, 0) ELSE 0 END
                  ) AS KETQUASX 
                FROM 
                  ZTB_SX_RESULT 
                  LEFT JOIN ZTB_QLSXPLAN ON (
                    ZTB_QLSXPLAN.CTR_CD = ZTB_SX_RESULT.CTR_CD
                    AND ZTB_QLSXPLAN.PLAN_ID = ZTB_SX_RESULT.PLAN_ID
                  ) 
                WHERE 
                  ZTB_QLSXPLAN.STEP = 0 
                GROUP BY 
                  ZTB_QLSXPLAN.CTR_CD,
                  ZTB_QLSXPLAN.PROD_REQUEST_NO
              ) AS BB ON (
                BB.CTR_CD = P400.CTR_CD
                AND BB.PROD_REQUEST_NO = P400.PROD_REQUEST_NO
              ) 
            WHERE 
              P400.CODE_03 <> ''04''
              AND P400.PROD_REQUEST_QTY > INS_OUTPUT_TB.INS_OUTPUT 
              AND PROD_REQUEST_DATE > ''20230101'' 
            GROUP BY 
              P400.CTR_CD,
              P400.G_CODE
          ) AS YCSXBLTB ON (
            YCSXBLTB.CTR_CD = PO_TABLE_1.CTR_CD
            AND YCSXBLTB.G_CODE = PO_TABLE_1.G_CODE
          )
		  LEFT JOIN
		  (
		  SELECT CTR_CD, G_CODE, '+@str2+' FROM 
			(
			SELECT CTR_CD, G_CODE, CONCAT(DEL_YEAR,''_'', DEL_MONTH) AS DEL_YM, TotalDelivered FROM 
			(
			SELECT
			ZTBPOTable.CTR_CD,
			ZTBPOTable.G_CODE,
			YEAR(ZTBDelivery.DELIVERY_DATE) AS DEL_YEAR,
			FORMAT(ZTBDelivery.DELIVERY_DATE,''MM'') AS DEL_MONTH,
			SUM(ZTBDelivery.DELIVERY_QTY) AS TotalDelivered
			FROM 
			ZTBDelivery 
			LEFT JOIN ZTBPOTable ON (
			ZTBDelivery.CTR_CD = ZTBPOTable.CTR_CD 
			AND ZTBDelivery.CUST_CD = ZTBPOTable.CUST_CD 
			AND ZTBDelivery.G_CODE = ZTBPOTable.G_CODE 
			AND ZTBDelivery.PO_NO = ZTBPOTable.PO_NO
			)
			WHERE ZTBDelivery.DELIVERY_DATE BETWEEN '''+CAST(@StartDate as varchar)+''' AND '''+CAST(@EndDate as varchar)+'''
			GROUP BY 
			ZTBPOTable.CTR_CD,
			ZTBPOTable.G_CODE,
			YEAR(ZTBDelivery.DELIVERY_DATE),
			FORMAT(ZTBDelivery.DELIVERY_DATE,''MM'')
			) AS src
			) AS src2
			PIVOT
			(
			 SUM(TotalDelivered)
			 FOR DEL_YM IN ('+@str3+')
			) AS pvtb
		  ) AS LSGH6T
		  ON (LSGH6T.CTR_CD = PO_TABLE_1.CTR_CD AND LSGH6T.G_CODE = PO_TABLE_1.G_CODE)
      ${condition}
      AND PO_TABLE_1.CTR_CD = ''${DATA.CTR_CD}''
'
print(@query)
execute(@query)          
          `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          ////console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "traPOFullCMS2_NEW":
        (async () => {
          ////console.log(DATA);
          let checkkq = "OK";
          let condition = " WHERE 1=1 ";
          if (DATA.codeSearch !== "") {
            condition += ` AND TONKHOFULL.G_NAME LIKE ''%${DATA.codeSearch}%''`;
          }
          if (DATA.allcode !== false) {
            condition += ` AND PO_TABLE_1.PO_BALANCE >0 `;
          }
          let startdate = moment().add(-7, "month").format("YYYY-MM-01");
          let enddate = moment().add(0, "day").format("YYYY-MM-DD");
          let setpdQuery = `
          DECLARE @StartDate DATE = '${startdate}'; -- Thay đổi start date tại đây
DECLARE @EndDate DATE = '${enddate}'; -- Thay đổi end date tại đây
DECLARE @CurrentDate DATE = @StartDate;
DECLARE @str1 VARCHAR(MAX) = '';
WHILE @CurrentDate <= @EndDate
BEGIN
    SET  @str1 =  @str1 + 'ISNULL([' + FORMAT(@CurrentDate, 'yyyy_MM') + '],0) + ';
    SET @CurrentDate = DATEADD(MONTH, 1, @CurrentDate);
END
-- Xóa dấu phẩy cuối cùng
SET  @str1 = LEFT( @str1, LEN( @str1) - 1);
SET @CurrentDate = @StartDate;
DECLARE @ttmonth int;
SET @ttmonth= 0;
WHILE @CurrentDate <= @EndDate
BEGIN
SET @CurrentDate = DATEADD(MONTH, 1, @CurrentDate);
SET  @ttmonth += 1;   
END
SET @CurrentDate = @StartDate;
DECLARE @str2 VARCHAR(MAX) = '';
DECLARE @stt int, @temptt int;
SET @stt= 0;
SET @temptt = 0;
WHILE @CurrentDate <= @EndDate
BEGIN
	SET @temptt = @ttmonth - @stt;
    SET  @str2 =  @str2 + 'ISNULL([' + FORMAT(@CurrentDate, 'yyyy_MM') + '],0) AS M_'+CAST(@temptt as varchar)+', ';
    SET @CurrentDate = DATEADD(MONTH, 1, @CurrentDate);
	SET @stt =  @stt + 1;
END
-- Xóa dấu phẩy cuối cùng
SET  @str2 = LEFT( @str2, LEN( @str2) - 1);
SET @CurrentDate = @StartDate;
DECLARE @str3 VARCHAR(MAX) = '';
WHILE @CurrentDate <= @EndDate
BEGIN
    SET  @str3 =  @str3 + '[' + FORMAT(@CurrentDate, 'yyyy_MM')+'], ';
    SET @CurrentDate = DATEADD(MONTH, 1, @CurrentDate);
END
-- Xóa dấu phẩy cuối cùng
SET  @str3 = LEFT( @str3, LEN( @str3) - 1);
SET @CurrentDate = @StartDate;
DECLARE @str4 VARCHAR(MAX) = '';
DECLARE @stt2 int, @temptt2 int;
SET @stt2= 0;
SET @temptt2 = 0;
WHILE @CurrentDate <= @EndDate
BEGIN
	SET @temptt2 = @ttmonth - @stt2;
    SET  @str4 =  @str4 + 'ISNULL([M_' + CAST(@temptt2 as varchar) + '],0) AS M_'+CAST(@temptt2 as varchar)+', ';
    SET @CurrentDate = DATEADD(MONTH, 1, @CurrentDate);
	SET @stt2 =  @stt2 + 1;
END
print(@str2)
declare @query varchar(max) 
select 
@query = '
SELECT 
          PO_TABLE_1.G_CODE, 
          TONKHOFULL.G_NAME, 
          TONKHOFULL.G_NAME_KD, 
		  '+@str4+'
          PO_TABLE_1.PO_QTY, 
          TOTAL_DELIVERED, 
          PO_TABLE_1.PO_BALANCE, 
          TONKHOFULL.CHO_KIEM, 
          TONKHOFULL.CHO_CS_CHECK, 
          TONKHOFULL.CHO_KIEM_RMA, 
          TONKHOFULL.TONG_TON_KIEM, 
          TONKHOFULL.BTP, 
          TONKHOFULL.TON_TP, 
          TONKHOFULL.BLOCK_QTY, 
          TONKHOFULL.GRAND_TOTAL_STOCK, 
          (
            TONKHOFULL.GRAND_TOTAL_STOCK - PO_TABLE_1.PO_BALANCE
          ) AS THUA_THIEU, 
          isnull(YCSXBLTB.YCSX_BALANCE, 0) AS YCSX_BALANCE, 
          isnull(YCSXBLTB.YCSX_QTY, 0) AS YCSX_QTY, 
          isnull(YCSXBLTB.KETQUASX, 0) AS KETQUASX, 
          isnull(YCSXBLTB.NHAPKHO, 0) AS NHAPKHO 
        FROM 
          (
            SELECT 
              CTR_CD,
              G_CODE, 
              SUM(PO_QTY) AS PO_QTY, 
              SUM(TOTAL_DELIVERED) AS TOTAL_DELIVERED, 
              SUM(PO_BALANCE) AS PO_BALANCE 
            FROM 
              (
                SELECT 
                  AA.CTR_CD,
                  AA.G_CODE, 
                  ZTBPOTable.PO_QTY, 
                  AA.TotalDelivered as TOTAL_DELIVERED, 
                  (
                    ZTBPOTable.PO_QTY - AA.TotalDelivered
                  ) As PO_BALANCE 
                FROM 
                  (
                    SELECT 
                      ZTBPOTable.CTR_CD,
                      ZTBPOTable.EMPL_NO, 
                      ZTBPOTable.CUST_CD, 
                      ZTBPOTable.G_CODE, 
                      ZTBPOTable.PO_NO, 
                      isnull(
                        SUM(ZTBDelivery.DELIVERY_QTY), 
                        0
                      ) AS TotalDelivered 
                    FROM 
                      ZTBPOTable 
                      LEFT JOIN ZTBDelivery ON (
                        ZTBDelivery.CTR_CD = ZTBPOTable.CTR_CD 
                        AND ZTBDelivery.CUST_CD = ZTBPOTable.CUST_CD 
                        AND ZTBDelivery.G_CODE = ZTBPOTable.G_CODE 
                        AND ZTBDelivery.PO_NO = ZTBPOTable.PO_NO
                      ) 
                    GROUP BY 
                      ZTBPOTable.CTR_CD, 
                      ZTBPOTable.EMPL_NO, 
                      ZTBPOTable.G_CODE, 
                      ZTBPOTable.CUST_CD, 
                      ZTBPOTable.PO_NO
                  ) AS AA 
                  LEFT JOIN ZTBPOTable ON (
                    AA.CTR_CD = ZTBPOTable.CTR_CD
                    AND AA.CUST_CD = ZTBPOTable.CUST_CD 
                    AND AA.G_CODE = ZTBPOTable.G_CODE 
                    AND AA.PO_NO = ZTBPOTable.PO_NO
                  )
              ) AS PO_BALANCE_TABLE 
            GROUP BY 
              CTR_CD,
              G_CODE
          ) AS PO_TABLE_1 
          LEFT JOIN (
            SELECT 
              M100.CTR_CD,
              M100.G_CODE, 
              M100.G_NAME, 
              M100.G_NAME_KD, 
              isnull(TONKIEM_NEW.INSPECT_BALANCE_QTY, 0) AS CHO_KIEM, 
              isnull(TONKIEM.WAIT_CS_QTY, 0) AS CHO_CS_CHECK, 
              isnull(TONKIEM.WAIT_SORTING_RMA, 0) CHO_KIEM_RMA, 
              (isnull(TONKIEM_NEW.INSPECT_BALANCE_QTY, 0) + isnull(TONKIEM.WAIT_CS_QTY, 0) + isnull(TONKIEM.WAIT_SORTING_RMA, 0)) AS TONG_TON_KIEM, 
              isnull(BTP.BTP_QTY_EA, 0) AS BTP, 
              isnull(THANHPHAM.STOCK, 0) AS TON_TP, 
              isnull(THANHPHAM.BLOCK_QTY, 0) AS BLOCK_QTY, 
              (
                isnull(TONKIEM_NEW.INSPECT_BALANCE_QTY, 0) + isnull(TONKIEM.WAIT_CS_QTY, 0) + isnull(TONKIEM.WAIT_SORTING_RMA, 0) + isnull(BTP.BTP_QTY_EA, 0)+ isnull(THANHPHAM.STOCK, 0) - isnull(THANHPHAM.BLOCK_QTY, 0)
              ) AS GRAND_TOTAL_STOCK 
            FROM 
              M100 
              LEFT JOIN (
            SELECT  AA.CTR_CD, AA.G_CODE, M100.G_NAME, M100.G_NAME_KD,M100.PROD_TYPE,  AA.STOCK, AA.BLOCK_QTY, (AA.STOCK+ AA.BLOCK_QTY) AS TOTAL_STOCK FROM 
            (
            SELECT CTR_CD, G_CODE, SUM(CASE WHEN STATUS=''N'' THEN I660.IN_QTY ELSE 0 END) AS STOCK,SUM(CASE WHEN STATUS=''B'' THEN I660.IN_QTY ELSE 0 END) AS BLOCK_QTY FROM I660 WHERE USE_YN =''Y'' GROUP BY CTR_CD, G_CODE
            ) AS AA
            LEFT JOIN M100 ON (M100.CTR_CD = AA.CTR_CD AND M100.G_CODE = AA.G_CODE)        
              ) AS THANHPHAM ON (
                THANHPHAM.CTR_CD = M100.CTR_CD
                AND THANHPHAM.G_CODE = M100.G_CODE
              ) 
              LEFT JOIN (
                SELECT 
                  ZTB_WAIT_INSPECT.CTR_CD,
                  ZTB_WAIT_INSPECT.G_CODE, 
                  M100.G_NAME, 
                  M100.G_NAME_KD, 
                  SUM(INSPECT_BALANCE_QTY) AS INSPECT_BALANCE_QTY, 
                  SUM(WAIT_CS_QTY) AS WAIT_CS_QTY, 
                  SUM(WAIT_SORTING_RMA) AS WAIT_SORTING_RMA, 
                  SUM(
                    INSPECT_BALANCE_QTY + WAIT_CS_QTY + WAIT_SORTING_RMA
                  ) AS TOTAL_WAIT 
                FROM 
                  ZTB_WAIT_INSPECT 
                  JOIN M100 ON (
                    M100.CTR_CD = ZTB_WAIT_INSPECT.CTR_CD
                    AND M100.G_CODE = ZTB_WAIT_INSPECT.G_CODE
                  ) 
                WHERE 
                  UPDATE_DATE = CONVERT(
                    date, 
                    GETDATE()
                  ) 
                  AND CALAMVIEC = ''DEM'' 
                GROUP BY 
                  ZTB_WAIT_INSPECT.CTR_CD,
                  ZTB_WAIT_INSPECT.G_CODE, 
                  M100.G_NAME, 
                  M100.G_NAME_KD
              ) AS TONKIEM ON (
                M100.CTR_CD = TONKIEM.CTR_CD
                AND M100.G_CODE = TONKIEM.G_CODE
              )       
              LEFT JOIN (SELECT CTR_CD, G_CODE, SUM(INPUT_QTY_EA) AS INSPECT_BALANCE_QTY FROM ZTBINSPECTINPUTTB WHERE INSPECT_YN=''Y'' AND P400_YN=''Y'' GROUP BY CTR_CD, G_CODE) AS TONKIEM_NEW ON (
                M100.CTR_CD = TONKIEM_NEW.CTR_CD
                AND M100.G_CODE = TONKIEM_NEW.G_CODE
              )       
              
              LEFT JOIN (
                SELECT 
                  ZTB_HALF_GOODS.CTR_CD,
                  ZTB_HALF_GOODS.G_CODE, 
                  M100.G_NAME, 
                  SUM(BTP_QTY_EA) AS BTP_QTY_EA 
                FROM 
                  ZTB_HALF_GOODS 
                  JOIN M100 ON (
                    M100.CTR_CD = ZTB_HALF_GOODS.CTR_CD
                    AND M100.G_CODE = ZTB_HALF_GOODS.G_CODE
                  ) 
                WHERE 
                  UPDATE_DATE = CONVERT(
                    date, 
                    GETDATE()
                  ) 
                GROUP BY 
                  ZTB_HALF_GOODS.CTR_CD,
                  ZTB_HALF_GOODS.G_CODE, 
                  M100.G_NAME
              ) AS BTP ON (
                BTP.CTR_CD = THANHPHAM.CTR_CD
                AND BTP.G_CODE = THANHPHAM.G_CODE
              )
          ) AS TONKHOFULL ON (
            TONKHOFULL.CTR_CD = PO_TABLE_1.CTR_CD
            AND TONKHOFULL.G_CODE = PO_TABLE_1.G_CODE
          ) 
          LEFT JOIN (
            SELECT 
              P400.CTR_CD,
              P400.G_CODE, 
              SUM(P400.PROD_REQUEST_QTY) AS YCSX_QTY, 
              SUM(
                isnull(BB.KETQUASX, 0)
              ) AS KETQUASX, 
              (
                SUM(P400.PROD_REQUEST_QTY) - SUM(
                  isnull(BB.KETQUASX, 0)
                )
              ) AS YCSX_BALANCE, 
              SUM(
                isnull(INS_OUTPUT_TB.INS_OUTPUT, 0)
              ) AS NHAPKHO 
            FROM 
              P400 
              LEFT JOIN (
                SELECT 
                  CTR_CD,
                  PROD_REQUEST_NO, 
                  SUM(OUTPUT_QTY_EA) AS INS_OUTPUT 
                FROM 
                  ZTBINSPECTOUTPUTTB 
                GROUP BY 
                  CTR_CD,
                  PROD_REQUEST_NO
              ) AS INS_OUTPUT_TB ON (
                INS_OUTPUT_TB.CTR_CD = P400.CTR_CD
                AND INS_OUTPUT_TB.PROD_REQUEST_NO = P400.PROD_REQUEST_NO
              ) 
              LEFT JOIN (
                SELECT 
                  ZTB_QLSXPLAN.CTR_CD,
                  ZTB_QLSXPLAN.PROD_REQUEST_NO, 
                  SUM(
                    CASE WHEN ZTB_QLSXPLAN.PROCESS_NUMBER = 1 
                    AND ZTB_QLSXPLAN.STEP = 0 THEN isnull(SX_RESULT, 0) ELSE 0 END
                  ) AS KETQUASX 
                FROM 
                  ZTB_SX_RESULT 
                  LEFT JOIN ZTB_QLSXPLAN ON (
                    ZTB_QLSXPLAN.CTR_CD = ZTB_SX_RESULT.CTR_CD
                    AND ZTB_QLSXPLAN.PLAN_ID = ZTB_SX_RESULT.PLAN_ID
                  ) 
                WHERE 
                  ZTB_QLSXPLAN.STEP = 0 
                GROUP BY 
                  ZTB_QLSXPLAN.CTR_CD,
                  ZTB_QLSXPLAN.PROD_REQUEST_NO
              ) AS BB ON (
                BB.CTR_CD = P400.CTR_CD
                AND BB.PROD_REQUEST_NO = P400.PROD_REQUEST_NO
              ) 
            WHERE 
              P400.CODE_03 <> ''04''
              AND P400.PROD_REQUEST_QTY > INS_OUTPUT_TB.INS_OUTPUT 
              AND PROD_REQUEST_DATE > ''20230101'' 
            GROUP BY 
              P400.CTR_CD,
              P400.G_CODE
          ) AS YCSXBLTB ON (
            YCSXBLTB.CTR_CD = PO_TABLE_1.CTR_CD
            AND YCSXBLTB.G_CODE = PO_TABLE_1.G_CODE
          )
		  LEFT JOIN
		  (
		  SELECT CTR_CD, G_CODE, '+@str2+' FROM 
			(
			SELECT CTR_CD, G_CODE, CONCAT(DEL_YEAR,''_'', DEL_MONTH) AS DEL_YM, TotalDelivered FROM 
			(
			SELECT
			ZTBPOTable.CTR_CD,
			ZTBPOTable.G_CODE,
			YEAR(ZTBDelivery.DELIVERY_DATE) AS DEL_YEAR,
			FORMAT(ZTBDelivery.DELIVERY_DATE,''MM'') AS DEL_MONTH,
			SUM(ZTBDelivery.DELIVERY_QTY) AS TotalDelivered
			FROM 
			ZTBDelivery 
			LEFT JOIN ZTBPOTable ON (
			ZTBDelivery.CTR_CD = ZTBPOTable.CTR_CD 
			AND ZTBDelivery.CUST_CD = ZTBPOTable.CUST_CD 
			AND ZTBDelivery.G_CODE = ZTBPOTable.G_CODE 
			AND ZTBDelivery.PO_NO = ZTBPOTable.PO_NO
			)
			WHERE ZTBDelivery.DELIVERY_DATE BETWEEN '''+CAST(@StartDate as varchar)+''' AND '''+CAST(@EndDate as varchar)+'''
			GROUP BY 
			ZTBPOTable.CTR_CD,
			ZTBPOTable.G_CODE,
			YEAR(ZTBDelivery.DELIVERY_DATE),
			FORMAT(ZTBDelivery.DELIVERY_DATE,''MM'')
			) AS src
			) AS src2
			PIVOT
			(
			 SUM(TotalDelivered)
			 FOR DEL_YM IN ('+@str3+')
			) AS pvtb
		  ) AS LSGH6T
		  ON (LSGH6T.CTR_CD = PO_TABLE_1.CTR_CD AND LSGH6T.G_CODE = PO_TABLE_1.G_CODE)
      ${condition}
      AND PO_TABLE_1.CTR_CD = ''${DATA.CTR_CD}''
'
print(@query)
execute(@query)          
          `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          ////console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "traPOFullKD": //chua update CTR_CD
        (async () => {
          ////console.log(DATA);
          let checkkq = "OK";
          let condition = " WHERE 1=1 ";
          if (DATA.codeSearch !== "") {
            condition += ` AND TONKHOFULL.G_NAME_KD LIKE '%${DATA.codeSearch}%'`;
          }
          if (DATA.allcode !== false) {
            condition += ` AND PO_TABLE_1.PO_BALANCE >0 `;
          }
          let setpdQuery = `
         -- CTE để tính toán tổng số lượng giao hàng và số lượng PO còn lại
WITH POTB AS (
    SELECT CTR_CD, G_CODE, SUM(PO_QTY) AS PO_QTY FROM ZTBPOTable GROUP BY CTR_CD, G_CODE
),
DLTB AS (
   SELECT CTR_CD, G_CODE, SUM(DELIVERY_QTY) AS DELIVERY_QTY FROM ZTBDelivery GROUP BY CTR_CD, G_CODE
),
PO_TABLE_1 AS (
    SELECT 
        POTB.G_CODE, 
        POTB.PO_QTY, 
        isnull(DLTB.DELIVERY_QTY,0) AS TOTAL_DELIVERED, 
        (POTB.PO_QTY - isnull(DLTB.DELIVERY_QTY,0)) AS PO_BALANCE 
    FROM POTB LEFT JOIN DLTB ON POTB.CTR_CD = DLTB.CTR_CD AND POTB.G_CODE = DLTB.G_CODE    
),
-- CTE để tổng hợp dữ liệu từ các bảng kho
CTE_TONKHOFULL AS (
    SELECT 
        M100.G_CODE, 
        M100.G_NAME_KD, 
        ISNULL(TONKIEM.INSPECT_BALANCE_QTY, 0) AS CHO_KIEM, 
        ISNULL(TONKIEM.WAIT_CS_QTY, 0) AS CHO_CS_CHECK, 
        ISNULL(TONKIEM.WAIT_SORTING_RMA, 0) AS CHO_KIEM_RMA, 
        ISNULL(TONKIEM.TOTAL_WAIT, 0) AS TONG_TON_KIEM, 
        ISNULL(BTP.BTP_QTY_EA, 0) AS BTP, 
        ISNULL(THANHPHAM.TONKHO, 0) AS TON_TP, 
        ISNULL(tbl_Block_table2.Block_Qty, 0) AS BLOCK_QTY, 
        (ISNULL(TONKIEM.TOTAL_WAIT, 0) + ISNULL(BTP.BTP_QTY_EA, 0) + ISNULL(THANHPHAM.TONKHO, 0) - ISNULL(tbl_Block_table2.Block_Qty, 0)) AS GRAND_TOTAL_STOCK
    FROM 
        M100
        LEFT JOIN (
            SELECT 
                ZTB_WAIT_INSPECT.G_CODE, 
                SUM(INSPECT_BALANCE_QTY) AS INSPECT_BALANCE_QTY, 
                SUM(WAIT_CS_QTY) AS WAIT_CS_QTY, 
                SUM(WAIT_SORTING_RMA) AS WAIT_SORTING_RMA, 
                SUM(INSPECT_BALANCE_QTY + WAIT_CS_QTY + WAIT_SORTING_RMA) AS TOTAL_WAIT
            FROM 
                ZTB_WAIT_INSPECT
            WHERE 
                UPDATE_DATE = CONVERT(date, GETDATE()) 
                AND CALAMVIEC = 'DEM'
            GROUP BY 
                ZTB_WAIT_INSPECT.G_CODE
        ) AS TONKIEM ON M100.G_CODE = TONKIEM.G_CODE
        LEFT JOIN (
            SELECT 
                Product_MaVach, 
                (ISNULL([IN], 0) - ISNULL([OUT], 0)) AS TONKHO
            FROM (
                SELECT 
                    Product_Mavach, 
                    IO_Type, 
                    SUM(IO_Qty) AS IO_Qty
                FROM 
                    tbl_InputOutput
                GROUP BY 
                    Product_Mavach, IO_Type
            ) AS SourceTable
            PIVOT (
                SUM(IO_Qty) FOR IO_Type IN ([IN], [OUT])
            ) AS PivotTable
        ) AS THANHPHAM ON M100.G_CODE = THANHPHAM.Product_MaVach
        LEFT JOIN (
            SELECT 
                Product_MaVach, 
                SUM(Block_Qty) AS Block_Qty
            FROM 
                tbl_Block2
            GROUP BY 
                Product_MaVach
        ) AS tbl_Block_table2 ON M100.G_CODE = tbl_Block_table2.Product_MaVach
        LEFT JOIN (
            SELECT 
                ZTB_HALF_GOODS.G_CODE, 
                SUM(BTP_QTY_EA) AS BTP_QTY_EA
            FROM 
                ZTB_HALF_GOODS
            WHERE 
                UPDATE_DATE = CONVERT(date, GETDATE())
            GROUP BY 
                ZTB_HALF_GOODS.G_CODE
        ) AS BTP ON M100.G_CODE = BTP.G_CODE
)
-- Truy vấn chính
SELECT 
    TONKHOFULL.G_NAME_KD, 
    SUM(PO_TABLE_1.PO_QTY) AS PO_QTY, 
    SUM(PO_TABLE_1.TOTAL_DELIVERED) AS TOTAL_DELIVERED, 
    SUM(PO_TABLE_1.PO_BALANCE) AS PO_BALANCE, 
    SUM(TONKHOFULL.CHO_KIEM) AS CHO_KIEM, 
    SUM(TONKHOFULL.CHO_CS_CHECK) AS CHO_CS_CHECK, 
    SUM(TONKHOFULL.CHO_KIEM_RMA) AS CHO_KIEM_RMA, 
    SUM(TONKHOFULL.TONG_TON_KIEM) AS TONG_TON_KIEM, 
    SUM(TONKHOFULL.BTP) AS BTP, 
    SUM(TONKHOFULL.TON_TP) AS TON_TP, 
    SUM(TONKHOFULL.BLOCK_QTY) AS BLOCK_QTY, 
    SUM(TONKHOFULL.GRAND_TOTAL_STOCK) AS GRAND_TOTAL_STOCK, 
    SUM(TONKHOFULL.GRAND_TOTAL_STOCK - PO_TABLE_1.PO_BALANCE) AS THUA_THIEU 
FROM 
    PO_TABLE_1
    LEFT JOIN CTE_TONKHOFULL AS TONKHOFULL ON PO_TABLE_1.G_CODE = TONKHOFULL.G_CODE
 ${condition}
GROUP BY 
  TONKHOFULL.G_NAME_KD
          `;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          ////console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "traPOFullKD_NEW": //chua update CTR_CD
        (async () => {
          ////console.log(DATA);
          let checkkq = "OK";
          let condition = " WHERE 1=1 ";
          if (DATA.codeSearch !== "") {
            condition += ` AND TONKHOFULL.G_NAME_KD LIKE '%${DATA.codeSearch}%'`;
          }
          if (DATA.allcode !== false) {
            condition += ` AND PO_TABLE_1.PO_BALANCE >0 `;
          }
          let setpdQuery = `
          -- CTE để tính toán tổng số lượng giao hàng và số lượng PO còn lại
WITH POTB AS (
    SELECT CTR_CD, G_CODE, SUM(PO_QTY) AS PO_QTY FROM ZTBPOTable GROUP BY CTR_CD, G_CODE
),
DLTB AS (
   SELECT CTR_CD, G_CODE, SUM(DELIVERY_QTY) AS DELIVERY_QTY FROM ZTBDelivery GROUP BY CTR_CD, G_CODE
),
PO_TABLE_1 AS (
    SELECT 
        POTB.G_CODE, 
        POTB.PO_QTY, 
        isnull(DLTB.DELIVERY_QTY,0) AS TOTAL_DELIVERED, 
        (POTB.PO_QTY - isnull(DLTB.DELIVERY_QTY,0)) AS PO_BALANCE 
    FROM POTB LEFT JOIN DLTB ON POTB.CTR_CD = DLTB.CTR_CD AND POTB.G_CODE = DLTB.G_CODE    
),
-- CTE để tổng hợp dữ liệu từ các bảng kho
CTE_TONKHOFULL AS (
    SELECT 
        M100.G_CODE, 
        M100.G_NAME_KD, 
        ISNULL(TONKIEM_NEW.INSPECT_BALANCE_QTY, 0) AS CHO_KIEM, 
        ISNULL(TONKIEM.WAIT_CS_QTY, 0) AS CHO_CS_CHECK, 
        ISNULL(TONKIEM.WAIT_SORTING_RMA, 0) AS CHO_KIEM_RMA, 
        (ISNULL(TONKIEM_NEW.INSPECT_BALANCE_QTY, 0) + ISNULL(TONKIEM.WAIT_CS_QTY, 0) + ISNULL(TONKIEM.WAIT_SORTING_RMA, 0)) AS TONG_TON_KIEM, 
        ISNULL(M100.BTP_QTY, 0) AS BTP, 
        ISNULL(THANHPHAM.TONKHO, 0) AS TON_TP, 
        ISNULL(tbl_Block_table2.Block_Qty, 0) AS BLOCK_QTY, 
        (ISNULL(TONKIEM_NEW.INSPECT_BALANCE_QTY, 0) + ISNULL(TONKIEM.WAIT_CS_QTY, 0) + ISNULL(TONKIEM.WAIT_SORTING_RMA, 0) + ISNULL(M100.BTP_QTY, 0) + ISNULL(THANHPHAM.TONKHO, 0) - ISNULL(tbl_Block_table2.Block_Qty, 0)) AS GRAND_TOTAL_STOCK
    FROM 
        M100
        LEFT JOIN (
            SELECT 
                ZTB_WAIT_INSPECT.G_CODE, 
                SUM(INSPECT_BALANCE_QTY) AS INSPECT_BALANCE_QTY, 
                SUM(WAIT_CS_QTY) AS WAIT_CS_QTY, 
                SUM(WAIT_SORTING_RMA) AS WAIT_SORTING_RMA, 
                SUM(INSPECT_BALANCE_QTY + WAIT_CS_QTY + WAIT_SORTING_RMA) AS TOTAL_WAIT
            FROM 
                ZTB_WAIT_INSPECT
            WHERE 
                UPDATE_DATE = CONVERT(date, GETDATE()) 
                AND CALAMVIEC = 'DEM'
            GROUP BY 
                ZTB_WAIT_INSPECT.G_CODE
        ) AS TONKIEM ON M100.G_CODE = TONKIEM.G_CODE
		LEFT JOIN (SELECT CTR_CD, G_CODE, SUM(INPUT_QTY_EA) AS INSPECT_BALANCE_QTY FROM ZTBINSPECTINPUTTB WHERE INSPECT_YN='Y' AND P400_YN='Y' GROUP BY CTR_CD, G_CODE) AS TONKIEM_NEW ON TONKIEM_NEW.G_CODE = M100.G_CODE
        LEFT JOIN (
            SELECT 
                Product_MaVach, 
                (ISNULL([IN], 0) - ISNULL([OUT], 0)) AS TONKHO
            FROM (
                SELECT 
                    Product_Mavach, 
                    IO_Type, 
                    SUM(IO_Qty) AS IO_Qty
                FROM 
                    tbl_InputOutput
                GROUP BY 
                    Product_Mavach, IO_Type
            ) AS SourceTable
            PIVOT (
                SUM(IO_Qty) FOR IO_Type IN ([IN], [OUT])
            ) AS PivotTable
        ) AS THANHPHAM ON M100.G_CODE = THANHPHAM.Product_MaVach
        LEFT JOIN (
            SELECT 
                Product_MaVach, 
                SUM(Block_Qty) AS Block_Qty
            FROM 
                tbl_Block2
            GROUP BY 
                Product_MaVach
        ) AS tbl_Block_table2 ON M100.G_CODE = tbl_Block_table2.Product_MaVach
        LEFT JOIN (
            SELECT 
                ZTB_HALF_GOODS.G_CODE, 
                SUM(BTP_QTY_EA) AS BTP_QTY_EA
            FROM 
                ZTB_HALF_GOODS
            WHERE 
                UPDATE_DATE = CONVERT(date, GETDATE())
            GROUP BY 
                ZTB_HALF_GOODS.G_CODE
        ) AS BTP ON M100.G_CODE = BTP.G_CODE
)
-- Truy vấn chính
SELECT 
    TONKHOFULL.G_NAME_KD, 
    SUM(PO_TABLE_1.PO_QTY) AS PO_QTY, 
    SUM(PO_TABLE_1.TOTAL_DELIVERED) AS TOTAL_DELIVERED, 
    SUM(PO_TABLE_1.PO_BALANCE) AS PO_BALANCE, 
    SUM(TONKHOFULL.CHO_KIEM) AS CHO_KIEM, 
    SUM(TONKHOFULL.CHO_CS_CHECK) AS CHO_CS_CHECK, 
    SUM(TONKHOFULL.CHO_KIEM_RMA) AS CHO_KIEM_RMA, 
    SUM(TONKHOFULL.TONG_TON_KIEM) AS TONG_TON_KIEM, 
    SUM(TONKHOFULL.BTP) AS BTP, 
    SUM(TONKHOFULL.TON_TP) AS TON_TP, 
    SUM(TONKHOFULL.BLOCK_QTY) AS BLOCK_QTY, 
    SUM(TONKHOFULL.GRAND_TOTAL_STOCK) AS GRAND_TOTAL_STOCK, 
    SUM(TONKHOFULL.GRAND_TOTAL_STOCK - PO_TABLE_1.PO_BALANCE) AS THUA_THIEU 
FROM 
    PO_TABLE_1
    LEFT JOIN CTE_TONKHOFULL AS TONKHOFULL ON PO_TABLE_1.G_CODE = TONKHOFULL.G_CODE
 ${condition}
GROUP BY 
  TONKHOFULL.G_NAME_KD
          `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          ////console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "traPOFullKD2":
        (async () => {
          ////console.log(DATA);
          let checkkq = "OK";
          let condition = " WHERE 1=1 ";
          if (DATA.codeSearch !== "") {
            condition += ` AND TONKHOFULL.G_NAME LIKE '%${DATA.codeSearch}%'`;
          }
          if (DATA.allcode !== false) {
            condition += ` AND PO_TABLE_1.PO_BALANCE >0 `;
          }
          let setpdQuery = `
WITH PO_BALANCE_TABLE AS (
   SELECT
   AA.CTR_CD,
     AA.G_CODE,
     ZTBPOTable.PO_QTY,
     AA.TotalDelivered as TOTAL_DELIVERED,
     (ZTBPOTable.PO_QTY - AA.TotalDelivered) As PO_BALANCE
   FROM
     (
       SELECT
	   ZTBPOTable.CTR_CD,
         ZTBPOTable.EMPL_NO,
         ZTBPOTable.CUST_CD,
         ZTBPOTable.G_CODE,
         ZTBPOTable.PO_NO,
         isnull(SUM(ZTBDelivery.DELIVERY_QTY), 0) AS TotalDelivered
       FROM
         ZTBPOTable
         LEFT JOIN ZTBDelivery ON (
           ZTBDelivery.CTR_CD = ZTBPOTable.CTR_CD
           AND ZTBDelivery.CUST_CD = ZTBPOTable.CUST_CD
           AND ZTBDelivery.G_CODE = ZTBPOTable.G_CODE
           AND ZTBDelivery.PO_NO = ZTBPOTable.PO_NO
         )
       GROUP BY
         ZTBPOTable.CTR_CD,
         ZTBPOTable.EMPL_NO,
         ZTBPOTable.G_CODE,
         ZTBPOTable.CUST_CD,
         ZTBPOTable.PO_NO
     ) AS AA
     LEFT JOIN ZTBPOTable ON (
       AA.CTR_CD = ZTBPOTable.CTR_CD
       AND AA.CUST_CD = ZTBPOTable.CUST_CD
       AND AA.G_CODE = ZTBPOTable.G_CODE
       AND AA.PO_NO = ZTBPOTable.PO_NO
     )
 ),
 PO_TABLE_1 AS (
   SELECT
   CTR_CD,
     G_CODE,
     SUM(PO_QTY) AS PO_QTY,
     SUM(TOTAL_DELIVERED) AS TOTAL_DELIVERED,
     SUM(PO_BALANCE) AS PO_BALANCE
   FROM
     PO_BALANCE_TABLE
   GROUP BY
   CTR_CD,
     G_CODE
 ),
 THANHPHAM AS (
   SELECT AA.CTR_CD, AA.G_CODE, M100.G_NAME, M100.G_NAME_KD, M100.PROD_TYPE, AA.STOCK, AA.BLOCK_QTY, (AA.STOCK + AA.BLOCK_QTY) AS TOTAL_STOCK
   FROM
     (
       SELECT CTR_CD,G_CODE,
         SUM(CASE WHEN STATUS='N' THEN I660.IN_QTY ELSE 0 END) AS STOCK,
         SUM(CASE WHEN STATUS='B' THEN I660.IN_QTY ELSE 0 END) AS BLOCK_QTY
       FROM I660
       WHERE USE_YN ='Y'  AND (I660.REMARK is null OR  I660.REMARK<> 'Pending Huy ton')
       GROUP BY CTR_CD,G_CODE
     ) AS AA
     LEFT JOIN M100 ON (M100.CTR_CD = AA.CTR_CD AND M100.G_CODE = AA.G_CODE)
 ),
 TONKIEM AS (
   SELECT
	 ZTB_WAIT_INSPECT.CTR_CD,
     ZTB_WAIT_INSPECT.G_CODE,
     M100.G_NAME,
     M100.G_NAME_KD,
     SUM(INSPECT_BALANCE_QTY) AS INSPECT_BALANCE_QTY,
     SUM(WAIT_CS_QTY) AS WAIT_CS_QTY,
     SUM(WAIT_SORTING_RMA) AS WAIT_SORTING_RMA,
     SUM(INSPECT_BALANCE_QTY + WAIT_CS_QTY + WAIT_SORTING_RMA) AS TOTAL_WAIT
   FROM
     ZTB_WAIT_INSPECT
     JOIN M100 ON (M100.CTR_CD = ZTB_WAIT_INSPECT.CTR_CD AND M100.G_CODE = ZTB_WAIT_INSPECT.G_CODE)
   WHERE
     UPDATE_DATE = CONVERT(date, GETDATE())
     AND CALAMVIEC = 'DEM'
   GROUP BY
	 ZTB_WAIT_INSPECT.CTR_CD,
     ZTB_WAIT_INSPECT.G_CODE,
     M100.G_NAME,
     M100.G_NAME_KD
 ),
 BTP AS (
   SELECT
     ZTB_HALF_GOODS.CTR_CD,
     ZTB_HALF_GOODS.G_CODE,
     M100.G_NAME,
     SUM(BTP_QTY_EA) AS BTP_QTY_EA
   FROM
     ZTB_HALF_GOODS
     JOIN M100 ON (M100.CTR_CD = ZTB_HALF_GOODS.CTR_CD AND M100.G_CODE = ZTB_HALF_GOODS.G_CODE)
   WHERE
     UPDATE_DATE = CONVERT(date, GETDATE())
   GROUP BY
	 ZTB_HALF_GOODS.CTR_CD,
     ZTB_HALF_GOODS.G_CODE,
     M100.G_NAME
 ),
 TONKHOFULL AS (
	SELECT
	M100.CTR_CD,
     M100.G_CODE,
     M100.G_NAME,
     M100.G_NAME_KD,
     isnull(TONKIEM.INSPECT_BALANCE_QTY, 0) AS CHO_KIEM,
     isnull(TONKIEM.WAIT_CS_QTY, 0) AS CHO_CS_CHECK,
     isnull(TONKIEM.WAIT_SORTING_RMA, 0) CHO_KIEM_RMA,
     isnull(TONKIEM.TOTAL_WAIT, 0) AS TONG_TON_KIEM,
     isnull(BTP.BTP_QTY_EA, 0) AS BTP,
     isnull(THANHPHAM.STOCK, 0) AS TON_TP,
     isnull(THANHPHAM.BLOCK_QTY, 0) AS BLOCK_QTY,
     (isnull(TONKIEM.TOTAL_WAIT, 0) + isnull(BTP.BTP_QTY_EA, 0) + isnull(THANHPHAM.STOCK, 0) - isnull(THANHPHAM.BLOCK_QTY, 0)) AS GRAND_TOTAL_STOCK
   FROM
     M100
     LEFT JOIN THANHPHAM ON (THANHPHAM.CTR_CD = M100.CTR_CD AND THANHPHAM.G_CODE = M100.G_CODE)
     LEFT JOIN TONKIEM ON (TONKIEM.CTR_CD = M100.CTR_CD AND TONKIEM.G_CODE = M100.G_CODE)
     LEFT JOIN BTP ON (BTP.CTR_CD = THANHPHAM.CTR_CD AND BTP.G_CODE = THANHPHAM.G_CODE)
 )
 SELECT
   TONKHOFULL.G_NAME_KD,
   SUM(PO_TABLE_1.PO_QTY) AS PO_QTY,
   SUM(TOTAL_DELIVERED) AS TOTAL_DELIVERED,
   SUM(PO_TABLE_1.PO_BALANCE) AS PO_BALANCE,
   SUM(TONKHOFULL.CHO_KIEM) AS CHO_KIEM,
   SUM(TONKHOFULL.CHO_CS_CHECK) AS CHO_CS_CHECK,
   SUM(TONKHOFULL.CHO_KIEM_RMA) AS CHO_KIEM_RMA,
   SUM(TONKHOFULL.TONG_TON_KIEM) AS TONG_TON_KIEM,
   SUM(TONKHOFULL.BTP) AS BTP,
   SUM(TONKHOFULL.TON_TP) AS TON_TP, 
   SUM(TONKHOFULL.BLOCK_QTY) AS BLOCK_QTY,
   SUM(TONKHOFULL.GRAND_TOTAL_STOCK) AS GRAND_TOTAL_STOCK,
   SUM((TONKHOFULL.GRAND_TOTAL_STOCK - PO_TABLE_1.PO_BALANCE)) AS THUA_THIEU
 FROM
   PO_TABLE_1
   LEFT JOIN TONKHOFULL ON (TONKHOFULL.CTR_CD = PO_TABLE_1.CTR_CD AND TONKHOFULL.G_CODE = PO_TABLE_1.G_CODE)
${condition} AND TONKHOFULL.CTR_CD='${DATA.CTR_CD}'
GROUP BY TONKHOFULL.G_NAME_KD`;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          ////console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "traPOFullKD2_NEW":
        (async () => {
          ////console.log(DATA);
          let checkkq = "OK";
          let condition = " WHERE 1=1 ";
          if (DATA.codeSearch !== "") {
            condition += ` AND TONKHOFULL.G_NAME LIKE '%${DATA.codeSearch}%'`;
          }
          if (DATA.allcode !== false) {
            condition += ` AND PO_TABLE_1.PO_BALANCE >0 `;
          }
          let setpdQuery = `
WITH PO_BALANCE_TABLE AS (
   SELECT
   AA.CTR_CD,
     AA.G_CODE,
     ZTBPOTable.PO_QTY,
     AA.TotalDelivered as TOTAL_DELIVERED,
     (ZTBPOTable.PO_QTY - AA.TotalDelivered) As PO_BALANCE
   FROM
     (
       SELECT
	   ZTBPOTable.CTR_CD,
         ZTBPOTable.EMPL_NO,
         ZTBPOTable.CUST_CD,
         ZTBPOTable.G_CODE,
         ZTBPOTable.PO_NO,
         isnull(SUM(ZTBDelivery.DELIVERY_QTY), 0) AS TotalDelivered
       FROM
         ZTBPOTable
         LEFT JOIN ZTBDelivery ON (
           ZTBDelivery.CTR_CD = ZTBPOTable.CTR_CD
           AND ZTBDelivery.CUST_CD = ZTBPOTable.CUST_CD
           AND ZTBDelivery.G_CODE = ZTBPOTable.G_CODE
           AND ZTBDelivery.PO_NO = ZTBPOTable.PO_NO
         )
       GROUP BY
         ZTBPOTable.CTR_CD,
         ZTBPOTable.EMPL_NO,
         ZTBPOTable.G_CODE,
         ZTBPOTable.CUST_CD,
         ZTBPOTable.PO_NO
     ) AS AA
     LEFT JOIN ZTBPOTable ON (
       AA.CTR_CD = ZTBPOTable.CTR_CD
       AND AA.CUST_CD = ZTBPOTable.CUST_CD
       AND AA.G_CODE = ZTBPOTable.G_CODE
       AND AA.PO_NO = ZTBPOTable.PO_NO
     )
 ),
 PO_TABLE_1 AS (
   SELECT
   CTR_CD,
     G_CODE,
     SUM(PO_QTY) AS PO_QTY,
     SUM(TOTAL_DELIVERED) AS TOTAL_DELIVERED,
     SUM(PO_BALANCE) AS PO_BALANCE
   FROM
     PO_BALANCE_TABLE
   GROUP BY
   CTR_CD,
     G_CODE
 ),
 THANHPHAM AS (
   SELECT AA.CTR_CD, AA.G_CODE, M100.G_NAME, M100.G_NAME_KD, M100.PROD_TYPE, AA.STOCK, AA.BLOCK_QTY, (AA.STOCK + AA.BLOCK_QTY) AS TOTAL_STOCK
   FROM
     (
       SELECT CTR_CD,G_CODE,
         SUM(CASE WHEN STATUS='N' THEN I660.IN_QTY ELSE 0 END) AS STOCK,
         SUM(CASE WHEN STATUS='B' THEN I660.IN_QTY ELSE 0 END) AS BLOCK_QTY
       FROM I660
       WHERE USE_YN ='Y'
       GROUP BY CTR_CD,G_CODE
     ) AS AA
     LEFT JOIN M100 ON (M100.CTR_CD = AA.CTR_CD AND M100.G_CODE = AA.G_CODE)
 ),
 TONKIEM AS (
   SELECT
	 ZTB_WAIT_INSPECT.CTR_CD,
     ZTB_WAIT_INSPECT.G_CODE,
     M100.G_NAME,
     M100.G_NAME_KD,
     SUM(INSPECT_BALANCE_QTY) AS INSPECT_BALANCE_QTY,
     SUM(WAIT_CS_QTY) AS WAIT_CS_QTY,
     SUM(WAIT_SORTING_RMA) AS WAIT_SORTING_RMA,
     SUM(INSPECT_BALANCE_QTY + WAIT_CS_QTY + WAIT_SORTING_RMA) AS TOTAL_WAIT
   FROM
     ZTB_WAIT_INSPECT
     JOIN M100 ON (M100.CTR_CD = ZTB_WAIT_INSPECT.CTR_CD AND M100.G_CODE = ZTB_WAIT_INSPECT.G_CODE)
   WHERE
     UPDATE_DATE = CONVERT(date, GETDATE())
     AND CALAMVIEC = 'DEM'
   GROUP BY
	 ZTB_WAIT_INSPECT.CTR_CD,
     ZTB_WAIT_INSPECT.G_CODE,
     M100.G_NAME,
     M100.G_NAME_KD
 ),
 TONKIEM_NEW AS
 (SELECT CTR_CD, G_CODE, SUM(INPUT_QTY_EA) AS INSPECT_BALANCE_QTY FROM ZTBINSPECTINPUTTB WHERE INSPECT_YN='Y' AND P400_YN='Y' GROUP BY CTR_CD, G_CODE)
,
 BTP AS (
   SELECT
     ZTB_HALF_GOODS.CTR_CD,
     ZTB_HALF_GOODS.G_CODE,
     M100.G_NAME,
     SUM(BTP_QTY_EA) AS BTP_QTY_EA
   FROM
     ZTB_HALF_GOODS
     JOIN M100 ON (M100.CTR_CD = ZTB_HALF_GOODS.CTR_CD AND M100.G_CODE = ZTB_HALF_GOODS.G_CODE)
   WHERE
     UPDATE_DATE = CONVERT(date, GETDATE())
   GROUP BY
	 ZTB_HALF_GOODS.CTR_CD,
     ZTB_HALF_GOODS.G_CODE,
     M100.G_NAME
 ),
 TONKHOFULL AS (
	SELECT
	M100.CTR_CD,
     M100.G_CODE,
     M100.G_NAME,
     M100.G_NAME_KD,
     isnull(TONKIEM_NEW.INSPECT_BALANCE_QTY, 0) AS CHO_KIEM,
     isnull(TONKIEM.WAIT_CS_QTY, 0) AS CHO_CS_CHECK,
     isnull(TONKIEM.WAIT_SORTING_RMA, 0) CHO_KIEM_RMA,
     (isnull(TONKIEM_NEW.INSPECT_BALANCE_QTY, 0) + isnull(TONKIEM.WAIT_CS_QTY, 0)+ isnull(TONKIEM.WAIT_SORTING_RMA, 0)) AS TONG_TON_KIEM,
     isnull(BTP.BTP_QTY_EA, 0) AS BTP,
     isnull(THANHPHAM.STOCK, 0) AS TON_TP,
     isnull(THANHPHAM.BLOCK_QTY, 0) AS BLOCK_QTY,
     ((isnull(TONKIEM_NEW.INSPECT_BALANCE_QTY, 0) + isnull(TONKIEM.WAIT_CS_QTY, 0)+ isnull(TONKIEM.WAIT_SORTING_RMA, 0)) + isnull(BTP.BTP_QTY_EA, 0) + isnull(THANHPHAM.STOCK, 0) - isnull(THANHPHAM.BLOCK_QTY, 0)) AS GRAND_TOTAL_STOCK
   FROM
     M100
     LEFT JOIN THANHPHAM ON (THANHPHAM.CTR_CD = M100.CTR_CD AND THANHPHAM.G_CODE = M100.G_CODE)
     LEFT JOIN TONKIEM ON (TONKIEM.CTR_CD = M100.CTR_CD AND TONKIEM.G_CODE = M100.G_CODE)
	 LEFT JOIN TONKIEM_NEW ON (TONKIEM_NEW.CTR_CD = M100.CTR_CD AND TONKIEM_NEW.G_CODE = M100.G_CODE)
     LEFT JOIN BTP ON (BTP.CTR_CD = THANHPHAM.CTR_CD AND BTP.G_CODE = THANHPHAM.G_CODE)
 )
 SELECT
   TONKHOFULL.G_NAME_KD,
   SUM(PO_TABLE_1.PO_QTY) AS PO_QTY,
   SUM(TOTAL_DELIVERED) AS TOTAL_DELIVERED,
   SUM(PO_TABLE_1.PO_BALANCE) AS PO_BALANCE,
   SUM(TONKHOFULL.CHO_KIEM) AS CHO_KIEM,
   SUM(TONKHOFULL.CHO_CS_CHECK) AS CHO_CS_CHECK,
   SUM(TONKHOFULL.CHO_KIEM_RMA) AS CHO_KIEM_RMA,
   SUM(TONKHOFULL.TONG_TON_KIEM) AS TONG_TON_KIEM,
   SUM(TONKHOFULL.BTP) AS BTP,
   SUM(TONKHOFULL.TON_TP) AS TON_TP, 
   SUM(TONKHOFULL.BLOCK_QTY) AS BLOCK_QTY,
   SUM(TONKHOFULL.GRAND_TOTAL_STOCK) AS GRAND_TOTAL_STOCK,
   SUM((TONKHOFULL.GRAND_TOTAL_STOCK - PO_TABLE_1.PO_BALANCE)) AS THUA_THIEU
 FROM
   PO_TABLE_1
   LEFT JOIN TONKHOFULL ON (TONKHOFULL.CTR_CD = PO_TABLE_1.CTR_CD AND TONKHOFULL.G_CODE = PO_TABLE_1.G_CODE)
${condition} AND TONKHOFULL.CTR_CD='${DATA.CTR_CD}'
GROUP BY TONKHOFULL.G_NAME_KD`;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          ////console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "trakhotpInOut": //chua update CTR_CD
        (async () => {
          ////console.log(DATA);
          let checkkq = "OK";
          let condition = " WHERE 1=1 ";
          if (DATA.ALLTIME !== true) {
            condition += `AND tbl_InputOutput.IO_Date BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE}' `;
          }
          if (DATA.G_CODE !== "") {
            condition += ` AND tbl_InputOutput.Product_MaVach = '${DATA.G_CODE}' `;
          }
          if (DATA.G_NAME !== "") {
            condition += ` AND M100.G_NAME LIKE '%${DATA.G_NAME}%' `;
          }
          if (DATA.CUST_NAME !== "") {
            condition += ` AND tbl_InputOutput.Customer_ShortName LIKE '%${DATA.CUST_NAME}%' `;
          }
          if (DATA.CAPBU === false && DATA.INOUT === "OUT") {
            condition += ` AND Customer_ShortName <> 'CMSV' `;
          }
          condition += ` AND tbl_InputOutput.IO_Type = '${DATA.INOUT}' `;
          let setpdQuery = `SELECT tbl_InputOutput.IO_Status, tbl_InputOutput.IO_Note,tbl_InputOutput.IO_Number, M110.CUST_NAME_KD, tbl_InputOutput.Product_MaVach AS G_CODE, M100.G_NAME, M100.G_NAME_KD, tbl_InputOutput.Customer_ShortName, tbl_InputOutput.IO_Date, CONVERT(datetime,tbl_InputOutput.IO_Time) AS INPUT_DATETIME, tbl_InputOutput.IO_Shift ,tbl_InputOutput.IO_Type, tbl_InputOutput.IO_Qty FROM tbl_InputOutput LEFT JOIN M100 ON (M100.G_CODE= tbl_InputOutput.Product_MaVach) 
                    LEFT JOIN tbl_Customer ON (tbl_Customer.Customer_SortName = tbl_InputOutput.Customer_ShortName)
                    LEFT JOIN M110 ON (M110.CUST_CD = tbl_Customer.CUST_CD) ${condition} ORDER BY tbl_InputOutput.IO_Time DESC`;
          //////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          ////console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "traSTOCKCMS": //chua update CTR_CD
        (async () => {
          ////console.log(DATA);
          let checkkq = "OK";
          let condition = " WHERE 1=1 ";
          if (DATA.G_CODE !== "") {
            condition += ` AND M100.G_CODE = '${DATA.G_CODE}' `;
          }
          if (DATA.G_NAME !== "") {
            condition += ` AND M100.G_NAME LIKE '%${DATA.G_NAME}%' `;
          }
          if (DATA.JUSTBALANCE !== false) {
            condition += `AND THANHPHAM.TONKHO >0 `;
          }
          let setpdQuery = `SELECT M100.G_CODE
          ,M100.G_NAME
          ,M100.G_NAME_KD
          ,isnull(TONKIEM.INSPECT_BALANCE_QTY, 0) AS CHO_KIEM
          ,isnull(TONKIEM.WAIT_CS_QTY, 0) AS CHO_CS_CHECK
          ,isnull(TONKIEM.WAIT_SORTING_RMA, 0) CHO_KIEM_RMA
          ,isnull(TONKIEM.TOTAL_WAIT, 0) AS TONG_TON_KIEM
          ,isnull(BTP.BTP_QTY_EA, 0) AS BTP
          ,isnull(THANHPHAM.TONKHO, 0) AS TON_TP          
          ,isnull(tbl_Block_table2.Block_Qty, 0) AS BLOCK_QTY
          ,(isnull(TONKIEM.TOTAL_WAIT, 0) + isnull(BTP.BTP_QTY_EA, 0) + isnull(THANHPHAM.TONKHO, 0) - isnull(tbl_Block_table2.Block_Qty, 0)) AS GRAND_TOTAL_STOCK
          ,isnull(THANHPHAM.XUATKHO_PD, 0) AS PENDINGXK
          ,isnull(THANHPHAM.TONKHO_TT, 0) AS TON_TPTT
        FROM M100
        LEFT JOIN (
          select Product_MaVach AS G_CODE, SUM(CASE WHEN IO_type='IN' THEN IO_Qty ELSE 0 END) AS NHAPKHO,SUM(CASE WHEN IO_type='OUT' THEN IO_Qty ELSE 0 END) AS XUATKHO,SUM(CASE WHEN IO_type='OUT' AND IO_Status= 'Pending' THEN IO_Qty ELSE 0 END) AS XUATKHO_PD,SUM(CASE WHEN IO_type='IN' THEN IO_Qty ELSE 0 END) -SUM(CASE WHEN IO_type='OUT' THEN IO_Qty ELSE 0 END) AS TONKHO, SUM(CASE WHEN IO_type='OUT' AND (IO_Status<> 'Pending' OR IO_Status is null) THEN IO_Qty ELSE 0 END) AS XUATKHO_TT, SUM(CASE WHEN IO_type='IN' THEN IO_Qty ELSE 0 END) -SUM(CASE WHEN IO_type='OUT' AND (IO_Status<> 'Pending' OR IO_Status is null)THEN IO_Qty ELSE 0 END) AS TONKHO_TT FROM tbl_InputOutput 
        group by Product_MaVach 
          ) AS THANHPHAM ON (THANHPHAM.G_CODE = M100.G_CODE)
        LEFT JOIN (
          SELECT ZTB_WAIT_INSPECT.G_CODE
            ,M100.G_NAME
            ,M100.G_NAME_KD
            ,SUM(INSPECT_BALANCE_QTY) AS INSPECT_BALANCE_QTY
            ,SUM(WAIT_CS_QTY) AS WAIT_CS_QTY
            ,SUM(WAIT_SORTING_RMA) AS WAIT_SORTING_RMA
            ,SUM(INSPECT_BALANCE_QTY + WAIT_CS_QTY + WAIT_SORTING_RMA) AS TOTAL_WAIT
          FROM ZTB_WAIT_INSPECT
          INNER JOIN M100 ON (M100.G_CODE = ZTB_WAIT_INSPECT.G_CODE)
          WHERE UPDATE_DATE = CONVERT(DATE, GETDATE())
            AND CALAMVIEC = 'DEM'
          GROUP BY ZTB_WAIT_INSPECT.G_CODE
            ,M100.G_NAME
            ,M100.G_NAME_KD
          ) AS TONKIEM ON (THANHPHAM.G_CODE = TONKIEM.G_CODE)
        LEFT JOIN (
          SELECT Product_MaVach
            ,SUM(Block_Qty) AS Block_Qty
          FROM tbl_Block2
          GROUP BY Product_MaVach
          ) AS tbl_Block_table2 ON (tbl_Block_table2.Product_MaVach = M100.G_CODE)
        LEFT JOIN (
          SELECT ZTB_HALF_GOODS.G_CODE
            ,M100.G_NAME
            ,SUM(BTP_QTY_EA) AS BTP_QTY_EA
          FROM ZTB_HALF_GOODS
          INNER JOIN M100 ON (M100.G_CODE = ZTB_HALF_GOODS.G_CODE)
          WHERE UPDATE_DATE = CONVERT(DATE, GETDATE())
          GROUP BY ZTB_HALF_GOODS.G_CODE
            ,M100.G_NAME
          ) AS BTP ON (BTP.G_CODE = THANHPHAM.G_CODE) ${condition} `;
          //////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          ////console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "traSTOCKCMS_NEW": //chua update CTR_CD
        (async () => {
          ////console.log(DATA);
          let checkkq = "OK";
          let condition = " WHERE 1=1 ";
          if (DATA.G_CODE !== "") {
            condition += ` AND M100.G_CODE = '${DATA.G_CODE}' `;
          }
          if (DATA.G_NAME !== "") {
            condition += ` AND M100.G_NAME LIKE '%${DATA.G_NAME}%' `;
          }
          if (DATA.JUSTBALANCE !== false) {
            condition += `AND (THANHPHAM.TONKHO >0 OR TONKIEM_NEW.INSPECT_BALANCE_QTY >0 OR BTP.BTP_QTY_EA > 0)`;
          }
          let setpdQuery = `WITH CTE_THANHPHAM AS (
    SELECT 
        Product_MaVach AS G_CODE, 
        SUM(CASE WHEN IO_type = 'IN' THEN IO_Qty ELSE 0 END) AS NHAPKHO,
        SUM(CASE WHEN IO_type = 'OUT' THEN IO_Qty ELSE 0 END) AS XUATKHO,
        SUM(CASE WHEN IO_type = 'OUT' AND IO_Status = 'Pending' THEN IO_Qty ELSE 0 END) AS XUATKHO_PD,
        SUM(CASE WHEN IO_type = 'IN' THEN IO_Qty ELSE 0 END) - SUM(CASE WHEN IO_type = 'OUT' THEN IO_Qty ELSE 0 END) AS TONKHO,
        SUM(CASE WHEN IO_type = 'OUT' AND (IO_Status <> 'Pending' OR IO_Status IS NULL) THEN IO_Qty ELSE 0 END) AS XUATKHO_TT,
        SUM(CASE WHEN IO_type = 'IN' THEN IO_Qty ELSE 0 END) - SUM(CASE WHEN IO_type = 'OUT' AND (IO_Status <> 'Pending' OR IO_Status IS NULL) THEN IO_Qty ELSE 0 END) AS TONKHO_TT
    FROM tbl_InputOutput
    GROUP BY Product_MaVach
),
CTE_TONKIEM AS (
    SELECT 
        ZTB_WAIT_INSPECT.G_CODE,
        M100.G_NAME,
        M100.G_NAME_KD,
        SUM(INSPECT_BALANCE_QTY) AS INSPECT_BALANCE_QTY,
        SUM(WAIT_CS_QTY) AS WAIT_CS_QTY,
        SUM(WAIT_SORTING_RMA) AS WAIT_SORTING_RMA,
        SUM(INSPECT_BALANCE_QTY + WAIT_CS_QTY + WAIT_SORTING_RMA) AS TOTAL_WAIT
    FROM ZTB_WAIT_INSPECT
    INNER JOIN M100 ON M100.G_CODE = ZTB_WAIT_INSPECT.G_CODE
    WHERE UPDATE_DATE = CONVERT(DATE, GETDATE()) AND CALAMVIEC = 'DEM'
    GROUP BY ZTB_WAIT_INSPECT.G_CODE, M100.G_NAME, M100.G_NAME_KD
),
CTE_TONKIEM_NEW AS (
    SELECT 
        CTR_CD, 
        G_CODE, 
        SUM(INPUT_QTY_EA) AS INSPECT_BALANCE_QTY 
    FROM ZTBINSPECTINPUTTB
    WHERE INSPECT_YN = 'Y' AND P400_YN = 'Y'
    GROUP BY CTR_CD, G_CODE
),
CTE_BLOCK_TABLE AS (
    SELECT 
        Product_MaVach, 
        SUM(Block_Qty) AS Block_Qty
    FROM tbl_Block2
    GROUP BY Product_MaVach
),
CTE_BTP AS (
    SELECT 
        ZTB_HALF_GOODS.G_CODE,
        M100.G_NAME,
        SUM(BTP_QTY_EA) AS BTP_QTY_EA
    FROM ZTB_HALF_GOODS
    INNER JOIN M100 ON M100.G_CODE = ZTB_HALF_GOODS.G_CODE
    WHERE UPDATE_DATE = CONVERT(DATE, GETDATE())
    GROUP BY ZTB_HALF_GOODS.G_CODE, M100.G_NAME
)
SELECT 
    M100.G_CODE,
    M100.G_NAME,
    M100.G_NAME_KD,
    ISNULL(TONKIEM_NEW.INSPECT_BALANCE_QTY, 0) AS CHO_KIEM,
    ISNULL(TONKIEM.WAIT_CS_QTY, 0) AS CHO_CS_CHECK,
    ISNULL(TONKIEM.WAIT_SORTING_RMA, 0) AS CHO_KIEM_RMA,
    ISNULL(TONKIEM_NEW.INSPECT_BALANCE_QTY, 0) 
    + ISNULL(TONKIEM.WAIT_CS_QTY, 0) 
    + ISNULL(TONKIEM.WAIT_SORTING_RMA, 0) AS TONG_TON_KIEM,
    ISNULL(M100.BTP_QTY, 0) AS BTP,
    ISNULL(THANHPHAM.TONKHO, 0) AS TON_TP,
    ISNULL(tbl_Block_table2.Block_Qty, 0) AS BLOCK_QTY,
    ISNULL(TONKIEM_NEW.INSPECT_BALANCE_QTY, 0) 
    + ISNULL(TONKIEM.WAIT_CS_QTY, 0) 
    + ISNULL(TONKIEM.WAIT_SORTING_RMA, 0) 
    + ISNULL(M100.BTP_QTY, 0)
    + ISNULL(THANHPHAM.TONKHO, 0) 
    - ISNULL(tbl_Block_table2.Block_Qty, 0) AS GRAND_TOTAL_STOCK,
    ISNULL(THANHPHAM.XUATKHO_PD, 0) AS PENDINGXK,
    ISNULL(THANHPHAM.TONKHO_TT, 0) AS TON_TPTT
FROM M100
LEFT JOIN CTE_THANHPHAM AS THANHPHAM ON THANHPHAM.G_CODE = M100.G_CODE
LEFT JOIN CTE_TONKIEM AS TONKIEM ON M100.G_CODE = TONKIEM.G_CODE
LEFT JOIN CTE_TONKIEM_NEW AS TONKIEM_NEW ON M100.G_CODE = TONKIEM_NEW.G_CODE
LEFT JOIN CTE_BLOCK_TABLE AS tbl_Block_table2 ON tbl_Block_table2.Product_MaVach = M100.G_CODE
LEFT JOIN CTE_BTP AS BTP ON BTP.G_CODE = M100.G_CODE ${condition} `;
          //////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          ////console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "traSTOCKKD": //chua update CTR_CD
        (async () => {
          ////console.log(DATA);
          let checkkq = "OK";
          let condition = " WHERE 1=1 ";
          if (DATA.G_NAME !== "") {
            condition += ` AND M100.G_NAME LIKE '%${DATA.G_NAME}%' `;
          }
          if (DATA.JUSTBALANCE !== false) {
            condition += `AND THANHPHAM.TONKHO >0 `;
          }
          let setpdQuery = `SELECT 
          M100.G_NAME_KD, 
          SUM(
            isnull(TONKIEM.INSPECT_BALANCE_QTY, 0)
          ) AS CHO_KIEM, 
          SUM(
            isnull(TONKIEM.WAIT_CS_QTY, 0)
          ) AS CHO_CS_CHECK, 
          SUM(
            isnull(TONKIEM.WAIT_SORTING_RMA, 0)
          ) AS CHO_KIEM_RMA, 
          SUM(
            isnull(TONKIEM.TOTAL_WAIT, 0)
          ) AS TONG_TON_KIEM, 
          SUM(
            isnull(BTP.BTP_QTY_EA, 0)
          ) AS BTP, 
          SUM(
            isnull(THANHPHAM.TONKHO, 0)
          ) AS TON_TP,
           SUM(
            isnull(THANHPHAM.XUATKHO_PD, 0)
          ) AS PENDINGXK,
           SUM(
            isnull(THANHPHAM.TONKHO_TT, 0)
          ) AS TON_TPTT,
          SUM(
            isnull(tbl_Block_table2.Block_Qty, 0)
          ) AS BLOCK_QTY, 
          SUM(
            (
              isnull(TONKIEM.TOTAL_WAIT, 0)
            ) + isnull(BTP.BTP_QTY_EA, 0)+ isnull(THANHPHAM.TONKHO, 0) - isnull(tbl_Block_table2.Block_Qty, 0)
          ) AS GRAND_TOTAL_STOCK 
        FROM 
          M100 
          LEFT JOIN (
            select Product_MaVach, SUM(CASE WHEN IO_type='IN' THEN IO_Qty ELSE 0 END) AS NHAPKHO,SUM(CASE WHEN IO_type='OUT' THEN IO_Qty ELSE 0 END) AS XUATKHO,SUM(CASE WHEN IO_type='OUT' AND IO_Status= 'Pending' THEN IO_Qty ELSE 0 END) AS XUATKHO_PD,SUM(CASE WHEN IO_type='IN' THEN IO_Qty ELSE 0 END) -SUM(CASE WHEN IO_type='OUT' THEN IO_Qty ELSE 0 END) AS TONKHO, SUM(CASE WHEN IO_type='OUT' AND (IO_Status<> 'Pending' OR IO_Status is null) THEN IO_Qty ELSE 0 END) AS XUATKHO_TT, SUM(CASE WHEN IO_type='IN' THEN IO_Qty ELSE 0 END) -SUM(CASE WHEN IO_type='OUT' AND (IO_Status<> 'Pending' OR IO_Status is null)THEN IO_Qty ELSE 0 END) AS TONKHO_TT FROM tbl_InputOutput 
        group by Product_MaVach 
          ) AS THANHPHAM ON (
            THANHPHAM.Product_MaVach = M100.G_CODE
          ) 
          LEFT JOIN (
            SELECT 
              ZTB_WAIT_INSPECT.G_CODE, 
              M100.G_NAME, 
              M100.G_NAME_KD, 
              SUM(INSPECT_BALANCE_QTY) AS INSPECT_BALANCE_QTY, 
              SUM(WAIT_CS_QTY) AS WAIT_CS_QTY, 
              SUM(WAIT_SORTING_RMA) AS WAIT_SORTING_RMA, 
              SUM(
                INSPECT_BALANCE_QTY + WAIT_CS_QTY + WAIT_SORTING_RMA
              ) AS TOTAL_WAIT 
            FROM 
              ZTB_WAIT_INSPECT 
              JOIN M100 ON (
                M100.G_CODE = ZTB_WAIT_INSPECT.G_CODE
              ) 
            WHERE 
              UPDATE_DATE = CONVERT(
                date, 
                GETDATE()
              ) 
              AND CALAMVIEC = 'DEM' 
            GROUP BY 
              ZTB_WAIT_INSPECT.G_CODE, 
              M100.G_NAME, 
              M100.G_NAME_KD
          ) AS TONKIEM ON (
            THANHPHAM.Product_MaVach = TONKIEM.G_CODE
          ) 
          LEFT JOIN (
            SELECT 
              Product_MaVach, 
              SUM(Block_Qty) AS Block_Qty 
            from 
              tbl_Block2 
            GROUP BY 
              Product_MaVach
          ) AS tbl_Block_table2 ON (
            tbl_Block_table2.Product_MaVach = M100.G_CODE
          ) 
          LEFT JOIN (
            SELECT 
              ZTB_HALF_GOODS.G_CODE, 
              M100.G_NAME, 
              SUM(BTP_QTY_EA) AS BTP_QTY_EA 
            FROM 
              ZTB_HALF_GOODS 
              JOIN M100 ON (
                M100.G_CODE = ZTB_HALF_GOODS.G_CODE
              ) 
            WHERE 
              UPDATE_DATE = CONVERT(
                date, 
                GETDATE()
              ) 
            GROUP BY 
              ZTB_HALF_GOODS.G_CODE, 
              M100.G_NAME
          ) AS BTP ON (
            BTP.G_CODE = THANHPHAM.Product_MaVach
          ) ${condition} GROUP BY M100.G_NAME_KD`;
          //////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          ////console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "traSTOCKKD_NEW": //chua update CTR_CD
        (async () => {
          ////console.log(DATA);
          let checkkq = "OK";
          let condition = " WHERE 1=1 ";
          if (DATA.G_NAME !== "") {
            condition += ` AND M100.G_NAME LIKE '%${DATA.G_NAME}%' `;
          }
          if (DATA.JUSTBALANCE !== false) {
            condition += `AND (THANHPHAM.TONKHO >0  OR TONKIEM_NEW.INSPECT_BALANCE_QTY > 0 OR BTP.BTP_QTY_EA > 0) `;
          }
          let setpdQuery = `WITH CTE_THANHPHAM AS (
    SELECT 
        Product_MaVach, 
        SUM(CASE WHEN IO_type = 'IN' THEN IO_Qty ELSE 0 END) AS NHAPKHO,
        SUM(CASE WHEN IO_type = 'OUT' THEN IO_Qty ELSE 0 END) AS XUATKHO,
        SUM(CASE WHEN IO_type = 'OUT' AND IO_Status = 'Pending' THEN IO_Qty ELSE 0 END) AS XUATKHO_PD,
        SUM(CASE WHEN IO_type = 'IN' THEN IO_Qty ELSE 0 END) - SUM(CASE WHEN IO_type = 'OUT' THEN IO_Qty ELSE 0 END) AS TONKHO,
        SUM(CASE WHEN IO_type = 'OUT' AND (IO_Status <> 'Pending' OR IO_Status IS NULL) THEN IO_Qty ELSE 0 END) AS XUATKHO_TT,
        SUM(CASE WHEN IO_type = 'IN' THEN IO_Qty ELSE 0 END) - SUM(CASE WHEN IO_type = 'OUT' AND (IO_Status <> 'Pending' OR IO_Status IS NULL) THEN IO_Qty ELSE 0 END) AS TONKHO_TT
    FROM tbl_InputOutput
    GROUP BY Product_MaVach
),
CTE_TONKIEM AS (
    SELECT 
        ZTB_WAIT_INSPECT.G_CODE, 
        M100.G_NAME, 
        M100.G_NAME_KD, 
        SUM(INSPECT_BALANCE_QTY) AS INSPECT_BALANCE_QTY, 
        SUM(WAIT_CS_QTY) AS WAIT_CS_QTY, 
        SUM(WAIT_SORTING_RMA) AS WAIT_SORTING_RMA, 
        SUM(INSPECT_BALANCE_QTY + WAIT_CS_QTY + WAIT_SORTING_RMA) AS TOTAL_WAIT
    FROM ZTB_WAIT_INSPECT
    JOIN M100 ON M100.G_CODE = ZTB_WAIT_INSPECT.G_CODE
    WHERE UPDATE_DATE = CONVERT(date, GETDATE()) AND CALAMVIEC = 'DEM'
    GROUP BY ZTB_WAIT_INSPECT.G_CODE, M100.G_NAME, M100.G_NAME_KD
),
CTE_TONKIEM_NEW AS (
    SELECT 
        CTR_CD, 
        G_CODE, 
        SUM(INPUT_QTY_EA) AS INSPECT_BALANCE_QTY
    FROM ZTBINSPECTINPUTTB
    WHERE INSPECT_YN = 'Y' AND P400_YN = 'Y'
    GROUP BY CTR_CD, G_CODE
),
CTE_BLOCK_TABLE AS (
    SELECT 
        Product_MaVach, 
        SUM(Block_Qty) AS Block_Qty
    FROM tbl_Block2
    GROUP BY Product_MaVach
),
CTE_BTP AS (
    SELECT 
        ZTB_HALF_GOODS.G_CODE, 
        M100.G_NAME, 
        SUM(BTP_QTY_EA) AS BTP_QTY_EA
    FROM ZTB_HALF_GOODS
    JOIN M100 ON M100.G_CODE = ZTB_HALF_GOODS.G_CODE
    WHERE UPDATE_DATE = CONVERT(date, GETDATE())
    GROUP BY ZTB_HALF_GOODS.G_CODE, M100.G_NAME
)
SELECT 
    M100.G_NAME_KD, 
    SUM(ISNULL(TONKIEM_NEW.INSPECT_BALANCE_QTY, 0)) AS CHO_KIEM, 
    SUM(ISNULL(TONKIEM.WAIT_CS_QTY, 0)) AS CHO_CS_CHECK, 
    SUM(ISNULL(TONKIEM.WAIT_SORTING_RMA, 0)) AS CHO_KIEM_RMA, 
    SUM(ISNULL(TONKIEM_NEW.INSPECT_BALANCE_QTY, 0) + ISNULL(TONKIEM.WAIT_CS_QTY, 0) + ISNULL(TONKIEM.WAIT_SORTING_RMA, 0)) AS TONG_TON_KIEM, 
    SUM(ISNULL(M100.BTP_QTY, 0)) AS BTP, 
    SUM(ISNULL(THANHPHAM.TONKHO, 0)) AS TON_TP,
    SUM(ISNULL(THANHPHAM.XUATKHO_PD, 0)) AS PENDINGXK,
    SUM(ISNULL(THANHPHAM.TONKHO_TT, 0)) AS TON_TPTT,
    SUM(ISNULL(tbl_Block_table2.Block_Qty, 0)) AS BLOCK_QTY, 
    SUM(
        ISNULL(TONKIEM_NEW.INSPECT_BALANCE_QTY, 0) + ISNULL(TONKIEM.WAIT_CS_QTY, 0) + ISNULL(TONKIEM.WAIT_SORTING_RMA, 0)
        + ISNULL(TONKIEM.WAIT_CS_QTY, 0) 
        + ISNULL(TONKIEM.WAIT_SORTING_RMA, 0)
        + ISNULL(M100.BTP_QTY, 0) 
        + ISNULL(THANHPHAM.TONKHO, 0) 
        - ISNULL(tbl_Block_table2.Block_Qty, 0)
    ) AS GRAND_TOTAL_STOCK
FROM M100
LEFT JOIN CTE_THANHPHAM AS THANHPHAM ON THANHPHAM.Product_MaVach = M100.G_CODE
LEFT JOIN CTE_TONKIEM AS TONKIEM ON M100.G_CODE = TONKIEM.G_CODE
LEFT JOIN CTE_TONKIEM_NEW AS TONKIEM_NEW ON M100.G_CODE = TONKIEM_NEW.G_CODE
LEFT JOIN CTE_BLOCK_TABLE AS tbl_Block_table2 ON tbl_Block_table2.Product_MaVach = M100.G_CODE
LEFT JOIN CTE_BTP AS BTP ON BTP.G_CODE = M100.G_CODE ${condition} GROUP BY M100.G_NAME_KD`;
          //////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          ////console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "traSTOCKTACH": //chua update CTR_CD
        (async () => {
          ////console.log(DATA);
          let checkkq = "OK";
          let condition = " WHERE 1=1 ";
          if (DATA.G_NAME !== "") {
            condition += ` AND M100.G_NAME LIKE '%${DATA.G_NAME}%' `;
          }
          if (DATA.JUSTBALANCE !== false) {
            condition += `AND THANHPHAM.TONKHO >0 `;
          }
          if (DATA.G_CODE !== "") {
            condition += ` AND M100.G_CODE = '${DATA.G_CODE}' `;
          }
          let setpdQuery = `SELECT isnull(THANHPHAM.WH_Name,'NO_STOCK') AS KHO_NAME, tbl_Location.LC_NAME, M100.G_CODE, M100.G_NAME, M100.G_NAME_KD, isnull(THANHPHAM.NHAPKHO,0) AS NHAPKHO, isnull(THANHPHAM.XUATKHO,0) AS XUATKHO, isnull(THANHPHAM.TONKHO,0) AS TONKHO, isnull(tbl_Block_table2.Block_Qty,0) AS BLOCK_QTY, ( isnull(THANHPHAM.TONKHO,0)-isnull(tbl_Block_table2.Block_Qty,0)) AS GRAND_TOTAL_TP FROM M100 LEFT JOIN ( SELECT Product_MaVach, WH_Name, isnull([IN],0) AS NHAPKHO, isnull([OUT],0) AS XUATKHO, (isnull([IN],0)- isnull([OUT],0)) AS TONKHO FROM ( SELECT Product_Mavach, WH_Name, IO_Type, IO_Qty FROM tbl_InputOutput ) AS SourceTable PIVOT ( SUM(IO_Qty) FOR IO_Type IN ([IN], [OUT]) ) AS PivotTable ) AS THANHPHAM ON (THANHPHAM.Product_MaVach = M100.G_CODE) LEFT JOIN ( SELECT Product_MaVach, WH_Name, SUM(Block_Qty) AS Block_Qty from tbl_Block2 GROUP BY Product_MaVach,WH_Name ) AS tbl_Block_table2 ON (tbl_Block_table2.Product_MaVach= THANHPHAM.Product_MaVach AND tbl_Block_table2.WH_Name= THANHPHAM.WH_Name) LEFT JOIN tbl_Location ON (tbl_Location.Product_MaVach = THANHPHAM.Product_MaVach AND tbl_Location.WH_Name = THANHPHAM.WH_Name) ${condition}`;
          //////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          ////console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "codeinfo":
        (async () => {
          let DATA = qr["DATA"];
          //////console.log(DATA);
          let checkkq = "OK";
          let condition = `WHERE 1=1 `
          if (DATA.G_NAME !== '') {
            condition += ` AND  (M100.G_NAME LIKE '%${DATA.G_NAME}%' OR M100.G_CODE ='${DATA.G_NAME}' OR M100.G_NAME_KD LIKE '%${DATA.G_NAME}%') `
          }
          if (DATA.CNDB === false) {
            condition += ` AND G_CODE_CNDB is null`;
          }
          if (DATA.ACTIVE_ONLY === true) {
            condition += ` AND M100.USE_YN='Y' `
          }
          let setpdQuery = `SELECT isnull(M100.BEP,0) AS BEP, CASE WHEN M100.CODE_33='01' THEN 'EA' WHEN M100.CODE_33='02' THEN 'ROLL' WHEN M100.CODE_33='03' THEN 'SHEET' WHEN M100.CODE_33='04' THEN 'MET' WHEN M100.CODE_33='06' THEN 'PACK (BAG)' WHEN M100.CODE_33='99' THEN 'X' END AS PACKING_TYPE, M100.INSPECT_SPEED, M100.G_CODE, G_NAME, G_NAME_KD,M100.DESCR, PROD_TYPE, PROD_LAST_PRICE, PD, (G_C* G_C_R) AS CAVITY, ROLE_EA_QTY AS PACKING_QTY,  G_WIDTH, G_LENGTH, PROD_PROJECT,PROD_MODEL, CCC.M_NAME_FULLBOM, BANVE, NO_INSPECTION, USE_YN, PDBV, PROD_DIECUT_STEP, PROD_PRINT_TIMES,FACTORY, EQ1, EQ2,  EQ3, EQ4, Setting1, Setting2, Setting3, Setting4, UPH1, UPH2, UPH3, UPH4, Step1, Step2, Step3, Step4, LOSS_SX1, LOSS_SX2, LOSS_SX3, LOSS_SX4,  LOSS_SETTING1 , LOSS_SETTING2 ,  LOSS_SETTING3 , LOSS_SETTING4 , LOSS_ST_SX1, LOSS_ST_SX2, LOSS_ST_SX3, LOSS_ST_SX4, NOTE, EXP_DATE, QL_HSD, APPSHEET, LOSS_KT FROM M100 LEFT JOIN (SELECT BBB.CTR_CD, BBB.G_CODE, string_agg(BBB.M_NAME, ', ') AS M_NAME_FULLBOM FROM (SELECT DISTINCT AAA.CTR_CD, AAA.G_CODE, M090.M_NAME FROM ( (SELECT DISTINCT G_CODE, M_CODE, CTR_CD FROM M140) AS AAA LEFT JOIN M090 ON (AAA.M_CODE = M090.M_CODE AND AAA.CTR_CD = M090.CTR_CD) ) ) AS BBB GROUP BY BBB.CTR_CD ,BBB.G_CODE) AS CCC ON (CCC.G_CODE = M100.G_CODE AND CCC.CTR_CD = M100.CTR_CD) ${condition} AND M100.CTR_CD='${DATA.CTR_CD}' ORDER BY G_CODE ASC`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "codeinforRnD":
        (async () => {
          let DATA = qr["DATA"];
          //////console.log(DATA);
          let checkkq = "OK";
          let condition = `WHERE M100.CTR_CD='${DATA.CTR_CD}' `
          if (DATA.G_NAME !== '') {
            condition += ` AND  (M100.G_NAME LIKE '%${DATA.G_NAME}%' OR M100.G_CODE ='${DATA.G_NAME}' OR M100.G_NAME_KD LIKE '%${DATA.G_NAME}%') `
          }
          if (DATA.CNDB === false) {
            condition += ` AND G_CODE_CNDB is null`;
          }
          if (DATA.ACTIVE_ONLY === true) {
            condition += ` AND M100.USE_YN='Y' `
          }
          let setpdQuery = `SELECT isnull(M100.BEP,0) AS BEP, M100.G_CODE, G_NAME, G_NAME_KD, PROD_TYPE, PROD_LAST_PRICE, PD, (G_C* G_C_R) AS CAVITY, ROLE_EA_QTY AS PACKING_QTY,  G_WIDTH, G_LENGTH, PROD_PROJECT,PROD_MODEL, BANVE, NO_INSPECTION, USE_YN, PDBV, PROD_DIECUT_STEP, PROD_PRINT_TIMES,FACTORY, EQ1, EQ2,  EQ3, EQ4, Setting1, Setting2, Setting3, Setting4, UPH1, UPH2, UPH3, UPH4, Step1, Step2, Step3, Step4, LOSS_SX1, LOSS_SX2, LOSS_SX3, LOSS_SX4,  LOSS_SETTING1 , LOSS_SETTING2 ,  LOSS_SETTING3 , LOSS_SETTING4 , LOSS_ST_SX1, LOSS_ST_SX2, LOSS_ST_SX3, LOSS_ST_SX4, NOTE, EXP_DATE, QL_HSD, APPSHEET FROM M100  ${condition} ORDER BY G_CODE ASC`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "kd_dailyclosing":
        (async () => {
          //////console.log(DATA);
          let checkkq = "OK";
          let setpdQuery = ` SELECT  ZTBDelivery.DELIVERY_DATE, SUM(ZTBDelivery.DELIVERY_QTY) AS DELIVERY_QTY, SUM((ZTBDelivery.DELIVERY_QTY * ZTBPOTable.PROD_PRICE)) AS DELIVERED_AMOUNT FROM ZTBDelivery 
                    LEFT JOIN ZTBPOTable ON (ZTBPOTable.CTR_CD = ZTBDelivery.CTR_CD AND ZTBPOTable.CUST_CD = ZTBDelivery.CUST_CD AND ZTBPOTable.G_CODE = ZTBDelivery.G_CODE AND ZTBPOTable.PO_NO = ZTBDelivery.PO_NO) WHERE ZTBDelivery.CTR_CD='${DATA.CTR_CD}' AND ZTBDelivery.DELIVERY_DATE BETWEEN '${DATA.START_DATE}' AND  '${DATA.END_DATE}' GROUP BY DELIVERY_DATE ORDER BY  DELIVERY_DATE ASC `;
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          ////console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "kd_weeklyclosing":
        (async () => {
          //////console.log(DATA);
          let checkkq = "OK";
          let setpdQuery = `  SELECT  AA.DEL_YEAR, AA.DEL_WEEK, CONCAT(AA.DEL_YEAR,'_', AA.DEL_WEEK) AS DEL_YW, AA.DELIVERY_QTY, AA.DELIVERED_AMOUNT FROM 
          (SELECT TOP 1000 DATEPART(YYYY, DATEADD(day,1,DELIVERY_DATE)) AS DEL_YEAR ,DATEPART( ISOWK, DATEADD(day,1,DELIVERY_DATE)) AS DEL_WEEK, SUM(ZTBDelivery.DELIVERY_QTY) AS DELIVERY_QTY, SUM(ZTBDelivery.DELIVERY_QTY * ZTBPOTable.PROD_PRICE) AS DELIVERED_AMOUNT 
           FROM ZTBDelivery 
             LEFT JOIN ZTBPOTable ON (ZTBPOTable.CTR_CD = ZTBDelivery.CTR_CD AND ZTBPOTable.CUST_CD = ZTBDelivery.CUST_CD AND ZTBPOTable.G_CODE = ZTBDelivery.G_CODE AND ZTBPOTable.PO_NO = ZTBDelivery.PO_NO) 
			 WHERE ZTBDelivery.CTR_CD='${DATA.CTR_CD}' AND ZTBDelivery.DELIVERY_DATE BETWEEN '${DATA.START_DATE}' AND  '${DATA.END_DATE}' 
           GROUP BY  DATEPART(YYYY, DATEADD(day,1,DELIVERY_DATE)), DATEPART( ISOWK, DATEADD(day,1,DELIVERY_DATE))  
           ORDER BY DEL_WEEK DESC) AS AA 
         ORDER BY AA.DEL_YEAR DESC, AA.DEL_WEEK DESC `;
          checkkq = await queryDB(setpdQuery);
          ////console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "kd_monthlyclosing":
        (async () => {
          //////console.log(DATA);
          let checkkq = "OK";
          let setpdQuery = `  SELECT  CONCAT(YEAR(ZTBDelivery.DELIVERY_DATE),'_', MONTH(ZTBDelivery.DELIVERY_DATE)) AS MONTH_YW, YEAR(ZTBDelivery.DELIVERY_DATE) AS MONTH_YEAR,  MONTH(ZTBDelivery.DELIVERY_DATE) AS MONTH_NUM, SUM(ZTBDelivery.DELIVERY_QTY) AS DELIVERY_QTY,  SUM(ZTBDelivery.DELIVERY_QTY * ZTBPOTable.PROD_PRICE) AS DELIVERED_AMOUNT FROM ZTBDelivery 
          LEFT JOIN ZTBPOTable ON (ZTBPOTable.CTR_CD = ZTBDelivery.CTR_CD AND ZTBPOTable.CUST_CD = ZTBDelivery.CUST_CD AND ZTBPOTable.G_CODE = ZTBDelivery.G_CODE AND ZTBPOTable.PO_NO = ZTBDelivery.PO_NO)		
		  WHERE ZTBDelivery.CTR_CD='${DATA.CTR_CD}' AND ZTBDelivery.DELIVERY_DATE BETWEEN '${DATA.START_DATE}' AND  '${DATA.END_DATE}' 
          GROUP BY YEAR(ZTBDelivery.DELIVERY_DATE), MONTH(ZTBDelivery.DELIVERY_DATE) 	
ORDER BY  YEAR(ZTBDelivery.DELIVERY_DATE) DESC, MONTH(ZTBDelivery.DELIVERY_DATE)  DESC`;
          checkkq = await queryDB(setpdQuery);
          ////console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "kd_annuallyclosing":
        (async () => {
          //////console.log(DATA);
          let checkkq = "OK";
          let setpdQuery = ` SELECT  YEAR(ZTBDelivery.DELIVERY_DATE) AS YEAR_NUM, SUM(ZTBDelivery.DELIVERY_QTY) AS DELIVERY_QTY,  SUM(ZTBDelivery.DELIVERY_QTY * ZTBPOTable.PROD_PRICE) AS DELIVERED_AMOUNT FROM ZTBDelivery 
          LEFT JOIN ZTBPOTable ON (ZTBPOTable.CTR_CD = ZTBDelivery.CTR_CD AND ZTBPOTable.CUST_CD = ZTBDelivery.CUST_CD AND ZTBPOTable.G_CODE = ZTBDelivery.G_CODE AND ZTBPOTable.PO_NO = ZTBDelivery.PO_NO) 
WHERE ZTBDelivery.CTR_CD='${DATA.CTR_CD}' AND ZTBDelivery.DELIVERY_DATE BETWEEN '${DATA.START_DATE}' AND  '${DATA.END_DATE}' 
          GROUP BY YEAR(ZTBDelivery.DELIVERY_DATE)  ORDER BY YEAR_NUM ASC `;
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          ////console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "kd_runningpobalance":
        (async () => {
          //////console.log(DATA);
          let checkkq = "OK";
          let setpdQuery = ` SELECT  BB.PO_YEAR, BB.PO_WEEK, BB.YEAR_WEEK, 
          BB.RUNNING_PO_QTY, 
          CASE WHEN BB.RUNNING_DEL_QTY=0 THEN BB.PREV_RUNNING_DEL_QTY ELSE BB.RUNNING_DEL_QTY END AS RUNNING_DEL_QTY, 
          CASE WHEN BB.RUNNING_DEL_QTY=0 THEN BB.RUNNING_PO_QTY- BB.PREV_RUNNING_DEL_QTY ELSE BB.RUNNING_PO_BALANCE END AS RUNNING_PO_BALANCE, 
          BB.RUNNING_PO_AMOUNT,
          CASE WHEN BB.RUNNING_DEL_AMOUNT=0 THEN BB.PREV_RUNNING_DEL_AMOUNT ELSE BB.RUNNING_DEL_QTY END AS RUNNING_DEL_AMOUNT, 
          CASE WHEN BB.RUNNING_DEL_AMOUNT=0 THEN BB.RUNNING_PO_AMOUNT- BB.PREV_RUNNING_DEL_AMOUNT ELSE BB.RUNNING_BALANCE_AMOUNT END AS RUNNING_BALANCE_AMOUNT,
          COUNT(PO_YEAR) OVER(ORDER BY PO_YEAR ASC, PO_WEEK ASC) AS ROWNUM 
          FROM 
          ( SELECT TOP 100000 AA.PO_YEAR, AA.PO_WEEK, CONCAT(AA.PO_YEAR,'_', AA.PO_WEEK) AS YEAR_WEEK, isnull(AA.RUNNING_PO_QTY,0) AS RUNNING_PO_QTY, isnull(BB.RUNNING_DEL_QTY,0) AS RUNNING_DEL_QTY, (isnull(AA.RUNNING_PO_QTY,0)-isnull(BB.RUNNING_DEL_QTY,0)) AS RUNNING_PO_BALANCE, isnull(AA.RUNNING_PO_AMOUNT,0) AS RUNNING_PO_AMOUNT, isnull(BB.RUNNING_DEL_AMOUNT,0) AS RUNNING_DEL_AMOUNT, (isnull(AA.RUNNING_PO_AMOUNT,0)-isnull(BB.RUNNING_DEL_AMOUNT,0)) AS RUNNING_BALANCE_AMOUNT,
          isnull(LAG(BB.RUNNING_DEL_QTY) OVER (ORDER BY AA.PO_YEAR ASC, AA.PO_WEEK ASC),0) AS PREV_RUNNING_DEL_QTY,
          isnull(LAG(BB.RUNNING_DEL_AMOUNT) OVER (ORDER BY AA.PO_YEAR ASC, AA.PO_WEEK ASC),0) AS PREV_RUNNING_DEL_AMOUNT
          FROM 
          (
            SELECT XX.PO_YEAR, XX.PO_WEEK, SUM(CAST(XX.WEEKLY_PO_QTY AS Float)) OVER(ORDER BY XX.PO_YEAR ASC, XX.PO_WEEK ASC) AS RUNNING_PO_QTY,
            SUM(CAST(XX.WEEKLY_PO_AMOUNT AS Float)) OVER(ORDER BY XX.PO_YEAR ASC, XX.PO_WEEK ASC) AS RUNNING_PO_AMOUNT
            FROM 
            (
            SELECT DISTINCT YEAR(PO_DATE) AS PO_YEAR,DATEPART( ISOWK, DATEADD(day,2,PO_DATE)) As PO_WEEK, 
            SUM(ZTBPOTable.PO_QTY) OVER(PARTITION BY YEAR(PO_DATE),DATEPART(ISOWK, DATEADD(day,2,PO_DATE))) AS WEEKLY_PO_QTY,
            SUM(ZTBPOTable.PO_QTY*ZTBPOTable.PROD_PRICE) OVER(PARTITION BY YEAR(PO_DATE),DATEPART(ISOWK, DATEADD(day,2,PO_DATE))) AS WEEKLY_PO_AMOUNT
            FROM ZTBPOTable
            WHERE ZTBPOTable.PO_DATE <='${DATA.TO_DATE}' AND ZTBPOTable.CTR_CD='${DATA.CTR_CD}'
            ) AS XX
          ) AS AA
          LEFT JOIN 
          (
            SELECT XX.DEL_YEAR, XX.DEL_WEEK, SUM(CAST(XX.WEEKLY_DEL_QTY AS Float)) OVER(ORDER BY XX.DEL_YEAR ASC, XX.DEL_WEEK ASC) AS RUNNING_DEL_QTY,
            SUM(CAST(XX.WEEKLY_DEL_AMOUNT AS Float)) OVER(ORDER BY XX.DEL_YEAR ASC, XX.DEL_WEEK ASC) AS RUNNING_DEL_AMOUNT
            FROM 
            (
            SELECT DISTINCT YEAR(DELIVERY_DATE) AS DEL_YEAR,DATEPART( ISOWK, DATEADD(day,2,DELIVERY_DATE)) As DEL_WEEK, 
            SUM(ZTBDelivery.DELIVERY_QTY) OVER(PARTITION BY YEAR(DELIVERY_DATE),DATEPART(ISOWK, DATEADD(day,2,DELIVERY_DATE))) AS WEEKLY_DEL_QTY,
            SUM(ZTBDelivery.DELIVERY_QTY* ZTBPOTable.PROD_PRICE) OVER(PARTITION BY YEAR(DELIVERY_DATE),DATEPART(ISOWK, DATEADD(day,2,DELIVERY_DATE))) AS WEEKLY_DEL_AMOUNT
            FROM ZTBDelivery LEFT JOIN ZTBPOTable ON (ZTBDelivery.CUST_CD = ZTBPOTable.CUST_CD AND ZTBDelivery.G_CODE = ZTBPOTable.G_CODE AND ZTBDelivery.PO_NO = ZTBPOTable.PO_NO AND ZTBDelivery.CTR_CD = ZTBPOTable.CTR_CD)
            WHERE ZTBDelivery.DELIVERY_DATE <= '${DATA.TO_DATE}' AND ZTBDelivery.CTR_CD='${DATA.CTR_CD}'
            ) AS XX
          ) AS BB
            ON (AA.PO_WEEK = BB.DEL_WEEK AND AA.PO_YEAR = BB.DEL_YEAR)
            ORDER BY PO_YEAR ASC, PO_WEEK DESC
          ) AS BB 
          ORDER BY BB.PO_YEAR DESC, BB.PO_WEEK DESC`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          ////console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "kd_weeklypo":
        (async () => {
          //////console.log(DATA);
          let checkkq = "OK";
          let setpdQuery = `SELECT  DISTINCT YEAR(PO_DATE) AS PO_YEAR,DATEPART( ISOWK, DATEADD(day,2,PO_DATE)) As PO_WEEK, CONCAT(YEAR(PO_DATE),'_', DATEPART( ISOWK, DATEADD(day,2,PO_DATE))) AS YEAR_WEEK ,
                    SUM(ZTBPOTable.PO_QTY) OVER(PARTITION BY YEAR(PO_DATE),DATEPART(ISOWK, DATEADD(day,2,PO_DATE))) AS WEEKLY_PO_QTY
                    FROM ZTBPOTable
                    WHERE ZTBPOTable.CTR_CD='${DATA.CTR_CD}'
                    ORDER BY YEAR(PO_DATE) DESC ,DATEPART( ISOWK, DATEADD(day,2,PO_DATE)) DESC`;
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          ////console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "kd_weeklydelivery":
        (async () => {
          //////console.log(DATA);
          let checkkq = "OK";
          let setpdQuery = `SELECT DISTINCT YEAR(DELIVERY_DATE) AS DEL_YEAR,DATEPART( ISOWK, DATEADD(day,2,DELIVERY_DATE)) As DEL_WEEK,  CONCAT(YEAR(DELIVERY_DATE),'_', DATEPART( ISOWK, DATEADD(day,2,DELIVERY_DATE))) AS YEAR_WEEK ,
                    SUM(ZTBDelivery.DELIVERY_QTY) OVER(PARTITION BY YEAR(DELIVERY_DATE),DATEPART(ISOWK, DATEADD(day,2,DELIVERY_DATE))) AS WEEKLY_DELIVERY_QTY
                    FROM ZTBDelivery
                    WHERE ZTBDelivery.CTR_CD='${DATA.CTR_CD}'
                    ORDER BY YEAR(DELIVERY_DATE) DESC ,DATEPART( ISOWK, DATEADD(day,2,DELIVERY_DATE)) DESC`;
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          ////console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "kd_pooverweek":
        (async () => {
          //////console.log(DATA);
          let checkkq = "OK";
          let setpdQuery = `SELECT  AA.YEAR_WEEK, AA.PO_YEAR, AA.PO_WEEK, AA.WEEKLY_PO_QTY, AA.WEEKLY_PO_AMOUNT  FROM (SELECT DISTINCT  TOP 1000 YEAR(PO_DATE) AS PO_YEAR,DATEPART( ISOWK, DATEADD(day,1,PO_DATE)) As PO_WEEK, CONCAT(YEAR(PO_DATE),'_', DATEPART( ISOWK, DATEADD(day,1,PO_DATE))) AS YEAR_WEEK ,
          SUM(ZTBPOTable.PO_QTY) OVER(PARTITION BY YEAR(PO_DATE),DATEPART(ISOWK, DATEADD(day,1,PO_DATE))) AS WEEKLY_PO_QTY,
          SUM(ZTBPOTable.PO_QTY*ZTBPOTable.PROD_PRICE) OVER(PARTITION BY YEAR(PO_DATE),DATEPART(ISOWK, DATEADD(day,1,PO_DATE))) AS WEEKLY_PO_AMOUNT
          FROM ZTBPOTable  
         WHERE ZTBPOTable.CTR_CD='${DATA.CTR_CD}' AND PO_DATE BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE}'
          ORDER BY YEAR(PO_DATE) ASC ,DATEPART( ISOWK, DATEADD(day,1,PO_DATE)) DESC) AS AA ORDER BY AA.PO_YEAR DESC, AA.PO_WEEK DESC`;
          checkkq = await queryDB(setpdQuery);
          ////console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "tratonlieu":
        (async () => {
          //////console.log(DATA);
          let checkkq = "OK";
          let condition = `WHERE M090.CTR_CD='${DATA.CTR_CD}' `;
          if (DATA.M_NAME !== "") {
            condition += ` AND M090.M_NAME LIKE '%${DATA.M_NAME}%'`;
          }
          if (DATA.M_CODE !== "") {
            condition += ` AND M090.M_CODE = '${DATA.M_CODE}'`;
          }
          if (DATA.JUSTBALANCE === true) {
            condition += ` AND ((isnull(STOCK_CFM_NM1,0) + isnull(STOCK_CFM_NM2,0))  <>0 OR (isnull(HOLDING_CFM_NM1,0)+ isnull(HOLDING_CFM_NM2,0)) <>0)`;
          }
          let setpdQuery = `SELECT TDS, M_CODE, M_NAME, WIDTH_CD, isnull(STOCK_CFM_NM1,0) AS TON_NM1, isnull(STOCK_CFM_NM2,0) AS TON_NM2, isnull(HOLDING_CFM_NM1,0) AS HOLDING_NM1, isnull(HOLDING_CFM_NM2,0) AS HOLDING_NM2, (isnull(STOCK_CFM_NM1,0) + isnull(STOCK_CFM_NM2,0)) AS TOTAL_OK, (isnull(HOLDING_CFM_NM1,0)+ isnull(HOLDING_CFM_NM1,0)) AS TOTAL_HOLDING FROM M090  ${condition}`;
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          ////console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "tranhaplieu":
        (async () => {
          //////console.log(DATA);
          let checkkq = "OK";
          let condition = `WHERE I222.INS_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE} 23:59:59' `;
          if (DATA.M_NAME !== "") {
            condition += ` AND M090.M_NAME LIKE '%${DATA.M_NAME}%'`;
          }
          if (DATA.ROLL_NO_START != "" && DATA.ROLL_NO_STOP != "") {
            condition += ` AND SUBSTRING(M_LOT_NO,7,10) BETWEEN '${DATA.ROLL_NO_START}' AND '${DATA.ROLL_NO_STOP}'`;
          }
          let setpdQuery = ` SELECT  M1102.CUST_NAME_KD AS MAKER, I222.LOTNCC, I222.QC_PASS, I222.QC_PASS_EMPL, I222.QC_PASS_DATE, I222.M_LOT_NO, I222.M_CODE,M090.M_NAME, M090.WIDTH_CD, I222.IN_CFM_QTY,  I222.ROLL_QTY, (I222.IN_CFM_QTY * I222.ROLL_QTY) AS TOTAL_IN_QTY, I222.INS_DATE, M110.CUST_NAME_KD, I222.USE_YN, I221.INVOICE, I221.EXP_DATE, I222.LOC_CD,I222.FACTORY, CASE WHEN CODE_50 = '01' THEN 'GC'  WHEN CODE_50 = '02' THEN 'SK' WHEN CODE_50 = '03' THEN 'KD' WHEN CODE_50 = '04' THEN 'VN' WHEN CODE_50 = '05' THEN 'SAMPLE' WHEN CODE_50 = '06' THEN 'Vai bac 4' ELSE 'ETC' END AS PHAN_LOAI      FROM I222 					
                    LEFT JOIN  M110 ON (I222.CUST_CD = M110.CUST_CD AND I222.CTR_CD = M110.CTR_CD)
                    LEFT JOIN M090 ON (M090.M_CODE=  I222.M_CODE AND I222.CTR_CD = M090.CTR_CD)
					LEFT JOIN ZTB_MATERIAL_TB ON (ZTB_MATERIAL_TB.CTR_CD = M090.CTR_CD AND ZTB_MATERIAL_TB.M_NAME = M090.M_NAME)
					LEFT JOIN M110 AS M1102 ON (M1102.CTR_CD = ZTB_MATERIAL_TB.CTR_CD AND M1102.CUST_CD = ZTB_MATERIAL_TB.CUST_CD)
					LEFT JOIN I221 ON (I221.CTR_CD = I222.CTR_CD AND I221.IN_DATE = I222.IN_DATE AND I221.IN_NO = I222.IN_NO AND I221.IN_SEQ = I222.IN_SEQ)
                    ${condition}
                    AND I222.CTR_CD='${DATA.CTR_CD}'
                    ORDER BY I222.INS_DATE DESC`;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          ////console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "traxuatlieu":
        (async () => {
          //////console.log(DATA);
          let checkkq = "OK";
          let condition = ` WHERE O302.CTR_CD='${DATA.CTR_CD}'  `;
          if (DATA.ALLTIME !== true) {
            condition += ` AND O302.INS_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE} 23:59:59' `;
          }
          if (DATA.G_NAME !== "") {
            condition += ` AND M100.G_NAME LIKE '%${DATA.G_NAME}%'`;
          }
          if (DATA.M_NAME !== "") {
            condition += ` AND M090.M_NAME LIKE '%${DATA.M_NAME}%'`;
          }
          if (DATA.M_CODE !== "") {
            condition += ` AND M090.M_CODE = '${DATA.M_CODE}'`;
          }
          if (DATA.PROD_REQUEST_NO !== "") {
            condition += ` AND P400.PROD_REQUEST_NO = '${DATA.PROD_REQUEST_NO}'`;
          }
          if (DATA.PLAN_ID !== "") {
            condition += ` AND O302.PLAN_ID ='${DATA.PLAN_ID}'`;
          }
          let setpdQuery = `  SELECT  M100.G_CODE, M100.G_NAME, P400.PROD_REQUEST_NO, O302.PLAN_ID, M090.M_CODE, M090.M_NAME, M090.WIDTH_CD,I222.LOTNCC, O302.M_LOT_NO, O302.OUT_CFM_QTY, O302.ROLL_QTY, (O302.OUT_CFM_QTY* O302.ROLL_QTY) AS TOTAL_OUT_QTY, O302.INS_DATE,O302.INS_EMPL, O302.INS_RECEPTION 
                    FROM O302
                    LEFT JOIN O301 ON (O302.OUT_DATE = O301.OUT_DATE AND O302.OUT_NO = O301.OUT_NO AND O301.OUT_SEQ = O302.OUT_SEQ AND O302.CTR_CD = O301.CTR_CD)
                    LEFT JOIN O300 ON (O300.OUT_DATE = O301.OUT_DATE AND O300.OUT_NO = O301.OUT_NO AND O300.CTR_CD = O301.CTR_CD)
                    LEFT JOIN P400 ON (O300.PROD_REQUEST_NO = P400.PROD_REQUEST_NO AND O300.CTR_CD = P400.CTR_CD) 
                    LEFT JOIN M100 ON (P400.G_CODE = M100.G_CODE AND P400.CTR_CD = M100.CTR_CD)
                    LEFT JOIN M090 ON (M090.M_CODE = O302.M_CODE AND O302.CTR_CD = M090.CTR_CD) 
                    LEFT JOIN I222 ON (I222.M_LOT_NO = O302.M_LOT_NO AND O302.CTR_CD = I222.CTR_CD)
                    ${condition}                   
                    ORDER BY O302.INS_DATE DESC`;
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          ////console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "setngoaiquan":
        (async () => {
          let EMPL_NO = req.payload_data["EMPL_NO"];
          //////console.log(DATA);
          let checkkq = "OK";
          let setpdQuery = ` UPDATE M100 SET NO_INSPECTION= '${DATA.VALUE}', UPD_DATE=GETDATE(), UPD_EMPL='${EMPL_NO}' WHERE CTR_CD='${DATA.CTR_CD}'  AND G_CODE='${DATA.G_CODE}'`;
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          ////console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "resetbanve":
        (async () => {
          let EMPL_NO = req.payload_data["EMPL_NO"];
          //////console.log(DATA);
          let checkkq = "OK";
          let setpdQuery = ` UPDATE M100 SET BANVE= 'N', PDBV='${DATA.VALUE}', INS_DATE='${moment().format('YYYY-MM-DD HH:mm:ss')}', INS_EMPL='${EMPL_NO}' WHERE CTR_CD='${DATA.CTR_CD}'  AND G_CODE='${DATA.G_CODE}'`;
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          ////console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "updateBEP":
        (async () => {
          let EMPL_NO = req.payload_data["EMPL_NO"];
          //////console.log(DATA);
          let checkkq = "OK";
          let setpdQuery = ` UPDATE M100 SET BEP= '${DATA.BEP}' WHERE CTR_CD='${DATA.CTR_CD}'  AND G_CODE='${DATA.G_CODE}'`;
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          ////console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "updateLossKT":
        (async () => {
          let EMPL_NO = req.payload_data["EMPL_NO"];
          //////console.log(DATA);
          let checkkq = "OK";
          let setpdQuery = ` UPDATE M100 SET LOSS_KT= '${DATA.LOSS_KT}' WHERE CTR_CD='${DATA.CTR_CD}'  AND G_CODE='${DATA.G_CODE}'`;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          ////console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "pdbanve":
        (async () => {
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          if (
            (JOB_NAME === "Sub Leader" || JOB_NAME === "Leader") &&
            (SUBDEPTNAME == "PQC1" || SUBDEPTNAME == "PQC3")
          ) {
            //////console.log(DATA);
            let checkkq = "OK";
            let setpdQuery = ` UPDATE M100 SET PDBV= 'Y', PDBV_EMPL='${EMPL_NO}', PDBV_DATE=GETDATE() WHERE CTR_CD='${DATA.CTR_CD}'  AND G_CODE='${DATA.G_CODE}'`;
            ////console.log(setpdQuery);
            checkkq = await queryDB(setpdQuery);
            ////console.log(checkkq);
            res.send(checkkq);
          } else {
            res.send({
              tk_status: "NG",
              message: "Không đủ quyền hạn, cần PQC phê duyệt",
            });
          }
        })();
        break;
      case "trapqc1data":
        (async () => {
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `SELECT  M110.CUST_NAME_KD,M100.DESCR, ZTBPQC1TABLE.FACTORY, ZTBPQC1TABLE.PQC1_ID,ZTBPQC1TABLE.PLAN_ID, ZTBPQC1TABLE.SETTING_OK_TIME,ZTBPQC1TABLE.INSPECT_SAMPLE_QTY, CONCAT(datepart(YEAR,ZTBPQC1TABLE.SETTING_OK_TIME),'_',datepart(ISO_WEEK,DATEADD(day,2,ZTBPQC1TABLE.SETTING_OK_TIME))) AS YEAR_WEEK,ZTBPQC1TABLE.PROCESS_LOT_NO,M100.G_NAME,M100.G_NAME_KD,ZTBPQC1TABLE.LINEQC_PIC AS LINEQC_PIC,ZTBPQC1TABLE.PROD_PIC,ZTBPQC1TABLE.PROD_LEADER,ZTBPQC1TABLE.LINE_NO,ZTBPQC1TABLE.STEPS,ZTBPQC1TABLE.CAVITY,M100.PROD_LAST_PRICE,(M100.PROD_LAST_PRICE*ZTBPQC1TABLE.INSPECT_SAMPLE_QTY) AS SAMPLE_AMOUNT, ZTBPQC1TABLE.CNDB_ENCODES, ZTBPQC1TABLE.REMARK,ZTBPQC1TABLE.INS_DATE,ZTBPQC1TABLE.UPD_DATE, ZTBPQC3TABLE.PQC3_ID, ZTBPQC3TABLE.OCCURR_TIME, ZTBPQC3TABLE.INSPECT_QTY, ZTBPQC3TABLE.DEFECT_QTY, ZTBPQC3TABLE.DEFECT_PHENOMENON,  ZTBPQC1TABLE.PROD_REQUEST_NO,P400.PROD_REQUEST_QTY,P400.PROD_REQUEST_DATE, ZTBPQC1TABLE.IMG_1,ZTBPQC1TABLE.IMG_2,ZTBPQC1TABLE.IMG_3
                        FROM
                       ZTBPQC1TABLE
                       LEFT JOIN P400 ON (P400.PROD_REQUEST_NO = ZTBPQC1TABLE.PROD_REQUEST_NO AND P400.CTR_CD = ZTBPQC1TABLE.CTR_CD)
                       LEFT JOIN M100 ON (M100.G_CODE = ZTBPQC1TABLE.G_CODE AND M100.CTR_CD = ZTBPQC1TABLE.CTR_CD)
                       LEFT JOIN M110 ON (M110.CUST_CD = P400.CUST_CD AND M110.CTR_CD = P400.CTR_CD)
                       LEFT JOIN  ZTBPQC3TABLE  ON (ZTBPQC1TABLE.PQC1_ID= ZTBPQC3TABLE.PQC1_ID AND ZTBPQC1TABLE.CTR_CD= ZTBPQC3TABLE.CTR_CD)
                       ${generate_condition_pqc1(
            DATA.ALLTIME,
            DATA.FROM_DATE,
            DATA.TO_DATE,
            DATA.CUST_NAME,
            DATA.G_CODE,
            DATA.G_NAME,
            DATA.PROD_REQUEST_NO,
            DATA.PROCESS_LOT_NO,
            DATA.ID,
            DATA.FACTORY,
            DATA.CTR_CD
          )} 
                       ORDER BY ZTBPQC1TABLE.PQC1_ID DESC`;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
          ////console.log(checkkq);
        })();
        break;
      case "trapqc3data":
        (async () => {
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `SELECT M110.CUST_NAME_KD,M100.DESCR, CONCAT(datepart(YEAR,ZTBPQC3TABLE.OCCURR_TIME),'_',datepart(ISO_WEEK,DATEADD(day,2,ZTBPQC3TABLE.OCCURR_TIME))) AS YEAR_WEEK,ZTBPQC3TABLE.PQC3_ID,ZTBPQC3TABLE.PQC1_ID,ZTBPQC1TABLE.FACTORY,ZTBPQC3TABLE.PROD_REQUEST_NO,P400.PROD_REQUEST_DATE,ZTBPQC3TABLE.PROCESS_LOT_NO,ZTBPQC3TABLE.G_CODE,M100.G_NAME,M100.G_NAME_KD,M100.PROD_LAST_PRICE,ZTBPQC3TABLE.LINEQC_PIC,ZTBPQC1TABLE.PROD_PIC,ZTBPQC1TABLE.PROD_LEADER,ZTBPQC1TABLE.LINE_NO,ZTBPQC3TABLE.OCCURR_TIME,ZTBPQC3TABLE.INSPECT_QTY,ZTBPQC3TABLE.DEFECT_QTY,(ZTBPQC3TABLE.DEFECT_QTY *M100.PROD_LAST_PRICE ) AS DEFECT_AMOUNT,ZTBPQC3TABLE.DEFECT_PHENOMENON,ZTBPQC3TABLE.DEFECT_IMAGE_LINK,ZTBPQC3TABLE.REMARK,ZTBPQC3TABLE.WORST5,ZTBPQC3TABLE.WORST5_MONTH, ZTBPQC3TABLE.ERR_CODE, ZTBPQC3TABLE.NG_NHAN, ZTBPQC3TABLE.DOI_SACH, ZTBPQC3TABLE.STATUS
                        FROM ZTBPQC3TABLE 
                       LEFT JOIN ZTBPQC1TABLE ON (ZTBPQC3TABLE.PQC1_ID = ZTBPQC1TABLE.PQC1_ID AND ZTBPQC3TABLE.CTR_CD = ZTBPQC1TABLE.CTR_CD)
                       LEFT JOIN M100 ON (M100.G_CODE = ZTBPQC3TABLE.G_CODE AND M100.CTR_CD = ZTBPQC3TABLE.CTR_CD)
                       LEFT JOIN P400 ON (P400.PROD_REQUEST_NO = ZTBPQC3TABLE.PROD_REQUEST_NO AND P400.CTR_CD = ZTBPQC3TABLE.CTR_CD)
                       LEFT JOIN M110 ON (M110.CUST_CD = P400.CUST_CD AND M110.CTR_CD = P400.CTR_CD)
                       ${generate_condition_pqc3(
            DATA.ALLTIME,
            DATA.FROM_DATE,
            DATA.TO_DATE,
            DATA.CUST_NAME,
            DATA.G_CODE,
            DATA.G_NAME,
            DATA.PROD_REQUEST_NO,
            DATA.PROCESS_LOT_NO,
            DATA.ID,
            DATA.FACTORY,
            DATA.CTR_CD
          )} 
                       ORDER BY ZTBPQC3TABLE.PQC3_ID DESC`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
          ////console.log(checkkq);
        })();
        break;
      case "tradaofilm":
        (async () => {
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = `WHERE 1=1 `;
          if (DATA.ALLTIME !== true) {
            condition += ` AND NGAYBANGIAO BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE}'`
          }
          if (DATA.G_CODE !== '') {
            condition += ` AND KNIFE_FILM.G_CODE ='${DATA.G_CODE}'`
          }
          if (DATA.G_NAME !== '') {
            condition += ` AND M100.G_NAME LIKE '%${DATA.G_NAME}%'`
          }
          if (DATA.FACTORY !== 'All') {
            condition += ` AND KNIFE_FILM.FACTORY_NAME = '${DATA.FACTORY}'`
          }
          let setpdQuery = `
            SELECT KNIFE_FILM_ID,FACTORY_NAME,NGAYBANGIAO,KNIFE_FILM.G_CODE, M100.G_NAME, LOAIBANGIAO_PDP,LOAIPHATHANH,SOLUONG,SOLUONGOHP,LYDOBANGIAO,PQC_EMPL_NO,RND_EMPL_NO,SX_EMPL_NO,MA_DAO, CFM_GIAONHAN, CFM_INS_EMPL, CFM_DATE, KNIFE_FILM_STATUS, KNIFE_FILM.G_WIDTH, KNIFE_FILM.G_LENGTH,  M110.CUST_NAME_KD AS VENDOR, KNIFE_FILM.TOTAL_PRESS, REMARK 
            FROM KNIFE_FILM
            LEFT JOIN M100 ON (M100.G_CODE = KNIFE_FILM.G_CODE AND M100.CTR_CD = KNIFE_FILM.CTR_CD)
            LEFT JOIN M110 ON (M110.CUST_CD = KNIFE_FILM.CUST_CD AND M110.CTR_CD = KNIFE_FILM.CTR_CD)
            ${condition}
            AND KNIFE_FILM.CTR_CD='${DATA.CTR_CD}'
            ORDER BY KNIFE_FILM_ID DESC
          `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
          ////console.log(checkkq);
        })();
        break;
      case "traCNDB":
        (async () => {
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = ` SELECT Z_CNDBTABLE.CNDB_DATE,Z_CNDBTABLE.CNDB_NO,Z_CNDBTABLE.CNDB_ENCODE,Z_CNDBTABLE.M_NAME,Z_CNDBTABLE.DEFECT_NAME,Z_CNDBTABLE.DEFECT_CONTENT,Z_CNDBTABLE.REG_EMPL_NO,Z_CNDBTABLE.REMARK,Z_CNDBTABLE.M_NAME2,Z_CNDBTABLE.INS_DATE,Z_CNDBTABLE.APPROVAL_STATUS,Z_CNDBTABLE.APPROVAL_EMPL,Z_CNDBTABLE.APPROVAL_DATE,Z_SPECIAL_PRODUCT.G_CODE,Z_SPECIAL_PRODUCT.G_NAME,Z_SPECIAL_PRODUCT.CNDB_QTY 
                        FROM Z_CNDBTABLE 
                        LEFT JOIN Z_SPECIAL_PRODUCT ON (Z_SPECIAL_PRODUCT.CNDB_ENCODE = Z_CNDBTABLE.CNDB_ENCODE AND Z_SPECIAL_PRODUCT.CTR_CD = Z_CNDBTABLE.CTR_CD)
                        WHERE Z_CNDBTABLE.CTR_CD='${DATA.CTR_CD}'
                        ORDER BY CNDB_DATE DESC `;
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
          ////console.log(checkkq);
        })();
        break;
      case "traPOSummaryTotal":
        (async () => {
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `  SELECT  SUM(cast(ZTBPOTable.PO_QTY as bigint)) As PO_QTY, SUM(cast(AA.TotalDelivered as bigint)) as TOTAL_DELIVERED, SUM(cast((ZTBPOTable.PO_QTY-AA.TotalDelivered) as bigint)) As PO_BALANCE,SUM((ZTBPOTable.PO_QTY*ZTBPOTable.PROD_PRICE)) As PO_AMOUNT , SUM((AA.TotalDelivered*ZTBPOTable.PROD_PRICE)) As DELIVERED_AMOUNT, SUM(((ZTBPOTable.PO_QTY-AA.TotalDelivered)*ZTBPOTable.PROD_PRICE)) As BALANCE_AMOUNT FROM (SELECT ZTBPOTable.CTR_CD, ZTBPOTable.EMPL_NO, ZTBPOTable.CUST_CD, ZTBPOTable.G_CODE, ZTBPOTable.PO_NO, isnull(SUM(ZTBDelivery.DELIVERY_QTY),0) AS TotalDelivered FROM ZTBPOTable  LEFT JOIN ZTBDelivery  ON (ZTBDelivery.CTR_CD = ZTBPOTable.CTR_CD AND ZTBDelivery.CUST_CD = ZTBPOTable.CUST_CD AND ZTBDelivery.G_CODE = ZTBPOTable.G_CODE AND ZTBDelivery.PO_NO = ZTBPOTable.PO_NO)  GROUP BY ZTBPOTable.CTR_CD,ZTBPOTable.EMPL_NO,ZTBPOTable.G_CODE,ZTBPOTable.CUST_CD,ZTBPOTable.PO_NO) AS AA LEFT JOIN M010 ON (M010.EMPL_NO = AA.EMPL_NO AND M010.CTR_CD = AA.CTR_CD) LEFT JOIN M100 ON (M100.G_CODE = AA.G_CODE AND M100.CTR_CD = AA.CTR_CD) LEFT JOIN ZTBPOTable ON (AA.CUST_CD = ZTBPOTable.CUST_CD AND AA.G_CODE = ZTBPOTable.G_CODE AND AA.PO_NO = ZTBPOTable.PO_NO AND AA.CTR_CD = ZTBPOTable.CTR_CD)  JOIN M110 ON (M110.CUST_CD = AA.CUST_CD AND M110.CTR_CD = AA.CTR_CD) WHERE ZTBPOTable.CTR_CD='${DATA.CTR_CD}'`;
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
          ////console.log(checkkq);
        })();
        break;
      case "customerRevenue":
        (async () => {
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = ` SELECT * FROM (
                            SELECT AA.CUST_NAME_KD, SUM(AA.DELIVERY_AMOUNT) AS DELIVERY_AMOUNT FROM 
                            (SELECT M010.EMPL_NAME, ZTBDelivery.G_CODE,ZTBDelivery.DELIVERY_QTY,ZTBDelivery.DELIVERY_DATE, M110.CUST_NAME_KD, (ZTBDelivery.DELIVERY_QTY * ZTBPOTable.PROD_PRICE) AS DELIVERY_AMOUNT
                            FROM ZTBDelivery
                            LEFT JOIN M110 ON (ZTBDelivery.CUST_CD = M110.CUST_CD AND ZTBDelivery.CTR_CD = M110.CTR_CD)
                            LEFT JOIN M010 ON (ZTBDelivery.EMPL_NO = M010.EMPL_NO AND ZTBDelivery.CTR_CD = M010.CTR_CD)
                            LEFT JOIN ZTBPOTable ON (ZTBDelivery.CUST_CD = ZTBPOTable.CUST_CD AND ZTBDelivery.G_CODE = ZTBPOTable.G_CODE AND ZTBDelivery.PO_NO = ZTBPOTable.PO_NO AND ZTBDelivery.CTR_CD = ZTBPOTable.CTR_CD)
                            WHERE ZTBDelivery.CTR_CD='${DATA.CTR_CD}' AND DELIVERY_DATE BETWEEN '${DATA.START_DATE}' AND '${DATA.END_DATE}') AS AA
                            GROUP BY AA.CUST_NAME_KD) AS BB
                            ORDER BY BB.DELIVERY_AMOUNT DESC `;
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
          ////console.log(checkkq);
        })();
        break;
      case "PICRevenue":
        (async () => {
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = ` SELECT * FROM (
                            SELECT AA.EMPL_NAME, SUM(AA.DELIVERY_AMOUNT) AS DELIVERY_AMOUNT FROM 
                            (SELECT M010.EMPL_NAME, ZTBDelivery.G_CODE,ZTBDelivery.DELIVERY_QTY,ZTBDelivery.DELIVERY_DATE, M110.CUST_NAME_KD, (ZTBDelivery.DELIVERY_QTY * ZTBPOTable.PROD_PRICE) AS DELIVERY_AMOUNT
                            FROM ZTBDelivery
                            LEFT JOIN M110 ON (ZTBDelivery.CUST_CD = M110.CUST_CD AND ZTBDelivery.CTR_CD = M110.CTR_CD)
                            LEFT JOIN M010 ON (ZTBDelivery.EMPL_NO = M010.EMPL_NO AND ZTBDelivery.CTR_CD = M010.CTR_CD)
                            LEFT JOIN ZTBPOTable ON (ZTBDelivery.CUST_CD = ZTBPOTable.CUST_CD AND ZTBDelivery.G_CODE = ZTBPOTable.G_CODE AND ZTBDelivery.PO_NO = ZTBPOTable.PO_NO AND ZTBDelivery.CTR_CD = ZTBPOTable.CTR_CD)
                            WHERE ZTBDelivery.CTR_CD='${DATA.CTR_CD}' AND DELIVERY_DATE BETWEEN '${DATA.START_DATE}' AND '${DATA.END_DATE}') AS AA
                            GROUP BY AA.EMPL_NAME) AS BB
                            ORDER BY BB.DELIVERY_AMOUNT DESC`;
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
          ////console.log(checkkq);
        })();
        break;
      case "POBalanceByCustomer":
        (async () => {
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `SELECT XX.CUST_NAME_KD, YY.TOTAL_PO_BALANCE, XX.TSP, XX.LABEL, XX.UV, XX.OLED, XX.TAPE, XX.RIBBON, XX.SPT, (YY.TOTAL_PO_BALANCE- XX.TSP- XX.LABEL- XX.UV- XX.OLED- XX.TAPE- XX.RIBBON- XX.SPT) AS OTHERS FROM  (SELECT  PV.CUST_NAME_KD, (isnull(PV.[TSP],0)+isnull(PV.[LABEL],0)+isnull(PV.[UV],0)+isnull(PV.[TAPE],0) + isnull(PV.[SPT],0)+ isnull(PV.[OLED],0)  + isnull(PV.[RIBBON],0)) As TOTAL_PO_BALANCE, isnull(PV.[TSP],0) As TSP, isnull(PV.[LABEL],0) As LABEL,isnull(PV.[UV],0) As UV, isnull(PV.[OLED],0) As OLED,isnull(PV.[TAPE],0) As TAPE, isnull(PV.[SPT],0) As SPT, isnull(PV.[RIBBON],0) As RIBBON FROM ( SELECT P.PO_BALANCE, P.PROD_TYPE, P.CUST_NAME_KD FROM (   SELECT AA.PO_NO,  M100.PROD_TYPE, M100.PROD_MAIN_MATERIAL, ZTBPOTable.PO_DATE,ZTBPOTable.RD_DATE, M110.CUST_NAME_KD, M100.G_NAME, M010.EMPL_NAME, AA.G_CODE, ZTBPOTable.PO_QTY, ZTBPOTable.PROD_PRICE, AA.TotalDelivered as TOTAL_DELIVERED, (ZTBPOTable.PO_QTY-AA.TotalDelivered) As PO_BALANCE,(ZTBPOTable.PO_QTY*ZTBPOTable.PROD_PRICE) As PO_AMOUNT , (AA.TotalDelivered*ZTBPOTable.PROD_PRICE) As DELIVERED_AMOUNT, ((ZTBPOTable.PO_QTY-AA.TotalDelivered)*ZTBPOTable.PROD_PRICE) As BALANCE_AMOUNT,DATEPART( MONTH, PO_DATE) AS POMONTH, DATEPART( ISOWK, PO_DATE) AS POWEEKNUM, YEAR(PO_DATE) As PO_YEAR, CASE     WHEN (ZTBPOTable.RD_DATE < GETDATE()-1) AND ((ZTBPOTable.PO_QTY-AA.TotalDelivered) <>0) THEN 'OVER'        ELSE 'OK' END AS OVERDUE, ZTBPOTable.REMARK, ZTBPOTable.PO_ID FROM (SELECT ZTBPOTable.CTR_CD, ZTBPOTable.EMPL_NO, ZTBPOTable.CUST_CD, ZTBPOTable.G_CODE, ZTBPOTable.PO_NO, isnull(SUM(ZTBDelivery.DELIVERY_QTY),0) AS TotalDelivered FROM ZTBPOTable  LEFT JOIN ZTBDelivery ON (ZTBDelivery.CTR_CD = ZTBPOTable.CTR_CD AND ZTBDelivery.CUST_CD = ZTBPOTable.CUST_CD AND ZTBDelivery.G_CODE = ZTBPOTable.G_CODE AND ZTBDelivery.PO_NO = ZTBPOTable.PO_NO) GROUP BY ZTBPOTable.CTR_CD,ZTBPOTable.EMPL_NO,ZTBPOTable.G_CODE,ZTBPOTable.CUST_CD,ZTBPOTable.PO_NO) AS AA LEFT JOIN M010 ON (M010.EMPL_NO = AA.EMPL_NO AND M010.CTR_CD = AA.CTR_CD) LEFT JOIN M100 ON (M100.G_CODE = AA.G_CODE AND M100.CTR_CD = AA.CTR_CD) LEFT JOIN ZTBPOTable ON (AA.CUST_CD = ZTBPOTable.CUST_CD AND AA.G_CODE = ZTBPOTable.G_CODE AND AA.PO_NO = ZTBPOTable.PO_NO AND AA.CTR_CD = ZTBPOTable.CTR_CD) JOIN M110 ON (M110.CUST_CD = AA.CUST_CD AND M110.CTR_CD = AA.CTR_CD) WHERE AA.CTR_CD='${DATA.CTR_CD}' ) AS P ) AS j PIVOT (SUM(j.PO_BALANCE) FOR j.PROD_TYPE IN ([TSP],[LABEL],[UV],[OLED],[TAPE],[SPT],[RIBBON])) AS PV ) AS XX JOIN /*customer sum po balance*/  (SELECT AA.CUST_NAME_KD, SUM(AA.PO_BALANCE) AS TOTAL_PO_BALANCE FROM (SELECT AA.PO_NO,  M100.PROD_TYPE, M100.PROD_MAIN_MATERIAL, ZTBPOTable.PO_DATE,ZTBPOTable.RD_DATE, M110.CUST_NAME_KD, M100.G_NAME, M010.EMPL_NAME, AA.G_CODE, ZTBPOTable.PO_QTY, ZTBPOTable.PROD_PRICE, AA.TotalDelivered as TOTAL_DELIVERED, (ZTBPOTable.PO_QTY-AA.TotalDelivered) As PO_BALANCE,(ZTBPOTable.PO_QTY*ZTBPOTable.PROD_PRICE) As PO_AMOUNT , (AA.TotalDelivered*ZTBPOTable.PROD_PRICE) As DELIVERED_AMOUNT, ((ZTBPOTable.PO_QTY-AA.TotalDelivered)*ZTBPOTable.PROD_PRICE) As BALANCE_AMOUNT,DATEPART( MONTH, PO_DATE) AS POMONTH, DATEPART( ISOWK, PO_DATE) AS POWEEKNUM, YEAR(PO_DATE) As PO_YEAR, CASE     WHEN (ZTBPOTable.RD_DATE < GETDATE()-1) AND ((ZTBPOTable.PO_QTY-AA.TotalDelivered) <>0) THEN 'OVER'        ELSE 'OK' END AS OVERDUE, ZTBPOTable.REMARK, ZTBPOTable.PO_ID FROM (SELECT ZTBPOTable.CTR_CD, ZTBPOTable.EMPL_NO, ZTBPOTable.CUST_CD, ZTBPOTable.G_CODE, ZTBPOTable.PO_NO, isnull(SUM(ZTBDelivery.DELIVERY_QTY),0) AS TotalDelivered FROM ZTBPOTable  LEFT JOIN ZTBDelivery ON (ZTBDelivery.CTR_CD = ZTBPOTable.CTR_CD AND ZTBDelivery.CUST_CD = ZTBPOTable.CUST_CD AND ZTBDelivery.G_CODE = ZTBPOTable.G_CODE AND ZTBDelivery.PO_NO = ZTBPOTable.PO_NO) GROUP BY ZTBPOTable.CTR_CD,ZTBPOTable.EMPL_NO,ZTBPOTable.G_CODE,ZTBPOTable.CUST_CD,ZTBPOTable.PO_NO) AS AA LEFT JOIN M010 ON (M010.EMPL_NO = AA.EMPL_NO AND M010.CTR_CD = AA.CTR_CD) LEFT JOIN M100 ON (M100.G_CODE = AA.G_CODE AND M100.CTR_CD = AA.CTR_CD) LEFT JOIN ZTBPOTable ON (AA.CUST_CD = ZTBPOTable.CUST_CD AND AA.G_CODE = ZTBPOTable.G_CODE AND AA.PO_NO = ZTBPOTable.PO_NO AND AA.CTR_CD = ZTBPOTable.CTR_CD) JOIN M110 ON (M110.CUST_CD = AA.CUST_CD AND M110.CTR_CD = AA.CTR_CD) WHERE AA.CTR_CD='${DATA.CTR_CD}') AS AA GROUP BY AA.CUST_NAME_KD ) AS YY ON XX.CUST_NAME_KD = YY.CUST_NAME_KD WHERE XX.TOTAL_PO_BALANCE >0 ORDER BY TOTAL_PO_BALANCE DESC`;
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
          ////console.log(checkkq);
        })();
        break;
      case "setnhamay":
        (async () => {
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `UPDATE ZTBEMPLINFO SET FACTORY_CODE = ${DATA.FACTORY} WHERE CTR_CD='${DATA.CTR_CD}' AND EMPL_NO='${DATA.EMPL_NO}'`;
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
          ////console.log(checkkq);
        })();
        break;
      case "baocaofcstss":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          console.log('weeknum2', DATA.FCSTWEEKNUM2)
          console.log('weeknum1', DATA.FCSTWEEKNUM1)
          let checkkq = "OK";
          let setpdQuery = `  
          SELECT FCST2.WEEKNO, FCST1.SEVT AS SEVT1,FCST1.SEV AS SEV1, FCST1.SAMSUNG_ASIA AS SAMSUNG_ASIA1, FCST1.TOTAL_SS AS TT_SS1, FCST2.SEVT AS SEVT2,FCST2.SEV AS SEV2, FCST2.SAMSUNG_ASIA AS SAMSUNG_ASIA2,FCST2.TOTAL_SS AS TT_SS2 FROM
           ( SELECT CASE WHEN LEN(WEEKNO) =2 THEN CONCAT('W0',SUBSTRING(WEEKNO,2,1)) ELSE WEEKNO END AS WEEKNO, isnull([SEVT],0) AS SEVT,isnull([SEV],0) AS SEV, isnull([SAMSUNG-ASIA],0) AS SAMSUNG_ASIA, (isnull([SEVT],0)+isnull([SEV],0)+ isnull([SAMSUNG-ASIA],0)) AS TOTAL_SS FROM ( SELECT CUST_NAME_KD, WEEKNO,FCST FROM (SELECT * FROM (SELECT M110. CUST_NAME_KD, SUM(ZTBFCSTTB.W1) AS W1,SUM(ZTBFCSTTB.W2) AS W2,SUM(ZTBFCSTTB.W3) AS W3,SUM(ZTBFCSTTB.W4) AS W4,SUM(ZTBFCSTTB.W5) AS W5,SUM(ZTBFCSTTB.W6) AS W6,SUM(ZTBFCSTTB.W7) AS W7,SUM(ZTBFCSTTB.W8) AS W8,SUM(ZTBFCSTTB.W9) AS W9,SUM(ZTBFCSTTB.W10) AS W10,SUM(ZTBFCSTTB.W11) AS W11,SUM(ZTBFCSTTB.W12) AS W12,SUM(ZTBFCSTTB.W13) AS W13,SUM(ZTBFCSTTB.W14) AS W14,SUM(ZTBFCSTTB.W15) AS W15,SUM(ZTBFCSTTB.W16) AS W16,SUM(ZTBFCSTTB.W17) AS W17,SUM(ZTBFCSTTB.W18) AS W18,SUM(ZTBFCSTTB.W19) AS W19,SUM(ZTBFCSTTB.W20) AS W20,SUM(ZTBFCSTTB.W21) AS W21,SUM(ZTBFCSTTB.W22) AS W22 FROM ZTBFCSTTB LEFT JOIN M110 ON (M110.CUST_CD= ZTBFCSTTB.CUST_CD AND M110.CTR_CD = ZTBFCSTTB.CTR_CD) WHERE ZTBFCSTTB.FCSTYEAR=${DATA.FCSTYEAR2} AND ZTBFCSTTB.FCSTWEEKNO=${DATA.FCSTWEEKNUM2} AND ZTBFCSTTB.CTR_CD='${DATA.CTR_CD}' GROUP BY M110. CUST_NAME_KD) AS AA) AS PVDT UNPIVOT ( FCST FOR WEEKNO IN (W1, W2, W3, W4, W5, W6, W7, W8, W9, W10, W11, W12, W13, W14, W15, W16, W17, W18, W19, W20, W21, W22) ) AS UNPV ) AS PVTB PIVOT ( SUM(FCST) FOR CUST_NAME_KD IN ([SEVT],[SEV],[SAMSUNG-ASIA]) ) AS PVT ) AS FCST2
           LEFT JOIN
           ( SELECT CASE WHEN LEN(WEEKNO) =2 THEN CONCAT('W0',SUBSTRING(WEEKNO,2,1)) ELSE WEEKNO END AS WEEKNO, isnull([SEVT],0) AS SEVT,isnull([SEV],0) AS SEV, isnull([SAMSUNG-ASIA],0) AS SAMSUNG_ASIA, (isnull([SEVT],0)+isnull([SEV],0)+ isnull([SAMSUNG-ASIA],0)) AS TOTAL_SS FROM ( SELECT CUST_NAME_KD, WEEKNO,FCST FROM (SELECT * FROM (SELECT M110. CUST_NAME_KD, SUM(ZTBFCSTTB.W1) AS W1,SUM(ZTBFCSTTB.W2) AS W2,SUM(ZTBFCSTTB.W3) AS W3,SUM(ZTBFCSTTB.W4) AS W4,SUM(ZTBFCSTTB.W5) AS W5,SUM(ZTBFCSTTB.W6) AS W6,SUM(ZTBFCSTTB.W7) AS W7,SUM(ZTBFCSTTB.W8) AS W8,SUM(ZTBFCSTTB.W9) AS W9,SUM(ZTBFCSTTB.W10) AS W10,SUM(ZTBFCSTTB.W11) AS W11,SUM(ZTBFCSTTB.W12) AS W12,SUM(ZTBFCSTTB.W13) AS W13,SUM(ZTBFCSTTB.W14) AS W14,SUM(ZTBFCSTTB.W15) AS W15,SUM(ZTBFCSTTB.W16) AS W16,SUM(ZTBFCSTTB.W17) AS W17,SUM(ZTBFCSTTB.W18) AS W18,SUM(ZTBFCSTTB.W19) AS W19,SUM(ZTBFCSTTB.W20) AS W20,SUM(ZTBFCSTTB.W21) AS W21,SUM(ZTBFCSTTB.W22) AS W22 FROM ZTBFCSTTB LEFT JOIN M110 ON (M110.CUST_CD= ZTBFCSTTB.CUST_CD AND M110.CTR_CD = ZTBFCSTTB.CTR_CD) WHERE ZTBFCSTTB.FCSTYEAR=${DATA.FCSTYEAR1} AND ZTBFCSTTB.FCSTWEEKNO=${DATA.FCSTWEEKNUM1} AND ZTBFCSTTB.CTR_CD='${DATA.CTR_CD}' GROUP BY M110. CUST_NAME_KD) AS AA) AS PVDT UNPIVOT ( FCST FOR WEEKNO IN (W1, W2, W3, W4, W5, W6, W7, W8, W9, W10, W11, W12, W13, W14, W15, W16, W17, W18, W19, W20, W21, W22) ) AS UNPV ) AS PVTB PIVOT ( SUM(FCST) FOR CUST_NAME_KD IN ([SEVT],[SEV],[SAMSUNG-ASIA]) ) AS PVT ) AS FCST1
           ON (FCST1.WEEKNO = FCST2.WEEKNO) ORDER BY FCST2.WEEKNO ASC
          `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
          ////console.log(checkkq);
        })();
        break;
      case "fcstamount":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `SELECT FCSTYEAR,FCSTWEEKNO, SUM(W1+W2+W3+W4) AS FCST4W_QTY,  SUM((W1+W2+W3+W4)*PROD_PRICE) AS FCST4W_AMOUNT,SUM(W1+W2+W3+W4+W5+W6+W7+W8) AS FCST8W_QTY,  SUM((W1+W2+W3+W4+W5+W6+W7+W8)*PROD_PRICE) AS FCST8W_AMOUNT  FROM ZTBFCSTTB
                        WHERE FCSTYEAR=${DATA.FCSTYEAR} AND FCSTWEEKNO=${DATA.FCSTWEEKNO} AND ZTBFCSTTB.CTR_CD='${DATA.CTR_CD}'
                        GROUP BY FCSTYEAR,FCSTWEEKNO`;
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
          ////console.log(checkkq);
        })();
        break;
      case "dtcdata":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = ` SELECT  ZTB_REL_SPECTTABLE.BARCODE_CONTENT, ZTB_REL_RESULT.DTC_ID, (CASE ZTBEMPLINFO.FACTORY_CODE WHEN 1 THEN 'NM1' WHEN 2 THEN 'NM2' END) AS FACTORY , ZTB_REL_REQUESTTABLE.TEST_FINISH_TIME, ZTB_REL_REQUESTTABLE.TEST_EMPL_NO, ZTB_REL_RESULT.G_CODE, ZTB_REL_REQUESTTABLE.PROD_REQUEST_NO, M100.G_NAME, ZTB_REL_TESTTABLE.TEST_NAME, ZTB_REL_SPECTTABLE.POINT_CODE, ZTB_REL_SPECTTABLE.CENTER_VALUE , ZTB_REL_SPECTTABLE.UPPER_TOR,LOWER_TOR , ZTB_REL_RESULT.RESULT, ZTB_REL_SPECTTABLE.REMARK ,ZTB_REL_RESULT.REMARK, ZTB_REL_SPECTTABLE.REMARK , ZTB_REL_TESTTYPE.TEST_TYPE_NAME,ZTBWORKPOSITION.WORK_POSITION_NAME , ZTB_REL_RESULT.SAMPLE_NO, ZTB_REL_REQUESTTABLE.REQUEST_DATETIME , ZTB_REL_REQUESTTABLE.REQUEST_EMPL_NO ,ZTB_REL_RESULT.M_CODE ,M090.M_NAME , M090.WIDTH_CD AS SIZE, ZTB_REL_REQUESTTABLE.REMARK, NHAP_NVL.LOTCMS , ZTB_REL_RESULT.TEST_CODE,M090.TDS, M090.TDS_EMPL ,TDS_UPD_DATE FROM ZTB_REL_RESULT 
          LEFT JOIN M100 ON(M100.G_CODE = ZTB_REL_RESULT.G_CODE AND M100.CTR_CD = ZTB_REL_RESULT.CTR_CD) 
          LEFT JOIN M090 ON (M090.M_CODE = ZTB_REL_RESULT.M_CODE AND M090.CTR_CD = ZTB_REL_RESULT.CTR_CD) 
          LEFT JOIN ZTB_REL_SPECTTABLE ON (  ZTB_REL_SPECTTABLE.G_CODE = ZTB_REL_RESULT.G_CODE AND ZTB_REL_SPECTTABLE.TEST_CODE = ZTB_REL_RESULT.TEST_CODE AND ZTB_REL_SPECTTABLE.POINT_CODE = ZTB_REL_RESULT.POINT_CODE AND ZTB_REL_SPECTTABLE.M_CODE = ZTB_REL_RESULT.M_CODE AND ZTB_REL_SPECTTABLE.CTR_CD = ZTB_REL_RESULT.CTR_CD)  
          LEFT JOIN ZTB_REL_REQUESTTABLE ON (ZTB_REL_REQUESTTABLE.DTC_ID = ZTB_REL_RESULT.DTC_ID AND ZTB_REL_REQUESTTABLE.TEST_CODE = ZTB_REL_RESULT.TEST_CODE AND ZTB_REL_REQUESTTABLE.CTR_CD = ZTB_REL_RESULT.CTR_CD)  
          LEFT JOIN ZTB_REL_TESTTABLE ON (ZTB_REL_TESTTABLE.TEST_CODE = ZTB_REL_RESULT.TEST_CODE AND ZTB_REL_TESTTABLE.CTR_CD = ZTB_REL_RESULT.CTR_CD) 
          LEFT JOIN ZTB_REL_TESTTYPE ON (ZTB_REL_TESTTYPE.TEST_TYPE_CODE = ZTB_REL_REQUESTTABLE.TEST_TYPE_CODE AND ZTB_REL_TESTTYPE.CTR_CD = ZTB_REL_REQUESTTABLE.CTR_CD) 
          LEFT JOIN ZTBEMPLINFO ON (ZTBEMPLINFO.EMPL_NO = ZTB_REL_REQUESTTABLE.REQUEST_EMPL_NO AND ZTBEMPLINFO.CTR_CD = ZTB_REL_REQUESTTABLE.CTR_CD) 
          LEFT JOIN ZTBWORKPOSITION ON (ZTBWORKPOSITION.WORK_POSITION_CODE = ZTBEMPLINFO.WORK_POSITION_CODE AND ZTBWORKPOSITION.CTR_CD = ZTBEMPLINFO.CTR_CD) 
          LEFT JOIN NHAP_NVL ON(NHAP_NVL.LOTNCC = ZTB_REL_REQUESTTABLE.REMARK AND NHAP_NVL.SIZE = M090.WIDTH_CD AND NHAP_NVL.CTR_CD = M090.CTR_CD) ${generate_condition_get_dtc_data(
            DATA.ALLTIME,
            DATA.FROM_DATE,
            DATA.TO_DATE,
            DATA.G_CODE,
            DATA.G_NAME,
            DATA.PROD_REQUEST_NO,
            DATA.M_NAME,
            DATA.M_CODE,
            DATA.TEST_NAME,
            DATA.TEST_TYPE,
            DATA.ID,
            DATA.CTR_CD
          )} ORDER BY TEST_FINISH_TIME DESC`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
          ////console.log(checkkq);
        })();
        break;
      case "dtcspec":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = " WHERE 1=1 ";
          if (DATA.G_CODE !== "") {
            condition += ` AND M100.G_CODE='${DATA.G_CODE}'`;
          }
          if (DATA.M_CODE !== "") {
            condition += ` AND M090.M_CODE='${DATA.M_CODE}'`;
          }
          if (DATA.G_NAME !== "") {
            condition += ` AND M100.G_NAME LIKE '%${DATA.G_NAME}%'`;
          }
          if (DATA.M_NAME !== "") {
            condition += ` AND M090.M_NAME LIKE '%${DATA.M_NAME}%'`;
          }
          if (DATA.TEST_NAME !== "0") {
            condition += ` AND ZTB_REL_TESTTABLE.TEST_CODE = '${DATA.TEST_NAME}'`;
          }
          let setpdQuery = ` SELECT M090.TDS, M100.BANVE, M110.CUST_NAME_KD, ZTB_REL_SPECTTABLE.G_CODE, M100.G_NAME, ZTB_REL_TESTTABLE.TEST_NAME, ZTB_REL_TESTPOINT.POINT_NAME, ZTB_REL_SPECTTABLE.PRI, ZTB_REL_SPECTTABLE.CENTER_VALUE, ZTB_REL_SPECTTABLE.UPPER_TOR, ZTB_REL_SPECTTABLE.LOWER_TOR, (ZTB_REL_SPECTTABLE.CENTER_VALUE-ZTB_REL_SPECTTABLE.LOWER_TOR) AS MIN_SPEC, (ZTB_REL_SPECTTABLE.CENTER_VALUE+ZTB_REL_SPECTTABLE.UPPER_TOR) AS MAX_SPEC, ZTB_REL_SPECTTABLE.BARCODE_CONTENT, ZTB_REL_SPECTTABLE.REMARK, M090.M_NAME, M090.WIDTH_CD,ZTB_REL_SPECTTABLE.M_CODE FROM ZTB_REL_SPECTTABLE LEFT JOIN ZTB_REL_TESTTABLE ON (ZTB_REL_TESTTABLE.TEST_CODE = ZTB_REL_SPECTTABLE.TEST_CODE AND ZTB_REL_TESTTABLE.CTR_CD = ZTB_REL_SPECTTABLE.CTR_CD) LEFT JOIN ZTB_REL_TESTPOINT ON (ZTB_REL_TESTPOINT.POINT_CODE = ZTB_REL_SPECTTABLE.POINT_CODE AND ZTB_REL_SPECTTABLE.TEST_CODE = ZTB_REL_TESTPOINT.TEST_CODE AND ZTB_REL_TESTPOINT.CTR_CD = ZTB_REL_SPECTTABLE.CTR_CD) LEFT JOIN M100 ON (M100.G_CODE = ZTB_REL_SPECTTABLE.G_CODE AND M100.CTR_CD = ZTB_REL_SPECTTABLE.CTR_CD) LEFT JOIN M090 ON (M090.M_CODE = ZTB_REL_SPECTTABLE.M_CODE AND M090.CTR_CD = ZTB_REL_SPECTTABLE.CTR_CD) LEFT JOIN M110 ON (M110.CUST_CD = M100.CUST_CD AND M110.CTR_CD = M100.CTR_CD) ${condition} AND ZTB_REL_SPECTTABLE.CTR_CD='${DATA.CTR_CD}'`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
          ////console.log(checkkq);
        })();
        break;
      case "update_empl_image":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = ` UPDATE ZTBEMPLINFO SET EMPL_IMAGE='Y' WHERE CTR_CD='${DATA.CTR_CD}' AND EMPL_NO='${DATA.EMPL_NO}' `;
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
          ////console.log(checkkq);
        })();
        break;
      case "getcodefullinfo":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `SELECT PDBV, UPDATE_REASON, FSC_CODE, FSC, PO_TYPE, G_CODE, M100.CUST_CD, M110.CUST_NAME, M110.CUST_NAME_KD, PROD_PROJECT, PROD_MODEL, CODE_12, PROD_TYPE, G_NAME_KD, DESCR, PROD_MAIN_MATERIAL, G_NAME, G_LENGTH, G_WIDTH, PD, G_LG, G_CG, G_C, G_C_R, G_SG_L, G_SG_R, PACK_DRT, KNIFE_TYPE, KNIFE_LIFECYCLE, KNIFE_PRICE, CODE_33, ROLE_EA_QTY,RPM, PIN_DISTANCE, PROCESS_TYPE, EQ1, EQ2, EQ3, EQ4, PROD_DIECUT_STEP, PROD_PRINT_TIMES, M100.REMK, M100.USE_YN, FACTORY,  Setting1, Setting2,Setting3,Setting4, UPH1, UPH2, UPH3, UPH4, Step1, Step2,Step3,Step4, LOSS_SX1, LOSS_SX2, LOSS_SX3, LOSS_SX4, LOSS_SETTING1 , LOSS_SETTING2 ,LOSS_SETTING3 ,LOSS_SETTING4 ,NOTE, PROD_DVT, QL_HSD, EXP_DATE, PD_HSD, UPD_COUNT, M100.UPD_DATE, M100.UPD_EMPL  FROM M100 LEFT JOIN M110 ON (M110.CUST_CD = M100.CUST_CD AND M110.CTR_CD = M100.CTR_CD)
          WHERE M100.CTR_CD='${DATA.CTR_CD}' AND  M100.G_CODE='${DATA.G_CODE}'`;
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
          ////console.log(checkkq);
        })();
        break;
      case "getbomsx":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `SELECT isnull(M140.LIEUQL_SX,0) AS LIEUQL_SX, M140.MAIN_M,M140.G_CODE, M100.G_NAME, M100.G_NAME_KD, M140.RIV_NO, M140.M_CODE, M090.M_NAME, M090.WIDTH_CD, M140.M_QTY, M140.INS_EMPL, M140.INS_DATE, M140.UPD_EMPL,M140.UPD_DATE, (M090.STOCK_CFM_NM1+M090.STOCK_CFM_NM2) AS M_STOCK FROM M140 JOIN M100 ON (M140.G_CODE = M100.G_CODE AND M140.CTR_CD = M100.CTR_CD) JOIN M090 ON (M090.M_CODE = M140.M_CODE AND M090.CTR_CD = M140.CTR_CD) WHERE M140.G_CODE='${DATA.G_CODE}' AND M140.RIV_NO='A' AND M140.CTR_CD='${DATA.CTR_CD}' ORDER BY (M090.STOCK_CFM_NM1+M090.STOCK_CFM_NM2) DESC`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
          //console.log(checkkq);
        })();
        break;
      case "getbomgia":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `  SELECT ZTB_BOM2.BOM_ID,ZTB_BOM2.G_CODE,ZTB_BOM2.RIV_NO,ZTB_BOM2.G_SEQ,ZTB_BOM2.CATEGORY,ZTB_BOM2.M_CODE, M140.M_CODE AS M_CODE_SX,ZTB_BOM2.CUST_CD,ZTB_BOM2.IMPORT_CAT,ZTB_BOM2.M_CMS_PRICE,ZTB_BOM2.M_SS_PRICE,ZTB_BOM2.M_SLITTING_PRICE,ZTB_BOM2.USAGE,ZTB_BOM2.MAT_MASTER_WIDTH,ZTB_BOM2.MAT_ROLL_LENGTH,ZTB_BOM2.MAT_THICKNESS,ZTB_BOM2.M_QTY,ZTB_BOM2.REMARK,ZTB_BOM2.PROCESS_ORDER,ZTB_BOM2.INS_EMPL,ZTB_BOM2.UPD_EMPL,ZTB_BOM2.INS_DATE,ZTB_BOM2.UPD_DATE,ZTB_BOM2.MAIN_M, M090.M_NAME, M090.WIDTH_CD AS MAT_CUTWIDTH FROM ZTB_BOM2 LEFT JOIN M090 ON M090.M_CODE = ZTB_BOM2.M_CODE AND M090.CTR_CD = ZTB_BOM2.CTR_CD LEFT JOIN M140 ON ZTB_BOM2.G_CODE = M140.G_CODE AND ZTB_BOM2.M_CODE = M140.M_CODE AND ZTB_BOM2.CTR_CD = M140.CTR_CD WHERE ZTB_BOM2.RIV_NO='A' AND ZTB_BOM2.G_CODE='${DATA.G_CODE}' AND ZTB_BOM2.CTR_CD='${DATA.CTR_CD}'`;
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
          ////console.log(checkkq);
        })();
        break;
      case "getNextSEQ_G_CODE":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `SELECT MAX(SEQ_NO) AS LAST_SEQ_NO FROM M100 WHERE CTR_CD='${DATA.CTR_CD}' AND CODE_12 = '${DATA.CODE_12}' AND CODE_27='${DATA.CODE_27}'`;
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
          ////console.log(checkkq);
        })();
        break;
      case "insertM100":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          //console.log(DATA.CODE_FULL_INFO)
          let setpdQuery = `INSERT INTO M100 (CTR_CD,CUST_CD,PROD_PROJECT,PROD_MODEL,CODE_12,PROD_TYPE,G_NAME_KD,DESCR,PROD_MAIN_MATERIAL,G_NAME,G_LENGTH,G_WIDTH,PD,G_C,G_C_R,G_SG_L,G_SG_R,PACK_DRT,KNIFE_TYPE,KNIFE_LIFECYCLE,KNIFE_PRICE,CODE_33,ROLE_EA_QTY,RPM,PIN_DISTANCE,PROCESS_TYPE,EQ1,EQ2, EQ3, EQ4,PROD_DIECUT_STEP,PROD_PRINT_TIMES,REMK,USE_YN,G_CODE,G_CG,G_LG, SEQ_NO, CODE_27, REV_NO, INS_EMPL, UPD_EMPL, INS_DATE, UPD_DATE, PO_TYPE, FSC, PROD_DVT,  QL_HSD, EXP_DATE, FSC_CODE) VALUES ('${DATA.CTR_CD}','${DATA.CODE_FULL_INFO.CUST_CD}','${DATA.CODE_FULL_INFO.PROD_PROJECT}','${DATA.CODE_FULL_INFO.PROD_MODEL}','${DATA.CODE_FULL_INFO.CODE_12}','${DATA.CODE_FULL_INFO.PROD_TYPE}','${DATA.CODE_FULL_INFO.G_NAME_KD}',N'${DATA.CODE_FULL_INFO.DESCR}','${DATA.CODE_FULL_INFO.PROD_MAIN_MATERIAL}','${DATA.CODE_FULL_INFO.G_NAME}','${DATA.CODE_FULL_INFO.G_LENGTH}','${DATA.CODE_FULL_INFO.G_WIDTH}','${DATA.CODE_FULL_INFO.PD}','${DATA.CODE_FULL_INFO.G_C}','${DATA.CODE_FULL_INFO.G_C_R}','${DATA.CODE_FULL_INFO.G_SG_L}','${DATA.CODE_FULL_INFO.G_SG_R}','${DATA.CODE_FULL_INFO.PACK_DRT}','${DATA.CODE_FULL_INFO.KNIFE_TYPE}','${DATA.CODE_FULL_INFO.KNIFE_LIFECYCLE}','${DATA.CODE_FULL_INFO.KNIFE_PRICE}','${DATA.CODE_FULL_INFO.CODE_33}','${DATA.CODE_FULL_INFO.ROLE_EA_QTY}','${DATA.CODE_FULL_INFO.RPM}','${DATA.CODE_FULL_INFO.PIN_DISTANCE}','${DATA.CODE_FULL_INFO.PROCESS_TYPE}','${DATA.CODE_FULL_INFO.EQ1}','${DATA.CODE_FULL_INFO.EQ2}','${DATA.CODE_FULL_INFO.EQ3}','${DATA.CODE_FULL_INFO.EQ4}','${DATA.CODE_FULL_INFO.PROD_DIECUT_STEP}','${DATA.CODE_FULL_INFO.PROD_PRINT_TIMES}','${DATA.CODE_FULL_INFO.REMK}','${DATA.CODE_FULL_INFO.USE_YN}','${DATA.G_CODE}','${DATA.CODE_FULL_INFO.G_CG}','${DATA.CODE_FULL_INFO.G_LG}','${DATA.NEXT_SEQ_NO}','${DATA.CODE_27}','A','${EMPL_NO}','${EMPL_NO}',GETDATE(), GETDATE(), '${DATA.CODE_FULL_INFO.PO_TYPE}','${DATA.CODE_FULL_INFO.FSC}','${DATA.CODE_FULL_INFO.PROD_DVT}','${DATA.CODE_FULL_INFO.QL_HSD}','${DATA.CODE_FULL_INFO.EXP_DATE}','${DATA.CODE_FULL_INFO.FSC_CODE ?? '01'}')`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
          ////console.log(checkkq);
        })();
        break;
      case "insertM100_AddVer":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `INSERT INTO M100 (CTR_CD,CUST_CD,PROD_PROJECT,PROD_MODEL,CODE_12,PROD_TYPE,G_NAME_KD,DESCR,PROD_MAIN_MATERIAL,G_NAME,G_LENGTH,G_WIDTH,PD,G_C,G_C_R,G_SG_L,G_SG_R,PACK_DRT,KNIFE_TYPE,KNIFE_LIFECYCLE,KNIFE_PRICE,CODE_33,ROLE_EA_QTY,RPM,PIN_DISTANCE,PROCESS_TYPE,EQ1,EQ2,EQ3, EQ4,PROD_DIECUT_STEP,PROD_PRINT_TIMES,REMK,USE_YN,G_CODE,G_CG,G_LG, SEQ_NO, CODE_27, REV_NO, INS_EMPL, UPD_EMPL, INS_DATE, UPD_DATE, PO_TYPE, FSC, PROD_DVT,QL_HSD, EXP_DATE, FSC_CODE) VALUES ('${DATA.CTR_CD}','${DATA.CODE_FULL_INFO.CUST_CD}','${DATA.CODE_FULL_INFO.PROD_PROJECT}','${DATA.CODE_FULL_INFO.PROD_MODEL}','${DATA.CODE_FULL_INFO.CODE_12}','${DATA.CODE_FULL_INFO.PROD_TYPE}','${DATA.CODE_FULL_INFO.G_NAME_KD}','${DATA.CODE_FULL_INFO.DESCR}','${DATA.CODE_FULL_INFO.PROD_MAIN_MATERIAL}','${DATA.CODE_FULL_INFO.G_NAME}','${DATA.CODE_FULL_INFO.G_LENGTH}','${DATA.CODE_FULL_INFO.G_WIDTH}','${DATA.CODE_FULL_INFO.PD}','${DATA.CODE_FULL_INFO.G_C}','${DATA.CODE_FULL_INFO.G_C_R}','${DATA.CODE_FULL_INFO.G_SG_L}','${DATA.CODE_FULL_INFO.G_SG_R}','${DATA.CODE_FULL_INFO.PACK_DRT}','${DATA.CODE_FULL_INFO.KNIFE_TYPE}','${DATA.CODE_FULL_INFO.KNIFE_LIFECYCLE}','${DATA.CODE_FULL_INFO.KNIFE_PRICE}','${DATA.CODE_FULL_INFO.CODE_33}','${DATA.CODE_FULL_INFO.ROLE_EA_QTY}','${DATA.CODE_FULL_INFO.RPM}','${DATA.CODE_FULL_INFO.PIN_DISTANCE}','${DATA.CODE_FULL_INFO.PROCESS_TYPE}','${DATA.CODE_FULL_INFO.EQ1}','${DATA.CODE_FULL_INFO.EQ2}','${DATA.CODE_FULL_INFO.EQ3}','${DATA.CODE_FULL_INFO.EQ4}','${DATA.CODE_FULL_INFO.PROD_DIECUT_STEP}','${DATA.CODE_FULL_INFO.PROD_PRINT_TIMES}','${DATA.CODE_FULL_INFO.REMK}','${DATA.CODE_FULL_INFO.USE_YN}','${DATA.G_CODE}','${DATA.CODE_FULL_INFO.G_CG}','${DATA.CODE_FULL_INFO.G_LG}','${DATA.NEXT_SEQ_NO}','${DATA.CODE_27}','${DATA.REV_NO}','${EMPL_NO}','${EMPL_NO}',GETDATE(), GETDATE(), '${DATA.CODE_FULL_INFO.PO_TYPE}', '${DATA.CODE_FULL_INFO.FSC}','${DATA.CODE_FULL_INFO.PROD_DVT}','${DATA.CODE_FULL_INFO.QL_HSD}','${DATA.CODE_FULL_INFO.EXP_DATE}','${DATA.CODE_FULL_INFO.FSC_CODE}')`;
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
          ////console.log(checkkq);
        })();
        break;
      case "insertM100BangTinhGia":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `INSERT INTO ZTB_QUOTATION_CALC_TB (CTR_CD,G_CODE,WIDTH_OFFSET,LENGTH_OFFSET,KNIFE_UNIT,FILM_UNIT,INK_UNIT,LABOR_UNIT,DELIVERY_UNIT,DEPRECATION_UNIT,GMANAGEMENT_UNIT,M_LOSS_UNIT,G_WIDTH,G_LENGTH,G_C,G_C_R,G_LG,G_CG,G_SG_L,G_SG_R,PROD_PRINT_TIMES) VALUES ('${DATA.CTR_CD}','${DATA.G_CODE}','${DATA.DEFAULT_DM.WIDTH_OFFSET}','${DATA.DEFAULT_DM.LENGTH_OFFSET}','${DATA.DEFAULT_DM.KNIFE_UNIT}','${DATA.DEFAULT_DM.FILM_UNIT}','${DATA.DEFAULT_DM.INK_UNIT}','${DATA.DEFAULT_DM.LABOR_UNIT}','${DATA.DEFAULT_DM.DELIVERY_UNIT}','${DATA.DEFAULT_DM.DEPRECATION_UNIT}','${DATA.DEFAULT_DM.GMANAGEMENT_UNIT}','${DATA.DEFAULT_DM.M_LOSS_UNIT}','${DATA.CODE_FULL_INFO.G_WIDTH}','${DATA.CODE_FULL_INFO.G_LENGTH}','${DATA.CODE_FULL_INFO.G_C}','${DATA.CODE_FULL_INFO.G_C_R}','${DATA.CODE_FULL_INFO.G_LG}','${DATA.CODE_FULL_INFO.G_CG}','${DATA.CODE_FULL_INFO.G_SG_L}','${DATA.CODE_FULL_INFO.G_SG_R}','${DATA.CODE_FULL_INFO.PROD_PRINT_TIMES}')`;
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
          ////console.log(checkkq);
        })();
        break;
      case "updateM100":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `UPDATE M100 SET FSC='${DATA.FSC}', PO_TYPE='${DATA.PO_TYPE}', CUST_CD='${DATA.CUST_CD}',PROD_PROJECT='${DATA.PROD_PROJECT}',PROD_MODEL='${DATA.PROD_MODEL}',PROD_TYPE='${DATA.PROD_TYPE}',G_NAME_KD='${DATA.G_NAME_KD}',DESCR=N'${DATA.DESCR}',PROD_MAIN_MATERIAL='${DATA.PROD_MAIN_MATERIAL}',G_NAME='${DATA.G_NAME}',G_LENGTH='${DATA.G_LENGTH}',G_WIDTH='${DATA.G_WIDTH}',PD='${DATA.PD}',G_C='${DATA.G_C}',G_C_R='${DATA.G_C_R}',G_SG_L='${DATA.G_SG_L}',G_SG_R='${DATA.G_SG_R}',PACK_DRT='${DATA.PACK_DRT}',KNIFE_TYPE='${DATA.KNIFE_TYPE}',KNIFE_LIFECYCLE='${DATA.KNIFE_LIFECYCLE}',KNIFE_PRICE='${DATA.KNIFE_PRICE}',CODE_33='${DATA.CODE_33}',ROLE_EA_QTY='${DATA.ROLE_EA_QTY}',RPM='${DATA.RPM}',PIN_DISTANCE='${DATA.PIN_DISTANCE}',PROCESS_TYPE='${DATA.PROCESS_TYPE}',EQ1='${DATA.EQ1}',EQ2='${DATA.EQ2}', EQ3='${DATA.EQ3}',EQ4='${DATA.EQ4}', PROD_DIECUT_STEP='${DATA.PROD_DIECUT_STEP}',PROD_PRINT_TIMES='${DATA.PROD_PRINT_TIMES}',REMK='${DATA.REMK}',USE_YN='${DATA.USE_YN}',G_CG='${DATA.G_CG}',G_LG='${DATA.G_LG}',PROD_DVT='${DATA.PROD_DVT}', PDBV='P',QL_HSD='${DATA.QL_HSD}',EXP_DATE = ${DATA.EXP_DATE}, PD_HSD='${DATA.PD_HSD ?? 'N'}', FSC_CODE='${DATA.FSC_CODE}',UPDATE_REASON=N'${DATA.UPDATE_REASON}', UPD_COUNT = ${DATA.UPD_COUNT}, UPD_DATE=GETDATE(), UPD_EMPL='${EMPL_NO}' WHERE CTR_CD='${DATA.CTR_CD}' AND  G_CODE = '${DATA.G_CODE}'`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
          ////console.log(checkkq);
        })();
        break;
      case "updateM100BangTinhGia":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `UPDATE ZTB_QUOTATION_CALC_TB SET G_LENGTH='${DATA.G_LENGTH}',G_WIDTH='${DATA.G_WIDTH}',G_C='${DATA.G_C}',G_C_R='${DATA.G_C_R}',G_SG_L='${DATA.G_SG_L}',G_SG_R='${DATA.G_SG_R}',PROD_PRINT_TIMES='${DATA.PROD_PRINT_TIMES}', G_CG='${DATA.G_CG}',G_LG='${DATA.G_LG}'  WHERE CTR_CD='${DATA.CTR_CD}' AND G_CODE = '${DATA.G_CODE}'`;
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
          ////console.log(checkkq);
        })();
        break;
      case "loadDefaultDM":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `SELECT * FROM ZTB_TBG_CONFIG2 WHERE CTR_CD='${DATA.CTR_CD}' `;
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
          ////console.log(checkkq);
        })();
        break;
      case "checkTBGExist":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `SELECT * FROM ZTB_QUOTATION_CALC_TB WHERE CTR_CD='${DATA.CTR_CD}' AND G_CODE='${DATA.G_CODE}'`;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
          console.log(checkkq);
        })();
        break;
      case "getMaterialList":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          //let setpdQuery = `SELECT M090.M_CODE, M090.M_NAME, M090.WIDTH_CD, ZTB_MATERIAL_TB.CUST_CD, ZTB_MATERIAL_TB.SSPRICE, ZTB_MATERIAL_TB.CMSPRICE, ZTB_MATERIAL_TB.SLITTING_PRICE, ZTB_MATERIAL_TB.MASTER_WIDTH, ZTB_MATERIAL_TB.ROLL_LENGTH FROM M090 LEFT JOIN ZTB_MATERIAL_TB ON (ZTB_MATERIAL_TB.M_NAME = M090.M_NAME)`;
          ////console.log(setpdQuery);
          let setpdQuery = ` SELECT M090.M_CODE, M090.M_NAME, M090.WIDTH_CD FROM M090 WHERE CTR_CD='${DATA.CTR_CD}' AND USE_YN='Y'`;
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
          ////console.log(checkkq);
        })();
        break;
      case "insertM140":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `INSERT INTO M140 (CTR_CD, G_CODE,RIV_NO,G_SEQ,M_CODE,M_QTY,META_PAT_CD,REMK,USE_YN,INS_DATE,INS_EMPL,UPD_DATE,UPD_EMPL, MAIN_M, LIEUQL_SX) VALUES ('${DATA.CTR_CD}','${DATA.G_CODE}','A','${DATA.G_SEQ}', '${DATA.M_CODE}','${DATA.M_QTY}', 'x', '','Y', GETDATE(), '${EMPL_NO}', GETDATE(), '${EMPL_NO}','${DATA.MAIN_M}','${DATA.LIEUQL_SX}')`;
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
          ////console.log(checkkq);
        })();
        break;
      case "update_M140":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `UPDATE M140 SET M_QTY=${DATA.M_QTY}, MAIN_M = ${DATA.MAIN_M}, LIEUQL_SX=${DATA.LIEUQL_SX}, UPD_EMPL='${EMPL_NO}', UPD_DATE=GETDATE() WHERE G_CODE='${DATA.G_CODE}' AND M_CODE ='${DATA.M_CODE}'`;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
          ////console.log(checkkq);
        })();
        break;
      case "checkGSEQ_M140":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `SELECT MAX(G_SEQ) AS MAX_G_SEQ FROM M140 WHERE CTR_CD='${DATA.CTR_CD}' AND G_CODE='${DATA.G_CODE}'`;
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
          ////console.log(checkkq);
        })();
        break;
      case "insertBOM2":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `INSERT INTO ZTB_BOM2 (CTR_CD, G_CODE, RIV_NO, G_SEQ, M_CODE, M_NAME, CUST_CD, USAGE, MAT_MASTER_WIDTH, MAT_CUTWIDTH, MAT_ROLL_LENGTH, MAT_THICKNESS, M_QTY, REMARK, PROCESS_ORDER, INS_EMPL, UPD_EMPL, INS_DATE, UPD_DATE, MAIN_M, M_CMS_PRICE, M_SS_PRICE, M_SLITTING_PRICE) VALUES ('${DATA.CTR_CD}', '${DATA.G_CODE}','A','${DATA.G_SEQ}','${DATA.M_CODE}','${DATA.M_NAME}','${DATA.CUST_CD}','${DATA.USAGE}','${DATA.MAT_MASTER_WIDTH}','${DATA.MAT_CUTWIDTH}','${DATA.MAT_ROLL_LENGTH}','${DATA.MAT_THICKNESS}','${DATA.M_QTY}','${DATA.REMARK}','${DATA.PROCESS_ORDER}','${EMPL_NO}','${EMPL_NO}',GETDATE(),GETDATE(),${DATA.MAIN_M},${DATA.M_CMS_PRICE},${DATA.M_SS_PRICE},${DATA.M_SLITTING_PRICE})`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
          //console.log(checkkq);
        })();
        break;
      case "deleteM140":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `DELETE FROM M140 WHERE CTR_CD='${DATA.CTR_CD}' AND G_CODE='${DATA.G_CODE}'`;
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
          ////console.log(checkkq);
        })();
        break;
      case "deleteM140_2":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `DELETE FROM M140 WHERE CTR_CD='${DATA.CTR_CD}' AND G_CODE='${DATA.G_CODE}' AND M_CODE NOT IN (${DATA.M_LIST})`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
          ////console.log(checkkq);
        })();
        break;
      case "deleteBOM2":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `DELETE FROM ZTB_BOM2 WHERE CTR_CD='${DATA.CTR_CD}' AND G_CODE='${DATA.G_CODE}'`;
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
          ////console.log(checkkq);
        })();
        break;
      case "listAmazon":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `SELECT DISTINCT BOM_AMAZONE.G_CODE, M100.G_NAME, M100.G_NAME_KD FROM BOM_AMAZONE JOIN M100 ON (M100.G_CODE = BOM_AMAZONE.G_CODE AND M100.CTR_CD = BOM_AMAZONE.CTR_CD) WHERE BOM_AMAZONE.CTR_CD='${DATA.CTR_CD}' AND M100.G_NAME LIKE '%${DATA.G_NAME}%'`;
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
          ////console.log(checkkq);
        })();
        break;
      case "getBOMAMAZON":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `SELECT BOM_AMAZONE.AMZ_PROD_NAME, BOM_AMAZONE.AMZ_COUNTRY, BOM_AMAZONE.G_CODE, M100.G_NAME, DESIGN_AMAZONE.G_CODE_MAU,  M100_B.G_NAME AS TEN_MAU,BOM_AMAZONE.DOITUONG_NO, DESIGN_AMAZONE.DOITUONG_NAME, BOM_AMAZONE.GIATRI, BOM_AMAZONE.REMARK FROM BOM_AMAZONE LEFT JOIN DESIGN_AMAZONE ON (BOM_AMAZONE.G_CODE_MAU= DESIGN_AMAZONE.G_CODE_MAU AND BOM_AMAZONE.DOITUONG_NO= DESIGN_AMAZONE.DOITUONG_NO AND BOM_AMAZONE.CTR_CD = DESIGN_AMAZONE.CTR_CD) LEFT JOIN M100 ON (M100.G_CODE = BOM_AMAZONE.G_CODE AND M100.CTR_CD = BOM_AMAZONE.CTR_CD)  LEFT JOIN  (SELECT * FROM M100) AS M100_B ON (M100_B.G_CODE = DESIGN_AMAZONE.G_CODE_MAU AND M100_B.CTR_CD = DESIGN_AMAZONE.CTR_CD) WHERE BOM_AMAZONE.CTR_CD='${DATA.CTR_CD}' AND BOM_AMAZONE.G_CODE='${DATA.G_CODE}'`;
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
          ////console.log(checkkq);
        })();
        break;
      case "getAMAZON_DESIGN":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `SELECT * FROM DESIGN_AMAZONE WHERE CTR_CD='${DATA.CTR_CD}' AND DESIGN_AMAZONE.G_CODE_MAU='${DATA.G_CODE}'`;
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "deleteAMZDesign":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `DELETE FROM DESIGN_AMAZONE WHERE CTR_CD='${DATA.CTR_CD}' AND DESIGN_AMAZONE.G_CODE_MAU='${DATA.G_CODE}'`;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "checkDesignExistAMZ":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `SELECT * FROM DESIGN_AMAZONE WHERE CTR_CD='${DATA.CTR_CD}' AND DESIGN_AMAZONE.G_CODE_MAU='${DATA.G_CODE}'`;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "insertAMZDesign":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `INSERT INTO DESIGN_AMAZONE (CTR_CD,G_CODE_MAU,DOITUONG_NO,DOITUONG_NAME,PHANLOAI_DT,CAVITY_PRINT,FONT_NAME,POS_X,POS_Y,SIZE_W,SIZE_H,ROTATE,REMARK,INS_DATE,INS_EMPL,UPD_DATE,UPD_EMPL,FONT_SIZE,FONT_STYLE,GIATRI,DOITUONG_STT) VALUES ('${DATA.CTR_CD}','${DATA.G_CODE_MAU}','${DATA.DOITUONG_NO}','${DATA.DOITUONG_NAME}','${DATA.PHANLOAI_DT}','${DATA.CAVITY_PRINT}','${DATA.FONT_NAME}','${DATA.POS_X}','${DATA.POS_Y}','${DATA.SIZE_W}','${DATA.SIZE_H}','${DATA.ROTATE}','${DATA.REMARK}',GETDATE(),'${EMPL_NO}',GETDATE(),'${EMPL_NO}','${DATA.FONT_SIZE}','${DATA.FONT_STYLE}',N'${DATA.GIATRI}','${DATA.DOITUONG_STT}')`;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "getBOMAMAZON_EMPTY":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `SELECT DESIGN_AMAZONE.G_CODE_MAU, M100.G_NAME AS TEN_MAU, DOITUONG_NO, DOITUONG_NAME FROM DESIGN_AMAZONE JOIN M100 ON (M100.G_CODE = DESIGN_AMAZONE.G_CODE_MAU AND M100.CTR_CD = DESIGN_AMAZONE.CTR_CD) WHERE DESIGN_AMAZONE.CTR_CD='${DATA.CTR_CD}' AND G_CODE_MAU ='${DATA.G_CODE_MAU}'`;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
          ////console.log(checkkq);
        })();
        break;
      case "loadcodephoi":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `SELECT DISTINCT DESIGN_AMAZONE.G_CODE_MAU, M100.G_NAME FROM DESIGN_AMAZONE JOIN M100 ON (M100.G_CODE = DESIGN_AMAZONE.G_CODE_MAU) WHERE DESIGN_AMAZONE.CTR_CD='${DATA.CTR_CD}'`;
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
          ////console.log(checkkq);
        })();
        break;
      case "checkExistBOMAMAZON":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `SELECT * FROM BOM_AMAZONE WHERE CTR_CD='${DATA.CTR_CD}' AND G_CODE='${DATA.G_CODE}'`;
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
          ////console.log(checkkq);
        })();
        break;
      case "insertAmazonBOM":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `INSERT INTO BOM_AMAZONE (CTR_CD, G_CODE, G_CODE_MAU, DOITUONG_NO, GIATRI, REMARK, INS_DATE, INS_EMPL, UPD_DATE, UPD_EMPL,  AMZ_COUNTRY) VALUES ('${DATA.CTR_CD}','${DATA.G_CODE}', '${DATA.G_CODE_MAU}','${DATA.DOITUONG_NO}','${DATA.GIATRI}','${DATA.REMARK}',GETDATE(),'${EMPL_NO}',GETDATE(),'${EMPL_NO}','${DATA.AMZ_COUNTRY}')`;
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
          ////console.log(checkkq);
        })();
        break;
      case "updateAmazonBOM":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `UPDATE BOM_AMAZONE SET GIATRI='${DATA.GIATRI}', REMARK = '${DATA.REMARK}',  AMZ_COUNTRY='${DATA.AMZ_COUNTRY}' WHERE CTR_CD='${DATA.CTR_CD}' AND G_CODE='${DATA.G_CODE}' AND G_CODE_MAU='${DATA.G_CODE_MAU}' AND DOITUONG_NO=${DATA.DOITUONG_NO}`;
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
          ////console.log(checkkq);
        })();
        break;
      case "updateAmazonBOMCodeInfo":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `UPDATE BOM_AMAZONE SET  AMZ_PROD_NAME='${DATA.AMZ_PROD_NAME}', AMZ_COUNTRY='${DATA.AMZ_COUNTRY}' WHERE CTR_CD='${DATA.CTR_CD}' AND G_CODE='${DATA.G_CODE}'`;
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
          ////console.log(checkkq);
        })();
        break;
      case "xoadangkynghi_AUTO":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `DELETE FROM ZTBOFFREGISTRATIONTB WHERE CTR_CD='${DATA.CTR_CD}' AND APPLY_DATE='${moment().format(
            "YYYY-MM-DD"
          )}' AND EMPL_NO='${DATA.EMPL_NO}' AND REMARK ='AUTO'`;
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
          ////console.log(checkkq);
        })();
        break;
      case "getddmaindepttb":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `DECLARE @empl varchar(10); DECLARE @startdate DATE; DECLARE @enddate DATE        
          SET @startdate='${DATA.FROM_DATE}'
          SET @enddate='${DATA.TO_DATE}'
      SELECT EMPL_LIST.MAINDEPTNAME, COUNT(EMPL_LIST.EMPL_NO) AS COUNT_TOTAL, SUM(CASE WHEN ON_OFF =1 THEN 1 ELSE 0 END) AS COUT_ON, SUM(CASE WHEN ON_OFF =0 THEN 1 ELSE 0 END) AS COUT_OFF, SUM(CASE WHEN ON_OFF is null THEN 1 ELSE 0 END) AS COUNT_CDD, SUM(CASE WHEN ON_OFF =1 THEN 1 ELSE 0 END)*1.0/COUNT(EMPL_LIST.EMPL_NO)*100 AS ON_RATE FROM
      (
          SELECT  
      ZTBEMPLINFOA.DATE_COLUMN,
            ZTBEMPLINFOA.EMPL_NO, 
            CMS_ID, 
            MIDLAST_NAME, 
            FIRST_NAME, 
            PHONE_NUMBER, 
            SEX_NAME, 
            WORK_STATUS_NAME, 
            FACTORY_NAME, 
            JOB_NAME, 
            WORK_SHIF_NAME, 
            WORK_POSITION_NAME, 
            SUBDEPTNAME, 
            MAINDEPTNAME, 
            REQUEST_DATE, 
            ZTBATTENDANCETB.APPLY_DATE, 
            APPROVAL_STATUS, 
            OFF_ID, 
            CA_NGHI, 
            ON_OFF, 
            OVERTIME_INFO, 
            OVERTIME, 
            REASON_NAME, 
            ZTBOFFREGISTRATIONTB.REMARK, 
            ZTBATTENDANCETB.XACNHAN 
          FROM 
            (SELECT DATE_COLUMN, EMPL_NO,CMS_ID,FIRST_NAME,MIDLAST_NAME,DOB,HOMETOWN,SEX_CODE,ADD_PROVINCE,ADD_DISTRICT,ADD_COMMUNE,ADD_VILLAGE,PHONE_NUMBER,WORK_START_DATE,PASSWORD,EMAIL,WORK_POSITION_CODE,WORK_SHIFT_CODE,POSITION_CODE,JOB_CODE,FACTORY_CODE,WORK_STATUS_CODE,REMARK,ONLINE_DATETIME,EMPL_IMAGE,RESIGN_DATE,DATETABLE.CTR_CD  FROM DATETABLE CROSS JOIN ZTBEMPLINFO WHERE DATETABLE.DATE_COLUMN BETWEEN @startdate AND @enddate AND ZTBEMPLINFO.WORK_STATUS_CODE<>0) AS ZTBEMPLINFOA 
            LEFT JOIN (SELECT DATETABLE.CTR_CD, DATETABLE.DATE_COLUMN, ZTBATTENDANCETB.EMPL_NO,  ZTBATTENDANCETB.APPLY_DATE,  ZTBATTENDANCETB.ON_OFF,  ZTBATTENDANCETB.REMARK,  ZTBATTENDANCETB.OVERTIME_INFO, ZTBATTENDANCETB.OVERTIME, ZTBATTENDANCETB.XACNHAN,CURRENT_TEAM FROM DATETABLE LEFT JOIN ZTBATTENDANCETB ON (DATETABLE.DATE_COLUMN = ZTBATTENDANCETB.APPLY_DATE AND DATETABLE.CTR_CD = ZTBATTENDANCETB.CTR_CD) WHERE DATETABLE.DATE_COLUMN BETWEEN @startdate AND @enddate) AS ZTBATTENDANCETB ON (
              ZTBEMPLINFOA.EMPL_NO = ZTBATTENDANCETB.EMPL_NO AND ZTBEMPLINFOA.DATE_COLUMN = ZTBATTENDANCETB.APPLY_DATE
            ) 
            LEFT JOIN ZTBSEX ON (
              ZTBSEX.SEX_CODE = ZTBEMPLINFOA.SEX_CODE AND ZTBSEX.CTR_CD = ZTBEMPLINFOA.CTR_CD
            ) 
            LEFT JOIN ZTBWORKSTATUS ON(
              ZTBWORKSTATUS.WORK_STATUS_CODE = ZTBEMPLINFOA.WORK_STATUS_CODE AND ZTBWORKSTATUS.CTR_CD = ZTBEMPLINFOA.CTR_CD
            ) 
            LEFT JOIN ZTBFACTORY ON (
              ZTBFACTORY.FACTORY_CODE = ZTBEMPLINFOA.FACTORY_CODE AND ZTBFACTORY.CTR_CD = ZTBEMPLINFOA.CTR_CD
            ) 
            LEFT JOIN ZTBJOB ON (
              ZTBJOB.JOB_CODE = ZTBEMPLINFOA.JOB_CODE AND ZTBJOB.CTR_CD = ZTBEMPLINFOA.CTR_CD
            ) 
            LEFT JOIN ZTBPOSITION ON (
              ZTBPOSITION.POSITION_CODE = ZTBEMPLINFOA.POSITION_CODE AND ZTBPOSITION.CTR_CD = ZTBEMPLINFOA.CTR_CD
            ) 
            LEFT JOIN ZTBWORKSHIFT ON (
              ZTBWORKSHIFT.WORK_SHIFT_CODE = ZTBEMPLINFOA.WORK_SHIFT_CODE AND ZTBWORKSHIFT.CTR_CD = ZTBEMPLINFOA.CTR_CD
            ) 
            LEFT JOIN ZTBWORKPOSITION ON (
              ZTBWORKPOSITION.WORK_POSITION_CODE = ZTBEMPLINFOA.WORK_POSITION_CODE AND ZTBWORKPOSITION.CTR_CD = ZTBEMPLINFOA.CTR_CD
            ) 
            LEFT JOIN ZTBSUBDEPARTMENT ON (
              ZTBSUBDEPARTMENT.SUBDEPTCODE = ZTBWORKPOSITION.SUBDEPTCODE AND ZTBSUBDEPARTMENT.CTR_CD = ZTBWORKPOSITION.CTR_CD
            ) 
            LEFT JOIN ZTBMAINDEPARMENT ON (
              ZTBMAINDEPARMENT.MAINDEPTCODE = ZTBSUBDEPARTMENT.MAINDEPTCODE AND ZTBMAINDEPARMENT.CTR_CD = ZTBSUBDEPARTMENT.CTR_CD
            ) 
            LEFT JOIN ZTBOFFREGISTRATIONTB ON (
              ZTBOFFREGISTRATIONTB.EMPL_NO = ZTBATTENDANCETB.EMPL_NO 
              AND ZTBOFFREGISTRATIONTB.APPLY_DATE = ZTBATTENDANCETB.APPLY_DATE
              AND ZTBOFFREGISTRATIONTB.CTR_CD = ZTBATTENDANCETB.CTR_CD
            ) 
            LEFT JOIN ZTBREASON ON (
              ZTBREASON.REASON_CODE = ZTBOFFREGISTRATIONTB.REASON_CODE
              AND ZTBREASON.CTR_CD = ZTBOFFREGISTRATIONTB.CTR_CD
            )   
      WHERE ZTBEMPLINFOA.WORK_STATUS_CODE =1 AND ZTBEMPLINFOA.CTR_CD='${DATA.CTR_CD}'
      ) AS EMPL_LIST
      GROUP BY EMPL_LIST.MAINDEPTNAME ORDER BY COUNT(EMPL_LIST.EMPL_NO) DESC`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
          ////console.log(checkkq);
        })();
        break;
      case "getqlsxplan":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `WITH DMTB AS
          (
            SELECT  PLAN_FACTORY, PLAN_DATE, ZTB_QLSXPLAN.G_CODE, PLAN_EQ, PLAN_ORDER, PLAN_ID, PLAN_QTY, 
            CASE 
            WHEN IS_SETTING = 'Y' AND SUBSTRING(PLAN_EQ,1,2) = M100.EQ1 THEN isnull(M100.Setting1,9999)
            WHEN IS_SETTING = 'Y' AND SUBSTRING(PLAN_EQ,1,2) = M100.EQ2 THEN isnull(M100.Setting2,9999)
            WHEN IS_SETTING = 'Y' AND SUBSTRING(PLAN_EQ,1,2) = M100.EQ3 THEN isnull(M100.Setting3,9999)
            WHEN IS_SETTING = 'Y' AND SUBSTRING(PLAN_EQ,1,2) = M100.EQ4 THEN isnull(M100.Setting4,9999)
            ELSE 0
            END AS SETTING_TIME,
            CASE 
            WHEN SUBSTRING(PLAN_EQ,1,2) = M100.EQ1 THEN isnull(CASE WHEN M100.UPH1 =0 THEN 1 ELSE M100.UPH1 END,1)
            WHEN SUBSTRING(PLAN_EQ,1,2) = M100.EQ2 THEN isnull(CASE WHEN M100.UPH2 =0 THEN 1 ELSE M100.UPH2 END,1)
            WHEN SUBSTRING(PLAN_EQ,1,2) = M100.EQ3 THEN isnull(CASE WHEN M100.UPH3 =0 THEN 1 ELSE M100.UPH3 END,1)
            WHEN SUBSTRING(PLAN_EQ,1,2) = M100.EQ4 THEN isnull(CASE WHEN M100.UPH4 =0 THEN 1 ELSE M100.UPH4 END,1)
            ELSE 1
            END AS UPH
            FROM ZTB_QLSXPLAN
            LEFT JOIN M100 ON (M100.G_CODE = ZTB_QLSXPLAN.G_CODE)
            LEFT JOIN P400 ON (P400.PROD_REQUEST_NO = ZTB_QLSXPLAN.PROD_REQUEST_NO)
          WHERE PLAN_EQ is not null AND PLAN_DATE = '${DATA.PLAN_DATE}'
          ),
          NEXTB AS
          (
          SELECT PLAN_FACTORY, PLAN_DATE, G_CODE, PLAN_EQ, PLAN_ORDER, PLAN_ID, PLAN_QTY, SETTING_TIME, UPH, (SETTING_TIME + PLAN_QTY*1.0/UPH*60) AS LEADTIME FROM DMTB
          ),
          LEATIMETB AS
          (
          SELECT PLAN_FACTORY, PLAN_DATE, PLAN_EQ, PLAN_ORDER, PLAN_ID, PLAN_QTY, LEADTIME, SUM(LEADTIME) OVER (PARTITION BY PLAN_FACTORY,PLAN_EQ ORDER BY PLAN_ORDER ASC) AS ACC_TIME FROM NEXTB
          ),
          BB AS
           (SELECT PVTB.PROD_REQUEST_NO, isnull(PVTB.[1],0) AS CD1, isnull(PVTB.[2],0) AS CD2,isnull(PVTB.[3],0) AS CD3,isnull(PVTB.[4],0) AS CD4 FROM 
              (
                  SELECT ZTB_QLSXPLAN.PROD_REQUEST_NO, ZTB_QLSXPLAN.PROCESS_NUMBER, SUM(isnull(SX_RESULT,0)) AS KETQUASX FROM ZTB_SX_RESULT LEFT JOIN ZTB_QLSXPLAN ON (ZTB_QLSXPLAN.PLAN_ID = ZTB_SX_RESULT.PLAN_ID) WHERE ZTB_QLSXPLAN.STEP=0 GROUP BY ZTB_QLSXPLAN.PROD_REQUEST_NO, ZTB_QLSXPLAN.PROCESS_NUMBER
              )
              AS PV
              PIVOT
              ( 
              SUM(PV.KETQUASX) FOR PV.PROCESS_NUMBER IN ([1],[2],[3],[4])
              ) 
              AS PVTB),
		LOSSKT AS (
			SELECT BB.G_CODE, SUM(BB.INSPECT_TOTAL_QTY) AS INSPECT_TOTAL_QTY, SUM(BB.TOTAL_NG) AS TOTAL_NG FROM 
      (
      SELECT AA.G_CODE, AA.INSPECT_DATE,AA.INSPECT_TOTAL_QTY, AA.TOTAL_NG, COUNT(G_CODE) OVER(PARTITION BY G_CODE ORDER BY INSPECT_DATE DESC) AS CNT 
      FROM 
      (
      SELECT  G_CODE,CAST(INSPECT_DATETIME AS date) AS INSPECT_DATE, SUM(INSPECT_TOTAL_QTY-ERR32) AS INSPECT_TOTAL_QTY, SUM(ERR1+ERR2+ERR3+ERR4+ERR5+ERR6+ERR7+ERR8+ERR9+ERR10+ERR11+ERR12+ERR13+ERR14+ERR15+ERR16+ERR17+ERR18+ERR19+ERR20+ERR21+ERR22+ERR23+ERR24+ERR25+ERR26+ERR27+ERR28+ERR29+ERR30+ERR31
      ) AS TOTAL_NG FROM ZTBINSPECTNGTB
      GROUP BY G_CODE,CAST(INSPECT_DATETIME AS date)
      ) AS AA
      ) AS BB
      WHERE BB.CNT <=10
      GROUP BY BB.G_CODE
		)
          SELECT M100.USE_YN,M100.PD, (M100.G_C * M100.G_C_R) AS CAVITY,ZTB_QLSXPLAN.IS_SETTING,  ZTB_QLSXPLAN.OLD_PLAN_QTY ,ZTB_QLSXPLAN.XUATDAOFILM, ZTB_QLSXPLAN.EQ_STATUS, ZTB_QLSXPLAN.MAIN_MATERIAL, ZTB_QLSXPLAN.INT_TEM, ZTB_QLSXPLAN.CHOTBC, ZTB_QLSXPLAN.DKXL, ZTB_QLSXPLAN.NEXT_PLAN_ID, ZTB_QLSXPLAN.KQ_SX_TAM, ZTB_QLSXPLAN.KETQUASX, ZTB_QLSXPLAN.PROCESS_NUMBER, ZTB_QLSXPLAN.PLAN_ORDER, ZTB_QLSXPLAN.STEP, ZTB_QLSXPLAN.PLAN_ID,ZTB_QLSXPLAN.PLAN_DATE,ZTB_QLSXPLAN.PROD_REQUEST_NO,ZTB_QLSXPLAN.PLAN_QTY,ZTB_QLSXPLAN.PLAN_EQ,ZTB_QLSXPLAN.PLAN_FACTORY,ZTB_QLSXPLAN.PLAN_LEADTIME,ZTB_QLSXPLAN.INS_EMPL,ZTB_QLSXPLAN.INS_DATE,ZTB_QLSXPLAN.UPD_EMPL,ZTB_QLSXPLAN.UPD_DATE, M100.G_CODE, M100.G_NAME, M100.G_NAME_KD, P400.PROD_REQUEST_DATE, P400.PROD_REQUEST_QTY, BB.CD1, BB.CD2, BB.CD3, BB.CD4, 
          CASE WHEN (M100.EQ1 IN ('NA','NO',null,'')) THEN 0 ELSE P400.PROD_REQUEST_QTY-isnull(BB.CD1,0) END AS TON_CD1,          
          CASE WHEN (M100.EQ2 IN ('NA','NO',null,'')) THEN 0 ELSE P400.PROD_REQUEST_QTY-isnull(BB.CD2,0) END AS TON_CD2,
          CASE WHEN (M100.EQ3 IN ('NA','NO',null,'')) THEN 0 ELSE P400.PROD_REQUEST_QTY-isnull(BB.CD3,0) END AS TON_CD3,
          CASE WHEN (M100.EQ4 IN ('NA','NO',null,'')) THEN 0 ELSE P400.PROD_REQUEST_QTY-isnull(BB.CD4,0) END AS TON_CD4,
          M100.FACTORY, M100.EQ1, M100.EQ2, M100.Setting1, M100.Setting2, M100.UPH1, M100.UPH2, M100.Step1, M100.Step2, isnull(M100.LOSS_SX1,0) AS LOSS_SX1, isnull(M100.LOSS_SX2,0) AS LOSS_SX2, isnull(M100.LOSS_SETTING1,0) AS LOSS_SETTING1, isnull(M100.LOSS_SETTING2,0) AS LOSS_SETTING2, M100.Step3, M100.Step4, M100.EQ3, M100.EQ4, M100.UPH3, M100.UPH4, isnull(M100.Setting3,0) AS Setting3, isnull(M100.Setting4,0) AS Setting4, isnull(M100.LOSS_SX3,0) AS LOSS_SX3, isnull(M100.LOSS_SX4,0) AS LOSS_SX4, M100.LOSS_SETTING3, M100.LOSS_SETTING4, M100.NOTE, isnull(LOSSKT.TOTAL_NG*1.0/LOSSKT.INSPECT_TOTAL_QTY,0)*100 AS LOSS_KT, LEATIMETB.LEADTIME AS AT_LEADTIME, LEATIMETB.ACC_TIME
              FROM ZTB_QLSXPLAN 
            JOIN P400 ON (P400.PROD_REQUEST_NO = ZTB_QLSXPLAN.PROD_REQUEST_NO) 
            JOIN M100 ON (P400.G_CODE = M100.G_CODE)
              LEFT JOIN BB ON (BB.PROD_REQUEST_NO = ZTB_QLSXPLAN.PROD_REQUEST_NO)
            LEFT JOIN LEATIMETB ON (LEATIMETB.PLAN_ID = ZTB_QLSXPLAN.PLAN_ID AND LEATIMETB.PLAN_FACTORY = ZTB_QLSXPLAN.PLAN_FACTORY)
			LEFT JOIN LOSSKT ON (LOSSKT.G_CODE = ZTB_QLSXPLAN.G_CODE)
              WHERE ZTB_QLSXPLAN.PLAN_DATE='${DATA.PLAN_DATE}' ORDER BY ZTB_QLSXPLAN.PLAN_ORDER ASC`;
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
          ////console.log(checkkq);
        })();
        break;
      /* case "getqlsxplan2_bk":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = " WHERE 1=1 ";
          if (DATA.FACTORY !== "ALL") {
            condition += ` AND ZTB_QLSXPLAN.PLAN_FACTORY='${DATA.FACTORY}'`;
          }
          if (DATA.MACHINE !== "ALL") {
            condition += ` AND SUBSTRING(ZTB_QLSXPLAN.PLAN_EQ,1,2)='${DATA.MACHINE}'`;
          }
          condition += ` AND ZTB_QLSXPLAN.PLAN_DATE='${DATA.PLAN_DATE}'`;
          let setpdQuery = `WITH DMTB AS
          (
            SELECT  PLAN_FACTORY, PLAN_DATE, ZTB_QLSXPLAN.G_CODE, PLAN_EQ, PLAN_ORDER, PLAN_ID, PLAN_QTY, 
            CASE 
            WHEN IS_SETTING = 'Y' AND SUBSTRING(PLAN_EQ,1,2) = M100.EQ1 THEN isnull(M100.Setting1,9999)
            WHEN IS_SETTING = 'Y' AND SUBSTRING(PLAN_EQ,1,2) = M100.EQ2 THEN isnull(M100.Setting2,9999)
            WHEN IS_SETTING = 'Y' AND SUBSTRING(PLAN_EQ,1,2) = M100.EQ3 THEN isnull(M100.Setting3,9999)
            WHEN IS_SETTING = 'Y' AND SUBSTRING(PLAN_EQ,1,2) = M100.EQ4 THEN isnull(M100.Setting4,9999)
            ELSE 0
            END AS SETTING_TIME,
            CASE 
            WHEN SUBSTRING(PLAN_EQ,1,2) = M100.EQ1 THEN isnull(CASE WHEN M100.UPH1 =0 THEN 1 ELSE M100.UPH1 END,1)
            WHEN SUBSTRING(PLAN_EQ,1,2) = M100.EQ2 THEN isnull(CASE WHEN M100.UPH2 =0 THEN 1 ELSE M100.UPH2 END,1)
            WHEN SUBSTRING(PLAN_EQ,1,2) = M100.EQ3 THEN isnull(CASE WHEN M100.UPH3 =0 THEN 1 ELSE M100.UPH3 END,1)
            WHEN SUBSTRING(PLAN_EQ,1,2) = M100.EQ4 THEN isnull(CASE WHEN M100.UPH4 =0 THEN 1 ELSE M100.UPH4 END,1)
            ELSE 1
            END AS UPH,
            ZTB_QLSXPLAN.CTR_CD
            FROM ZTB_QLSXPLAN
            LEFT JOIN M100 ON (M100.G_CODE = ZTB_QLSXPLAN.G_CODE AND M100.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
            LEFT JOIN P400 ON (P400.PROD_REQUEST_NO = ZTB_QLSXPLAN.PROD_REQUEST_NO AND P400.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
            WHERE ZTB_QLSXPLAN.CTR_CD='${DATA.CTR_CD}' AND PLAN_DATE='${DATA.PLAN_DATE}'
          ),
          NEXTB AS
          (
          SELECT PLAN_FACTORY, PLAN_DATE, G_CODE, PLAN_EQ, PLAN_ORDER, PLAN_ID, PLAN_QTY, SETTING_TIME, UPH, (SETTING_TIME + PLAN_QTY*1.0/UPH*60) AS LEADTIME, CTR_CD FROM DMTB
          ),
          LEATIMETB AS
          (
          SELECT PLAN_FACTORY, PLAN_DATE, PLAN_EQ, PLAN_ORDER, PLAN_ID, PLAN_QTY, LEADTIME, SUM(LEADTIME) OVER (PARTITION BY PLAN_EQ,PLAN_FACTORY ORDER BY PLAN_ORDER ASC) AS ACC_TIME, CTR_CD FROM NEXTB
          ),
          BB AS
          (SELECT PVTB.PROD_REQUEST_NO, isnull(PVTB.[1],0) AS CD1, isnull(PVTB.[2],0) AS CD2,isnull(PVTB.[3],0) AS CD3,isnull(PVTB.[4],0) AS CD4, PVTB.CTR_CD FROM 
          (
              SELECT ZTB_QLSXPLAN.PROD_REQUEST_NO, ZTB_QLSXPLAN.PROCESS_NUMBER, SUM(isnull(SX_RESULT,0)) AS KETQUASX, ZTB_QLSXPLAN.CTR_CD FROM ZTB_SX_RESULT LEFT JOIN ZTB_QLSXPLAN ON (ZTB_QLSXPLAN.PLAN_ID = ZTB_SX_RESULT.PLAN_ID AND ZTB_QLSXPLAN.CTR_CD = ZTB_SX_RESULT.CTR_CD) WHERE ZTB_QLSXPLAN.STEP=0 AND ZTB_QLSXPLAN.CTR_CD='${DATA.CTR_CD}' GROUP BY ZTB_QLSXPLAN.PROD_REQUEST_NO, ZTB_QLSXPLAN.PROCESS_NUMBER, ZTB_QLSXPLAN.CTR_CD
          )
          AS PV
          PIVOT
          ( 
          SUM(PV.KETQUASX) FOR PV.PROCESS_NUMBER IN ([1],[2],[3],[4])
          ) 
          AS PVTB)          
          SELECT M100.USE_YN, M100.PDBV, M100.PDBV_EMPL, M100.PDBV_DATE, ZTB_QLSXPLAN.IS_SETTING,ZTB_QLSXPLAN.REQ_DF ,ZTB_QLSXPLAN.XUATDAOFILM, ZTB_QLSXPLAN.EQ_STATUS, ZTB_QLSXPLAN.MAIN_MATERIAL, ZTB_QLSXPLAN.INT_TEM, ZTB_QLSXPLAN.CHOTBC, ZTB_QLSXPLAN.DKXL,ZTB_QLSXPLAN.NEXT_PLAN_ID, ZTB_QLSXPLAN.KQ_SX_TAM, ZTB_QLSXPLAN.KETQUASX, ZTB_QLSXPLAN.PROCESS_NUMBER, ZTB_QLSXPLAN.PLAN_ORDER, ZTB_QLSXPLAN.STEP, ZTB_QLSXPLAN.PLAN_ID,ZTB_QLSXPLAN.PLAN_DATE,ZTB_QLSXPLAN.PROD_REQUEST_NO,ZTB_QLSXPLAN.PLAN_QTY, ZTB_QLSXPLAN.OLD_PLAN_QTY, ZTB_QLSXPLAN.PLAN_EQ,ZTB_QLSXPLAN.PLAN_FACTORY,ZTB_QLSXPLAN.PLAN_LEADTIME,ZTB_QLSXPLAN.INS_EMPL,ZTB_QLSXPLAN.INS_DATE,ZTB_QLSXPLAN.UPD_EMPL,ZTB_QLSXPLAN.UPD_DATE, M100.G_CODE, M100.G_NAME, M100.PD, (M100.G_C*M100.G_C_R) AS CAVITY, M100.G_NAME_KD, P400.PROD_REQUEST_DATE, P400.PROD_REQUEST_QTY, isnull(BB.CD1,0) AS CD1, isnull(BB.CD2,0) AS CD2, BB.CD3, BB.CD4,
          CASE WHEN ( NOT(M100.EQ1 <> 'NA' AND M100.EQ1 <>'NO' AND M100.EQ1 <>'' AND M100.EQ1 is not null)) THEN 0 ELSE P400.PROD_REQUEST_QTY-isnull(BB.CD1,0) END AS TON_CD1,
          CASE WHEN  (NOT (M100.EQ2 <> 'NA' AND M100.EQ2 <>'NO' AND M100.EQ2 <>'' AND M100.EQ2 is not null)) THEN 0 ELSE P400.PROD_REQUEST_QTY-isnull(BB.CD2,0) END AS TON_CD2,
          CASE WHEN  (NOT (M100.EQ3 <> 'NA' AND M100.EQ3 <>'NO' AND M100.EQ3 <>'' AND M100.EQ3 is not null)) THEN 0 ELSE P400.PROD_REQUEST_QTY-isnull(BB.CD3,0) END AS TON_CD3,
          CASE WHEN  (NOT (M100.EQ4 <> 'NA' AND M100.EQ4 <>'NO' AND M100.EQ4 <>'' AND M100.EQ4 is not null)) THEN 0 ELSE P400.PROD_REQUEST_QTY-isnull(BB.CD4,0) END AS TON_CD4,
          M100.FACTORY, M100.EQ1, M100.EQ2, M100.Setting1, M100.Setting2, M100.UPH1, M100.UPH2, M100.Step1, M100.Step2, isnull(M100.LOSS_SX1,0) AS LOSS_SX1, isnull(M100.LOSS_SX2,0) AS LOSS_SX2, isnull(M100.LOSS_SETTING1,0) AS LOSS_SETTING1, isnull(M100.LOSS_SETTING2,0) AS LOSS_SETTING2,M100.Step3, M100.Step4, M100.EQ3, M100.EQ4, M100.UPH3, M100.UPH4, M100.Setting3, M100.Setting4, isnull(M100.LOSS_SX3,0) AS LOSS_SX3, isnull(M100.LOSS_SX4,0) AS LOSS_SX4, isnull(M100.LOSS_SETTING3,0) AS LOSS_SETTING3, isnull(M100.LOSS_SETTING4,0) AS LOSS_SETTING4, M100.NOTE, isnull(M100.LOSS_KT,0) AS LOSS_KT, ZTB_SX_RESULT.SETTING_START_TIME, ZTB_SX_RESULT.MASS_START_TIME, ZTB_SX_RESULT.MASS_END_TIME, LEATIMETB.LEADTIME AS AT_LEADTIME, LEATIMETB.ACC_TIME,
      CASE WHEN M100.PD <> 0 THEN CEILING((P400.PROD_REQUEST_QTY*(1+(isnull(LOSS_SX2,0)+isnull(LOSS_SX3,0)+isnull(LOSS_SX4,0))*1.0/100+isnull(M100.LOSS_KT,0)*1.0/100 + (isnull(LOSS_SETTING2,0)+isnull(LOSS_SETTING3,0)+isnull(LOSS_SETTING4,0))*1.0/M100.PD*(M100.G_C*M100.G_C_R)*1000))) ELSE 0 END AS SLC_CD1,
CASE WHEN M100.PD <> 0 THEN CEILING((P400.PROD_REQUEST_QTY*(1+(isnull(LOSS_SX3,0)+isnull(LOSS_SX4,0))*1.0/100+isnull(M100.LOSS_KT,0)*1.0/100 + (isnull(LOSS_SETTING3,0)+isnull(LOSS_SETTING4,0))*1.0/M100.PD*(M100.G_C*M100.G_C_R)*1000))) ELSE 0 END AS SLC_CD2,
CASE WHEN M100.PD <> 0 THEN CEILING((P400.PROD_REQUEST_QTY*(1+(isnull(LOSS_SX4,0))*1.0/100+isnull(M100.LOSS_KT,0)*1.0/100 + (isnull(LOSS_SETTING4,0))*1.0/M100.PD*(M100.G_C*M100.G_C_R)*1000))) ELSE 0 END AS SLC_CD3,
CASE WHEN M100.PD <> 0 THEN CEILING((P400.PROD_REQUEST_QTY*(1+(0)*1.0/100+isnull(M100.LOSS_KT,0)*1.0/100 + (0)*1.0/M100.PD*(M100.G_C*M100.G_C_R)*1000))) ELSE 0 END AS SLC_CD4
          FROM ZTB_QLSXPLAN
          LEFT JOIN ZTB_SX_RESULT ON (ZTB_SX_RESULT.PLAN_ID = ZTB_QLSXPLAN.PLAN_ID AND ZTB_SX_RESULT.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
          JOIN P400 ON (P400.PROD_REQUEST_NO = ZTB_QLSXPLAN.PROD_REQUEST_NO AND P400.CTR_CD = ZTB_QLSXPLAN.CTR_CD) 
          JOIN M100 ON (P400.G_CODE = M100.G_CODE AND P400.CTR_CD = M100.CTR_CD)
          LEFT JOIN LEATIMETB ON (LEATIMETB.PLAN_ID = ZTB_QLSXPLAN.PLAN_ID AND LEATIMETB.PLAN_FACTORY = ZTB_QLSXPLAN.PLAN_FACTORY AND LEATIMETB.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
          LEFT JOIN  BB ON (BB.PROD_REQUEST_NO = ZTB_QLSXPLAN.PROD_REQUEST_NO AND BB.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
          ${condition} AND ZTB_QLSXPLAN.CTR_CD='${DATA.CTR_CD}' ORDER BY ZTB_QLSXPLAN.PLAN_EQ ASC,  ZTB_QLSXPLAN.PLAN_ORDER ASC `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
          ////console.log(checkkq);
        })();
        break; */
      case "getqlsxplan2":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = " WHERE 1=1 ";
          if (DATA.FACTORY !== "ALL") {
            condition += ` AND ZTB_QLSXPLAN.PLAN_FACTORY='${DATA.FACTORY}'`;
          }
          if (DATA.MACHINE !== "ALL") {
            condition += ` AND SUBSTRING(ZTB_QLSXPLAN.PLAN_EQ,1,2)='${DATA.MACHINE}'`;
          }
          condition += ` AND ZTB_QLSXPLAN.PLAN_DATE='${DATA.PLAN_DATE}'`;
          let setpdQuery = `WITH DMTB AS
          (
            SELECT  PLAN_FACTORY, PLAN_DATE, ZTB_QLSXPLAN.G_CODE, PLAN_EQ, PLAN_ORDER, PLAN_ID, PLAN_QTY, 
            CASE 
            WHEN IS_SETTING = 'Y' AND SUBSTRING(PLAN_EQ,1,2) = M100.EQ1 THEN isnull(M100.Setting1,9999)
            WHEN IS_SETTING = 'Y' AND SUBSTRING(PLAN_EQ,1,2) = M100.EQ2 THEN isnull(M100.Setting2,9999)
            WHEN IS_SETTING = 'Y' AND SUBSTRING(PLAN_EQ,1,2) = M100.EQ3 THEN isnull(M100.Setting3,9999)
            WHEN IS_SETTING = 'Y' AND SUBSTRING(PLAN_EQ,1,2) = M100.EQ4 THEN isnull(M100.Setting4,9999)
            ELSE 0
            END AS SETTING_TIME,
            CASE 
            WHEN SUBSTRING(PLAN_EQ,1,2) = M100.EQ1 THEN isnull(CASE WHEN M100.UPH1 =0 THEN 1 ELSE M100.UPH1 END,1)
            WHEN SUBSTRING(PLAN_EQ,1,2) = M100.EQ2 THEN isnull(CASE WHEN M100.UPH2 =0 THEN 1 ELSE M100.UPH2 END,1)
            WHEN SUBSTRING(PLAN_EQ,1,2) = M100.EQ3 THEN isnull(CASE WHEN M100.UPH3 =0 THEN 1 ELSE M100.UPH3 END,1)
            WHEN SUBSTRING(PLAN_EQ,1,2) = M100.EQ4 THEN isnull(CASE WHEN M100.UPH4 =0 THEN 1 ELSE M100.UPH4 END,1)
            ELSE 1
            END AS UPH,
            ZTB_QLSXPLAN.CTR_CD
            FROM ZTB_QLSXPLAN
            LEFT JOIN M100 ON (M100.G_CODE = ZTB_QLSXPLAN.G_CODE AND M100.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
            LEFT JOIN P400 ON (P400.PROD_REQUEST_NO = ZTB_QLSXPLAN.PROD_REQUEST_NO AND P400.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
            WHERE ZTB_QLSXPLAN.CTR_CD='${DATA.CTR_CD}' AND PLAN_DATE='${DATA.PLAN_DATE}'
          ),
          NEXTB AS
          (
          SELECT PLAN_FACTORY, PLAN_DATE, G_CODE, PLAN_EQ, PLAN_ORDER, PLAN_ID, PLAN_QTY, SETTING_TIME, UPH, (SETTING_TIME + PLAN_QTY*1.0/UPH*60) AS LEADTIME, CTR_CD FROM DMTB
          ),
          LEATIMETB AS
          (
          SELECT PLAN_FACTORY, PLAN_DATE, PLAN_EQ, PLAN_ORDER, PLAN_ID, PLAN_QTY, LEADTIME, SUM(LEADTIME) OVER (PARTITION BY PLAN_EQ,PLAN_FACTORY ORDER BY PLAN_ORDER ASC) AS ACC_TIME, CTR_CD FROM NEXTB
          ),
          BB AS
          (SELECT PVTB.PROD_REQUEST_NO, isnull(PVTB.[1],0) AS CD1, isnull(PVTB.[2],0) AS CD2,isnull(PVTB.[3],0) AS CD3,isnull(PVTB.[4],0) AS CD4, PVTB.CTR_CD FROM 
          (
              SELECT ZTB_QLSXPLAN.PROD_REQUEST_NO, ZTB_QLSXPLAN.PROCESS_NUMBER, SUM(isnull(SX_RESULT,0)) AS KETQUASX, ZTB_QLSXPLAN.CTR_CD FROM ZTB_SX_RESULT LEFT JOIN ZTB_QLSXPLAN ON (ZTB_QLSXPLAN.PLAN_ID = ZTB_SX_RESULT.PLAN_ID AND ZTB_QLSXPLAN.CTR_CD = ZTB_SX_RESULT.CTR_CD) WHERE ZTB_QLSXPLAN.STEP=0 AND ZTB_QLSXPLAN.CTR_CD='${DATA.CTR_CD}' GROUP BY ZTB_QLSXPLAN.PROD_REQUEST_NO, ZTB_QLSXPLAN.PROCESS_NUMBER, ZTB_QLSXPLAN.CTR_CD
          )
          AS PV
          PIVOT
          ( 
          SUM(PV.KETQUASX) FOR PV.PROCESS_NUMBER IN ([1],[2],[3],[4])
          ) 
          AS PVTB), 
          LOSSKT AS (
           SELECT BB.G_CODE, SUM(BB.INSPECT_TOTAL_QTY) AS INSPECT_TOTAL_QTY, SUM(BB.TOTAL_NG) AS TOTAL_NG, CASE WHEN SUM(BB.TOTAL_NG)*1.0/SUM(BB.INSPECT_TOTAL_QTY) > 0.05 THEN 0.05 ELSE  SUM(BB.TOTAL_NG)*1.0/SUM(BB.INSPECT_TOTAL_QTY) END AS NG_RATE, BB.CTR_CD FROM 
            (
            SELECT AA.G_CODE, AA.INSPECT_DATE,AA.INSPECT_TOTAL_QTY, AA.TOTAL_NG, COUNT(G_CODE) OVER(PARTITION BY G_CODE ORDER BY INSPECT_DATE DESC) AS CNT, AA.CTR_CD
            FROM 
            (
            SELECT  G_CODE,CAST(INSPECT_DATETIME AS date) AS INSPECT_DATE, SUM(INSPECT_TOTAL_QTY-ERR32) AS INSPECT_TOTAL_QTY, SUM(ERR1+ERR2+ERR3+ERR4+ERR5+ERR6+ERR7+ERR8+ERR9+ERR10+ERR11+ERR12+ERR13+ERR14+ERR15+ERR16+ERR17+ERR18+ERR19+ERR20+ERR21+ERR22+ERR23+ERR24+ERR25+ERR26+ERR27+ERR28+ERR29+ERR30+ERR31
            ) AS TOTAL_NG, CTR_CD FROM ZTBINSPECTNGTB
            WHERE CTR_CD='${DATA.CTR_CD}'
            GROUP BY G_CODE,CAST(INSPECT_DATETIME AS date), CTR_CD
            ) AS AA
            ) AS BB
            WHERE BB.CNT <=10 AND BB.INSPECT_TOTAL_QTY<>0
            GROUP BY BB.G_CODE, BB.CTR_CD
          )
          SELECT P400.DELIVERY_DT, M100.USE_YN, M100.PDBV, M100.PDBV_EMPL, M100.PDBV_DATE, ZTB_QLSXPLAN.IS_SETTING,ZTB_QLSXPLAN.REQ_DF ,ZTB_QLSXPLAN.XUATDAOFILM, ZTB_QLSXPLAN.EQ_STATUS, ZTB_QLSXPLAN.MAIN_MATERIAL, ZTB_QLSXPLAN.INT_TEM, ZTB_QLSXPLAN.CHOTBC, ZTB_QLSXPLAN.DKXL,ZTB_QLSXPLAN.NEXT_PLAN_ID, ZTB_QLSXPLAN.KQ_SX_TAM, ZTB_QLSXPLAN.KETQUASX, ZTB_QLSXPLAN.PROCESS_NUMBER, ZTB_QLSXPLAN.PLAN_ORDER, ZTB_QLSXPLAN.STEP, ZTB_QLSXPLAN.PLAN_ID,ZTB_QLSXPLAN.PLAN_DATE,ZTB_QLSXPLAN.PROD_REQUEST_NO,ZTB_QLSXPLAN.PLAN_QTY, ZTB_QLSXPLAN.OLD_PLAN_QTY, ZTB_QLSXPLAN.PLAN_EQ,ZTB_QLSXPLAN.PLAN_FACTORY,ZTB_QLSXPLAN.PLAN_LEADTIME,ZTB_QLSXPLAN.INS_EMPL,ZTB_QLSXPLAN.INS_DATE,ZTB_QLSXPLAN.UPD_EMPL,ZTB_QLSXPLAN.UPD_DATE, M100.G_CODE, M100.G_NAME, M100.PD, (M100.G_C*M100.G_C_R) AS CAVITY, M100.G_NAME_KD, P400.PROD_REQUEST_DATE, P400.PROD_REQUEST_QTY, isnull(BB.CD1,0) AS CD1, isnull(BB.CD2,0) AS CD2, isnull(BB.CD3,0) AS CD3, isnull(BB.CD4,0) AS CD4,
          CASE WHEN ( NOT(M100.EQ1 <> 'NA' AND M100.EQ1 <>'NO' AND M100.EQ1 <>'' AND M100.EQ1 is not null)) THEN 0 ELSE P400.PROD_REQUEST_QTY-isnull(BB.CD1,0) END AS TON_CD1,
          CASE WHEN  (NOT (M100.EQ2 <> 'NA' AND M100.EQ2 <>'NO' AND M100.EQ2 <>'' AND M100.EQ2 is not null)) THEN 0 ELSE P400.PROD_REQUEST_QTY-isnull(BB.CD2,0) END AS TON_CD2,
          CASE WHEN  (NOT (M100.EQ3 <> 'NA' AND M100.EQ3 <>'NO' AND M100.EQ3 <>'' AND M100.EQ3 is not null)) THEN 0 ELSE P400.PROD_REQUEST_QTY-isnull(BB.CD3,0) END AS TON_CD3,
          CASE WHEN  (NOT (M100.EQ4 <> 'NA' AND M100.EQ4 <>'NO' AND M100.EQ4 <>'' AND M100.EQ4 is not null)) THEN 0 ELSE P400.PROD_REQUEST_QTY-isnull(BB.CD4,0) END AS TON_CD4,
          M100.FACTORY, M100.EQ1, M100.EQ2, M100.Setting1, M100.Setting2, M100.UPH1, M100.UPH2, M100.Step1, M100.Step2, isnull(M100.LOSS_SX1,0) AS LOSS_SX1, isnull(M100.LOSS_SX2,0) AS LOSS_SX2, isnull(M100.LOSS_SETTING1,0) AS LOSS_SETTING1, isnull(M100.LOSS_SETTING2,0) AS LOSS_SETTING2,M100.Step3, M100.Step4, M100.EQ3, M100.EQ4, M100.UPH3, M100.UPH4, M100.Setting3, M100.Setting4, isnull(M100.LOSS_SX3,0) AS LOSS_SX3, isnull(M100.LOSS_SX4,0) AS LOSS_SX4, isnull(M100.LOSS_SETTING3,0) AS LOSS_SETTING3, isnull(M100.LOSS_SETTING4,0) AS LOSS_SETTING4, M100.NOTE, isnull(LOSSKT.TOTAL_NG*1.0/LOSSKT.INSPECT_TOTAL_QTY,0)*100 AS LOSS_KT, ZTB_SX_RESULT.SETTING_START_TIME, ZTB_SX_RESULT.MASS_START_TIME, ZTB_SX_RESULT.MASS_END_TIME, LEATIMETB.LEADTIME AS AT_LEADTIME, LEATIMETB.ACC_TIME,CASE WHEN M100.PD <> 0 THEN CEILING((P400.PROD_REQUEST_QTY*(1+(isnull(LOSS_SX2,0)+isnull(LOSS_SX3,0)+isnull(LOSS_SX4,0))*1.0/100+isnull(LOSSKT.NG_RATE,0)) + (isnull(LOSS_SETTING2,0)+isnull(LOSS_SETTING3,0)+isnull(LOSS_SETTING4,0))*1.0/M100.PD*(M100.G_C*M100.G_C_R)*1000)) ELSE 0 END AS SLC_CD1,
CASE WHEN M100.PD <> 0 THEN CEILING((P400.PROD_REQUEST_QTY*(1+(isnull(LOSS_SX3,0)+isnull(LOSS_SX4,0))*1.0/100+isnull(LOSSKT.NG_RATE,0)) + (isnull(LOSS_SETTING3,0)+isnull(LOSS_SETTING4,0))*1.0/M100.PD*(M100.G_C*M100.G_C_R)*1000)) ELSE 0 END AS SLC_CD2,
CASE WHEN M100.PD <> 0 THEN CEILING((P400.PROD_REQUEST_QTY*(1+(isnull(LOSS_SX4,0))*1.0/100+isnull(LOSSKT.NG_RATE,0)) + (isnull(LOSS_SETTING4,0))*1.0/M100.PD*(M100.G_C*M100.G_C_R)*1000)) ELSE 0 END AS SLC_CD3,
CASE WHEN M100.PD <> 0 THEN CEILING((P400.PROD_REQUEST_QTY*(1+(0)*1.0/100+isnull(LOSSKT.NG_RATE,0)) + (0)*1.0/M100.PD*(M100.G_C*M100.G_C_R)*1000)) ELSE 0 END AS SLC_CD4
          FROM ZTB_QLSXPLAN
          LEFT JOIN ZTB_SX_RESULT ON (ZTB_SX_RESULT.PLAN_ID = ZTB_QLSXPLAN.PLAN_ID AND ZTB_SX_RESULT.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
          JOIN P400 ON (P400.PROD_REQUEST_NO = ZTB_QLSXPLAN.PROD_REQUEST_NO AND P400.CTR_CD = ZTB_QLSXPLAN.CTR_CD) 
          JOIN M100 ON (P400.G_CODE = M100.G_CODE AND P400.CTR_CD = M100.CTR_CD)
          LEFT JOIN LEATIMETB ON (LEATIMETB.PLAN_ID = ZTB_QLSXPLAN.PLAN_ID AND LEATIMETB.PLAN_FACTORY = ZTB_QLSXPLAN.PLAN_FACTORY AND LEATIMETB.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
          LEFT JOIN  BB ON (BB.PROD_REQUEST_NO = ZTB_QLSXPLAN.PROD_REQUEST_NO AND BB.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
          LEFT JOIN LOSSKT ON (LOSSKT.G_CODE = ZTB_QLSXPLAN.G_CODE AND LOSSKT.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
          ${condition} AND ZTB_QLSXPLAN.CTR_CD='${DATA.CTR_CD}' ORDER BY ZTB_QLSXPLAN.PLAN_EQ ASC,  ZTB_QLSXPLAN.PLAN_ORDER ASC `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
          ////console.log(checkkq);
        })();
        break;
      case "getqlsxplan2_New":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = " WHERE 1=1 ";
          if (DATA.FACTORY !== "ALL") {
            condition += ` AND ZTB_QLSXPLAN.PLAN_FACTORY='${DATA.FACTORY}'`;
          }
          if (DATA.MACHINE !== "ALL") {
            condition += ` AND SUBSTRING(ZTB_QLSXPLAN.PLAN_EQ,1,2)='${DATA.MACHINE}'`;
          }
          condition += ` AND ZTB_QLSXPLAN.PLAN_DATE='${DATA.PLAN_DATE}'`;
          let setpdQuery = `WITH BB AS
(SELECT PVTB.PROD_REQUEST_NO, isnull(PVTB.[1],0) AS CD1, isnull(PVTB.[2],0) AS CD2,isnull(PVTB.[3],0) AS CD3,isnull(PVTB.[4],0) AS CD4, PVTB.CTR_CD FROM
(
SELECT ZTB_QLSXPLAN.PROD_REQUEST_NO, ZTB_QLSXPLAN.PROCESS_NUMBER, SUM(isnull(SX_RESULT,0)) AS KETQUASX, ZTB_QLSXPLAN.CTR_CD FROM ZTB_SX_RESULT LEFT JOIN ZTB_QLSXPLAN ON (ZTB_QLSXPLAN.PLAN_ID = ZTB_SX_RESULT.PLAN_ID AND ZTB_QLSXPLAN.CTR_CD = ZTB_SX_RESULT.CTR_CD) WHERE ZTB_QLSXPLAN.STEP=0 AND ZTB_QLSXPLAN.CTR_CD='${DATA.CTR_CD}' GROUP BY ZTB_QLSXPLAN.PROD_REQUEST_NO, ZTB_QLSXPLAN.PROCESS_NUMBER, ZTB_QLSXPLAN.CTR_CD
)
AS PV
PIVOT
(
SUM(PV.KETQUASX) FOR PV.PROCESS_NUMBER IN ([1],[2],[3],[4])
)
AS PVTB),
LOSSKT AS (
SELECT BB.G_CODE, SUM(BB.INSPECT_TOTAL_QTY) AS INSPECT_TOTAL_QTY, SUM(BB.TOTAL_NG) AS TOTAL_NG, BB.CTR_CD FROM
(
SELECT AA.G_CODE, AA.INSPECT_DATE,AA.INSPECT_TOTAL_QTY, AA.TOTAL_NG, COUNT(G_CODE) OVER(PARTITION BY G_CODE ORDER BY INSPECT_DATE DESC) AS CNT, AA.CTR_CD
FROM
(
SELECT  G_CODE,CAST(INSPECT_DATETIME AS date) AS INSPECT_DATE, SUM(INSPECT_TOTAL_QTY-ERR32) AS INSPECT_TOTAL_QTY, SUM(ERR1+ERR2+ERR3+ERR4+ERR5+ERR6+ERR7+ERR8+ERR9+ERR10+ERR11+ERR12+ERR13+ERR14+ERR15+ERR16+ERR17+ERR18+ERR19+ERR20+ERR21+ERR22+ERR23+ERR24+ERR25+ERR26+ERR27+ERR28+ERR29+ERR30+ERR31
) AS TOTAL_NG, CTR_CD FROM ZTBINSPECTNGTB
WHERE CTR_CD='${DATA.CTR_CD}'
GROUP BY G_CODE,CAST(INSPECT_DATETIME AS date), CTR_CD
) AS AA
) AS BB
WHERE BB.CNT <=10 AND BB.INSPECT_TOTAL_QTY<>0
GROUP BY BB.G_CODE, BB.CTR_CD
),
ZTB_PROD_PROCESS_TB2 AS (
SELECT CTR_CD,G_CODE,PROCESS_NUMBER,EQ_SERIES,SETTING_TIME,UPH,STEP,LOSS_SX,LOSS_SETTING,INS_DATE,INS_EMPL,UPD_DATE,UPD_EMPL,FACTORY,SUM(LOSS_SX) OVER (PARTITION BY G_CODE ORDER BY PROCESS_NUMBER ROWS BETWEEN 1 FOLLOWING AND UNBOUNDED FOLLOWING) AS Total_LOSS_SX,SUM(LOSS_SETTING) OVER (PARTITION BY G_CODE ORDER BY PROCESS_NUMBER ROWS BETWEEN 1 FOLLOWING AND UNBOUNDED FOLLOWING) AS Total_LOSS_SETTING FROM ZTB_PROD_PROCESS_TB
),
SLCTB AS
(SELECT P400.CTR_CD, P400.PROD_REQUEST_DATE, P400.PROD_REQUEST_QTY, P400.G_CODE,P400.PROD_REQUEST_NO,ZTB_PROD_PROCESS_TB2.PROCESS_NUMBER, CEILING(P400.PROD_REQUEST_QTY*(1+(isnull(ZTB_PROD_PROCESS_TB2.Total_LOSS_SX,0) + isnull(LOSSKT.TOTAL_NG*1.0/LOSSKT.INSPECT_TOTAL_QTY*100,0) )*1.0/100) + isnull(ZTB_PROD_PROCESS_TB2.Total_LOSS_SETTING,0)*1.0/M100.PD*1000*(M100.G_C*M100.G_C_R)) AS SLC  
FROM P400 
LEFT JOIN ZTB_PROD_PROCESS_TB2 ON P400.G_CODE = ZTB_PROD_PROCESS_TB2.G_CODE AND P400.CTR_CD = ZTB_PROD_PROCESS_TB2.CTR_CD
LEFT JOIN M100 ON M100.CTR_CD = P400.CTR_CD AND M100.G_CODE = P400.G_CODE
LEFT JOIN LOSSKT ON LOSSKT.CTR_CD = P400.CTR_CD AND LOSSKT.G_CODE = P400.G_CODE
),
SLC_PVTB AS
(
SELECT SLCTB.CTR_CD,SLCTB.PROD_REQUEST_NO, SLCTB.PROD_REQUEST_DATE, SLCTB.PROD_REQUEST_QTY, SLCTB.[1] AS SLC_CD1, SLCTB.[2] AS SLC_CD2, SLCTB.[3] AS SLC_CD3, SLCTB.[4] AS SLC_CD4 
FROM (
SELECT 
CTR_CD,
PROD_REQUEST_NO, 
PROD_REQUEST_DATE,
PROD_REQUEST_QTY,
PROCESS_NUMBER,
SLC
FROM 
SLCTB
) AS SourceTable
PIVOT (
MAX(SLC) FOR PROCESS_NUMBER IN ([1], [2], [3], [4], [5]) -- Add as many process numbers as you have
) AS SLCTB
)
SELECT M100.USE_YN, M100.PDBV, M100.PDBV_EMPL, M100.PDBV_DATE, ZTB_QLSXPLAN.IS_SETTING,ZTB_QLSXPLAN.REQ_DF ,ZTB_QLSXPLAN.XUATDAOFILM, ZTB_QLSXPLAN.EQ_STATUS, ZTB_QLSXPLAN.MAIN_MATERIAL, ZTB_QLSXPLAN.INT_TEM, ZTB_QLSXPLAN.CHOTBC, ZTB_QLSXPLAN.DKXL,ZTB_QLSXPLAN.NEXT_PLAN_ID, ZTB_QLSXPLAN.KQ_SX_TAM, ZTB_QLSXPLAN.KETQUASX, ZTB_QLSXPLAN.PROCESS_NUMBER, ZTB_QLSXPLAN.PLAN_ORDER, ZTB_QLSXPLAN.STEP, ZTB_QLSXPLAN.PLAN_ID,ZTB_QLSXPLAN.PLAN_DATE,ZTB_QLSXPLAN.PROD_REQUEST_NO,ZTB_QLSXPLAN.PLAN_QTY, ZTB_QLSXPLAN.OLD_PLAN_QTY, ZTB_QLSXPLAN.PLAN_EQ,ZTB_QLSXPLAN.PLAN_FACTORY,ZTB_QLSXPLAN.PLAN_LEADTIME,ZTB_QLSXPLAN.INS_EMPL,ZTB_QLSXPLAN.INS_DATE,ZTB_QLSXPLAN.UPD_EMPL,ZTB_QLSXPLAN.UPD_DATE, M100.G_CODE, M100.G_NAME, M100.PD, (M100.G_C*M100.G_C_R) AS CAVITY, M100.G_NAME_KD, SLC_PVTB.PROD_REQUEST_DATE, SLC_PVTB.PROD_REQUEST_QTY, isnull(BB.CD1,0) AS CD1, isnull(BB.CD2,0) AS CD2, isnull(BB.CD3,0) AS CD3,isnull(BB.CD4,0) AS CD4,
(isnull(SLC_PVTB.SLC_CD1,0)- isnull(BB.CD1,0)) AS TON_CD1,
(isnull(SLC_PVTB.SLC_CD2,0)- isnull(BB.CD2,0)) AS TON_CD2,
(isnull(SLC_PVTB.SLC_CD3,0)- isnull(BB.CD3,0)) AS TON_CD3,
(isnull(SLC_PVTB.SLC_CD4,0)- isnull(BB.CD4,0)) AS TON_CD4,
M100.NOTE, isnull(LOSSKT.TOTAL_NG*1.0/LOSSKT.INSPECT_TOTAL_QTY,0)*100 AS LOSS_KT, ZTB_SX_RESULT.SETTING_START_TIME, ZTB_SX_RESULT.MASS_START_TIME, ZTB_SX_RESULT.MASS_END_TIME,
(ZTB_QLSXPLAN.PLAN_QTY*1.0/ZTB_PROD_PROCESS_TB.UPH*60 + (CASE WHEN IS_SETTING = 'Y' THEN  ZTB_PROD_PROCESS_TB.SETTING_TIME ELSE 0 END)) AS AT_LEADTIME,
SUM((ZTB_QLSXPLAN.PLAN_QTY*1.0/ZTB_PROD_PROCESS_TB.UPH*60 + (CASE WHEN IS_SETTING = 'Y' THEN  ZTB_PROD_PROCESS_TB.SETTING_TIME ELSE 0 END))) OVER (PARTITION BY PLAN_EQ,PLAN_FACTORY ORDER BY PLAN_ORDER ASC) AS ACC_TIME,
isnull(SLC_PVTB.SLC_CD1,0) AS SLC_CD1, isnull(SLC_PVTB.SLC_CD2,0) AS SLC_CD2, isnull(SLC_PVTB.SLC_CD3,0) AS SLC_CD3, isnull(SLC_PVTB.SLC_CD4,0) AS SLC_CD4
FROM ZTB_QLSXPLAN
LEFT JOIN ZTB_SX_RESULT ON (ZTB_SX_RESULT.PLAN_ID = ZTB_QLSXPLAN.PLAN_ID AND ZTB_SX_RESULT.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
JOIN M100 ON (ZTB_QLSXPLAN.G_CODE = M100.G_CODE AND ZTB_QLSXPLAN.CTR_CD = M100.CTR_CD)
LEFT JOIN ZTB_PROD_PROCESS_TB ON (ZTB_PROD_PROCESS_TB.G_CODE = ZTB_QLSXPLAN.G_CODE AND ZTB_PROD_PROCESS_TB.FACTORY = ZTB_QLSXPLAN.PLAN_FACTORY AND ZTB_PROD_PROCESS_TB.CTR_CD = ZTB_QLSXPLAN.CTR_CD AND ZTB_PROD_PROCESS_TB.PROCESS_NUMBER = ZTB_QLSXPLAN.PROCESS_NUMBER)
LEFT JOIN  BB ON (BB.PROD_REQUEST_NO = ZTB_QLSXPLAN.PROD_REQUEST_NO AND BB.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
LEFT JOIN LOSSKT ON (LOSSKT.G_CODE = ZTB_QLSXPLAN.G_CODE AND LOSSKT.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
LEFT JOIN SLC_PVTB ON (SLC_PVTB.PROD_REQUEST_NO = ZTB_QLSXPLAN.PROD_REQUEST_NO AND SLC_PVTB.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
          ${condition} AND ZTB_QLSXPLAN.CTR_CD='${DATA.CTR_CD}' ORDER BY ZTB_QLSXPLAN.PLAN_EQ ASC,  ZTB_QLSXPLAN.PLAN_ORDER ASC `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
          ////console.log(checkkq);
        })();
        break;
      case "checkdiemdanh":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `SELECT * FROM ZTBATTENDANCETB WHERE CTR_CD='${DATA.CTR_CD}' AND EMPL_NO= '${EMPL_NO}' AND APPLY_DATE= '${moment().format(
            "YYYY-MM-DD"
          )}' `;
          //${moment().format('YYYY-MM-DD')}
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
          ////console.log(checkkq);
        })();
        break;
      case "checkdiemdanh_empl":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `SELECT * FROM ZTBATTENDANCETB WHERE CTR_CD='${DATA.CTR_CD}' AND EMPL_NO= '${DATA.EMPL_NO}' AND APPLY_DATE= '${DATA.APPLY_DATE}' `;
          //${moment().format('YYYY-MM-DD')}
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
          ////console.log(checkkq);
        })();
        break;
      case "getchithidatatable":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
          WITH IQCTB AS
          (
          SELECT CTR_CD, M_CODE, SUM(TOTAL_IN_QTY) AS IQC_STOCK  FROM ZTB_SX_NG_MATERIAL WHERE QC_PASS='Y' AND USE_YN='Y' AND PHANLOAI='NVL' GROUP BY CTR_CD, M_CODE
          )
          SELECT ZTB_QLSXCHITHI.LIEUQL_SX ,ZTB_QLSXCHITHI.CHITHI_ID, ZTB_QLSXCHITHI.PLAN_ID, ZTB_QLSXCHITHI.M_CODE, M090.M_NAME, M090.WIDTH_CD, ZTB_QLSXCHITHI.M_ROLL_QTY, ZTB_QLSXCHITHI.M_MET_QTY,ZTB_QLSXCHITHI.M_QTY, isnull(BB.TOTAL_IN_QTY,0) AS OUT_KHO_SX, isnull(AA.OUT_CFM_QTY,0) AS OUT_CFM_QTY ,ZTB_QLSXCHITHI.INS_EMPL, ZTB_QLSXCHITHI.INS_DATE, ZTB_QLSXCHITHI.UPD_EMPL, ZTB_QLSXCHITHI.UPD_DATE, (isnull(M090.STOCK_CFM_NM1,0)+isnull(M090.STOCK_CFM_NM2,0)) AS M_STOCK, isnull(IQCTB.IQC_STOCK,0) AS IQC_STOCK FROM ZTB_QLSXCHITHI 
          JOIN M090 ON (M090.M_CODE = ZTB_QLSXCHITHI.M_CODE AND M090.CTR_CD = ZTB_QLSXCHITHI.CTR_CD) 
          LEFT JOIN IQCTB ON (IQCTB.M_CODE = ZTB_QLSXCHITHI.M_CODE AND IQCTB.CTR_CD = ZTB_QLSXCHITHI.CTR_CD) 
          LEFT JOIN 
          (
          SELECT PLAN_ID, M_CODE, CTR_CD, SUM(OUT_CFM_QTY) AS OUT_CFM_QTY FROM O302 WHERE PLAN_ID='${DATA.PLAN_ID}' AND CTR_CD='${DATA.CTR_CD}' GROUP BY PLAN_ID, M_CODE, CTR_CD
          ) AS AA ON (AA.PLAN_ID=ZTB_QLSXCHITHI.PLAN_ID AND AA.M_CODE=ZTB_QLSXCHITHI.M_CODE AND AA.CTR_CD=ZTB_QLSXCHITHI.CTR_CD)
          LEFT JOIN  
          (SELECT PLAN_ID_SUDUNG, M_CODE, CTR_CD, isnull(SUM(TOTAL_IN_QTY),0) AS TOTAL_IN_QTY  FROM IN_KHO_SX WHERE PLAN_ID_SUDUNG='${DATA.PLAN_ID}' AND IN_KHO_SX.PLAN_ID_INPUT <> IN_KHO_SX.PLAN_ID_SUDUNG AND CTR_CD='${DATA.CTR_CD}' GROUP BY PLAN_ID_SUDUNG, M_CODE, CTR_CD) AS BB ON (BB.PLAN_ID_SUDUNG=ZTB_QLSXCHITHI.PLAN_ID AND BB.M_CODE=ZTB_QLSXCHITHI.M_CODE AND BB.CTR_CD=ZTB_QLSXCHITHI.CTR_CD)
          WHERE ZTB_QLSXCHITHI.PLAN_ID='${DATA.PLAN_ID}' AND ZTB_QLSXCHITHI.CTR_CD='${DATA.CTR_CD}' ORDER BY (isnull(M090.STOCK_CFM_NM1,0)+isnull(M090.STOCK_CFM_NM2,0)) DESC
          `;
          //${moment().format('YYYY-MM-DD')}
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
          //console.log(checkkq);
        })();
        break;
      case "getLastestPLAN_ID":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `SELECT TOP 1 PLAN_ID from ZTB_QLSXPLAN WHERE CTR_CD='${DATA.CTR_CD}' AND PROD_REQUEST_NO='${DATA.PROD_REQUEST_NO}' ORDER BY PLAN_ID DESC `;
          //${moment().format('YYYY-MM-DD')}
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
          ////console.log(checkkq);
        })();
        break;
      case "getLastestPLANORDER":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `SELECT  TOP 1 *  FROM ZTB_QLSXPLAN WHERE CTR_CD='${DATA.CTR_CD}' AND  PLAN_DATE='${DATA.PLAN_DATE}' AND PLAN_EQ='${DATA.PLAN_EQ}' AND PLAN_FACTORY='${DATA.PLAN_FACTORY}' ORDER BY PLAN_ORDER DESC`;
          //${moment().format('YYYY-MM-DD')}
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
          ////console.log(checkkq);
        })();
        break;
      case "addPlanQLSX":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `INSERT INTO ZTB_QLSXPLAN (CTR_CD,PLAN_ID,PLAN_DATE,PROD_REQUEST_NO,PLAN_QTY,PLAN_EQ,PLAN_FACTORY,PLAN_LEADTIME,STEP,INS_EMPL,INS_DATE,UPD_EMPL,UPD_DATE,PLAN_ORDER, G_CODE, PROCESS_NUMBER, NEXT_PLAN_ID, REQ_DF, IS_SETTING) VALUES('${DATA.CTR_CD}','${DATA.PLAN_ID}','${DATA.PLAN_DATE}','${DATA.PROD_REQUEST_NO}','${DATA.PLAN_QTY}','${DATA.PLAN_EQ}','${DATA.PLAN_FACTORY}','${DATA.PLAN_LEADTIME}','${DATA.STEP}','${EMPL_NO}',GETDATE(),'${EMPL_NO}',GETDATE(),'${DATA.PLAN_ORDER}', '${DATA.G_CODE}','${DATA.PROCESS_NUMBER}','${DATA.NEXT_PLAN_ID}','R','${DATA.IS_SETTING}')`;
          //${moment().format('YYYY-MM-DD')}
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
          ////console.log(checkkq);
        })();
        break;
      case "deletePlanQLSX":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery1 = `DELETE FROM ZTB_QLSXPLAN WHERE CTR_CD='${DATA.CTR_CD}' AND PLAN_ID='${DATA.PLAN_ID}'`;
          let setpdQuery2 = `DELETE FROM ZTB_QLSXCHITHI WHERE CTR_CD='${DATA.CTR_CD}' AND PLAN_ID='${DATA.PLAN_ID}'`;
          let setpdQuery3 = `DELETE FROM O300 WHERE CTR_CD='${DATA.CTR_CD}' AND PLAN_ID='${DATA.PLAN_ID}'`;
          let setpdQuery4 = `DELETE FROM O301 WHERE CTR_CD='${DATA.CTR_CD}' AND PLAN_ID='${DATA.PLAN_ID}'`;
          //${moment().format('YYYY-MM-DD')}
          //console.log(setpdQuery1);
          checkkq = await queryDB(setpdQuery1);
          checkkq = await queryDB(setpdQuery2);
          checkkq = await queryDB(setpdQuery3);
          checkkq = await queryDB(setpdQuery4);
          res.send(checkkq);
          ////console.log(checkkq);
        })();
        break;
      case "updatePlanQLSX":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          //let setpdQuery = `UPDATE ZTB_QLSXPLAN SET PLAN_QTY=${DATA.PLAN_QTY}, STEP=${DATA.STEP}, PLAN_LEADTIME=${DATA.PLAN_LEADTIME}, PLAN_ORDER=${DATA.PLAN_ORDER},PROCESS_NUMBER=${DATA.PROCESS_NUMBER},KETQUASX=${DATA.KETQUASX},PLAN_EQ='${DATA.PLAN_EQ}', UPD_EMPL='${EMPL_NO}', UPD_DATE=GETDATE() WHERE PLAN_ID='${DATA.PLAN_ID}'`;
          let setpdQuery = `UPDATE ZTB_QLSXPLAN SET NEXT_PLAN_ID = '${DATA.NEXT_PLAN_ID}' ,PLAN_QTY=${DATA.PLAN_QTY}, OLD_PLAN_QTY=${DATA.OLD_PLAN_QTY},STEP=${DATA.STEP}, PLAN_LEADTIME=${DATA.PLAN_LEADTIME}, PLAN_ORDER=${DATA.PLAN_ORDER},PROCESS_NUMBER=${DATA.PROCESS_NUMBER},PLAN_EQ='${DATA.PLAN_EQ}', IS_SETTING='${DATA.IS_SETTING}', CURRENT_LOSS_SX=${DATA.CURRENT_LOSS_SX}, CURRENT_SETTING_M=${DATA.CURRENT_SETTING_M},CURRENT_LOSS_KT=${DATA.CURRENT_LOSS_KT}, NEEDED_QTY=${DATA.NEEDED_QTY}, UPD_EMPL='${EMPL_NO}', UPD_DATE=GETDATE() WHERE CTR_CD='${DATA.CTR_CD}' AND PLAN_ID='${DATA.PLAN_ID}'`;
          //${moment().format('YYYY-MM-DD')}
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
          ////console.log(checkkq);
        })();
        break;
      case "deleteChiThi":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `DELETE FROM ZTB_QLSXCHITHI WHERE CTR_CD='${DATA.CTR_CD}' AND PLAN_ID='${DATA.PLAN_ID}'`;
          //${moment().format('YYYY-MM-DD')}
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
          ////console.log(checkkq);
        })();
        break;
      case "insertChiThi":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `INSERT INTO ZTB_QLSXCHITHI (CTR_CD, PLAN_ID, M_CODE, M_ROLL_QTY, M_MET_QTY, INS_EMPL, INS_DATE, UPD_EMPL, UPD_DATE, M_QTY, LIEUQL_SX) VALUES ('${DATA.CTR_CD}','${DATA.PLAN_ID}','${DATA.M_CODE}','${DATA.M_ROLL_QTY}','${DATA.M_MET_QTY}','${EMPL_NO}', GETDATE(),'${EMPL_NO}',GETDATE(),'${DATA.M_QTY}',${DATA.LIEUQL_SX})`;
          //${moment().format('YYYY-MM-DD')}
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
        })();
        break;
      case "updateChiThi":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `UPDATE ZTB_QLSXCHITHI SET LIEUQL_SX=${DATA.LIEUQL_SX}, M_MET_QTY ='${DATA.M_MET_QTY}', UPD_DATE=GETDATE(), UPD_EMPL='${EMPL_NO}' WHERE CTR_CD='${DATA.CTR_CD}' AND PLAN_ID='${DATA.PLAN_ID}' AND M_CODE='${DATA.M_CODE}'`;
          //${moment().format('YYYY-MM-DD')}
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
        })();
        break;
      case "getO300_LAST_OUT_NO":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `SELECT TOP 1 OUT_NO, OUT_DATE FROM O300 WHERE CTR_CD='${DATA.CTR_CD}' AND OUT_DATE='${moment().format(
            "YYYYMMDD"
          )}' ORDER BY OUT_NO DESC`;
          //${moment().format('YYYY-MM-DD')}
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
        })();
        break;
      case "getO300_ROW":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `SELECT TOP 1 OUT_NO, OUT_DATE FROM O300 WHERE CTR_CD='${DATA.CTR_CD}' AND PLAN_ID='${DATA.PLAN_ID}'`;
          //${moment().format('YYYY-MM-DD')}
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
        })();
        break;
      case "setEMPL_WORK_POSITION":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `UPDATE ZTBEMPLINFO SET WORK_POSITION_CODE=${DATA.WORK_POSITION_CODE} WHERE CTR_CD='${DATA.CTR_CD}' AND EMPL_NO='${DATA.EMPL_NO}'`;
          //${moment().format('YYYY-MM-DD')}
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
        })();
        break;
      case "insertO300":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `INSERT INTO O300 (CTR_CD,OUT_DATE,OUT_NO,CODE_03,CODE_50,CODE_52,PROD_REQUEST_DATE,PROD_REQUEST_NO,USE_YN,INS_DATE,INS_EMPL,UPD_DATE,UPD_EMPL,FACTORY,PLAN_ID) VALUES('${DATA.CTR_CD}','${DATA.OUT_DATE}','${DATA.OUT_NO}','${DATA.CODE_03}','${DATA.CODE_50}','${DATA.CODE_52}','${DATA.PROD_REQUEST_DATE}','${DATA.PROD_REQUEST_NO}','${DATA.USE_YN}',GETDATE(),'${EMPL_NO}',GETDATE(),'${EMPL_NO}','${DATA.FACTORY}','${DATA.PLAN_ID}')`;
          //${moment().format('YYYY-MM-DD')}
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
        })();
        break;
      case "insertO301":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `INSERT INTO O301 (CTR_CD, OUT_DATE, OUT_NO, OUT_SEQ, CODE_03, M_CODE, OUT_PRE_QTY, USE_YN, INS_DATE, INS_EMPL, PLAN_ID) VALUES('${DATA.CTR_CD}','${DATA.OUT_DATE}','${DATA.OUT_NO}','${DATA.OUT_SEQ}','${DATA.CODE_03}','${DATA.M_CODE}','${DATA.OUT_PRE_QTY}','${DATA.USE_YN}',GETDATE(),'${EMPL_NO}','${DATA.PLAN_ID}')`;
          //${moment().format('YYYY-MM-DD')}
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
        })();
        break;
      case "updateO301":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `UPDATE O301 SET OUT_PRE_QTY='${DATA.OUT_PRE_QTY}', UPD_DATE=GETDATE(), UPD_EMPL='${EMPL_NO}' WHERE CTR_CD='${DATA.CTR_CD}' AND PLAN_ID='${DATA.PLAN_ID}' AND M_CODE='${DATA.M_CODE}'`;
          //${moment().format('YYYY-MM-DD')}
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
        })();
        break;
      case "checkPLANID_OUT_KHO_AO":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `SELECT TOP 1 * FROM OUT_KHO_SX WHERE CTR_CD='${DATA.CTR_CD}' AND PLAN_ID_OUTPUT='${DATA.PLAN_ID}'`;
          //${moment().format('YYYY-MM-DD')}
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
        })();
        break;
      case "checkPLANID_O302":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `SELECT TOP 1 * FROM O302 WHERE CTR_CD='${DATA.CTR_CD}' AND PLAN_ID='${DATA.PLAN_ID}'`;
          //${moment().format('YYYY-MM-DD')}
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
        })();
        break;
      case "checkPLANID_O300":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `SELECT TOP 1 * FROM O300 WHERE CTR_CD='${DATA.CTR_CD}' AND PLAN_ID='${DATA.PLAN_ID}'`;
          //${moment().format('YYYY-MM-DD')}
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
        })();
        break;
      case "checkPLANID_O301":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `SELECT O301.OUT_DATE, O301.OUT_NO, O301.OUT_SEQ, O301.M_CODE, M090.M_NAME, M090.WIDTH_CD, O301.OUT_PRE_QTY, O301.OUT_CFM_QTY, O301.REMK, O301.USE_YN, O301.INS_DATE, O301.INS_EMPL, O301.UPD_DATE, O301.UPD_EMPL, O301.FACTORY, O301.CUST_CD, O301.TOTAL_ROLL_QTY, O301.PLAN_ID, O301.PLAN_ID2 FROM O301 LEFT JOIN M090 ON M090.M_CODE = O301.M_CODE AND M090.CTR_CD = O301.CTR_CD WHERE O301.CTR_CD='${DATA.CTR_CD}' AND O301.PLAN_ID='${DATA.PLAN_ID}' ORDER BY OUT_SEQ DESC`;
          //${moment().format('YYYY-MM-DD')}
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
        })();
        break;
      case "saveQLSX":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `UPDATE M100 SET FACTORY='${DATA.FACTORY}',EQ1='${DATA.EQ1}',EQ2='${DATA.EQ2}', EQ3='${DATA.EQ3}',EQ4='${DATA.EQ4}',Setting1='${DATA.Setting1}', Setting2='${DATA.Setting2}', Setting3='${DATA.Setting3}', Setting4='${DATA.Setting4}', UPH1='${DATA.UPH1}',UPH2='${DATA.UPH2}',UPH3='${DATA.UPH3}',UPH4='${DATA.UPH4}',Step1='${DATA.Step1}',Step2='${DATA.Step2}',Step3='${DATA.Step3}',Step4='${DATA.Step4}',LOSS_SX1='${DATA.LOSS_SX1}', LOSS_SX2='${DATA.LOSS_SX2}',LOSS_SX3='${DATA.LOSS_SX3}',LOSS_SX4='${DATA.LOSS_SX4}',LOSS_SETTING1='${DATA.LOSS_SETTING1}',LOSS_SETTING2='${DATA.LOSS_SETTING2}',LOSS_SETTING3='${DATA.LOSS_SETTING3}',LOSS_SETTING4='${DATA.LOSS_SETTING4}',NOTE='${DATA.NOTE}' WHERE CTR_CD='${DATA.CTR_CD}' AND G_CODE='${DATA.G_CODE}'`;
          //${moment().format('YYYY-MM-DD')}
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
        })();
        break;
      case "deleteMCODEExistIN_O302":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `DELETE FROM ZTB_QLSXCHITHI
                    WHERE ZTB_QLSXCHITHI.CTR_CD='${DATA.CTR_CD}' AND NOT EXISTS 
                    (SELECT * FROM O302
                    WHERE O302.CTR_CD='${DATA.CTR_CD}' AND O302.PLAN_ID = ZTB_QLSXCHITHI.PLAN_ID
                    AND O302.M_CODE = ZTB_QLSXCHITHI.M_CODE)
                    AND ZTB_QLSXCHITHI.PLAN_ID='${DATA.PLAN_ID}'`;
          //${moment().format('YYYY-MM-DD')}
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
        })();
        break;
      case "deleteMCODE_O301_Not_ExistIN_O302":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `DELETE FROM O301
                    WHERE O301.CTR_CD='${DATA.CTR_CD}' AND NOT EXISTS 
                    (SELECT * FROM O302
                    WHERE O302.CTR_CD='${DATA.CTR_CD}' AND O302.PLAN_ID = O301.PLAN_ID
                    AND O302.M_CODE = O301.M_CODE)
                    AND O301.PLAN_ID='${DATA.PLAN_ID}'`;
          //${moment().format('YYYY-MM-DD')}
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
        })();
        break;
      case "checkM_CODE_PLAN_ID_Exist":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `SELECT * FROM ZTB_QLSXCHITHI WHERE CTR_CD='${DATA.CTR_CD}' AND PLAN_ID='${DATA.PLAN_ID}' AND M_CODE='${DATA.M_CODE}'`;
          //${moment().format('YYYY-MM-DD')}
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
        })();
        break;
      case "checkM_CODE_PLAN_ID_Exist_in_O301":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `SELECT * FROM O301 WHERE CTR_CD='${DATA.CTR_CD}' AND PLAN_ID='${DATA.PLAN_ID}' AND M_CODE='${DATA.M_CODE}'`;
          //${moment().format('YYYY-MM-DD')}
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
        })();
        break;
      case "updateLIEUQL_SX_M140":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `UPDATE M140 SET LIEUQL_SX=${DATA.LIEUQL_SX}, UPD_DATE =GETDATE() WHERE CTR_CD='${DATA.CTR_CD}' AND G_CODE='${DATA.G_CODE}' AND M_CODE='${DATA.M_CODE}'`;
          //${moment().format('YYYY-MM-DD')}
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
        })();
        break;
      case "checktonlieutrongxuong":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let conditon = ` WHERE IN_KHO_SX.USE_YN='Y'`;
          console.log("factory: " + DATA.FACTORY);
          if (DATA.FACTORY !== "ALL") {
            conditon += ` AND IN_KHO_SX.FACTORY = '${DATA.FACTORY}' `;
          }
          let setpdQuery = `SELECT IN_KHO_SX.IN_KHO_ID, IN_KHO_SX.FACTORY, IN_KHO_SX.PHANLOAI, IN_KHO_SX.PLAN_ID_INPUT, IN_KHO_SX.M_CODE, M090.M_NAME, M090.WIDTH_CD, IN_KHO_SX.M_LOT_NO, IN_KHO_SX.ROLL_QTY, IN_KHO_SX.IN_QTY, IN_KHO_SX.TOTAL_IN_QTY,CASE WHEN IN_KHO_SX.FSC ='Y' THEN 'Y' ELSE 'N' END AS FSC, IN_KHO_SX.INS_DATE,ZTB_QLSXPLAN.PLAN_EQ  FROM IN_KHO_SX LEFT JOIN M090 ON  (M090.M_CODE= IN_KHO_SX.M_CODE AND M090.CTR_CD = IN_KHO_SX.CTR_CD) LEFT JOIN ZTB_QLSXPLAN ON (ZTB_QLSXPLAN.PLAN_ID=IN_KHO_SX.PLAN_ID_INPUT AND ZTB_QLSXPLAN.CTR_CD = IN_KHO_SX.CTR_CD) ${conditon} AND IN_KHO_SX.CTR_CD='${DATA.CTR_CD}' ORDER BY IN_KHO_SX.INS_DATE DESC`;
          //${moment().format('YYYY-MM-DD')}
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
        })();
        break;
      case "checktonlieutrongxuong_sub":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let conditon = ` WHERE IN_KHO_SX_SUB.USE_YN='Y'`;
          console.log("factory: " + DATA.FACTORY);
          if (DATA.FACTORY !== "ALL") {
            conditon += ` AND IN_KHO_SX_SUB.FACTORY = '${DATA.FACTORY}' `;
          }
          let setpdQuery = `SELECT IN_KHO_SX_SUB.IN_KHO_ID, IN_KHO_SX_SUB.FACTORY, IN_KHO_SX_SUB.PHANLOAI, IN_KHO_SX_SUB.PLAN_ID_INPUT, IN_KHO_SX_SUB.M_CODE, M090.M_NAME, M090.WIDTH_CD, IN_KHO_SX_SUB.M_LOT_NO, IN_KHO_SX_SUB.ROLL_QTY, IN_KHO_SX_SUB.IN_QTY, IN_KHO_SX_SUB.TOTAL_IN_QTY,CASE WHEN IN_KHO_SX_SUB.FSC ='Y' THEN 'Y' ELSE 'N' END AS FSC, IN_KHO_SX_SUB.INS_DATE,ZTB_QLSXPLAN.PLAN_EQ  FROM IN_KHO_SX_SUB LEFT JOIN M090 ON  (M090.M_CODE= IN_KHO_SX_SUB.M_CODE AND M090.CTR_CD = IN_KHO_SX_SUB.CTR_CD) LEFT JOIN ZTB_QLSXPLAN ON (ZTB_QLSXPLAN.PLAN_ID=IN_KHO_SX_SUB.PLAN_ID_INPUT AND ZTB_QLSXPLAN.CTR_CD = IN_KHO_SX_SUB.CTR_CD) ${conditon} AND IN_KHO_SX_SUB.CTR_CD='${DATA.CTR_CD}' ORDER BY IN_KHO_SX_SUB.INS_DATE DESC`;
          //${moment().format('YYYY-MM-DD')}
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
        })();
        break;
      case "xuatkhoao":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `INSERT INTO OUT_KHO_SX (CTR_CD,FACTORY,PHANLOAI,PLAN_ID_INPUT,PLAN_ID_OUTPUT,M_CODE,M_LOT_NO,ROLL_QTY,OUT_QTY,TOTAL_OUT_QTY,USE_YN,INS_DATE,INS_EMPL,UPD_DATE,UPD_EMPL, REMARK) VALUES ('${DATA.CTR_CD}','${DATA.FACTORY}','${DATA.PHANLOAI}', '${DATA.PLAN_ID_INPUT}', '${DATA.PLAN_ID_OUTPUT}','${DATA.M_CODE}','${DATA.M_LOT_NO}','${DATA.ROLL_QTY}','${DATA.OUT_QTY}','${DATA.TOTAL_OUT_QTY}','${DATA.USE_YN}', GETDATE(), '${EMPL_NO}', GETDATE(),'${EMPL_NO}','${DATA.REMARK}')`;
          //${moment().format('YYYY-MM-DD')}
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
        })();
        break;
      case "nhapkhoao":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `INSERT INTO IN_KHO_SX (CTR_CD,FACTORY,PHANLOAI,PLAN_ID_INPUT, PLAN_ID_SUDUNG, M_CODE,M_LOT_NO,ROLL_QTY,IN_QTY,TOTAL_IN_QTY,USE_YN,FSC, FSC_MCODE, FSC_GCODE,INS_DATE,INS_EMPL,UPD_DATE,UPD_EMPL) VALUES ('${DATA.CTR_CD}','${DATA.FACTORY}','${DATA.PHANLOAI}', ${DATA.PLAN_ID_INPUT !== null ? "'" + DATA.PLAN_ID_INPUT + "'" : null},${DATA.PLAN_ID_SUDUNG !== null ? "'" + DATA.PLAN_ID_SUDUNG + "'" : null}, '${DATA.M_CODE}','${DATA.M_LOT_NO}','${DATA.ROLL_QTY}','${DATA.IN_QTY}','${DATA.TOTAL_IN_QTY}','${DATA.USE_YN}', '${DATA.FSC}','${DATA.FSC_MCODE}','${DATA.FSC_GCODE}',GETDATE(), '${EMPL_NO}', GETDATE(),'${EMPL_NO}')`;
          //${moment().format('YYYY-MM-DD')}
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
        })();
        break;
      case "nhapkhosubao":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `INSERT INTO IN_KHO_SX_SUB (CTR_CD,FACTORY,PHANLOAI,PLAN_ID_INPUT, PLAN_ID_SUDUNG, M_CODE,M_LOT_NO,ROLL_QTY,IN_QTY,TOTAL_IN_QTY,USE_YN,FSC, FSC_MCODE, FSC_GCODE,INS_DATE,INS_EMPL,UPD_DATE,UPD_EMPL) VALUES ('${DATA.CTR_CD}','${DATA.FACTORY}','${DATA.PHANLOAI}', ${DATA.PLAN_ID_INPUT !== null ? "'" + DATA.PLAN_ID_INPUT + "'" : null},${DATA.PLAN_ID_SUDUNG !== null ? "'" + DATA.PLAN_ID_SUDUNG + "'" : null}, '${DATA.M_CODE}','${DATA.M_LOT_NO}','${DATA.ROLL_QTY}','${DATA.IN_QTY}','${DATA.TOTAL_IN_QTY}','${DATA.USE_YN}', '${DATA.FSC}','${DATA.FSC_MCODE}','${DATA.FSC_GCODE}',GETDATE(), '${EMPL_NO}', GETDATE(),'${EMPL_NO}')`;
          //${moment().format('YYYY-MM-DD')}
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
        })();
        break;
      case "lichsuxuatkhoao":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let conditon = ` WHERE OUT_KHO_SX.INS_DATE BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE} 23:59:59'`;
          if (DATA.FACTORY !== "ALL") {
            conditon += ` AND OUT_KHO_SX.FACTORY = '${DATA.FACTORY}' `;
          }
          let setpdQuery = `SELECT  OUT_KHO_SX.OUT_KHO_ID,  OUT_KHO_SX.FACTORY, OUT_KHO_SX.PHANLOAI, OUT_KHO_SX.M_CODE, M090.M_NAME, M090.WIDTH_CD, OUT_KHO_SX.M_LOT_NO, OUT_KHO_SX.PLAN_ID_INPUT,OUT_KHO_SX.PLAN_ID_OUTPUT, OUT_KHO_SX.ROLL_QTY, OUT_KHO_SX.OUT_QTY, OUT_KHO_SX.TOTAL_OUT_QTY, OUT_KHO_SX.INS_DATE, OUT_KHO_SX.CTR_CD FROM OUT_KHO_SX LEFT JOIN M090 ON (M090.M_CODE = OUT_KHO_SX.M_CODE AND M090.CTR_CD = OUT_KHO_SX.CTR_CD) ${conditon} AND OUT_KHO_SX.CTR_CD='${DATA.CTR_CD}' ORDER BY OUT_KHO_SX.INS_DATE DESC`;
          //${moment().format('YYYY-MM-DD')}
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
        })();
        break;
      case "lichsunhapkhoao":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let conditon = ` WHERE IN_KHO_SX.INS_DATE BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE} 23:59:59'`;
          if (DATA.FACTORY !== "ALL") {
            conditon += ` AND IN_KHO_SX.FACTORY = '${DATA.FACTORY}' `;
          }
          if (DATA.M_LOT_NO !== undefined) {
            conditon += ` AND IN_KHO_SX.M_LOT_NO='${DATA.M_LOT_NO}'`
          }
          let setpdQuery = `SELECT  IN_KHO_SX.IN_KHO_ID, IN_KHO_SX.USE_YN, IN_KHO_SX.REMARK, IN_KHO_SX.PLAN_ID_SUDUNG, IN_KHO_SX.FACTORY, IN_KHO_SX.PHANLOAI, IN_KHO_SX.M_CODE, M090.M_NAME, M090.WIDTH_CD, IN_KHO_SX.M_LOT_NO, IN_KHO_SX.PLAN_ID_INPUT, IN_KHO_SX.ROLL_QTY, IN_KHO_SX.IN_QTY, IN_KHO_SX.TOTAL_IN_QTY, IN_KHO_SX.INS_DATE, IN_KHO_SX.INS_EMPL, RETURN_NVL.UPD_DATE  AS KHO_CFM_DATE, RETURN_NVL.USE_YN AS RETURN_STATUS FROM IN_KHO_SX 
LEFT JOIN M090 ON (M090.M_CODE = IN_KHO_SX.M_CODE AND M090.CTR_CD = IN_KHO_SX.CTR_CD) 
LEFT JOIN RETURN_NVL ON (IN_KHO_SX.PLAN_ID_INPUT = RETURN_NVL.LAST_PLAN_ID AND IN_KHO_SX.M_LOT_NO = RETURN_NVL.M_LOT_NO AND RETURN_NVL.CTR_CD = IN_KHO_SX.CTR_CD) ${conditon} AND IN_KHO_SX.CTR_CD='${DATA.CTR_CD}' ORDER BY IN_KHO_SX.INS_DATE DESC`;
          //${moment().format('YYYY-MM-DD')}
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
        })();
        break;
      case "lichsunhapkhosub":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let conditon = ` WHERE IN_KHO_SX_SUB.INS_DATE BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE} 23:59:59'`;
          if (DATA.FACTORY !== "ALL") {
            conditon += ` AND IN_KHO_SX_SUB.FACTORY = '${DATA.FACTORY}' `;
          }
          if (DATA.M_LOT_NO !== undefined) {
            conditon += ` AND IN_KHO_SX_SUB.M_LOT_NO='${DATA.M_LOT_NO}'`
          }
          let setpdQuery = `SELECT  IN_KHO_SX_SUB.IN_KHO_ID, IN_KHO_SX_SUB.USE_YN, IN_KHO_SX_SUB.REMARK, IN_KHO_SX_SUB.PLAN_ID_SUDUNG, IN_KHO_SX_SUB.FACTORY, IN_KHO_SX_SUB.PHANLOAI, IN_KHO_SX_SUB.M_CODE, M090.M_NAME, M090.WIDTH_CD, IN_KHO_SX_SUB.M_LOT_NO, IN_KHO_SX_SUB.PLAN_ID_INPUT, IN_KHO_SX_SUB.ROLL_QTY, IN_KHO_SX_SUB.IN_QTY, IN_KHO_SX_SUB.TOTAL_IN_QTY, IN_KHO_SX_SUB.INS_DATE, RETURN_NVL.UPD_DATE  AS KHO_CFM_DATE, RETURN_NVL.USE_YN AS RETURN_STATUS FROM IN_KHO_SX_SUB 
LEFT JOIN M090 ON (M090.M_CODE = IN_KHO_SX_SUB.M_CODE AND M090.CTR_CD = IN_KHO_SX_SUB.CTR_CD) 
LEFT JOIN RETURN_NVL ON (IN_KHO_SX_SUB.PLAN_ID_INPUT = RETURN_NVL.LAST_PLAN_ID AND IN_KHO_SX_SUB.M_LOT_NO = RETURN_NVL.M_LOT_NO AND RETURN_NVL.CTR_CD = IN_KHO_SX_SUB.CTR_CD) ${conditon} AND IN_KHO_SX_SUB.CTR_CD='${DATA.CTR_CD}' ORDER BY IN_KHO_SX_SUB.INS_DATE DESC`;
          //${moment().format('YYYY-MM-DD')}
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
        })();
        break;
      case "deleteXuatKhoAo":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `DELETE FROM OUT_KHO_SX WHERE CTR_CD='${DATA.CTR_CD}' AND PLAN_ID_INPUT='${DATA.PLAN_ID_INPUT}' AND PLAN_ID_OUTPUT='${DATA.CURRENT_PLAN_ID}' AND M_CODE='${DATA.M_CODE}' AND M_LOT_NO='${DATA.M_LOT_NO}' AND PHANLOAI='${DATA.PHANLOAI}' AND TOTAL_OUT_QTY=${DATA.TOTAL_OUT_QTY}`;
          //${moment().format('YYYY-MM-DD')}
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
        })();
        break;
      case "checkM_CODE_CHITHI":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `SELECT TOP 1 * FROM ZTB_QLSXCHITHI WHERE CTR_CD='${DATA.CTR_CD}' AND PLAN_ID='${DATA.PLAN_ID_OUTPUT}' AND M_CODE='${DATA.M_CODE}'`;
          //${moment().format('YYYY-MM-DD')}
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
        })();
        break;
      case "checkTonTaiXuatKhoAo":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `SELECT TOP 1 * FROM OUT_KHO_SX WHERE CTR_CD='${DATA.CTR_CD}' AND PLAN_ID_OUTPUT='${DATA.PLAN_ID}' AND M_LOT_NO='${DATA.M_LOT_NO}'`;
          //${moment().format('YYYY-MM-DD')}
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
        })();
        break;
      case "checkTonTaiXuatKhoSub":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `SELECT TOP 1 * FROM IN_KHO_SX_SUB WHERE CTR_CD='${DATA.CTR_CD}' AND PLAN_ID_SUDUNG='${DATA.PLAN_ID}' AND M_LOT_NO='${DATA.M_LOT_NO}'`;
          //${moment().format('YYYY-MM-DD')}
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
        })();
        break;
      case "lichsuinputlieusanxuat":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `SELECT P500.PLAN_ID, P500.PROD_REQUEST_NO, M100.G_NAME, M100.G_NAME_KD, P500.M_CODE, M090.M_NAME, M090.WIDTH_CD, P500.M_LOT_NO, isnull(BB.TOTAL_OUT_QTY,0)  AS INPUT_QTY, (isnull(BB.TOTAL_OUT_QTY,0)- isnull(P500.REMAIN_QTY,0)) AS USED_QTY ,isnull(P500.REMAIN_QTY,0) AS REMAIN_QTY, P500.EMPL_NO, P500.EQUIPMENT_CD, P500.INS_DATE FROM P500
                    LEFT JOIN M100 ON (M100.G_CODE = P500.G_CODE AND M100.CTR_CD = P500.CTR_CD)
                    LEFT JOIN M090 ON (M090.M_CODE = P500.M_CODE AND M090.CTR_CD = P500.CTR_CD)
                    LEFT JOIN  
                    (SELECT PLAN_ID_OUTPUT, M_CODE, M_LOT_NO, CTR_CD, isnull(SUM(TOTAL_OUT_QTY),0) AS TOTAL_OUT_QTY  FROM OUT_KHO_SX WHERE OUT_KHO_SX.PHANLOAI='N' AND OUT_KHO_SX.CTR_CD='${DATA.CTR_CD}' GROUP BY PLAN_ID_OUTPUT, M_CODE, M_LOT_NO, CTR_CD) AS BB ON (BB.PLAN_ID_OUTPUT = P500.PLAN_ID AND BB.M_CODE = P500.M_CODE AND BB.M_LOT_NO=P500.M_LOT_NO AND BB.CTR_CD = P500.CTR_CD)
                    WHERE P500.PLAN_ID='${DATA.PLAN_ID}' AND P500.CTR_CD='${DATA.CTR_CD}'`;
          //${moment().format('YYYY-MM-DD')}
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
        })();
        break;
      case "lichsuinputlieusanxuat_full":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = "WHERE 1=1";
          if (DATA.ALLTIME === false) {
            condition += ` AND P500.INS_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE} 23:59:59' `;
          }
          if (DATA.PROD_REQUEST_NO !== "") {
            condition += ` AND P500.PROD_REQUEST_NO = '${DATA.PROD_REQUEST_NO}'`;
          }
          if (DATA.PLAN_ID !== "") {
            condition += ` AND P500.PLAN_ID = '${DATA.PLAN_ID}'`;
          }
          if (DATA.M_NAME !== "") {
            condition += ` AND M090.M_NAME LIKE '%${DATA.M_NAME}%'`;
          }
          if (DATA.M_CODE !== "") {
            condition += ` AND P500.M_CODE = '${DATA.M_CODE}'`;
          }
          if (DATA.G_CODE !== "") {
            condition += ` AND M100.G_CODE = '${DATA.G_CODE}'`;
          }
          if (DATA.G_NAME !== "") {
            condition += ` AND M100.G_NAME LIKE '%${DATA.G_NAME}%'`;
          }
          let setpdQuery = `SELECT P500.PLAN_ID, P500.PROD_REQUEST_NO, M100.G_NAME,M100.G_CODE, M100.G_NAME_KD, P500.M_CODE, M090.M_NAME, M090.WIDTH_CD, P500.M_LOT_NO,I222.LOTNCC,  isnull(P500.INPUT_QTY,(isnull(BB.TOTAL_OUT_QTY,0)))  AS INPUT_QTY, isnull(P500.INPUT_QTY,(isnull(BB.TOTAL_OUT_QTY,0)))- isnull(P500.REMAIN_QTY,0) AS USED_QTY ,isnull(P500.REMAIN_QTY,0) AS REMAIN_QTY, P500.EMPL_NO, P500.EQUIPMENT_CD, P500.INS_DATE FROM P500
          LEFT JOIN M100 ON (M100.G_CODE = P500.G_CODE AND M100.CTR_CD = P500.CTR_CD)
          LEFT JOIN M090 ON (M090.M_CODE = P500.M_CODE AND M090.CTR_CD = P500.CTR_CD)
          LEFT JOIN  
          (SELECT PLAN_ID_SUDUNG, M_CODE, M_LOT_NO, CTR_CD, isnull(SUM(TOTAL_IN_QTY),0) AS TOTAL_OUT_QTY  FROM IN_KHO_SX  GROUP BY PLAN_ID_SUDUNG, M_CODE, M_LOT_NO, CTR_CD) AS BB 
		  ON (BB.PLAN_ID_SUDUNG = P500.PLAN_ID AND BB.M_CODE = P500.M_CODE AND BB.M_LOT_NO=P500.M_LOT_NO AND BB.CTR_CD = P500.CTR_CD)
LEFT JOIN I222 ON I222.M_LOT_NO = P500.M_LOT_NO AND I222.CTR_CD = P500.CTR_CD  ${condition} AND P500.CTR_CD='${DATA.CTR_CD}'
                    ORDER BY INS_DATE DESC `;
          //${moment().format('YYYY-MM-DD')}
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
        })();
        break;
      case "confirmlieutonsx":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `UPDATE P500 SET REMAIN_QTY=${DATA.REMAIN_QTY} WHERE CTR_CD='${DATA.CTR_CD}' AND PLAN_ID='${DATA.PLAN_ID}' AND M_CODE='${DATA.M_CODE}' AND M_LOT_NO='${DATA.M_LOT_NO}' AND EQUIPMENT_CD='${DATA.EQUIPMENT_CD}'`;
          //${moment().format('YYYY-MM-DD')}
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
        })();
        break;
      case "returnkhoao":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = ``;
          //${moment().format('YYYY-MM-DD')}
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
        })();
        break;
      case "checkEQ_STATUS":
        (async () => {
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `WITH DMTB AS
          (
            SELECT  PLAN_FACTORY, PLAN_DATE, ZTB_QLSXPLAN.G_CODE, PLAN_EQ, PLAN_ORDER, PLAN_ID, PLAN_QTY, 
            CASE 
            WHEN IS_SETTING = 'Y' AND SUBSTRING(PLAN_EQ,1,2) = M100.EQ1 THEN isnull(M100.Setting1,9999)
            WHEN IS_SETTING = 'Y' AND SUBSTRING(PLAN_EQ,1,2) = M100.EQ2 THEN isnull(M100.Setting2,9999)
            WHEN IS_SETTING = 'Y' AND SUBSTRING(PLAN_EQ,1,2) = M100.EQ3 THEN isnull(M100.Setting3,9999)
            WHEN IS_SETTING = 'Y' AND SUBSTRING(PLAN_EQ,1,2) = M100.EQ4 THEN isnull(M100.Setting4,9999)
            ELSE 0
            END AS SETTING_TIME,
            CASE 
            WHEN SUBSTRING(PLAN_EQ,1,2) = M100.EQ1 THEN isnull(CASE WHEN M100.UPH1 =0 THEN 1 ELSE M100.UPH1 END,1)
            WHEN SUBSTRING(PLAN_EQ,1,2) = M100.EQ2 THEN isnull(CASE WHEN M100.UPH2 =0 THEN 1 ELSE M100.UPH2 END,1)
            WHEN SUBSTRING(PLAN_EQ,1,2) = M100.EQ3 THEN isnull(CASE WHEN M100.UPH3 =0 THEN 1 ELSE M100.UPH3 END,1)
            WHEN SUBSTRING(PLAN_EQ,1,2) = M100.EQ4 THEN isnull(CASE WHEN M100.UPH4 =0 THEN 1 ELSE M100.UPH4 END,1)
            ELSE 1
            END AS UPH,
            ZTB_QLSXPLAN.CTR_CD
            FROM ZTB_QLSXPLAN
            LEFT JOIN M100 ON (M100.G_CODE = ZTB_QLSXPLAN.G_CODE AND M100.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
            LEFT JOIN P400 ON (P400.PROD_REQUEST_NO = ZTB_QLSXPLAN.PROD_REQUEST_NO AND P400.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
          WHERE PLAN_EQ is not null AND PLAN_DATE = CAST(GETDATE() AS date) AND ZTB_QLSXPLAN.CTR_CD='${DATA.CTR_CD}'
          ),
          NEXTB AS
          (
          SELECT PLAN_FACTORY, PLAN_DATE, G_CODE, PLAN_EQ, PLAN_ORDER, PLAN_ID, PLAN_QTY, SETTING_TIME, UPH, (SETTING_TIME + PLAN_QTY*1.0/UPH*60) AS LEADTIME, CTR_CD FROM DMTB
          ),
          LEATIMETB AS
          (
          SELECT PLAN_FACTORY, PLAN_DATE, PLAN_EQ, PLAN_ORDER, PLAN_ID, PLAN_QTY, LEADTIME, SUM(LEADTIME) OVER (PARTITION BY PLAN_FACTORY, PLAN_EQ ORDER BY PLAN_ORDER ASC) AS ACC_TIME, CTR_CD FROM NEXTB
          ),
          LTEQ AS
          (
          SELECT PLAN_FACTORY, PLAN_EQ,  MAX(ACC_TIME) AS ACC_TIME, CTR_CD FROM LEATIMETB GROUP BY PLAN_FACTORY,PLAN_EQ,CTR_CD
          )
          SELECT 
                    ZTB_QLSXPLAN.STEP, 
                    M100.G_NAME_KD, 
                    M100.G_NAME, 
                    M100.UPH1,
                    M100.UPH2,
                    M100.UPH3,
                    M100.UPH4,
                    M100.Setting1,
                    M100.Setting2,
                    M100.Setting3,
                    M100.Setting4,
                    ZTB_SX_EQ_STATUS.FACTORY, 
                    ZTB_SX_EQ_STATUS.EQ_NAME, 
                    ZTB_SX_EQ_STATUS.EQ_OP, 
                    SUBSTRING(ZTB_SX_EQ_STATUS.EQ_NAME, 1, 2) AS EQ_SERIES, 
                    ZTB_SX_EQ_STATUS.EQ_ACTIVE, 
                    ZTB_SX_EQ_STATUS.REMARK, 
                    ZTB_SX_EQ_STATUS.EQ_STATUS, 
                    ZTB_SX_EQ_STATUS.CURR_PLAN_ID, 
                    ZTB_SX_EQ_STATUS.CURR_G_CODE, 
                    ZTB_SX_EQ_STATUS.INS_EMPL, 
                    ZTB_SX_EQ_STATUS.INS_DATE, 
                    ZTB_SX_EQ_STATUS.UPD_EMPL, 
                    ZTB_SX_EQ_STATUS.UPD_DATE, 
                    ZTB_SX_EQ_STATUS.EQ_CODE,
                    ZTB_SX_RESULT.SETTING_START_TIME,
                    ZTB_SX_RESULT.MASS_START_TIME,
                    ZTB_SX_RESULT.MASS_END_TIME,  
                    ZTB_QLSXPLAN.KQ_SX_TAM,
                    ZTB_SX_RESULT.SX_RESULT,
                    ZTB_QLSXPLAN.PROCESS_NUMBER,
                    ZTB_QLSXPLAN.PLAN_QTY,
                isnull(LTEQ.ACC_TIME,0) AS ACC_TIME
                  FROM 
                    ZTB_SX_EQ_STATUS 
                    LEFT JOIN M100 ON (
                      M100.G_CODE = ZTB_SX_EQ_STATUS.CURR_G_CODE AND M100.CTR_CD = ZTB_SX_EQ_STATUS.CTR_CD
                    ) 
                    LEFT JOIN ZTB_QLSXPLAN ON (
                      ZTB_QLSXPLAN.PLAN_ID = ZTB_SX_EQ_STATUS.CURR_PLAN_ID AND ZTB_QLSXPLAN.CTR_CD = ZTB_SX_EQ_STATUS.CTR_CD
                    ) 
                    LEFT JOIN ZTB_SX_RESULT ON (ZTB_SX_RESULT.PLAN_ID = ZTB_SX_EQ_STATUS.CURR_PLAN_ID AND ZTB_SX_RESULT.CTR_CD = ZTB_SX_EQ_STATUS.CTR_CD)
                LEFT JOIN LTEQ ON (LTEQ.PLAN_FACTORY = ZTB_SX_EQ_STATUS.FACTORY AND LTEQ.PLAN_EQ = ZTB_SX_EQ_STATUS.EQ_NAME AND LTEQ.CTR_CD = ZTB_SX_EQ_STATUS.CTR_CD)
                  WHERE ZTB_SX_EQ_STATUS.CTR_CD='${DATA.CTR_CD}'
                  ORDER BY 
                    FACTORY DESC, 
                    EQ_NAME ASC`;
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
        })();
        break;
      case "traDataAMZ":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let condition = " WHERE 1=1";
          if (DATA.ALLTIME !== true)
            condition += ` AND AMAZONE_DATA.INS_DATE BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE} 23:59:59'`;
          if (DATA.G_NAME !== "")
            condition += `AND M100.G_NAME LIKE '%${DATA.G_NAME}%' `;
          if (DATA.NO_IN !== "")
            condition += ` AND AMAZONE_DATA.NO_IN ='${DATA.NO_IN}' `;
          if (DATA.PROD_REQUEST_NO !== "")
            condition += ` AND AMAZONE_DATA.PROD_REQUEST_NO = '${DATA.PROD_REQUEST_NO}' `;
          if (DATA.DATA_AMZ !== "")
            condition += ` AND AMAZONE_DATA.DATA_1='${DATA.DATA_AMZ}' OR AMAZONE_DATA.DATA_2='${DATA.DATA_AMZ}'`
          let checkkq = "OK";
          let setpdQuery = `SELECT M100.G_NAME, AMAZONE_DATA.G_CODE, AMAZONE_DATA.PROD_REQUEST_NO, AMAZONE_DATA.NO_IN, AMAZONE_DATA.ROW_NO, AMAZONE_DATA.DATA_1, AMAZONE_DATA.DATA_2, AMAZONE_DATA.DATA_3, AMAZONE_DATA.DATA_4, AMAZONE_DATA.PRINT_STATUS, AMAZONE_DATA.INLAI_COUNT, AMAZONE_DATA.REMARK, AMAZONE_DATA.INS_DATE, AMAZONE_DATA.INS_EMPL, AMAZONE_DATA.CTR_CD 
          FROM AMAZONE_DATA WITH (NOLOCK) 
          LEFT JOIN M100 ON (M100.G_CODE = AMAZONE_DATA.G_CODE AND M100.CTR_CD = AMAZONE_DATA.CTR_CD) 
          ${condition} AND AMAZONE_DATA.CTR_CD='${DATA.CTR_CD}' `;
          //${moment().format('YYYY-MM-DD')}
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
        })();
        break;
      case "move_plan":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `UPDATE ZTB_QLSXPLAN SET PLAN_DATE ='${DATA.PLAN_DATE}' WHERE CTR_CD='${DATA.CTR_CD}' AND PLAN_ID= '${DATA.PLAN_ID}'`;
          //${moment().format('YYYY-MM-DD')}
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
        })();
        break;
      case "checkplansetting":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `SELECT * FROM  ZTB_SX_RESULT WHERE CTR_CD='${DATA.CTR_CD}' AND PLAN_ID= '${DATA.PLAN_ID}'`;
          //${moment().format('YYYY-MM-DD')}
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
        })();
        break;
      case "setUSE_YN_KHO_AO_INPUT":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          /* let setpdQuery = `UPDATE IN_KHO_SX SET USE_YN ='${DATA.USE_YN}', PLAN_ID_SUDUNG='${DATA.PLAN_ID_SUDUNG}', UPD_DATE=GETDATE(), UPD_EMPL='${EMPL_NO}' WHERE PLAN_ID_INPUT= '${DATA.PLAN_ID_INPUT}' AND M_CODE='${DATA.M_CODE}' AND M_LOT_NO='${DATA.M_LOT_NO}' AND TOTAL_IN_QTY=${DATA.TOTAL_IN_QTY}`;  */
          let setpdQuery = `UPDATE IN_KHO_SX SET USE_YN ='${DATA.USE_YN}', PLAN_ID_SUDUNG='${DATA.PLAN_ID_SUDUNG.toUpperCase()}', UPD_DATE=GETDATE(), UPD_EMPL='${EMPL_NO}', REMARK2='W' WHERE CTR_CD='${DATA.CTR_CD}' AND IN_KHO_ID=${DATA.IN_KHO_ID}`;
          //${moment().format('YYYY-MM-DD')}
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
        })();
        break;
      case "setUSE_YN_KHO_SUB_INPUT":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          /* let setpdQuery = `UPDATE IN_KHO_SX SET USE_YN ='${DATA.USE_YN}', PLAN_ID_SUDUNG='${DATA.PLAN_ID_SUDUNG}', UPD_DATE=GETDATE(), UPD_EMPL='${EMPL_NO}' WHERE PLAN_ID_INPUT= '${DATA.PLAN_ID_INPUT}' AND M_CODE='${DATA.M_CODE}' AND M_LOT_NO='${DATA.M_LOT_NO}' AND TOTAL_IN_QTY=${DATA.TOTAL_IN_QTY}`;  */
          let setpdQuery = `UPDATE IN_KHO_SX_SUB SET USE_YN ='${DATA.USE_YN}', PLAN_ID_SUDUNG='${DATA.PLAN_ID_SUDUNG.toUpperCase()}', UPD_DATE=GETDATE(), UPD_EMPL='${EMPL_NO}', REMARK2='W' WHERE CTR_CD='${DATA.CTR_CD}' AND IN_KHO_ID=${DATA.IN_KHO_ID}`;
          //${moment().format('YYYY-MM-DD')}
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
        })();
        break;
      case "inspect_daily_ppm":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = ` WHERE INSPECT_START_TIME BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE} 23:59:59' AND ZTBINSPECTNGTB.INSPECT_TOTAL_QTY <>0`
          if (DATA.FACTORY !== 'ALL') {
            condition += ` AND ZTBINSPECTNGTB.FACTORY='${DATA.FACTORY}'`
          }
          if (DATA.codeArray.length === 1) {
            condition += ` AND ZTBINSPECTNGTB.G_CODE='${DATA.codeArray[0]}'`
          }
          else if (DATA.codeArray.length > 1) {
            let codeString = ``;
            let codeArStr = DATA.codeArray.map((ele, index) => `'${ele}'`).join(",");
            condition += ` AND ZTBINSPECTNGTB.G_CODE IN (${codeArStr})`;
          }
          if (DATA.CUST_NAME_KD !== '') {
            condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`
          }
          let setpdQuery = `SELECT CAST(INSPECT_START_TIME as date) AS INSPECT_DATE, SUM(INSPECT_TOTAL_QTY) AS INSPECT_TOTAL_QTY, SUM(ERR4+ ERR5+ ERR6+ ERR7 +ERR8 +ERR9 +ERR10+ERR11) AS MATERIAL_NG, SUM(ERR12+ERR13+ERR14+ERR15+ERR16+ERR17+ERR18+ERR19+ERR20+ERR21+ERR22+ERR23+ERR24+ERR25+ERR26+ERR27+ERR28+ERR29+ERR30+ERR31) AS PROCESS_NG, SUM(ERR4+ERR5+ERR6+ERR7+ERR8+ERR9+ERR10+ERR11+ERR12+ERR13+ERR14+ERR15+ERR16+ERR17+ERR18+ERR19+ERR20+ERR21+ERR22+ERR23+ERR24+ERR25+ERR26+ERR27+ERR28+ERR29+ERR30+ERR31) AS TOTAL_NG, CAST(SUM(ERR4+ERR5+ERR6+ERR7+ERR8+ERR9+ERR10+ERR11+ERR12+ERR13+ERR14+ERR15+ERR16+ERR17+ERR18+ERR19+ERR20+ERR21+ERR22+ERR23+ERR24+ERR25+ERR26+ERR27+ERR28+ERR29+ERR30+ERR31) as float)/CAST(SUM(INSPECT_TOTAL_QTY-ERR32) as float)*1000000 AS TOTAL_PPM, CAST(SUM(ERR4+ ERR5+ ERR6+ ERR7 +ERR8 +ERR9 +ERR10+ERR11) as float)/CAST(SUM(INSPECT_TOTAL_QTY-ERR32) as float)*1000000 AS MATERIAL_PPM, CAST(SUM(ERR12+ERR13+ERR14+ERR15+ERR16+ERR17+ERR18+ERR19+ERR20+ERR21+ERR22+ERR23+ERR24+ERR25+ERR26+ERR27+ERR28+ERR29+ERR30+ERR31) as float)/CAST(SUM(INSPECT_TOTAL_QTY-ERR32) as float)*1000000 AS PROCESS_PPM  FROM 
          ZTBINSPECTNGTB 
          LEFT JOIN P400 ON P400.PROD_REQUEST_NO = ZTBINSPECTNGTB.PROD_REQUEST_NO AND P400.CTR_CD = ZTBINSPECTNGTB.CTR_CD
          LEFT JOIN M110 ON M110.CUST_CD = P400.CUST_CD AND M110.CTR_CD = P400.CTR_CD
                    ${condition} AND ZTBINSPECTNGTB.CTR_CD='${DATA.CTR_CD}'
                    GROUP BY CAST(INSPECT_START_TIME as date) 
                    ORDER BY CAST(INSPECT_START_TIME as date) DESC`;
          //${moment().format('YYYY-MM-DD')}
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
        })();
        break;
      case "inspect_weekly_ppm":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = ` WHERE INSPECT_START_TIME BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE} 23:59:59' AND ZTBINSPECTNGTB.INSPECT_TOTAL_QTY <>0`
          if (DATA.FACTORY !== 'ALL') {
            condition += ` AND ZTBINSPECTNGTB.FACTORY='${DATA.FACTORY}'`
          }
          if (DATA.codeArray.length === 1) {
            condition += ` AND ZTBINSPECTNGTB.G_CODE='${DATA.codeArray[0]}'`
          }
          else if (DATA.codeArray.length > 1) {
            let codeString = ``;
            let codeArStr = DATA.codeArray.map((ele, index) => `'${ele}'`).join(",");
            condition += ` AND ZTBINSPECTNGTB.G_CODE IN (${codeArStr})`;
          }
          if (DATA.CUST_NAME_KD !== '') {
            condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`
          }
          let setpdQuery = `SELECT CONCAT(YEAR(INSPECT_START_TIME),'_',  DATEPART(iso_week, DATEADD(DAY, 2, INSPECT_START_TIME))) AS YEAR_WEEK, YEAR(INSPECT_START_TIME) AS YEAR_NUM,  DATEPART(iso_week, DATEADD(DAY, 2, INSPECT_START_TIME)) AS WEEK_NUM, SUM(INSPECT_TOTAL_QTY) AS INSPECT_TOTAL_QTY, SUM(ERR4+ ERR5+ ERR6+ ERR7 +ERR8 +ERR9 +ERR10+ERR11) AS MATERIAL_NG, SUM(ERR12+ERR13+ERR14+ERR15+ERR16+ERR17+ERR18+ERR19+ERR20+ERR21+ERR22+ERR23+ERR24+ERR25+ERR26+ERR27+ERR28+ERR29+ERR30+ERR31) AS PROCESS_NG, SUM(ERR4+ERR5+ERR6+ERR7+ERR8+ERR9+ERR10+ERR11+ERR12+ERR13+ERR14+ERR15+ERR16+ERR17+ERR18+ERR19+ERR20+ERR21+ERR22+ERR23+ERR24+ERR25+ERR26+ERR27+ERR28+ERR29+ERR30+ERR31) AS TOTAL_NG, CAST(SUM(ERR4+ERR5+ERR6+ERR7+ERR8+ERR9+ERR10+ERR11+ERR12+ERR13+ERR14+ERR15+ERR16+ERR17+ERR18+ERR19+ERR20+ERR21+ERR22+ERR23+ERR24+ERR25+ERR26+ERR27+ERR28+ERR29+ERR30+ERR31) as float)/CAST(SUM(INSPECT_TOTAL_QTY-ERR32) as float)*1000000 AS TOTAL_PPM, CAST(SUM(ERR4+ ERR5+ ERR6+ ERR7 +ERR8 +ERR9 +ERR10+ERR11) as float)/CAST(SUM(INSPECT_TOTAL_QTY-ERR32) as float)*1000000 AS MATERIAL_PPM, CAST(SUM(ERR12+ERR13+ERR14+ERR15+ERR16+ERR17+ERR18+ERR19+ERR20+ERR21+ERR22+ERR23+ERR24+ERR25+ERR26+ERR27+ERR28+ERR29+ERR30+ERR31) as float)/CAST(SUM(INSPECT_TOTAL_QTY-ERR32) as float)*1000000 AS PROCESS_PPM  FROM ZTBINSPECTNGTB 
          LEFT JOIN P400 ON P400.PROD_REQUEST_NO = ZTBINSPECTNGTB.PROD_REQUEST_NO AND P400.CTR_CD = ZTBINSPECTNGTB.CTR_CD
                    LEFT JOIN M110 ON M110.CUST_CD = P400.CUST_CD AND M110.CTR_CD = P400.CTR_CD
                    ${condition} AND ZTBINSPECTNGTB.CTR_CD='${DATA.CTR_CD}'
                    GROUP BY YEAR(INSPECT_START_TIME), DATEPART(iso_week, DATEADD(DAY, 2, INSPECT_START_TIME))
                    ORDER BY YEAR(INSPECT_START_TIME) DESC, DATEPART(iso_week, DATEADD(DAY, 2, INSPECT_START_TIME))  DESC`;
          //${moment().format('YYYY-MM-DD')}
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
        })();
        break;
      case "inspect_monthly_ppm":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = ` WHERE INSPECT_START_TIME BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE} 23:59:59' AND ZTBINSPECTNGTB.INSPECT_TOTAL_QTY <>0`
          if (DATA.FACTORY !== 'ALL') {
            condition += ` AND ZTBINSPECTNGTB.FACTORY='${DATA.FACTORY}'`
          }
          if (DATA.codeArray.length === 1) {
            condition += ` AND ZTBINSPECTNGTB.G_CODE='${DATA.codeArray[0]}'`
          }
          else if (DATA.codeArray.length > 1) {
            let codeString = ``;
            let codeArStr = DATA.codeArray.map((ele, index) => `'${ele}'`).join(",");
            condition += ` AND ZTBINSPECTNGTB.G_CODE IN (${codeArStr})`;
          }
          if (DATA.CUST_NAME_KD !== '') {
            condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`
          }
          let setpdQuery = `SELECT CONCAT(YEAR(INSPECT_START_TIME),'_', MONTH(INSPECT_START_TIME)) AS YEAR_MONTH, YEAR(INSPECT_START_TIME) AS YEAR_NUM, MONTH(INSPECT_START_TIME) AS MONTH_NUM, SUM(INSPECT_TOTAL_QTY) AS INSPECT_TOTAL_QTY, SUM(ERR4+ ERR5+ ERR6+ ERR7 +ERR8 +ERR9 +ERR10+ERR11) AS MATERIAL_NG, SUM(ERR12+ERR13+ERR14+ERR15+ERR16+ERR17+ERR18+ERR19+ERR20+ERR21+ERR22+ERR23+ERR24+ERR25+ERR26+ERR27+ERR28+ERR29+ERR30+ERR31) AS PROCESS_NG, SUM(ERR4+ERR5+ERR6+ERR7+ERR8+ERR9+ERR10+ERR11+ERR12+ERR13+ERR14+ERR15+ERR16+ERR17+ERR18+ERR19+ERR20+ERR21+ERR22+ERR23+ERR24+ERR25+ERR26+ERR27+ERR28+ERR29+ERR30+ERR31) AS TOTAL_NG, CAST(SUM(ERR4+ERR5+ERR6+ERR7+ERR8+ERR9+ERR10+ERR11+ERR12+ERR13+ERR14+ERR15+ERR16+ERR17+ERR18+ERR19+ERR20+ERR21+ERR22+ERR23+ERR24+ERR25+ERR26+ERR27+ERR28+ERR29+ERR30+ERR31) as float)/CAST(SUM(INSPECT_TOTAL_QTY-ERR32) as float)*1000000 AS TOTAL_PPM, CAST(SUM(ERR4+ ERR5+ ERR6+ ERR7 +ERR8 +ERR9 +ERR10+ERR11) as float)/CAST(SUM(INSPECT_TOTAL_QTY-ERR32) as float)*1000000 AS MATERIAL_PPM, CAST(SUM(ERR12+ERR13+ERR14+ERR15+ERR16+ERR17+ERR18+ERR19+ERR20+ERR21+ERR22+ERR23+ERR24+ERR25+ERR26+ERR27+ERR28+ERR29+ERR30+ERR31) as float)/CAST(SUM(INSPECT_TOTAL_QTY-ERR32) as float)*1000000 AS PROCESS_PPM  FROM ZTBINSPECTNGTB 
          LEFT JOIN P400 ON P400.PROD_REQUEST_NO = ZTBINSPECTNGTB.PROD_REQUEST_NO AND P400.CTR_CD = ZTBINSPECTNGTB.CTR_CD
                    LEFT JOIN M110 ON M110.CUST_CD = P400.CUST_CD AND M110.CTR_CD = P400.CTR_CD
                   ${condition} AND ZTBINSPECTNGTB.CTR_CD='${DATA.CTR_CD}'
                    GROUP BY YEAR(INSPECT_START_TIME), MONTH(INSPECT_START_TIME)
                    ORDER BY YEAR(INSPECT_START_TIME) DESC, MONTH(INSPECT_START_TIME) DESC`;
          //${moment().format('YYYY-MM-DD')}
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
        })();
        break;
      case "inspect_yearly_ppm":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = ` WHERE INSPECT_START_TIME BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE} 23:59:59' AND ZTBINSPECTNGTB.INSPECT_TOTAL_QTY <>0`
          if (DATA.FACTORY !== 'ALL') {
            condition += ` AND ZTBINSPECTNGTB.FACTORY='${DATA.FACTORY}'`
          }
          if (DATA.codeArray.length === 1) {
            condition += ` AND ZTBINSPECTNGTB.G_CODE='${DATA.codeArray[0]}'`
          }
          else if (DATA.codeArray.length > 1) {
            let codeString = ``;
            let codeArStr = DATA.codeArray.map((ele, index) => `'${ele}'`).join(",");
            condition += `
             AND ZTBINSPECTNGTB.G_CODE IN (${codeArStr})`;
          }
          if (DATA.CUST_NAME_KD !== '') {
            condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`
          }
          let setpdQuery = `SELECT YEAR(INSPECT_START_TIME) AS YEAR_NUM,  SUM(INSPECT_TOTAL_QTY) AS INSPECT_TOTAL_QTY, SUM(ERR4+ ERR5+ ERR6+ ERR7 +ERR8 +ERR9 +ERR10+ERR11) AS MATERIAL_NG, SUM(ERR12+ERR13+ERR14+ERR15+ERR16+ERR17+ERR18+ERR19+ERR20+ERR21+ERR22+ERR23+ERR24+ERR25+ERR26+ERR27+ERR28+ERR29+ERR30+ERR31) AS PROCESS_NG, SUM(ERR4+ERR5+ERR6+ERR7+ERR8+ERR9+ERR10+ERR11+ERR12+ERR13+ERR14+ERR15+ERR16+ERR17+ERR18+ERR19+ERR20+ERR21+ERR22+ERR23+ERR24+ERR25+ERR26+ERR27+ERR28+ERR29+ERR30+ERR31) AS TOTAL_NG, CAST(SUM(ERR4+ERR5+ERR6+ERR7+ERR8+ERR9+ERR10+ERR11+ERR12+ERR13+ERR14+ERR15+ERR16+ERR17+ERR18+ERR19+ERR20+ERR21+ERR22+ERR23+ERR24+ERR25+ERR26+ERR27+ERR28+ERR29+ERR30+ERR31) as float)/CAST(SUM(INSPECT_TOTAL_QTY-ERR32) as float)*1000000 AS TOTAL_PPM, CAST(SUM(ERR4+ ERR5+ ERR6+ ERR7 +ERR8 +ERR9 +ERR10+ERR11) as float)/CAST(SUM(INSPECT_TOTAL_QTY-ERR32) as float)*1000000 AS MATERIAL_PPM, CAST(SUM(ERR12+ERR13+ERR14+ERR15+ERR16+ERR17+ERR18+ERR19+ERR20+ERR21+ERR22+ERR23+ERR24+ERR25+ERR26+ERR27+ERR28+ERR29+ERR30+ERR31) as float)/CAST(SUM(INSPECT_TOTAL_QTY-ERR32) as float)*1000000 AS PROCESS_PPM  FROM ZTBINSPECTNGTB 
          LEFT JOIN P400 ON P400.PROD_REQUEST_NO = ZTBINSPECTNGTB.PROD_REQUEST_NO AND P400.CTR_CD = ZTBINSPECTNGTB.CTR_CD
          LEFT JOIN M110 ON M110.CUST_CD = P400.CUST_CD AND M110.CTR_CD = P400.CTR_CD
                   ${condition} AND ZTBINSPECTNGTB.CTR_CD='${DATA.CTR_CD}'
                    GROUP BY YEAR(INSPECT_START_TIME)
                    ORDER BY YEAR(INSPECT_START_TIME) ASC`;
          //${moment().format('YYYY-MM-DD')}
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
        })();
        break;
      case "loadDataSX":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = " WHERE 1=1  ";
          if (DATA.ALLTIME === false) {
            condition += ` AND ZTB_QLSXPLAN.PLAN_DATE BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE}'`;
          }
          if (DATA.G_NAME !== "") {
            condition += ` AND M100.G_NAME LIKE '%${DATA.G_NAME}%'`;
          }
          if (DATA.G_CODE !== "") {
            condition += ` AND M100.G_CODE = '${DATA.G_CODE}'`;
          }
          if (DATA.PLAN_ID !== "") {
            condition += ` AND ZTB_QLSXPLAN.PLAN_ID = '${DATA.PLAN_ID}'`;
          }
          if (DATA.PROD_REQUEST_NO !== "") {
            condition += ` AND ZTB_QLSXPLAN.PROD_REQUEST_NO = '${DATA.PROD_REQUEST_NO}'`;
          }
          if (DATA.FACTORY !== "ALL") {
            condition += ` AND ZTB_QLSXPLAN.PLAN_FACTORY = '${DATA.FACTORY}'`;
          }
          if (DATA.M_NAME !== "") {
            condition += ` AND isnull(isnull(WAREHOUSE_OUT.M_NAME, AA.M_NAME),BB.M_NAME) LIKE '%${DATA.M_NAME}%'`;
          }
          if (DATA.M_CODE !== "") {
            condition += ` AND M090.M_CODE = '${DATA.M_CODE}'`;
          }
          if (DATA.PLAN_EQ !== "ALL") {
            condition += ` AND SUBSTRING(ZTB_QLSXPLAN.PLAN_EQ,1,2)= '${DATA.PLAN_EQ}'`;
          }
          if (DATA.TRUSAMPLE) {
            condition += ` AND P400.CODE_55 <> '04'`;
          }
          let setpdQuery = `
          WITH AA AS (
    SELECT PLAN_ID_SUDUNG,M090.M_NAME, SUM(isnull(TOTAL_IN_QTY, 0)) AS INPUT_QTY, IN_KHO_SX.CTR_CD
    FROM IN_KHO_SX
    LEFT JOIN M090 ON (M090.M_CODE = IN_KHO_SX.M_CODE AND M090.CTR_CD = IN_KHO_SX.CTR_CD)
    WHERE IN_KHO_SX.USE_YN = 'X' AND IN_KHO_SX.CTR_CD='${DATA.CTR_CD}'
    GROUP BY IN_KHO_SX.PLAN_ID_SUDUNG,M090.M_NAME, IN_KHO_SX.CTR_CD
    ),
BB AS (
    SELECT P500.PLAN_ID,M090.M_NAME,SUM(isnull(REMAIN_QTY, 0)) AS REMAIN_QTY,SUM(isnull(INPUT_QTY, 0))  AS INPUT_QTY, P500.CTR_CD
    FROM P500
    LEFT JOIN M090 ON (M090.M_CODE = P500.M_CODE AND M090.CTR_CD = P500.CTR_CD)
    WHERE P500.CTR_CD='${DATA.CTR_CD}'
    GROUP BY PLAN_ID,M090.M_NAME, P500.CTR_CD),
WAREHOUSE_OUT AS (
    SELECT PLAN_ID_INPUT,M090.M_NAME,SUM(isnull(TOTAL_IN_QTY, 0)) AS WAREHOUSE_OUTPUT_QTY, IN_KHO_SX.CTR_CD
    FROM IN_KHO_SX
    LEFT JOIN M090 ON (M090.M_CODE = IN_KHO_SX.M_CODE AND M090.CTR_CD = IN_KHO_SX.CTR_CD)
    WHERE IN_KHO_SX.PHANLOAI = 'N' AND IN_KHO_SX.CTR_CD='${DATA.CTR_CD}'
    GROUP BY PLAN_ID_INPUT,M090.M_NAME, IN_KHO_SX.CTR_CD),
CC AS (
SELECT PLAN_ID_INPUT,M090.M_NAME,SUM(isnull(TOTAL_IN_QTY, 0)) AS RETURN_QTY, IN_KHO_SX.CTR_CD
    FROM IN_KHO_SX
    LEFT JOIN M090 ON (M090.M_CODE = IN_KHO_SX.M_CODE AND M090.CTR_CD = IN_KHO_SX.CTR_CD)
    WHERE IN_KHO_SX.REMARK = 'TRA_KHO' AND IN_KHO_SX.PLAN_ID_SUDUNG is null AND IN_KHO_SX.CTR_CD='${DATA.CTR_CD}'
    GROUP BY PLAN_ID_INPUT,M090.M_NAME, IN_KHO_SX.CTR_CD) ,
DD AS (
SELECT PLAN_ID_INPUT,M090.M_NAME,SUM(isnull(TOTAL_IN_QTY, 0)) AS NEXT_OUT_QTY, IN_KHO_SX.CTR_CD
FROM IN_KHO_SX
LEFT JOIN M090 ON (M090.M_CODE = IN_KHO_SX.M_CODE AND M090.CTR_CD = IN_KHO_SX.CTR_CD)
WHERE PLAN_ID_INPUT <> PLAN_ID_SUDUNG AND IN_KHO_SX.USE_YN = 'X' AND isnull(REMARK,'') <> 'TRA_KHO' AND IN_KHO_SX.CTR_CD='${DATA.CTR_CD}'
GROUP BY PLAN_ID_INPUT,M090.M_NAME, IN_KHO_SX.CTR_CD),
EE AS (
SELECT PLAN_ID_SUDUNG,M090.M_NAME,SUM(isnull(TOTAL_IN_QTY, 0)) AS NEXT_IN_QTY, IN_KHO_SX.CTR_CD
FROM IN_KHO_SX
LEFT JOIN M090 ON (M090.M_CODE = IN_KHO_SX.M_CODE AND M090.CTR_CD = IN_KHO_SX.CTR_CD)
WHERE PLAN_ID_INPUT <> PLAN_ID_SUDUNG AND IN_KHO_SX.CTR_CD='${DATA.CTR_CD}'
GROUP BY PLAN_ID_SUDUNG,M090.M_NAME, IN_KHO_SX.CTR_CD),
FF AS (
SELECT PLAN_ID_INPUT,M090.M_NAME,SUM(isnull(TOTAL_IN_QTY, 0)) AS TON_KHO_AO, IN_KHO_SX.CTR_CD
FROM IN_KHO_SX
LEFT JOIN M090 ON (M090.M_CODE = IN_KHO_SX.M_CODE AND M090.CTR_CD = IN_KHO_SX.CTR_CD)
WHERE IN_KHO_SX.USE_YN='Y' AND IN_KHO_SX.CTR_CD='${DATA.CTR_CD}'
GROUP BY PLAN_ID_INPUT,M090.M_NAME, IN_KHO_SX.CTR_CD),
GG AS (
SELECT PLAN_ID_INPUT,M090.M_NAME,SUM(isnull(TOTAL_IN_QTY, 0)) AS LOCK_QTY, IN_KHO_SX.CTR_CD
FROM IN_KHO_SX
LEFT JOIN M090 ON (M090.M_CODE = IN_KHO_SX.M_CODE AND M090.CTR_CD = IN_KHO_SX.CTR_CD)
WHERE IN_KHO_SX.USE_YN='O' AND IN_KHO_SX.CTR_CD='${DATA.CTR_CD}'
GROUP BY PLAN_ID_INPUT,M090.M_NAME, IN_KHO_SX.CTR_CD),
HH AS (
SELECT  ZTB_SX_NG_MATERIAL.CTR_CD,PLAN_ID_SUDUNG, M090.M_NAME, SUM(TOTAL_IN_QTY) AS RETURN_IQC   
FROM ZTB_SX_NG_MATERIAL 
LEFT JOIN M090 ON M090.CTR_CD=  ZTB_SX_NG_MATERIAL.CTR_CD AND M090.M_CODE=  ZTB_SX_NG_MATERIAL.M_CODE 
WHERE LIEUQL_SX = 1 AND ZTB_SX_NG_MATERIAL.CTR_CD ='${DATA.CTR_CD}'  
GROUP BY ZTB_SX_NG_MATERIAL.CTR_CD,PLAN_ID_SUDUNG, M090.M_NAME
),
II AS (
SELECT ZTB_SX_NG_MATERIAL.CTR_CD,OUT_PLAN_ID, M090.M_NAME, SUM(TOTAL_IN_QTY) AS IQC_IN   
FROM ZTB_SX_NG_MATERIAL 
LEFT JOIN M090 ON M090.CTR_CD=  ZTB_SX_NG_MATERIAL.CTR_CD AND M090.M_CODE=  ZTB_SX_NG_MATERIAL.M_CODE 
WHERE LIEUQL_SX = 1 AND ZTB_SX_NG_MATERIAL.CTR_CD ='${DATA.CTR_CD}'  
GROUP BY ZTB_SX_NG_MATERIAL.CTR_CD,OUT_PLAN_ID, M090.M_NAME
)
, INSPECT_INPUT_TABLE AS 
( SELECT 
      PLAN_ID, 
      SUM(
        CAST(INPUT_QTY_EA as float)
      ) AS INS_INPUT,
      CTR_CD 
    FROM 
      ZTBINSPECTINPUTTB 
    WHERE CTR_CD='${DATA.CTR_CD}'
    GROUP BY 
      PLAN_ID, CTR_CD),
INSPECT_OUTPUT_TABLE AS 
(SELECT 
      PLAN_ID, 
      SUM(
        CAST(OUTPUT_QTY_EA as float)
      ) AS INS_OUTPUT,
      CTR_CD 
    FROM 
      ZTBINSPECTOUTPUTTB 
    WHERE SORTING='N' AND CTR_CD='${DATA.CTR_CD}'
    GROUP BY 
      PLAN_ID, CTR_CD),
	INSPECT_NK_TABLE AS
	( SELECT 
      PLAN_ID, 
      SUM(
        CAST((INSPECT_TOTAL_QTY-ERR32) as float)
      ) AS INSPECT_TOTAL_QTY, 
      SUM(
        CAST(INSPECT_OK_QTY as float)
      ) AS INSPECT_OK_QTY, 
      SUM(
        CAST(
          (
            ERR4 + ERR5 + ERR6 + ERR7 + ERR8 + ERR9 + ERR10 + ERR11 + ERR12 + ERR13 + ERR14 + ERR15 + ERR16 + ERR17 + ERR18 + ERR19 + ERR20 + ERR21 + ERR22 + ERR23 + ERR24 + ERR25 + ERR26 + ERR27 + ERR28 + ERR29 + ERR30 + ERR31
          ) as float
        )
      ) AS INSPECT_TOTAL_NG , 
      SUM(ERR4+ERR5+ERR6+ERR7+ERR8+ERR9+ERR10+ERR11) AS INSPECT_MATERIAL_NG, SUM(ERR12+ERR13+ERR14+ERR15+ERR16+ERR17+ERR18+ERR19+ERR20+ERR21+ERR22+ERR23+ERR24+ERR25+ERR26+ERR27+ERR28+ERR29+ERR30+ERR31) AS INSPECT_PROCESS_NG, SUM(ERR32) AS SX_MARKING_QTY, SUM(ERR1) AS LOSS_THEM_TUI,SUM(ERR1+ ERR2+ERR3) AS INSPECT_LOSS_QTY,
      CTR_CD
    FROM 
      ZTBINSPECTNGTB 
    WHERE CTR_CD='${DATA.CTR_CD}'
    GROUP BY 
      PLAN_ID, CTR_CD),
PROCESS_TB AS
          (
          SELECT G_CODE,
          CASE WHEN EQ4 <> 'NA' AND EQ4 <> 'NO' AND EQ4 is not null AND EQ4 <> '' THEN 4 
          WHEN EQ3 <> 'NA' AND EQ3 <> 'NO' AND EQ3 is not null AND EQ3 <> ''  THEN 3
          WHEN EQ2 <> 'NA' AND EQ2 <> 'NO' AND EQ2 is not null AND EQ2 <> ''  THEN 2 
          ELSE 1 END AS MAX_PROCESS_NUMBER,
          CTR_CD
          FROM M100
          WHERE CTR_CD='${DATA.CTR_CD}'
)
SELECT 
  CASE WHEN P400.CODE_55 = '04' THEN 'SAMPLE' ELSE 'MASS' END AS PHAN_LOAI, 
  ZTB_QLSXPLAN.G_CODE, 
  ZTB_QLSXPLAN.PLAN_ID, 
  ZTB_QLSXPLAN.PLAN_DATE, 
  ZTB_QLSXPLAN.PROD_REQUEST_NO, 
  M100.G_NAME, 
  M100.G_NAME_KD,
  isnull(
  CASE WHEN ZTB_QLSXPLAN.PROCESS_NUMBER = 1 THEN (ZTB_QLSXPLAN.PLAN_QTY* ZTB_SX_RESULT.PD*1.0/ZTB_SX_RESULT.CAVITY/1000*(1+ZTB_DM_HISTORY.LOSS_SX1/100) + ZTB_DM_HISTORY.LOSS_SETTING1)  
  WHEN ZTB_QLSXPLAN.PROCESS_NUMBER = 2 THEN (ZTB_QLSXPLAN.PLAN_QTY* ZTB_SX_RESULT.PD*1.0/ZTB_SX_RESULT.CAVITY/1000*(1+ZTB_DM_HISTORY.LOSS_SX2/100) + ZTB_DM_HISTORY.LOSS_SETTING2)
  WHEN ZTB_QLSXPLAN.PROCESS_NUMBER = 3 THEN (ZTB_QLSXPLAN.PLAN_QTY* ZTB_SX_RESULT.PD*1.0/ZTB_SX_RESULT.CAVITY/1000*(1+ZTB_DM_HISTORY.LOSS_SX3/100) + ZTB_DM_HISTORY.LOSS_SETTING3)
  WHEN ZTB_QLSXPLAN.PROCESS_NUMBER = 4 THEN (ZTB_QLSXPLAN.PLAN_QTY* ZTB_SX_RESULT.PD*1.0/ZTB_SX_RESULT.CAVITY/1000*(1+ZTB_DM_HISTORY.LOSS_SX4/100) + ZTB_DM_HISTORY.LOSS_SETTING4)
  ELSE ZTB_QLSXPLAN.PLAN_QTY* ZTB_SX_RESULT.PD*1.0/ZTB_SX_RESULT.CAVITY/1000 END,0) AS PLAN_TARGET_MET
  ,
  ZTB_QLSXPLAN.PLAN_QTY, 
  ZTB_QLSXPLAN.PLAN_QTY* ZTB_SX_RESULT.PD*1.0/ZTB_SX_RESULT.CAVITY/1000 AS PLAN_ORG_MET,  
  M100.EQ1, 
  M100.EQ2, 
  ZTB_QLSXPLAN.PLAN_EQ, 
  ZTB_QLSXPLAN.PLAN_FACTORY, 
  ZTB_QLSXPLAN.PROCESS_NUMBER, 
  ZTB_QLSXPLAN.STEP, 
isnull(isnull(WAREHOUSE_OUT.M_NAME, AA.M_NAME),BB.M_NAME) AS M_NAME, 
isnull(WAREHOUSE_OUT.WAREHOUSE_OUTPUT_QTY, 0) AS WAREHOUSE_OUTPUT_QTY,
isnull(EE.NEXT_IN_QTY,0) AS NEXT_IN_QTY,
isnull(II.IQC_IN,0) AS IQC_IN,
CASE WHEN PROCESS_NUMBER =1 THEN  (isnull(WAREHOUSE_OUT.WAREHOUSE_OUTPUT_QTY, 0)+ isnull(EE.NEXT_IN_QTY,0) - isnull(BB.INPUT_QTY * 1.000, isnull(AA.INPUT_QTY * 1.00000,0))) ELSE 0 END AS NOT_BEEP_QTY,
isnull(HH.RETURN_IQC,0) AS RETURN_IQC,
isnull(BB.INPUT_QTY * 1.000, isnull(AA.INPUT_QTY * 1.00000,0)) AS BEEP_QTY,	 
isnull(BB.REMAIN_QTY, 0) AS REMAIN_QTY,
(isnull(BB.INPUT_QTY * 1.00000, isnull(AA.INPUT_QTY * 1.00000,0)) - isnull(BB.REMAIN_QTY, 0)) AS USED_QTY,
isnull(GG.LOCK_QTY,0) AS LOCK_QTY,
isnull(FF.TON_KHO_AO,0) AS TON_KHO_AO,
isnull(DD.NEXT_OUT_QTY,0) AS NEXT_OUT_QTY,
isnull(CC.RETURN_QTY, 0) AS RETURN_QTY,  
isnull(ZTB_SX_RESULT.NG_MET,0) AS NG_MET, 
  ZTB_SX_RESULT.SETTING_MET, 
  ZTB_SX_RESULT.PD, 
  ZTB_SX_RESULT.CAVITY, 
  CASE WHEN ZTB_QLSXPLAN.PROCESS_NUMBER = 1 THEN M100.LOSS_SETTING1 WHEN ZTB_QLSXPLAN.PROCESS_NUMBER = 2 THEN M100.LOSS_SETTING2 WHEN ZTB_QLSXPLAN.PROCESS_NUMBER = 3 THEN M100.LOSS_SETTING3 WHEN ZTB_QLSXPLAN.PROCESS_NUMBER = 4 THEN M100.LOSS_SETTING4 ELSE 0 END AS SETTING_MET_TC, 
  CASE WHEN ZTB_QLSXPLAN.PROCESS_NUMBER = 1 THEN M100.LOSS_ST_SX1 WHEN ZTB_QLSXPLAN.PROCESS_NUMBER = 2 THEN M100.LOSS_ST_SX2 WHEN ZTB_QLSXPLAN.PROCESS_NUMBER = 3 THEN M100.LOSS_ST_SX3 WHEN ZTB_QLSXPLAN.PROCESS_NUMBER = 4 THEN M100.LOSS_ST_SX4 ELSE 0 END AS SETTING_DM_SX, 
  isnull(WAREHOUSE_OUT.WAREHOUSE_OUTPUT_QTY, 0) *1.0/ ZTB_SX_RESULT.PD * ZTB_SX_RESULT.CAVITY * 1000 AS WAREHOUSE_ESTIMATED_QTY, 
  ((isnull(BB.INPUT_QTY * 1.00000, AA.INPUT_QTY * 1.00000) - isnull(BB.REMAIN_QTY, 0))*1.0)/ ZTB_SX_RESULT.PD * ZTB_SX_RESULT.CAVITY * 1000 AS ESTIMATED_QTY, 
  ((isnull(BB.INPUT_QTY * 1.00000, AA.INPUT_QTY * 1.00000) - isnull(BB.REMAIN_QTY, 0))*1.0)/ ZTB_SX_RESULT.PD * ZTB_SX_RESULT.CAVITY * 1000AS ESTIMATED_QTY_ST,
  ZTB_SX_RESULT.SETTING_MET *1.0/ ZTB_SX_RESULT.PD * ZTB_SX_RESULT.CAVITY * 1000 AS SETTING_EA, 
  isnull(ZTB_SX_RESULT.NG_MET,0)/ ZTB_SX_RESULT.PD * ZTB_SX_RESULT.CAVITY * 1000 AS NG_EA,
  CAST(ZTB_SX_RESULT.SX_RESULT AS float) AS KETQUASX, 
  CASE WHEN PROCESS_TB.MAX_PROCESS_NUMBER =ZTB_QLSXPLAN.PROCESS_NUMBER AND ZTB_QLSXPLAN.STEP =0 THEN  CAST(ZTB_SX_RESULT.SX_RESULT AS float) ELSE 0 END AS KETQUASX_TP,
  INSPECT_INPUT_TABLE.INS_INPUT, 
  INSPECT_NK_TABLE.INSPECT_TOTAL_QTY, 
  INSPECT_NK_TABLE.INSPECT_OK_QTY,
  INSPECT_NK_TABLE.INSPECT_MATERIAL_NG, 
  INSPECT_NK_TABLE.INSPECT_PROCESS_NG, 
  INSPECT_NK_TABLE.INSPECT_TOTAL_NG, 
  INSPECT_NK_TABLE.SX_MARKING_QTY, 
  INSPECT_NK_TABLE.LOSS_THEM_TUI, 
  INSPECT_NK_TABLE.INSPECT_LOSS_QTY, 
  INSPECT_OUTPUT_TABLE.INS_OUTPUT, 
  ZTB_SX_RESULT.SETTING_START_TIME, 
  ZTB_SX_RESULT.MASS_START_TIME, 
  ZTB_SX_RESULT.MASS_END_TIME, 
  ZTB_SX_RESULT.RPM, 
  ZTB_SX_RESULT.EQ_NAME AS EQ_NAME_TT, 
  SUBSTRING(ZTB_SX_RESULT.EQ_NAME, 1, 2) AS MACHINE_NAME,
  ZTB_SX_RESULT.SX_DATE, 
  ZTB_SX_RESULT.WORK_SHIFT, 
  ZTB_SX_RESULT.INS_EMPL, 
  ZTB_SX_EFFICIENCY.FACTORY, 
  ZTB_SX_EFFICIENCY.BOC_KIEM, 
  ZTB_SX_EFFICIENCY.LAY_DO, 
  ZTB_SX_EFFICIENCY.MAY_HONG, 
  ZTB_SX_EFFICIENCY.DAO_NG, 
  ZTB_SX_EFFICIENCY.CHO_LIEU, 
  ZTB_SX_EFFICIENCY.CHO_BTP, 
  ZTB_SX_EFFICIENCY.HET_LIEU, 
  ZTB_SX_EFFICIENCY.LIEU_NG, 
  ZTB_SX_EFFICIENCY.CAN_HANG, 
  ZTB_SX_EFFICIENCY.HOP_FL, 
  ZTB_SX_EFFICIENCY.CHO_QC, 
  ZTB_SX_EFFICIENCY.CHOT_BAOCAO, 
  ZTB_SX_EFFICIENCY.CHUYEN_CODE, 
  ZTB_SX_EFFICIENCY.KHAC, 
  ZTB_SX_EFFICIENCY.REMARK,
  ZTB_QLSXPLAN.NEEDED_QTY,
  ZTB_QLSXPLAN.CURRENT_LOSS_SX,
  ZTB_QLSXPLAN.CURRENT_LOSS_KT,
  ZTB_QLSXPLAN.CURRENT_SETTING_M
FROM 
  ZTB_QLSXPLAN 
  LEFT JOIN AA ON (AA.PLAN_ID_SUDUNG= ZTB_QLSXPLAN.PLAN_ID AND AA.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
  LEFT JOIN BB ON (BB.PLAN_ID= ZTB_QLSXPLAN.PLAN_ID AND BB.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
  LEFT JOIN CC ON (CC.PLAN_ID_INPUT= ZTB_QLSXPLAN.PLAN_ID AND CC.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
  LEFT JOIN DD ON (DD.PLAN_ID_INPUT= ZTB_QLSXPLAN.PLAN_ID AND DD.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
  LEFT JOIN EE ON (EE.PLAN_ID_SUDUNG= ZTB_QLSXPLAN.PLAN_ID AND EE.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
  LEFT JOIN FF ON (FF.PLAN_ID_INPUT= ZTB_QLSXPLAN.PLAN_ID AND FF.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
  LEFT JOIN GG ON (GG.PLAN_ID_INPUT= ZTB_QLSXPLAN.PLAN_ID AND GG.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
  LEFT JOIN HH ON (HH.PLAN_ID_SUDUNG= ZTB_QLSXPLAN.PLAN_ID AND HH.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
  LEFT JOIN II ON (II.OUT_PLAN_ID= ZTB_QLSXPLAN.PLAN_ID AND II.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
  LEFT JOIN WAREHOUSE_OUT ON (WAREHOUSE_OUT.PLAN_ID_INPUT= ZTB_QLSXPLAN.PLAN_ID AND WAREHOUSE_OUT.CTR_CD = ZTB_QLSXPLAN.CTR_CD) 
  LEFT JOIN ZTB_SX_RESULT ON (ZTB_SX_RESULT.PLAN_ID = ZTB_QLSXPLAN.PLAN_ID AND ZTB_SX_RESULT.CTR_CD = ZTB_QLSXPLAN.CTR_CD) 
  LEFT JOIN  INSPECT_INPUT_TABLE ON(ZTB_QLSXPLAN.PLAN_ID = INSPECT_INPUT_TABLE.PLAN_ID AND ZTB_QLSXPLAN.CTR_CD = INSPECT_INPUT_TABLE.CTR_CD) 
  LEFT JOIN INSPECT_OUTPUT_TABLE ON (ZTB_QLSXPLAN.PLAN_ID = INSPECT_OUTPUT_TABLE.PLAN_ID AND ZTB_QLSXPLAN.CTR_CD = INSPECT_OUTPUT_TABLE.CTR_CD) 
  LEFT JOIN  INSPECT_NK_TABLE ON (ZTB_QLSXPLAN.PLAN_ID = INSPECT_NK_TABLE.PLAN_ID AND ZTB_QLSXPLAN.CTR_CD = INSPECT_NK_TABLE.CTR_CD) 
  LEFT JOIN M100 ON (M100.G_CODE = ZTB_QLSXPLAN.G_CODE AND M100.CTR_CD = ZTB_QLSXPLAN.CTR_CD) 
  LEFT JOIN PROCESS_TB ON (PROCESS_TB.G_CODE = ZTB_QLSXPLAN.G_CODE AND PROCESS_TB.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
  LEFT JOIN ZTB_SX_EFFICIENCY ON (ZTB_QLSXPLAN.PLAN_ID = ZTB_SX_EFFICIENCY.PLAN_ID AND ZTB_QLSXPLAN.CTR_CD = ZTB_SX_EFFICIENCY.CTR_CD) 
  LEFT JOIN P400 ON (P400.PROD_REQUEST_NO = ZTB_QLSXPLAN.PROD_REQUEST_NO AND P400.CTR_CD = ZTB_QLSXPLAN.CTR_CD) 
  LEFT JOIN ZTB_DM_HISTORY ON (ZTB_QLSXPLAN.PROD_REQUEST_NO= ZTB_DM_HISTORY.PROD_REQUEST_NO AND ZTB_QLSXPLAN.CTR_CD = ZTB_DM_HISTORY.CTR_CD)
  ${condition} AND ZTB_QLSXPLAN.CTR_CD='${DATA.CTR_CD}'
ORDER BY 
  ZTB_QLSXPLAN.PLAN_ID DESC
  `;
          //console.log(setpdQuery)
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
        })();
        break;
      case "loadDataSX_YCSX":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = " WHERE PROD_REQUEST_NO1 is not null  ";
          if (DATA.ALLTIME === false) {
            condition += ` AND P400.PROD_REQUEST_DATE BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE}'`;
          }
          if (DATA.G_NAME !== "") {
            condition += ` AND M100.G_NAME LIKE '%${DATA.G_NAME}%'`;
          }
          if (DATA.G_CODE !== "") {
            condition += ` AND M100.G_CODE = '${DATA.G_CODE}'`;
          }
          if (DATA.PROD_REQUEST_NO !== "") {
            condition += ` AND P400.PROD_REQUEST_NO = '${DATA.PROD_REQUEST_NO}'`;
          }
          if (DATA.FACTORY !== "ALL") {
            condition += ` AND M100.FACTORY = '${DATA.FACTORY}'`;
          }
          if (DATA.M_NAME !== "") {
            condition += ` AND isnull(isnull(WAREHOUSE_OUT.M_NAME, AA.M_NAME),BB.M_NAME) LIKE '%${DATA.M_NAME}%'`;
          }
          if (DATA.TRUSAMPLE) {
            condition += ` AND P400.CODE_55 <> '04'`;
          }
          if (DATA.ONLYCLOSE) {
            condition += ` AND (isnull(INS_OUTPUT_TB.INS_OUTPUT,0) >= P400.PROD_REQUEST_QTY  OR P400.YCSX_PENDING=0) `
          }
          let setpdQuery = ` 
            WITH KQSXTABLE  AS
 (SELECT PVTB.CTR_CD, PVTB.PROD_REQUEST_NO, isnull(PVTB.[1],0) AS CD1, isnull(PVTB.[2],0) AS CD2,isnull(PVTB.[3],0) AS CD3,isnull(PVTB.[4],0) AS CD4 FROM
 (
 SELECT ZTB_QLSXPLAN.CTR_CD, ZTB_QLSXPLAN.PROD_REQUEST_NO, ZTB_QLSXPLAN.PROCESS_NUMBER, SUM(isnull(SX_RESULT,0)) AS KETQUASX FROM ZTB_SX_RESULT LEFT JOIN ZTB_QLSXPLAN ON (ZTB_QLSXPLAN.PLAN_ID = ZTB_SX_RESULT.PLAN_ID AND ZTB_QLSXPLAN.CTR_CD = ZTB_SX_RESULT.CTR_CD) WHERE ZTB_QLSXPLAN.STEP=0 GROUP BY ZTB_QLSXPLAN.PROD_REQUEST_NO, ZTB_QLSXPLAN.PROCESS_NUMBER, ZTB_QLSXPLAN.CTR_CD
 )
 AS PV
 PIVOT
 (
 SUM(PV.KETQUASX) FOR PV.PROCESS_NUMBER IN ([1],[2],[3],[4])
 )
 AS PVTB),
 SX_RESULT_PD_CAVITY AS (
 SELECT DISTINCT PLAN_ID, PD, CAVITY, CTR_CD FROM ZTB_SX_RESULT
 ),
 KQSX_ST_TABLE AS (SELECT PVTB.CTR_CD, PVTB.PROD_REQUEST_NO, isnull(PVTB.[1],0) AS ST1, isnull(PVTB.[2],0) AS ST2,isnull(PVTB.[3],0) AS ST3,isnull(PVTB.[4],0) AS ST4 FROM 
 (
     SELECT ZTB_QLSXPLAN.CTR_CD, ZTB_QLSXPLAN.PROD_REQUEST_NO, ZTB_QLSXPLAN.PROCESS_NUMBER, SUM(isnull(SETTING_MET,0)) AS SETTING_MET FROM ZTB_SX_RESULT LEFT JOIN ZTB_QLSXPLAN ON (ZTB_QLSXPLAN.PLAN_ID = ZTB_SX_RESULT.PLAN_ID AND ZTB_QLSXPLAN.CTR_CD = ZTB_SX_RESULT.CTR_CD) WHERE ZTB_QLSXPLAN.STEP=0 GROUP BY ZTB_QLSXPLAN.PROD_REQUEST_NO, ZTB_QLSXPLAN.PROCESS_NUMBER, ZTB_QLSXPLAN.CTR_CD
 )
 AS PV
 PIVOT
 (
 SUM(PV.SETTING_MET) FOR PV.PROCESS_NUMBER IN ([1],[2],[3],[4])
 )
 AS PVTB),
 KQSX_NG_TABLE AS (
 SELECT PVTB.CTR_CD, PVTB.PROD_REQUEST_NO, isnull(PVTB.[1],0) AS NG1, isnull(PVTB.[2],0) AS NG2,isnull(PVTB.[3],0) AS NG3,isnull(PVTB.[4],0) AS NG4 FROM
 (
    SELECT ZTB_QLSXPLAN.CTR_CD, ZTB_QLSXPLAN.PROD_REQUEST_NO, ZTB_QLSXPLAN.PROCESS_NUMBER, SUM(isnull(NG_MET,0)) AS NG_MET FROM ZTB_SX_RESULT LEFT JOIN ZTB_QLSXPLAN ON (ZTB_QLSXPLAN.PLAN_ID = ZTB_SX_RESULT.PLAN_ID AND ZTB_QLSXPLAN.CTR_CD = ZTB_SX_RESULT.CTR_CD) WHERE ZTB_QLSXPLAN.STEP=0 GROUP BY ZTB_QLSXPLAN.PROD_REQUEST_NO, ZTB_QLSXPLAN.PROCESS_NUMBER, ZTB_QLSXPLAN.CTR_CD
 )
 AS PV
 PIVOT
 (
 SUM(PV.NG_MET) FOR PV.PROCESS_NUMBER IN ([1],[2],[3],[4])
 )
 AS PVTB
 ),
 INS_INPUT_TB AS  (SELECT  PROD_REQUEST_NO, SUM(INPUT_QTY_EA) AS INS_INPUT, CTR_CD FROM ZTBINSPECTINPUTTB GROUP BY PROD_REQUEST_NO, CTR_CD),
 INS_OUTPUT_TB AS (SELECT  PROD_REQUEST_NO, SUM(OUTPUT_QTY_EA) AS INS_OUTPUT, CTR_CD FROM ZTBINSPECTOUTPUTTB WHERE SORTING='N' GROUP BY PROD_REQUEST_NO, CTR_CD),
 ZTB_QLSXPLAN_A AS (SELECT DISTINCT PROD_REQUEST_NO AS PROD_REQUEST_NO1, CTR_CD FROM ZTB_QLSXPLAN),
 AA AS (
     SELECT ZTB_QLSXPLAN.PROD_REQUEST_NO,M090.M_NAME, SUM(isnull(TOTAL_IN_QTY, 0)) AS INPUT_QTY,SUM(isnull(TOTAL_IN_QTY, 0)*1.0/ZTB_SX_RESULT.PD* ZTB_SX_RESULT.CAVITY*1000)  AS WAREHOUSE_ESTIMATED_QTY, ZTB_QLSXPLAN.CTR_CD
     FROM IN_KHO_SX
     LEFT JOIN M090 ON (M090.M_CODE = IN_KHO_SX.M_CODE AND M090.CTR_CD = IN_KHO_SX.CTR_CD)
    LEFT JOIN ZTB_QLSXPLAN ON (ZTB_QLSXPLAN.PLAN_ID = IN_KHO_SX.PLAN_ID_INPUT AND ZTB_QLSXPLAN.CTR_CD = IN_KHO_SX.CTR_CD)
    LEFT JOIN ZTB_SX_RESULT ON (ZTB_QLSXPLAN.PLAN_ID = ZTB_SX_RESULT.PLAN_ID AND ZTB_QLSXPLAN.CTR_CD = ZTB_SX_RESULT.CTR_CD)
     WHERE IN_KHO_SX.USE_YN = 'X' AND ZTB_QLSXPLAN.PROCESS_NUMBER=1 AND isnull(IN_KHO_SX.REMARK,'') <> 'TRA_KHO'
     GROUP BY ZTB_QLSXPLAN.PROD_REQUEST_NO,M090.M_NAME, ZTB_QLSXPLAN.CTR_CD
     ),
 BB AS (
     SELECT P500.PROD_REQUEST_NO,M090.M_NAME,SUM(isnull(P500.REMAIN_QTY, 0)) AS REMAIN_QTY,SUM(isnull(P500.INPUT_QTY, 0))  AS INPUT_QTY,SUM((isnull(P500.INPUT_QTY, 0)-isnull(P500.REMAIN_QTY, 0))*1.0/ZTB_SX_RESULT.PD* ZTB_SX_RESULT.CAVITY*1000) AS ESTIMATED_QTY, P500.CTR_CD
     FROM P500
     LEFT JOIN M090 ON (M090.M_CODE = P500.M_CODE AND M090.CTR_CD = P500.CTR_CD)
    LEFT JOIN ZTB_QLSXPLAN ON (ZTB_QLSXPLAN.PLAN_ID = P500.PLAN_ID AND ZTB_QLSXPLAN.CTR_CD = P500.CTR_CD)
    LEFT JOIN ZTB_SX_RESULT ON (ZTB_QLSXPLAN.PLAN_ID = ZTB_SX_RESULT.PLAN_ID AND ZTB_QLSXPLAN.CTR_CD = ZTB_SX_RESULT.CTR_CD)
    WHERE ZTB_QLSXPLAN.PROCESS_NUMBER=1
     GROUP BY P500.PROD_REQUEST_NO,M090.M_NAME, P500.CTR_CD),
 WAREHOUSE_OUT AS (
     SELECT ZTB_QLSXPLAN.PROD_REQUEST_NO,M090.M_NAME,SUM(isnull(TOTAL_IN_QTY, 0)) AS WAREHOUSE_OUTPUT_QTY, SUM(isnull(TOTAL_IN_QTY, 0)*1.0/ZTB_SX_RESULT.PD* ZTB_SX_RESULT.CAVITY*1000)  AS WAREHOUSE_ESTIMATED_QTY, ZTB_QLSXPLAN.CTR_CD
     FROM IN_KHO_SX
     LEFT JOIN M090 ON (M090.M_CODE = IN_KHO_SX.M_CODE AND M090.CTR_CD = IN_KHO_SX.CTR_CD)
    LEFT JOIN ZTB_QLSXPLAN ON (ZTB_QLSXPLAN.PLAN_ID = IN_KHO_SX.PLAN_ID_INPUT AND ZTB_QLSXPLAN.CTR_CD = IN_KHO_SX.CTR_CD)
    LEFT JOIN ZTB_SX_RESULT ON (ZTB_QLSXPLAN.PLAN_ID = ZTB_SX_RESULT.PLAN_ID AND ZTB_QLSXPLAN.CTR_CD = ZTB_SX_RESULT.CTR_CD)
     WHERE IN_KHO_SX.PHANLOAI = 'N'
     GROUP BY ZTB_QLSXPLAN.PROD_REQUEST_NO,M090.M_NAME, ZTB_QLSXPLAN.CTR_CD
    ),
 CC AS (
 SELECT ZTB_QLSXPLAN.PROD_REQUEST_NO,M090.M_NAME,SUM(isnull(TOTAL_IN_QTY, 0)) AS RETURN_QTY, ZTB_QLSXPLAN.CTR_CD
     FROM IN_KHO_SX
     LEFT JOIN M090 ON (M090.M_CODE = IN_KHO_SX.M_CODE AND M090.CTR_CD = IN_KHO_SX.CTR_CD)
    LEFT JOIN ZTB_QLSXPLAN ON (ZTB_QLSXPLAN.PLAN_ID = IN_KHO_SX.PLAN_ID_INPUT AND ZTB_QLSXPLAN.CTR_CD = IN_KHO_SX.CTR_CD)
     WHERE IN_KHO_SX.REMARK='TRA_KHO' AND PLAN_ID_SUDUNG is null
     GROUP BY ZTB_QLSXPLAN.PROD_REQUEST_NO,M090.M_NAME, ZTB_QLSXPLAN.CTR_CD
 ),
 DD AS (
 SELECT ZTB_QLSXPLAN.PROD_REQUEST_NO,M090.M_NAME,SUM(isnull(TOTAL_IN_QTY, 0)) AS NEXT_OUT_QTY, ZTB_QLSXPLAN.CTR_CD
 FROM IN_KHO_SX
 LEFT JOIN M090 ON (M090.M_CODE = IN_KHO_SX.M_CODE AND M090.CTR_CD = IN_KHO_SX.CTR_CD)
 LEFT JOIN ZTB_QLSXPLAN ON (ZTB_QLSXPLAN.PLAN_ID = IN_KHO_SX.PLAN_ID_INPUT AND ZTB_QLSXPLAN.CTR_CD = IN_KHO_SX.CTR_CD)
 LEFT JOIN (SELECT * FROM ZTB_QLSXPLAN) AS ZTB_QLSXPLAN_A ON (ZTB_QLSXPLAN_A.PLAN_ID = IN_KHO_SX.PLAN_ID_SUDUNG AND ZTB_QLSXPLAN_A.CTR_CD = IN_KHO_SX.CTR_CD) 
 WHERE ZTB_QLSXPLAN_A.PROD_REQUEST_NO <> ZTB_QLSXPLAN.PROD_REQUEST_NO AND IN_KHO_SX.USE_YN = 'X' AND isnull(IN_KHO_SX.REMARK,'') <> 'TRA_KHO'
 GROUP BY ZTB_QLSXPLAN.PROD_REQUEST_NO,M090.M_NAME, ZTB_QLSXPLAN.CTR_CD),
 EE AS (
 SELECT ZTB_QLSXPLAN_A.PROD_REQUEST_NO,M090.M_NAME,SUM(isnull(TOTAL_IN_QTY, 0)) AS NEXT_IN_QTY, ZTB_QLSXPLAN_A.CTR_CD
 FROM IN_KHO_SX
 LEFT JOIN M090 ON (M090.M_CODE = IN_KHO_SX.M_CODE AND M090.CTR_CD = IN_KHO_SX.CTR_CD)
 LEFT JOIN ZTB_QLSXPLAN ON (ZTB_QLSXPLAN.PLAN_ID = IN_KHO_SX.PLAN_ID_INPUT AND ZTB_QLSXPLAN.CTR_CD = IN_KHO_SX.CTR_CD)
 LEFT JOIN (SELECT * FROM ZTB_QLSXPLAN) AS ZTB_QLSXPLAN_A ON (ZTB_QLSXPLAN_A.PLAN_ID = IN_KHO_SX.PLAN_ID_SUDUNG AND ZTB_QLSXPLAN_A.CTR_CD = IN_KHO_SX.CTR_CD) 
 WHERE ZTB_QLSXPLAN_A.PROD_REQUEST_NO <> ZTB_QLSXPLAN.PROD_REQUEST_NO
 GROUP BY ZTB_QLSXPLAN_A.PROD_REQUEST_NO,M090.M_NAME, ZTB_QLSXPLAN_A.CTR_CD),
 FF AS (
 SELECT ZTB_QLSXPLAN.PROD_REQUEST_NO,M090.M_NAME,SUM(isnull(TOTAL_IN_QTY, 0)) AS TON_KHO_AO, ZTB_QLSXPLAN.CTR_CD
 FROM IN_KHO_SX
 LEFT JOIN M090 ON (M090.M_CODE = IN_KHO_SX.M_CODE AND M090.CTR_CD = IN_KHO_SX.CTR_CD)
 LEFT JOIN ZTB_QLSXPLAN ON (ZTB_QLSXPLAN.PLAN_ID = IN_KHO_SX.PLAN_ID_INPUT AND ZTB_QLSXPLAN.CTR_CD = IN_KHO_SX.CTR_CD)
 WHERE IN_KHO_SX.USE_YN='Y'
 GROUP BY ZTB_QLSXPLAN.PROD_REQUEST_NO,M090.M_NAME, ZTB_QLSXPLAN.CTR_CD),
 GG AS (
 SELECT ZTB_QLSXPLAN.PROD_REQUEST_NO,M090.M_NAME,SUM(isnull(TOTAL_IN_QTY, 0)) AS LOCK_QTY, ZTB_QLSXPLAN.CTR_CD
 FROM IN_KHO_SX
 LEFT JOIN M090 ON (M090.M_CODE = IN_KHO_SX.M_CODE AND M090.CTR_CD = IN_KHO_SX.CTR_CD)
 LEFT JOIN ZTB_QLSXPLAN ON (ZTB_QLSXPLAN.PLAN_ID = IN_KHO_SX.PLAN_ID_INPUT AND ZTB_QLSXPLAN.CTR_CD = IN_KHO_SX.CTR_CD)
 WHERE IN_KHO_SX.USE_YN='O'
 GROUP BY ZTB_QLSXPLAN.PROD_REQUEST_NO,M090.M_NAME, ZTB_QLSXPLAN.CTR_CD),
  HH AS (
SELECT  ZTB_SX_NG_MATERIAL.CTR_CD,ZTB_QLSXPLAN.PROD_REQUEST_NO, M090.M_NAME, SUM(TOTAL_IN_QTY) AS RETURN_IQC   
FROM ZTB_SX_NG_MATERIAL 
LEFT JOIN M090 ON M090.CTR_CD=  ZTB_SX_NG_MATERIAL.CTR_CD AND M090.M_CODE=  ZTB_SX_NG_MATERIAL.M_CODE 
LEFT JOIN ZTB_QLSXPLAN ON ZTB_QLSXPLAN.CTR_CD=  ZTB_SX_NG_MATERIAL.CTR_CD AND ZTB_QLSXPLAN.PLAN_ID = ZTB_SX_NG_MATERIAL.PLAN_ID_SUDUNG
WHERE LIEUQL_SX = 1 AND ZTB_SX_NG_MATERIAL.CTR_CD ='002' AND ZTB_QLSXPLAN.PROCESS_NUMBER =1
GROUP BY ZTB_SX_NG_MATERIAL.CTR_CD,ZTB_QLSXPLAN.PROD_REQUEST_NO, M090.M_NAME
),
 II AS (
SELECT  ZTB_SX_NG_MATERIAL.CTR_CD,ZTB_QLSXPLAN.PROD_REQUEST_NO, M090.M_NAME, SUM(TOTAL_IN_QTY) AS IQC_IN   
FROM ZTB_SX_NG_MATERIAL 
LEFT JOIN M090 ON M090.CTR_CD=  ZTB_SX_NG_MATERIAL.CTR_CD AND M090.M_CODE=  ZTB_SX_NG_MATERIAL.M_CODE 
LEFT JOIN ZTB_QLSXPLAN ON ZTB_QLSXPLAN.CTR_CD=  ZTB_SX_NG_MATERIAL.CTR_CD AND ZTB_QLSXPLAN.PLAN_ID = ZTB_SX_NG_MATERIAL.OUT_PLAN_ID
WHERE LIEUQL_SX = 1 AND ZTB_SX_NG_MATERIAL.CTR_CD ='002' AND ZTB_QLSXPLAN.PROCESS_NUMBER =1
GROUP BY ZTB_SX_NG_MATERIAL.CTR_CD,ZTB_QLSXPLAN.PROD_REQUEST_NO, M090.M_NAME
),
 NHATKYKT AS (
  SELECT PROD_REQUEST_NO, SUM(INSPECT_TOTAL_QTY-ERR32) AS INSPECT_TOTAL_QTY, SUM(INSPECT_OK_QTY) AS INSPECT_OK_QTY, SUM(ERR1+ ERR2+ERR3) AS INSPECT_LOSS_QTY, SUM(ERR4+ERR5+ERR6+ERR7+ERR8+ERR9+ERR10+ERR11) AS INSPECT_MATERIAL_NG, SUM(ERR12+ERR13+ERR14+ERR15+ERR16+ERR17+ERR18+ERR19+ERR20+ERR21+ERR22+ERR23+ERR24+ERR25+ERR26+ERR27+ERR28+ERR29+ERR30+ERR31) AS INSPECT_PROCESS_NG, SUM(ERR4+ERR5+ERR6+ERR7+ERR8+ERR9+ERR10+ERR11+ERR12+ERR13+ERR14+ERR15+ERR16+ERR17+ERR18+ERR19+ERR20+ERR21+ERR22+ERR23+ERR24+ERR25+ERR26+ERR27+ERR28+ERR29+ERR30+ERR31
  ) AS INSPECT_TOTAL_NG, SUM(ERR32) AS SX_MARKING_QTY, SUM(ERR1) AS LOSS_THEM_TUI, CTR_CD
  FROM ZTBINSPECTNGTB GROUP BY PROD_REQUEST_NO, CTR_CD
 ),
  NHATKYKT2 AS (
  SELECT G_CODE, SUM(INSPECT_TOTAL_QTY-ERR32) AS INSPECT_TOTAL_QTY, SUM(INSPECT_OK_QTY) AS INSPECT_OK_QTY, SUM(ERR1+ ERR2+ERR3) AS INSPECT_LOSS_QTY, SUM(ERR4+ERR5+ERR6+ERR7+ERR8+ERR9+ERR10+ERR11) AS INSPECT_MATERIAL_NG, SUM(ERR12+ERR13+ERR14+ERR15+ERR16+ERR17+ERR18+ERR19+ERR20+ERR21+ERR22+ERR23+ERR24+ERR25+ERR26+ERR27+ERR28+ERR29+ERR30+ERR31) AS INSPECT_PROCESS_NG, SUM(ERR4+ERR5+ERR6+ERR7+ERR8+ERR9+ERR10+ERR11+ERR12+ERR13+ERR14+ERR15+ERR16+ERR17+ERR18+ERR19+ERR20+ERR21+ERR22+ERR23+ERR24+ERR25+ERR26+ERR27+ERR28+ERR29+ERR30+ERR31
  ) AS INSPECT_TOTAL_NG, SUM(ERR32) AS SX_MARKING_QTY, SUM(ERR1) AS LOSS_THEM_TUI, CTR_CD
  FROM ZTBINSPECTNGTB GROUP BY G_CODE, CTR_CD
 )
 SELECT CASE WHEN  (isnull(INS_OUTPUT_TB.INS_OUTPUT,0) >= P400.PROD_REQUEST_QTY  OR P400.YCSX_PENDING=0) THEN 'CLOSED' ELSE 'PENDING' END AS YCSX_PENDING, P400.G_CODE, CASE WHEN P400.CODE_55 = '04' THEN 'SAMPLE' ELSE 'MASS' END AS PHAN_LOAI, P400.PROD_REQUEST_NO, M100.G_NAME,M100.G_NAME_KD,M100.FACTORY, P400.PROD_REQUEST_DATE, P400.PROD_REQUEST_QTY,
 M100.PD, M100.G_C* M100.G_C_R AS CAVITY,
 isnull(isnull(WAREHOUSE_OUT.M_NAME, AA.M_NAME),BB.M_NAME) AS M_NAME,
 isnull(WAREHOUSE_OUT.WAREHOUSE_OUTPUT_QTY, 0) AS M_OUTPUT,
 isnull(EE.NEXT_IN_QTY,0) AS NEXT_IN_QTY,
 isnull(II.IQC_IN,0) AS IQC_IN,
  (isnull(WAREHOUSE_OUT.WAREHOUSE_OUTPUT_QTY, 0)  + isnull(EE.NEXT_IN_QTY,0)  - isnull(BB.INPUT_QTY, 0) )AS NOT_SCANNED_QTY,
 isnull(BB.INPUT_QTY, 0) AS SCANNED_QTY,
 isnull(BB.REMAIN_QTY, 0) AS REMAIN_QTY,
 (isnull(BB.INPUT_QTY * 1.00000, isnull(AA.INPUT_QTY * 1.00000,0)) - isnull(BB.REMAIN_QTY, 0)) AS USED_QTY,
 isnull(GG.LOCK_QTY,0) AS LOCK_QTY,
 isnull(FF.TON_KHO_AO,0) AS TON_KHO_AO,
 isnull(HH.RETURN_IQC,0) AS RETURN_IQC,
 isnull(DD.NEXT_OUT_QTY,0) AS NEXT_OUT_QTY,
 isnull(CC.RETURN_QTY, 0) AS RETURN_QTY,
 isnull(WAREHOUSE_OUT.WAREHOUSE_ESTIMATED_QTY,0) AS WAREHOUSE_ESTIMATED_QTY,
 isnull(BB.ESTIMATED_QTY,0) AS ESTIMATED_QTY,
 M100.EQ1, M100.EQ2, M100.Setting1, M100.Setting2, M100.UPH1, M100.UPH2, M100.Step1, M100.Step2, isnull(M100.LOSS_SX1,0) AS LOSS_SX1, isnull(M100.LOSS_SX2,0) AS LOSS_SX2, isnull(M100.LOSS_SETTING1,0) AS LOSS_SETTING1, isnull(M100.LOSS_SETTING2,0) AS LOSS_SETTING2,M100.Step3, M100.Step4, M100.EQ3, M100.EQ4, M100.UPH3, M100.UPH4, M100.Setting3, M100.Setting4, isnull(M100.LOSS_SX3,0) AS LOSS_SX3, isnull(M100.LOSS_SX4,0) AS LOSS_SX4, isnull(M100.LOSS_SETTING3,0) AS LOSS_SETTING3, isnull(M100.LOSS_SETTING4,0) AS LOSS_SETTING4,CASE WHEN NHATKYKT2.INSPECT_TOTAL_QTY <>0 THEN isnull((NHATKYKT2.LOSS_THEM_TUI + NHATKYKT2.INSPECT_TOTAL_NG)*1.0/NHATKYKT2.INSPECT_TOTAL_QTY*100,0) ELSE 0 END AS LOSS_KT,
 KQSXTABLE.CD1,KQSXTABLE.CD2, KQSXTABLE.CD3, KQSXTABLE.CD4,
 KQSX_ST_TABLE.ST1 *1.000 / M100.PD * (M100.G_C* M100.G_C_R)*1000 AS ST1 ,
 KQSX_ST_TABLE.ST2 *1.000 / M100.PD * (M100.G_C* M100.G_C_R)*1000 AS  ST2 ,
 KQSX_ST_TABLE.ST3 *1.000 / M100.PD * (M100.G_C* M100.G_C_R)*1000 AS  ST3 ,
 KQSX_ST_TABLE.ST4 *1.000 / M100.PD * (M100.G_C* M100.G_C_R)*1000 AS  ST4 ,
 KQSX_NG_TABLE.NG1 *1.000 / M100.PD * (M100.G_C* M100.G_C_R)*1000 AS  NG1 ,
 KQSX_NG_TABLE.NG2 *1.000 / M100.PD * (M100.G_C* M100.G_C_R)*1000 AS  NG2 ,
 KQSX_NG_TABLE.NG3 *1.000 / M100.PD * (M100.G_C* M100.G_C_R)*1000 AS  NG3 ,
 KQSX_NG_TABLE.NG4 *1.000 / M100.PD * (M100.G_C* M100.G_C_R)*1000 AS  NG4,
 isnull(INS_INPUT_TB.INS_INPUT,0) INS_INPUT,
 isnull(NHATKYKT.INSPECT_TOTAL_QTY,0) AS INSPECT_TOTAL_QTY, isnull(NHATKYKT.INSPECT_OK_QTY,0) AS INSPECT_OK_QTY,isnull(NHATKYKT.LOSS_THEM_TUI,0) AS LOSS_THEM_TUI, isnull(NHATKYKT.INSPECT_LOSS_QTY,0) AS INSPECT_LOSS_QTY, isnull(NHATKYKT.INSPECT_TOTAL_NG,0) AS INSPECT_TOTAL_NG, isnull(NHATKYKT.INSPECT_MATERIAL_NG,0) AS INSPECT_MATERIAL_NG, isnull(NHATKYKT.INSPECT_PROCESS_NG,0) AS INSPECT_PROCESS_NG, isnull(NHATKYKT.SX_MARKING_QTY,0) AS SX_MARKING_QTY, isnull(INS_OUTPUT_TB.INS_OUTPUT,0) AS INS_OUTPUT
 FROM P400
 LEFT JOIN KQSXTABLE ON (P400.PROD_REQUEST_NO = KQSXTABLE.PROD_REQUEST_NO AND P400.CTR_CD = KQSXTABLE.CTR_CD)
 LEFT JOIN KQSX_ST_TABLE ON (P400.PROD_REQUEST_NO = KQSX_ST_TABLE.PROD_REQUEST_NO AND P400.CTR_CD = KQSX_ST_TABLE.CTR_CD)
 LEFT JOIN KQSX_NG_TABLE ON (P400.PROD_REQUEST_NO = KQSX_NG_TABLE.PROD_REQUEST_NO AND P400.CTR_CD = KQSX_NG_TABLE.CTR_CD)
 LEFT JOIN INS_INPUT_TB ON (INS_INPUT_TB.PROD_REQUEST_NO = P400.PROD_REQUEST_NO AND INS_INPUT_TB.CTR_CD = P400.CTR_CD)
 LEFT JOIN INS_OUTPUT_TB ON (INS_OUTPUT_TB.PROD_REQUEST_NO = P400.PROD_REQUEST_NO AND INS_OUTPUT_TB.CTR_CD = P400.CTR_CD)
 LEFT JOIN ZTB_QLSXPLAN_A ON (ZTB_QLSXPLAN_A.PROD_REQUEST_NO1 = P400.PROD_REQUEST_NO AND ZTB_QLSXPLAN_A.CTR_CD = P400.CTR_CD)
 LEFT JOIN M100 ON (M100.G_CODE = P400.G_CODE AND M100.CTR_CD = P400.CTR_CD)
 LEFT JOIN AA ON (AA.PROD_REQUEST_NO = P400.PROD_REQUEST_NO AND AA.CTR_CD = P400.CTR_CD)
 LEFT JOIN BB ON (BB.PROD_REQUEST_NO = P400.PROD_REQUEST_NO AND BB.CTR_CD = P400.CTR_CD)
 LEFT JOIN CC ON (CC.PROD_REQUEST_NO = P400.PROD_REQUEST_NO AND CC.CTR_CD = P400.CTR_CD)
 LEFT JOIN DD ON (DD.PROD_REQUEST_NO = P400.PROD_REQUEST_NO AND DD.CTR_CD = P400.CTR_CD)
 LEFT JOIN EE ON (EE.PROD_REQUEST_NO = P400.PROD_REQUEST_NO AND EE.CTR_CD = P400.CTR_CD)
 LEFT JOIN FF ON (FF.PROD_REQUEST_NO = P400.PROD_REQUEST_NO AND FF.CTR_CD = P400.CTR_CD)
 LEFT JOIN GG ON (GG.PROD_REQUEST_NO = P400.PROD_REQUEST_NO AND GG.CTR_CD = P400.CTR_CD)
 LEFT JOIN HH ON (HH.PROD_REQUEST_NO = P400.PROD_REQUEST_NO AND HH.CTR_CD = P400.CTR_CD)
 LEFT JOIN II ON (II.PROD_REQUEST_NO = P400.PROD_REQUEST_NO AND II.CTR_CD = P400.CTR_CD)
 LEFT JOIN WAREHOUSE_OUT ON (WAREHOUSE_OUT.PROD_REQUEST_NO = P400.PROD_REQUEST_NO AND WAREHOUSE_OUT.CTR_CD = P400.CTR_CD)
 LEFT JOIN NHATKYKT ON (NHATKYKT.PROD_REQUEST_NO = P400.PROD_REQUEST_NO AND NHATKYKT.CTR_CD = P400.CTR_CD)
 LEFT JOIN NHATKYKT2 ON (NHATKYKT2.G_CODE = P400.G_CODE AND NHATKYKT2.CTR_CD = P400.CTR_CD)
${condition} AND P400.CTR_CD='${DATA.CTR_CD}'
ORDER BY P400.PROD_REQUEST_NO DESC
`
          //${moment().format('YYYY-MM-DD')}
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
        })();
        break;
      case "checkQLSXPLANSTATUS":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let condition = " WHERE 1=1  ";
          if (DATA.ALLTIME === false) {
            condition += ` AND ZTB_QLSXPLAN.PLAN_DATE BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE}'`;
          }
          if (DATA.G_NAME !== "") {
            condition += ` AND M100.G_NAME LIKE '%${DATA.G_NAME}%'`;
          }
          if (DATA.G_CODE !== "") {
            condition += ` AND M100.G_CODE = '${DATA.G_CODE}'`;
          }
          if (DATA.PLAN_ID !== "") {
            condition += ` AND ZTB_QLSXPLAN.PLAN_ID = '${DATA.PLAN_ID}'`;
          }
          if (DATA.PROD_REQUEST_NO !== "") {
            condition += ` AND ZTB_QLSXPLAN.PROD_REQUEST_NO = '${DATA.PROD_REQUEST_NO}'`;
          }
          if (DATA.FACTORY !== "ALL") {
            condition += ` AND ZTB_QLSXPLAN.PLAN_FACTORY = '${DATA.FACTORY}'`;
          }
          if (DATA.PLAN_EQ !== "ALL") {
            condition += ` AND SUBSTRING(ZTB_QLSXPLAN.PLAN_EQ,1,2)= '${DATA.PLAN_EQ}'`;
          }
          let checkkq = "OK";
          let setpdQuery = `SELECT   ZTB_SX_RESULT.WORK_SHIFT, ZTB_QLSXPLAN.PLAN_QTY, ZTB_QLSXPLAN.KQ_SX_TAM, ZTB_QLSXPLAN.KETQUASX, ZTB_QLSXPLAN.STEP, ZTB_QLSXPLAN.PLAN_FACTORY, ZTB_QLSXPLAN.PLAN_ID, ZTB_QLSXPLAN.PLAN_DATE,  ZTB_QLSXPLAN.PLAN_EQ, M100.G_NAME,M100.G_NAME_KD, OUT_KNIFE_FILM_A.PLAN_ID AS XUATDAO, ZTB_SX_RESULT.SETTING_START_TIME, ZTB_SX_RESULT.MASS_START_TIME, ZTB_SX_RESULT.MASS_END_TIME,O301_A.PLAN_ID AS DKXL, OUT_KHO_SX_A.PLAN_ID_OUTPUT AS XUATLIEU, P501_A.PLAN_ID AS IN_TEM,ZTB_SX_RESULT.SX_RESULT AS CHOTBC
                FROM ZTB_QLSXPLAN
                LEFT JOIN (SELECT DISTINCT PLAN_ID, CTR_CD FROM OUT_KNIFE_FILM) AS OUT_KNIFE_FILM_A  
                ON (ZTB_QLSXPLAN.PLAN_ID  = OUT_KNIFE_FILM_A.PLAN_ID AND ZTB_QLSXPLAN.CTR_CD = OUT_KNIFE_FILM_A.CTR_CD)
                LEFT JOIN  ZTB_SX_RESULT ON( ZTB_SX_RESULT.PLAN_ID = ZTB_QLSXPLAN.PLAN_ID AND ZTB_SX_RESULT.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
                LEFT JOIN (SELECT DISTINCT PLAN_ID_OUTPUT, CTR_CD FROM OUT_KHO_SX) AS OUT_KHO_SX_A 
                ON (ZTB_QLSXPLAN.PLAN_ID = OUT_KHO_SX_A.PLAN_ID_OUTPUT AND ZTB_QLSXPLAN.CTR_CD = OUT_KHO_SX_A.CTR_CD)
                LEFT JOIN M100 ON (M100.G_CODE = ZTB_QLSXPLAN.G_CODE AND M100.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
                LEFT JOIN (SELECT DISTINCT PLAN_ID, CTR_CD FROM O301 WHERE INS_DATE > '2022-11-21') AS O301_A ON (O301_A.PLAN_ID = ZTB_QLSXPLAN.PLAN_ID AND O301_A.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
                LEFT JOIN (SELECT DISTINCT PLAN_ID, CTR_CD FROM P501 WHERE INS_DATE > '2022-11-21') AS P501_A  ON (P501_A.PLAN_ID = ZTB_QLSXPLAN.PLAN_ID AND P501_A.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
                    ${condition} AND ZTB_QLSXPLAN.CTR_CD='${DATA.CTR_CD}'
                    ORDER BY ZTB_QLSXPLAN.PLAN_DATE DESC, ZTB_QLSXPLAN.PLAN_ID DESC`;
          //${moment().format('YYYY-MM-DD')}
          ///console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
        })();
        break;
      case "updateDKXLPLAN":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `UPDATE ZTB_QLSXPLAN SET DKXL='V' WHERE CTR_CD='${DATA.CTR_CD}' AND PLAN_ID='${DATA.PLAN_ID}'`;
          //${moment().format('YYYY-MM-DD')}
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
        })();
        break;
      case "checkWebVer":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `SELECT VERWEB, VERMOBILE FROM ZBTVERTABLE`;
          //${moment().format('YYYY-MM-DD')}
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
        })();
        break;
      case "getP4002":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `SELECT * FROM P400 WHERE CTR_CD='${DATA.CTR_CD}' AND PROD_REQUEST_NO='${DATA.PROD_REQUEST_NO}'`;
          //${moment().format('YYYY-MM-DD')}
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
        })();
        break;
      case "insert_OUT_KNIFE_FILM":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `INSERT INTO OUT_KNIFE_FILM (CTR_CD, CA_LAM_VIEC, PLAN_ID, KNIFE_FILM_NO, QTY_KNIFE_FILM, CAVITY, PD, EQ_THUC_TE, EMPL_NO, F_WIDTH, F_LENGTH, INS_DATE, INS_EMPL) VALUES ('${DATA.CTR_CD}','${DATA.CA_LAM_VIEC}','${DATA.PLAN_ID}','${DATA.KNIFE_FILM_NO}', 1,1,1, '${DATA.EQ_THUC_TE}','${DATA.EMPL_NO}',0,0,GETDATE(),'${DATA.EMPL_NO}')`;
          let updateVQLSXPLAN = `UPDATE ZTB_QLSXPLAN SET XUATDAOFILM ='V' WHERE CTR_CD='${DATA.CTR_CD}' AND PLAN_ID='${DATA.PLAN_ID}'`;
          //${moment().format('YYYY-MM-DD')}
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          checkkq = await queryDB(updateVQLSXPLAN);
          res.send(checkkq);
        })();
        break;
      case "check_PLAN_ID_OUT_KNIFE_FILM":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = ` SELECT * FROM OUT_KNIFE_FILM WHERE CTR_CD='${DATA.CTR_CD}' AND PLAN_ID='${DATA.PLAN_ID}'`;
          //${moment().format('YYYY-MM-DD')}
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
        })();
        break;
      case "check_PLAN_ID_KHO_AO":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = ` SELECT * FROM OUT_KHO_SX WHERE CTR_CD='${DATA.CTR_CD}' AND PLAN_ID_OUTPUT='${DATA.PLAN_ID}'`;
          //${moment().format('YYYY-MM-DD')}
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
        })();
        break;
      case "checkProd_request_no_Exist_O302":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = ` SELECT TOP 1 * FROM P500 WHERE CTR_CD='${DATA.CTR_CD}' AND PROD_REQUEST_NO='${DATA.PROD_REQUEST_NO}' AND PLAN_ID is null`;
          //${moment().format('YYYY-MM-DD')}
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
        })();
        break;
      case "updateXUATLIEUCHINH_PLAN":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = ` UPDATE ZTB_QLSXPLAN SET MAIN_MATERIAL='V' WHERE CTR_CD='${DATA.CTR_CD}' AND PLAN_ID='${DATA.PLAN_ID}'`;
          //${moment().format('YYYY-MM-DD')}
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
        })();
        break;
      case "update_XUAT_DAO_FILM_PLAN":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = ` UPDATE ZTB_QLSXPLAN SET XUATDAOFILM='V' WHERE CTR_CD='${DATA.CTR_CD}' AND PLAN_ID='${DATA.PLAN_ID}'`;
          //${moment().format('YYYY-MM-DD')}
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
        })();
        break;
      case "getIns_Status":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = ` SELECT ZTB_INS_STATUS.KHUVUC, ZTB_INS_STATUS.FACTORY,ZTB_INS_STATUS.EQ_NAME,ZTB_INS_STATUS.EMPL_COUNT,ZTB_INS_STATUS.EQ_STATUS,ZTB_INS_STATUS.CURR_PLAN_ID,ZTB_INS_STATUS.CURR_G_CODE,ZTB_INS_STATUS.REMARK,ZTB_INS_STATUS.INS_EMPL,ZTB_INS_STATUS.INS_DATE,ZTB_INS_STATUS.UPD_EMPL,ZTB_INS_STATUS.UPD_DATE, M100.G_NAME_KD, M100.G_NAME FROM ZTB_INS_STATUS LEFT JOIN M100 ON (M100.G_CODE = ZTB_INS_STATUS.CURR_G_CODE AND M100.CTR_CD = ZTB_INS_STATUS.CTR_CD) WHERE ZTB_INS_STATUS.CTR_CD='${DATA.CTR_CD}' ORDER BY ZTB_INS_STATUS.EQ_NAME ASC`;
          //${moment().format('YYYY-MM-DD')}
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
        })();
        break;
      case "check_lieuql_sx_m140":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `select top 1 * from M140 WHERE CTR_CD='${DATA.CTR_CD}' AND G_CODE = '${DATA.G_CODE}' AND LIEUQL_SX =1`;
          //${moment().format('YYYY-MM-DD')}
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
        })();
        break;
      case "check_m_code_m140":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `select * from M140 WHERE CTR_CD='${DATA.CTR_CD}' AND G_CODE = '${DATA.G_CODE}' AND M_CODE ='${DATA.M_CODE}'`;
          //${moment().format('YYYY-MM-DD')}
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
        })();
        break;
      case "check_m_code_m140_main":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `select * from M140 WHERE CTR_CD='${DATA.CTR_CD}' AND G_CODE = '${DATA.G_CODE}' AND M_CODE ='${DATA.M_CODE}' AND LIEUQL_SX=1`;
          //${moment().format('YYYY-MM-DD')}
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
        })();
        break;
      case "checktrungAMZ_Full":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `SELECT VALUE, COUNT(*) as COUNT
          FROM (
              SELECT DATA_1 as VALUE FROM AMAZONE_DATA WHERE CTR_CD='${DATA.CTR_CD}'
              UNION ALL
              SELECT DATA_2 FROM AMAZONE_DATA WHERE CTR_CD='${DATA.CTR_CD}'
          ) combinedData
          GROUP BY value
          HAVING COUNT(*) > 1;`;
          //${moment().format('YYYY-MM-DD')}
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
        })();
        break;
      case "traShortageKD": //chua update CTR_CD
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = " WHERE 1=1  ";
          if (DATA.ALLTIME === false) {
            condition += ` AND ZTB_SHORTAGE_LIST.PLAN_DATE BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE}'`;
          }
          if (DATA.G_NAME !== "") {
            condition += ` AND M100.G_NAME LIKE '%${DATA.G_NAME}%'`;
          }
          if (DATA.G_CODE !== "") {
            condition += ` AND M100.G_CODE = '${DATA.G_CODE}'`;
          }
          if (DATA.ST_ID !== "") {
            condition += ` AND ZTB_SHORTAGE_LIST.ST_ID = '${DATA.ST_ID}'`;
          }
          if (DATA.CUST_NAME !== "") {
            condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME}%'`;
          }
          let setpdQuery = `SELECT M100.G_NAME, ZTB_SHORTAGE_LIST.G_CODE,  ZTB_SHORTAGE_LIST.ST_ID,ZTB_SHORTAGE_LIST.PLAN_DATE, M110.CUST_NAME_KD, PO_TON.PO_BALANCE, TONKHOFULL.TON_TP, TONKHOFULL.BTP, TONKHOFULL.TONG_TON_KIEM, ZTB_SHORTAGE_LIST.D1_9H, ZTB_SHORTAGE_LIST.D1_13H, ZTB_SHORTAGE_LIST.D1_19H, ZTB_SHORTAGE_LIST.D1_21H, ZTB_SHORTAGE_LIST.D1_23H, ZTB_SHORTAGE_LIST.D2_9H, ZTB_SHORTAGE_LIST.D2_13H, ZTB_SHORTAGE_LIST.D2_21H, ZTB_SHORTAGE_LIST.D3_SANG, ZTB_SHORTAGE_LIST.D3_CHIEU, ZTB_SHORTAGE_LIST.D4_SANG, ZTB_SHORTAGE_LIST.D4_CHIEU, (ZTB_SHORTAGE_LIST.D1_9H+ ZTB_SHORTAGE_LIST.D1_13H+ ZTB_SHORTAGE_LIST.D1_19H+ ZTB_SHORTAGE_LIST.D1_21H+ ZTB_SHORTAGE_LIST.D1_23H) AS TODAY_TOTAL, (TONKHOFULL.TON_TP - (ZTB_SHORTAGE_LIST.D1_9H+ ZTB_SHORTAGE_LIST.D1_13H+ ZTB_SHORTAGE_LIST.D1_19H+ ZTB_SHORTAGE_LIST.D1_21H+ ZTB_SHORTAGE_LIST.D1_23H)) AS TODAY_THIEU, CASE WHEN M100.UPH1 > M100.UPH2 THEN M100.UPH2 ELSE M100.UPH1 END AS UPH, ZTB_SHORTAGE_LIST.PRIORITY FROM ZTB_SHORTAGE_LIST LEFT JOIN M100 ON (M100.G_CODE = ZTB_SHORTAGE_LIST.G_CODE) LEFT JOIN M110 ON (M110.CUST_CD = ZTB_SHORTAGE_LIST.CUST_CD) LEFT JOIN M010 ON (M010.EMPL_NO = ZTB_SHORTAGE_LIST.EMPL_NO) LEFT JOIN (SELECT AA.G_CODE, (SUM(ZTBPOTable.PO_QTY)-SUM(AA.TotalDelivered)) As PO_BALANCE FROM (SELECT ZTBPOTable.EMPL_NO, ZTBPOTable.CUST_CD, ZTBPOTable.G_CODE, ZTBPOTable.PO_NO, isnull(SUM(ZTBDelivery.DELIVERY_QTY),0) AS TotalDelivered FROM ZTBPOTable LEFT JOIN ZTBDelivery ON (ZTBDelivery.CTR_CD = ZTBPOTable.CTR_CD AND ZTBDelivery.CUST_CD = ZTBPOTable.CUST_CD AND ZTBDelivery.G_CODE = ZTBPOTable.G_CODE AND ZTBDelivery.PO_NO = ZTBPOTable.PO_NO) GROUP BY ZTBPOTable.CTR_CD,ZTBPOTable.EMPL_NO,ZTBPOTable.G_CODE,ZTBPOTable.CUST_CD,ZTBPOTable.PO_NO) AS AA JOIN ZTBPOTable ON ( AA.CUST_CD = ZTBPOTable.CUST_CD AND AA.G_CODE = ZTBPOTable.G_CODE AND AA.PO_NO = ZTBPOTable.PO_NO) GROUP BY AA.G_CODE) AS PO_TON ON(ZTB_SHORTAGE_LIST.G_CODE = PO_TON.G_CODE) LEFT JOIN ( SELECT M100.G_CODE, M100.G_NAME, M100.G_NAME_KD, isnull(TONKIEM.INSPECT_BALANCE_QTY, 0) AS CHO_KIEM, isnull(TONKIEM.WAIT_CS_QTY, 0) AS CHO_CS_CHECK, isnull(TONKIEM.WAIT_SORTING_RMA, 0) CHO_KIEM_RMA, isnull(TONKIEM.TOTAL_WAIT, 0) AS TONG_TON_KIEM, isnull(BTP.BTP_QTY_EA, 0) AS BTP, isnull(THANHPHAM.TONKHO, 0) AS TON_TP, isnull(tbl_Block_table2.Block_Qty, 0) AS BLOCK_QTY, ( isnull(TONKIEM.TOTAL_WAIT, 0) + isnull(BTP.BTP_QTY_EA, 0)+ isnull(THANHPHAM.TONKHO, 0) - isnull(tbl_Block_table2.Block_Qty, 0) ) AS GRAND_TOTAL_STOCK FROM M100 LEFT JOIN ( SELECT Product_MaVach, isnull([IN], 0) AS NHAPKHO, isnull([OUT], 0) AS XUATKHO, ( isnull([IN], 0)- isnull([OUT], 0) ) AS TONKHO FROM ( SELECT Product_Mavach, IO_Type, IO_Qty FROM tbl_InputOutput ) AS SourceTable PIVOT ( SUM(IO_Qty) FOR IO_Type IN ([IN], [OUT]) ) AS PivotTable ) AS THANHPHAM ON ( THANHPHAM.Product_MaVach = M100.G_CODE ) LEFT JOIN ( SELECT ZTB_WAIT_INSPECT.G_CODE, M100.G_NAME, M100.G_NAME_KD, SUM(INSPECT_BALANCE_QTY) AS INSPECT_BALANCE_QTY, SUM(WAIT_CS_QTY) AS WAIT_CS_QTY, SUM(WAIT_SORTING_RMA) AS WAIT_SORTING_RMA, SUM( INSPECT_BALANCE_QTY + WAIT_CS_QTY + WAIT_SORTING_RMA ) AS TOTAL_WAIT FROM ZTB_WAIT_INSPECT JOIN M100 ON ( M100.G_CODE = ZTB_WAIT_INSPECT.G_CODE ) WHERE UPDATE_DATE = CONVERT( date, GETDATE() ) AND CALAMVIEC = 'DEM' GROUP BY ZTB_WAIT_INSPECT.G_CODE, M100.G_NAME, M100.G_NAME_KD ) AS TONKIEM ON ( THANHPHAM.Product_MaVach = TONKIEM.G_CODE ) LEFT JOIN ( SELECT Product_MaVach, SUM(Block_Qty) AS Block_Qty from tbl_Block2 GROUP BY Product_MaVach ) AS tbl_Block_table2 ON ( tbl_Block_table2.Product_MaVach = M100.G_CODE ) LEFT JOIN ( SELECT ZTB_HALF_GOODS.G_CODE, M100.G_NAME, SUM(BTP_QTY_EA) AS BTP_QTY_EA FROM ZTB_HALF_GOODS JOIN M100 ON ( M100.G_CODE = ZTB_HALF_GOODS.G_CODE ) WHERE UPDATE_DATE = CONVERT( date, GETDATE() ) GROUP BY ZTB_HALF_GOODS.G_CODE, M100.G_NAME ) AS BTP ON ( BTP.G_CODE = THANHPHAM.Product_MaVach ) ) AS TONKHOFULL ON ( TONKHOFULL.G_CODE = ZTB_SHORTAGE_LIST.G_CODE ) ${condition} ORDER BY ZTB_SHORTAGE_LIST.ST_ID DESC`;
          //${moment().format('YYYY-MM-DD')}
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
        })();
        break;
      case "tinhhinhchotbaocaosx":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `SELECT ZTB_SX_RESULT.SX_DATE, COUNT(ZTB_SX_RESULT.PLAN_ID) AS TOTAL, COUNT(CASE WHEN ZTB_SX_RESULT.MASS_END_TIME is not null THEN 1 ELSE null END) AS DA_CHOT, COUNT(CASE WHEN ZTB_SX_RESULT.MASS_END_TIME is  null THEN 1 ELSE null END) AS CHUA_CHOT,  COUNT(CASE WHEN ZTB_SX_EFFICIENCY.PLAN_ID is not null THEN 1 ELSE null END) AS DA_NHAP_HIEUSUAT, COUNT(CASE WHEN ZTB_SX_EFFICIENCY.PLAN_ID is  null THEN 1 ELSE null END) AS CHUA_NHAP_HIEUSUAT    FROM ZTB_SX_RESULT LEFT JOIN ZTB_SX_EFFICIENCY ON (ZTB_SX_RESULT.CTR_CD = ZTB_SX_EFFICIENCY.CTR_CD AND ZTB_SX_RESULT.PLAN_ID = ZTB_SX_EFFICIENCY.PLAN_ID AND ZTB_SX_RESULT.WORK_SHIFT = ZTB_SX_EFFICIENCY.WORK_SHIFT) 
                    WHERE ZTB_SX_RESULT.FACTORY='${DATA.FACTORY}' AND ZTB_SX_RESULT.CTR_CD='${DATA.CTR_CD}'
                    GROUP BY ZTB_SX_RESULT.SX_DATE ORDER BY ZTB_SX_RESULT.SX_DATE DESC `;
          //${moment().format('YYYY-MM-DD')}
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
        })();
        break;
      case "checklastfcstweekno":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = ` SELECT TOP 1 * FROM ZTBFCSTTB WHERE CTR_CD='${DATA.CTR_CD}' AND FCSTYEAR = '${DATA.FCSTWEEKNO}' ORDER BY FCSTWEEKNO DESC `;
          //${moment().format('YYYY-MM-DD')}
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "get_material_table":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = ` WHERE 1=1 `;
          if (DATA.M_NAME !== "") {
            condition += ` AND ZTB_MATERIAL_TB.M_NAME LIKE '%${DATA.M_NAME}%'`;
          }
          if (DATA.NGMATERIAL === true) {
            condition += ` AND  (CUST_CD is null OR SSPRICE is null OR CMSPRICE is null OR SLITTING_PRICE is null OR MASTER_WIDTH is null OR ROLL_LENGTH is null)`;
          }
          let setpdQuery = `WITH RankedMaterials AS (
    SELECT
		CTR_CD,
        M_ID,
		DOC_TYPE,
        VER,
        ROW_NUMBER() OVER (PARTITION BY CTR_CD,M_ID,DOC_TYPE ORDER BY VER DESC) AS rn
    FROM
        ZTB_DOC_TB WHERE PUR_APP='Y' AND RND_APP='Y' AND DTC_APP='Y' AND CTR_CD='002'
),
TDS_TB AS
(
SELECT CTR_CD,M_ID,DOC_TYPE,VER FROM RankedMaterials WHERE rn = 1 AND DOC_TYPE='TDS'
),
MSDS_TB AS
(
SELECT CTR_CD,M_ID,DOC_TYPE,VER FROM RankedMaterials WHERE rn = 1 AND DOC_TYPE='MSDS'
),
SGS_TB AS
(
SELECT CTR_CD,M_ID,DOC_TYPE,VER FROM RankedMaterials WHERE rn = 1 AND DOC_TYPE='SGS'
)
SELECT ZTB_MATERIAL_TB.M_ID, ZTB_MATERIAL_TB.M_NAME, ZTB_MATERIAL_TB.DESCR, ZTB_MATERIAL_TB.CUST_CD, M110.CUST_NAME_KD,ZTB_MATERIAL_TB.SSPRICE, ZTB_MATERIAL_TB.CMSPRICE, ZTB_MATERIAL_TB.SLITTING_PRICE ,ZTB_MATERIAL_TB.MASTER_WIDTH, ZTB_MATERIAL_TB.ROLL_LENGTH, ZTB_MATERIAL_TB.FSC, ZTB_MATERIAL_TB.FSC_CODE,ZTB_FSC_TB.FSC_NAME, ZTB_MATERIAL_TB.USE_YN,ZTB_MATERIAL_TB.EXP_DATE,
TDS_TB.VER AS TDS_VER,
SGS_TB.VER AS SGS_VER,
MSDS_TB.VER AS MSDS_VER,
ZTB_MATERIAL_TB.INS_DATE, ZTB_MATERIAL_TB.INS_EMPL, ZTB_MATERIAL_TB.UPD_DATE, ZTB_MATERIAL_TB.UPD_EMPL FROM ZTB_MATERIAL_TB LEFT JOIN M110 ON (M110.CUST_CD = ZTB_MATERIAL_TB.CUST_CD AND M110.CTR_CD = ZTB_MATERIAL_TB.CTR_CD) LEFT JOIN ZTB_FSC_TB ON (ZTB_FSC_TB.FSC_CODE = ZTB_MATERIAL_TB.FSC_CODE AND ZTB_FSC_TB.CTR_CD = ZTB_MATERIAL_TB.CTR_CD) LEFT JOIN TDS_TB ON (ZTB_MATERIAL_TB.M_ID = TDS_TB.M_ID AND ZTB_MATERIAL_TB.CTR_CD = TDS_TB.CTR_CD) LEFT JOIN MSDS_TB ON (ZTB_MATERIAL_TB.M_ID = MSDS_TB.M_ID AND ZTB_MATERIAL_TB.CTR_CD = MSDS_TB.CTR_CD) LEFT JOIN SGS_TB ON (ZTB_MATERIAL_TB.M_ID = SGS_TB.M_ID AND ZTB_MATERIAL_TB.CTR_CD = SGS_TB.CTR_CD) ${condition} AND ZTB_MATERIAL_TB.CTR_CD='${DATA.CTR_CD}'`;
          //${moment().format('YYYY-MM-DD')}
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
        })();
        break;
      case "checkMaterialInfo":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = ` `;
          if (DATA.M_NAME !== "") {
            condition += ` WHERE M_NAME LIKE '%${DATA.M_NAME}%'`;
          }
          let setpdQuery = ` SELECT * FROM ZTB_MATERIAL_TB ${condition} AND CTR_CD='${DATA.CTR_CD}' `;
          //${moment().format('YYYY-MM-DD')}
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
        })();
        break;
      case "update_material_table_from_bom":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = ` INSERT INTO ZTB_MATERIAL_TB  (CTR_CD,M_NAME) SELECT DISTINCT '${DATA.CTR_CD}' AS CTR_CD, ZTB_BOM2.M_NAME FROM ZTB_BOM2 WHERE (ZTB_BOM2.M_NAME not in (SELECT M_NAME FROM  ZTB_MATERIAL_TB) AND ZTB_BOM2.CATEGORY = 1)`;
          //${moment().format('YYYY-MM-DD')}
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
        })();
        break;
      case "update_material_info":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = ` UPDATE ZTB_MATERIAL_TB SET CUST_CD ='${DATA.CUST_CD}', SSPRICE ='${DATA.SSPRICE}',CMSPRICE ='${DATA.CMSPRICE}',SLITTING_PRICE ='${DATA.SLITTING_PRICE}',MASTER_WIDTH ='${DATA.MASTER_WIDTH}',ROLL_LENGTH ='${DATA.ROLL_LENGTH}' WHERE CTR_CD='${DATA.CTR_CD}' AND M_ID=${DATA.M_ID}`;
          //${moment().format('YYYY-MM-DD')}
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
        })();
        break;
      case "load_kehoachchithi":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
                    SELECT ZTB_KHCT_TABLE.KH_ID, ZTB_KHCT_TABLE.KH_FACTORY, ZTB_KHCT_TABLE.KH_DATE, ZTB_KHCT_TABLE.KH_EQ, ZTB_KHCT_TABLE.PROD_REQUEST_NO, ZTB_KHCT_TABLE.SELECTED_PLAN_ID, 
                    M100.G_CODE, 
                    M100.G_NAME, 
                    M100.G_NAME_KD, 
                    P400.PROD_REQUEST_DATE, 
                    P400.PROD_REQUEST_QTY, 
                    isnull(BB.CD1, 0) AS CD1, 
                    isnull(BB.CD2, 0) AS CD2, 
                    CASE WHEN (
                        M100.EQ1 <> 'FR' 
                        AND M100.EQ1 <> 'SR' 
                        AND M100.EQ1 <> 'DC' 
                        AND M100.EQ1 <> 'ED'
                    ) THEN 0 ELSE P400.PROD_REQUEST_QTY - isnull(BB.CD1, 0) END AS TON_CD1, 
                    CASE WHEN (
                        M100.EQ2 <> 'FR' 
                        AND M100.EQ2 <> 'SR' 
                        AND M100.EQ2 <> 'DC' 
                        AND M100.EQ2 <> 'ED'
                    ) THEN 0 ELSE P400.PROD_REQUEST_QTY - isnull(BB.CD2, 0) END AS TON_CD2, 
                    M100.FACTORY, 
                    M100.EQ1, 
                    M100.EQ2, 
                    M100.Setting1, 
                    M100.Setting2, 
                    M100.UPH1, 
                    M100.UPH2, 
                    M100.Step1, 
                    M100.Step2, 
                    M100.LOSS_SX1, 
                    M100.LOSS_SX2, 
                    M100.LOSS_SETTING1, 
                    M100.LOSS_SETTING2, 
                    M100.NOTE,
                        ZTB_QLSXPLAN.XUATDAOFILM, 
                    ZTB_QLSXPLAN.EQ_STATUS, 
                    ZTB_QLSXPLAN.MAIN_MATERIAL, 
                    ZTB_QLSXPLAN.INT_TEM, 
                    ZTB_QLSXPLAN.CHOTBC, 
                    ZTB_QLSXPLAN.DKXL, 
                    ZTB_QLSXPLAN.NEXT_PLAN_ID, 
                    ZTB_QLSXPLAN.KQ_SX_TAM, 
                    ZTB_QLSXPLAN.KETQUASX, 
                    ZTB_QLSXPLAN.PROCESS_NUMBER, 
                    ZTB_QLSXPLAN.PLAN_ORDER, 
                    ZTB_QLSXPLAN.STEP, 
                    ZTB_QLSXPLAN.PLAN_ID, 
                    ZTB_QLSXPLAN.PLAN_DATE, 
                    ZTB_QLSXPLAN.PLAN_QTY, 
                    ZTB_QLSXPLAN.PLAN_EQ, 
                    ZTB_QLSXPLAN.PLAN_FACTORY
                    FROM ZTB_KHCT_TABLE
                    LEFT JOIN ZTB_QLSXPLAN ON (ZTB_QLSXPLAN.PLAN_ID = ZTB_KHCT_TABLE.SELECTED_PLAN_ID AND ZTB_QLSXPLAN.CTR_CD = ZTB_KHCT_TABLE.CTR_CD)
                    LEFT JOIN P400 ON (
                        P400.PROD_REQUEST_NO = ZTB_QLSXPLAN.PROD_REQUEST_NO
                        AND P400.CTR_CD = ZTB_QLSXPLAN.CTR_CD
                    ) 
                    LEFT JOIN M100 ON (P400.G_CODE = M100.G_CODE AND P400.CTR_CD = M100.CTR_CD) 
                    LEFT JOIN (
                        SELECT 
                        PVTB.PROD_REQUEST_NO, 
                        PVTB.[1] AS CD1, 
                        PVTB.[2] AS CD2,
                        PVTB.CTR_CD
                        FROM 
                        (
                            SELECT 
                            PROD_REQUEST_NO, 
                            PROCESS_NUMBER, 
                            SUM(KETQUASX) AS KETQUASX,
                            CTR_CD
                            FROM 
                            ZTB_QLSXPLAN 
                            WHERE 
                            STEP = 0 
                            GROUP BY 
                            PROD_REQUEST_NO, 
                            PROCESS_NUMBER,
                            CTR_CD
                        ) AS PV PIVOT (
                            SUM(PV.KETQUASX) FOR PV.PROCESS_NUMBER IN ([1], [2])
                        ) AS PVTB
                    ) AS BB ON (
                        BB.PROD_REQUEST_NO = ZTB_QLSXPLAN.PROD_REQUEST_NO
                        AND BB.CTR_CD = ZTB_QLSXPLAN.CTR_CD
                    )
                    WHERE ZTB_KHCT_TABLE.CTR_CD='${DATA.CTR_CD}'`;
          //${moment().format('YYYY-MM-DD')}
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
        })();
        break;
      case "check_2_m_code_in_kho_ao":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = ` SELECT PLAN_ID_INPUT, COUNT(DISTINCT M_CODE) AS COUNT_M_CODE FROM IN_KHO_SX WHERE CTR_CD='${DATA.CTR_CD}' AND PLAN_ID_INPUT= '${DATA.PLAN_ID_INPUT}' GROUP BY PLAN_ID_INPUT `;
          //${moment().format('YYYY-MM-DD')}
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
        })();
        break;
      case "check_m_lot_exist_p500":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = ` SELECT TOP 1 * FROM P500 WHERE CTR_CD='${DATA.CTR_CD}' AND M_LOT_NO='${DATA.M_LOT_NO}' AND PLAN_ID ='${DATA.PLAN_ID_INPUT}'`;
          //${moment().format('YYYY-MM-DD')}
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
        })();
        break;
      case "an_lieu_kho_ao":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = ` UPDATE  IN_KHO_SX SET USE_YN='Z' WHERE CTR_CD='${DATA.CTR_CD}' AND IN_KHO_ID = ${DATA.IN_KHO_ID}`;
          //${moment().format('YYYY-MM-DD')}
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
        })();
        break;
      case "delete_in_kho_ao":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = ` DELETE FROM IN_KHO_SX WHERE CTR_CD='${DATA.CTR_CD}' AND IN_KHO_ID = ${DATA.IN_KHO_ID}`;
          //${moment().format('YYYY-MM-DD')}
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
        })();
        break;
      case "delete_out_kho_ao":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = ` DELETE FROM OUT_KHO_SX WHERE CTR_CD='${DATA.CTR_CD}' AND PLAN_ID_INPUT = '${DATA.PLAN_ID_INPUT}' AND M_LOT_NO='${DATA.M_LOT_NO}'`;
          //${moment().format('YYYY-MM-DD')}
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
        })();
        break;
      case "tracsconfirm":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = `WHERE CS_CONFIRM_TABLE.CONFIRM_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE}'`;
          if (DATA.G_NAME !== '') condition += ` AND M100.G_NAME LIKE '%${DATA.G_NAME}%'`
          if (DATA.G_CODE !== '') condition += ` AND M100.G_CODE = '${DATA.G_CODE}'`
          if (DATA.PROD_REQUEST_NO !== '') condition += ` AND CS_CONFIRM_TABLE.PROD_REQUEST_NO = '${DATA.PROD_REQUEST_NO}'`
          if (DATA.CUST_NAME_KD !== '') condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`
          let setpdQuery = ` 
          SELECT CONCAT(datepart(YEAR,CS_CONFIRM_TABLE.CONFIRM_DATE),'_',datepart(ISO_WEEK,DATEADD(day,1,CS_CONFIRM_TABLE.CONFIRM_DATE))) AS YEAR_WEEK,CS_CONFIRM_TABLE.CONFIRM_ID,CS_CONFIRM_TABLE.CONFIRM_DATE,CS_CONFIRM_TABLE.CONTACT_ID,CS_CONFIRM_TABLE.CS_EMPL_NO,M010.EMPL_NAME,CS_CONFIRM_TABLE.G_CODE,M100.G_NAME,M100.G_NAME_KD,CS_CONFIRM_TABLE.PROD_REQUEST_NO,CS_CONFIRM_TABLE.CUST_CD,M110.CUST_NAME_KD,CS_CONFIRM_TABLE.CONTENT,CS_CONFIRM_TABLE.INSPECT_QTY,CS_CONFIRM_TABLE.NG_QTY,CS_CONFIRM_TABLE.REPLACE_RATE,CS_CONFIRM_TABLE.REDUCE_QTY,CS_CONFIRM_TABLE.FACTOR,CS_CONFIRM_TABLE.RESULT,CS_CONFIRM_TABLE.CONFIRM_STATUS,CS_CONFIRM_TABLE.REMARK,CS_CONFIRM_TABLE.INS_DATETIME,CS_CONFIRM_TABLE.PHANLOAI,CS_CONFIRM_TABLE.LINK,M100.PROD_TYPE,M100.PROD_MODEL,M100.PROD_PROJECT,M100.PROD_LAST_PRICE, (M100.PROD_LAST_PRICE*CS_CONFIRM_TABLE.REDUCE_QTY) AS REDUCE_AMOUNT, DS_VN, DS_KR, NG_NHAN, DOI_SACH
          FROM CS_CONFIRM_TABLE
          LEFT JOIN M010 ON (M010.EMPL_NO = CS_CONFIRM_TABLE.CS_EMPL_NO AND M010.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)
          LEFT JOIN M100 ON (M100.G_CODE = CS_CONFIRM_TABLE.G_CODE AND M100.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)
          LEFT JOIN M110 ON (M110.CUST_CD = CS_CONFIRM_TABLE.CUST_CD AND M110.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)
          ${condition} AND CS_CONFIRM_TABLE.CTR_CD='${DATA.CTR_CD}'
          ORDER BY CONFIRM_DATE DESC `;
          //${moment().format('YYYY-MM-DD')}
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
        })();
        break;
      case "tracsrma":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = `WHERE CS_RMA_TABLE.RETURN_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE}'`;
          if (DATA.G_NAME !== '') condition += ` AND M100.G_NAME LIKE '%${DATA.G_NAME}%'`
          if (DATA.G_CODE !== '') condition += ` AND M100.G_CODE = '${DATA.G_CODE}'`
          if (DATA.PROD_REQUEST_NO !== '') condition += ` AND CS_RMA_TABLE.PROD_REQUEST_NO = '${DATA.PROD_REQUEST_NO}'`
          if (DATA.CUST_NAME_KD !== '') condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`
          let setpdQuery = ` 
          SELECT CS_RMA_TABLE.RMA_ID,CS_RMA_TABLE.CONFIRM_ID,M100.G_NAME_KD, CS_RMA_TABLE.RETURN_DATE,CS_RMA_TABLE.PROD_REQUEST_NO,CS_RMA_TABLE.G_CODE,CS_RMA_TABLE.RMA_TYPE,CS_RMA_TABLE.RMA_EMPL_NO,CS_RMA_TABLE.INS_DATETIME,CS_RMA_TABLE.FACTORY,CS_RMA_TABLE.RETURN_QTY,isnull(SORTING_TB.SORTING_OK_QTY,0) AS SORTING_OK_QTY,isnull(CS_RMA_TABLE.RETURN_QTY-SORTING_TB.SORTING_OK_QTY,0) AS SORTING_NG_QTY,isnull(DELIV_TB.RMA_DELIVERY_QTY,0) AS RMA_DELIVERY_QTY,
          M100.PROD_LAST_PRICE, (M100.PROD_LAST_PRICE*CS_RMA_TABLE.RETURN_QTY) AS RETURN_AMOUNT,
          (M100.PROD_LAST_PRICE*isnull(SORTING_TB.SORTING_OK_QTY,0)) AS SORTING_OK_AMOUNT,
          (M100.PROD_LAST_PRICE*isnull(CS_RMA_TABLE.RETURN_QTY-SORTING_TB.SORTING_OK_QTY,0)) AS SORTING_NG_AMOUNT,
          M100.G_NAME,M100.PROD_TYPE,M100.PROD_MODEL,CS_CONFIRM_TABLE.CONFIRM_DATE,CS_CONFIRM_TABLE.CS_EMPL_NO,CS_CONFIRM_TABLE.CONTENT,CS_CONFIRM_TABLE.INSPECT_QTY,CS_CONFIRM_TABLE.NG_QTY,CS_CONFIRM_TABLE.REPLACE_RATE,CS_CONFIRM_TABLE.REDUCE_QTY,CS_CONFIRM_TABLE.FACTOR,CS_CONFIRM_TABLE.RESULT,CS_CONFIRM_TABLE.CONFIRM_STATUS,CS_CONFIRM_TABLE.REMARK,CS_CONFIRM_TABLE.PHANLOAI,CS_CONFIRM_TABLE.LINK,M110.CUST_NAME_KD
          FROM CS_RMA_TABLE
          LEFT JOIN (SELECT RMA_ID, CTR_CD, SUM(SORTING_OK_QTY) AS SORTING_OK_QTY FROM CS_SORTING_TABLE GROUP BY RMA_ID, CTR_CD) AS SORTING_TB ON (CS_RMA_TABLE.RMA_ID=SORTING_TB.RMA_ID AND CS_RMA_TABLE.CTR_CD=SORTING_TB.CTR_CD)
          LEFT JOIN (SELECT RMA_ID, CTR_CD, SUM(RMA_DELIVERY_QTY) AS RMA_DELIVERY_QTY FROM CS_RMA_DELIVERY GROUP BY RMA_ID, CTR_CD) AS DELIV_TB ON (CS_RMA_TABLE.RMA_ID=DELIV_TB.RMA_ID AND CS_RMA_TABLE.CTR_CD=DELIV_TB.CTR_CD)
          LEFT JOIN M100 ON (M100.G_CODE = CS_RMA_TABLE.G_CODE AND M100.CTR_CD = CS_RMA_TABLE.CTR_CD)
          LEFT JOIN CS_CONFIRM_TABLE ON (CS_RMA_TABLE.CONFIRM_ID = CS_CONFIRM_TABLE.CONFIRM_ID AND CS_RMA_TABLE.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)
          LEFT JOIN M110 ON (M110.CUST_CD = CS_CONFIRM_TABLE.CUST_CD AND M110.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)
          ${condition} AND CS_RMA_TABLE.CTR_CD='${DATA.CTR_CD}'
          ORDER BY CS_RMA_TABLE.RMA_ID DESC
           `;
          //${moment().format('YYYY-MM-DD')}
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
        })();
        break;
      case "tracsCNDB":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = `WHERE CS_SPECIAL_APPROVE_TABLE.SA_REQUEST_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE}'`;
          if (DATA.G_NAME !== '') condition += ` AND M100.G_NAME LIKE '%${DATA.G_NAME}%'`
          if (DATA.G_CODE !== '') condition += ` AND M100.G_CODE = '${DATA.G_CODE}'`
          if (DATA.PROD_REQUEST_NO !== '') condition += ` AND CS_SPECIAL_APPROVE_TABLE.PROD_REQUEST_NO = '${DATA.PROD_REQUEST_NO}'`
          if (DATA.CUST_NAME_KD !== '') condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`
          let setpdQuery = ` 
          SELECT CS_SPECIAL_APPROVE_TABLE.SA_ID, CS_SPECIAL_APPROVE_TABLE.SA_REQUEST_DATE, CS_SPECIAL_APPROVE_TABLE.CONTACT_ID, CS_SPECIAL_APPROVE_TABLE.CS_EMPL_NO,CS_SPECIAL_APPROVE_TABLE.G_CODE,M100.G_NAME, M110.CUST_NAME_KD, CS_SPECIAL_APPROVE_TABLE.PROD_REQUEST_NO, CS_SPECIAL_APPROVE_TABLE.REQUEST_DATETIME, CS_SPECIAL_APPROVE_TABLE.CONTENT, CS_SPECIAL_APPROVE_TABLE.SA_QTY, CS_SPECIAL_APPROVE_TABLE.RESULT, CS_SPECIAL_APPROVE_TABLE.SA_STATUS, CS_SPECIAL_APPROVE_TABLE.SA_REMARK, CS_SPECIAL_APPROVE_TABLE.INS_DATETIME, SA_CUST_CD 
          FROM CS_SPECIAL_APPROVE_TABLE
          LEFT JOIN M100 ON (M100.G_CODE = CS_SPECIAL_APPROVE_TABLE.G_CODE AND M100.CTR_CD = CS_SPECIAL_APPROVE_TABLE.CTR_CD)
          LEFT JOIN M110 ON (M110.CUST_CD = CS_SPECIAL_APPROVE_TABLE.SA_CUST_CD AND M110.CTR_CD = CS_SPECIAL_APPROVE_TABLE.CTR_CD)
          ${condition} AND CS_SPECIAL_APPROVE_TABLE.CTR_CD='${DATA.CTR_CD}'
          ORDER BY CS_SPECIAL_APPROVE_TABLE.SA_ID DESC
           `;
          //${moment().format('YYYY-MM-DD')}
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
        })();
        break;
      case "tracsTAXI":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = `WHERE CS_TAXI_TABLE.TAXI_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE}'`;
          if (DATA.CUST_NAME_KD !== '') condition += ` AND M110_A.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`
          let setpdQuery = ` 
          SELECT CS_TAXI_TABLE.TAXI_ID, CS_TAXI_TABLE.CONFIRM_ID, CS_TAXI_TABLE.SA_ID, CS_TAXI_TABLE.CHIEU, CS_TAXI_TABLE.CONG_VIEC, CS_TAXI_TABLE.TAXI_DATE, CS_TAXI_TABLE.TAXI_SHIFT, CS_TAXI_TABLE.CS_EMPL_NO, M110.CUST_NAME_KD AS DIEM_DI, M110_A.CUST_NAME_KD AS DIEM_DEN, CS_TAXI_TABLE.TAXI_AMOUNT, CS_TAXI_TABLE.TRANSPORTATION, CS_TAXI_TABLE.TAXI_REMARK,CS_TAXI_TABLE.INS_DATETIME  FROM CS_TAXI_TABLE
          LEFT JOIN M110 ON M110.CUST_CD = CS_TAXI_TABLE.DEPARTURE AND M110.CTR_CD = CS_TAXI_TABLE.CTR_CD
          LEFT JOIN (SELECT * FROM M110) AS M110_A ON M110_A.CUST_CD = CS_TAXI_TABLE.ARRIVAL AND M110_A.CTR_CD = CS_TAXI_TABLE.CTR_CD
          ${condition} AND CS_TAXI_TABLE.CTR_CD='${DATA.CTR_CD}'
          ORDER BY CS_TAXI_TABLE.TAXI_ID DESC
           `;
          //${moment().format('YYYY-MM-DD')}
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          res.send(checkkq);
        })();
        break;
      case "checkPLAN_ID":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `SELECT ZTB_QLSXPLAN.XUATDAOFILM, ZTB_QLSXPLAN.EQ_STATUS, ZTB_QLSXPLAN.MAIN_MATERIAL, ZTB_QLSXPLAN.INT_TEM, ZTB_QLSXPLAN.CHOTBC, ZTB_QLSXPLAN.DKXL,ZTB_QLSXPLAN.NEXT_PLAN_ID, ZTB_QLSXPLAN.KQ_SX_TAM, ZTB_QLSXPLAN.KETQUASX, ZTB_QLSXPLAN.PROCESS_NUMBER, ZTB_QLSXPLAN.PLAN_ORDER, ZTB_QLSXPLAN.STEP, ZTB_QLSXPLAN.PLAN_ID,ZTB_QLSXPLAN.PLAN_DATE,ZTB_QLSXPLAN.PROD_REQUEST_NO,ZTB_QLSXPLAN.PLAN_QTY,ZTB_QLSXPLAN.PLAN_EQ,ZTB_QLSXPLAN.PLAN_FACTORY,ZTB_QLSXPLAN.PLAN_LEADTIME,ZTB_QLSXPLAN.INS_EMPL,ZTB_QLSXPLAN.INS_DATE,ZTB_QLSXPLAN.UPD_EMPL,ZTB_QLSXPLAN.UPD_DATE, M100.G_CODE, M100.G_NAME, M100.G_NAME_KD, P400.PROD_REQUEST_DATE, P400.PROD_REQUEST_QTY, isnull(BB.CD1,0) AS CD1 ,isnull(BB.CD2,0) AS CD2, CASE WHEN (M100.EQ1 <> 'FR' AND M100.EQ1 <> 'SR' AND  M100.EQ1 <> 'DC' AND M100.EQ1 <> 'ED') THEN 0 ELSE P400.PROD_REQUEST_QTY-isnull(BB.CD1,0) END AS TON_CD1,CASE WHEN (M100.EQ2 <> 'FR' AND M100.EQ2 <> 'SR' AND  M100.EQ2 <> 'DC' AND M100.EQ2 <> 'ED') THEN 0 ELSE P400.PROD_REQUEST_QTY-isnull(BB.CD2,0) END AS TON_CD2, M100.FACTORY, M100.EQ1, M100.EQ2, M100.Setting1, M100.Setting2, M100.UPH1, M100.UPH2, M100.Step1, M100.Step2, M100.LOSS_SX1, M100.LOSS_SX2, M100.LOSS_SETTING1, M100.LOSS_SETTING2, M100.NOTE, M100.FSC, M100.FSC_CODE
                    FROM ZTB_QLSXPLAN JOIN P400 ON (P400.PROD_REQUEST_NO = ZTB_QLSXPLAN.PROD_REQUEST_NO AND P400.CTR_CD = ZTB_QLSXPLAN.CTR_CD) JOIN M100 ON (P400.G_CODE = M100.G_CODE AND P400.CTR_CD = M100.CTR_CD)
                    LEFT JOIN 
                    (
                    SELECT PVTB.PROD_REQUEST_NO, PVTB.[1] AS CD1, PVTB.[2] AS CD2, PVTB.CTR_CD FROM 
                    (
                    SELECT PROD_REQUEST_NO, PROCESS_NUMBER, SUM(KETQUASX) AS KETQUASX, CTR_CD FROM ZTB_QLSXPLAN WHERE STEP =0 GROUP BY PROD_REQUEST_NO, PROCESS_NUMBER, CTR_CD
                    )
                    AS PV
                    PIVOT
                    ( 
                    SUM(PV.KETQUASX) FOR PV.PROCESS_NUMBER IN ([1],[2])
                    ) 
                    AS PVTB
                    ) AS BB ON (BB.PROD_REQUEST_NO = ZTB_QLSXPLAN.PROD_REQUEST_NO AND BB.CTR_CD = ZTB_QLSXPLAN.CTR_CD) 
                    WHERE ZTB_QLSXPLAN.PLAN_ID='${DATA.PLAN_ID}' AND ZTB_QLSXPLAN.CTR_CD='${DATA.CTR_CD}'`;
          //${moment().format('YYYY-MM-DD')}
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "check_xuat_kho_ao_mobile":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `SELECT  OUT_KHO_SX.OUT_KHO_ID,  OUT_KHO_SX.FACTORY, OUT_KHO_SX.PHANLOAI, OUT_KHO_SX.M_CODE, M090.M_NAME, M090.WIDTH_CD, OUT_KHO_SX.M_LOT_NO, OUT_KHO_SX.PLAN_ID_INPUT,OUT_KHO_SX.PLAN_ID_OUTPUT, OUT_KHO_SX.ROLL_QTY, OUT_KHO_SX.OUT_QTY, OUT_KHO_SX.TOTAL_OUT_QTY, OUT_KHO_SX.INS_DATE FROM OUT_KHO_SX LEFT JOIN M090 ON (M090.M_CODE = OUT_KHO_SX.M_CODE AND M090.CTR_CD = OUT_KHO_SX.CTR_CD) WHERE OUT_KHO_SX.PLAN_ID_OUTPUT='${DATA.PLAN_ID}' AND OUT_KHO_SX.M_LOT_NO='${DATA.M_LOT_NO}' AND OUT_KHO_SX.CTR_CD='${DATA.CTR_CD}'`;
          //${moment().format('YYYY-MM-DD')}
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "checkEMPL_NO_mobile":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `SELECT * FROM ZTBEMPLINFO WHERE CTR_CD='${DATA.CTR_CD}' AND EMPL_NO='${DATA.EMPL_NO}'`;
          //${moment().format('YYYY-MM-DD')}
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "checkM_LOT_NO_p500_mobile":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `SELECT * FROM P500 WHERE CTR_CD='${DATA.CTR_CD}' AND PLAN_ID='${DATA.PLAN_ID}' AND M_LOT_NO='${DATA.M_LOT_NO}'`;
          //${moment().format('YYYY-MM-DD')}
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "insert_p500_mobile":
        (async () => {
          //console.log(DATA);
          let checkkq = "OK";
          let setpdQuery = `INSERT INTO P500 (CTR_CD, PROCESS_IN_DATE, PROCESS_IN_NO, PROCESS_IN_SEQ, M_LOT_IN_SEQ, PROD_REQUEST_DATE, PROD_REQUEST_NO, G_CODE, M_CODE, M_LOT_NO, EMPL_NO, EQUIPMENT_CD, SCAN_RESULT, INS_DATE, INS_EMPL, UPD_DATE, UPD_EMPL, FACTORY, PLAN_ID, INPUT_QTY, IN_KHO_ID) VALUES ('${DATA.CTR_CD}','${DATA.in_date
            }','${DATA.next_process_in_no}','${DATA.PROD_REQUEST_NO.substring(
              4,
              7
            )}','${DATA.PROD_REQUEST_DATE.substring(5, 8)}','${DATA.PROD_REQUEST_DATE
            }','${DATA.PROD_REQUEST_NO}','${DATA.G_CODE}', '${DATA.M_CODE}','${DATA.M_LOT_NO
            }','${DATA.EMPL_NO}','${DATA.phanloai}','OK',GETDATE(),'${DATA.EMPL_NO
            }',GETDATE(),'${DATA.EMPL_NO}','NM1','${DATA.PLAN_ID}', '${DATA.INPUT_QTY
            }','${DATA.IN_KHO_ID}')`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          console.log(checkkq);
          res.send(checkkq);
          //res.send({tk_status:'OK',data:req.payload_data});
        })();
        break;
      case "checkOutKhoSX_mobile":
        (async () => {
          //console.log(DATA);
          let checkkq = "OK";
          let setpdQuery = `SELECT OUT_KHO_SX.TOTAL_OUT_QTY, OUT_KHO_SX.PLAN_ID_INPUT, IN_KHO_SX.IN_KHO_ID  FROM OUT_KHO_SX LEFT JOIN IN_KHO_SX ON  (IN_KHO_SX.PLAN_ID_INPUT = OUT_KHO_SX.PLAN_ID_INPUT AND IN_KHO_SX.M_CODE = OUT_KHO_SX.M_CODE AND IN_KHO_SX.M_LOT_NO = OUT_KHO_SX.M_LOT_NO AND IN_KHO_SX.TOTAL_IN_QTY = OUT_KHO_SX.TOTAL_OUT_QTY AND IN_KHO_SX.CTR_CD = OUT_KHO_SX.CTR_CD)  WHERE OUT_KHO_SX.CTR_CD='${DATA.CTR_CD}' AND PLAN_ID_OUTPUT='${DATA.PLAN_ID_OUTPUT}' AND OUT_KHO_SX.M_CODE='${DATA.M_CODE}' AND OUT_KHO_SX.M_LOT_NO='${DATA.M_LOT_NO}'`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          console.log(checkkq);
          res.send(checkkq);
          //res.send({tk_status:'OK',data:req.payload_data});
        })();
        break;
      case "setUSE_YN_KHO_AO_INPUT_mobile":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `UPDATE IN_KHO_SX SET PLAN_ID_SUDUNG='${DATA.PLAN_ID_SUDUNG}', REMARK='X_MB', USE_YN ='${DATA.USE_YN}', UPD_DATE=GETDATE(), UPD_EMPL='${EMPL_NO}' WHERE CTR_CD='${DATA.CTR_CD}' AND PLAN_ID_INPUT= '${DATA.PLAN_ID_INPUT}' AND M_CODE='${DATA.M_CODE}' AND M_LOT_NO='${DATA.M_LOT_NO}' AND TOTAL_IN_QTY=${DATA.TOTAL_IN_QTY}`;
          //${moment().format('YYYY-MM-DD')}
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "setUSE_YN_KHO_AO_OUTPUT_mobile":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `UPDATE OUT_KHO_SX SET REMARK='X_MB', USE_YN ='${DATA.USE_YN}', UPD_DATE=GETDATE(), UPD_EMPL='${EMPL_NO}' WHERE CTR_CD='${DATA.CTR_CD}' AND PLAN_ID_OUTPUT= '${DATA.PLAN_ID_OUTPUT}' AND M_CODE='${DATA.M_CODE}' AND M_LOT_NO='${DATA.M_LOT_NO}' AND TOTAL_OUT_QTY=${DATA.TOTAL_OUT_QTY}`;
          //${moment().format('YYYY-MM-DD')}
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "checkP500PlanID_mobile":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `SELECT P500.PLAN_ID, M090.M_NAME, M090.WIDTH_CD, P500.M_CODE, P500.M_LOT_NO, isnull(OUT_KHO_SX.TOTAL_OUT_QTY,0) AS TOTAL_OUT_QTY, isnull(P500.REMAIN_QTY,0) AS REMAIN_QTY, P500.EQUIPMENT_CD, P500.INS_DATE 
                    FROM P500 
                    LEFT JOIN M090 ON (M090.M_CODE = P500.M_CODE AND M090.CTR_CD = P500.CTR_CD) 
                    LEFT JOIN OUT_KHO_SX ON (OUT_KHO_SX.PLAN_ID_OUTPUT = P500.PLAN_ID AND OUT_KHO_SX.M_LOT_NO = P500.M_LOT_NO AND OUT_KHO_SX.M_CODE = P500.M_CODE AND OUT_KHO_SX.CTR_CD = P500.CTR_CD) 
                    WHERE P500.PLAN_ID='${DATA.PLAN_ID}' AND P500.CTR_CD='${DATA.CTR_CD}'
                    ORDER BY P500.INS_DATE DESC`;
          //${moment().format('YYYY-MM-DD')}
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "materialLotStatus":
        (async () => {
          ////console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = `  WHERE O302.PLAN_ID is not null AND O302.LIEUQL_SX = 1`;
          if (DATA.ALLTIME === false) {
            condition += ` AND O302.INS_DATE BETWEEN ''${DATA.FROM_DATE}'' AND ''${DATA.TO_DATE} 23:59:59'' `;
          }
          if (DATA.PROD_REQUEST_NO !== "") {
            condition += ` AND ZTB_QLSXPLAN.PROD_REQUEST_NO= ''${DATA.PROD_REQUEST_NO}''`;
          }
          if (DATA.PLAN_ID !== "") {
            condition += ` AND O302.PLAN_ID = ''${DATA.PLAN_ID}''`;
          }
          if (DATA.M_CODE !== "") {
            condition += ` AND O302.M_CODE =''${DATA.M_CODE}''`;
          }
          if (DATA.M_NAME !== "") {
            condition += ` AND M090.M_NAME LIKE ''%${DATA.M_NAME}%''`;
          }
          if (DATA.G_CODE !== "") {
            condition += ` AND M100.G_CODE = ''${DATA.G_CODE}''`;
          }
          if (DATA.G_NAME !== "") {
            condition += ` AND M100.G_NAME LIKE ''%${DATA.G_NAME}%''`;
          }
          if (DATA.FACTORY !== "ALL") {
            condition += ` AND O302.FACTORY = ''${DATA.FACTORY}''`;
          }
          if (DATA.PLAN_EQ !== "ALL") {
            condition += ` AND SUBSTRING(ZTB_QLSXPLAN.PLAN_EQ,1,2) = ''${DATA.PLAN_EQ}''`;
          }
          if (DATA.CUST_NAME_KD !== "") {
            condition += ` AND M110.CUST_NAME_KD LIKE ''%${DATA.CUST_NAME_KD}%''`
          }
          let setpdQuery = `
          DECLARE @eq_string varchar(max) = '';
          DECLARE @eq_temp_string varchar(max) = '';
          DECLARE @vao_eq varchar(max) = '';
          DECLARE @temp_qty varchar(max) = '';
          DECLARE @temp_met varchar(max) = '';
          DECLARE @tempTable TABLE (ResultValue nvarchar(max)) DECLARE @i INT = 0;
          DECLARE @eq_series varchar(2)
          INSERT INTO
            @tempTable
          SELECT
            DISTINCT SUBSTRING(EQ_NAME, 1, 2) AS EQ_SERIES
          FROM
            ZTB_SX_EQ_STATUS DECLARE ghepcursor CURSOR FOR (
              SELECT
                *
              FROM
                @tempTable
            ) OPEN ghepcursor;
          FETCH NEXT
          FROM
            ghepcursor INTO @eq_series;
          WHILE @@FETCH_STATUS = 0 BEGIN
          SET
            @eq_temp_string = @eq_temp_string + 'isnull([' + @eq_series + '],0) AS ' + @eq_series + '_EA, '
          SET
            @eq_string = @eq_string + '[' + @eq_series + '],'
          SET
            @vao_eq = @vao_eq + 'CASE WHEN P500_EQ.' + @eq_series + ' is not null THEN ''Y'' ELSE ''N'' END AS VAO_' + @eq_series + ', '
          SET
            @temp_qty = @temp_qty + 'P501_QTY.' + @eq_series + '_EA, '
          SET
            @temp_met = @temp_met + 'P501_QTY.' + @eq_series + '_EA * M100.PD/(M100.G_C * M100.G_C_R)/1000 AS ' + @eq_series + '_RESULT, ' FETCH NEXT
          FROM
            ghepcursor INTO @eq_series;
          END CLOSE ghepcursor;
          DEALLOCATE ghepcursor;
          SET
            @temp_met = SUBSTRING(@temp_met, 1, LEN(@temp_met) -1)
          SET
            @temp_qty = SUBSTRING(@temp_qty, 1, LEN(@temp_qty) -1)
          SET
            @vao_eq = SUBSTRING(@vao_eq, 1, LEN(@vao_eq) -1)
          SET
            @eq_string = SUBSTRING(@eq_string, 1, LEN(@eq_string) -1)
          SET
            @eq_temp_string = SUBSTRING(@eq_temp_string, 1, LEN(@eq_temp_string) -1) PRINT(@eq_string) PRINT(@eq_temp_string) PRINT(@vao_eq) PRINT(@temp_qty) PRINT(@temp_met) DECLARE @query varchar(max) DECLARE @query2 varchar(max)
          SELECT
            @query = 'SELECT PVTB.M_LOT_NO, ' + @eq_string + ' FROM 
          (
          SELECT DISTINCT M_LOT_NO, SUBSTRING(EQUIPMENT_CD,1,2) AS EQ_SERIES, CTR_CD FROM P500 
          JOIN (SELECT DISTINCT SUBSTRING(EQ_NAME,1,2) AS EQ_SERIES from ZTB_SX_EQ_STATUS) AS EQ_TABLE ON (EQ_TABLE.EQ_SERIES =  SUBSTRING(P500.EQUIPMENT_CD,1,2)) WHERE P500.PLAN_ID is not null AND P500.CTR_CD=''${DATA.CTR_CD}''
          ) AS BANGNGUON
          PIVOT
          (
            MIN(BANGNGUON.EQ_SERIES)
            FOR BANGNGUON.EQ_SERIES IN (' + @eq_string + ')
          ) AS PVTB
          SELECT PVTB.M_LOT_NO, ' + @eq_temp_string + '  FROM 
          (
          SELECT  P501.M_LOT_NO, SUBSTRING(P500.EQUIPMENT_CD,1,2) AS EQ_SERIES,SUM(isnull(P501.TEMP_QTY,0)) AS TEMP_QTY, P501.CTR_CD FROM P501 LEFT JOIN P500 ON (P500.PROCESS_IN_DATE = P501.PROCESS_IN_DATE AND P500.PROCESS_IN_NO = P501.PROCESS_IN_NO AND P500.PROCESS_IN_SEQ = P501.PROCESS_IN_SEQ AND P500.CTR_CD = P501.CTR_CD) 
          WHERE P501.PLAN_ID is not null AND P501.CTR_CD=''${DATA.CTR_CD}''
          GROUP BY  P501.M_LOT_NO, SUBSTRING(P500.EQUIPMENT_CD,1,2), P501.CTR_CD
          ) AS BANGNGUON
          PIVOT
          (
            SUM(BANGNGUON.TEMP_QTY)
            FOR BANGNGUON.EQ_SERIES IN (' + @eq_string + ')
          ) AS PVTB
          '
          SELECT
            @query2 = '
          SELECT O302.INS_DATE, O302.M_LOT_NO, O302.M_CODE, M090.M_NAME, M090.WIDTH_CD, CASE WHEN O302.M_LOT_NO is not null THEN ''Y'' ELSE ''N'' END AS XUAT_KHO, 
                              ' + @vao_eq + ', 
                              CASE WHEN RETURN_LIEU.M_LOT_NO is not null AND  GIAONHAN.M_LOT_NO is not null THEN ''R''  WHEN RETURN_LIEU.M_LOT_NO is  null AND  GIAONHAN.M_LOT_NO is not null THEN ''Y''  ELSE ''N'' END AS CONFIRM_GIAONHAN,
                              CASE WHEN ZTBINSPECTINPUTTB_A.M_LOT_NO is not null THEN ''Y'' ELSE ''N'' END AS VAO_KIEM,
                              CASE WHEN NHATKY.M_LOT_NO is not null THEN ''Y'' ELSE ''N'' END AS NHATKY_KT, 
                              CASE WHEN ZTBINSPECTOUTPUTTB_A.M_LOT_NO is not null THEN ''Y'' ELSE ''N'' END AS RA_KIEM,
                              O302.ROLL_QTY, O302.OUT_CFM_QTY, (O302.ROLL_QTY * O302.OUT_CFM_QTY) AS TOTAL_OUT_QTY, 
                              ' + @temp_met + ',
                              isnull(NHATKY.INSPECT_TOTAL_QTY,0)* M100.PD/(M100.G_C * M100.G_C_R)/1000 AS INSPECT_TOTAL_QTY, 
                              isnull(NHATKY.INSPECT_OK_QTY,0)* M100.PD/(M100.G_C * M100.G_C_R)/1000 AS INSPECT_OK_QTY,
                              isnull(ZTBINSPECTOUTPUTTB_A.INS_OUTPUT_EA,0)* M100.PD/(M100.G_C * M100.G_C_R)/1000 AS INS_OUT, 
                              M100.PD, M100.G_C * M100.G_C_R AS CAVITY, 
                              (O302.ROLL_QTY * O302.OUT_CFM_QTY)/ M100.PD * (M100.G_C * M100.G_C_R)*1000 AS TOTAL_OUT_EA,
                              ' + @temp_qty + ',                  
                    isnull(NHATKY.INSPECT_TOTAL_QTY,0) AS INSPECT_TOTAL_EA, 
                    isnull(NHATKY.INSPECT_OK_QTY,0) AS INSPECT_OK_EA, 
                    isnull(ZTBINSPECTOUTPUTTB_A.INS_OUTPUT_EA,0) AS INS_OUTPUT_EA,
                              1-isnull(NHATKY.INSPECT_OK_QTY,0)* M100.PD/(M100.G_C * M100.G_C_R)/1000 /(O302.ROLL_QTY * O302.OUT_CFM_QTY) AS ROLL_LOSS_KT,
                              1-isnull(ZTBINSPECTOUTPUTTB_A.INS_OUTPUT_EA,0)* M100.PD/(M100.G_C * M100.G_C_R)/1000 /(O302.ROLL_QTY * O302.OUT_CFM_QTY) AS ROLL_LOSS, M100.EQ1, M100.EQ2, M100.EQ3, M100.EQ4,
                    ZTB_QLSXPLAN.PROD_REQUEST_NO, O302.PLAN_ID,ZTB_QLSXPLAN.PLAN_EQ, M100.G_CODE, M100.G_NAME, O302.FACTORY, M110.CUST_NAME_KD           
                               FROM O302 
                              LEFT JOIN (SELECT DISTINCT M_LOT_NO, CTR_CD FROM IN_KHO_SX WHERE PHANLOAI=''N'') AS IN_KHO_SX_A ON (IN_KHO_SX_A.M_LOT_NO = O302.M_LOT_NO AND IN_KHO_SX_A.CTR_CD = O302.CTR_CD)
                              LEFT JOIN (
                    SELECT PVTB.M_LOT_NO, ' + @eq_string + ', PVTB.CTR_CD FROM 
                      (
                      SELECT DISTINCT M_LOT_NO, SUBSTRING(EQUIPMENT_CD,1,2) AS EQ_SERIES, CTR_CD FROM P500 
                      JOIN (SELECT DISTINCT SUBSTRING(EQ_NAME,1,2) AS EQ_SERIES from ZTB_SX_EQ_STATUS) AS EQ_TABLE ON (EQ_TABLE.EQ_SERIES =  SUBSTRING(P500.EQUIPMENT_CD,1,2)) WHERE P500.PLAN_ID is not null
                      ) AS BANGNGUON
                      PIVOT
                      (
                        MIN(BANGNGUON.EQ_SERIES)
                        FOR BANGNGUON.EQ_SERIES IN (' + @eq_string + ')
                      ) AS PVTB
                    ) AS P500_EQ ON (P500_EQ.M_LOT_NO = O302.M_LOT_NO AND P500_EQ.CTR_CD = O302.CTR_CD)
                              LEFT JOIN (SELECT DISTINCT M_LOT_NO, CTR_CD FROM ZTB_GIAONHAN_M_LOT WHERE CONFIRM=''OK'' AND PHANLOAI=''N'' ) AS GIAONHAN ON (O302.M_LOT_NO = GIAONHAN.M_LOT_NO AND O302.CTR_CD = GIAONHAN.CTR_CD)
                              LEFT JOIN (SELECT DISTINCT M_LOT_NO, CTR_CD FROM ZTB_GIAONHAN_M_LOT WHERE CONFIRM=''OK'' AND PHANLOAI=''R'' ) AS RETURN_LIEU ON (O302.M_LOT_NO = RETURN_LIEU.M_LOT_NO AND O302.CTR_CD = RETURN_LIEU.CTR_CD)
                              LEFT JOIN (SELECT DISTINCT P501.M_LOT_NO, P501.CTR_CD FROM ZTBINSPECTINPUTTB LEFT JOIN P501 ON (P501.PROCESS_LOT_NO = ZTBINSPECTINPUTTB.PROCESS_LOT_NO AND P501.CTR_CD = ZTBINSPECTINPUTTB.CTR_CD) WHERE ZTBINSPECTINPUTTB.PLAN_ID is not null) AS ZTBINSPECTINPUTTB_A ON (O302.M_LOT_NO = ZTBINSPECTINPUTTB_A.M_LOT_NO AND O302.CTR_CD = ZTBINSPECTINPUTTB_A.CTR_CD)
                              LEFT JOIN (SELECT  P501.M_LOT_NO, SUM(ZTBINSPECTNGTB.INSPECT_TOTAL_QTY) AS INSPECT_TOTAL_QTY, SUM(ZTBINSPECTNGTB.INSPECT_OK_QTY) AS INSPECT_OK_QTY, P501.CTR_CD  FROM ZTBINSPECTNGTB LEFT JOIN P501 ON (P501.PROCESS_LOT_NO = ZTBINSPECTNGTB.PROCESS_LOT_NO AND P501.CTR_CD = ZTBINSPECTNGTB.CTR_CD) WHERE ZTBINSPECTNGTB.PLAN_ID is not null GROUP BY P501.M_LOT_NO, P501.CTR_CD) AS NHATKY ON(NHATKY.M_LOT_NO = O302.M_LOT_NO AND NHATKY.CTR_CD = O302.CTR_CD)
                              LEFT JOIN (SELECT  P501.M_LOT_NO, SUM(ZTBINSPECTOUTPUTTB.OUTPUT_QTY_EA) AS INS_OUTPUT_EA, P501.CTR_CD FROM ZTBINSPECTOUTPUTTB LEFT JOIN P501 ON (P501.PROCESS_LOT_NO = ZTBINSPECTOUTPUTTB.PROCESS_LOT_NO AND P501.CTR_CD = ZTBINSPECTOUTPUTTB.CTR_CD) WHERE ZTBINSPECTOUTPUTTB.PLAN_ID is not null GROUP BY P501.M_LOT_NO, P501.CTR_CD) AS ZTBINSPECTOUTPUTTB_A ON (O302.M_LOT_NO = ZTBINSPECTOUTPUTTB_A.M_LOT_NO AND O302.CTR_CD = ZTBINSPECTOUTPUTTB_A.CTR_CD)
                              LEFT JOIN 
                    (
                      SELECT PVTB.M_LOT_NO, ' + @eq_temp_string + ', PVTB.CTR_CD  FROM 
                      (
                      SELECT  P501.M_LOT_NO, SUBSTRING(P500.EQUIPMENT_CD,1,2) AS EQ_SERIES,SUM(isnull(P501.TEMP_QTY,0)) AS TEMP_QTY, P501.CTR_CD FROM P501 LEFT JOIN P500 ON (P500.PROCESS_IN_DATE = P501.PROCESS_IN_DATE AND P500.PROCESS_IN_NO = P501.PROCESS_IN_NO AND P500.PROCESS_IN_SEQ = P501.PROCESS_IN_SEQ AND P500.CTR_CD = P501.CTR_CD) 
                      WHERE P501.PLAN_ID is not null
                      GROUP BY  P501.M_LOT_NO, SUBSTRING(P500.EQUIPMENT_CD,1,2), P501.CTR_CD
                      ) AS BANGNGUON
                      PIVOT
                      (
                        SUM(BANGNGUON.TEMP_QTY)
                        FOR BANGNGUON.EQ_SERIES IN (' + @eq_string + ')
                      ) AS PVTB
                    ) AS P501_QTY ON (P501_QTY.M_LOT_NO = O302.M_LOT_NO AND P501_QTY.CTR_CD = O302.CTR_CD)
                              LEFT JOIN M090 ON (M090.M_CODE= O302.M_CODE AND M090.CTR_CD = O302.CTR_CD)
                              LEFT JOIN ZTB_QLSXPLAN ON (O302.PLAN_ID = ZTB_QLSXPLAN.PLAN_ID AND O302.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
                              LEFT JOIN M100 ON (ZTB_QLSXPLAN.G_CODE = M100.G_CODE AND ZTB_QLSXPLAN.CTR_CD = M100.CTR_CD)
                              LEFT JOIN P400 ON (P400.PROD_REQUEST_NO=ZTB_QLSXPLAN.PROD_REQUEST_NO AND P400.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
                              LEFT JOIN M110 ON (M110.CUST_CD = P400.CUST_CD AND M110.CTR_CD = P400.CTR_CD)
                              ${condition} AND O302.CTR_CD=''${DATA.CTR_CD}''
                              ORDER BY O302.INS_DATE DESC '
            EXECUTE(@query2)
                    `;
          //${moment().format('YYYY-MM-DD')}
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "checkSpecDTC":
        (async () => {
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = ` WHERE 1=1 `;
          if (DATA.checkNVL === false) {
            condition += ` AND ZTB_REL_SPECTTABLE.G_CODE='${DATA.G_CODE}' `;
          } else {
            condition += ` AND ZTB_REL_SPECTTABLE.M_CODE='${DATA.M_CODE}' `;
          }
          if (DATA.TEST_NAME !== "0") {
            condition += ` AND ZTB_REL_TESTPOINT.TEST_CODE = ${DATA.TEST_NAME} `;
          }
          let setpdQuery = `SELECT  M110.CUST_NAME_KD, M100.G_CODE, M100.G_NAME,  M090.M_CODE, M090.M_NAME, M090.WIDTH_CD, ZTB_REL_TESTTABLE.TEST_CODE,ZTB_REL_TESTTABLE.TEST_NAME,ZTB_REL_TESTPOINT.POINT_CODE, ZTB_REL_TESTPOINT.POINT_NAME, ZTB_REL_SPECTTABLE.PRI,ZTB_REL_SPECTTABLE.CENTER_VALUE, ZTB_REL_SPECTTABLE.LOWER_TOR, ZTB_REL_SPECTTABLE.UPPER_TOR, ZTB_REL_SPECTTABLE.BARCODE_CONTENT, ZTB_REL_SPECTTABLE.REMARK, M090.TDS, M100.BANVE 
          FROM ZTB_REL_TESTPOINT 
          LEFT JOIN ZTB_REL_TESTTABLE ON (ZTB_REL_TESTTABLE.TEST_CODE = ZTB_REL_TESTPOINT.TEST_CODE AND ZTB_REL_TESTTABLE.CTR_CD = ZTB_REL_TESTPOINT.CTR_CD) 
          LEFT JOIN ZTB_REL_SPECTTABLE ON (ZTB_REL_SPECTTABLE.TEST_CODE = ZTB_REL_TESTPOINT.TEST_CODE AND ZTB_REL_SPECTTABLE.POINT_CODE = ZTB_REL_TESTPOINT.POINT_CODE AND ZTB_REL_SPECTTABLE.CTR_CD = ZTB_REL_TESTPOINT.CTR_CD) 
          LEFT JOIN M100 ON (M100.G_CODE = ZTB_REL_SPECTTABLE.G_CODE AND M100.CTR_CD = ZTB_REL_SPECTTABLE.CTR_CD) 
          LEFT JOIN M090 ON (M090.M_CODE = ZTB_REL_SPECTTABLE.M_CODE AND M090.CTR_CD = ZTB_REL_SPECTTABLE.CTR_CD) 
          LEFT JOIN M110 ON (M110.CUST_CD = M100.CUST_CD AND M110.CTR_CD = M100.CTR_CD) 
          ${condition} AND ZTB_REL_TESTPOINT.CTR_CD='${DATA.CTR_CD}'`;
          //${moment().format('YYYY-MM-DD')}
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "checkSpecDTC2":
        (async () => {
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `SELECT  ZTB_REL_TESTTABLE.TEST_CODE,ZTB_REL_TESTTABLE.TEST_NAME,ZTB_REL_TESTPOINT.POINT_CODE, ZTB_REL_TESTPOINT.POINT_NAME
                    FROM ZTB_REL_TESTPOINT 
                    LEFT JOIN ZTB_REL_TESTTABLE ON (ZTB_REL_TESTTABLE.TEST_CODE = ZTB_REL_TESTPOINT.TEST_CODE AND ZTB_REL_TESTTABLE.CTR_CD = ZTB_REL_TESTPOINT.CTR_CD)
                    WHERE ZTB_REL_TESTPOINT.TEST_CODE = ${DATA.TEST_NAME} AND ZTB_REL_TESTPOINT.CTR_CD='${DATA.CTR_CD}'`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "insertSpecDTC":
        (async () => {
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `INSERT INTO ZTB_REL_SPECTTABLE (CTR_CD,G_CODE,TEST_CODE,POINT_CODE,PRI,CENTER_VALUE,UPPER_TOR,LOWER_TOR,BARCODE_CONTENT,REMARK,INS_EMPL_NO,INS_DATE,M_CODE) VALUES ('${DATA.CTR_CD}','${DATA.G_CODE}', '${DATA.TEST_CODE}', '${DATA.POINT_CODE}', '${DATA.PRI}','${DATA.CENTER_VALUE}','${DATA.UPPER_TOR}','${DATA.LOWER_TOR}','${DATA.BARCODE_CONTENT}','${DATA.REMARK}','${EMPL_NO}',GETDATE(),'${DATA.M_CODE}')`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "updateSpecDTC":
        (async () => {
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `UPDATE ZTB_REL_SPECTTABLE SET  PRI= '${DATA.PRI}', CENTER_VALUE ='${DATA.CENTER_VALUE}',UPPER_TOR = '${DATA.UPPER_TOR}', LOWER_TOR= '${DATA.LOWER_TOR}', BARCODE_CONTENT= '${DATA.BARCODE_CONTENT}',REMARK = N'${DATA.REMARK}',UPD_EMPL_NO='${EMPL_NO}', UPD_DATE= GETDATE(),M_CODE='${DATA.M_CODE}' WHERE CTR_CD='${DATA.CTR_CD}' AND G_CODE= '${DATA.G_CODE}' AND M_CODE='${DATA.M_CODE}' AND TEST_CODE=${DATA.TEST_CODE} AND POINT_CODE=${DATA.POINT_CODE}`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "checkAddedSpec":
        (async () => {
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `SELECT ZTB_REL_TESTTABLE.TEST_CODE, ZTB_REL_TESTTABLE.TEST_NAME, AA.TEST_CODE AS CHECKADDED 
          FROM ZTB_REL_TESTTABLE 
          LEFT JOIN (
            SELECT DISTINCT TEST_CODE, CTR_CD 
            FROM ZTB_REL_SPECTTABLE 
            WHERE M_CODE='${DATA.M_CODE}' AND G_CODE='${DATA.G_CODE}' AND CTR_CD='${DATA.CTR_CD}'
          ) AS AA ON (AA.TEST_CODE = ZTB_REL_TESTTABLE.TEST_CODE AND AA.CTR_CD = ZTB_REL_TESTTABLE.CTR_CD)
          WHERE ZTB_REL_TESTTABLE.CTR_CD='${DATA.CTR_CD}'`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "checkRegisterdDTCTEST":
        (async () => {
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `SELECT ZTB_REL_TESTTABLE.TEST_CODE, ZTB_REL_TESTTABLE.TEST_NAME, AA.TEST_CODE AS CHECKADDED 
          FROM ZTB_REL_TESTTABLE 
          LEFT JOIN (
            SELECT DISTINCT TEST_CODE, CTR_CD 
            FROM ZTB_REL_REQUESTTABLE 
            WHERE DTC_ID=${DATA.DTC_ID} AND CTR_CD='${DATA.CTR_CD}'
          ) AS AA ON (AA.TEST_CODE = ZTB_REL_TESTTABLE.TEST_CODE AND AA.CTR_CD = ZTB_REL_TESTTABLE.CTR_CD)
          WHERE ZTB_REL_TESTTABLE.CTR_CD='${DATA.CTR_CD}'`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "getLastDTCID":
        (async () => {
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = ` SELECT MAX(DTC_ID) AS LAST_DCT_ID FROM CTR_CD='${DATA.CTR_CD}' AND ZTB_REL_REQUESTTABLE`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "loadrecentRegisteredDTCData":
        (async () => {
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `SELECT TOP 200 ZTB_REL_REQUESTTABLE.DTC_ID, (CASE ZTBEMPLINFO.FACTORY_CODE WHEN 1 THEN 'NM1' WHEN 2 THEN 'NM2' END) AS FACTORY, ZTB_REL_REQUESTTABLE.TEST_FINISH_TIME, ZTB_REL_REQUESTTABLE.TEST_EMPL_NO, ZTB_REL_REQUESTTABLE.G_CODE, ZTB_REL_REQUESTTABLE.PROD_REQUEST_NO, M100.G_NAME, ZTB_REL_TESTTABLE.TEST_NAME, ZTB_REL_TESTTYPE.TEST_TYPE_NAME, ZTBWORKPOSITION.WORK_POSITION_NAME, ZTB_REL_REQUESTTABLE.REQUEST_DATETIME, ZTB_REL_REQUESTTABLE.REQUEST_EMPL_NO, M090.M_NAME, M090.WIDTH_CD AS SIZE, ZTB_REL_REQUESTTABLE.REMARK, NHAP_NVL.LOTCMS FROM 
                    ZTB_REL_REQUESTTABLE
                   LEFT JOIN M100 ON(M100.G_CODE = ZTB_REL_REQUESTTABLE.G_CODE AND M100.CTR_CD = ZTB_REL_REQUESTTABLE.CTR_CD) 
                   LEFT JOIN M090 ON (M090.M_CODE = ZTB_REL_REQUESTTABLE.M_CODE AND M090.CTR_CD = ZTB_REL_REQUESTTABLE.CTR_CD)
                   LEFT JOIN ZTB_REL_TESTTABLE ON (ZTB_REL_TESTTABLE.TEST_CODE = ZTB_REL_REQUESTTABLE.TEST_CODE AND ZTB_REL_TESTTABLE.CTR_CD = ZTB_REL_REQUESTTABLE.CTR_CD) 
                   LEFT JOIN ZTB_REL_TESTTYPE ON (ZTB_REL_TESTTYPE.TEST_TYPE_CODE = ZTB_REL_REQUESTTABLE.TEST_TYPE_CODE AND ZTB_REL_TESTTYPE.CTR_CD = ZTB_REL_REQUESTTABLE.CTR_CD) 
                   LEFT JOIN ZTBEMPLINFO ON (ZTBEMPLINFO.EMPL_NO = ZTB_REL_REQUESTTABLE.REQUEST_EMPL_NO AND ZTBEMPLINFO.CTR_CD = ZTB_REL_REQUESTTABLE.CTR_CD) 
                   LEFT JOIN ZTBWORKPOSITION ON (ZTBWORKPOSITION.WORK_POSITION_CODE = ZTBEMPLINFO.WORK_POSITION_CODE AND ZTBWORKPOSITION.CTR_CD = ZTB_REL_REQUESTTABLE.CTR_CD) 
                   LEFT JOIN NHAP_NVL ON(NHAP_NVL.LOTNCC = ZTB_REL_REQUESTTABLE.REMARK AND NHAP_NVL.SIZE = M090.WIDTH_CD AND NHAP_NVL.CTR_CD = ZTB_REL_REQUESTTABLE.CTR_CD) 
                   WHERE ZTB_REL_REQUESTTABLE.CTR_CD='${DATA.CTR_CD}'
                   ORDER BY ZTB_REL_REQUESTTABLE.DTC_ID DESC, ZTB_REL_TESTTABLE.TEST_NAME DESC`;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "checkLabelID2":
        (async () => {
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `SELECT ZTBLOTPRINTHISTORYTB.LABEL_ID2, ZTBLOTPRINTHISTORYTB.G_CODE, M100.G_NAME, P400.PROD_REQUEST_NO, P400.PROD_REQUEST_DATE 
                            FROM ZTBLOTPRINTHISTORYTB 
                            LEFT JOIN P400 ON (P400.PROD_REQUEST_NO = ZTBLOTPRINTHISTORYTB.PROD_REQUEST_NO AND P400.CTR_CD = ZTBLOTPRINTHISTORYTB.CTR_CD) 
                            LEFT JOIN M100 ON (M100.G_CODE = ZTBLOTPRINTHISTORYTB.G_CODE AND M100.CTR_CD = ZTBLOTPRINTHISTORYTB.CTR_CD) 
                            WHERE ZTBLOTPRINTHISTORYTB.CTR_CD='${DATA.CTR_CD}' AND LABEL_ID2='${DATA.LABEL_ID2}'`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "registerDTCTest":
        (async () => {
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = ` INSERT INTO ZTB_REL_REQUESTTABLE (CTR_CD,DTC_ID,TEST_CODE,TEST_TYPE_CODE,REQUEST_DEPT_CODE,PROD_REQUEST_NO,PROD_REQUEST_DATE,REQUEST_EMPL_NO,REQUEST_DATETIME,REMARK,G_CODE,M_CODE,M_LOT_NO) VALUES ('${DATA.CTR_CD}',${DATA.DTC_ID}, ${DATA.TEST_CODE},  ${DATA.TEST_TYPE_CODE},  ${DATA.REQUEST_DEPT_CODE}, '${DATA.PROD_REQUEST_NO}', '${DATA.PROD_REQUEST_DATE}', '${DATA.REQUEST_EMPL_NO}',GETDATE(),'${DATA.REMARK}','${DATA.G_CODE}','${DATA.M_CODE}','${DATA.M_LOT_NO}')`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "insert_dtc_result":
        (async () => {
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = ` INSERT INTO ZTB_REL_RESULT (CTR_CD,DTC_ID,G_CODE,TEST_CODE,POINT_CODE,SAMPLE_NO,RESULT,REMARK,M_CODE) VALUES ('${DATA.CTR_CD}',${DATA.DTC_ID}, '${DATA.G_CODE}',${DATA.TEST_CODE},${DATA.POINT_CODE}, ${DATA.SAMPLE_NO}, ${DATA.RESULT}, '${DATA.REMARK}', '${DATA.M_CODE}')`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "updateDTC_TEST_EMPL":
        (async () => {
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = ` UPDATE ZTB_REL_REQUESTTABLE SET TEST_EMPL_NO='${EMPL_NO}', TEST_FINISH_TIME=GETDATE()  WHERE CTR_CD='${DATA.CTR_CD}' AND DTC_ID=${DATA.DTC_ID} AND TEST_CODE=${DATA.TEST_CODE}`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "traholdingmaterial":
        (async () => {
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = ` WHERE 1=1  `;
          if (DATA.ALLTIME === false) {
            condition += ` AND HOLDING_TB.INS_DATE BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE} 23:59:59'`;
          }
          if (DATA.M_CODE !== "") {
            condition += ` AND HOLDING_TB.M_CODE = '${DATA.M_CODE}' `;
          }
          if (DATA.M_NAME !== "") {
            condition += ` AND M090.M_NAME LIKE '%${DATA.M_NAME}%' `;
          }
          if (DATA.M_LOT_NO !== "") {
            condition += ` AND HOLDING_TB.M_LOT_NO = '${DATA.M_LOT_NO}' `;
          }
          if (DATA.M_STATUS !== "ALL") {
            condition += ` AND HOLDING_TB.QC_PASS = '${DATA.M_STATUS}' `;
          }
          let setpdQuery = ` SELECT HOLDING_TB.HOLD_ID, HOLDING_TB.REASON, HOLDING_TB.ID, HOLDING_TB.HOLDING_MONTH, HOLDING_TB.FACTORY, HOLDING_TB.WAHS_CD, HOLDING_TB.LOC_CD, HOLDING_TB.M_LOT_NO, HOLDING_TB.M_CODE, M090.M_NAME, M090.WIDTH_CD, HOLDING_TB.HOLDING_ROLL_QTY,HOLDING_TB.HOLDING_QTY, ( HOLDING_TB.HOLDING_ROLL_QTY*HOLDING_TB.HOLDING_QTY) AS HOLDING_TOTAL_QTY, HOLDING_TB.HOLDING_IN_DATE, HOLDING_TB.HOLDING_OUT_DATE, HOLDING_TB.VENDOR_LOT, HOLDING_TB.USE_YN, HOLDING_TB.INS_DATE, HOLDING_TB.INS_EMPL, HOLDING_TB.UPD_DATE, HOLDING_TB.UPD_EMPL, HOLDING_TB.QC_PASS, HOLDING_TB.QC_PASS_DATE, HOLDING_TB.QC_PASS_EMPL, HOLDING_TB.NCR_ID, HOLDING_TB.CTR_CD FROM HOLDING_TB 
                    LEFT JOIN M090 ON (M090.M_CODE = HOLDING_TB.M_CODE AND M090.CTR_CD = HOLDING_TB.CTR_CD) ${condition} AND HOLDING_TB.CTR_CD='${DATA.CTR_CD}' ORDER BY HOLDING_TB.INS_DATE DESC`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "updateQCPASS_HOLDING":
        (async () => {
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `UPDATE HOLDING_TB SET QC_PASS='${DATA.VALUE}', QC_PASS_DATE=GETDATE(), QC_PASS_EMPL='${EMPL_NO}' WHERE CTR_CD='${DATA.CTR_CD}' AND HOLDING_TB.ID=${DATA.ID} AND M_LOT_NO='${DATA.M_LOT_NO}'`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "updateQCPASS_FAILING":
        (async () => {
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `UPDATE ZTB_SX_NG_MATERIAL SET QC_PASS='${DATA.VALUE}', QC_PASS_DATE=GETDATE(), QC_PASS_EMPL='${EMPL_NO}' WHERE CTR_CD='${DATA.CTR_CD}' AND ZTB_SX_NG_MATERIAL.PLAN_ID_SUDUNG='${DATA.PLAN_ID_SUDUNG}' AND M_LOT_NO='${DATA.M_LOT_NO}'`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "updateNCRIDForHolding":
        (async () => {
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `UPDATE HOLDING_TB SET NCR_ID=${DATA.NCR_ID} WHERE CTR_CD='${DATA.CTR_CD}' AND HOLD_ID=${DATA.HOLD_ID}`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "updateNCRIDForFailing":
        (async () => {
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `UPDATE ZTB_SX_NG_MATERIAL SET NCR_ID=${DATA.NCR_ID} WHERE CTR_CD='${DATA.CTR_CD}' AND FAIL_ID=${DATA.FAIL_ID}`;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "loadQCFailData":
        (async () => {
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = ` SELECT ZTB_SX_NG_MATERIAL.CTR_CD, ZTB_SX_NG_MATERIAL.FAIL_ID, ZTB_SX_NG_MATERIAL.FACTORY,ZTB_SX_NG_MATERIAL.PLAN_ID_SUDUNG,M100.G_NAME,M100.G_CODE, ZTB_SX_NG_MATERIAL.LIEUQL_SX,ZTB_SX_NG_MATERIAL.M_CODE,ZTB_SX_NG_MATERIAL.M_LOT_NO,ZTB_SX_NG_MATERIAL.VENDOR_LOT, 
                    M090.M_NAME, M090.WIDTH_CD, ZTB_SX_NG_MATERIAL.ROLL_QTY,ZTB_SX_NG_MATERIAL.IN_QTY,ZTB_SX_NG_MATERIAL.TOTAL_IN_QTY,ZTB_SX_NG_MATERIAL.USE_YN,ZTB_SX_NG_MATERIAL.PQC3_ID, ZTBPQC3TABLE.DEFECT_PHENOMENON, ZTB_SX_NG_MATERIAL.DEFECT_PHENOMENON AS SX_DEFECT, ZTB_SX_NG_MATERIAL.OUT_DATE,ZTB_SX_NG_MATERIAL.INS_EMPL,ZTB_SX_NG_MATERIAL.INS_DATE,ZTB_SX_NG_MATERIAL.UPD_EMPL,ZTB_SX_NG_MATERIAL.UPD_DATE,ZTB_SX_NG_MATERIAL.PHANLOAI,ZTB_SX_NG_MATERIAL.QC_PASS,ZTB_SX_NG_MATERIAL.QC_PASS_DATE,ZTB_SX_NG_MATERIAL.QC_PASS_EMPL,ZTB_SX_NG_MATERIAL.REMARK, IN1_EMPL, IN2_EMPL, OUT1_EMPL, OUT2_EMPL, IN_CUST_CD, OUT_CUST_CD, OUT_PLAN_ID, REMARK_OUT, M110.CUST_NAME_KD AS IN_CUST_NAME, M110_A.CUST_NAME_KD AS OUT_CUST_NAME,  ZTB_SX_NG_MATERIAL.NCR_ID
                     FROM ZTB_SX_NG_MATERIAL
                    LEFT JOIN ZTB_QLSXPLAN ON (ZTB_SX_NG_MATERIAL.PLAN_ID_SUDUNG = ZTB_QLSXPLAN.PLAN_ID AND ZTB_SX_NG_MATERIAL.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
                    LEFT JOIN M100 ON (ZTB_QLSXPLAN.G_CODE = M100.G_CODE AND ZTB_QLSXPLAN.CTR_CD = M100.CTR_CD)
                    LEFT JOIN M090 ON (M090.M_CODE = ZTB_SX_NG_MATERIAL.M_CODE AND M090.CTR_CD = ZTB_SX_NG_MATERIAL.CTR_CD)
                    LEFT JOIN M110 ON (M110.CUST_CD = ZTB_SX_NG_MATERIAL.IN_CUST_CD AND M110.CTR_CD = ZTB_SX_NG_MATERIAL.CTR_CD)
                    LEFT JOIN (SELECT CTR_CD, CUST_CD, CUST_NAME_KD FROM M110) AS M110_A ON (M110_A.CUST_CD = ZTB_SX_NG_MATERIAL.OUT_CUST_CD AND M110_A.CTR_CD = ZTB_SX_NG_MATERIAL.CTR_CD)
                    LEFT JOIN ZTBPQC3TABLE ON (ZTB_SX_NG_MATERIAL.PQC3_ID = ZTBPQC3TABLE.PQC3_ID AND ZTB_SX_NG_MATERIAL.CTR_CD = ZTBPQC3TABLE.CTR_CD) 
                    WHERE ZTB_SX_NG_MATERIAL.CTR_CD='${DATA.CTR_CD}'
                    ORDER BY ZTB_SX_NG_MATERIAL.INS_DATE DESC`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "getinputdtcspec":
        (async () => {
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = ` SELECT  ZTB_REL_REQUESTTABLE.DTC_ID, ZTB_REL_REQUESTTABLE.G_CODE,  ZTB_REL_REQUESTTABLE.M_CODE, ZTB_REL_TESTTABLE.TEST_NAME, ZTB_REL_TESTTABLE.TEST_CODE,ZTB_REL_TESTPOINT.POINT_NAME,ZTB_REL_TESTPOINT.POINT_CODE, ZTB_REL_SPECTTABLE.CENTER_VALUE , ZTB_REL_SPECTTABLE.UPPER_TOR,LOWER_TOR ,  null AS RESULT , ZTB_REL_SPECTTABLE.REMARK, ZTB_REL_REQUESTTABLE.CTR_CD  FROM 
                    ZTB_REL_REQUESTTABLE
                   LEFT JOIN M100 ON(M100.G_CODE = ZTB_REL_REQUESTTABLE.G_CODE AND M100.CTR_CD = ZTB_REL_REQUESTTABLE.CTR_CD) 
                   LEFT JOIN M090 ON (M090.M_CODE = ZTB_REL_REQUESTTABLE.M_CODE AND M090.CTR_CD = ZTB_REL_REQUESTTABLE.CTR_CD) 
                   LEFT JOIN ZTB_REL_SPECTTABLE ON (  ZTB_REL_SPECTTABLE.G_CODE = ZTB_REL_REQUESTTABLE.G_CODE AND ZTB_REL_SPECTTABLE.TEST_CODE = ZTB_REL_REQUESTTABLE.TEST_CODE AND ZTB_REL_SPECTTABLE.M_CODE = ZTB_REL_REQUESTTABLE.M_CODE AND ZTB_REL_SPECTTABLE.CTR_CD = ZTB_REL_REQUESTTABLE.CTR_CD)
                   LEFT JOIN ZTB_REL_TESTPOINT ON(ZTB_REL_SPECTTABLE.TEST_CODE = ZTB_REL_TESTPOINT.TEST_CODE AND ZTB_REL_SPECTTABLE.POINT_CODE = ZTB_REL_TESTPOINT.POINT_CODE AND ZTB_REL_TESTPOINT.CTR_CD = ZTB_REL_REQUESTTABLE.CTR_CD)
                   LEFT JOIN ZTB_REL_TESTTABLE ON (ZTB_REL_TESTTABLE.TEST_CODE = ZTB_REL_REQUESTTABLE.TEST_CODE AND ZTB_REL_TESTTABLE.CTR_CD = ZTB_REL_REQUESTTABLE.CTR_CD)  
                   WHERE ZTB_REL_REQUESTTABLE.DTC_ID=${DATA.DTC_ID} AND ZTB_REL_REQUESTTABLE.TEST_CODE=${DATA.TEST_CODE} AND ZTB_REL_REQUESTTABLE.CTR_CD='${DATA.CTR_CD}'
                   ORDER BY ZTB_REL_REQUESTTABLE.DTC_ID DESC, ZTB_REL_TESTTABLE.TEST_NAME DESC`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "loadIQC1table":
        (async () => {
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = `WHERE IQC1_TABLE.INS_DATE BETWEEN ''${DATA.FROM_DATE}'' AND ''${DATA.TO_DATE} 23:59:59'' `;
          if (DATA.M_CODE !== '') condition += ` AND IQC1_TABLE.M_CODE =''${DATA.M_CODE}'' `;
          if (DATA.LOTNCC !== '') condition += ` AND I222.LOTNCC =''${DATA.LOTNCC}'' `;
          if (DATA.M_NAME !== '') condition += ` AND M090.M_NAME LIKE ''%${DATA.M_NAME}%'' `;
          if (DATA.VENDOR_NAME !== '') condition += ` AND M110.CUST_NAME_KD LIKE ''%${DATA.VENDOR_NAME}%'' `;
          let setpdQuery = `
          DECLARE @str1 nvarchar(max), @str2 nvarchar(max), @str3 nvarchar(max)
SET @str1  =(   SELECT '(' + STRING_AGG('[' + TEST_NAME + ']', ',') + ')' AS ConcatenatedString
FROM ZTB_REL_TESTTABLE WHERE CTR_CD='${DATA.CTR_CD}');
SET @str2 =(SELECT STRING_AGG('isnull(PVTB.[' + TEST_NAME + '], -1) AS KQ_' + REPLACE(TEST_NAME, ' ', '_'), ',') AS ConcatenatedString
FROM ZTB_REL_TESTTABLE WHERE CTR_CD='${DATA.CTR_CD}');
SET @str3 = (SELECT STRING_AGG('XX.KQ_' + UPPER(REPLACE(TEST_NAME, ' ', '_')), ', ') AS ConcatenatedString
FROM ZTB_REL_TESTTABLE WHERE CTR_CD='${DATA.CTR_CD}');
declare @query nvarchar(max) 
select 
@query = N'
SELECT  IQC1_TABLE.IQC1_ID, IQC1_TABLE.M_CODE, M090.M_NAME, M090.WIDTH_CD, IQC1_TABLE.M_LOT_NO, IQC1_TABLE.LOT_CMS, I222.LOTNCC, IQC1_TABLE.CUST_CD, M110.CUST_NAME_KD, I222.EXP_DATE, IQC1_TABLE.INPUT_LENGTH, IQC1_TABLE.TOTAL_ROLL, IQC1_TABLE.NQ_CHECK_ROLL, IQC1_TABLE.DTC_ID, IQC1_TABLE.TEST_EMPL, IQC1_TABLE.TOTAL_RESULT,'+@str3 +'
, 
IQC1_TABLE.INS_DATE, IQC1_TABLE.INS_EMPL, IQC1_TABLE.UPD_DATE, IQC1_TABLE.UPD_EMPL, IQC1_TABLE.REMARK FROM IQC1_TABLE 
LEFT JOIN 
          (SELECT PVTB.DTC_ID, '+@str2+'
           FROM 
          (					
SELECT AA.DTC_ID, AA.TEST_NAME,
CASE WHEN SUM(CASE WHEN AA.JUDGEMENT = ''NG'' THEN 1 ELSE 0 END) >0 THEN 0 
ELSE CASE WHEN SUM(CASE WHEN AA.JUDGEMENT = ''PD'' THEN 1 ELSE 0 END) >0 THEN 2  ELSE 1 END END AS FINAL_JUDGEMENT  
FROM
          (SELECT  ZTB_REL_REQUESTTABLE.DTC_ID,  ZTB_REL_TESTTABLE.TEST_NAME, ZTB_REL_TESTPOINT.POINT_CODE, ZTB_REL_SPECTTABLE.CENTER_VALUE , ZTB_REL_SPECTTABLE.UPPER_TOR,ZTB_REL_SPECTTABLE.LOWER_TOR , ZTB_REL_RESULT.RESULT, 
CASE WHEN ZTB_REL_RESULT.RESULT is null THEN ''PD'' ELSE
CASE WHEN (ZTB_REL_SPECTTABLE.CENTER_VALUE + ZTB_REL_SPECTTABLE.UPPER_TOR >= ZTB_REL_RESULT.RESULT AND ZTB_REL_SPECTTABLE.CENTER_VALUE - ZTB_REL_SPECTTABLE.LOWER_TOR <= ZTB_REL_RESULT.RESULT) THEN ''OK'' ELSE ''NG'' END END
AS JUDGEMENT
          FROM  ZTB_REL_REQUESTTABLE
          LEFT JOIN ZTB_REL_RESULT ON (ZTB_REL_REQUESTTABLE.DTC_ID = ZTB_REL_RESULT.DTC_ID AND ZTB_REL_REQUESTTABLE.TEST_CODE = ZTB_REL_RESULT.TEST_CODE AND ZTB_REL_REQUESTTABLE.CTR_CD = ZTB_REL_RESULT.CTR_CD)  
          LEFT JOIN ZTB_REL_SPECTTABLE ON (  ZTB_REL_SPECTTABLE.G_CODE = ZTB_REL_REQUESTTABLE.G_CODE AND ZTB_REL_SPECTTABLE.TEST_CODE = ZTB_REL_REQUESTTABLE.TEST_CODE AND ZTB_REL_SPECTTABLE.POINT_CODE = ZTB_REL_RESULT.POINT_CODE AND ZTB_REL_SPECTTABLE.M_CODE = ZTB_REL_REQUESTTABLE.M_CODE AND ZTB_REL_SPECTTABLE.CTR_CD = ZTB_REL_REQUESTTABLE.CTR_CD)
          LEFT JOIN ZTB_REL_TESTPOINT ON(ZTB_REL_SPECTTABLE.TEST_CODE = ZTB_REL_TESTPOINT.TEST_CODE AND ZTB_REL_SPECTTABLE.POINT_CODE = ZTB_REL_TESTPOINT.POINT_CODE AND ZTB_REL_SPECTTABLE.CTR_CD = ZTB_REL_TESTPOINT.CTR_CD)
          LEFT JOIN ZTB_REL_TESTTABLE ON (ZTB_REL_TESTTABLE.TEST_CODE = ZTB_REL_REQUESTTABLE.TEST_CODE AND ZTB_REL_TESTTABLE.CTR_CD = ZTB_REL_REQUESTTABLE.CTR_CD)
          WHERE ZTB_REL_REQUESTTABLE.CTR_CD=''${DATA.CTR_CD}'') AS AA GROUP BY AA.DTC_ID, AA.TEST_NAME
) AS BANGNGUON
          PIVOT 
          (SUM (BANGNGUON.FINAL_JUDGEMENT) 
              FOR BANGNGUON.TEST_NAME IN '+@str1+'
          )
          AS PVTB) AS XX
          ON (XX.DTC_ID = IQC1_TABLE.DTC_ID)
          LEFT JOIN M110 ON (M110.CUST_CD = IQC1_TABLE.CUST_CD AND M110.CTR_CD = IQC1_TABLE.CTR_CD)
		  LEFT JOIN I222 ON (I222.M_LOT_NO = IQC1_TABLE.M_LOT_NO AND I222.CTR_CD = IQC1_TABLE.CTR_CD)
          LEFT JOIN M090 ON (IQC1_TABLE.M_CODE = M090.M_CODE AND IQC1_TABLE.CTR_CD = M090.CTR_CD)
          ${condition} AND IQC1_TABLE.CTR_CD=''${DATA.CTR_CD}''
'
execute(@query)
          `
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "insertIQC1table":
        (async () => {
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `INSERT INTO IQC1_TABLE (CTR_CD,M_CODE,M_LOT_NO,LOT_CMS,LOT_VENDOR,CUST_CD,EXP_DATE,INPUT_LENGTH,TOTAL_ROLL,NQ_CHECK_ROLL,DTC_ID,TEST_EMPL,INS_DATE,INS_EMPL,REMARK) VALUES ('${DATA.CTR_CD}','${DATA.M_CODE}','${DATA.M_LOT_NO}','${DATA.LOT_CMS}','${DATA.LOT_VENDOR}','${DATA.CUST_CD}','${DATA.EXP_DATE}','${DATA.INPUT_LENGTH}','${DATA.TOTAL_ROLL}','${DATA.NQ_CHECK_ROLL}','${DATA.DTC_ID}','${DATA.TEST_EMPL}',GETDATE(),'${EMPL_NO}','${DATA.REMARK}')`;
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "insertNCRData":
        (async () => {
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `INSERT INTO ZTB_IQC_NCRTB (CTR_CD,FACTORY,NCR_NO,NCR_DATE,RESPONSE_REQ_DATE,CUST_CD,M_NAME,CMS_LOT,VENDOR_LOT,DEFECT_TITLE,DEFECT_DETAIL,REMARK,INS_DATE,INS_EMPL) VALUES ('${DATA.CTR_CD}','${DATA.FACTORY}','${DATA.NCR_NO}','${DATA.NCR_DATE}','${DATA.RESPONSE_REQ_DATE}','${DATA.CUST_CD}','${DATA.M_NAME}','${DATA.CMS_LOT}','${DATA.VENDOR_LOT}',N'${DATA.DEFECT_TITLE}',N'${DATA.DEFECT_DETAIL}',N'${DATA.REMARK}',GETDATE(),'${EMPL_NO}')`;
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "loadNCRData":
        (async () => {
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `SELECT ZTB_IQC_NCRTB.*, M110.CUST_NAME_KD AS VENDOR, I222.M_CODE, M090.WIDTH_CD FROM ZTB_IQC_NCRTB 
            LEFT JOIN M110 ON M110.CUST_CD = ZTB_IQC_NCRTB.CUST_CD AND M110.CTR_CD = ZTB_IQC_NCRTB.CTR_CD
            LEFT JOIN I222 ON I222.M_LOT_NO = ZTB_IQC_NCRTB.CMS_LOT AND I222.CTR_CD = ZTB_IQC_NCRTB.CTR_CD
            LEFT JOIN M090 ON M090.M_CODE = I222.M_CODE AND M090.CTR_CD = I222.CTR_CD
            WHERE ZTB_IQC_NCRTB.CTR_CD='${DATA.CTR_CD}'
            `;
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "update_ncr_image":
        (async () => {
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `UPDATE ZTB_IQC_NCRTB SET DEFECT_IMAGE='${DATA.imagevalue}' WHERE CTR_CD='${DATA.CTR_CD}' AND NCR_ID=${DATA.NCR_ID}
            `;
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "updateQCPASSI222":
        (async () => {
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `UPDATE  I222  SET QC_PASS= '${DATA.VALUE}', QC_PASS_EMPL='${EMPL_NO}', QC_PASS_DATE = GETDATE() WHERE CTR_CD='${DATA.CTR_CD}' AND M_CODE ='${DATA.M_CODE}' AND SUBSTRING(M_LOT_NO,1,6) = '${DATA.LOT_CMS}'`;
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "updateIQC1Table":
        (async () => {
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `UPDATE  IQC1_TABLE  SET TOTAL_RESULT= '${DATA.VALUE}', UPD_EMPL='${EMPL_NO}', UPD_DATE = GETDATE(), REMARK=N'${DATA.REMARK}' WHERE CTR_CD='${DATA.CTR_CD}' AND IQC1_ID=${DATA.IQC1_ID}`;
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "insertFailingData":
        (async () => {
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `INSERT INTO ZTB_SX_NG_MATERIAL (CTR_CD,FACTORY,PLAN_ID_SUDUNG,LIEUQL_SX,M_CODE,M_LOT_NO,VENDOR_LOT,ROLL_QTY,IN_QTY,TOTAL_IN_QTY,USE_YN,PQC3_ID,OUT_DATE,INS_EMPL,INS_DATE,PHANLOAI,QC_PASS,REMARK, IN1_EMPL, IN2_EMPL, IN_CUST_CD, DEFECT_PHENOMENON ) VALUES ('${DATA.CTR_CD}','${DATA.FACTORY}','${DATA.PLAN_ID_SUDUNG}','${DATA.LIEUQL_SX}','${DATA.M_CODE}','${DATA.M_LOT_NO}','${DATA.VENDOR_LOT}','${DATA.ROLL_QTY}','${DATA.IN_QTY}','${DATA.TOTAL_IN_QTY}','Y','${DATA.PQC3_ID}','${DATA.OUT_DATE}','${EMPL_NO}',GETDATE(),'${DATA.PHANLOAI}','N',N'${DATA.REMARK}','${DATA.IN1_EMPL}','${DATA.IN2_EMPL}','${DATA.IN_CUST_CD}',N'${DATA.DEFECT_PHENOMENON}')`;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "updateQCFailTableData":
        (async () => {
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `UPDATE  ZTB_SX_NG_MATERIAL SET OUT1_EMPL='${DATA.OUT1_EMPL}', OUT2_EMPL='${DATA.OUT2_EMPL}', OUT_CUST_CD='${DATA.OUT_CUST_CD}', OUT_PLAN_ID='${DATA.OUT_PLAN_ID}',REMARK_OUT='${DATA.REMARK_OUT}', QC_PASS ='Y', QC_PASS_EMPL ='${EMPL_NO}', QC_PASS_DATE = GETDATE(),USE_YN='N' WHERE CTR_CD='${DATA.CTR_CD}' AND FAIL_ID=${DATA.FAIL_ID}`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "updateMaterialHoldingReason":
        (async () => {
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `UPDATE HOLDING_TB SET REASON = N'${DATA.REASON}' WHERE CTR_CD='${DATA.CTR_CD}' AND HOLD_ID=${DATA.HOLD_ID}`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "checkPROCESS_LOT_NO":
        (async () => {
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `SELECT PLAN_ID FROM P501 WHERE CTR_CD='${DATA.CTR_CD}' AND  PROCESS_LOT_NO='${DATA.PROCESS_LOT_NO}'`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "uploadfile":
        (async () => {
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = ``;
          //console.log(setpdQuery);
          //checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send({ tk_status: "OK", data: [{}] });
          //res.send(checkkq);
        })();
        break;
      case "checkPlanIdP501":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `SELECT TOP 1 * FROM P501 WHERE CTR_CD='${DATA.CTR_CD}' AND PLAN_ID='${DATA.PLAN_ID}'`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "checkProcessLotNo_Prod_Req_No":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `SELECT TOP 1 P500.M_LOT_NO, P501.PROCESS_LOT_NO FROM P501 LEFT JOIN P500 ON (P500.PROCESS_IN_DATE = P501.PROCESS_IN_DATE AND P500.PROCESS_IN_NO = P501.PROCESS_IN_NO AND P500.PROCESS_IN_SEQ = P501.PROCESS_IN_SEQ AND P500.CTR_CD = P501.CTR_CD) WHERE P501.CTR_CD='${DATA.CTR_CD}' AND P500.PROD_REQUEST_NO='${DATA.PROD_REQUEST_NO}'`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "saveLOSS_SETTING_SX":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `UPDATE M100 SET LOSS_ST_SX1 = ${DATA.LOSS_ST_SX1}, LOSS_ST_SX2 = ${DATA.LOSS_ST_SX2},LOSS_ST_SX3 = ${DATA.LOSS_ST_SX3}, LOSS_ST_SX4 = ${DATA.LOSS_ST_SX4}  WHERE CTR_CD='${DATA.CTR_CD}' AND G_CODE='${DATA.G_CODE}'`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "checkFSC_PLAN_ID":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `SELECT ZTB_QLSXPLAN.PLAN_ID, ZTB_QLSXPLAN.G_CODE, isnull(M100.FSC,'N') AS FSC, isnull(M100.FSC_CODE,'01') AS FSC_CODE FROM ZTB_QLSXPLAN JOIN M100 ON (M100.G_CODE = ZTB_QLSXPLAN.G_CODE AND M100.CTR_CD = ZTB_QLSXPLAN.CTR_CD) WHERE ZTB_QLSXPLAN.PLAN_ID='${DATA.PLAN_ID}' AND ZTB_QLSXPLAN.CTR_CD='${DATA.CTR_CD}'`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "checkcustcodeponoPOBALANCE":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `SELECT  ZTBPOTable.PO_QTY, AA.TotalDelivered AS DELIVERED_QTY, (ZTBPOTable.PO_QTY-AA.TotalDelivered) As PO_BALANCE FROM (SELECT ZTBPOTable.CTR_CD, ZTBPOTable.EMPL_NO, ZTBPOTable.CUST_CD, ZTBPOTable.G_CODE, ZTBPOTable.PO_NO, isnull(SUM(ZTBDelivery.DELIVERY_QTY),0) AS TotalDelivered FROM ZTBPOTable  LEFT JOIN ZTBDelivery ON (ZTBDelivery.CTR_CD = ZTBPOTable.CTR_CD AND ZTBDelivery.CUST_CD = ZTBPOTable.CUST_CD AND ZTBDelivery.G_CODE = ZTBPOTable.G_CODE AND ZTBDelivery.PO_NO = ZTBPOTable.PO_NO) GROUP BY ZTBPOTable.CTR_CD,ZTBPOTable.EMPL_NO,ZTBPOTable.G_CODE,ZTBPOTable.CUST_CD,ZTBPOTable.PO_NO) AS AA LEFT JOIN M010 ON (M010.EMPL_NO = AA.EMPL_NO AND M010.CTR_CD = AA.CTR_CD) LEFT JOIN M100 ON (M100.G_CODE = AA.G_CODE AND M100.CTR_CD = AA.CTR_CD) LEFT JOIN ZTBPOTable ON (AA.CUST_CD = ZTBPOTable.CUST_CD AND AA.G_CODE = ZTBPOTable.G_CODE AND AA.PO_NO = ZTBPOTable.PO_NO AND AA.CTR_CD = ZTBPOTable.CTR_CD) JOIN M110 ON (M110.CUST_CD = AA.CUST_CD AND M110.CTR_CD = AA.CTR_CD) WHERE ZTBPOTable.G_CODE='${DATA.G_CODE}' AND ZTBPOTable.CUST_CD='${DATA.CUST_CD}' AND ZTBPOTable.PO_NO='${DATA.PO_NO}' AND ZTBPOTable.CTR_CD='${DATA.CTR_CD}'`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "diemdanhallbp":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `DECLARE @tradate DATE SET @tradate='${moment().format(
            "YYYY-MM-DD"
          )}' SELECT ZTBEMPLINFO.EMPL_NO as id,ZTBEMPLINFO.EMPL_NO,CMS_ID,MIDLAST_NAME,FIRST_NAME,PHONE_NUMBER,SEX_NAME,WORK_STATUS_NAME,FACTORY_NAME,JOB_NAME,WORK_SHIF_NAME,ZTBEMPLINFO.WORK_POSITION_CODE, WORK_POSITION_NAME,SUBDEPTNAME,MAINDEPTNAME,REQUEST_DATE,ZTBOFFREGISTRATIONTB_1.APPLY_DATE,APPROVAL_STATUS,OFF_ID,CA_NGHI,ON_OFF,OVERTIME_INFO,OVERTIME, REASON_NAME, ZTBOFFREGISTRATIONTB_1.REMARK FROM ZTBEMPLINFO LEFT JOIN ZTBSEX ON (ZTBSEX.SEX_CODE = ZTBEMPLINFO.SEX_CODE AND ZTBSEX.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBWORKSTATUS ON(ZTBWORKSTATUS.WORK_STATUS_CODE = ZTBEMPLINFO.WORK_STATUS_CODE AND ZTBWORKSTATUS.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBFACTORY ON (ZTBFACTORY.FACTORY_CODE = ZTBEMPLINFO.FACTORY_CODE AND ZTBFACTORY.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBJOB ON (ZTBJOB.JOB_CODE = ZTBEMPLINFO.JOB_CODE AND ZTBJOB.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBPOSITION ON (ZTBPOSITION.POSITION_CODE = ZTBEMPLINFO.POSITION_CODE AND ZTBPOSITION.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBWORKSHIFT ON (ZTBWORKSHIFT.WORK_SHIFT_CODE = ZTBEMPLINFO.WORK_SHIFT_CODE AND ZTBWORKSHIFT.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBWORKPOSITION ON (ZTBWORKPOSITION.WORK_POSITION_CODE = ZTBEMPLINFO.WORK_POSITION_CODE AND ZTBWORKPOSITION.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBSUBDEPARTMENT ON (ZTBSUBDEPARTMENT.SUBDEPTCODE = ZTBWORKPOSITION.SUBDEPTCODE AND ZTBSUBDEPARTMENT.CTR_CD = ZTBWORKPOSITION.CTR_CD) LEFT JOIN ZTBMAINDEPARMENT ON (ZTBMAINDEPARMENT.MAINDEPTCODE = ZTBSUBDEPARTMENT.MAINDEPTCODE AND ZTBMAINDEPARMENT.CTR_CD = ZTBSUBDEPARTMENT.CTR_CD) LEFT JOIN ( SELECT * FROM ZTBOFFREGISTRATIONTB WHERE ZTBOFFREGISTRATIONTB.APPLY_DATE = @tradate ) AS ZTBOFFREGISTRATIONTB_1 ON (ZTBOFFREGISTRATIONTB_1.EMPL_NO = ZTBEMPLINFO.EMPL_NO AND ZTBOFFREGISTRATIONTB_1.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN (	SELECT * FROM ZTBATTENDANCETB WHERE APPLY_DATE= @tradate ) AS ZTBATTENDANCETB_1 ON (ZTBATTENDANCETB_1.EMPL_NO = ZTBEMPLINFO.EMPL_NO AND ZTBATTENDANCETB_1.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBREASON ON (ZTBREASON.REASON_CODE = ZTBOFFREGISTRATIONTB_1.REASON_CODE AND ZTBREASON.CTR_CD = ZTBOFFREGISTRATIONTB_1.CTR_CD) 
          WHERE ZTBMAINDEPARMENT.MAINDEPTCODE = ${DATA.MAINDEPTCODE
            }  AND JOB_NAME='Worker' AND ZTBEMPLINFO.WORK_STATUS_CODE <> 2 AND ZTBEMPLINFO.WORK_STATUS_CODE <> 0 AND ZTBEMPLINFO.CTR_CD='${DATA.CTR_CD}'`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "machinecounting":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `SELECT SUBSTRING(EQ_NAME,1,2) AS EQ_NAME, COUNT(SUBSTRING(EQ_NAME,1,2)) AS EQ_QTY FROM ZTB_SX_EQ_STATUS WHERE CTR_CD='${DATA.CTR_CD}' AND EQ_ACTIVE ='OK'  GROUP BY SUBSTRING(EQ_NAME,1,2) ORDER BY EQ_NAME DESC`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "machinecounting2":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = ` WHERE EQ_ACTIVE ='OK'  `;
          if (DATA.FACTORY !== "ALL") {
            condition += ` AND FACTORY='${DATA.FACTORY}'`;
          }
          if (DATA.EQ_NAME !== "ALL") {
            condition += ` AND SUBSTRING(EQ_NAME,1,2)='${DATA.EQ_NAME}'`;
          }
          let setpdQuery = `SELECT FACTORY, SUBSTRING(EQ_NAME,1,2) AS EQ_NAME, COUNT(SUBSTRING(EQ_NAME,1,2)) AS EQ_QTY FROM ZTB_SX_EQ_STATUS  ${condition}  AND CTR_CD='${DATA.CTR_CD}' GROUP BY FACTORY, SUBSTRING(EQ_NAME,1,2)  ORDER BY FACTORY ASC, EQ_NAME ASC`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "machineTimeEfficiency":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = `WHERE 
            AA.SX_DATE BETWEEN '${DATA.FROM_DATE}' 
            AND '${DATA.TO_DATE}' AND AA.PLAN_FACTORY is not null `;
          if (DATA.FACTORY !== "ALL")
            condition += ` AND AA.PLAN_FACTORY='${DATA.FACTORY}' `;
          if (DATA.MACHINE !== "ALL")
            condition += ` AND SUBSTRING(AA.PLAN_EQ,1,2)='${DATA.MACHINE}'`;
          let setpdQuery = `SELECT 
            AA.PLAN_FACTORY, 
            SUBSTRING(AA.PLAN_EQ, 0, 3) AS MACHINE, 
            SUM(AA.TOTAL_TIME) AS TOTAL_TIME, 
            SUM(AA.RUN_TIME_SX) AS RUN_TIME_SX, 
            SUM(AA.SETTING_TIME) AS SETTING_TIME, 
            SUM(AA.TOTAL_LOSS_TIME) AS LOSS_TIME, 
            CAST(
              SUM(AA.RUN_TIME_SX) as float
            )/ CAST(
              SUM(AA.TOTAL_TIME) as float
            ) AS HIEU_SUAT_TIME, 
            CAST(
              SUM(AA.SETTING_TIME) as float
            )/ CAST(
              SUM(AA.TOTAL_TIME) as float
            ) AS SETTING_TIME_RATE, 
            CAST(
              SUM(AA.TOTAL_LOSS_TIME) as float
            )/ CAST(
              SUM(AA.TOTAL_TIME) as float
            ) AS LOSS_TIME_RATE 
          FROM 
            (
              SELECT               
                ZTB_QLSXPLAN.PLAN_EQ, 
                ZTB_SX_RESULT.PLAN_ID, 
                ZTB_SX_RESULT.SX_DATE, 
                ZTB_QLSXPLAN.PLAN_FACTORY, 
                M100.G_NAME, 
                ZTB_SX_RESULT.WORK_SHIFT, 
                ZTB_SX_RESULT.INS_EMPL, 
                M010.EMPL_NAME, 
                ZTB_QLSXPLAN.PLAN_QTY, 
                ZTB_QLSXPLAN.KETQUASX,
                DATEDIFF(
                  minute, SETTING_START_TIME, MASS_END_TIME
                ) as TOTAL_TIME, 	 
                (
                  DATEDIFF(
                    minute, MASS_START_TIME, MASS_END_TIME
                  ) 
                ) AS RUN_TIME_SX, 
                DATEDIFF(
                  minute, SETTING_START_TIME, MASS_START_TIME
                ) as SETTING_TIME, 
                (
                  isnull(LAY_DO, 0) + isnull(MAY_HONG, 0) + isnull(DAO_NG, 0) + isnull(CHO_BTP, 0) + isnull(CHO_LIEU, 0) + isnull(HET_LIEU, 0) + isnull(LIEU_NG, 0) + isnull(CAN_HANG, 0) + isnull(HOP_FL, 0) + isnull(CHO_QC, 0) + isnull(CHOT_BAOCAO, 0) + isnull(CHUYEN_CODE, 0) + isnull(KHAC, 0)
                ) AS TOTAL_LOSS_TIME,
                ZTB_SX_RESULT.CTR_CD     
              FROM 
                ZTB_SX_RESULT 
                LEFT JOIN ZTB_SX_EFFICIENCY ON (
                  ZTB_SX_RESULT.PLAN_ID = ZTB_SX_EFFICIENCY.PLAN_ID 
                  AND ZTB_SX_RESULT.WORK_SHIFT = ZTB_SX_EFFICIENCY.WORK_SHIFT
                  AND ZTB_SX_RESULT.CTR_CD = ZTB_SX_EFFICIENCY.CTR_CD
                ) 
                LEFT JOIN M010 ON (
                  M010.EMPL_NO = ZTB_SX_RESULT.INS_EMPL
                  AND M010.CTR_CD = ZTB_SX_RESULT.CTR_CD
                ) 
                LEFT JOIN ZTB_QLSXPLAN ON (
                  ZTB_SX_RESULT.PLAN_ID = ZTB_QLSXPLAN.PLAN_ID
                  AND ZTB_SX_RESULT.CTR_CD = ZTB_QLSXPLAN.CTR_CD
                ) 
                LEFT JOIN M100 ON (
                  M100.G_CODE = ZTB_QLSXPLAN.G_CODE
                  AND M100.CTR_CD = ZTB_QLSXPLAN.CTR_CD
                ) 
              LEFT JOIN P400 ON (
                ZTB_QLSXPLAN.PROD_REQUEST_NO = P400.PROD_REQUEST_NO
                AND ZTB_QLSXPLAN.CTR_CD = P400.CTR_CD
              )
              WHERE 
                MASS_END_TIME is not null AND ((ZTB_QLSXPLAN.PROCESS_NUMBER =1  AND M100.UPH1<>0 AND M100.UPH1 is not null) OR (ZTB_QLSXPLAN.PROCESS_NUMBER =2  AND M100.UPH2<>0 AND M100.UPH2 is not null)) AND P400.CODE_55 <> '04'
            ) AS AA 
          ${condition}
          AND AA.CTR_CD='${DATA.CTR_CD}'
          GROUP BY 
            AA.PLAN_FACTORY, 
            SUBSTRING(AA.PLAN_EQ, 0, 3) 
          ORDER BY 
            AA.PLAN_FACTORY ASC, 
            MACHINE DESC`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "ycsxbalancecapa": //chua update CTR_CD
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
          WITH ZTBDLVR AS 
          (SELECT CUST_CD, G_CODE, PO_NO, SUM(DELIVERY_QTY) AS DELIVERY_QTY FROM ZTBDelivery GROUP BY CUST_CD, G_CODE, PO_NO),
          POTB AS
          (
          SELECT ZTBPOTable.G_CODE, SUM((ZTBPOTable.PO_QTY-isnull(ZTBDLVR.DELIVERY_QTY,0))) AS PO_BALANCE FROM ZTBPOTable LEFT JOIN ZTBDLVR ON (ZTBPOTable.G_CODE = ZTBDLVR.G_CODE AND ZTBPOTable.CUST_CD = ZTBDLVR.CUST_CD AND ZTBPOTable.PO_NO = ZTBDLVR.PO_NO) GROUP BY ZTBPOTable.G_CODE
          ),
          THANHPHAM AS
          (
                    select Product_MaVach AS G_CODE, SUM(CASE WHEN IO_type='IN' THEN IO_Qty ELSE 0 END) AS NHAPKHO,SUM(CASE WHEN IO_type='OUT' THEN IO_Qty ELSE 0 END) AS XUATKHO,SUM(CASE WHEN IO_type='OUT' AND IO_Status= 'Pending' THEN IO_Qty ELSE 0 END) AS XUATKHO_PD,SUM(CASE WHEN IO_type='IN' THEN IO_Qty ELSE 0 END) -SUM(CASE WHEN IO_type='OUT' THEN IO_Qty ELSE 0 END) AS TONKHO, SUM(CASE WHEN IO_type='OUT' AND (IO_Status<> 'Pending' OR IO_Status is null) THEN IO_Qty ELSE 0 END) AS XUATKHO_TT, SUM(CASE WHEN IO_type='IN' THEN IO_Qty ELSE 0 END) -SUM(CASE WHEN IO_type='OUT' AND (IO_Status<> 'Pending' OR IO_Status is null)THEN IO_Qty ELSE 0 END) AS TONKHO_TT FROM tbl_InputOutput 
                  group by Product_MaVach 
          ),
          FN_BALANCETB AS
          (
            SELECT POTB.G_CODE, CASE WHEN POTB.PO_BALANCE-THANHPHAM.TONKHO >0 THEN POTB.PO_BALANCE-THANHPHAM.TONKHO ELSE 0 END AS FNBL  FROM POTB 
            LEFT JOIN THANHPHAM  ON (POTB.G_CODE = THANHPHAM.G_CODE)
            WHERE  POTB.PO_BALANCE <>0
          ),
          LEADTIMETB AS
          (
          SELECT FN_BALANCETB.FNBL, M100.EQ1, M100.EQ2, 
          CASE WHEN M100.EQ1 IN ('FR','SR','DC', 'ED') THEN FN_BALANCETB.FNBL/M100.UPH1 *60*M100.Step1 + M100.Setting1 ELSE 0 END AS LT1,
          CASE WHEN M100.EQ2 IN ('FR','SR','DC', 'ED') THEN FN_BALANCETB.FNBL/M100.UPH2 *60*M100.Step2 + M100.Setting2 ELSE 0 END AS LT2
          FROM FN_BALANCETB
          LEFT JOIN M100 ON (M100.G_CODE = FN_BALANCETB.G_CODE)
          WHERE FNBL <>0 AND M100.UPH1<>0  AND  M100.EQ1 IN ('FR','SR','DC', 'ED') AND  ((M100.EQ2 IN ('FR','SR','DC', 'ED') AND M100.UPH2 <>0) OR NOT (M100.EQ2 IN ('FR','SR','DC', 'ED')))
          ),
          LT1TB AS
          (
            SELECT EQ1 AS EQ_NAME, SUM(isnull(LT1,0)) AS LEADTIME FROM LEADTIMETB GROUP BY EQ1
          ),
          LT2TB AS
          (
            SELECT EQ2 AS EQ_NAME, SUM(isnull(LT2,0)) AS LEADTIME FROM LEADTIMETB GROUP BY EQ2
          )
          SELECT LT1TB.EQ_NAME, (isnull(LT1TB.LEADTIME,0) + isnull(LT2TB.LEADTIME,0)) AS YCSX_BALANCE FROM LT1TB LEFT JOIN LT2TB ON (LT1TB.EQ_NAME = LT2TB.EQ_NAME)
          ORDER BY LT1TB.EQ_NAME DESC
          `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          //checkkq = {tk_status:'NG', message:' tam thoi dung'}
          res.send(checkkq);
        })();
        break;
      case "ycsxbalanceleadtimedata":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `SELECT * FROM 
            (SELECT TONYCSX_TABLE.PROD_REQUEST_NO, TONYCSX_TABLE.PROD_REQUEST_QTY, TONYCSX_TABLE.G_CODE,TONYCSX_TABLE.G_NAME, TONYCSX_TABLE.Setting1 ,TONYCSX_TABLE.Setting2, TONYCSX_TABLE.UPH1, TONYCSX_TABLE.UPH2, TONYCSX_TABLE.TON_CD1, TONYCSX_TABLE.TON_CD2, TONYCSX_TABLE.EQ1, TONYCSX_TABLE.EQ2, (TONYCSX_TABLE.Setting1 + TONYCSX_TABLE.TON_CD1/TONYCSX_TABLE.UPH1*60) AS LEATIME1, CASE WHEN TONYCSX_TABLE.EQ2 IN ('FR','SR','DC','ED') THEN (TONYCSX_TABLE.Setting2 + TONYCSX_TABLE.TON_CD2/TONYCSX_TABLE.UPH2*60) ELSE 0 END AS LEATIME2  FROM 
            (
            SELECT P400.PROD_REQUEST_NO, P400.CTR_CD, M100.G_CODE, M100.G_NAME,P400.PROD_REQUEST_QTY, isnull(KQSXTB.CD1,0) AS CD1, isnull(KQSXTB.CD2,0) AS CD2, 
            CASE WHEN P400.PROD_REQUEST_QTY- isnull(KQSXTB.CD1,0) >=0 THEN P400.PROD_REQUEST_QTY- isnull(KQSXTB.CD1,0) ELSE 0 END AS TON_CD1,
            CASE WHEN CAPA_TB.EQ2 IN ('FR','SR','DC','ED') THEN 
            CASE WHEN P400.PROD_REQUEST_QTY- isnull(KQSXTB.CD2,0) >=0 THEN P400.PROD_REQUEST_QTY- isnull(KQSXTB.CD2,0) ELSE 0 END 
            ELSE 0 END TON_CD2,
            CAPA_TB.FACTORY, CAPA_TB.EQ1, CAPA_TB.EQ2,  CAPA_TB.Setting1, CAPA_TB.Setting2, CAPA_TB.UPH1, CAPA_TB.UPH2, CAPA_TB.Step1, CAPA_TB.Step2  FROM P400
            LEFT JOIN 
            ((SELECT PVTB.PROD_REQUEST_NO, PVTB.CTR_CD, isnull(PVTB.[1],0) AS CD1, isnull(PVTB.[2],0) AS CD2 FROM 
            (
                SELECT ZTB_QLSXPLAN.PROD_REQUEST_NO, ZTB_QLSXPLAN.CTR_CD, ZTB_QLSXPLAN.PROCESS_NUMBER, SUM(isnull(SX_RESULT,0)) AS KETQUASX FROM ZTB_SX_RESULT LEFT JOIN ZTB_QLSXPLAN ON (ZTB_QLSXPLAN.PLAN_ID = ZTB_SX_RESULT.PLAN_ID AND ZTB_QLSXPLAN.CTR_CD = ZTB_SX_RESULT.CTR_CD) WHERE ZTB_QLSXPLAN.STEP=0 GROUP BY ZTB_QLSXPLAN.PROD_REQUEST_NO, ZTB_QLSXPLAN.CTR_CD, ZTB_QLSXPLAN.PROCESS_NUMBER
            )
            AS PV
            PIVOT
            ( 
            SUM(PV.KETQUASX) FOR PV.PROCESS_NUMBER IN ([1],[2])
            ) 
            AS PVTB)) AS KQSXTB ON (P400.PROD_REQUEST_NO = KQSXTB.PROD_REQUEST_NO AND P400.CTR_CD = KQSXTB.CTR_CD)
            LEFT JOIN 
            (
            SELECT G_CODE, G_NAME, CTR_CD, FACTORY, EQ1, EQ2, Setting1, Setting2, UPH1, UPH2, Step1, Step2 FROM M100 WHERE FACTORY IN ('NM1','NM2') AND EQ1 IN('FR','SR','DC','ED') AND Setting1 is not null AND Setting1 <>0 AND UPH1 is not null AND UPH1 <>0 AND ((EQ2 IN ('FR','SR','DC','ED') AND Setting2 is not null AND Setting2 <>0 AND UPH2 is not null AND UPH2 <>0) OR (EQ2 NOT IN ('FR','SR','DC','ED')))
            ) AS CAPA_TB
            ON(CAPA_TB.G_CODE = P400.G_CODE AND CAPA_TB.CTR_CD = P400.CTR_CD)
            LEFT JOIN M100 ON (P400.G_CODE = M100.G_CODE AND P400.CTR_CD = M100.CTR_CD)
            WHERE PROD_REQUEST_DATE > '20230101' AND P400.CODE_55 <> '04' AND P400.CTR_CD='${DATA.CTR_CD}'
            ) AS TONYCSX_TABLE
            ) AS YCSXCAPATB
            ORDER BY YCSXCAPATB.LEATIME1 DESC, YCSXCAPATB.LEATIME2 DESC`;
          //console.log(setpdQuery);
          //checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          checkkq = { tk_status: 'NG', message: ' tam thoi dung' }
          res.send(checkkq);
        })();
        break;
      case "getdatadinhmuc_G_CODE":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `SELECT * FROM M100 WHERE CTR_CD='${DATA.CTR_CD}' AND G_CODE='${DATA.G_CODE}'`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "loadCaInfo":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `SELECT * FROM ZTB_CALV WHERE CTR_CD='${DATA.CTR_CD}' ORDER BY CA_CODE ASC`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "dailysxdata":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = ` WHERE SX_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE}'  `;
          if (DATA.FACTORY !== "ALL")
            condition += ` AND ZTB_SX_RESULT.FACTORY='${DATA.FACTORY}'`;
          if (DATA.MACHINE !== "ALL")
            condition += ` AND SUBSTRING(ZTB_SX_RESULT.EQ_NAME,1,2)='${DATA.MACHINE}'`;
          let setpdQuery = ``;
          if (DATA.MACHINE !== "ALL") {
            setpdQuery = `SELECT  ZTB_SX_RESULT.SX_DATE, SUBSTRING(ZTB_SX_RESULT.EQ_NAME,1,2) AS MACHINE_NAME, SUM(ZTB_SX_RESULT.SX_RESULT) AS SX_RESULT, SUM(ZTB_QLSXPLAN.PLAN_QTY) AS PLAN_QTY  FROM ZTB_SX_RESULT LEFT JOIN ZTB_QLSXPLAN ON (ZTB_SX_RESULT.PLAN_ID = ZTB_QLSXPLAN.PLAN_ID AND ZTB_SX_RESULT.CTR_CD = ZTB_QLSXPLAN.CTR_CD) ${condition} AND ZTB_SX_RESULT.CTR_CD='${DATA.CTR_CD}' GROUP BY ZTB_SX_RESULT.SX_DATE, SUBSTRING(ZTB_SX_RESULT.EQ_NAME,1,2)  ORDER BY SX_DATE ASC`;
          } else {
            setpdQuery = `SELECT  ZTB_SX_RESULT.SX_DATE, SUM(ZTB_SX_RESULT.SX_RESULT) AS SX_RESULT, SUM(ZTB_QLSXPLAN.PLAN_QTY) AS PLAN_QTY  FROM ZTB_SX_RESULT LEFT JOIN ZTB_QLSXPLAN ON (ZTB_SX_RESULT.PLAN_ID = ZTB_QLSXPLAN.PLAN_ID AND ZTB_SX_RESULT.CTR_CD = ZTB_QLSXPLAN.CTR_CD) ${condition} AND ZTB_SX_RESULT.CTR_CD='${DATA.CTR_CD}' GROUP BY ZTB_SX_RESULT.SX_DATE ORDER BY SX_DATE ASC`;
          }
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "sxachivementdata":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = ` WHERE SX_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE}' `;
          if (DATA.FACTORY !== "ALL")
            condition += ` AND ZTB_SX_RESULT.FACTORY = '${DATA.FACTORY}'`;
          let setpdQuery = `SELECT MACHINE_NAME, SUM(PLAN_QTY) AS PLAN_QTY, 
          SUM(AA.M_OUTPUT) AS WH_OUTPUT,
          SUM(SX_RESULT) AS SX_RESULT_TOTAL, 
                    SUM(CASE WHEN  AA.STEP=0 THEN SX_RESULT ELSE 0 END) AS RESULT_STEP_FINAL,
                    SUM(CASE WHEN AA.VAOKIEM='KVK' AND AA.STEP=0 THEN SX_RESULT ELSE 0 END) AS RESULT_TO_NEXT_PROCESS,
                    SUM(CASE WHEN AA.VAOKIEM='VK' AND AA.STEP=0 THEN SX_RESULT ELSE 0 END) AS RESULT_TO_INSPECTION,
                    SUM(INS_INPUT) AS INS_INPUT,  SUM(INSPECT_TOTAL_QTY) AS INSPECT_TOTAL_QTY, SUM(INSPECT_OK_QTY) AS INSPECT_OK_QTY, SUM(INSPECT_NG_QTY) AS INSPECT_NG_QTY, SUM(INS_OUTPUT) AS INS_OUTPUT FROM (
                   SELECT  ZTB_SX_RESULT.PLAN_ID, ZTB_SX_RESULT.SX_DATE, ZTB_QLSXPLAN.STEP, M100.EQ1, M100.EQ2,  SUBSTRING(ZTB_SX_RESULT.EQ_NAME,1,2) AS MACHINE_NAME, CASE WHEN M100.EQ2 NOT IN ('FR','SR','DC','ED')  THEN 'VK' ELSE CASE WHEN SUBSTRING(ZTB_SX_RESULT.EQ_NAME,1,2) = M100.EQ2 THEN 'VK' ELSE 'KVK' END END AS VAOKIEM,ZTB_QLSXPLAN.PLAN_QTY,
                    isnull(ZTB_SX_RESULT.SX_RESULT,0) AS SX_RESULT,  
                    isnull(INSPECT_INPUT_TABLE.INS_INPUT,0) AS INS_INPUT,  
                     isnull(INSPECT_NK_TABLE.INSPECT_TOTAL_QTY,0) AS INSPECT_TOTAL_QTY, isnull(INSPECT_NK_TABLE.INSPECT_OK_QTY,0) AS INSPECT_OK_QTY, isnull(INSPECT_NK_TABLE.INSPECT_NG_QTY,0) AS INSPECT_NG_QTY,
                    isnull(INSPECT_OUTPUT_TABLE.INS_OUTPUT,0) AS INS_OUTPUT ,
                SD_LIEU.WAREHOUSE_OUTPUT_QTY,
                SD_LIEU.WAREHOUSE_OUTPUT_QTY/ZTB_SX_RESULT.PD*ZTB_SX_RESULT.CAVITY*1000 AS M_OUTPUTSX,
                SD_LIEU.WAREHOUSE_OUTPUT_QTY/M100.PD*(M100.G_C*M100.G_C_R)*1000 AS M_OUTPUT
                FROM ZTB_SX_RESULT LEFT JOIN ZTB_QLSXPLAN ON (ZTB_SX_RESULT.PLAN_ID= ZTB_QLSXPLAN.PLAN_ID AND ZTB_SX_RESULT.CTR_CD = ZTB_QLSXPLAN.CTR_CD) 
                    LEFT JOIN M100 ON (M100.G_CODE = ZTB_SX_RESULT.G_CODE AND M100.CTR_CD = ZTB_SX_RESULT.CTR_CD)
                        LEFT JOIN
                        (SELECT PLAN_ID, CTR_CD, SUM(CAST(INPUT_QTY_EA as float)) AS INS_INPUT FROM ZTBINSPECTINPUTTB GROUP BY PLAN_ID, CTR_CD) AS INSPECT_INPUT_TABLE ON(ZTB_SX_RESULT.PLAN_ID = INSPECT_INPUT_TABLE.PLAN_ID AND ZTB_SX_RESULT.CTR_CD = INSPECT_INPUT_TABLE.CTR_CD)
                        LEFT JOIN
                        (SELECT PLAN_ID, CTR_CD, SUM(CAST(OUTPUT_QTY_EA as float)) AS INS_OUTPUT FROM ZTBINSPECTOUTPUTTB GROUP BY PLAN_ID, CTR_CD) AS INSPECT_OUTPUT_TABLE ON (ZTB_SX_RESULT.PLAN_ID = INSPECT_OUTPUT_TABLE.PLAN_ID AND ZTB_SX_RESULT.CTR_CD = INSPECT_OUTPUT_TABLE.CTR_CD)
                      LEFT JOIN
                                  (SELECT PLAN_ID, CTR_CD, SUM(CAST(INSPECT_TOTAL_QTY  as float)) AS INSPECT_TOTAL_QTY,  SUM(CAST(INSPECT_OK_QTY  as float)) AS INSPECT_OK_QTY, SUM(CAST((ERR4+ERR5+ERR6+ERR7+ERR8+ERR9+ERR10+ERR11+ERR12+ERR13+ERR14+ERR15+ERR16+ERR17+ERR18+ERR19+ERR20+ERR21+ERR22+ERR23+ERR24+ERR25+ERR26+ERR27+ERR28+ERR29+ERR30+ERR31
                    )  as float)) AS INSPECT_NG_QTY FROM ZTBINSPECTNGTB GROUP BY PLAN_ID, CTR_CD) AS INSPECT_NK_TABLE ON (ZTB_SX_RESULT.PLAN_ID = INSPECT_NK_TABLE.PLAN_ID AND ZTB_SX_RESULT.CTR_CD = INSPECT_NK_TABLE.CTR_CD)
                LEFT JOIN (
                     SELECT isnull(isnull(WAREHOUSE_OUT.PLAN_ID_INPUT,AA.PLAN_ID_SUDUNG),BB.PLAN_ID) AS PLAN_ID_OUTPUT, isnull(isnull(WAREHOUSE_OUT.M_NAME,AA.M_NAME),BB.M_NAME) AS M_NAME, AA.INPUT_QTY AS TOTAL_OUT_QTY, BB.REMAIN_QTY, (AA.INPUT_QTY - BB.REMAIN_QTY) AS USED_QTY, WAREHOUSE_OUT.WAREHOUSE_OUTPUT_QTY, isnull(isnull(WAREHOUSE_OUT.CTR_CD,AA.CTR_CD),BB.CTR_CD) AS CTR_CD
                FROM
                  (SELECT PLAN_ID_SUDUNG, M090.M_NAME, SUM(TOTAL_IN_QTY) AS INPUT_QTY, IN_KHO_SX.CTR_CD  FROM IN_KHO_SX LEFT JOIN M090 ON (M090.M_CODE = IN_KHO_SX.M_CODE AND M090.CTR_CD = IN_KHO_SX.CTR_CD)  WHERE IN_KHO_SX.USE_YN='X' GROUP BY IN_KHO_SX.PLAN_ID_SUDUNG, M090.M_NAME, IN_KHO_SX.CTR_CD) AS AA
                  FULL OUTER JOIN
                  (SELECT P500.PLAN_ID, M090.M_NAME, SUM(REMAIN_QTY) AS REMAIN_QTY, P500.CTR_CD FROM P500  LEFT JOIN M090 ON (M090.M_CODE = P500.M_CODE AND M090.CTR_CD = P500.CTR_CD) GROUP BY PLAN_ID,M090.M_NAME, P500.CTR_CD) AS BB
                  ON(AA.PLAN_ID_SUDUNG = BB.PLAN_ID AND AA.M_NAME = BB.M_NAME AND AA.CTR_CD = BB.CTR_CD)		
                  FULL OUTER JOIN(SELECT PLAN_ID_INPUT, M090.M_NAME, SUM(TOTAL_IN_QTY) AS WAREHOUSE_OUTPUT_QTY, IN_KHO_SX.CTR_CD  FROM IN_KHO_SX LEFT JOIN M090 ON (M090.M_CODE = IN_KHO_SX.M_CODE AND M090.CTR_CD = IN_KHO_SX.CTR_CD) WHERE IN_KHO_SX.PHANLOAI='N' GROUP BY PLAN_ID_INPUT, M090.M_NAME, IN_KHO_SX.CTR_CD)  AS WAREHOUSE_OUT
                  ON(AA.PLAN_ID_SUDUNG = WAREHOUSE_OUT.PLAN_ID_INPUT AND AA.M_NAME = WAREHOUSE_OUT.M_NAME AND AA.CTR_CD = WAREHOUSE_OUT.CTR_CD)	
                ) AS SD_LIEU ON (SD_LIEU.PLAN_ID_OUTPUT = ZTB_SX_RESULT.PLAN_ID AND SD_LIEU.CTR_CD = ZTB_SX_RESULT.CTR_CD)
          ${condition} AND ZTB_SX_RESULT.CTR_CD='${DATA.CTR_CD}'
          ) AS AA
          GROUP BY AA.MACHINE_NAME
          ORDER BY AA.MACHINE_NAME ASC`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "sxweeklytrenddata":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = `WHERE SX_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE}'`;
          if (DATA.FACTORY !== "ALL")
            condition += ` AND ZTB_SX_RESULT.FACTORY='${DATA.FACTORY}'`;
          if (DATA.MACHINE !== "ALL")
            condition += ` AND SUBSTRING(ZTB_SX_RESULT.EQ_NAME,1,2)='${DATA.MACHINE}'`;
          let setpdQuery = `SELECT AA.SX_WEEK, SUM(AA.SX_RESULT) AS SX_RESULT, SUM(AA.PLAN_QTY) AS PLAN_QTY FROM 
          (SELECT DATEPART(YEAR, ZTB_SX_RESULT.SX_DATE) AS SX_YEAR, DATEPART(ISO_WEEK,DATEADD(DAY,+2,ZTB_SX_RESULT.SX_DATE)) AS SX_WEEK, ZTB_SX_RESULT.SX_DATE, SUBSTRING(ZTB_SX_RESULT.EQ_NAME,1,2) AS MACHINE_NAME, ZTB_SX_RESULT.SX_RESULT, ZTB_QLSXPLAN.PLAN_QTY, ZTB_SX_RESULT.CTR_CD  FROM ZTB_SX_RESULT LEFT JOIN ZTB_QLSXPLAN ON (ZTB_SX_RESULT.PLAN_ID= ZTB_QLSXPLAN.PLAN_ID AND ZTB_SX_RESULT.CTR_CD = ZTB_QLSXPLAN.CTR_CD) ${condition} AND ZTB_SX_RESULT.CTR_CD='${DATA.CTR_CD}') AS AA
          GROUP BY  AA.SX_WEEK
          ORDER BY AA.SX_WEEK ASC`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "sxmonthlytrenddata":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = `WHERE SX_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE}'`;
          if (DATA.FACTORY !== "ALL")
            condition += ` AND ZTB_SX_RESULT.FACTORY='${DATA.FACTORY}'`;
          if (DATA.MACHINE !== "ALL")
            condition += ` AND SUBSTRING(ZTB_SX_RESULT.EQ_NAME,1,2)='${DATA.MACHINE}'`;
          let setpdQuery = `SELECT AA.SX_MONTH, SUM(AA.SX_RESULT) AS SX_RESULT, SUM(AA.PLAN_QTY) AS PLAN_QTY FROM 
          (SELECT DATEPART(MONTH, ZTB_SX_RESULT.SX_DATE) AS SX_MONTH, DATEPART(ISO_WEEK,DATEADD(DAY,+2,ZTB_SX_RESULT.SX_DATE)) AS SX_WEEK, ZTB_SX_RESULT.SX_DATE, SUBSTRING(ZTB_SX_RESULT.EQ_NAME,1,2) AS MACHINE_NAME, ZTB_SX_RESULT.SX_RESULT, ZTB_QLSXPLAN.PLAN_QTY, ZTB_SX_RESULT.CTR_CD  FROM ZTB_SX_RESULT LEFT JOIN ZTB_QLSXPLAN ON (ZTB_SX_RESULT.PLAN_ID= ZTB_QLSXPLAN.PLAN_ID AND ZTB_SX_RESULT.CTR_CD = ZTB_QLSXPLAN.CTR_CD)${condition} AND ZTB_SX_RESULT.CTR_CD='${DATA.CTR_CD}') AS AA
          GROUP BY  AA.SX_MONTH
          ORDER BY AA.SX_MONTH ASC`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "updatechamcongdiemdanhauto":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `INSERT INTO ZTBATTENDANCETB (CTR_CD,EMPL_NO, APPLY_DATE, ON_OFF,CURRENT_TEAM,MCC,CURRENT_CA) 
          SELECT ZTBEMPLINFO.CTR_CD, ZTBEMPLINFO.EMPL_NO,  CAST(GETDATE() as date) AS CHECK_DATE, 1 AS ON_OFF, ZTBEMPLINFO.WORK_SHIFT_CODE AS CURRENT_TEAM, 'Y' AS MCC , ZTBEMPLINFO.CALV  AS CURRENT_CA
FROM  
           ZTBEMPLINFO JOIN
           (SELECT DISTINCT CTR_CD, CHECK_DATE, NV_CCID FROM C001 WHERE CHECK_DATE = CAST(GETDATE() as date)) AS CC 
           ON (CC.NV_CCID = ZTBEMPLINFO.NV_CCID AND CC.CTR_CD = ZTBEMPLINFO.CTR_CD)		   
           WHERE NOT EXISTS 
           (SELECT CTR_CD, EMPL_NO FROM ZTBATTENDANCETB WHERE ZTBATTENDANCETB.APPLY_DATE=CAST(GETDATE() as date) AND ZTBATTENDANCETB.EMPL_NO = ZTBEMPLINFO.EMPL_NO AND ZTBATTENDANCETB.CTR_CD = ZTBEMPLINFO.CTR_CD AND DATEPART(ISO_WEEK, GETDATE()) = ZTBEMPLINFO.CURRENT_WEEK)
           AND ZTBEMPLINFO.CTR_CD='${DATA.CTR_CD}'`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "checkcurrentDAYSHIFT":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `SELECT DAYSHIFT FROM DATETABLE WHERE CTR_CD='${DATA.CTR_CD}' AND DATE_COLUMN=CAST(GETDATE() as date)`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "checkMYCHAMCONG":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let PASSWORD = req.payload_data["PASSWORD"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `SELECT MIN(C001.CHECK_DATETIME) AS MIN_TIME, MAX(C001.CHECK_DATETIME) AS MAX_TIME  FROM C001 LEFT JOIN ZTBEMPLINFO ON (C001.NV_CCID = ZTBEMPLINFO.NV_CCID AND C001.CTR_CD = ZTBEMPLINFO.CTR_CD) WHERE C001.CHECK_DATE = CAST(GETDATE() as date) AND ZTBEMPLINFO.EMPL_NO='${EMPL_NO}' AND C001.CTR_CD='${DATA.CTR_CD}'`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          let kqua;
          let query =
            `SELECT ZTBEMPLINFO.EMPL_IMAGE,ZTBEMPLINFO.CTR_CD,ZTBEMPLINFO.EMPL_NO,ZTBEMPLINFO.CMS_ID,ZTBEMPLINFO.FIRST_NAME,ZTBEMPLINFO.MIDLAST_NAME,ZTBEMPLINFO.DOB,ZTBEMPLINFO.HOMETOWN,ZTBEMPLINFO.SEX_CODE,ZTBEMPLINFO.ADD_PROVINCE,ZTBEMPLINFO.ADD_DISTRICT,ZTBEMPLINFO.ADD_COMMUNE,ZTBEMPLINFO.ADD_VILLAGE,ZTBEMPLINFO.PHONE_NUMBER,ZTBEMPLINFO.WORK_START_DATE,ZTBEMPLINFO.PASSWORD,ZTBEMPLINFO.EMAIL,ZTBEMPLINFO.WORK_POSITION_CODE,ZTBEMPLINFO.WORK_SHIFT_CODE,ZTBEMPLINFO.POSITION_CODE,ZTBEMPLINFO.JOB_CODE,ZTBEMPLINFO.FACTORY_CODE,ZTBEMPLINFO.WORK_STATUS_CODE,ZTBEMPLINFO.REMARK,ZTBEMPLINFO.ONLINE_DATETIME,ZTBSEX.SEX_NAME,ZTBSEX.SEX_NAME_KR,ZTBWORKSTATUS.WORK_STATUS_NAME,ZTBWORKSTATUS.WORK_STATUS_NAME_KR,ZTBFACTORY.FACTORY_NAME,ZTBFACTORY.FACTORY_NAME_KR,ZTBJOB.JOB_NAME,ZTBJOB.JOB_NAME_KR,ZTBPOSITION.POSITION_NAME,ZTBPOSITION.POSITION_NAME_KR,ZTBWORKSHIFT.WORK_SHIF_NAME,ZTBWORKSHIFT.WORK_SHIF_NAME_KR,ZTBWORKPOSITION.SUBDEPTCODE,ZTBWORKPOSITION.WORK_POSITION_NAME,ZTBWORKPOSITION.WORK_POSITION_NAME_KR,ZTBWORKPOSITION.ATT_GROUP_CODE,ZTBSUBDEPARTMENT.MAINDEPTCODE,ZTBSUBDEPARTMENT.SUBDEPTNAME,ZTBSUBDEPARTMENT.SUBDEPTNAME_KR,ZTBMAINDEPARMENT.MAINDEPTNAME,ZTBMAINDEPARMENT.MAINDEPTNAME_KR FROM ZTBEMPLINFO 
            LEFT JOIN ZTBSEX ON (ZTBSEX.SEX_CODE = ZTBEMPLINFO.SEX_CODE AND ZTBSEX.CTR_CD = ZTBEMPLINFO.CTR_CD) 
            LEFT JOIN ZTBWORKSTATUS ON(ZTBWORKSTATUS.WORK_STATUS_CODE = ZTBEMPLINFO.WORK_STATUS_CODE AND ZTBWORKSTATUS.CTR_CD = ZTBEMPLINFO.CTR_CD) 
            LEFT JOIN ZTBFACTORY ON (ZTBFACTORY.FACTORY_CODE = ZTBEMPLINFO.FACTORY_CODE AND ZTBFACTORY.CTR_CD = ZTBEMPLINFO.CTR_CD) 
            LEFT JOIN ZTBJOB ON (ZTBJOB.JOB_CODE = ZTBEMPLINFO.JOB_CODE AND ZTBJOB.CTR_CD = ZTBEMPLINFO.CTR_CD) 
            LEFT JOIN ZTBPOSITION ON (ZTBPOSITION.POSITION_CODE = ZTBEMPLINFO.POSITION_CODE AND ZTBPOSITION.CTR_CD = ZTBEMPLINFO.CTR_CD) 
            LEFT JOIN ZTBWORKSHIFT ON (ZTBWORKSHIFT.WORK_SHIFT_CODE = ZTBEMPLINFO.WORK_SHIFT_CODE AND ZTBWORKSHIFT.CTR_CD = ZTBEMPLINFO.CTR_CD) 
            LEFT JOIN ZTBWORKPOSITION ON (ZTBWORKPOSITION.WORK_POSITION_CODE = ZTBEMPLINFO.WORK_POSITION_CODE AND ZTBWORKPOSITION.CTR_CD = ZTBEMPLINFO.CTR_CD) 
            LEFT JOIN ZTBSUBDEPARTMENT ON (ZTBSUBDEPARTMENT.SUBDEPTCODE = ZTBWORKPOSITION.SUBDEPTCODE AND ZTBSUBDEPARTMENT.CTR_CD = ZTBWORKPOSITION.CTR_CD) 
            LEFT JOIN ZTBMAINDEPARMENT ON (ZTBMAINDEPARMENT.MAINDEPTCODE = ZTBSUBDEPARTMENT.MAINDEPTCODE AND ZTBMAINDEPARMENT.CTR_CD = ZTBSUBDEPARTMENT.CTR_CD) 
            WHERE ZTBEMPLINFO.EMPL_NO = '${EMPL_NO}' AND PASSWORD = '${PASSWORD}' AND ZTBEMPLINFO.CTR_CD='${DATA.CTR_CD}'`;
          kqua = await asyncQuery(query);
          //console.log('kqua',kqua);
          loginResult = kqua;
          //console.log("KET QUA LOGIN = " + loginResult);
          var token = "";
          if (loginResult != 0) {
            token = jwt.sign({ payload: loginResult }, "nguyenvanhung", {
              expiresIn: 3600 * 24 * 1,
            });
          } else if (loginResult === 0 && EMPL_NO === "NHU1903") {
            token = req.cookies.token;
          }
          //res.cookie("token", token);
          let checkkq_token;
          //console.log(checkkq);
          if (EMPL_NO === "NHU1903") {
            checkkq_token = {
              ...checkkq,
              REFRESH_TOKEN:
                "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJwYXlsb2FkIjoiW3tcIkNUUl9DRFwiOlwiMDAyXCIsXCJFTVBMX05PXCI6XCJOSFUxOTAzXCIsXCJDTVNfSURcIjpcIkNNUzExNzlcIixcIkZJUlNUX05BTUVcIjpcIkjDmU5HM1wiLFwiTUlETEFTVF9OQU1FXCI6XCJOR1VZ4buETiBWxIJOXCIsXCJET0JcIjpcIjE5OTMtMTAtMThUMDA6MDA6MDAuMDAwWlwiLFwiSE9NRVRPV05cIjpcIlBow7ogVGjhu40gLSDEkMO0bmcgWHXDom4gLSBTw7NjIFPGoW4gLSBIw6AgTuG7mWlcIixcIlNFWF9DT0RFXCI6MSxcIkFERF9QUk9WSU5DRVwiOlwiSMOgIE7hu5lpXCIsXCJBRERfRElTVFJJQ1RcIjpcIlPDs2MgU8ahblwiLFwiQUREX0NPTU1VTkVcIjpcIsSQw7RuZyBYdcOiblwiLFwiQUREX1ZJTExBR0VcIjpcIlRow7RuIFBow7ogVGjhu41cIixcIlBIT05FX05VTUJFUlwiOlwiMDk3MTA5MjQ1NFwiLFwiV09SS19TVEFSVF9EQVRFXCI6XCIyMDE5LTAzLTExVDAwOjAwOjAwLjAwMFpcIixcIlBBU1NXT1JEXCI6XCIxMjM0NTY3ODlcIixcIkVNQUlMXCI6XCJudmgxOTAzQGNtc2JhbmRvLmNvbVwiLFwiV09SS19QT1NJVElPTl9DT0RFXCI6MixcIldPUktfU0hJRlRfQ09ERVwiOjAsXCJQT1NJVElPTl9DT0RFXCI6MyxcIkpPQl9DT0RFXCI6MixcIkZBQ1RPUllfQ09ERVwiOjEsXCJXT1JLX1NUQVRVU19DT0RFXCI6MSxcIlJFTUFSS1wiOm51bGwsXCJPTkxJTkVfREFURVRJTUVcIjpcIjIwMjMtMDUtMjhUMTY6MDg6MzcuMTM3WlwiLFwiU0VYX05BTUVcIjpcIk5hbVwiLFwiU0VYX05BTUVfS1JcIjpcIuuCqOyekFwiLFwiV09SS19TVEFUVVNfTkFNRVwiOlwixJBhbmcgbMOgbVwiLFwiV09SS19TVEFUVVNfTkFNRV9LUlwiOlwi6re866y07KSRXCIsXCJGQUNUT1JZX05BTUVcIjpcIk5ow6AgbcOheSAxXCIsXCJGQUNUT1JZX05BTUVfS1JcIjpcIjHqs7XsnqVcIixcIkpPQl9OQU1FXCI6XCJMZWFkZXJcIixcIkpPQl9OQU1FX0tSXCI6XCLrpqzrjZRcIixcIlBPU0lUSU9OX05BTUVcIjpcIlN0YWZmXCIsXCJQT1NJVElPTl9OQU1FX0tSXCI6XCLsgqzsm5BcIixcIldPUktfU0hJRl9OQU1FXCI6XCJIw6BuaCBDaMOtbmhcIixcIldPUktfU0hJRl9OQU1FX0tSXCI6XCLsoJXqt5xcIixcIlNVQkRFUFRDT0RFXCI6MixcIldPUktfUE9TSVRJT05fTkFNRVwiOlwiUERcIixcIldPUktfUE9TSVRJT05fTkFNRV9LUlwiOlwiUERcIixcIkFUVF9HUk9VUF9DT0RFXCI6MSxcIk1BSU5ERVBUQ09ERVwiOjEsXCJTVUJERVBUTkFNRVwiOlwiUERcIixcIlNVQkRFUFROQU1FX0tSXCI6XCLthrXsl60gKFBEKVwiLFwiTUFJTkRFUFROQU1FXCI6XCJRQ1wiLFwiTUFJTkRFUFROQU1FX0tSXCI6XCLtkojsp4hcIn1dIiwiaWF0IjoxNjk1ODIyMTQ0LCJleHAiOjIwNTU4MjIxNDR9.ICdvh4twGRLSZQ0Twcp3g0GlEDJRmemTjcWipqj3NG4",
            };
          } else {
            checkkq_token = { ...checkkq, REFRESH_TOKEN: token };
          }
          //console.log(checkkq_token);
          res.send(checkkq_token);
        })();
        break;
      case "updatelieuncc":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = ` UPDATE I222 SET LOTNCC='${DATA.LOTNCC}' WHERE CTR_CD='${DATA.CTR_CD}' AND M_LOT_NO='${DATA.M_LOT_NO}'`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "loadM100UpGia":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = ` SELECT G_CODE, G_NAME, G_NAME_KD, PROD_MAIN_MATERIAL  FROM M100 WHERE CTR_CD='${DATA.CTR_CD}'`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "pheduyetgia":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `UPDATE PROD_PRICE_TABLE SET FINAL='${DATA.FINAL}', UPD_DATE=GETDATE(), UPD_EMPL='${EMPL_NO}' WHERE CTR_CD='${DATA.CTR_CD}' AND  G_CODE='${DATA.G_CODE}' AND CUST_CD ='${DATA.CUST_CD}' AND MOQ=${DATA.MOQ} AND PRICE_DATE='${moment.utc(DATA.PRICE_DATE).format("YYYY-MM-DD")}'`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "updategia":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `UPDATE PROD_PRICE_TABLE SET FINAL='${DATA.FINAL
            }', PROD_PRICE=${DATA.PROD_PRICE}, BEP=${DATA.BEP}, MOQ = ${DATA.MOQ}, PRICE_DATE = '${DATA.PRICE_DATE}', INS_DATE=GETDATE(), INS_EMPL='${EMPL_NO}' WHERE CTR_CD='${DATA.CTR_CD}' AND PROD_ID = ${DATA.PROD_ID}`;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "deletegia":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `DELETE FROM PROD_PRICE_TABLE WHERE CTR_CD='${DATA.CTR_CD}' AND G_CODE='${DATA.G_CODE
            }' AND CUST_CD ='${DATA.CUST_CD}' AND MOQ=${DATA.MOQ
            } AND PRICE_DATE='${moment
              .utc(DATA.PRICE_DATE)
              .format("YYYY-MM-DD")}'`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "mobile_checkProcessLotNo":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `SELECT M100.G_NAME, P501.TEMP_QTY, P501.INS_DATE, ZTB_QLSXPLAN.PLAN_EQ, ZTBLOTPRINTHISTORYTB.LOT_PRINT_DATE AS INSPECT_START, GETDATE() AS INSPECT_STOP FROM P501 
          LEFT JOIN ZTB_QLSXPLAN ON (P501.PLAN_ID = ZTB_QLSXPLAN.PLAN_ID AND P501.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
          LEFT JOIN M100 ON (M100.G_CODE = ZTB_QLSXPLAN.G_CODE AND M100.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
          LEFT JOIN ZTBLOTPRINTHISTORYTB ON (P501.PROCESS_LOT_NO = ZTBLOTPRINTHISTORYTB.PROCESS_LOT_NO AND P501.CTR_CD = ZTBLOTPRINTHISTORYTB.CTR_CD)
          WHERE P501.PROCESS_LOT_NO='${DATA.PROCESS_LOT_NO}' AND P501.CTR_CD='${DATA.CTR_CD}'`;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "loadC001":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
          DECLARE @empl varchar(10); DECLARE @startdate DATE; DECLARE @enddate DATE        
           SET @startdate='${DATA.FROM_DATE}'
           SET @enddate='${DATA.TO_DATE}'
           SELECT  
		   ZTBEMPLINFOA.DATE_COLUMN,
		   ZTBEMPLINFOA.NV_CCID,
             ZTBEMPLINFOA.EMPL_NO, 
             ZTBEMPLINFOA.CMS_ID, 
             ZTBEMPLINFOA.MIDLAST_NAME, 
             ZTBEMPLINFOA.FIRST_NAME, 
             ZTBEMPLINFOA.PHONE_NUMBER, 
             ZTBSEX.SEX_NAME, 
             ZTBWORKSTATUS.WORK_STATUS_NAME, 
             ZTBFACTORY.FACTORY_NAME, 
             ZTBJOB.JOB_NAME, 
             ZTBWORKSHIFT.WORK_SHIF_NAME, 
             ZTBWORKPOSITION.WORK_POSITION_NAME, 
             ZTBSUBDEPARTMENT.SUBDEPTNAME, 
             ZTBMAINDEPARMENT.MAINDEPTNAME, 
             ZTBOFFREGISTRATIONTB.REQUEST_DATE, 
             ZTBATTENDANCETB.APPLY_DATE, 
             ZTBOFFREGISTRATIONTB.APPROVAL_STATUS, 
             ZTBOFFREGISTRATIONTB.OFF_ID, 
             ZTBOFFREGISTRATIONTB.CA_NGHI, 
             ZTBATTENDANCETB.ON_OFF, 
             ZTBATTENDANCETB.OVERTIME_INFO, 
             ZTBATTENDANCETB.OVERTIME, 
             ZTBREASON.REASON_NAME, 
             ZTBOFFREGISTRATIONTB.REMARK, 
             ZTBATTENDANCETB.XACNHAN,
			 ZTB_CALV.CA_CODE,	
			 ZTB_CALV.CA_NAME,	
			 ZTB_CALV.IN_START,	
			 ZTB_CALV.IN_END,
			 ZTB_CALV.OUT_START,
			 ZTB_CALV.OUT_END,
       CHAMCONG0.CHECK_DATE AS CHECK_DATE0,
			 CHAMCONG0.CHECK1 AS CHECK10,
			 CHAMCONG0.CHECK2 AS CHECK20,
			 CHAMCONG0.CHECK3 AS CHECK30,
			 CHAMCONG0.CHECK4 AS CHECK40,
			 CHAMCONG0.CHECK5 AS CHECK50,
			 CHAMCONG0.CHECK6 AS CHECK60,
			 CHAMCONG.CHECK_DATE,
			 CHAMCONG.CHECK1,
			 CHAMCONG.CHECK2,
			 CHAMCONG.CHECK3,
			 CHAMCONG.CHECK4,
			 CHAMCONG.CHECK5,
			 CHAMCONG.CHECK6,
			 CHAMCONG2.CHECK_DATE AS CHECK_DATE2,
			 CHAMCONG2.CHECK1 AS CHECK12,
			 CHAMCONG2.CHECK2 AS CHECK22,
			 CHAMCONG2.CHECK3 AS CHECK32,
			 CHAMCONG2.CHECK4 AS CHECK42,
			 CHAMCONG2.CHECK5 AS CHECK52,
			 CHAMCONG2.CHECK6 AS CHECK62
       FROM 
       (SELECT DATE_COLUMN, NV_CCID,EMPL_NO,CMS_ID,FIRST_NAME,MIDLAST_NAME,DOB,HOMETOWN,SEX_CODE,ADD_PROVINCE,ADD_DISTRICT,ADD_COMMUNE,ADD_VILLAGE,PHONE_NUMBER,WORK_START_DATE,PASSWORD,EMAIL,WORK_POSITION_CODE,WORK_SHIFT_CODE,POSITION_CODE,JOB_CODE,FACTORY_CODE,WORK_STATUS_CODE,REMARK,ONLINE_DATETIME,EMPL_IMAGE,RESIGN_DATE  FROM DATETABLE CROSS JOIN ZTBEMPLINFO WHERE DATETABLE.DATE_COLUMN BETWEEN @startdate AND @enddate AND ZTBEMPLINFO.WORK_STATUS_CODE<>0) AS ZTBEMPLINFOA 
       LEFT JOIN (SELECT DATETABLE.CTR_CD, DATETABLE.DATE_COLUMN, ZTBATTENDANCETB.EMPL_NO,  ZTBATTENDANCETB.APPLY_DATE,  ZTBATTENDANCETB.ON_OFF,  ZTBATTENDANCETB.REMARK,  ZTBATTENDANCETB.OVERTIME_INFO, ZTBATTENDANCETB.OVERTIME, ZTBATTENDANCETB.XACNHAN,CURRENT_TEAM , ZTBATTENDANCETB.CURRENT_CA FROM DATETABLE LEFT JOIN ZTBATTENDANCETB ON (DATETABLE.DATE_COLUMN = ZTBATTENDANCETB.APPLY_DATE) WHERE DATETABLE.DATE_COLUMN BETWEEN @startdate AND @enddate) AS ZTBATTENDANCETB ON (
         ZTBEMPLINFOA.EMPL_NO = ZTBATTENDANCETB.EMPL_NO AND ZTBEMPLINFOA.DATE_COLUMN = ZTBATTENDANCETB.APPLY_DATE
       ) 
       LEFT JOIN ZTBSEX ON (
         ZTBSEX.SEX_CODE = ZTBEMPLINFOA.SEX_CODE
       ) 
       LEFT JOIN ZTBWORKSTATUS ON(
         ZTBWORKSTATUS.WORK_STATUS_CODE = ZTBEMPLINFOA.WORK_STATUS_CODE
       ) 
       LEFT JOIN ZTBFACTORY ON (
         ZTBFACTORY.FACTORY_CODE = ZTBEMPLINFOA.FACTORY_CODE
       ) 
       LEFT JOIN ZTBJOB ON (
         ZTBJOB.JOB_CODE = ZTBEMPLINFOA.JOB_CODE
       ) 
       LEFT JOIN ZTBPOSITION ON (
         ZTBPOSITION.POSITION_CODE = ZTBEMPLINFOA.POSITION_CODE
       ) 
       LEFT JOIN ZTBWORKSHIFT ON (
         ZTBWORKSHIFT.WORK_SHIFT_CODE = ZTBEMPLINFOA.WORK_SHIFT_CODE
       ) 
       LEFT JOIN ZTBWORKPOSITION ON (
         ZTBWORKPOSITION.WORK_POSITION_CODE = ZTBEMPLINFOA.WORK_POSITION_CODE
       ) 
       LEFT JOIN ZTBSUBDEPARTMENT ON (
         ZTBSUBDEPARTMENT.SUBDEPTCODE = ZTBWORKPOSITION.SUBDEPTCODE
       ) 
       LEFT JOIN ZTBMAINDEPARMENT ON (
         ZTBMAINDEPARMENT.MAINDEPTCODE = ZTBSUBDEPARTMENT.MAINDEPTCODE
       ) 
       LEFT JOIN ZTBOFFREGISTRATIONTB ON (
         ZTBOFFREGISTRATIONTB.EMPL_NO = ZTBATTENDANCETB.EMPL_NO 
         AND ZTBOFFREGISTRATIONTB.APPLY_DATE = ZTBATTENDANCETB.APPLY_DATE
       ) 
       LEFT JOIN ZTBREASON ON (
         ZTBOFFREGISTRATIONTB.REASON_CODE = ZTBREASON.REASON_CODE
       )   
 LEFT JOIN ZTB_CALV ON (ZTB_CALV.CA_CODE = ZTBATTENDANCETB.CURRENT_CA)
 LEFT JOIN (
 SELECT pvtb.NV_CCID, pvtb.CHECK_DATE, pvtb.[1] AS CHECK1, pvtb.[2] AS CHECK2,pvtb.[3] AS CHECK3,pvtb.[4] AS CHECK4,pvtb.[5] AS CHECK5,pvtb.[6] AS CHECK6 FROM
(SELECT CHECK_DATE, NV_CCID, CHECK_DATETIME, RANK() OVER(PARTITION BY CHECK_DATE, NV_CCID ORDER BY CHECK_DATETIME ASC) AS ATT_TIMES FROM C001) BANGNGUON
PIVOT 
(
  MIN(CHECK_DATETIME)
  FOR BANGNGUON.ATT_TIMES IN ([1],[2],[3],[4],[5],[6])
) as pvtb
) AS CHAMCONG 
ON (CHAMCONG.CHECK_DATE = ZTBEMPLINFOA.DATE_COLUMN AND CHAMCONG.NV_CCID = ZTBEMPLINFOA.NV_CCID)
LEFT JOIN (
 SELECT pvtb.NV_CCID, pvtb.CHECK_DATE, pvtb.[1] AS CHECK1, pvtb.[2] AS CHECK2,pvtb.[3] AS CHECK3,pvtb.[4] AS CHECK4,pvtb.[5] AS CHECK5,pvtb.[6] AS CHECK6 FROM
(SELECT CHECK_DATE, NV_CCID, CHECK_DATETIME, RANK() OVER(PARTITION BY CHECK_DATE,NV_CCID ORDER BY CHECK_DATETIME ASC) AS ATT_TIMES FROM C001) BANGNGUON
PIVOT 
(
  MIN(CHECK_DATETIME)
  FOR BANGNGUON.ATT_TIMES IN ([1],[2],[3],[4],[5],[6])
) as pvtb
) AS CHAMCONG2 
ON (DATEADD(day,-1,CHAMCONG2.CHECK_DATE) = ZTBEMPLINFOA.DATE_COLUMN AND CHAMCONG2.NV_CCID = ZTBEMPLINFOA.NV_CCID)
LEFT JOIN (
 SELECT pvtb.NV_CCID, pvtb.CHECK_DATE, pvtb.[1] AS CHECK1, pvtb.[2] AS CHECK2,pvtb.[3] AS CHECK3,pvtb.[4] AS CHECK4,pvtb.[5] AS CHECK5,pvtb.[6] AS CHECK6 FROM
(SELECT CHECK_DATE, NV_CCID, CHECK_DATETIME, RANK() OVER(PARTITION BY CHECK_DATE,NV_CCID ORDER BY CHECK_DATETIME ASC) AS ATT_TIMES FROM C001) BANGNGUON
PIVOT 
(
  MIN(CHECK_DATETIME)
  FOR BANGNGUON.ATT_TIMES IN ([1],[2],[3],[4],[5],[6])
) as pvtb
) AS CHAMCONG0			
ON (DATEADD(day,+1,CHAMCONG0.CHECK_DATE) = ZTBEMPLINFOA.DATE_COLUMN AND CHAMCONG0.NV_CCID = ZTBEMPLINFOA.NV_CCID)
 WHERE ZTBEMPLINFOA.WORK_STATUS_CODE =1 
 ORDER BY ZTBEMPLINFOA.DATE_COLUMN DESC, ZTBEMPLINFOA.POSITION_CODE ASC
          `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "loadC0012":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = ``;
          console.log(DATA.TRUNGHISINH);
          if (DATA.TRUNGHISINH === true) {
            condition += ` AND ZTBEMPLINFO.WORK_STATUS_CODE<>2 `;
          }
          if (DATA.TRUNGHIVIEC === true) {
            condition += ` AND ZTBEMPLINFO.WORK_STATUS_CODE<>0 `;
          }
          let setpdQuery = `
          DECLARE @empl varchar(10); DECLARE @startdate DATE; DECLARE @enddate DATE;         
           SET @startdate='${DATA.FROM_DATE}'
           SET @enddate='${DATA.TO_DATE}'
           SELECT 
 ZTBEMPLINFOA.DATE_COLUMN,
		   ZTBEMPLINFOA.NV_CCID,
             ZTBEMPLINFOA.EMPL_NO, 
             ZTBEMPLINFOA.CMS_ID, 
             ZTBEMPLINFOA.MIDLAST_NAME, 
             ZTBEMPLINFOA.FIRST_NAME, 
             ZTBEMPLINFOA.PHONE_NUMBER, 
             ZTBSEX.SEX_NAME, 
             ZTBWORKSTATUS.WORK_STATUS_NAME, 
             ZTBFACTORY.FACTORY_NAME, 
             ZTBJOB.JOB_NAME, 
             ZTBWORKSHIFT.WORK_SHIF_NAME, 
			       ZTBATTENDANCETB.CURRENT_CA AS CALV,
             ZTBWORKPOSITION.WORK_POSITION_NAME, 
             ZTBSUBDEPARTMENT.SUBDEPTNAME, 
             ZTBMAINDEPARMENT.MAINDEPTNAME, 
             ZTBOFFREGISTRATIONTB.REQUEST_DATE, 
             ZTBATTENDANCETB.APPLY_DATE, 
             ZTBOFFREGISTRATIONTB.APPROVAL_STATUS, 
             ZTBOFFREGISTRATIONTB.OFF_ID, 
             ZTBOFFREGISTRATIONTB.CA_NGHI, 
             ZTBATTENDANCETB.ON_OFF, 
             ZTBATTENDANCETB.OVERTIME_INFO, 
             ZTBATTENDANCETB.OVERTIME,  
             ZTBREASON.REASON_NAME, 
             ZTBOFFREGISTRATIONTB.REMARK, 
             ZTBATTENDANCETB.XACNHAN,
             ZTBATTENDANCETB.IN_TIME AS FIXED_IN_TIME,
			  ZTBATTENDANCETB.OUT_TIME AS FIXED_OUT_TIME,
			 XX.CHECK1,
			 XX.CHECK2,
			 XX.CHECK3,
			 XX.PREV_CHECK1,
			 XX.PREV_CHECK2,
			 XX.PREV_CHECK3,
			 XX.NEXT_CHECK1,
			 XX.NEXT_CHECK2,
			 XX.NEXT_CHECK3
FROM 
(SELECT DATE_COLUMN, CALV, NV_CCID, EMPL_NO, CMS_ID, FIRST_NAME, MIDLAST_NAME, DOB, HOMETOWN, SEX_CODE, ADD_PROVINCE, ADD_DISTRICT, ADD_COMMUNE, ADD_VILLAGE, PHONE_NUMBER, WORK_START_DATE, PASSWORD, EMAIL, WORK_POSITION_CODE, WORK_SHIFT_CODE, POSITION_CODE, JOB_CODE, FACTORY_CODE, WORK_STATUS_CODE, REMARK, ONLINE_DATETIME, EMPL_IMAGE, RESIGN_DATE, DATETABLE.CTR_CD FROM DATETABLE CROSS JOIN ZTBEMPLINFO WHERE DATETABLE.DATE_COLUMN BETWEEN @startdate AND @enddate ${condition} AND ZTBEMPLINFO.CTR_CD='${DATA.CTR_CD}') AS ZTBEMPLINFOA 
	   LEFT JOIN (SELECT DATETABLE.CTR_CD, DATETABLE.DATE_COLUMN, ZTBATTENDANCETB.EMPL_NO,ZTBATTENDANCETB.IN_TIME, ZTBATTENDANCETB.OUT_TIME,  ZTBATTENDANCETB.APPLY_DATE,  ZTBATTENDANCETB.ON_OFF,  ZTBATTENDANCETB.REMARK,  ZTBATTENDANCETB.OVERTIME_INFO, ZTBATTENDANCETB.OVERTIME, ZTBATTENDANCETB.XACNHAN,CURRENT_TEAM , ZTBATTENDANCETB.CURRENT_CA FROM DATETABLE LEFT JOIN ZTBATTENDANCETB ON (DATETABLE.DATE_COLUMN = ZTBATTENDANCETB.APPLY_DATE AND DATETABLE.CTR_CD = ZTBATTENDANCETB.CTR_CD) WHERE DATETABLE.DATE_COLUMN BETWEEN @startdate AND @enddate AND DATETABLE.CTR_CD='${DATA.CTR_CD}') AS ZTBATTENDANCETB ON (
         ZTBEMPLINFOA.EMPL_NO = ZTBATTENDANCETB.EMPL_NO AND ZTBEMPLINFOA.DATE_COLUMN = ZTBATTENDANCETB.APPLY_DATE AND ZTBEMPLINFOA.CTR_CD = ZTBATTENDANCETB.CTR_CD
       ) 
       LEFT JOIN ZTBSEX ON (
         ZTBSEX.SEX_CODE = ZTBEMPLINFOA.SEX_CODE AND ZTBSEX.CTR_CD = ZTBEMPLINFOA.CTR_CD
       ) 
       LEFT JOIN ZTBWORKSTATUS ON(
         ZTBWORKSTATUS.WORK_STATUS_CODE = ZTBEMPLINFOA.WORK_STATUS_CODE AND ZTBWORKSTATUS.CTR_CD = ZTBEMPLINFOA.CTR_CD
       ) 
       LEFT JOIN ZTBFACTORY ON (
         ZTBFACTORY.FACTORY_CODE = ZTBEMPLINFOA.FACTORY_CODE AND ZTBFACTORY.CTR_CD = ZTBEMPLINFOA.CTR_CD
       ) 
       LEFT JOIN ZTBJOB ON (
         ZTBJOB.JOB_CODE = ZTBEMPLINFOA.JOB_CODE AND ZTBJOB.CTR_CD = ZTBEMPLINFOA.CTR_CD
       ) 
       LEFT JOIN ZTBPOSITION ON (
         ZTBPOSITION.POSITION_CODE = ZTBEMPLINFOA.POSITION_CODE AND ZTBPOSITION.CTR_CD = ZTBEMPLINFOA.CTR_CD
       ) 
       LEFT JOIN ZTBWORKSHIFT ON (
         ZTBWORKSHIFT.WORK_SHIFT_CODE = ZTBEMPLINFOA.WORK_SHIFT_CODE AND ZTBWORKSHIFT.CTR_CD = ZTBEMPLINFOA.CTR_CD
       ) 
       LEFT JOIN ZTBWORKPOSITION ON (
         ZTBWORKPOSITION.WORK_POSITION_CODE = ZTBEMPLINFOA.WORK_POSITION_CODE AND ZTBWORKPOSITION.CTR_CD = ZTBEMPLINFOA.CTR_CD
       ) 
       LEFT JOIN ZTBSUBDEPARTMENT ON (
         ZTBSUBDEPARTMENT.SUBDEPTCODE = ZTBWORKPOSITION.SUBDEPTCODE AND ZTBSUBDEPARTMENT.CTR_CD = ZTBWORKPOSITION.CTR_CD
       ) 
       LEFT JOIN ZTBMAINDEPARMENT ON (
         ZTBMAINDEPARMENT.MAINDEPTCODE = ZTBSUBDEPARTMENT.MAINDEPTCODE AND ZTBMAINDEPARMENT.CTR_CD = ZTBSUBDEPARTMENT.CTR_CD
       ) 
       LEFT JOIN ZTBOFFREGISTRATIONTB ON (
         ZTBOFFREGISTRATIONTB.EMPL_NO = ZTBATTENDANCETB.EMPL_NO 
         AND ZTBOFFREGISTRATIONTB.APPLY_DATE = ZTBATTENDANCETB.APPLY_DATE
         AND ZTBOFFREGISTRATIONTB.CTR_CD = ZTBATTENDANCETB.CTR_CD
       ) 
       LEFT JOIN ZTBREASON ON (
         ZTBOFFREGISTRATIONTB.REASON_CODE = ZTBREASON.REASON_CODE
         AND ZTBOFFREGISTRATIONTB.CTR_CD = ZTBREASON.CTR_CD
       )  
LEFT JOIN 
(
SELECT pvtb.NV_CCID, pvtb.CHECK_DATE, pvtb.[1] AS CHECK1, pvtb.[2] AS CHECK2, pvtb.[3] AS CHECK3,
LEAD(pvtb.[1]) OVER (ORDER BY NV_CCID ASC, CHECK_DATE ASC, pvtb.[1] ASC) AS NEXT_CHECK1,
LEAD(pvtb.[2]) OVER (ORDER BY NV_CCID ASC, CHECK_DATE ASC, pvtb.[2] ASC) AS NEXT_CHECK2,
LEAD(pvtb.[3]) OVER (ORDER BY NV_CCID ASC, CHECK_DATE ASC, pvtb.[3] ASC) AS NEXT_CHECK3,
LAG(pvtb.[1]) OVER (ORDER BY NV_CCID ASC, CHECK_DATE ASC, pvtb.[1] ASC) AS PREV_CHECK1,
LAG(pvtb.[2]) OVER (ORDER BY NV_CCID ASC, CHECK_DATE ASC, pvtb.[2] ASC) AS PREV_CHECK2,
LAG(pvtb.[3]) OVER (ORDER BY NV_CCID ASC, CHECK_DATE ASC, pvtb.[3] ASC) AS PREV_CHECK3,
pvtb.CTR_CD
FROM 
(SELECT NV_CCID, CHECK_DATE, CHECK_DATETIME, RANK() OVER (PARTITION BY NV_CCID, CHECK_DATE ORDER BY CHECK_DATETIME ASC) AS CHECKNO, CTR_CD FROM fn_cleanchamcong(10))
AS STB
PIVOT
(
MIN(STB.CHECK_DATETIME)
FOR STB.CHECKNO IN ([1],[2],[3],[4],[5],[6])
) AS pvtb
) AS XX
ON (XX.NV_CCID = ZTBEMPLINFOA.NV_CCID AND XX.CHECK_DATE = ZTBEMPLINFOA.DATE_COLUMN AND XX.CTR_CD = ZTBEMPLINFOA.CTR_CD)
WHERE ZTBEMPLINFOA.CTR_CD='${DATA.CTR_CD}'
ORDER BY XX.NV_CCID ASC, XX.CHECK_DATE ASC
          `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "loadDiemDanhFullSummaryTable":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `DECLARE @empl varchar(10); DECLARE @startdate DATE; DECLARE @enddate DATE        
          SET @startdate='${DATA.FROM_DATE}'
          SET @enddate='${DATA.TO_DATE}'
SELECT DIEMDANHBP.MAINDEPTNAME,DIEMDANHBP.COUNT_TOTAL,DIEMDANHBP.COUNT_ON,DIEMDANHBP.COUNT_OFF,DIEMDANHBP.COUNT_CDD,DIEMDANHBP.T1_TOTAL,DIEMDANHBP.T1_ON,DIEMDANHBP.T1_OFF,DIEMDANHBP.T1_CDD,DIEMDANHBP.T2_TOTAL,DIEMDANHBP.T2_ON,DIEMDANHBP.T2_OFF,DIEMDANHBP.T2_CDD,DIEMDANHBP.HC_TOTAL,DIEMDANHBP.HC_ON,DIEMDANHBP.HC_OFF,DIEMDANHBP.HC_CDD,DIEMDANHBP.ON_RATE,isnull(BANGNGHI.[TOTAL],0) AS [TOTAL],isnull(BANGNGHI.[Phép năm],0) AS PHEP_NAM,isnull(BANGNGHI.[Nửa phép],0) AS NUA_PHEP,isnull(BANGNGHI.[Nghỉ việc riêng],0) AS NGHI_VIEC_RIENG,isnull(BANGNGHI.[Nghỉ ốm],0) AS NGHI_OM,isnull(BANGNGHI.[Chế độ],0) AS CHE_DO,isnull(BANGNGHI.[Không lý do],0) AS KHONG_LY_DO
FROM 
(
      SELECT EMPL_LIST.MAINDEPTNAME, COUNT(EMPL_LIST.EMPL_NO) AS COUNT_TOTAL, SUM(CASE WHEN ON_OFF =1 THEN 1 ELSE 0 END) AS COUNT_ON, SUM(CASE WHEN ON_OFF =0 THEN 1 ELSE 0 END) AS COUNT_OFF, SUM(CASE WHEN ON_OFF is null THEN 1 ELSE 0 END) AS COUNT_CDD, 
      SUM(CASE WHEN  WORK_SHIF_NAME='TEAM 1' THEN 1 ELSE 0 END) AS T1_TOTAL,
      SUM(CASE WHEN ON_OFF =1 AND WORK_SHIF_NAME='TEAM 1' THEN 1 ELSE 0 END) AS T1_ON,
      SUM(CASE WHEN ON_OFF =0 AND WORK_SHIF_NAME='TEAM 1' THEN 1 ELSE 0 END) AS T1_OFF,
      SUM(CASE WHEN ON_OFF is null AND WORK_SHIF_NAME='TEAM 1' THEN 1 ELSE 0 END) AS T1_CDD,
      SUM(CASE WHEN  WORK_SHIF_NAME='TEAM 2' THEN 1 ELSE 0 END) AS T2_TOTAL,
      SUM(CASE WHEN ON_OFF =1 AND WORK_SHIF_NAME='TEAM 2' THEN 1 ELSE 0 END) AS T2_ON,
      SUM(CASE WHEN ON_OFF =0 AND WORK_SHIF_NAME='TEAM 2' THEN 1 ELSE 0 END) AS T2_OFF,
      SUM(CASE WHEN ON_OFF is null AND WORK_SHIF_NAME='TEAM 2' THEN 1 ELSE 0 END) AS T2_CDD,
      SUM(CASE WHEN  WORK_SHIF_NAME=N'Hành Chính' THEN 1 ELSE 0 END) AS HC_TOTAL,
      SUM(CASE WHEN ON_OFF =1 AND WORK_SHIF_NAME=N'Hành Chính' THEN 1 ELSE 0 END) AS HC_ON,
      SUM(CASE WHEN ON_OFF =0 AND WORK_SHIF_NAME=N'Hành Chính' THEN 1 ELSE 0 END) AS HC_OFF,	
      SUM(CASE WHEN ON_OFF is null AND WORK_SHIF_NAME=N'Hành Chính' THEN 1 ELSE 0 END) AS HC_CDD, 		   
      SUM(CASE WHEN ON_OFF =1 THEN 1 ELSE 0 END)*1.0/COUNT(EMPL_LIST.EMPL_NO)*100 AS ON_RATE		   
      FROM
      (
          SELECT  
      ZTBEMPLINFOA.DATE_COLUMN,
            ZTBEMPLINFOA.EMPL_NO, 
            CMS_ID, 
            MIDLAST_NAME, 
            FIRST_NAME, 
            PHONE_NUMBER, 
            SEX_NAME, 
            WORK_STATUS_NAME, 
            FACTORY_NAME, 
            JOB_NAME, 
            WORK_SHIF_NAME, 
            WORK_POSITION_NAME, 
            SUBDEPTNAME, 
            MAINDEPTNAME, 
            REQUEST_DATE, 
            ZTBATTENDANCETB.APPLY_DATE, 
            APPROVAL_STATUS, 
            OFF_ID, 
            CA_NGHI, 
            ON_OFF, 
            OVERTIME_INFO, 
            OVERTIME, 
            REASON_NAME, 
            ZTBOFFREGISTRATIONTB.REMARK, 
            ZTBATTENDANCETB.XACNHAN,
            ZTBEMPLINFOA.CTR_CD
          FROM 
            (SELECT DATE_COLUMN, EMPL_NO,CMS_ID,FIRST_NAME,MIDLAST_NAME,DOB,HOMETOWN,SEX_CODE,ADD_PROVINCE,ADD_DISTRICT,ADD_COMMUNE,ADD_VILLAGE,PHONE_NUMBER,WORK_START_DATE,PASSWORD,EMAIL,WORK_POSITION_CODE,WORK_SHIFT_CODE,POSITION_CODE,JOB_CODE,FACTORY_CODE,WORK_STATUS_CODE,REMARK,ONLINE_DATETIME,EMPL_IMAGE,RESIGN_DATE, DATETABLE.CTR_CD FROM DATETABLE CROSS JOIN ZTBEMPLINFO WHERE DATETABLE.DATE_COLUMN BETWEEN @startdate AND @enddate AND ZTBEMPLINFO.WORK_STATUS_CODE<>0) AS ZTBEMPLINFOA 
            LEFT JOIN (SELECT DATETABLE.CTR_CD, DATETABLE.DATE_COLUMN, ZTBATTENDANCETB.EMPL_NO,  ZTBATTENDANCETB.APPLY_DATE,  ZTBATTENDANCETB.ON_OFF,  ZTBATTENDANCETB.REMARK,  ZTBATTENDANCETB.OVERTIME_INFO, ZTBATTENDANCETB.OVERTIME, ZTBATTENDANCETB.XACNHAN,CURRENT_TEAM FROM DATETABLE LEFT JOIN ZTBATTENDANCETB ON (DATETABLE.DATE_COLUMN = ZTBATTENDANCETB.APPLY_DATE AND DATETABLE.CTR_CD = ZTBATTENDANCETB.CTR_CD) WHERE DATETABLE.DATE_COLUMN BETWEEN @startdate AND @enddate) AS ZTBATTENDANCETB ON (
              ZTBEMPLINFOA.EMPL_NO = ZTBATTENDANCETB.EMPL_NO AND ZTBEMPLINFOA.DATE_COLUMN = ZTBATTENDANCETB.APPLY_DATE AND ZTBEMPLINFOA.CTR_CD = ZTBATTENDANCETB.CTR_CD
            ) 
            LEFT JOIN ZTBSEX ON (
              ZTBSEX.SEX_CODE = ZTBEMPLINFOA.SEX_CODE AND ZTBSEX.CTR_CD = ZTBEMPLINFOA.CTR_CD
            ) 
            LEFT JOIN ZTBWORKSTATUS ON(
              ZTBWORKSTATUS.WORK_STATUS_CODE = ZTBEMPLINFOA.WORK_STATUS_CODE AND ZTBWORKSTATUS.CTR_CD = ZTBEMPLINFOA.CTR_CD
            ) 
            LEFT JOIN ZTBFACTORY ON (
              ZTBFACTORY.FACTORY_CODE = ZTBEMPLINFOA.FACTORY_CODE AND ZTBFACTORY.CTR_CD = ZTBEMPLINFOA.CTR_CD
            ) 
            LEFT JOIN ZTBJOB ON (
              ZTBJOB.JOB_CODE = ZTBEMPLINFOA.JOB_CODE AND ZTBJOB.CTR_CD = ZTBEMPLINFOA.CTR_CD
            ) 
            LEFT JOIN ZTBPOSITION ON (
              ZTBPOSITION.POSITION_CODE = ZTBEMPLINFOA.POSITION_CODE AND ZTBPOSITION.CTR_CD = ZTBEMPLINFOA.CTR_CD
            ) 
            LEFT JOIN ZTBWORKSHIFT ON (
              ZTBWORKSHIFT.WORK_SHIFT_CODE = ZTBEMPLINFOA.WORK_SHIFT_CODE AND ZTBWORKSHIFT.CTR_CD = ZTBEMPLINFOA.CTR_CD
            ) 
            LEFT JOIN ZTBWORKPOSITION ON (
              ZTBWORKPOSITION.WORK_POSITION_CODE = ZTBEMPLINFOA.WORK_POSITION_CODE AND ZTBWORKPOSITION.CTR_CD = ZTBEMPLINFOA.CTR_CD
            ) 
            LEFT JOIN ZTBSUBDEPARTMENT ON (
              ZTBSUBDEPARTMENT.SUBDEPTCODE = ZTBWORKPOSITION.SUBDEPTCODE AND ZTBSUBDEPARTMENT.CTR_CD = ZTBWORKPOSITION.CTR_CD
            ) 
            LEFT JOIN ZTBMAINDEPARMENT ON (
              ZTBMAINDEPARMENT.MAINDEPTCODE = ZTBSUBDEPARTMENT.MAINDEPTCODE AND ZTBMAINDEPARMENT.CTR_CD = ZTBSUBDEPARTMENT.CTR_CD
            ) 
            LEFT JOIN ZTBOFFREGISTRATIONTB ON (
              ZTBOFFREGISTRATIONTB.EMPL_NO = ZTBATTENDANCETB.EMPL_NO 
              AND ZTBOFFREGISTRATIONTB.APPLY_DATE = ZTBATTENDANCETB.APPLY_DATE
              AND ZTBOFFREGISTRATIONTB.CTR_CD = ZTBATTENDANCETB.CTR_CD
            ) 
            LEFT JOIN ZTBREASON ON (
              ZTBOFFREGISTRATIONTB.REASON_CODE = ZTBREASON.REASON_CODE
              AND ZTBOFFREGISTRATIONTB.CTR_CD = ZTBREASON.CTR_CD
            )   
      WHERE ZTBEMPLINFOA.WORK_STATUS_CODE =1 AND ZTBEMPLINFOA.CTR_CD='${DATA.CTR_CD}'
      ) AS EMPL_LIST
      GROUP BY EMPL_LIST.MAINDEPTNAME
)AS DIEMDANHBP
LEFT JOIN 
(
SELECT pvtb.MAINDEPTNAME, (pvtb.[Phép năm]+ pvtb.[Nửa phép]+pvtb.[Nghỉ việc riêng]+pvtb.[Nghỉ ốm]+pvtb.[Chế độ]+pvtb.[Không lý do]) AS TOTAL, 
pvtb.[Phép năm], pvtb.[Nửa phép],pvtb.[Nghỉ việc riêng],pvtb.[Nghỉ ốm],pvtb.[Chế độ],pvtb.[Không lý do]
FROM 
(
SELECT XX.MAINDEPTNAME,XX.REASON_NAME FROM  (
          SELECT  
      ZTBEMPLINFOA.DATE_COLUMN,
            ZTBEMPLINFOA.EMPL_NO, 
            CMS_ID, 
            MIDLAST_NAME, 
            FIRST_NAME, 
            PHONE_NUMBER, 
            SEX_NAME, 
            WORK_STATUS_NAME, 
            FACTORY_NAME, 
            JOB_NAME, 
            WORK_SHIF_NAME, 
            WORK_POSITION_NAME, 
            SUBDEPTNAME, 
            MAINDEPTNAME, 
            REQUEST_DATE, 
            ZTBATTENDANCETB.APPLY_DATE, 
            APPROVAL_STATUS, 
            OFF_ID, 
            CA_NGHI, 
            ON_OFF, 
            OVERTIME_INFO, 
            OVERTIME, 
      CASE WHEN ON_OFF is null AND OFF_ID is null AND DATEPART(WEEKDAY,ZTBEMPLINFOA.DATE_COLUMN)<>1 THEN N'Không lý do' ELSE REASON_NAME END AS REASON_NAME,             
            ZTBOFFREGISTRATIONTB.REMARK, 
            ZTBATTENDANCETB.XACNHAN,
            ZTBEMPLINFOA.CTR_CD
          FROM 
            (SELECT DATE_COLUMN, EMPL_NO,CMS_ID,FIRST_NAME,MIDLAST_NAME,DOB,HOMETOWN,SEX_CODE,ADD_PROVINCE,ADD_DISTRICT,ADD_COMMUNE,ADD_VILLAGE,PHONE_NUMBER,WORK_START_DATE,PASSWORD,EMAIL,WORK_POSITION_CODE,WORK_SHIFT_CODE,POSITION_CODE,JOB_CODE,FACTORY_CODE,WORK_STATUS_CODE,REMARK,ONLINE_DATETIME,EMPL_IMAGE,RESIGN_DATE,DATETABLE.CTR_CD FROM DATETABLE CROSS JOIN ZTBEMPLINFO WHERE DATETABLE.DATE_COLUMN BETWEEN @startdate AND @enddate AND ZTBEMPLINFO.WORK_STATUS_CODE<>0) AS ZTBEMPLINFOA 
            LEFT JOIN (SELECT DATETABLE.CTR_CD, DATETABLE.DATE_COLUMN, ZTBATTENDANCETB.EMPL_NO,  ZTBATTENDANCETB.APPLY_DATE,  ZTBATTENDANCETB.ON_OFF,  ZTBATTENDANCETB.REMARK,  ZTBATTENDANCETB.OVERTIME_INFO, ZTBATTENDANCETB.OVERTIME, ZTBATTENDANCETB.XACNHAN,CURRENT_TEAM FROM DATETABLE LEFT JOIN ZTBATTENDANCETB ON (DATETABLE.DATE_COLUMN = ZTBATTENDANCETB.APPLY_DATE AND DATETABLE.CTR_CD = ZTBATTENDANCETB.CTR_CD) WHERE DATETABLE.DATE_COLUMN BETWEEN @startdate AND @enddate) AS ZTBATTENDANCETB ON (
              ZTBEMPLINFOA.EMPL_NO = ZTBATTENDANCETB.EMPL_NO AND ZTBEMPLINFOA.DATE_COLUMN = ZTBATTENDANCETB.APPLY_DATE AND ZTBEMPLINFOA.CTR_CD = ZTBATTENDANCETB.CTR_CD
            ) 
            LEFT JOIN ZTBSEX ON (
              ZTBSEX.SEX_CODE = ZTBEMPLINFOA.SEX_CODE AND ZTBSEX.CTR_CD = ZTBEMPLINFOA.CTR_CD
            ) 
            LEFT JOIN ZTBWORKSTATUS ON(
              ZTBWORKSTATUS.WORK_STATUS_CODE = ZTBEMPLINFOA.WORK_STATUS_CODE AND ZTBWORKSTATUS.CTR_CD = ZTBEMPLINFOA.CTR_CD
            ) 
            LEFT JOIN ZTBFACTORY ON (
              ZTBFACTORY.FACTORY_CODE = ZTBEMPLINFOA.FACTORY_CODE AND ZTBFACTORY.CTR_CD = ZTBEMPLINFOA.CTR_CD
            ) 
            LEFT JOIN ZTBJOB ON (
              ZTBJOB.JOB_CODE = ZTBEMPLINFOA.JOB_CODE AND ZTBJOB.CTR_CD = ZTBEMPLINFOA.CTR_CD
            ) 
            LEFT JOIN ZTBPOSITION ON (
              ZTBPOSITION.POSITION_CODE = ZTBEMPLINFOA.POSITION_CODE AND ZTBPOSITION.CTR_CD = ZTBEMPLINFOA.CTR_CD
            ) 
            LEFT JOIN ZTBWORKSHIFT ON (
              ZTBWORKSHIFT.WORK_SHIFT_CODE = ZTBEMPLINFOA.WORK_SHIFT_CODE AND ZTBWORKSHIFT.CTR_CD = ZTBEMPLINFOA.CTR_CD
            ) 
            LEFT JOIN ZTBWORKPOSITION ON (
              ZTBWORKPOSITION.WORK_POSITION_CODE = ZTBEMPLINFOA.WORK_POSITION_CODE AND ZTBWORKPOSITION.CTR_CD = ZTBEMPLINFOA.CTR_CD
            ) 
            LEFT JOIN ZTBSUBDEPARTMENT ON (
              ZTBSUBDEPARTMENT.SUBDEPTCODE = ZTBWORKPOSITION.SUBDEPTCODE AND ZTBSUBDEPARTMENT.CTR_CD = ZTBWORKPOSITION.CTR_CD
            ) 
            LEFT JOIN ZTBMAINDEPARMENT ON (
              ZTBMAINDEPARMENT.MAINDEPTCODE = ZTBSUBDEPARTMENT.MAINDEPTCODE AND ZTBMAINDEPARMENT.CTR_CD = ZTBSUBDEPARTMENT.CTR_CD
            ) 
            LEFT JOIN ZTBOFFREGISTRATIONTB ON (
              ZTBOFFREGISTRATIONTB.EMPL_NO = ZTBATTENDANCETB.EMPL_NO 
              AND ZTBOFFREGISTRATIONTB.APPLY_DATE = ZTBATTENDANCETB.APPLY_DATE
              AND ZTBOFFREGISTRATIONTB.CTR_CD = ZTBATTENDANCETB.CTR_CD
            ) 
            LEFT JOIN ZTBREASON ON (
              ZTBOFFREGISTRATIONTB.REASON_CODE = ZTBREASON.REASON_CODE
              AND ZTBOFFREGISTRATIONTB.CTR_CD = ZTBREASON.CTR_CD
            )   
      WHERE ZTBEMPLINFOA.WORK_STATUS_CODE =1 AND ZTBEMPLINFOA.CTR_CD='${DATA.CTR_CD}'
      AND CASE WHEN ON_OFF is null AND OFF_ID is null AND DATEPART(WEEKDAY,ZTBEMPLINFOA.DATE_COLUMN)<>1  THEN N'Không lý do' ELSE REASON_NAME END is not null) AS XX
     ) AS BANGNGUON
     PIVOT
     (
     COUNT(BANGNGUON.REASON_NAME)
     FOR BANGNGUON.REASON_NAME IN ([Phép năm],[Nửa phép],[Nghỉ việc riêng],[Nghỉ ốm],[Chế độ],[Không lý do])
     ) AS pvtb
) BANGNGHI
ON(DIEMDANHBP.MAINDEPTNAME = BANGNGHI.MAINDEPTNAME)`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "loadbanggia":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = ` WHERE 1=1`;
          if (DATA.ALLTIME !== true) {
            condition += ` AND BB.[1] BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE}'`;
          }
          if (DATA.G_CODE !== "") {
            condition += ` AND  M100.G_CODE='${DATA.G_CODE}'`;
          }
          if (DATA.G_NAME !== "") {
            condition += ` AND M100.G_NAME LIKE '%${DATA.G_NAME}%'`;
          }
          if (DATA.M_NAME !== "") {
            condition += ` AND M100.PROD_MAIN_MATERIAL LIKE '%${DATA.M_NAME}%'`;
          }
          if (DATA.CUST_NAME_KD !== "") {
            condition += ` AND M110.CUST_NAME_KD LIKE '${DATA.CUST_NAME_KD}'`;
          }
          let setpdQuery = ` SELECT 
            M110.CUST_NAME_KD, M100.G_CODE, M100.G_NAME, M100.G_NAME_KD, M100.PROD_MAIN_MATERIAL, AA.MOQ, AA.[1] AS PRICE1,AA.[2] AS PRICE2,AA.[3] AS PRICE3,AA.[4] AS PRICE4,AA.[5] AS PRICE5,AA.[6] AS PRICE6,AA.[7] AS PRICE7,AA.[8] AS PRICE8,AA.[9] AS PRICE9,AA.[10] AS PRICE10,AA.[11] AS PRICE11,AA.[12] AS PRICE12,AA.[13] AS PRICE13,AA.[14] AS PRICE14,AA.[15] AS PRICE15,AA.[16] AS PRICE16,AA.[17] AS PRICE17,AA.[18] AS PRICE18,AA.[19] AS PRICE19,AA.[20] AS PRICE20, BB.[1] AS PRICE_DATE1,BB.[2] AS PRICE_DATE2,BB.[3] AS PRICE_DATE3,BB.[4] AS PRICE_DATE4,BB.[5] AS PRICE_DATE5,BB.[6] AS PRICE_DATE6,BB.[7] AS PRICE_DATE7,BB.[8] AS PRICE_DATE8,BB.[9] AS PRICE_DATE9,BB.[10] AS PRICE_DATE10,BB.[11] AS PRICE_DATE11,BB.[12] AS PRICE_DATE12,BB.[13] AS PRICE_DATE13,BB.[14] AS PRICE_DATE14,BB.[15] AS PRICE_DATE15,BB.[16] AS PRICE_DATE16,BB.[17] AS PRICE_DATE17,BB.[18] AS PRICE_DATE18,BB.[19] AS PRICE_DATE19,BB.[20] AS PRICE_DATE20
            FROM 
            (
              SELECT * FROM 
              (SELECT CUST_CD, G_CODE, MOQ, CTR_CD, RANK() OVER (PARTITION BY CUST_CD, G_CODE, MOQ, CTR_CD ORDER BY PRICE_DATE ASC) AS RANK_NO, PROD_PRICE FROM PROD_PRICE_TABLE)
              as bangnguon
              PIVOT 
              ( SUM(PROD_PRICE)
              for RANK_NO IN ([1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],[19],[20])
              ) AS pvtb
            ) AS AA
            LEFT JOIN
            (
              SELECT * FROM 
              (SELECT CUST_CD, G_CODE, MOQ, CTR_CD, PRICE_DATE , RANK() OVER (PARTITION BY CUST_CD, G_CODE, MOQ, CTR_CD ORDER BY PRICE_DATE ASC) AS RANK_NO FROM PROD_PRICE_TABLE)
              as bangnguon
              PIVOT 
              ( MAX(PRICE_DATE)
              for RANK_NO IN ([1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],[19],[20])
              ) AS pvtb	
            )
            AS BB
            ON (AA.CUST_CD = BB.CUST_CD AND AA.MOQ = BB.MOQ AND AA.G_CODE = BB.G_CODE AND AA.CTR_CD = BB.CTR_CD)
            LEFT JOIN M110 ON (M110.CUST_CD = AA.CUST_CD AND M110.CTR_CD = AA.CTR_CD)
            LEFT JOIN M100 ON (M100.G_CODE = AA.G_CODE AND M100.CTR_CD = AA.CTR_CD)
            ${condition}
            AND AA.CTR_CD='${DATA.CTR_CD}'
            `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "loadbanggia2":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = ` WHERE 1=1`;
          if (DATA.ALLTIME !== true) {
            condition += ` AND PROD_PRICE_TABLE.PRICE_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE}'`;
          }
          if (DATA.G_CODE !== "") {
            condition += ` AND  M100.G_CODE='${DATA.G_CODE}'`;
          }
          if (DATA.G_NAME !== "") {
            condition += ` AND M100.G_NAME LIKE '%${DATA.G_NAME}%'`;
          }
          if (DATA.M_NAME !== "") {
            condition += ` AND M100.PROD_MAIN_MATERIAL LIKE '%${DATA.M_NAME}%'`;
          }
          if (DATA.CUST_NAME_KD !== "") {
            condition += ` AND M110.CUST_NAME_KD LIKE '${DATA.CUST_NAME_KD}'`;
          }
          let setpdQuery = ` 
          SELECT PROD_PRICE_TABLE.PROD_ID, M100.PROD_MAIN_MATERIAL, M110.CUST_NAME_KD ,PROD_PRICE_TABLE.CUST_CD,PROD_PRICE_TABLE.G_CODE,M100.G_NAME,M100.G_NAME_KD, M100.DESCR, M100.PROD_DVT, PROD_PRICE_TABLE.PRICE_DATE,PROD_PRICE_TABLE.MOQ,PROD_PRICE_TABLE.PROD_PRICE,PROD_PRICE_TABLE.BEP, PROD_PRICE_TABLE.INS_DATE,PROD_PRICE_TABLE.INS_EMPL,PROD_PRICE_TABLE.UPD_DATE,PROD_PRICE_TABLE.UPD_EMPL,PROD_PRICE_TABLE.REMARK,PROD_PRICE_TABLE.FINAL,AA.DUPLICATE
          FROM 
          PROD_PRICE_TABLE
          LEFT JOIN 
          M100 ON (M100.G_CODE = PROD_PRICE_TABLE.G_CODE AND M100.CTR_CD = PROD_PRICE_TABLE.CTR_CD)
          LEFT JOIN
          M110 ON (M110.CUST_CD = PROD_PRICE_TABLE.CUST_CD AND M110.CTR_CD = PROD_PRICE_TABLE.CTR_CD)       
          LEFT JOIN (
          SELECT G_CODE, CUST_CD, CTR_CD, PROD_PRICE, COUNT(G_CODE) AS DUPLICATE FROM PROD_PRICE_TABLE 
          GROUP BY G_CODE, CUST_CD, CTR_CD, PROD_PRICE
          ) AS AA ON (AA.CUST_CD = PROD_PRICE_TABLE.CUST_CD AND AA.G_CODE = PROD_PRICE_TABLE.G_CODE AND AA.CTR_CD = PROD_PRICE_TABLE.CTR_CD AND AA.PROD_PRICE=PROD_PRICE_TABLE.PROD_PRICE)
            ${condition}
            AND PROD_PRICE_TABLE.CTR_CD='${DATA.CTR_CD}'
            ORDER BY M100.G_CODE ASC, PROD_PRICE_TABLE.PRICE_DATE ASC
            `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "loadbanggiamoinhat":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = ` WHERE 1=1`;
          if (DATA.ALLTIME !== true) {
            condition += ` AND PROD_PRICE_TABLE.PRICE_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE}'`;
          }
          if (DATA.G_CODE !== "") {
            condition += ` AND  M100.G_CODE='${DATA.G_CODE}'`;
          }
          if (DATA.G_NAME !== "") {
            condition += ` AND M100.G_NAME LIKE '%${DATA.G_NAME}%'`;
          }
          if (DATA.M_NAME !== "") {
            condition += ` AND M100.PROD_MAIN_MATERIAL LIKE '%${DATA.M_NAME}%'`;
          }
          if (DATA.CUST_NAME_KD !== "") {
            condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`;
          }
          if (DATA.CUST_CD !== "" && DATA.CUST_CD !== undefined) {
            condition += ` AND M110.CUST_CD = '${DATA.CUST_CD}'`;
          }
          let setpdQuery = ` 
          SELECT BB.DUPLICATE, M110.CUST_NAME_KD ,PROD_PRICE_TABLE.CUST_CD,PROD_PRICE_TABLE.PROD_ID,PROD_PRICE_TABLE.G_CODE,M100.G_NAME, M100.G_NAME_KD, M100.DESCR, M100.PROD_DVT, M100.PROD_MAIN_MATERIAL, PROD_PRICE_TABLE.PRICE_DATE,PROD_PRICE_TABLE.MOQ,PROD_PRICE_TABLE.PROD_PRICE,PROD_PRICE_TABLE.BEP, PROD_PRICE_TABLE.INS_DATE,PROD_PRICE_TABLE.INS_EMPL,PROD_PRICE_TABLE.UPD_DATE,PROD_PRICE_TABLE.UPD_EMPL,PROD_PRICE_TABLE.REMARK,PROD_PRICE_TABLE.FINAL, M100.G_WIDTH, M100.G_LENGTH, M100.G_NAME_KT,M100.EQ1, M100.EQ2, M100.EQ3, M100.EQ4
          FROM 
          (SELECT CUST_CD, G_CODE, MOQ, CTR_CD, MAX(PRICE_DATE) AS LAST_PRICE_DATE FROM PROD_PRICE_TABLE GROUP BY CUST_CD, G_CODE, MOQ, CTR_CD) AS AA
          LEFT JOIN 
          PROD_PRICE_TABLE
          ON (AA.CUST_CD = PROD_PRICE_TABLE.CUST_CD AND AA.G_CODE = PROD_PRICE_TABLE.G_CODE AND AA.LAST_PRICE_DATE = PROD_PRICE_TABLE.PRICE_DATE AND AA.MOQ = PROD_PRICE_TABLE.MOQ AND AA.CTR_CD = PROD_PRICE_TABLE.CTR_CD) 
          LEFT JOIN 
          M100 ON (M100.G_CODE = PROD_PRICE_TABLE.G_CODE AND M100.CTR_CD = PROD_PRICE_TABLE.CTR_CD)
          LEFT JOIN
          M110 ON (M110.CUST_CD = PROD_PRICE_TABLE.CUST_CD AND M110.CTR_CD = PROD_PRICE_TABLE.CTR_CD)
          LEFT JOIN (
          SELECT G_CODE, CUST_CD, PROD_PRICE, CTR_CD, COUNT(G_CODE) AS DUPLICATE FROM PROD_PRICE_TABLE 
          GROUP BY G_CODE, CUST_CD, PROD_PRICE, CTR_CD
          ) AS BB ON (BB.CUST_CD = PROD_PRICE_TABLE.CUST_CD AND BB.G_CODE = PROD_PRICE_TABLE.G_CODE AND BB.PROD_PRICE=PROD_PRICE_TABLE.PROD_PRICE AND BB.CTR_CD = PROD_PRICE_TABLE.CTR_CD)
            ${condition}
            AND PROD_PRICE_TABLE.CTR_CD='${DATA.CTR_CD}'
            ORDER BY M100.G_CODE ASC, PROD_PRICE_TABLE.MOQ DESC, PROD_PRICE_TABLE.PRICE_DATE ASC
            `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "loadpono":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `SELECT PO_NO, CUST_CD, G_CODE, PO_DATE,RD_DATE, PO_QTY FROM ZTBPOTable WHERE CTR_CD='${DATA.CTR_CD}' AND G_CODE='${DATA.G_CODE}' AND CUST_CD ='${DATA.CUST_CD}' ORDER BY PO_DATE DESC`;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "checkgiaExist":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `SELECT * FROM PROD_PRICE_TABLE WHERE CTR_CD='${DATA.CTR_CD}' AND CUST_CD ='${DATA.CUST_CD}' AND G_CODE ='${DATA.G_CODE}' AND PRICE_DATE='${DATA.PRICE_DATE}' AND MOQ='${DATA.MOQ}'`;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "updategiasp":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `UPDATE PROD_PRICE_TABLE SET PROD_PRICE=${DATA.PROD_PRICE},BEP=${DATA.BEP} WHERE CTR_CD='${DATA.CTR_CD}' AND CUST_CD ='${DATA.CUST_CD}' AND G_CODE ='${DATA.G_CODE}' AND PRICE_DATE='${DATA.PRICE_DATE}' AND MOQ='${DATA.MOQ}'`;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "upgiasp":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `INSERT INTO PROD_PRICE_TABLE (CTR_CD, CUST_CD, G_CODE, PRICE_DATE,  MOQ, PROD_PRICE, BEP,INS_DATE, INS_EMPL, UPD_DATE, UPD_EMPL, REMARK, FINAL, CURRENCY, RATE) 
          VALUES ('${DATA.CTR_CD}','${DATA.CUST_CD}','${DATA.G_CODE}','${DATA.PRICE_DATE}','${DATA.MOQ}','${DATA.PROD_PRICE}','${DATA.BEP}',GETDATE(),'${EMPL_NO}',GETDATE(),'${EMPL_NO}',N'${DATA.REMARK}','N','USD', 1)`;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "autopheduyetgiaall":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `UPDATE PROD_PRICE_TABLE SET FINAL = 'Y' WHERE CTR_CD='${DATA.CTR_CD}'`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "dongbogiasptupo":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
          INSERT INTO PROD_PRICE_TABLE (CTR_CD, CUST_CD, G_CODE, PRICE_DATE, MOQ, PROD_PRICE, INS_DATE, INS_EMPL, UPD_DATE, UPD_EMPL, REMARK, FINAL, CURRENCY, RATE, BEP)
          SELECT '${DATA.CTR_CD}' AS CTR_CD, AA.CUST_CD, AA.G_CODE, AA.PRICE_DATE, AA.MOQ, AA.PROD_PRICE, GETDATE() AS INS_DATE,'${EMPL_NO}' AS INS_EMPL, GETDATE() AS UPD_DATE,'${EMPL_NO}' AS UPD_EMPL, 'AUTO' AS REMARK, 'N' AS FINAL, 'USD' AS CURRENCY, null as RATE, 0 as BEP FROM 
          (
          SELECT XX.CTR_CD, XX.G_CODE, XX.CUST_CD, XX.MOQ, XX.PRICE_DATE, MIN(XX.PROD_PRICE) AS PROD_PRICE FROM 
          (
          SELECT DISTINCT CTR_CD, G_CODE, CUST_CD, 1 AS MOQ, ROUND(PROD_PRICE,6) AS PROD_PRICE, MIN(PO_DATE) AS PRICE_DATE FROM ZTBPOTable GROUP BY CTR_CD, G_CODE, CUST_CD, PROD_PRICE
          ) AS XX GROUP BY XX.CTR_CD, XX.G_CODE, XX.CUST_CD, XX.MOQ, XX.PRICE_DATE
          ) AS AA
          LEFT JOIN 
          (
          SELECT CTR_CD, G_CODE, CUST_CD, MOQ, PROD_PRICE, PRICE_DATE FROM PROD_PRICE_TABLE
          ) AS BB
          ON (AA.CTR_CD = BB.CTR_CD AND AA.G_CODE = BB.G_CODE AND AA.CUST_CD = BB.CUST_CD AND AA.MOQ = BB.MOQ AND AA.PROD_PRICE = BB.PROD_PRICE AND AA.PRICE_DATE = BB.PRICE_DATE)
          WHERE AA.CTR_CD='${DATA.CTR_CD}' AND NOT EXISTS (SELECT CTR_CD, G_CODE, CUST_CD, MOQ, PROD_PRICE, PRICE_DATE FROM PROD_PRICE_TABLE WHERE PROD_PRICE_TABLE.CTR_CD = AA.CTR_CD AND PROD_PRICE_TABLE.G_CODE = AA.G_CODE AND PROD_PRICE_TABLE.CUST_CD = AA.CUST_CD AND PROD_PRICE_TABLE.PRICE_DATE = AA.PRICE_DATE AND PROD_PRICE_TABLE.MOQ = AA.MOQ) `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "getmachinelist":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
          SELECT DISTINCT SUBSTRING(EQ_NAME,1,2) AS EQ_NAME  FROM ZTB_SX_EQ_STATUS WHERE CTR_CD='${DATA.CTR_CD}'`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "loadbarcodemanager":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
          SELECT pvtb.G_CODE, pvtb.G_NAME, pvtb.BARCODE_STT, pvtb.BARCODE_TYPE, pvtb.[RND] AS BARCODE_RND, pvtb.[DTC] AS BARCODE_INSP, pvtb.[KT] AS BARCODE_RELI, 
          CASE WHEN pvtb.[RND] = pvtb.[DTC] AND pvtb.[KT] = pvtb.[DTC] THEN 'OK' ELSE 'NG' END AS STATUS
          FROM 
          (
          SELECT ZTB_BARCODE_MANAGER.CTR_CD, ZTB_BARCODE_MANAGER.G_CODE, M100.G_NAME, ZTB_BARCODE_MANAGER.BARCODE_STT, ZTB_BARCODE_MANAGER.BARCODE_TYPE, ZTB_BARCODE_MANAGER.MAINDEPTNAME, ZTB_BARCODE_MANAGER.BARCODE_CONTENT FROM ZTB_BARCODE_MANAGER LEFT JOIN M100 ON (M100.G_CODE = ZTB_BARCODE_MANAGER.G_CODE AND M100.CTR_CD = ZTB_BARCODE_MANAGER.CTR_CD)
          ) AS bangnguon
          PIVOT
          (
            MIN(bangnguon.BARCODE_CONTENT) 
            FOR bangnguon.MAINDEPTNAME IN ([RND],[DTC],[KT])
          ) AS pvtb
          WHERE pvtb.CTR_CD='${DATA.CTR_CD}'
          `;
          setpdQuery = `
          SELECT ZTB_BARCODE_MANAGER.CTR_CD, ZTB_BARCODE_MANAGER.G_CODE, M100.G_NAME, ZTB_BARCODE_MANAGER.BARCODE_STT, ZTB_BARCODE_MANAGER.BARCODE_TYPE, ZTB_BARCODE_MANAGER.RND AS BARCODE_RND, ZTB_BARCODE_MANAGER.DTC AS BARCODE_RELI, ZTB_BARCODE_MANAGER.KT AS BARCODE_INSP, CASE WHEN (RND= DTC COLLATE Latin1_General_CS_AS AND DTC=KT COLLATE Latin1_General_CS_AS ) AND (RND is not null) THEN 'OK' ELSE 'NG' END AS STATUS, P500_A.G_CODE AS SX_STATUS 
          FROM ZTB_BARCODE_MANAGER 
          LEFT JOIN M100 ON (ZTB_BARCODE_MANAGER.G_CODE = M100.G_CODE AND ZTB_BARCODE_MANAGER.CTR_CD = M100.CTR_CD)
          LEFT JOIN (SELECT DISTINCT CTR_CD,G_CODE FROM P500) AS P500_A ON P500_A.G_CODE = ZTB_BARCODE_MANAGER.G_CODE AND P500_A.CTR_CD = ZTB_BARCODE_MANAGER.CTR_CD
          WHERE ZTB_BARCODE_MANAGER.CTR_CD='${DATA.CTR_CD}'
          `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "checkbarcodeExist":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
            SELECT * FROM ZTB_BARCODE_MANAGER WHERE CTR_CD='${DATA.CTR_CD}' AND G_CODE ='${DATA.G_CODE}' AND BARCODE_STT=${DATA.BARCODE_STT}
          `;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "addBarcode":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQueryrnd = `
            INSERT INTO ZTB_BARCODE_MANAGER (CTR_CD, G_CODE, BARCODE_STT, BARCODE_TYPE,  RND, INS_DATE, INS_EMPL, UPD_DATE, UPD_EMPL) VALUES ('${DATA.CTR_CD}','${DATA.G_CODE}','${DATA.BARCODE_STT}','${DATA.BARCODE_TYPE}','${DATA.BARCODE_RND}', GETDATE(), '${EMPL_NO}', GETDATE(), '${EMPL_NO}')
          `;
          console.log("setpdQueryrnd", setpdQueryrnd);
          checkkq = await queryDB(setpdQueryrnd);
          res.send(checkkq);
        })();
        break;
      case "updateBarcode":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQueryrnd = `
            UPDATE ZTB_BARCODE_MANAGER SET BARCODE_TYPE='${DATA.BARCODE_TYPE}', RND='${DATA.BARCODE_RND}' WHERE CTR_CD='${DATA.CTR_CD}' AND G_CODE='${DATA.G_CODE}' AND BARCODE_STT=${DATA.BARCODE_STT}
          `;
          checkkq = await queryDB(setpdQueryrnd);
          //console.log(setpdQueryrnd);
          res.send(checkkq);
        })();
        break;
      case "deleteBarcode":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQueryrnd = `
            DELETE FROM ZTB_BARCODE_MANAGER  WHERE CTR_CD='${DATA.CTR_CD}' AND G_CODE='${DATA.G_CODE}' AND BARCODE_STT=${DATA.BARCODE_STT}
          `;
          checkkq = await queryDB(setpdQueryrnd);
          //console.log(setpdQueryrnd);
          res.send(checkkq);
        })();
        break;
      case "capabydeliveryplan":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
          DECLARE @tradate date;
           set @tradate ='${DATA.PLAN_DATE}';           
           SELECT * FROM 
		   (		   
           SELECT XX.CTR_CD, XX.FACTORY, XX.EQ,
           CASE
           WHEN XX.LT = 'LT1' THEN @tradate
           WHEN XX.LT = 'LT2' THEN DATEADD(DAY, 1, @tradate)
           WHEN XX.LT = 'LT3' THEN DATEADD(DAY, 2, @tradate)
           WHEN XX.LT = 'LT4' THEN DATEADD(DAY, 3, @tradate)
           WHEN XX.LT = 'LT5' THEN DATEADD(DAY, 4, @tradate)
           WHEN XX.LT = 'LT6' THEN DATEADD(DAY, 5, @tradate)
           WHEN XX.LT = 'LT7' THEN DATEADD(DAY, 6, @tradate)
           WHEN XX.LT = 'LT8' THEN DATEADD(DAY, 7, @tradate)
		   WHEN XX.LT = 'LT9' THEN DATEADD(DAY, 8, @tradate)
		   WHEN XX.LT = 'LT10' THEN DATEADD(DAY, 9, @tradate)
		   WHEN XX.LT = 'LT11' THEN DATEADD(DAY, 10, @tradate)
		   WHEN XX.LT = 'LT12' THEN DATEADD(DAY, 11, @tradate)
		   WHEN XX.LT = 'LT13' THEN DATEADD(DAY, 12, @tradate)
		   WHEN XX.LT = 'LT14' THEN DATEADD(DAY, 13, @tradate)
		   WHEN XX.LT = 'LT15' THEN DATEADD(DAY, 14, @tradate)		   
           END AS PL_DATE
           , SUM(XX.LEATIME) AS LEADTIME FROM
           (
           SELECT upv.CTR_CD, upv.FACTORY, upv.EQ1 AS EQ,upv.G_CODE, upv.LT, upv.LEATIME FROM
           (
           SELECT M100.CTR_CD, M100.FACTORY, M100.EQ1, M100.G_CODE, ZTBPLANTB.PLAN_DATE,
          CASE WHEN ZTBPLANTB.D1 is null OR ZTBPLANTB.D1 =0 THEN 0 ELSE (ZTBPLANTB.D1*1.0/M100.UPH1*60*M100.Step1 + M100.Setting1)*1.2 END AS LT1,
          CASE WHEN ZTBPLANTB.D2 is null OR ZTBPLANTB.D2 =0 THEN 0 ELSE (ZTBPLANTB.D2*1.0/M100.UPH1*60*M100.Step1 + M100.Setting1)*1.2 END AS LT2,
          CASE WHEN ZTBPLANTB.D3 is null OR ZTBPLANTB.D3 =0 THEN 0 ELSE (ZTBPLANTB.D3*1.0/M100.UPH1*60*M100.Step1 + M100.Setting1)*1.2 END AS LT3,
          CASE WHEN ZTBPLANTB.D4 is null OR ZTBPLANTB.D4 =0 THEN 0 ELSE (ZTBPLANTB.D4*1.0/M100.UPH1*60*M100.Step1 + M100.Setting1)*1.2 END AS LT4,
          CASE WHEN ZTBPLANTB.D5 is null OR ZTBPLANTB.D5 =0 THEN 0 ELSE (ZTBPLANTB.D5*1.0/M100.UPH1*60*M100.Step1 + M100.Setting1)*1.2 END AS LT5,
          CASE WHEN ZTBPLANTB.D6 is null OR ZTBPLANTB.D6 =0 THEN 0 ELSE (ZTBPLANTB.D6*1.0/M100.UPH1*60*M100.Step1 + M100.Setting1)*1.2 END AS LT6,
          CASE WHEN ZTBPLANTB.D7 is null OR ZTBPLANTB.D7 =0 THEN 0 ELSE (ZTBPLANTB.D7*1.0/M100.UPH1*60*M100.Step1 + M100.Setting1)*1.2 END AS LT7,
          CASE WHEN ZTBPLANTB.D8 is null OR ZTBPLANTB.D8 =0 THEN 0 ELSE (ZTBPLANTB.D8*1.0/M100.UPH1*60*M100.Step1 + M100.Setting1)*1.2 END AS LT8,
          CASE WHEN ZTBPLANTB.D9 is null OR ZTBPLANTB.D9 =0 THEN 0 ELSE (ZTBPLANTB.D9*1.0/M100.UPH1*60*M100.Step1 + M100.Setting1)*1.2 END AS LT9,
          CASE WHEN ZTBPLANTB.D10 is null OR ZTBPLANTB.D10 =0 THEN 0 ELSE (ZTBPLANTB.D10*1.0/M100.UPH1*60*M100.Step1 + M100.Setting1)*1.2 END AS LT10,
          CASE WHEN ZTBPLANTB.D11 is null OR ZTBPLANTB.D11 =0 THEN 0 ELSE (ZTBPLANTB.D11*1.0/M100.UPH1*60*M100.Step1 + M100.Setting1)*1.2 END AS LT11,
          CASE WHEN ZTBPLANTB.D12 is null OR ZTBPLANTB.D12 =0 THEN 0 ELSE (ZTBPLANTB.D12*1.0/M100.UPH1*60*M100.Step1 + M100.Setting1)*1.2 END AS LT12,
          CASE WHEN ZTBPLANTB.D13 is null OR ZTBPLANTB.D13 =0 THEN 0 ELSE (ZTBPLANTB.D13*1.0/M100.UPH1*60*M100.Step1 + M100.Setting1)*1.2 END AS LT13,
          CASE WHEN ZTBPLANTB.D14 is null OR ZTBPLANTB.D14 =0 THEN 0 ELSE (ZTBPLANTB.D14*1.0/M100.UPH1*60*M100.Step1 + M100.Setting1)*1.2 END AS LT14,
          CASE WHEN ZTBPLANTB.D15 is null OR ZTBPLANTB.D15 =0 THEN 0 ELSE (ZTBPLANTB.D15*1.0/M100.UPH1*60*M100.Step1 + M100.Setting1)*1.2 END AS LT15
           FROM  ZTBPLANTB LEFT JOIN M100 ON (M100.G_CODE = ZTBPLANTB.G_CODE AND M100.CTR_CD = ZTBPLANTB.CTR_CD)
           WHERE (M100.EQ1 <> 'NA' AND M100.EQ1 <>'NO' AND M100.EQ1 <>'' AND M100.EQ1 is not null) AND  M100.UPH1 <>0 AND ZTBPLANTB.PLAN_DATE = @tradate AND ZTBPLANTB.CTR_CD='${DATA.CTR_CD}'
           ) AS AA
           UNPiVOT
           (
             LEATIME FOR LT IN ([LT1],[LT2],[LT3],[LT4],[LT5],[LT6],[LT7],[LT8],[LT9],[LT10],[LT11],[LT12],[LT13],[LT14],[LT15])
           ) as upv
           UNION ALL
           SELECT upv.CTR_CD, upv.FACTORY, upv.EQ2 AS EQ,upv.G_CODE, upv.LT, upv.LEATIME FROM
           (
           SELECT M100.CTR_CD, M100.FACTORY, M100.EQ2, M100.G_CODE, ZTBPLANTB.PLAN_DATE,
          CASE WHEN ZTBPLANTB.D1 is null OR ZTBPLANTB.D1 =0 THEN 0 ELSE (ZTBPLANTB.D1*1.0/M100.UPH2*60*M100.Step2 + M100.Setting2)*1.2 END AS LT1,
          CASE WHEN ZTBPLANTB.D2 is null OR ZTBPLANTB.D2 =0 THEN 0 ELSE (ZTBPLANTB.D2*1.0/M100.UPH2*60*M100.Step2 + M100.Setting2)*1.2 END AS LT2,
          CASE WHEN ZTBPLANTB.D3 is null OR ZTBPLANTB.D3 =0 THEN 0 ELSE (ZTBPLANTB.D3*1.0/M100.UPH2*60*M100.Step2 + M100.Setting2)*1.2 END AS LT3,
          CASE WHEN ZTBPLANTB.D4 is null OR ZTBPLANTB.D4 =0 THEN 0 ELSE (ZTBPLANTB.D4*1.0/M100.UPH2*60*M100.Step2 + M100.Setting2)*1.2 END AS LT4,
          CASE WHEN ZTBPLANTB.D5 is null OR ZTBPLANTB.D5 =0 THEN 0 ELSE (ZTBPLANTB.D5*1.0/M100.UPH2*60*M100.Step2 + M100.Setting2)*1.2 END AS LT5,
          CASE WHEN ZTBPLANTB.D6 is null OR ZTBPLANTB.D6 =0 THEN 0 ELSE (ZTBPLANTB.D6*1.0/M100.UPH2*60*M100.Step2 + M100.Setting2)*1.2 END AS LT6,
          CASE WHEN ZTBPLANTB.D7 is null OR ZTBPLANTB.D7 =0 THEN 0 ELSE (ZTBPLANTB.D7*1.0/M100.UPH2*60*M100.Step2 + M100.Setting2)*1.2 END AS LT7,
          CASE WHEN ZTBPLANTB.D8 is null OR ZTBPLANTB.D8 =0 THEN 0 ELSE (ZTBPLANTB.D8*1.0/M100.UPH2*60*M100.Step2 + M100.Setting2)*1.2 END AS LT8,
          CASE WHEN ZTBPLANTB.D9 is null OR ZTBPLANTB.D9 =0 THEN 0 ELSE (ZTBPLANTB.D9*1.0/M100.UPH1*60*M100.Step1 + M100.Setting1)*1.2 END AS LT9,
          CASE WHEN ZTBPLANTB.D10 is null OR ZTBPLANTB.D10 =0 THEN 0 ELSE (ZTBPLANTB.D10*1.0/M100.UPH2*60*M100.Step2 + M100.Setting2)*1.2 END AS LT10,
          CASE WHEN ZTBPLANTB.D11 is null OR ZTBPLANTB.D11 =0 THEN 0 ELSE (ZTBPLANTB.D11*1.0/M100.UPH2*60*M100.Step2 + M100.Setting2)*1.2 END AS LT11,
          CASE WHEN ZTBPLANTB.D12 is null OR ZTBPLANTB.D12 =0 THEN 0 ELSE (ZTBPLANTB.D12*1.0/M100.UPH2*60*M100.Step2 + M100.Setting2)*1.2 END AS LT12,
          CASE WHEN ZTBPLANTB.D13 is null OR ZTBPLANTB.D13 =0 THEN 0 ELSE (ZTBPLANTB.D13*1.0/M100.UPH2*60*M100.Step2 + M100.Setting2)*1.2 END AS LT13,
          CASE WHEN ZTBPLANTB.D14 is null OR ZTBPLANTB.D14 =0 THEN 0 ELSE (ZTBPLANTB.D14*1.0/M100.UPH2*60*M100.Step2 + M100.Setting2)*1.2 END AS LT14,
          CASE WHEN ZTBPLANTB.D15 is null OR ZTBPLANTB.D15 =0 THEN 0 ELSE (ZTBPLANTB.D15*1.0/M100.UPH2*60*M100.Step2 + M100.Setting2)*1.2 END AS LT15
           FROM  ZTBPLANTB LEFT JOIN M100 ON (M100.G_CODE = ZTBPLANTB.G_CODE AND M100.CTR_CD = ZTBPLANTB.CTR_CD)
           WHERE (M100.EQ2 <> 'NA' AND M100.EQ2 <>'NO' AND M100.EQ2 <>'' AND M100.EQ2 is not null) AND M100.UPH2 <>0 AND ZTBPLANTB.PLAN_DATE = @tradate AND ZTBPLANTB.CTR_CD='${DATA.CTR_CD}'
           ) AS AA
           UNPiVOT
           (
             LEATIME FOR LT IN ([LT1],[LT2],[LT3],[LT4],[LT5],[LT6],[LT7],[LT8],[LT9],[LT10],[LT11],[LT12],[LT13],[LT14],[LT15])
           ) as upv
           ) AS XX          
           GROUP BY XX.CTR_CD, XX.FACTORY, XX.EQ, XX.LT
		   ) AS YY
		   WHERE  YY.FACTORY='${DATA.FACTORY}' AND YY.CTR_CD='${DATA.CTR_CD}'
       ORDER BY YY.PL_DATE ASC
       `;
          /* WHERE YY.EQ='${DATA.EQ}' AND YY.FACTORY='${DATA.FACTORY}' */
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "loadquanlygiaonhan":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
          SELECT TOP 100 KNIFE_FILM.KNIFE_FILM_ID,KNIFE_FILM.FACTORY_NAME,KNIFE_FILM.NGAYBANGIAO,KNIFE_FILM.G_CODE, M100.G_NAME, M100.PROD_TYPE, M110.CUST_NAME_KD, KNIFE_FILM.LOAIBANGIAO_PDP,KNIFE_FILM.LOAIPHATHANH,KNIFE_FILM.SOLUONG,KNIFE_FILM.SOLUONGOHP,KNIFE_FILM.LYDOBANGIAO,KNIFE_FILM.PQC_EMPL_NO,KNIFE_FILM.RND_EMPL_NO,KNIFE_FILM.SX_EMPL_NO,KNIFE_FILM.REMARK,KNIFE_FILM.CFM_GIAONHAN,KNIFE_FILM.CFM_INS_EMPL,KNIFE_FILM.CFM_DATE,KNIFE_FILM.KNIFE_FILM_STATUS,KNIFE_FILM.MA_DAO,KNIFE_FILM.TOTAL_PRESS,KNIFE_FILM.CUST_CD,KNIFE_FILM.KNIFE_TYPE
          FROM KNIFE_FILM 
          LEFT JOIN M100 ON M100.G_CODE = KNIFE_FILM.G_CODE AND M100.CTR_CD = KNIFE_FILM.CTR_CD
          LEFT JOIN M110 ON M110.CUST_CD = M100.CUST_CD AND M110.CTR_CD = M100.CTR_CD
          WHERE KNIFE_FILM.CTR_CD='${DATA.CTR_CD}'
          ORDER BY KNIFE_FILM.NGAYBANGIAO DESC, KNIFE_FILM.KNIFE_FILM_ID DESC
          `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "loadKTP_IN":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = " WHERE 1=1 ";
          if (DATA.ALLTIME === false) {
            condition += ` AND I660.INS_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE} 23:59:59'`;
          }
          if (DATA.FACTORY !== "ALL") {
            condition += ` AND I660.FACTORY = '${DATA.FACTORY}' `;
          }
          if (DATA.PROD_TYPE !== "ALL") {
            condition += ` AND M100.PROD_TYPE = '${DATA.PROD_TYPE}' `;
          }
          if (DATA.G_NAME !== "") {
            condition += ` AND M100.G_NAME LIKE '%${DATA.G_NAME}%'`;
          }
          if (DATA.G_CODE !== "") {
            condition += ` AND M100.G_CODE = '${DATA.G_CODE}'`;
          }
          if (DATA.PROD_REQUEST_NO !== "") {
            condition += ` AND I660.PROD_REQUEST_NO = '${DATA.PROD_REQUEST_NO}'`;
          }
          if (DATA.KD_EMPL_NAME !== "") {
            condition += ` AND M010.EMPL_NAME LIKE '%${DATA.KD_EMPL_NAME}%'`;
          }
          if (DATA.CUST_NAME_KD !== "") {
            condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`;
          }
          let setpdQuery = `
          SELECT CAST(I660.INS_DATE as date) AS IN_DATE,I660.FACTORY,I660.AUTO_ID,I660.INSPECT_OUTPUT_ID,I660.PACK_ID,M010.EMPL_NAME, I660.PROD_REQUEST_NO,M110.CUST_NAME_KD, I660.G_CODE, M100.G_NAME, M100.G_NAME_KD, M100.PROD_TYPE, I660.PLAN_ID,I660.IN_QTY,
          CASE WHEN I660.USE_YN= 'T' THEN 'PENDING' WHEN I660.USE_YN= 'Y' THEN 'TONKHO'  ELSE 'DA GIAO' END AS USE_YN
          ,I660.EMPL_GIAO,I660.EMPL_NHAN,I660.INS_DATE,I660.INS_EMPL,I660.UPD_DATE,I660.UPD_EMPL,
          CASE WHEN I660.STATUS ='N' THEN 'OK' ELSE 'BL' END AS STATUS
          ,I660.REMARK
          FROM I660
          LEFT JOIN M100 ON (M100.G_CODE = I660.G_CODE AND M100.CTR_CD = I660.CTR_CD)
          LEFT JOIN P400 ON (P400.PROD_REQUEST_NO = I660.PROD_REQUEST_NO AND P400.CTR_CD = I660.CTR_CD)
          LEFT JOIN M110 ON (P400.CUST_CD = M110.CUST_CD AND M110.CTR_CD = P400.CTR_CD)
          LEFT JOIN M010 ON (P400.EMPL_NO = M010.EMPL_NO AND M010.CTR_CD = P400.CTR_CD)
          ${condition}
          AND I660.CTR_CD='${DATA.CTR_CD}'
          `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "loadStockFull":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = " WHERE I660.USE_YN <> 'X'  AND (I660.REMARK is null OR  I660.REMARK<> 'Pending Huy ton')";
          if (DATA.ALLTIME === false) {
            condition += ` AND I660.INS_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE} 23:59:59'`;
          }
          if (DATA.FACTORY !== "ALL") {
            condition += ` AND I660.FACTORY = '${DATA.FACTORY}' `;
          }
          if (DATA.PROD_TYPE !== "ALL") {
            condition += ` AND M100.PROD_TYPE = '${DATA.PROD_TYPE}' `;
          }
          if (DATA.G_NAME !== "") {
            condition += ` AND M100.G_NAME LIKE '%${DATA.G_NAME}%'`;
          }
          if (DATA.G_CODE !== "") {
            condition += ` AND M100.G_CODE = '${DATA.G_CODE}'`;
          }
          if (DATA.PROD_REQUEST_NO !== "") {
            condition += ` AND I660.PROD_REQUEST_NO = '${DATA.PROD_REQUEST_NO}'`;
          }
          if (DATA.KD_EMPL_NAME !== "") {
            condition += ` AND M010.EMPL_NAME LIKE '%${DATA.KD_EMPL_NAME}%'`;
          }
          if (DATA.CUST_NAME_KD !== "") {
            condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`;
          }
          let setpdQuery = `
          SELECT CAST(I660.INS_DATE as date) AS IN_DATE,I660.FACTORY,I660.AUTO_ID,I660.INSPECT_OUTPUT_ID,I660.PACK_ID,M010.EMPL_NAME, I660.PROD_REQUEST_NO,M110.CUST_NAME_KD, I660.G_CODE, M100.G_NAME, M100.G_NAME_KD, M100.PROD_TYPE, I660.PLAN_ID,I660.IN_QTY,
          CASE WHEN I660.USE_YN= 'T' THEN 'PENDING' WHEN I660.USE_YN= 'Y' THEN 'TONKHO'  ELSE 'DA GIAO' END AS USE_YN
          ,I660.EMPL_GIAO,I660.EMPL_NHAN,I660.INS_DATE,I660.INS_EMPL,I660.UPD_DATE,I660.UPD_EMPL,
          CASE WHEN I660.STATUS ='N' THEN 'OK' ELSE 'BL' END AS STATUS
          ,I660.REMARK, I660.CTR_CD
          FROM I660
          LEFT JOIN M100 ON (M100.G_CODE = I660.G_CODE AND M100.CTR_CD = I660.CTR_CD)
          LEFT JOIN P400 ON (P400.PROD_REQUEST_NO = I660.PROD_REQUEST_NO AND P400.CTR_CD = I660.CTR_CD)
          LEFT JOIN M110 ON (P400.CUST_CD = M110.CUST_CD AND M110.CTR_CD = P400.CTR_CD)
          LEFT JOIN M010 ON (P400.EMPL_NO = M010.EMPL_NO AND M010.CTR_CD = P400.CTR_CD)
          ${condition}
          AND I660.CTR_CD='${DATA.CTR_CD}'
          `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "loadKTP_OUT":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = " WHERE 1=1 ";
          if (DATA.ALLTIME === false) {
            condition += ` AND O660.INS_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE} 23:59:59'`;
          }
          if (DATA.FACTORY !== "ALL") {
            condition += ` AND O660.FACTORY = '${DATA.FACTORY}' `;
          }
          if (DATA.PROD_TYPE !== "ALL") {
            condition += ` AND M100.PROD_TYPE = '${DATA.PROD_TYPE}' `;
          }
          if (DATA.G_NAME !== "") {
            condition += ` AND M100.G_NAME LIKE '%${DATA.G_NAME}%'`;
          }
          if (DATA.G_CODE !== "") {
            condition += ` AND M100.G_CODE = '${DATA.G_CODE}'`;
          }
          if (DATA.PROD_REQUEST_NO !== "") {
            condition += ` AND O660.PROD_REQUEST_NO = '${DATA.PROD_REQUEST_NO}'`;
          }
          if (DATA.KD_EMPL_NAME !== "") {
            condition += ` AND M010.EMPL_NAME LIKE '%${DATA.KD_EMPL_NAME}%'`;
          }
          if (DATA.CUST_NAME_KD !== "") {
            condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`;
          }
          if (DATA.OUT_TYPE !== "ALL") {
            condition += ` AND O660.OUT_TYPE = '${DATA.OUT_TYPE}'`;
          }
          let setpdQuery = `
          SELECT  O660.OUT_DATE, O660.FACTORY,O660.AUTO_ID,O660.INSPECT_OUTPUT_ID,O660.PACK_ID,M010.EMPL_NAME, O660.PROD_REQUEST_NO,O660.G_CODE,M100.G_NAME, M100.G_NAME_KD, O660.PLAN_ID,O660.CUST_CD,O660.OUT_QTY, M100.PROD_TYPE, M110.CUST_NAME_KD, P400.PO_NO,
          CASE WHEN O660.OUT_TYPE='N' THEN 'NORMAL' WHEN O660.OUT_TYPE='F' THEN 'FREE' WHEN O660.OUT_TYPE='L' THEN 'CHANGE LOT'  WHEN O660.OUT_TYPE='D' THEN 'SCRAP' ELSE 'OTHER' END AS OUT_TYPE ,
          CASE WHEN O660.USE_YN='T' THEN 'PREPARING' WHEN O660.USE_YN='Y' THEN 'PREPAIRED' WHEN O660.USE_YN='P' THEN 'PENDING' ELSE 'COMPLETED' END AS USE_YN
          ,O660.INS_DATE,O660.INS_EMPL,O660.UPD_DATE,O660.UPD_EMPL,O660.STATUS,O660.REMARK,O660.AUTO_ID_IN,O660.OUT_PRT_SEQ, O660.CTR_CD
          FROM O660
          LEFT JOIN M100 ON (M100.G_CODE = O660.G_CODE AND M100.CTR_CD = O660.CTR_CD)
          LEFT JOIN P400 ON (P400.PROD_REQUEST_NO = O660.PROD_REQUEST_NO AND P400.CTR_CD = O660.CTR_CD)
          LEFT JOIN M110 ON (M110.CUST_CD = O660.CUST_CD AND M110.CTR_CD = O660.CTR_CD)
          LEFT JOIN M010 ON (P400.EMPL_NO = M010.EMPL_NO AND M010.CTR_CD = O660.CTR_CD)
          ${condition}
          AND O660.CTR_CD='${DATA.CTR_CD}'
          `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "loadSTOCKG_CODE":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = " WHERE 1=1 ";
          if (DATA.PROD_TYPE !== "ALL") {
            condition += ` AND M100.PROD_TYPE = '${DATA.PROD_TYPE}' `;
          }
          if (DATA.G_NAME !== "") {
            condition += ` AND M100.G_NAME LIKE '%${DATA.G_NAME}%'`;
          }
          if (DATA.G_CODE !== "") {
            condition += ` AND M100.G_CODE = '${DATA.G_CODE}'`;
          }
          let setpdQuery = `
          SELECT  AA.G_CODE, M100.G_NAME, M100.G_NAME_KD, M100.PROD_TYPE, AA.STOCK, AA.BLOCK_QTY, (AA.STOCK + AA.BLOCK_QTY) AS TOTAL_STOCK FROM 
          (
          SELECT G_CODE, CTR_CD, SUM(CASE WHEN STATUS='N' THEN I660.IN_QTY ELSE 0 END) AS STOCK, SUM(CASE WHEN STATUS='B' THEN I660.IN_QTY ELSE 0 END) AS BLOCK_QTY FROM I660 WHERE USE_YN ='Y'  AND (I660.REMARK is null OR  I660.REMARK<> 'Pending Huy ton') AND I660.CTR_CD='${DATA.CTR_CD}' GROUP BY G_CODE, CTR_CD
          ) AS AA
          LEFT JOIN M100 ON (M100.G_CODE = AA.G_CODE AND M100.CTR_CD = AA.CTR_CD)
          ${condition}
          AND M100.CTR_CD='${DATA.CTR_CD}'
          `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "loadSTOCKG_NAME_KD":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = " WHERE 1=1 ";
          if (DATA.G_NAME !== "") {
            condition += ` AND M100.G_NAME LIKE '%${DATA.G_NAME}%'`;
          }
          let setpdQuery = `
          SELECT   AA.G_NAME_KD, AA.STOCK, AA.BLOCK_QTY,(AA.STOCK+ AA.BLOCK_QTY) AS TOTAL_STOCK FROM 
          (
          SELECT M100.G_NAME_KD, M100.CTR_CD, SUM(CASE WHEN STATUS='N' THEN I660.IN_QTY ELSE 0 END) AS STOCK,SUM(CASE WHEN STATUS='B' THEN I660.IN_QTY ELSE 0 END) AS BLOCK_QTY FROM I660  LEFT JOIN M100 ON  (M100.G_CODE = I660.G_CODE AND M100.CTR_CD = I660.CTR_CD) WHERE I660.USE_YN ='Y'  AND (I660.REMARK is null OR  I660.REMARK<> 'Pending Huy ton') AND I660.CTR_CD='${DATA.CTR_CD}' GROUP BY M100.G_NAME_KD, M100.CTR_CD
          ) AS AA
          ${condition}
          AND AA.CTR_CD='${DATA.CTR_CD}'
          `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "loadSTOCK_YCSX":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = " WHERE 1=1 ";
          if (DATA.PROD_TYPE !== "ALL") {
            condition += ` AND M100.PROD_TYPE = '${DATA.PROD_TYPE}' `;
          }
          if (DATA.G_NAME !== "") {
            condition += ` AND M100.G_NAME LIKE '%${DATA.G_NAME}%'`;
          }
          if (DATA.G_CODE !== "") {
            condition += ` AND M100.G_CODE = '${DATA.G_CODE}'`;
          }
          if (DATA.PROD_REQUEST_NO !== "") {
            condition += ` AND AA.PROD_REQUEST_NO = '${DATA.PROD_REQUEST_NO}'`;
          }
          if (DATA.CUST_NAME_KD !== "") {
            condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`;
          }
          let setpdQuery = `
          SELECT M110.CUST_NAME_KD, AA.PROD_REQUEST_NO, M100.G_CODE, M100.G_NAME, M100.G_NAME_KD, P400.PROD_REQUEST_DATE, P400.PO_NO, M100.PROD_TYPE, AA.STOCK, AA.BLOCK_QTY, (AA.STOCK + AA.BLOCK_QTY) AS TOTAL_STOCK FROM 
          (
          SELECT I660.PROD_REQUEST_NO, I660.CTR_CD, SUM(CASE WHEN STATUS='N' THEN I660.IN_QTY ELSE 0 END) AS STOCK, SUM(CASE WHEN STATUS='B' THEN I660.IN_QTY ELSE 0 END) AS BLOCK_QTY FROM I660 WHERE I660.USE_YN ='Y'  AND (I660.REMARK is null OR  I660.REMARK<> 'Pending Huy ton') AND I660.CTR_CD='${DATA.CTR_CD}' GROUP BY I660.PROD_REQUEST_NO, I660.CTR_CD
          ) AS AA
          LEFT JOIN P400 ON (P400.PROD_REQUEST_NO = AA.PROD_REQUEST_NO AND P400.CTR_CD = AA.CTR_CD)
          LEFT JOIN M100 ON (M100.G_CODE = P400.G_CODE AND M100.CTR_CD = P400.CTR_CD)
          LEFT JOIN M110 ON (M110.CUST_CD = P400.CUST_CD AND M110.CTR_CD = P400.CTR_CD)
          ${condition}
          AND AA.CTR_CD='${DATA.CTR_CD}'
          `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "updatePheDuyetHuyO660":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
          UPDATE O660 SET USE_YN = 'X', REMARK = 'XUAT_HUY',OUT_PRT_SEQ='999', OUT_DATE='${moment().format('YYYYMMDD')}', UPD_DATE = '${moment().format('YYYY-MM-DD HH:mm:ss')}', UPD_EMPL='${EMPL_NO}' WHERE CTR_CD='${DATA.CTR_CD}' AND AUTO_ID= ${DATA.AUTO_ID}          
          `;
          console.log(setpdQuery)
          checkkq = await queryDB(setpdQuery);
          setpdQuery = `
          UPDATE I660 SET USE_YN = 'X',  UPD_DATE = '${moment().format('YYYY-MM-DD HH:mm:ss')}', UPD_EMPL='${EMPL_NO}' WHERE CTR_CD='${DATA.CTR_CD}' AND AUTO_ID= ${DATA.AUTO_ID_IN}          
          `;
          console.log(setpdQuery)
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "cancelPheDuyetHuyO660":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
            DELETE FROM O660 WHERE CTR_CD='${DATA.CTR_CD}' AND AUTO_ID= ${DATA.AUTO_ID} AND OUT_TYPE='D' AND UPD_DATE is null
          `;
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "checkcustomerpono":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
          SELECT TOP 1 PO_NO FROM ZTBPOTable WHERE CTR_CD='${DATA.CTR_CD}' AND PO_NO LIKE '%${DATA.CHECK_PO_NO}%' ORDER BY PO_NO DESC
          `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "checkcustcd":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = ` `;
          if (DATA.COMPANY_TYPE === "KH") {
            setpdQuery = `SELECT TOP 1 CUST_CD FROM M110 WHERE CTR_CD='${DATA.CTR_CD}' AND SUBSTRING(M110.CUST_CD,1,2) = 'KH' ORDER BY CUST_CD DESC`;
          } else if (DATA.COMPANY_TYPE === "NCC") {
            setpdQuery = `SELECT TOP 1 CUST_CD FROM M110 WHERE CTR_CD='${DATA.CTR_CD}' AND SUBSTRING(M110.CUST_CD,1,3) = 'NCC' ORDER BY CUST_CD DESC`;
          }
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "getlastestCODKH":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
          SELECT TOP 1 G_NAME_KD FROM M100 WHERE CTR_CD='${DATA.CTR_CD}' AND CUST_CD='${DATA.CUST_CD}' AND G_NAME_KD lIKE 'KH%' ORDER BY G_NAME_KD DESC
          `;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "addCodeToQuotationTable":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
          INSERT INTO ZTB_QUOTATION_CALC_TB (CTR_CD,G_CODE,G_WIDTH,G_LENGTH,G_C,G_C_R,G_LG,G_CG,G_SG_L,G_SG_R,PROD_PRINT_TIMES) VALUES ('${DATA.CTR_CD}','${DATA.G_CODE}','${DATA.G_WIDTH}','${DATA.G_LENGTH}','${DATA.G_C}','${DATA.G_C_R}','${DATA.G_LG}','${DATA.G_CG}','${DATA.G_SG_L}','${DATA.G_SG_R}','${DATA.PROD_PRINT_TIMES}')
          `;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "addBOMToQuotationTable":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
          INSERT INTO ZTB_QUOTATION_MATERIAL (CTR_CD, Q_ID, G_CODE, M_CODE, M_NAME, OPEN_PRICE, ORIGINAL_PRICE) VALUES ('${DATA.CTR_CD}','${DATA.Q_ID}','${DATA.G_CODE}','${DATA.M_CODE}','${DATA.M_NAME}','${DATA.OPEN_PRICE}','${DATA.ORIGINAL_PRICE}')
          `;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "loadlistcodequotation":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
          SELECT M110.CUST_CD, M110.CUST_NAME_KD, ZTB_QUOTATION_CALC_TB.G_CODE, M100.G_NAME, M100.G_NAME_KD, ZTB_QUOTATION_CALC_TB.WIDTH_OFFSET, ZTB_QUOTATION_CALC_TB.LENGTH_OFFSET, ZTB_QUOTATION_CALC_TB.KNIFE_UNIT, ZTB_QUOTATION_CALC_TB.FILM_UNIT, ZTB_QUOTATION_CALC_TB.INK_UNIT, ZTB_QUOTATION_CALC_TB.LABOR_UNIT, ZTB_QUOTATION_CALC_TB.DELIVERY_UNIT, ZTB_QUOTATION_CALC_TB.DEPRECATION_UNIT, ZTB_QUOTATION_CALC_TB.GMANAGEMENT_UNIT, ZTB_QUOTATION_CALC_TB.M_LOSS_UNIT, ZTB_QUOTATION_CALC_TB.G_WIDTH, ZTB_QUOTATION_CALC_TB.G_LENGTH, ZTB_QUOTATION_CALC_TB.G_C, ZTB_QUOTATION_CALC_TB.G_C_R, ZTB_QUOTATION_CALC_TB.G_LG, ZTB_QUOTATION_CALC_TB.G_CG, ZTB_QUOTATION_CALC_TB.G_SG_L, ZTB_QUOTATION_CALC_TB.G_SG_R, ZTB_QUOTATION_CALC_TB.PROD_PRINT_TIMES, ZTB_QUOTATION_CALC_TB.KNIFE_COST, ZTB_QUOTATION_CALC_TB.FILM_COST, ZTB_QUOTATION_CALC_TB.INK_COST, ZTB_QUOTATION_CALC_TB.LABOR_COST, ZTB_QUOTATION_CALC_TB.DELIVERY_COST, ZTB_QUOTATION_CALC_TB.DEPRECATION_COST, ZTB_QUOTATION_CALC_TB.GMANAGEMENT_COST, ZTB_QUOTATION_CALC_TB.MATERIAL_COST, ZTB_QUOTATION_CALC_TB.TOTAL_COST, ZTB_QUOTATION_CALC_TB.SALE_PRICE, ZTB_QUOTATION_CALC_TB.PROFIT
FROM ZTB_QUOTATION_CALC_TB 
LEFT JOIN M100 ON (M100.G_CODE = ZTB_QUOTATION_CALC_TB.G_CODE AND M100.CTR_CD = ZTB_QUOTATION_CALC_TB.CTR_CD) 
LEFT JOIN M110 ON (M110.CUST_CD = M100.CUST_CD AND M110.CTR_CD = M100.CTR_CD)
WHERE ZTB_QUOTATION_CALC_TB.CTR_CD = '${DATA.CTR_CD}'
          `;
          ///console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "updateGiaVLBOM2":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
              UPDATE ZTB_BOM2 SET M_CMS_PRICE=${DATA.M_CMS_PRICE}, M_SS_PRICE=${DATA.M_SS_PRICE} WHERE CTR_CD='${DATA.CTR_CD}' AND G_CODE ='${DATA.G_CODE}' AND M_CODE='${DATA.M_CODE}'
          `;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "getMasterMaterialList":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `SELECT DISTINCT M_NAME, EXP_DATE FROM ZTB_MATERIAL_TB WHERE CTR_CD='${DATA.CTR_CD}' AND USE_YN='Y'`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "updateCurrentUnit":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `UPDATE ZTB_QUOTATION_CALC_TB  SET KNIFE_UNIT=${DATA.KNIFE_UNIT} , FILM_UNIT=${DATA.FILM_UNIT} , INK_UNIT=${DATA.INK_UNIT} , LABOR_UNIT=${DATA.LABOR_UNIT} , DELIVERY_UNIT=${DATA.DELIVERY_UNIT} , DEPRECATION_UNIT=${DATA.DEPRECATION_UNIT} , GMANAGEMENT_UNIT=${DATA.GMANAGEMENT_UNIT}, M_LOSS_UNIT=${DATA.M_LOSS_UNIT}  WHERE CTR_CD='${DATA.CTR_CD}' AND G_CODE ='${DATA.G_CODE}'`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "setWebVer":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `UPDATE ZBTVERTABLE SET VERWEB=${DATA.WEB_VER}`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "setMobileVer":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `UPDATE ZBTVERTABLE SET VERMOBILE=${DATA.VERMOBILE}`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "updatePlanOrder":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `MERGE INTO ZTB_QLSXPLAN
          USING
          (
          SELECT PLAN_ID, PLAN_DATE, PLAN_EQ, PLAN_ORDER, CTR_CD, ROW_NUMBER() OVER (PARTITION BY PLAN_DATE, PLAN_EQ ORDER BY PLAN_ORDER ASC) AS STT  FROM ZTB_QLSXPLAN WHERE PLAN_DATE ='${DATA.PLAN_DATE}' AND ZTB_QLSXPLAN.CTR_CD='${DATA.CTR_CD}'
          ) AS BANGNGUON
          ON BANGNGUON.PLAN_ID = ZTB_QLSXPLAN.PLAN_ID AND BANGNGUON.CTR_CD = ZTB_QLSXPLAN.CTR_CD
          WHEN MATCHED THEN
          UPDATE
          SET ZTB_QLSXPLAN.PLAN_ORDER = BANGNGUON.STT;`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "checkGNAMEKDExist":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `SELECT TOP 1 * FROM M100 WHERE CTR_CD='${DATA.CTR_CD}' AND  G_NAME_KD='${DATA.G_NAME_KD}'`;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "loadErrTable":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `SELECT * FROM ERROR_TABLE WHERE CTR_CD='${DATA.CTR_CD}'`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "loadxuatkhopo":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `WITH WH_OUT_TB AS
          (
           SELECT  O660.OUT_DATE, O660.G_CODE, O660.CUST_CD, O660.OUT_QTY, O660.CTR_CD, P400.PO_NO,
                    CASE WHEN O660.OUT_TYPE='N' THEN 'NORMAL' WHEN O660.OUT_TYPE='F' THEN 'FREE' WHEN O660.OUT_TYPE='L' THEN 'CHANGE LOT' ELSE 'OTHER' END AS OUT_TYPE ,
                    CASE WHEN O660.USE_YN='T' THEN 'PREPARING' WHEN O660.USE_YN='Y' THEN 'PREPAIRED' ELSE 'COMPLETED' END AS USE_YN         
                    FROM O660          
                    LEFT JOIN P400 ON (P400.PROD_REQUEST_NO = O660.PROD_REQUEST_NO AND P400.CTR_CD = O660.CTR_CD)
          ),
          XUATKHOPO AS
          (
          SELECT OUT_DATE, G_CODE, CUST_CD, PO_NO, CTR_CD, SUM(OUT_QTY) AS OUT_QTY FROM WH_OUT_TB
          WHERE OUT_TYPE ='NORMAL' AND USE_YN ='COMPLETED'
          GROUP BY G_CODE, CUST_CD, PO_NO, OUT_DATE, CTR_CD
          ),
          ZTBDLVR AS 
          (SELECT CUST_CD, G_CODE, PO_NO, CTR_CD, SUM(DELIVERY_QTY) AS DELIVERY_QTY FROM ZTBDelivery GROUP BY CUST_CD, G_CODE, PO_NO, CTR_CD),
          POTB AS
          (
          SELECT ZTBPOTable.G_CODE, ZTBPOTable.CUST_CD, ZTBPOTable.PO_NO, ZTBPOTable.CTR_CD, ZTBPOTable.PO_QTY, isnull(ZTBDLVR.DELIVERY_QTY,0) AS DELIVERY_QTY, (ZTBPOTable.PO_QTY-isnull(ZTBDLVR.DELIVERY_QTY,0)) AS PO_BALANCE FROM ZTBPOTable LEFT JOIN ZTBDLVR ON (ZTBPOTable.G_CODE = ZTBDLVR.G_CODE AND ZTBPOTable.CUST_CD = ZTBDLVR.CUST_CD AND ZTBPOTable.PO_NO = ZTBDLVR.PO_NO AND ZTBPOTable.CTR_CD = ZTBDLVR.CTR_CD)
          )
          SELECT M110.CUST_CD, M110.CUST_NAME_KD, XUATKHOPO.G_CODE, M100.G_NAME_KD, M100.G_NAME, CAST(XUATKHOPO.OUT_DATE AS DATE) AS OUT_DATE, XUATKHOPO.PO_NO, POTB.PO_QTY, POTB.DELIVERY_QTY, POTB.PO_BALANCE, XUATKHOPO.OUT_QTY AS THISDAY_OUT_QTY, CASE WHEN POTB.PO_BALANCE is null THEN 'NG- KO CO PO' ELSE CASE WHEN XUATKHOPO.OUT_QTY > POTB.PO_BALANCE THEN 'NG- GIAO NHIEU HON PO BALANCE' ELSE  'OK' END END AS CHECKSTATUS FROM XUATKHOPO 
          LEFT JOIN POTB ON (XUATKHOPO.CUST_CD = POTB.CUST_CD AND XUATKHOPO.G_CODE = POTB.G_CODE AND XUATKHOPO.PO_NO = POTB.PO_NO AND XUATKHOPO.CTR_CD = POTB.CTR_CD)
          LEFT JOIN M100 ON (XUATKHOPO.G_CODE = M100.G_CODE AND XUATKHOPO.CTR_CD = M100.CTR_CD)
          LEFT JOIN M110 ON (XUATKHOPO.CUST_CD = M110.CUST_CD AND XUATKHOPO.CTR_CD = M110.CTR_CD)
          WHERE XUATKHOPO.OUT_DATE = '${DATA.OUT_DATE}' AND XUATKHOPO.CTR_CD='${DATA.CTR_CD}'
          ORDER BY OUT_DATE DESC`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "getlastestPQC3_ID":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `SELECT MAX(PQC3_ID) AS PQC3_ID FROM ZTBPQC3TABLE WHERE CTR_CD='${DATA.CTR_CD}'`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "loadMaterialByPO":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = ` WHERE AA.PO_BALANCE <> 0  AND (M100.G_C*M100.G_C_R)<>0`;
          if (DATA.SHORTAGE_ONLY === true)
            condition += ` AND  CAST((AA.PO_BALANCE*1.0)*(M100.PD*1.0)/(M100.G_C *M100.G_C_R*1000) AS bigint) > 0`;
          if (DATA.NEWPO === true)
            condition += ` AND AA.DELIVERY_QTY =0`
          let condition2 = ``;
          if (DATA.ALLTIME !== true) {
            condition2 += ` WHERE ZTBPOTable.PO_DATE BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE}'`
          }
          let setpdQuery = `
          SELECT M110.CUST_CD, M110.CUST_NAME_KD, M100.G_CODE, M100.G_NAME_KD, ZTB_BOM2.M_CODE, M090.M_NAME, M090.WIDTH_CD, AA.PO_NO, AA.PO_QTY, AA.DELIVERY_QTY, AA.PO_BALANCE, M100.PD,M100.G_C AS CAVITY_COT, M100.G_C_R AS CAVITY_HANG,M100.G_C *M100.G_C_R AS CAVITY, CAST((AA.PO_BALANCE*1.0)*(M100.PD*1.0)/(M100.G_C *M100.G_C_R*1000)
          AS bigint) AS NEED_M_QTY  FROM 
          (
          SELECT ZTBPOTable.CUST_CD, ZTBPOTable.G_CODE, ZTBPOTable.PO_NO, ZTBPOTable.PO_QTY, ZTBPOTable.CTR_CD, isnull(DELI.DELIVERY_QTY,0) AS DELIVERY_QTY,  (ZTBPOTable.PO_QTY- isnull(DELI.DELIVERY_QTY,0)) AS PO_BALANCE FROM ZTBPOTable  LEFT JOIN
          (SELECT CUST_CD, G_CODE, PO_NO, CTR_CD, SUM(isnull(ZTBDelivery.DELIVERY_QTY,0)) AS DELIVERY_QTY FROM ZTBDelivery GROUP BY CUST_CD, G_CODE, PO_NO, CTR_CD) AS DELI
          ON(ZTBPOTable.CUST_CD = DELI.CUST_CD  AND ZTBPOTable.G_CODE = DELI.G_CODE AND ZTBPOTable.PO_NO = DELI.PO_NO AND ZTBPOTable.CTR_CD = DELI.CTR_CD)
          ${condition2}
          ) AS AA
          LEFT JOIN  ZTB_BOM2 ON (AA.G_CODE = ZTB_BOM2.G_CODE AND AA.CTR_CD = ZTB_BOM2.CTR_CD)
          LEFT JOIN M100 ON (AA.G_CODE = M100.G_CODE AND AA.CTR_CD = M100.CTR_CD)
          LEFT JOIN M110 ON (M110.CUST_CD = AA.CUST_CD AND M110.CTR_CD = AA.CTR_CD)
          LEFT JOIN M090 ON (ZTB_BOM2.M_CODE = M090.M_CODE AND ZTB_BOM2.CTR_CD = M090.CTR_CD)
          ${condition}
          AND AA.CTR_CD='${DATA.CTR_CD}'
          ORDER BY CAST((AA.PO_BALANCE*1.0)*(M100.PD*1.0)/(M100.G_C *M100.G_C_R*1000*1.0)
          AS bigint) DESC
          `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "loadMaterialMRPALL":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = ` WHERE AA.PO_BALANCE <> 0  AND (M100.G_C*M100.G_C_R)<>0`;
          if (DATA.SHORTAGE_ONLY === true)
            condition += ` AND  CAST((AA.PO_BALANCE*1.0)*(M100.PD*1.0)/(M100.G_C *M100.G_C_R*1000) AS bigint) > 0`;
          if (DATA.NEWPO === true)
            condition += ` AND AA.DELIVERY_QTY =0`
          let condition2 = ``
          if (DATA.SHORTAGE_ONLY === true)
            condition2 = ` WHERE ((M090.STOCK_CFM_NM1 + STOCK_CFM_NM2) - CC.NEED_M_QTY) < 0`
          let condition3 = ``;
          if (DATA.ALLTIME !== true) {
            condition3 += ` WHERE ZTBPOTable.PO_DATE BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE}'`
          }
          let setpdQuery = `
          SELECT CC.M_CODE, M090.M_NAME, M090.WIDTH_CD, CC.NEED_M_QTY, (isnull(M090.STOCK_CFM_NM1,0) + isnull(STOCK_CFM_NM2,0)) AS STOCK_M,(isnull(M090.HOLDING_CFM_NM1,0) + isnull(M090.HOLDING_CFM_NM2,0)) AS HOLDING_M,   ((isnull(M090.STOCK_CFM_NM1,0) + isnull(STOCK_CFM_NM2,0)) - CC.NEED_M_QTY) AS M_SHORTAGE FROM 
          (
          SELECT BB.M_CODE, SUM(BB.NEED_M_QTY) AS NEED_M_QTY FROM 
          (
          SELECT  ZTB_BOM2.M_CODE, AA.PO_NO, AA.PO_QTY, AA.DELIVERY_QTY, AA.PO_BALANCE, M100.PD,M100.G_C AS CAVITY_COT, M100.G_C_R AS CAVITY_HANG, CAST((AA.PO_BALANCE*1.0)*(M100.PD*1.0)/(M100.G_C *M100.G_C_R*1000)
          AS bigint) AS NEED_M_QTY FROM 
          (
          SELECT ZTBPOTable.CUST_CD, ZTBPOTable.G_CODE, ZTBPOTable.PO_NO, ZTBPOTable.PO_QTY, ZTBPOTable.CTR_CD, isnull(DELI.DELIVERY_QTY,0) AS DELIVERY_QTY,  (ZTBPOTable.PO_QTY- isnull(DELI.DELIVERY_QTY,0)) AS PO_BALANCE FROM ZTBPOTable  LEFT JOIN
          (SELECT CUST_CD, G_CODE, PO_NO, CTR_CD, SUM(isnull(ZTBDelivery.DELIVERY_QTY,0)) AS DELIVERY_QTY FROM ZTBDelivery GROUP BY CUST_CD, G_CODE, PO_NO, CTR_CD) AS DELI
          ON(ZTBPOTable.CUST_CD = DELI.CUST_CD  AND ZTBPOTable.G_CODE = DELI.G_CODE AND ZTBPOTable.PO_NO = DELI.PO_NO AND ZTBPOTable.CTR_CD = DELI.CTR_CD)
          ${condition3}
          ) AS AA
          LEFT JOIN  ZTB_BOM2 ON (AA.G_CODE = ZTB_BOM2.G_CODE AND AA.CTR_CD = ZTB_BOM2.CTR_CD)
          LEFT JOIN M100 ON (AA.G_CODE = M100.G_CODE AND AA.CTR_CD = M100.CTR_CD)
          ${condition}
          ) AS BB
          GROUP BY BB.M_CODE
          ) AS CC
          LEFT JOIN M090 ON (M090.M_CODE = CC.M_CODE)
          ${condition2}
          WHERE M090.CTR_CD='${DATA.CTR_CD}'
          ORDER BY ((M090.STOCK_CFM_NM1 + STOCK_CFM_NM2) - CC.NEED_M_QTY) ASC
          `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "loadMaterialByYCSX":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = `  WHERE P400.PROD_REQUEST_QTY <> 0  AND (M100.G_C*M100.G_C_R)<>0 AND PL_HANG ='TT' `;
          if (DATA.ALLTIME !== true)
            condition += ` AND P400.INS_DATE BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE} 23:59:59'`
          let setpdQuery = `
            SELECT  P400.PROD_REQUEST_NO, P400.PROD_REQUEST_DATE, M110.CUST_CD, M110.CUST_NAME_KD, M100.G_CODE, M100.G_NAME_KD, ZTB_BOM2.M_CODE, M090.M_NAME, M090.WIDTH_CD, P400.PROD_REQUEST_QTY, M100.PD, M100.G_C AS CAVITY_COT, M100.G_C_R AS CAVITY_HANG, M100.G_C * M100.G_C_R AS CAVITY, CAST(( P400.PROD_REQUEST_QTY*1.0)*(M100.PD*1.0)/(M100.G_C *M100.G_C_R*1000)AS bigint) AS NEED_M_QTY, P400.MATERIAL_YN 
            FROM P400 
            LEFT JOIN  ZTB_BOM2 ON (P400.G_CODE = ZTB_BOM2.G_CODE AND P400.CTR_CD = ZTB_BOM2.CTR_CD)
            LEFT JOIN M100 ON (P400.G_CODE = M100.G_CODE AND P400.CTR_CD = M100.CTR_CD)
            LEFT JOIN M110 ON (M110.CUST_CD = P400.CUST_CD AND M110.CTR_CD = P400.CTR_CD)
            LEFT JOIN M090 ON (ZTB_BOM2.M_CODE = M090.M_CODE AND ZTB_BOM2.CTR_CD = M090.CTR_CD)
           ${condition}
            AND P400.CTR_CD='${DATA.CTR_CD}'
            ORDER BY CAST((P400.PROD_REQUEST_QTY*1.0)*(M100.PD*1.0)/(M100.G_C *M100.G_C_R*1000*1.0)
            AS bigint) DESC
            `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "loadMaterialByYCSX_ALL":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = `  WHERE P400.PROD_REQUEST_QTY <> 0  AND (M100.G_C*M100.G_C_R)<>0 AND PL_HANG ='TT' `;
          if (DATA.ALLTIME !== true)
            condition += ` AND P400.INS_DATE BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE} 23:59:59'`
          let condition2 = ``;
          if (DATA.SHORTAGE_ONLY === true)
            condition2 += `WHERE ((isnull(M090.STOCK_CFM_NM1,0) + isnull(STOCK_CFM_NM2,0)) - TTTB.NEED_M_QTY) < 0`;
          let setpdQuery = `
            WITH DETAILTB AS
            (
              SELECT P400.PROD_REQUEST_NO, P400.PROD_REQUEST_DATE, M110.CUST_CD, M110.CUST_NAME_KD, M100.G_CODE, M100.G_NAME_KD, ZTB_BOM2.M_CODE, M090.M_NAME, M090.WIDTH_CD, P400.PROD_REQUEST_QTY, M100.PD,M100.G_C AS CAVITY_COT, M100.G_C_R AS CAVITY_HANG,M100.G_C *M100.G_C_R AS CAVITY, CAST(( P400.PROD_REQUEST_QTY*1.0)*(M100.PD*1.0)/(M100.G_C *M100.G_C_R*1000)AS bigint) AS NEED_M_QTY, P400.CTR_CD
              FROM P400 
              LEFT JOIN  ZTB_BOM2 ON (P400.G_CODE = ZTB_BOM2.G_CODE AND P400.CTR_CD = ZTB_BOM2.CTR_CD)
              LEFT JOIN M100 ON (P400.G_CODE = M100.G_CODE AND P400.CTR_CD = M100.CTR_CD)
              LEFT JOIN M110 ON (M110.CUST_CD = P400.CUST_CD AND M110.CTR_CD = P400.CTR_CD)
              LEFT JOIN M090 ON (ZTB_BOM2.M_CODE = M090.M_CODE AND ZTB_BOM2.CTR_CD = M090.CTR_CD)
              ${condition}
              AND P400.CTR_CD='${DATA.CTR_CD}'
            ),
            TTTB AS
            (
            SELECT DETAILTB.M_CODE, DETAILTB.M_NAME, DETAILTB.WIDTH_CD, SUM(NEED_M_QTY) AS NEED_M_QTY, DETAILTB.CTR_CD
            FROM DETAILTB GROUP BY DETAILTB.M_CODE, DETAILTB.M_NAME, DETAILTB.WIDTH_CD, DETAILTB.CTR_CD
            )
            SELECT TTTB.M_CODE, TTTB.M_NAME, TTTB.WIDTH_CD, TTTB.NEED_M_QTY, (isnull(M090.STOCK_CFM_NM1,0) + isnull(STOCK_CFM_NM2,0)) AS STOCK_M, (isnull(M090.HOLDING_CFM_NM1,0) + isnull(M090.HOLDING_CFM_NM2,0)) AS HOLDING_M, ((isnull(M090.STOCK_CFM_NM1,0) + isnull(STOCK_CFM_NM2,0)) - TTTB.NEED_M_QTY) AS M_SHORTAGE FROM 
            TTTB LEFT JOIN M090 ON (M090.M_CODE = TTTB.M_CODE AND M090.CTR_CD = TTTB.CTR_CD)            
            ${condition2}
            AND TTTB.CTR_CD='${DATA.CTR_CD}'
            ORDER BY TTTB.M_CODE ASC
            `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "customerpobalancebyprodtype_new":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `WITH ZTBDLVR AS 
          (SELECT CUST_CD, G_CODE, PO_NO, CTR_CD, SUM(DELIVERY_QTY) AS DELIVERY_QTY FROM ZTBDelivery WHERE CTR_CD='${DATA.CTR_CD}' GROUP BY CUST_CD, G_CODE, PO_NO, CTR_CD),
          POTB AS
          (
          SELECT M110.CUST_NAME_KD, M100.PROD_TYPE, SUM((ZTBPOTable.PO_QTY-isnull(ZTBDLVR.DELIVERY_QTY,0))) AS PO_BALANCE,  SUM((ZTBPOTable.PO_QTY-isnull(ZTBDLVR.DELIVERY_QTY,0))* ZTBPOTable.PROD_PRICE) AS BALANCE_AMOUNT  FROM ZTBPOTable 
          LEFT JOIN ZTBDLVR ON (ZTBPOTable.G_CODE = ZTBDLVR.G_CODE AND ZTBPOTable.CUST_CD = ZTBDLVR.CUST_CD AND ZTBPOTable.PO_NO = ZTBDLVR.PO_NO AND ZTBPOTable.CTR_CD = ZTBDLVR.CTR_CD)
          LEFT JOIN M100 ON M100.G_CODE = ZTBPOTable.G_CODE AND M100.CTR_CD = ZTBPOTable.CTR_CD
          LEFT JOIN M110 ON M110.CUST_CD = ZTBPOTable.CUST_CD AND M110.CTR_CD = ZTBPOTable.CTR_CD
          WHERE ZTBPOTable.CTR_CD='${DATA.CTR_CD}'
          GROUP BY M110.CUST_NAME_KD, M100.PROD_TYPE
          ),
          BLQTYTB AS
          (
          SELECT * FROM
          (SELECT POTB.CUST_NAME_KD, POTB.PROD_TYPE, POTB.PO_BALANCE FROM POTB)
          AS srctb
          PIVOT
          (
            SUM(srctb.PO_BALANCE) FOR srctb.PROD_TYPE IN ([TSP],[LABEL],[UV],[OLED],[TAPE],[RIBBON],[SPT])
          ) AS PVTB
          ),
          BLAMOUNTTB AS
          (
          SELECT * FROM
          (SELECT POTB.CUST_NAME_KD, POTB.PROD_TYPE, POTB.BALANCE_AMOUNT FROM POTB)
          AS srctb
          PIVOT
          (
            SUM(srctb.BALANCE_AMOUNT) FOR srctb.PROD_TYPE IN ([TSP],[LABEL],[UV],[OLED],[TAPE],[RIBBON],[SPT])
          ) AS PVTB
          ),
          FN1TB AS 
          (
          SELECT AA.CUST_NAME_KD, 
          (SUM(AA.TSP_QTY) + SUM(AA.LABEL_QTY) + SUM(AA.UV_QTY) + SUM(AA.OLED_QTY) + SUM(AA.TAPE_QTY) + SUM(AA.RIBBON_QTY) + SUM(AA.SPT_QTY)) AS TOTAL_QTY, 
          (SUM(AA.TSP_AMOUNT) + SUM(AA.LABEL_AMOUNT) + SUM(AA.UV_AMOUNT) + SUM(AA.OLED_AMOUNT) + SUM(AA.TAPE_AMOUNT) + SUM(AA.RIBBON_AMOUNT) + SUM(AA.SPT_AMOUNT)) AS TOTAL_AMOUNT, 
          SUM(AA.TSP_QTY) AS TSP_QTY, SUM(AA.LABEL_QTY) AS LABEL_QTY, SUM(AA.UV_QTY) AS UV_QTY, SUM(AA.OLED_QTY) AS OLED_QTY, SUM(AA.TAPE_QTY) AS TAPE_QTY, SUM(AA.RIBBON_QTY) AS RIBBON_QTY,SUM(AA.SPT_QTY) AS SPT_QTY, SUM(AA.TSP_AMOUNT) AS TSP_AMOUNT, SUM(AA.LABEL_AMOUNT) AS LABEL_AMOUNT, SUM(AA.UV_AMOUNT) AS UV_AMOUNT, SUM(AA.OLED_AMOUNT) AS OLED_AMOUNT, SUM(AA.TAPE_AMOUNT) AS TAPE_AMOUNT, SUM(AA.RIBBON_AMOUNT) AS RIBBON_AMOUNT, SUM(AA.SPT_AMOUNT) AS SPT_AMOUNT FROM 
          (SELECT'TOTAL' AS CUST_NAME_KD, isnull(BLQTYTB.TSP,0) AS TSP_QTY, isnull(BLQTYTB.LABEL,0) AS LABEL_QTY, isnull(BLQTYTB.UV,0) AS UV_QTY, isnull(BLQTYTB.OLED,0) AS OLED_QTY, isnull(BLQTYTB.TAPE,0) AS TAPE_QTY, isnull(BLQTYTB.RIBBON,0) AS RIBBON_QTY, isnull(BLQTYTB.SPT,0) AS SPT_QTY, isnull(BLAMOUNTTB.TSP,0) AS TSP_AMOUNT, isnull(BLAMOUNTTB.LABEL,0) AS LABEL_AMOUNT, isnull(BLAMOUNTTB.UV,0) AS UV_AMOUNT, isnull(BLAMOUNTTB.OLED,0) AS OLED_AMOUNT, isnull(BLAMOUNTTB.TAPE,0) AS TAPE_AMOUNT, isnull(BLAMOUNTTB.RIBBON,0) AS RIBBON_AMOUNT, isnull(BLAMOUNTTB.SPT,0) AS SPT_AMOUNT
          FROM BLQTYTB LEFT JOIN BLAMOUNTTB ON (BLQTYTB.CUST_NAME_KD = BLAMOUNTTB.CUST_NAME_KD)
          ) AS AA GROUP BY AA.CUST_NAME_KD
          UNION ALL
          SELECT BLQTYTB.CUST_NAME_KD,
           (isnull(BLQTYTB.TSP,0)+ isnull(BLQTYTB.LABEL,0)+ isnull(BLQTYTB.UV,0) + isnull(BLQTYTB.OLED,0) + isnull(BLQTYTB.TAPE,0)+ isnull(BLQTYTB.RIBBON,0) + isnull(BLQTYTB.SPT,0)) AS TOTAL_QTY, 
           (isnull(BLAMOUNTTB.TSP,0)+ isnull(BLAMOUNTTB.LABEL,0)+ isnull(BLAMOUNTTB.UV,0)+ isnull(BLAMOUNTTB.OLED,0)+isnull(BLAMOUNTTB.TAPE,0) + isnull(BLAMOUNTTB.RIBBON,0) + isnull(BLAMOUNTTB.SPT,0)) AS TOTAL_AMOUNT,
          isnull(BLQTYTB.TSP,0) AS TSP_QTY, isnull(BLQTYTB.LABEL,0) AS LABEL_QTY, isnull(BLQTYTB.UV,0) AS UV_QTY, isnull(BLQTYTB.OLED,0) AS OLED_QTY, isnull(BLQTYTB.TAPE,0) AS TAPE_QTY, isnull(BLQTYTB.RIBBON,0) AS RIBBON_QTY, isnull(BLQTYTB.SPT,0) AS SPT_QTY, isnull(BLAMOUNTTB.TSP,0) AS TSP_AMOUNT, isnull(BLAMOUNTTB.LABEL,0) AS LABEL_AMOUNT, isnull(BLAMOUNTTB.UV,0) AS UV_AMOUNT, isnull(BLAMOUNTTB.OLED,0) AS OLED_AMOUNT, isnull(BLAMOUNTTB.TAPE,0) AS TAPE_AMOUNT, isnull(BLAMOUNTTB.RIBBON,0) AS RIBBON_AMOUNT, isnull(BLAMOUNTTB.SPT,0) AS SPT_AMOUNT
          FROM BLQTYTB LEFT JOIN BLAMOUNTTB ON (BLQTYTB.CUST_NAME_KD = BLAMOUNTTB.CUST_NAME_KD)
          )
          SELECT * FROM FN1TB
          WHERE TOTAL_QTY <>0
          ORDER BY TOTAL_AMOUNT DESC`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "getDailyClosingKD":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
          DECLARE @startdate date DECLARE @enddate date DECLARE @tempdate date 
          SET 
            @startdate = '${DATA.FROM_DATE}' 
          SET 
            @enddate = '${DATA.TO_DATE}' 
          SET 
            @tempdate = @startdate DECLARE @string varchar(max) DECLARE @string2 varchar(max) DECLARE @string3 varchar(max) DECLARE @countdate int 
          SET 
            @countdate = 0 
          SET 
            @string = '' 
          SET 
            @string2 = '' 
          SET 
            @string3 = '' WHILE @tempdate <= @enddate BEGIN
          SET 
            @countdate = (
              SElECT 
                COUNT(DELIVERY_DATE) AS tempdate 
              FROM 
                ZTBDelivery 
              WHERE 
                DELIVERY_DATE = @tempdate
                AND CTR_CD = '${DATA.CTR_CD}'
            ) IF (@countdate <> 0) 
          SELECT 
            @string = @string + ' isnull([' + CAST(
              @tempdate AS varchar(max)
            ) + '],0) AS [' + CAST(
              @tempdate AS varchar(max)
            ) + '],' 
          SET 
            @tempdate = DATEADD(D, 1, @tempdate) END 
          SELECT 
            @string = left(
              @string, 
              len(@string) -1
            ) 
          SET 
            @tempdate = @startdate WHILE @tempdate <= @enddate BEGIN 
          SELECT 
            @string2 = @string2 + '[' + CAST(
              @tempdate AS varchar(max)
            ) + '],' 
          SET 
            @tempdate = DATEADD(D, 1, @tempdate) END 
          SELECT 
            @string2 = left(
              @string2, 
              len(@string2) -1
            ) 
          SET 
            @tempdate = @startdate WHILE @tempdate <= @enddate BEGIN 
          SELECT 
            @string3 = @string3 + 'isnull([' + CAST(
              @tempdate AS varchar(max)
            ) + '],0) +' 
          SET 
            @tempdate = DATEADD(D, 1, @tempdate) END 
          SELECT 
            @string3 = left(
              @string3, 
              len(@string3) -1
            ) DECLARE @cols varchar(max) 
          SELECT 
            @cols = (
              SELECT 
                DISTINCT DELIVERY_DATE 
              FROM 
                ZTBDelivery 
              WHERE 
                DELIVERY_DATE BETWEEN + @startdate 
                AND @enddate 
                AND CTR_CD = '${DATA.CTR_CD}'
              ORDER BY 
                DELIVERY_DATE ASC for xml path('')
            ) 
          select 
            @cols = replace(@cols, '<DELIVERY_DATE>', '[') 
          select 
            @cols = replace(@cols, '</DELIVERY_DATE>', '],') 
          select 
            @cols = left(
              @cols, 
              len(@cols) -1
            ) DECLARE @cols2 varchar(max) 
          SELECT 
            @cols2 = (
              SELECT 
                DISTINCT DELIVERY_DATE 
              FROM 
                ZTBDelivery 
              WHERE 
                DELIVERY_DATE BETWEEN @startdate 
                AND @enddate 
                AND CTR_CD = '${DATA.CTR_CD}'
              ORDER BY 
                DELIVERY_DATE ASC for xml path('')
            ) 
          select 
            @cols2 = replace(
              @cols2, '<DELIVERY_DATE>', 'isnull(['
            ) 
          select 
            @cols2 = replace(
              @cols2, '</DELIVERY_DATE>', '],0) AS D, '
            ) 
          select 
            @cols2 = left(
              @cols2, 
              len(@cols2) -1
            ) DECLARE @cols3 varchar(max) 
          SELECT 
            @cols3 = (
              SELECT 
                DISTINCT DELIVERY_DATE 
              FROM 
                ZTBDelivery 
              WHERE 
                DELIVERY_DATE BETWEEN @startdate 
                AND @enddate 
                AND CTR_CD = '${DATA.CTR_CD}'
              ORDER BY 
                DELIVERY_DATE ASC for xml path('')
            ) 
          select 
            @cols3 = replace(
              @cols3, '<DELIVERY_DATE>', 'isnull(['
            ) 
          select 
            @cols3 = replace(
              @cols3, '</DELIVERY_DATE>', '],0) +'
            ) 
          select 
            @cols3 = left(
              @cols3, 
              len(@cols3) -1
            ) 
		  declare @query varchar(max) 
          select 
            @query = '
			select CUST_NAME_KD, (' + @cols3 + ') AS DELIVERED_AMOUNT,  ' + @string + ' from (  select ''TOTAL'' AS CUST_NAME_KD, XX.DELIVERED_AMOUNT ,XX.DELIVERY_DATE   from  (SELECT ZTBDelivery.G_CODE, M010.EMPL_NAME, M110.CUST_NAME_KD, ZTBDelivery.DELIVERY_DATE, M100.G_NAME, M100.PROD_MAIN_MATERIAL, ZTBDelivery.DELIVERY_QTY, ZTBPOTable.PROD_PRICE, ZTBDelivery.PO_NO, (ZTBPOTable.PROD_PRICE * ZTBDelivery.DELIVERY_QTY) As DELIVERED_AMOUNT, M100.PROD_TYPE, DATEPART( MONTH, ZTBDelivery.DELIVERY_DATE) AS DELMONTH, DATEPART( ISOWK,  ZTBDelivery.DELIVERY_DATE) AS DELWEEKNUM ,ZTBDelivery.NOCANCEL , ZTBDelivery.DELIVERY_ID, ZTBDelivery.CTR_CD  FROM ZTBDelivery JOIN ZTBPOTable ON (ZTBDelivery.G_CODE = ZTBPOTable.G_CODE AND ZTBDelivery.CUST_CD = ZTBPOTable.CUST_CD AND ZTBDelivery.PO_NO = ZTBPOTable.PO_NO AND ZTBDelivery.CTR_CD = ZTBPOTable.CTR_CD) JOIN M010 ON ZTBDelivery.EMPL_NO = M010.EMPL_NO AND ZTBDelivery.CTR_CD = M010.CTR_CD JOIN M100 ON ZTBDelivery.G_CODE = M100.G_CODE AND ZTBDelivery.CTR_CD = M100.CTR_CD JOIN M110 ON M110.CUST_CD = ZTBDelivery.CUST_CD AND M110.CTR_CD = ZTBDelivery.CTR_CD WHERE ZTBDelivery.CTR_CD = ''${DATA.CTR_CD}'' ) AS XX  ) src pivot (   SUM(DELIVERED_AMOUNT)   for DELIVERY_DATE in (' + @cols + ') ) piv 
			UNION ALL
			select CUST_NAME_KD, (' + @cols3 + ') AS DELIVERED_AMOUNT,  ' + @string + ' from (  select XX.CUST_NAME_KD, XX.DELIVERED_AMOUNT ,XX.DELIVERY_DATE   from  (SELECT ZTBDelivery.G_CODE, M010.EMPL_NAME, M110.CUST_NAME_KD, ZTBDelivery.DELIVERY_DATE, M100.G_NAME, M100.PROD_MAIN_MATERIAL, ZTBDelivery.DELIVERY_QTY, ZTBPOTable.PROD_PRICE, ZTBDelivery.PO_NO, (ZTBPOTable.PROD_PRICE * ZTBDelivery.DELIVERY_QTY) As DELIVERED_AMOUNT, M100.PROD_TYPE, DATEPART( MONTH, ZTBDelivery.DELIVERY_DATE) AS DELMONTH, DATEPART( ISOWK,  ZTBDelivery.DELIVERY_DATE) AS DELWEEKNUM ,ZTBDelivery.NOCANCEL , ZTBDelivery.DELIVERY_ID, ZTBDelivery.CTR_CD  FROM ZTBDelivery JOIN ZTBPOTable ON (ZTBDelivery.G_CODE = ZTBPOTable.G_CODE AND ZTBDelivery.CUST_CD = ZTBPOTable.CUST_CD AND ZTBDelivery.PO_NO = ZTBPOTable.PO_NO AND ZTBDelivery.CTR_CD = ZTBPOTable.CTR_CD) JOIN M010 ON ZTBDelivery.EMPL_NO = M010.EMPL_NO AND ZTBDelivery.CTR_CD = M010.CTR_CD JOIN M100 ON ZTBDelivery.G_CODE = M100.G_CODE AND ZTBDelivery.CTR_CD = M100.CTR_CD JOIN M110 ON M110.CUST_CD = ZTBDelivery.CUST_CD AND M110.CTR_CD = ZTBDelivery.CTR_CD WHERE ZTBDelivery.CTR_CD = ''${DATA.CTR_CD}'' ) AS XX  ) src pivot (   SUM(DELIVERED_AMOUNT)   for DELIVERY_DATE in (' + @cols + ') ) piv 
			WHERE (' + @cols3 + ') <>0 ORDER BY DELIVERED_AMOUNT DESC;' 
            print(@query)
            execute(@query)
            `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "getWeeklyClosingKD":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          console.log(DATA.FROM_DATE);
          console.log(DATA.TO_DATE);
          let checkkq = "OK";
          let setpdQuery = `
          DECLARE @StartDate DATE = '${DATA.FROM_DATE}'; -- Thay đổi start date tại đây
          DECLARE @EndDate DATE = '${DATA.TO_DATE}'; -- Thay đổi end date tại đây
          DECLARE @CurrentDate DATE = @StartDate;
          DECLARE @str1 VARCHAR(MAX) = '';
          WHILE @CurrentDate <= @EndDate
          BEGIN
              SET  @str1 =  @str1 + 'ISNULL([' + CONCAT(YEAR(@CurrentDate),'_',DATEPART(WEEK,@CurrentDate)) + '],0) + ';
              SET @CurrentDate = DATEADD(WEEK, 1, @CurrentDate);
          END
          -- Xóa dấu phẩy cuối cùng
          SET  @str1 = LEFT( @str1, LEN( @str1) - 1);
          SET @CurrentDate = @StartDate;
          DECLARE @str2 VARCHAR(MAX) = '';
          WHILE @CurrentDate <= @EndDate
          BEGIN
              SET  @str2 =  @str2 + 'ISNULL([' + CONCAT(YEAR(@CurrentDate),'_',DATEPART(WEEK,@CurrentDate)) + '],0) AS [' + CONCAT(YEAR(@CurrentDate),'_',DATEPART(WEEK,@CurrentDate)) + '], ';
              SET @CurrentDate = DATEADD(WEEK, 1, @CurrentDate);
          END
          -- Xóa dấu phẩy cuối cùng
          SET  @str2 = LEFT( @str2, LEN( @str2) - 1);
          SET @CurrentDate = @StartDate;
          DECLARE @str3 VARCHAR(MAX) = '';
          WHILE @CurrentDate <= @EndDate
          BEGIN
              SET  @str3 =  @str3 + '[' + CONCAT(YEAR(@CurrentDate),'_',DATEPART(WEEK,@CurrentDate))+'], ';
              SET @CurrentDate = DATEADD(WEEK, 1, @CurrentDate);
          END
          -- Xóa dấu phẩy cuối cùng
          SET  @str3 = LEFT( @str3, LEN( @str3) - 1);
          SET @CurrentDate = @StartDate;
          DECLARE @str4 VARCHAR(MAX) = '';
          WHILE @CurrentDate <= @EndDate
          BEGIN
              SET  @str4 =  @str4 + 'B5.[' + CONCAT(YEAR(@CurrentDate),'_',DATEPART(WEEK,@CurrentDate))+'], ';
              SET @CurrentDate = DATEADD(WEEK, 1, @CurrentDate);
          END
          -- Xóa dấu phẩy cuối cùng
          SET  @str4 = LEFT( @str4, LEN( @str4) - 1);
          SET @CurrentDate = @StartDate;
          DECLARE @str5 VARCHAR(MAX) = '';
          WHILE @CurrentDate <= @EndDate
          BEGIN
              SET  @str5 =  @str5 + 'B6.[' + CONCAT(YEAR(@CurrentDate),'_',DATEPART(WEEK,@CurrentDate))+'] AS [' + CONCAT(YEAR(@CurrentDate),'_',DATEPART(WEEK,@CurrentDate))+'_QTY], ';
              SET @CurrentDate = DATEADD(WEEK, 1, @CurrentDate);
          END
          -- Xóa dấu phẩy cuối cùng
          SET  @str5 = LEFT( @str5, LEN( @str5) - 1);
          declare @query varchar(max) 
          select 
          @query = '
          WITH ZTBDLVR AS 
          (
          SELECT M110.CUST_NAME_KD,ZTBDelivery.DELIVERY_DATE, ZTBDelivery.DELIVERY_QTY, ZTBDelivery.DELIVERY_QTY * ZTBPOTable.PROD_PRICE AS DELIVERED_AMOUNT, ZTBDelivery.CTR_CD	
          FROM ZTBDelivery 
          LEFT JOIN ZTBPOTable ON (ZTBPOTable.CUST_CD = ZTBDelivery.CUST_CD AND ZTBPOTable.PO_NO = ZTBDelivery.PO_NO AND ZTBPOTable.G_CODE = ZTBDelivery.G_CODE AND ZTBPOTable.CTR_CD = ZTBDelivery.CTR_CD)	
          LEFT JOIN M110 ON (M110.CUST_CD = ZTBDelivery.CUST_CD AND M110.CTR_CD = ZTBDelivery.CTR_CD)
          WHERE ZTBDelivery.CTR_CD=''${DATA.CTR_CD}''
          ),
          DL2TB AS
          (
          SELECT CUST_NAME_KD, CONCAT(YEAR(DELIVERY_DATE),''_'', DATEPART(WEEK,DELIVERY_DATE)) AS DL_YW, YEAR(DELIVERY_DATE) AS DL_YEAR, DATEPART(WEEK,DELIVERY_DATE) AS DL_WEEK, DELIVERED_AMOUNT, DELIVERY_QTY, CTR_CD FROM ZTBDLVR
          ), 
          B1 as
          (
            SELECT pvtb.CUST_NAME_KD, (+ ' + @str1 + ') AS TOTAL, '+ @str2 +' FROM 
            (
            SELECT CUST_NAME_KD, DL_YW, DELIVERED_AMOUNT, CTR_CD FROM DL2TB)
            AS src
            PIVOT
            (
            SUM(DELIVERED_AMOUNT) FOR DL_YW IN ('+@str3+')
            ) as pvtb
            WHERE (' +@str1+') <> 0 AND CTR_CD=''${DATA.CTR_CD}''
          ),
          B2 as
          (
            SELECT ''TOTAL'' AS CUST_NAME_KD, (+ ' + @str1 + ') AS TOTAL, '+ @str2 +' FROM 
            (
            SELECT DL_YW, DELIVERED_AMOUNT, CTR_CD FROM DL2TB)
            AS src
            PIVOT
            (
            SUM(DELIVERED_AMOUNT) FOR DL_YW IN ('+@str3+')
            ) as pvtb
            WHERE (' +@str1+') <> 0 AND CTR_CD=''${DATA.CTR_CD}''
          ), 
          B3 as
          (
          SELECT pvtb.CUST_NAME_KD, ('+ @str1 +' ) AS TOTAL, '+ @str2 +' FROM 
          (
          SELECT CUST_NAME_KD, DL_YW, DELIVERY_QTY, CTR_CD FROM DL2TB)
          AS src
          PIVOT
          (
          SUM(DELIVERY_QTY) FOR DL_YW IN ('+@str3+')
          ) as pvtb
          WHERE  (' +@str1+') <> 0 AND CTR_CD=''${DATA.CTR_CD}''
          ),
          B4 as
          (
          SELECT ''TOTAL'' AS CUST_NAME_KD, ('+ @str1 +') AS TOTAL, '+ @str2 +' FROM 
          (
          SELECT DL_YW, DELIVERY_QTY, CTR_CD FROM DL2TB)
          AS src
          PIVOT
          (
          SUM(DELIVERY_QTY) FOR DL_YW IN ('+@str3+')
          ) as pvtb
          WHERE  (' +@str1+') <> 0 AND CTR_CD=''${DATA.CTR_CD}''
          ),
          B5 AS (SELECT * FROM B2 UNION ALL SELECT * FROM B1),
          B6 AS (SELECT * FROM B4 UNION ALL SELECT * FROM B3)
          SELECT B5.CUST_NAME_KD, B5.TOTAL AS TOTAL_AMOUNT, '+@str4+', B6.TOTAL AS TOTAL_QTY, '+@str5+'  FROM B5 LEFT JOIN B6 ON (B5.CUST_NAME_KD = B6.CUST_NAME_KD)
          ORDER BY B5.TOTAL DESC
          '
          print(@query)
          execute(@query)
            `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "checkLicense": //chua update CTR_CD
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = ``;
          //console.log(setpdQuery);  
          fetch(CURRENT_API_URL)
            .then(res => res.json())
            .then(body => {
              let resp = body;
              //console.log(resp);
              let fil = resp.filter((e) => e[0] === DATA.COMPANY)
              if (fil.length = 0) {
                res.send({ tk_status: 'NG', message: 'Chưa có license !' });
              }
              else {
                let fil = resp.filter((e) => e[0] === DATA.COMPANY)
                let now = moment();
                let exp_date = moment(fil[0][1]);
                if (now >= exp_date) {
                  res.send({ tk_status: 'NG', message: 'Hết hạn sử dụng' });
                }
                else {
                  res.send({ tk_status: 'OK', message: 'Còn hạn sử dụng' });
                }
              }
            })
            .catch((e) => {
              //res.send({ tk_status: 'OK', message: 'Còn hạn sử dụng' });
              res.send({ tk_status: 'NG', message: 'Kiểm tra license thất bại !' + e });
            })
        })();
        break;
      case "getInspectionWorstTable":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = ``;
          if (DATA.WORSTBY === 'AMOUNT')
            condition = `ORDER BY SUM(CAST(INSPECTION_DATA_DOC.NG_AMOUNT as bigint)) DESC`
          if (DATA.WORSTBY === 'QTY')
            condition = `ORDER BY SUM(CAST(INSPECTION_DATA_DOC.NG_QTY as bigint)) DESC`
          let condition2 = ``;
          if (DATA.NG_TYPE !== 'ALL') {
            condition2 += ` AND ERROR_TABLE.ERR_TYPE ='${DATA.NG_TYPE}'`
          }
          else {
            condition2 += ` AND (ERROR_TABLE.ERR_TYPE ='M' OR ERROR_TABLE.ERR_TYPE='P')`;
          }
          let condition3 = `WHERE 1=1 `;
          if (DATA.codeArray.length === 1) {
            condition3 += ` AND ZTBINSPECTNGTB.G_CODE='${DATA.codeArray[0]}'`
          }
          else if (DATA.codeArray.length > 1) {
            let codeString = ``;
            let codeArStr = DATA.codeArray.map((ele, index) => `'${ele}'`).join(",");
            condition3 += ` AND ZTBINSPECTNGTB.G_CODE IN (${codeArStr})`;
          }
          if (DATA.CUST_NAME_KD !== '') {
            condition3 += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`
          }
          let setpdQuery = `
          WITH INSPECTION_DATA_DOC AS
          (
          SELECT CAST(ZTBINSPECTNGTB.INSPECT_START_TIME as date) AS INSPECT_DATE, DATEPART(year, ZTBINSPECTNGTB.INSPECT_START_TIME) AS YEAR_NUM, DATEPART(ISO_WEEK, ZTBINSPECTNGTB.INSPECT_START_TIME) AS WEEK_NUM,
          ZTBINSPECTNGTB.INSPECT_TOTAL_QTY, ZTBINSPECTNGTB.INSPECT_OK_QTY, ZTBINSPECTNGTB2.NG_QTY, (ZTBINSPECTNGTB2.NG_QTY * M100.PROD_LAST_PRICE)  AS NG_AMOUNT, ZTBINSPECTNGTB2.ERR_CODE, ZTBINSPECTNGTB.CTR_CD
          FROM ZTBINSPECTNGTB2
          LEFT JOIN ZTBINSPECTNGTB ON (ZTBINSPECTNGTB2.INSPECT_ID = ZTBINSPECTNGTB.INSPECT_ID AND ZTBINSPECTNGTB2.CTR_CD = ZTBINSPECTNGTB.CTR_CD)
          LEFT JOIN M100 ON (M100.G_CODE = ZTBINSPECTNGTB.G_CODE AND M100.CTR_CD = ZTBINSPECTNGTB.CTR_CD)
          LEFT JOIN P400 ON (P400.PROD_REQUEST_NO = ZTBINSPECTNGTB.PROD_REQUEST_NO AND P400.CTR_CD = ZTBINSPECTNGTB.CTR_CD)
          LEFT JOIN M110 ON (M110.CUST_CD = P400.CUST_CD AND M110.CTR_CD = P400.CTR_CD)
          ${condition3}
          )
          SELECT ERROR_TABLE.ERR_CODE, ERROR_TABLE.ERR_NAME_VN, ERROR_TABLE.ERR_NAME_KR, SUM(CAST(INSPECTION_DATA_DOC.NG_QTY as bigint)) AS NG_QTY, SUM(NG_AMOUNT) AS NG_AMOUNT FROM INSPECTION_DATA_DOC 
          LEFT JOIN ERROR_TABLE ON (ERROR_TABLE.ERR_CODE = INSPECTION_DATA_DOC.ERR_CODE AND ERROR_TABLE.CTR_CD = INSPECTION_DATA_DOC.CTR_CD)
          WHERE INSPECTION_DATA_DOC.CTR_CD='${DATA.CTR_CD}' AND INSPECT_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE}' ${condition2}
          GROUP BY ERROR_TABLE.ERR_CODE, ERROR_TABLE.ERR_NAME_VN, ERROR_TABLE.ERR_NAME_KR
          ${condition}`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "getInspectionWorstByCode":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = ``;
          if (DATA.WORSTBY === 'AMOUNT')
            condition = `ORDER BY SUM(CAST(INSPECTION_DATA_DOC.NG_AMOUNT as bigint)) DESC`
          if (DATA.WORSTBY === 'QTY')
            condition = `ORDER BY SUM(CAST(INSPECTION_DATA_DOC.NG_QTY as bigint)) DESC`
          let condition2 = ``;
          if (DATA.NG_TYPE !== 'ALL') {
            condition2 += ` AND ERROR_TABLE.ERR_TYPE ='${DATA.NG_TYPE}'`
          }
          else {
            condition2 += ` AND (ERROR_TABLE.ERR_TYPE ='M' OR ERROR_TABLE.ERR_TYPE='P') `;
          }
          let condition3 = ``;
          if (DATA.codeArray.length === 1) {
            condition3 += ` AND INSPECTION_DATA_DOC.G_CODE='${DATA.codeArray[0]}'`
          }
          else if (DATA.codeArray.length > 1) {
            let codeString = ``;
            let codeArStr = DATA.codeArray.map((ele, index) => `'${ele}'`).join(",");
            condition3 += ` AND INSPECTION_DATA_DOC.G_CODE IN (${codeArStr})`;
          }
          let condition4 = `WHERE ZTBINSPECTNGTB2.ERR_CODE='${DATA.ERR_CODE}' `;
          if (DATA.CUST_NAME_KD !== '') {
            condition4 += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`
          }
          let setpdQuery = `
          WITH INSPECTION_DATA_DOC AS
          (
          SELECT CAST(ZTBINSPECTNGTB.INSPECT_START_TIME as date) AS INSPECT_DATE, DATEPART(year, ZTBINSPECTNGTB.INSPECT_START_TIME) AS YEAR_NUM, DATEPART(ISO_WEEK, ZTBINSPECTNGTB.INSPECT_START_TIME) AS WEEK_NUM,
          ZTBINSPECTNGTB.INSPECT_TOTAL_QTY, M100.G_CODE, M100.G_NAME_KD, ZTBINSPECTNGTB.INSPECT_OK_QTY, ZTBINSPECTNGTB2.NG_QTY, (ZTBINSPECTNGTB2.NG_QTY * M100.PROD_LAST_PRICE)  AS NG_AMOUNT, ZTBINSPECTNGTB2.ERR_CODE, ZTBINSPECTNGTB.CTR_CD
          FROM ZTBINSPECTNGTB2
          LEFT JOIN ZTBINSPECTNGTB ON (ZTBINSPECTNGTB2.INSPECT_ID = ZTBINSPECTNGTB.INSPECT_ID AND ZTBINSPECTNGTB2.CTR_CD = ZTBINSPECTNGTB.CTR_CD)
          LEFT JOIN M100 ON (M100.G_CODE = ZTBINSPECTNGTB.G_CODE AND M100.CTR_CD = ZTBINSPECTNGTB.CTR_CD)
          LEFT JOIN P400 ON (P400.PROD_REQUEST_NO = ZTBINSPECTNGTB.PROD_REQUEST_NO AND P400.CTR_CD = ZTBINSPECTNGTB.CTR_CD)
          LEFT JOIN M110 ON (M110.CUST_CD = P400.CUST_CD AND M110.CTR_CD = P400.CTR_CD)
          ${condition4}          
          )
          SELECT INSPECTION_DATA_DOC.G_CODE, INSPECTION_DATA_DOC.G_NAME_KD,SUM(CAST(INSPECTION_DATA_DOC.INSPECT_TOTAL_QTY as bigint)) AS INSPECT_TOTAL_QTY, SUM(CAST(INSPECTION_DATA_DOC.NG_QTY as bigint)) AS NG_QTY, SUM(NG_AMOUNT) AS NG_AMOUNT FROM INSPECTION_DATA_DOC 
          LEFT JOIN ERROR_TABLE ON (ERROR_TABLE.ERR_CODE = INSPECTION_DATA_DOC.ERR_CODE AND ERROR_TABLE.CTR_CD = INSPECTION_DATA_DOC.CTR_CD)
          WHERE INSPECTION_DATA_DOC.CTR_CD='${DATA.CTR_CD}' AND INSPECT_DATE  BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE}' ${condition2} AND INSPECTION_DATA_DOC.NG_AMOUNT <> 0 ${condition3}
          GROUP BY INSPECTION_DATA_DOC.G_CODE, INSPECTION_DATA_DOC.G_NAME_KD
          ${condition}`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "getInspectionSummary":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = ``;
          if (DATA.codeArray.length === 1) {
            condition += ` AND ZTBINSPECTNGTB.G_CODE='${DATA.codeArray[0]}'`
          }
          else if (DATA.codeArray.length > 1) {
            let codeString = ``;
            let codeArStr = DATA.codeArray.map((ele, index) => `'${ele}'`).join(",");
            condition += ` AND ZTBINSPECTNGTB.G_CODE IN (${codeArStr})`;
          }
          if (DATA.CUST_NAME_KD !== '') {
            condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`
          }
          let setpdQuery = `
          SELECT SUM(CAST((INSPECT_TOTAL_QTY -ERR32)as bigint)) AS ISP_TT_QTY, SUM(CAST(INSPECT_OK_QTY as bigint)) AS INSP_OK_QTY , SUM(CAST(ERR4 AS bigint)+CAST(ERR5 AS bigint)+CAST(ERR6 AS bigint)+CAST(ERR7 AS bigint)+CAST(ERR8 AS bigint)+CAST(ERR9 AS bigint)+CAST(ERR10 AS bigint)+CAST(ERR11 AS bigint)) AS M_NG_QTY, SUM(CAST(ERR12 AS bigint)+CAST(ERR13 AS bigint)+CAST(ERR14 AS bigint)+CAST(ERR15 AS bigint)+CAST(ERR16 AS bigint)+CAST(ERR17 AS bigint)+CAST(ERR18 AS bigint)+CAST(ERR19 AS bigint)+CAST(ERR20 AS bigint)+CAST(ERR21 AS bigint)+CAST(ERR22 AS bigint)+CAST(ERR23 AS bigint)+CAST(ERR24 AS bigint)+CAST(ERR25 AS bigint)+CAST(ERR26 AS bigint)+CAST(ERR27 AS bigint)+CAST(ERR28 AS bigint)+CAST(ERR29 AS bigint)+CAST(ERR30 AS bigint)+CAST(ERR31 AS bigint)) AS P_NG_QTY, 
          SUM(isnull(M100.PROD_LAST_PRICE,0) * CAST((INSPECT_TOTAL_QTY -ERR32)as bigint)) AS ISP_TT_AMOUNT,
          SUM(isnull(M100.PROD_LAST_PRICE,0) * CAST(INSPECT_OK_QTY as bigint)) AS INSP_OK_AMOUNT,
          SUM(isnull(M100.PROD_LAST_PRICE,0) * (CAST(ERR4 AS bigint)+CAST(ERR5 AS bigint)+CAST(ERR6 AS bigint)+CAST(ERR7 AS bigint)+CAST(ERR8 AS bigint)+CAST(ERR9 AS bigint)+CAST(ERR10 AS bigint)+CAST(ERR11 AS bigint))) AS M_NG_AMOUNT,
          SUM(isnull(M100.PROD_LAST_PRICE,0) * (CAST(ERR12 AS bigint)+CAST(ERR13 AS bigint)+CAST(ERR14 AS bigint)+CAST(ERR15 AS bigint)+CAST(ERR16 AS bigint)+CAST(ERR17 AS bigint)+CAST(ERR18 AS bigint)+CAST(ERR19 AS bigint)+CAST(ERR20 AS bigint)+CAST(ERR21 AS bigint)+CAST(ERR22 AS bigint)+CAST(ERR23 AS bigint)+CAST(ERR24 AS bigint)+CAST(ERR25 AS bigint)+CAST(ERR26 AS bigint)+CAST(ERR27 AS bigint)+CAST(ERR28 AS bigint)+CAST(ERR29 AS bigint)+CAST(ERR30 AS bigint)+CAST(ERR31 AS bigint))) AS P_NG_AMOUNT
                    FROM ZTBINSPECTNGTB
                LEFT JOIN M100 ON M100.G_CODE = ZTBINSPECTNGTB.G_CODE AND M100.CTR_CD = ZTBINSPECTNGTB.CTR_CD
                LEFT JOIN P400 ON P400.PROD_REQUEST_NO = ZTBINSPECTNGTB.PROD_REQUEST_NO AND P400.CTR_CD = ZTBINSPECTNGTB.CTR_CD
                    LEFT JOIN M110 ON M110.CUST_CD = P400.CUST_CD AND M110.CTR_CD = P400.CTR_CD
          WHERE ZTBINSPECTNGTB.CTR_CD='${DATA.CTR_CD}' AND INSPECT_START_TIME  BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE} 23:59:59' ${condition}
          `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "getPQCSummary":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = `WHERE 1=1 `;
          if (DATA.codeArray.length === 1) {
            condition += ` AND ZTBINSPECTNGTB.G_CODE='${DATA.codeArray[0]}'`
          }
          else if (DATA.codeArray.length > 1) {
            let codeString = ``;
            let codeArStr = DATA.codeArray.map((ele, index) => `'${ele}'`).join(",");
            condition += ` AND ZTBINSPECTNGTB.G_CODE IN (${codeArStr})`;
          }
          if (DATA.CUST_NAME_KD !== '') {
            condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`
          }
          let setpdQuery = `
          WITH PQC_DATA AS
          (
          SELECT CONCAT(YEAR(ZTBPQC1TABLE.SETTING_OK_TIME),'_', DATEPART(ISO_WEEK, ZTBPQC1TABLE.SETTING_OK_TIME)) AS SETTING_YW, CONCAT(YEAR(ZTBPQC1TABLE.SETTING_OK_TIME),'_', MONTH(ZTBPQC1TABLE.SETTING_OK_TIME)) AS SETTING_YM, CAST(ZTBPQC1TABLE.SETTING_OK_TIME as date)  AS SETTING_DATE, YEAR(ZTBPQC1TABLE.SETTING_OK_TIME) AS SETTING_YEAR, MONTH(ZTBPQC1TABLE.SETTING_OK_TIME) AS SETTING_MONTH, DATEPART(ISO_WEEK, ZTBPQC1TABLE.SETTING_OK_TIME) AS SETTING_WEEK,   ZTBPQC1TABLE.PQC1_ID, PQC3_ID, isnull(M100.PROD_LAST_PRICE,0) * isnull(ZTBPQC1TABLE.INSPECT_SAMPLE_QTY,0) AS INSPECT_AMOUNT, ZTBPQC1TABLE.CTR_CD FROM ZTBPQC1TABLE 
          LEFT JOIN ZTBPQC3TABLE ON (ZTBPQC1TABLE.PQC1_ID = ZTBPQC3TABLE.PQC1_ID AND ZTBPQC1TABLE.CTR_CD = ZTBPQC3TABLE.CTR_CD)
          LEFT JOIN M100 ON M100.G_CODE = ZTBPQC1TABLE.G_CODE AND M100.CTR_CD = ZTBPQC1TABLE.CTR_CD
          LEFT JOIN M110 ON M110.CUST_CD = M100.CUST_CD AND M110.CTR_CD = M100.CTR_CD
          ${condition}
          )
          SELECT COUNT(PQC1_ID) AS TOTAL_LOT, COUNT(PQC3_ID) AS NG_LOT,COUNT(PQC3_ID)*1.0/COUNT(PQC1_ID) AS NG_RATE, SUM(INSPECT_AMOUNT) AS  INSPECT_AMOUNT FROM PQC_DATA
          WHERE PQC_DATA.SETTING_DATE  BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE}' AND PQC_DATA.CTR_CD='${DATA.CTR_CD}'
          `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "dailyFcost":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = ``;
          if (DATA.codeArray.length === 1) {
            condition += ` AND ZTBINSPECTNGTB.G_CODE='${DATA.codeArray[0]}'`
          }
          else if (DATA.codeArray.length > 1) {
            let codeString = ``;
            let codeArStr = DATA.codeArray.map((ele, index) => `'${ele}'`).join(",");
            condition += ` AND ZTBINSPECTNGTB.G_CODE IN (${codeArStr})`;
          }
          if (DATA.CUST_NAME_KD !== '') {
            condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`
          }
          let setpdQuery = `
          SELECT CAST(ZTBINSPECTNGTB.INSPECT_START_TIME AS DATE) AS INSPECT_DATE, SUM(CAST(INSPECT_TOTAL_QTY as bigint)) AS ISP_TT_QTY, SUM(CAST(INSPECT_OK_QTY as bigint)) AS INSP_OK_QTY , SUM(CAST(ERR4 AS bigint)+CAST(ERR5 AS bigint)+CAST(ERR6 AS bigint)+CAST(ERR7 AS bigint)+CAST(ERR8 AS bigint)+CAST(ERR9 AS bigint)+CAST(ERR10 AS bigint)+CAST(ERR11 AS bigint)) AS M_NG_QTY, SUM(CAST(ERR12 AS bigint)+CAST(ERR13 AS bigint)+CAST(ERR14 AS bigint)+CAST(ERR15 AS bigint)+CAST(ERR16 AS bigint)+CAST(ERR17 AS bigint)+CAST(ERR18 AS bigint)+CAST(ERR19 AS bigint)+CAST(ERR20 AS bigint)+CAST(ERR21 AS bigint)+CAST(ERR22 AS bigint)+CAST(ERR23 AS bigint)+CAST(ERR24 AS bigint)+CAST(ERR25 AS bigint)+CAST(ERR26 AS bigint)+CAST(ERR27 AS bigint)+CAST(ERR28 AS bigint)+CAST(ERR29 AS bigint)+CAST(ERR30 AS bigint)+CAST(ERR31 AS bigint)) AS P_NG_QTY, 
          SUM(isnull(M100.PROD_LAST_PRICE,0) * CAST(INSPECT_TOTAL_QTY as bigint)) AS ISP_TT_AMOUNT,
          SUM(isnull(M100.PROD_LAST_PRICE,0) * CAST(INSPECT_OK_QTY as bigint)) AS INSP_OK_AMOUNT,
          SUM(isnull(M100.PROD_LAST_PRICE,0) * (CAST(ERR4 AS bigint)+CAST(ERR5 AS bigint)+CAST(ERR6 AS bigint)+CAST(ERR7 AS bigint)+CAST(ERR8 AS bigint)+CAST(ERR9 AS bigint)+CAST(ERR10 AS bigint)+CAST(ERR11 AS bigint))) AS M_NG_AMOUNT,
          SUM(isnull(M100.PROD_LAST_PRICE,0) * (CAST(ERR12 AS bigint)+CAST(ERR13 AS bigint)+CAST(ERR14 AS bigint)+CAST(ERR15 AS bigint)+CAST(ERR16 AS bigint)+CAST(ERR17 AS bigint)+CAST(ERR18 AS bigint)+CAST(ERR19 AS bigint)+CAST(ERR20 AS bigint)+CAST(ERR21 AS bigint)+CAST(ERR22 AS bigint)+CAST(ERR23 AS bigint)+CAST(ERR24 AS bigint)+CAST(ERR25 AS bigint)+CAST(ERR26 AS bigint)+CAST(ERR27 AS bigint)+CAST(ERR28 AS bigint)+CAST(ERR29 AS bigint)+CAST(ERR30 AS bigint)+CAST(ERR31 AS bigint))) AS P_NG_AMOUNT,
          ZTBINSPECTNGTB.CTR_CD
                    FROM ZTBINSPECTNGTB
                LEFT JOIN M100 ON M100.G_CODE = ZTBINSPECTNGTB.G_CODE AND M100.CTR_CD = ZTBINSPECTNGTB.CTR_CD
                LEFT JOIN P400 ON P400.PROD_REQUEST_NO = ZTBINSPECTNGTB.PROD_REQUEST_NO AND P400.CTR_CD = ZTBINSPECTNGTB.CTR_CD
                    LEFT JOIN M110 ON M110.CUST_CD = P400.CUST_CD AND M110.CTR_CD = P400.CTR_CD
          WHERE INSPECT_START_TIME  BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE} 23:59:59' AND ZTBINSPECTNGTB.CTR_CD='${DATA.CTR_CD}' ${condition}
          GROUP BY CAST(ZTBINSPECTNGTB.INSPECT_START_TIME AS DATE), ZTBINSPECTNGTB.CTR_CD
				ORDER BY CAST(ZTBINSPECTNGTB.INSPECT_START_TIME AS DATE) DESC
          `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "weeklyFcost":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = ``;
          if (DATA.codeArray.length === 1) {
            condition += ` AND ZTBINSPECTNGTB.G_CODE='${DATA.codeArray[0]}'`
          }
          else if (DATA.codeArray.length > 1) {
            let codeString = ``;
            let codeArStr = DATA.codeArray.map((ele, index) => `'${ele}'`).join(",");
            condition += ` AND ZTBINSPECTNGTB.G_CODE IN (${codeArStr})`;
          }
          if (DATA.CUST_NAME_KD !== '') {
            condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`
          }
          let setpdQuery = `
          SELECT CONCAT(YEAR(ZTBINSPECTNGTB.INSPECT_START_TIME),'_',DATEPART(ISO_WEEK,ZTBINSPECTNGTB.INSPECT_START_TIME)) AS INSPECT_YW, YEAR(ZTBINSPECTNGTB.INSPECT_START_TIME) AS INSPECT_YEAR,DATEPART(ISO_WEEK,ZTBINSPECTNGTB.INSPECT_START_TIME) AS INSPECT_WEEK, SUM(CAST(INSPECT_TOTAL_QTY as bigint)) AS ISP_TT_QTY, SUM(CAST(INSPECT_OK_QTY as bigint)) AS INSP_OK_QTY , SUM(CAST(ERR4 AS bigint)+CAST(ERR5 AS bigint)+CAST(ERR6 AS bigint)+CAST(ERR7 AS bigint)+CAST(ERR8 AS bigint)+CAST(ERR9 AS bigint)+CAST(ERR10 AS bigint)+CAST(ERR11 AS bigint)) AS M_NG_QTY, SUM(CAST(ERR12 AS bigint)+CAST(ERR13 AS bigint)+CAST(ERR14 AS bigint)+CAST(ERR15 AS bigint)+CAST(ERR16 AS bigint)+CAST(ERR17 AS bigint)+CAST(ERR18 AS bigint)+CAST(ERR19 AS bigint)+CAST(ERR20 AS bigint)+CAST(ERR21 AS bigint)+CAST(ERR22 AS bigint)+CAST(ERR23 AS bigint)+CAST(ERR24 AS bigint)+CAST(ERR25 AS bigint)+CAST(ERR26 AS bigint)+CAST(ERR27 AS bigint)+CAST(ERR28 AS bigint)+CAST(ERR29 AS bigint)+CAST(ERR30 AS bigint)+CAST(ERR31 AS bigint)) AS P_NG_QTY, 
          SUM(isnull(M100.PROD_LAST_PRICE,0) * CAST(INSPECT_TOTAL_QTY as bigint)) AS ISP_TT_AMOUNT,
          SUM(isnull(M100.PROD_LAST_PRICE,0) * CAST(INSPECT_OK_QTY as bigint)) AS INSP_OK_AMOUNT,
          SUM(isnull(M100.PROD_LAST_PRICE,0) * (CAST(ERR4 AS bigint)+CAST(ERR5 AS bigint)+CAST(ERR6 AS bigint)+CAST(ERR7 AS bigint)+CAST(ERR8 AS bigint)+CAST(ERR9 AS bigint)+CAST(ERR10 AS bigint)+CAST(ERR11 AS bigint))) AS M_NG_AMOUNT,
          SUM(isnull(M100.PROD_LAST_PRICE,0) * (CAST(ERR12 AS bigint)+CAST(ERR13 AS bigint)+CAST(ERR14 AS bigint)+CAST(ERR15 AS bigint)+CAST(ERR16 AS bigint)+CAST(ERR17 AS bigint)+CAST(ERR18 AS bigint)+CAST(ERR19 AS bigint)+CAST(ERR20 AS bigint)+CAST(ERR21 AS bigint)+CAST(ERR22 AS bigint)+CAST(ERR23 AS bigint)+CAST(ERR24 AS bigint)+CAST(ERR25 AS bigint)+CAST(ERR26 AS bigint)+CAST(ERR27 AS bigint)+CAST(ERR28 AS bigint)+CAST(ERR29 AS bigint)+CAST(ERR30 AS bigint)+CAST(ERR31 AS bigint))) AS P_NG_AMOUNT,
          ZTBINSPECTNGTB.CTR_CD
                    FROM ZTBINSPECTNGTB
                LEFT JOIN M100 ON M100.G_CODE = ZTBINSPECTNGTB.G_CODE AND M100.CTR_CD = ZTBINSPECTNGTB.CTR_CD
                LEFT JOIN P400 ON P400.PROD_REQUEST_NO = ZTBINSPECTNGTB.PROD_REQUEST_NO AND P400.CTR_CD = ZTBINSPECTNGTB.CTR_CD
                    LEFT JOIN M110 ON M110.CUST_CD = P400.CUST_CD AND M110.CTR_CD = P400.CTR_CD
          WHERE INSPECT_START_TIME  BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE} 23:59:59' AND ZTBINSPECTNGTB.CTR_CD='${DATA.CTR_CD}' ${condition}
          GROUP BY YEAR(ZTBINSPECTNGTB.INSPECT_START_TIME),DATEPART(ISO_WEEK,ZTBINSPECTNGTB.INSPECT_START_TIME), ZTBINSPECTNGTB.CTR_CD
				ORDER BY YEAR(ZTBINSPECTNGTB.INSPECT_START_TIME)DESC ,DATEPART(ISO_WEEK,ZTBINSPECTNGTB.INSPECT_START_TIME) DESC
          `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "monthlyFcost":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = ``;
          if (DATA.codeArray.length === 1) {
            condition += ` AND ZTBINSPECTNGTB.G_CODE='${DATA.codeArray[0]}'`
          }
          else if (DATA.codeArray.length > 1) {
            let codeString = ``;
            let codeArStr = DATA.codeArray.map((ele, index) => `'${ele}'`).join(",");
            condition += ` AND ZTBINSPECTNGTB.G_CODE IN (${codeArStr})`;
          }
          if (DATA.CUST_NAME_KD !== '') {
            condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`
          }
          let setpdQuery = `
          SELECT CONCAT(YEAR(ZTBINSPECTNGTB.INSPECT_START_TIME),'_',MONTH(ZTBINSPECTNGTB.INSPECT_START_TIME)) AS INSPECT_YM, YEAR(ZTBINSPECTNGTB.INSPECT_START_TIME) AS INSPECT_YEAR,MONTH(ZTBINSPECTNGTB.INSPECT_START_TIME) AS INSPECT_MONTH, SUM(CAST(INSPECT_TOTAL_QTY as bigint)) AS ISP_TT_QTY, SUM(CAST(INSPECT_OK_QTY as bigint)) AS INSP_OK_QTY , SUM(CAST(ERR4 AS bigint)+CAST(ERR5 AS bigint)+CAST(ERR6 AS bigint)+CAST(ERR7 AS bigint)+CAST(ERR8 AS bigint)+CAST(ERR9 AS bigint)+CAST(ERR10 AS bigint)+CAST(ERR11 AS bigint)) AS M_NG_QTY, SUM(CAST(ERR12 AS bigint)+CAST(ERR13 AS bigint)+CAST(ERR14 AS bigint)+CAST(ERR15 AS bigint)+CAST(ERR16 AS bigint)+CAST(ERR17 AS bigint)+CAST(ERR18 AS bigint)+CAST(ERR19 AS bigint)+CAST(ERR20 AS bigint)+CAST(ERR21 AS bigint)+CAST(ERR22 AS bigint)+CAST(ERR23 AS bigint)+CAST(ERR24 AS bigint)+CAST(ERR25 AS bigint)+CAST(ERR26 AS bigint)+CAST(ERR27 AS bigint)+CAST(ERR28 AS bigint)+CAST(ERR29 AS bigint)+CAST(ERR30 AS bigint)+CAST(ERR31 AS bigint)) AS P_NG_QTY, 
          SUM(isnull(M100.PROD_LAST_PRICE,0) * CAST(INSPECT_TOTAL_QTY as bigint)) AS ISP_TT_AMOUNT,
          SUM(isnull(M100.PROD_LAST_PRICE,0) * CAST(INSPECT_OK_QTY as bigint)) AS INSP_OK_AMOUNT,
          SUM(isnull(M100.PROD_LAST_PRICE,0) * (CAST(ERR4 AS bigint)+CAST(ERR5 AS bigint)+CAST(ERR6 AS bigint)+CAST(ERR7 AS bigint)+CAST(ERR8 AS bigint)+CAST(ERR9 AS bigint)+CAST(ERR10 AS bigint)+CAST(ERR11 AS bigint))) AS M_NG_AMOUNT,
          SUM(isnull(M100.PROD_LAST_PRICE,0) * (CAST(ERR12 AS bigint)+CAST(ERR13 AS bigint)+CAST(ERR14 AS bigint)+CAST(ERR15 AS bigint)+CAST(ERR16 AS bigint)+CAST(ERR17 AS bigint)+CAST(ERR18 AS bigint)+CAST(ERR19 AS bigint)+CAST(ERR20 AS bigint)+CAST(ERR21 AS bigint)+CAST(ERR22 AS bigint)+CAST(ERR23 AS bigint)+CAST(ERR24 AS bigint)+CAST(ERR25 AS bigint)+CAST(ERR26 AS bigint)+CAST(ERR27 AS bigint)+CAST(ERR28 AS bigint)+CAST(ERR29 AS bigint)+CAST(ERR30 AS bigint)+CAST(ERR31 AS bigint))) AS P_NG_AMOUNT,
          ZTBINSPECTNGTB.CTR_CD
                    FROM ZTBINSPECTNGTB
                LEFT JOIN M100 ON M100.G_CODE = ZTBINSPECTNGTB.G_CODE AND M100.CTR_CD = ZTBINSPECTNGTB.CTR_CD
                LEFT JOIN P400 ON P400.PROD_REQUEST_NO = ZTBINSPECTNGTB.PROD_REQUEST_NO AND P400.CTR_CD = ZTBINSPECTNGTB.CTR_CD
                    LEFT JOIN M110 ON M110.CUST_CD = P400.CUST_CD AND M110.CTR_CD = P400.CTR_CD
          WHERE INSPECT_START_TIME  BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE} 23:59:59' AND ZTBINSPECTNGTB.CTR_CD='${DATA.CTR_CD}' ${condition}
          GROUP BY YEAR(ZTBINSPECTNGTB.INSPECT_START_TIME),MONTH(ZTBINSPECTNGTB.INSPECT_START_TIME), ZTBINSPECTNGTB.CTR_CD
				ORDER BY YEAR(ZTBINSPECTNGTB.INSPECT_START_TIME)DESC ,MONTH(ZTBINSPECTNGTB.INSPECT_START_TIME) DESC
          `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "annuallyFcost":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = ``;
          if (DATA.codeArray.length === 1) {
            condition += ` AND ZTBINSPECTNGTB.G_CODE='${DATA.codeArray[0]}'`
          }
          else if (DATA.codeArray.length > 1) {
            let codeString = ``;
            let codeArStr = DATA.codeArray.map((ele, index) => `'${ele}'`).join(",");
            condition += ` AND ZTBINSPECTNGTB.G_CODE IN (${codeArStr})`;
          }
          if (DATA.CUST_NAME_KD !== '') {
            condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`
          }
          let setpdQuery = `
          SELECT YEAR(ZTBINSPECTNGTB.INSPECT_START_TIME) AS INSPECT_YEAR, SUM(CAST(INSPECT_TOTAL_QTY as bigint)) AS ISP_TT_QTY, SUM(CAST(INSPECT_OK_QTY as bigint)) AS INSP_OK_QTY , SUM(CAST(ERR4 AS bigint)+CAST(ERR5 AS bigint)+CAST(ERR6 AS bigint)+CAST(ERR7 AS bigint)+CAST(ERR8 AS bigint)+CAST(ERR9 AS bigint)+CAST(ERR10 AS bigint)+CAST(ERR11 AS bigint)) AS M_NG_QTY, SUM(CAST(ERR12 AS bigint)+CAST(ERR13 AS bigint)+CAST(ERR14 AS bigint)+CAST(ERR15 AS bigint)+CAST(ERR16 AS bigint)+CAST(ERR17 AS bigint)+CAST(ERR18 AS bigint)+CAST(ERR19 AS bigint)+CAST(ERR20 AS bigint)+CAST(ERR21 AS bigint)+CAST(ERR22 AS bigint)+CAST(ERR23 AS bigint)+CAST(ERR24 AS bigint)+CAST(ERR25 AS bigint)+CAST(ERR26 AS bigint)+CAST(ERR27 AS bigint)+CAST(ERR28 AS bigint)+CAST(ERR29 AS bigint)+CAST(ERR30 AS bigint)+CAST(ERR31 AS bigint)) AS P_NG_QTY, 
          SUM(isnull(M100.PROD_LAST_PRICE,0) * CAST(INSPECT_TOTAL_QTY as bigint)) AS ISP_TT_AMOUNT,
          SUM(isnull(M100.PROD_LAST_PRICE,0) * CAST(INSPECT_OK_QTY as bigint)) AS INSP_OK_AMOUNT,
          SUM(isnull(M100.PROD_LAST_PRICE,0) * (CAST(ERR4 AS bigint)+CAST(ERR5 AS bigint)+CAST(ERR6 AS bigint)+CAST(ERR7 AS bigint)+CAST(ERR8 AS bigint)+CAST(ERR9 AS bigint)+CAST(ERR10 AS bigint)+CAST(ERR11 AS bigint))) AS M_NG_AMOUNT,
          SUM(isnull(M100.PROD_LAST_PRICE,0) * (CAST(ERR12 AS bigint)+CAST(ERR13 AS bigint)+CAST(ERR14 AS bigint)+CAST(ERR15 AS bigint)+CAST(ERR16 AS bigint)+CAST(ERR17 AS bigint)+CAST(ERR18 AS bigint)+CAST(ERR19 AS bigint)+CAST(ERR20 AS bigint)+CAST(ERR21 AS bigint)+CAST(ERR22 AS bigint)+CAST(ERR23 AS bigint)+CAST(ERR24 AS bigint)+CAST(ERR25 AS bigint)+CAST(ERR26 AS bigint)+CAST(ERR27 AS bigint)+CAST(ERR28 AS bigint)+CAST(ERR29 AS bigint)+CAST(ERR30 AS bigint)+CAST(ERR31 AS bigint))) AS P_NG_AMOUNT
                    FROM ZTBINSPECTNGTB
                LEFT JOIN M100 ON M100.G_CODE = ZTBINSPECTNGTB.G_CODE AND M100.CTR_CD = ZTBINSPECTNGTB.CTR_CD
                LEFT JOIN P400 ON P400.PROD_REQUEST_NO = ZTBINSPECTNGTB.PROD_REQUEST_NO AND P400.CTR_CD = ZTBINSPECTNGTB.CTR_CD
                    LEFT JOIN M110 ON M110.CUST_CD = P400.CUST_CD AND M110.CTR_CD = P400.CTR_CD
          WHERE INSPECT_START_TIME  BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE} 23:59:59' ${condition} AND ZTBINSPECTNGTB.CTR_CD='${DATA.CTR_CD}'
          GROUP BY YEAR(ZTBINSPECTNGTB.INSPECT_START_TIME)
				ORDER BY YEAR(ZTBINSPECTNGTB.INSPECT_START_TIME) DESC
          `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "checkPlanIdChecksheet":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
          SELECT * FROM  ZTBPQC1TABLE WHERE CTR_CD='${DATA.CTR_CD}' AND PLAN_ID='${DATA.PLAN_ID}' 
          `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "update_checksheet_image_status":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
          UPDATE  ZTBPQC1TABLE SET IMG_${DATA.STT}= 'Y' WHERE CTR_CD='${DATA.CTR_CD}' AND PLAN_ID='${DATA.PLAN_ID}' 
          `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "loadRecentDM":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `  
          WITH P500_A AS
          (
          SELECT P500.CTR_CD, P500.PLAN_ID, ZTB_QLSXPLAN.PROCESS_NUMBER, SUM(P500.INPUT_QTY) AS TT_INPUT_QTY, SUM(isnull(P500.REMAIN_QTY,0)) AS TT_REMAIN_QTY,  (SUM(P500.INPUT_QTY)- SUM(isnull(P500.REMAIN_QTY,0))) AS TT_USED_QTY FROM P500 
          LEFT JOIN ZTB_QLSXPLAN ON (ZTB_QLSXPLAN.PLAN_ID =  P500.PLAN_ID AND ZTB_QLSXPLAN.CTR_CD =  P500.CTR_CD)
          LEFT JOIN P400 ON (P400.PROD_REQUEST_NO = P500.PROD_REQUEST_NO AND P400.CTR_CD = P500.CTR_CD)
          WHERE P500.INS_DATE > DATEADD(day,-60,GETDATE()) AND ZTB_QLSXPLAN.PROCESS_NUMBER is not null AND P400.CODE_55 <> '04' AND P500.CTR_CD='${DATA.CTR_CD}'
          GROUP BY P500.CTR_CD,P500.PLAN_ID, ZTB_QLSXPLAN.PROCESS_NUMBER
          ),
          P500_B AS 
          (
          SELECT ZTB_SX_RESULT.CTR_CD, ZTB_SX_RESULT.G_CODE, P500_A.PLAN_ID, P500_A.PROCESS_NUMBER, P500_A.TT_INPUT_QTY,P500_A.TT_REMAIN_QTY, P500_A.TT_USED_QTY,ZTB_SX_RESULT.SX_RESULT,ZTB_SX_RESULT.SETTING_MET,ZTB_SX_RESULT.PD, ZTB_SX_RESULT.CAVITY,(P500_A.TT_USED_QTY- ZTB_SX_RESULT.SETTING_MET) AS PURE_SX_MET,
          1-isnull(ZTB_SX_RESULT.SX_RESULT * ZTB_SX_RESULT.PD / ZTB_SX_RESULT. CAVITY/1000 ,0)/isnull((P500_A.TT_USED_QTY- ZTB_SX_RESULT.SETTING_MET),0) AS LOSS_CHITHI
          FROM P500_A 
          LEFT JOIN ZTB_SX_RESULT ON (ZTB_SX_RESULT.PLAN_ID = P500_A.PLAN_ID AND ZTB_SX_RESULT.CTR_CD = P500_A.CTR_CD)
          ),
          LOSS_TB AS
          (
          SELECT P500_B.CTR_CD, P500_B.G_CODE, P500_B.PROCESS_NUMBER, AVG(isnull(P500_B.TT_INPUT_QTY,0)) AS TT_INPUT_QTY, AVG(isnull(P500_B.TT_REMAIN_QTY,0)) AS TT_REMAIN_QTY, AVG(isnull(P500_B.TT_USED_QTY,0)) AS TT_USED_QTY, AVG(isnull(P500_B.SETTING_MET,0)) AS TT_SETTING_MET, AVG(isnull(P500_B.PURE_SX_MET,0)) AS TT_SX, AVG(isnull(P500_B.SX_RESULT * P500_B.PD / P500_B. CAVITY/1000 ,0)) AS TT_SX_RESULT, 
          AVG(P500_B.LOSS_CHITHI)*100 AS LOSS_SX
          FROM P500_B
          WHERE P500_B.SX_RESULT is not null AND isnull(P500_B.SETTING_MET,0) <> 0 AND  isnull(P500_B.PURE_SX_MET,0) <> 0
          GROUP BY P500_B.CTR_CD, P500_B.G_CODE, P500_B.PROCESS_NUMBER
          )
          SELECT * FROM LOSS_TB 
          WHERE G_CODE='${DATA.G_CODE}' AND CTR_CD='${DATA.CTR_CD}'
          `;
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "loadtiledat":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = `WHERE P400.CODE_55 <> '04'  AND SX_DATE ='${DATA.PLAN_DATE}'`
          if (DATA.FACTORY !== 'ALL')
            condition += ` AND ZTB_SX_RESULT.FACTORY = '${DATA.FACTORY}' `;
          let conditionEQ = ``;
          if (DATA.MACHINE !== 'ALL')
            conditionEQ = `WHERE SUBSTRING(SUMARRYTB.EQ_NAME,1,2) = '${DATA.MACHINE}'`;
          let setpdQuery = `  
          WITH KQSXTB AS
          (
          SELECT ZTB_SX_RESULT.CTR_CD,ZTB_QLSXPLAN.STEP, ZTB_SX_RESULT.WORK_SHIFT, ZTB_QLSXPLAN.PROD_REQUEST_NO, ZTB_SX_RESULT.EQ_NAME, ZTB_QLSXPLAN.PLAN_QTY, isnull(ZTB_SX_RESULT.SX_RESULT,0) AS SX_RESULT FROM ZTB_SX_RESULT
          LEFT JOIN ZTB_QLSXPLAN ON (ZTB_QLSXPLAN.PLAN_ID = ZTB_SX_RESULT.PLAN_ID AND ZTB_QLSXPLAN.CTR_CD = ZTB_SX_RESULT.CTR_CD)
          LEFT JOIN P400 ON (P400.PROD_REQUEST_NO = ZTB_QLSXPLAN.PROD_REQUEST_NO AND P400.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
           ${condition} AND ZTB_SX_RESULT.CTR_CD='${DATA.CTR_CD}'
          ),
          PLAN_TB AS 
          (
          SELECT * FROM 
          (
            SELECT STEP, WORK_SHIFT, PROD_REQUEST_NO, EQ_NAME, CTR_CD, SUM(PLAN_QTY) AS PLAN_QTY FROM  KQSXTB GROUP BY WORK_SHIFT, PROD_REQUEST_NO, EQ_NAME, STEP, CTR_CD
          ) as src
          PIVOT
          (
            SUM(PLAN_QTY) FOR
            WORK_SHIFT IN ([DAY],[NIGHT])
          ) as pvtb
          ),
          RESULT_TB AS
          (
          SELECT * FROM 
          (
            SELECT STEP, WORK_SHIFT, PROD_REQUEST_NO, EQ_NAME, CTR_CD, SUM(SX_RESULT) AS SX_RESULT  FROM  KQSXTB GROUP BY WORK_SHIFT, PROD_REQUEST_NO, EQ_NAME, STEP, CTR_CD
          ) as src
          PIVOT
          (
            SUM(SX_RESULT) FOR
            WORK_SHIFT IN ([DAY],[NIGHT])
          ) as pvtb
          ),
          SUMARRYTB AS 
          (
          SELECT PLAN_TB.EQ_NAME, PLAN_TB.PROD_REQUEST_NO, PLAN_TB.STEP, PLAN_TB.CTR_CD, isnull(PLAN_TB.DAY,0) AS PLAN_DAY, isnull(PLAN_TB.NIGHT,0) AS PLAN_NIGHT, (isnull(PLAN_TB.DAY,0) +isnull(PLAN_TB.NIGHT,0) ) AS PLAN_TOTAL,  isnull(RESULT_TB.DAY,0) AS RESULT_DAY, isnull(RESULT_TB.NIGHT,0) AS RESULT_NIGHT, (isnull(RESULT_TB.DAY,0) + isnull(RESULT_TB.NIGHT,0)) AS RESULT_TOTAL,
          CASE WHEN isnull(PLAN_TB.DAY,0) = 0 THEN 0 ELSE isnull(RESULT_TB.DAY,0)*1.0/isnull(PLAN_TB.DAY,0)*100 END AS DAY_RATE,
          CASE WHEN isnull(PLAN_TB.NIGHT,0) = 0 THEN 0 ELSE isnull(RESULT_TB.NIGHT,0)*1.0/isnull(PLAN_TB.NIGHT,0)*100 END AS NIGHT_RATE,
          CASE WHEN (isnull(PLAN_TB.DAY,0) +isnull(PLAN_TB.NIGHT,0) ) = 0 THEN 0 ELSE (isnull(RESULT_TB.DAY,0) + isnull(RESULT_TB.NIGHT,0))*1.0/(isnull(PLAN_TB.DAY,0) +isnull(PLAN_TB.NIGHT,0))*100 END AS TOTAL_RATE
          FROM PLAN_TB 
          LEFT JOIN RESULT_TB ON (PLAN_TB.PROD_REQUEST_NO = RESULT_TB.PROD_REQUEST_NO AND PLAN_TB.EQ_NAME = RESULT_TB.EQ_NAME AND PLAN_TB.CTR_CD = RESULT_TB.CTR_CD)
          )
          SELECT SUMARRYTB.EQ_NAME, SUMARRYTB.PROD_REQUEST_NO, M100.G_NAME_KD, SUMARRYTB.STEP, SUMARRYTB.PLAN_DAY, SUMARRYTB.PLAN_NIGHT, SUMARRYTB.PLAN_TOTAL, SUMARRYTB.RESULT_DAY, SUMARRYTB.RESULT_NIGHT, SUMARRYTB.RESULT_TOTAL, SUMARRYTB.DAY_RATE, SUMARRYTB.NIGHT_RATE, SUMARRYTB.TOTAL_RATE  FROM SUMARRYTB 
          LEFT JOIN P400 ON (P400.PROD_REQUEST_NO = SUMARRYTB.PROD_REQUEST_NO AND P400.CTR_CD = SUMARRYTB.CTR_CD)
          LEFT JOIN M100 ON (P400.G_CODE = M100.G_CODE AND P400.CTR_CD = M100.CTR_CD)
          ${conditionEQ}
          WHERE SUMARRYTB.CTR_CD='${DATA.CTR_CD}'
          `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "loadBaoCaoTheoRoll":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = ` WHERE P500.INS_DATE > '2023-12-01 00:00:00' AND P500.M_LOT_NO <> '' AND P500.INS_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE} 23:59:59' AND (P500.INPUT_QTY- isnull(P500.REMAIN_QTY,0)) <> 0`
          if (DATA.MACHINE !== 'ALL') {
            condition += ` AND SUBSTRING(P500.EQUIPMENT_CD,1,2)='${DATA.MACHINE}'`
          }
          if (DATA.FACTORY !== 'ALL')
            condition += ` AND ZTB_QLSXPLAN.PLAN_FACTORY='${DATA.FACTORY}'`
          let setpdQuery = `
          WITH P501_A AS
          (
          SELECT P501.M_LOT_NO, P501.PLAN_ID, P501.CTR_CD, SUM(P501.TEMP_QTY) AS TEMP_QTY FROM P501 WHERE P501.INS_DATE > '2023-11-30 20:00:00' AND TEMP_QTY is not null AND P501.CTR_CD='${DATA.CTR_CD}' GROUP BY P501.M_LOT_NO, P501.PLAN_ID, P501.CTR_CD
          ),
          INSP_INPUT_TB AS 
          (
          SELECT PLAN_ID, M_LOT_NO, CTR_CD, CAST(SUM(INPUT_QTY_EA) as bigint) AS INSP_INPUT FROM ZTBINSPECTINPUTTB
          WHERE M_LOT_NO is not null AND M_LOT_NO <> '' AND CTR_CD='${DATA.CTR_CD}'
          GROUP BY PLAN_ID, M_LOT_NO, CTR_CD
          ),
          INSP_NK_TB AS
          (
          SELECT PLAN_ID, M_LOT_NO, CTR_CD, SUM(INSPECT_TOTAL_QTY) AS INSPECT_TOTAL_QTY, SUM(INSPECT_OK_QTY) AS INSPECT_OK_QTY FROM ZTBINSPECTNGTB  WHERE M_LOT_NO is not null AND PLAN_ID is not null AND PLAN_ID <> '' AND M_LOT_NO <>'' AND CTR_CD='${DATA.CTR_CD}' GROUP BY PLAN_ID, M_LOT_NO, CTR_CD
          ),
          PROCESS_TB AS
          (
          SELECT G_CODE, CTR_CD,
          CASE WHEN EQ4 <> 'NA' AND EQ4 <> 'NO' AND EQ4 is not null AND EQ4 <> '' THEN 4 
          WHEN EQ3 <> 'NA' AND EQ3 <> 'NO' AND EQ3 is not null AND EQ3 <> ''  THEN 3
          WHEN EQ2 <> 'NA' AND EQ2 <> 'NO' AND EQ2 is not null AND EQ2 <> ''  THEN 2 
          ELSE 1 END AS MAX_PROCESS_NUMBER
          FROM M100 WHERE CTR_CD='${DATA.CTR_CD}'
          ),
          OUTKHO AS (
          SELECT PLAN_ID, M_LOT_NO, CTR_CD, SUM(OUT_CFM_QTY) AS OUT_CFM_QTY  FROM O302 WHERE PLAN_ID is not null AND CTR_CD='${DATA.CTR_CD}' GROUP BY PLAN_ID, M_LOT_NO, CTR_CD
          )
          SELECT  CASE WHEN P400.CODE_55 ='04' THEN 'SAMPLE' ELSE 'MASS' END AS PHANLOAI,
          CAST(P500.INS_DATE as date) AS INPUT_DATE, ZTB_QLSXPLAN.IS_SETTING, P500.EQUIPMENT_CD,  P500.PROD_REQUEST_NO, ZTB_QLSXPLAN.PLAN_ID, ZTB_QLSXPLAN.PLAN_QTY, ZTB_SX_RESULT.SX_RESULT,
          CASE WHEN ZTB_QLSXPLAN.PLAN_QTY = 0 THEN 0 ELSE ZTB_SX_RESULT.SX_RESULT*1.0/ZTB_QLSXPLAN.PLAN_QTY END AS ACHIVEMENT_RATE,
          M100.PROD_MODEL, M100.G_NAME_KD, M090.M_NAME, M090.WIDTH_CD, isnull(OUTKHO.OUT_CFM_QTY,0) AS WH_OUT, P500.M_LOT_NO, P500.INPUT_QTY, isnull(P500.REMAIN_QTY,0) AS REMAIN_QTY,(P500.INPUT_QTY- isnull(P500.REMAIN_QTY,0)) AS USED_QTY,   ZTB_SX_RESULT.RPM, P500.SETTING_MET, P500.PR_NG, (P500.INPUT_QTY - isnull(P500.REMAIN_QTY,0) -isnull(P500.SETTING_MET,0)- isnull(P500.PR_NG,0)) AS OK_MET_AUTO,  (isnull(P501_A.TEMP_QTY,0) * ZTB_SX_RESULT.PD /ZTB_SX_RESULT.CAVITY/1000) AS OK_MET_TT ,isnull(P500.SETTING_MET,0)*1.0/ (P500.INPUT_QTY - isnull(P500.REMAIN_QTY,0)) AS LOSS_ST,  isnull(P500.PR_NG,0)*1.0/ (P500.INPUT_QTY - isnull(P500.REMAIN_QTY,0)) AS LOSS_SX, (isnull(P500.PR_NG,0) +isnull(P500.SETTING_MET,0) )*1.0/ (P500.INPUT_QTY - isnull(P500.REMAIN_QTY,0)) AS LOSS_TT,
          1-isnull(INSP_NK_TB.INSPECT_OK_QTY,0)*1.0 * M100.PD /(M100.G_C * M100.G_C_R)/(P500.INPUT_QTY - isnull(P500.REMAIN_QTY,0))/1000 AS LOSS_TT_KT,
          isnull(P501_A.TEMP_QTY,0) AS OK_EA,
          CASE WHEN PROCESS_TB.MAX_PROCESS_NUMBER = P500.PR_NB THEN isnull(P501_A.TEMP_QTY,0) ELSE 0 END AS OUTPUT_EA ,
          isnull(INSP_INPUT_TB.INSP_INPUT,0) AS INSPECT_INPUT,
          isnull(INSP_NK_TB.INSPECT_TOTAL_QTY,0) AS INSPECT_TT_QTY,
          isnull(INSP_NK_TB.INSPECT_OK_QTY,0) AS INSPECT_OK_QTY,
          isnull(INSP_NK_TB.INSPECT_OK_QTY,0)*1.0 * M100.PD /(M100.G_C * M100.G_C_R)* M090.WIDTH_CD*1.0/1000000  AS INSPECT_OK_SQM,
          P500.REMARK, ZTB_SX_RESULT.PD, ZTB_SX_RESULT.CAVITY, ZTB_QLSXPLAN.STEP, P500.PR_NB, PROCESS_TB.MAX_PROCESS_NUMBER, CASE WHEN PROCESS_TB.MAX_PROCESS_NUMBER = P500.PR_NB THEN 1 ELSE 0 END AS LAST_PROCESS,
          (P500.INPUT_QTY- isnull(P500.REMAIN_QTY,0)) * M090.WIDTH_CD*1.0/1000 AS USED_SQM, 
		      (isnull(P500.PR_NG,0) +isnull(P500.SETTING_MET,0)) * M090.WIDTH_CD*1.0/1000 AS LOSS_SQM ,
          ((P500.INPUT_QTY - isnull(P500.REMAIN_QTY,0))- (isnull(INSP_NK_TB.INSPECT_OK_QTY,0)*1.0 * M100.PD /(M100.G_C * M100.G_C_R)/1000)) *  M090.WIDTH_CD*1.0/1000 AS TT_LOSS_SQM,
          CASE WHEN P500.PR_NB=1 THEN (P500.INPUT_QTY- isnull(P500.REMAIN_QTY,0)) ELSE 0 END AS PURE_INPUT,
		  CASE WHEN PROCESS_TB.MAX_PROCESS_NUMBER = P500.PR_NB THEN (isnull(INSP_NK_TB.INSPECT_OK_QTY,0)*1.0 * M100.PD /(M100.G_C * M100.G_C_R)/1000) ELSE 0 END AS PURE_OUTPUT
          FROM P500
          LEFT JOIN ZTB_SX_RESULT ON (P500.PLAN_ID = ZTB_SX_RESULT.PLAN_ID AND P500.CTR_CD = ZTB_SX_RESULT.CTR_CD)
          LEFT JOIN ZTB_QLSXPLAN ON (ZTB_QLSXPLAN.PLAN_ID = P500.PLAN_ID AND ZTB_QLSXPLAN.CTR_CD = P500.CTR_CD)
          LEFT JOIN P501_A ON (P501_A.PLAN_ID = P500.PLAN_ID AND P501_A.M_LOT_NO = P500.M_LOT_NO AND P501_A.CTR_CD = P500.CTR_CD)
          LEFT JOIN INSP_INPUT_TB ON  (INSP_INPUT_TB.PLAN_ID = P500.PLAN_ID AND INSP_INPUT_TB.M_LOT_NO = P500.M_LOT_NO AND INSP_INPUT_TB.CTR_CD = P500.CTR_CD)
          LEFT JOIN INSP_NK_TB ON (INSP_NK_TB.PLAN_ID = P500.PLAN_ID AND INSP_NK_TB.M_LOT_NO = P500.M_LOT_NO AND INSP_NK_TB.CTR_CD = P500.CTR_CD)
          LEFT JOIN M100 ON (P500.G_CODE = M100.G_CODE AND P500.CTR_CD = M100.CTR_CD)
          LEFT JOIN PROCESS_TB ON (PROCESS_TB.G_CODE = P500.G_CODE AND PROCESS_TB.CTR_CD = P500.CTR_CD)
          LEFT JOIN M090 ON (M090.M_CODE = P500.M_CODE AND M090.CTR_CD = P500.CTR_CD)
          LEFT JOIN OUTKHO ON (OUTKHO.PLAN_ID = P500.PLAN_ID  AND OUTKHO.M_LOT_NO = P500.M_LOT_NO AND OUTKHO.CTR_CD = P500.CTR_CD)
          LEFT JOIN P400 ON (P400.PROD_REQUEST_NO = P500.PROD_REQUEST_NO AND P400.CTR_CD = P500.CTR_CD)
          ${condition}
          AND P500.CTR_CD='${DATA.CTR_CD}'
          `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "traOQCData":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = `WHERE DELIVERY_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE}'`;
          if (DATA.G_NAME !== '') condition += ` AND M100.G_NAME LIKE '%${DATA.G_NAME}%'`;
          if (DATA.G_CODE !== '') condition += ` AND M100.G_CODE = '${DATA.G_CODE}'`;
          if (DATA.PROD_REQUEST_NO !== '') condition += ` AND P400.PROD_REQUEST_NO = '${DATA.PROD_REQUEST_NO}'`;
          if (DATA.CUST_NAME_KD !== '') condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`;
          let setpdQuery = `
          SELECT OQC_ID, DELIVERY_DATE, SHIFT_CODE, ZTBFACTORY.FACTORY_NAME, CONCAT(ZTBEMPLINFO.MIDLAST_NAME,' ', ZTBEMPLINFO.FIRST_NAME)AS FULL_NAME, M110.CUST_NAME_KD, ZTB_OQC_TB.PROD_REQUEST_NO, ZTB_OQC_TB.PROCESS_LOT_NO, P501_A.M_LOT_NO, I222.LOTNCC, ZTB_OQC_TB.LABEL_ID,　ZTB_OQC_TB.PROD_REQUEST_DATE, P400.PROD_REQUEST_QTY, M100.G_CODE, M100.G_NAME, M100.G_NAME_KD, ZTB_OQC_TB.DELIVERY_QTY, ZTB_OQC_TB.SAMPLE_QTY, ZTB_OQC_TB.SAMPLE_NG_QTY,M100.PROD_LAST_PRICE, (M100.PROD_LAST_PRICE* ZTB_OQC_TB.DELIVERY_QTY) AS DELIVERY_AMOUNT, (M100.PROD_LAST_PRICE* ZTB_OQC_TB.SAMPLE_NG_QTY) AS SAMPLE_NG_AMOUNT, ZTB_OQC_TB.REMARK, COUNT(M100.G_CODE) OVER(PARTITION BY M100.G_CODE ORDER BY OQC_ID ASC) AS RUNNING_COUNT
          FROM 
          ZTB_OQC_TB 
          LEFT JOIN P400 ON (P400.PROD_REQUEST_DATE = ZTB_OQC_TB.PROD_REQUEST_DATE AND P400.PROD_REQUEST_NO = ZTB_OQC_TB.PROD_REQUEST_NO AND P400.CTR_CD = ZTB_OQC_TB.CTR_CD) 
          LEFT JOIN M100 ON (M100.G_CODE = P400.G_CODE AND M100.CTR_CD = P400.CTR_CD) 
          LEFT JOIN M110 ON (M110.CUST_CD = ZTB_OQC_TB.CUST_CD AND M110.CTR_CD = ZTB_OQC_TB.CTR_CD) 
          LEFT JOIN ZTBEMPLINFO ON (ZTB_OQC_TB.EMPL_NO = ZTBEMPLINFO.EMPL_NO AND ZTB_OQC_TB.CTR_CD = ZTBEMPLINFO.CTR_CD) 
          LEFT JOIN ZTBFACTORY ON (ZTBEMPLINFO.FACTORY_CODE = ZTBFACTORY.FACTORY_CODE AND ZTBEMPLINFO.CTR_CD = ZTBFACTORY.CTR_CD)
          LEFT JOIN (SELECT PROCESS_LOT_NO, M_LOT_NO, CTR_CD FROM P501) AS P501_A ON (ZTB_OQC_TB.PROCESS_LOT_NO = P501_A.PROCESS_LOT_NO AND ZTB_OQC_TB.CTR_CD = P501_A.CTR_CD)
          LEFT JOIN I222 ON (I222.M_LOT_NO = P501_A.M_LOT_NO AND I222.CTR_CD = P501_A.CTR_CD)
            ${condition}
            AND ZTB_OQC_TB.CTR_CD='${DATA.CTR_CD}'
            ORDER BY ZTB_OQC_TB.OQC_ID DESC
          `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "ngbyCustomerOQC":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = `WHERE DELIVERY_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE}'`;
          if (DATA.CUST_NAME_KD !== '') condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`;
          let setpdQuery = `
           WITH OQC_TB AS
          (
          SELECT OQC_ID, DELIVERY_DATE, SHIFT_CODE,  M110.CUST_NAME_KD, ZTB_OQC_TB.PROD_REQUEST_NO, ZTB_OQC_TB.PROCESS_LOT_NO, ZTB_OQC_TB.LABEL_ID,　ZTB_OQC_TB.PROD_REQUEST_DATE, P400.PROD_REQUEST_QTY, M100.G_CODE, M100.G_NAME, M100.G_NAME_KD, ZTB_OQC_TB.DELIVERY_QTY, ZTB_OQC_TB.SAMPLE_QTY, ZTB_OQC_TB.SAMPLE_NG_QTY,M100.PROD_LAST_PRICE, (M100.PROD_LAST_PRICE* ZTB_OQC_TB.DELIVERY_QTY) AS DELIVERY_AMOUNT, (M100.PROD_LAST_PRICE* ZTB_OQC_TB.SAMPLE_NG_QTY) AS SAMPLE_NG_AMOUNT, ZTB_OQC_TB.REMARK, COUNT(M100.G_CODE) OVER(PARTITION BY M100.G_CODE ORDER BY OQC_ID ASC) AS RUNNING_COUNT, ZTB_OQC_TB.CTR_CD
          FROM
          ZTB_OQC_TB
          LEFT JOIN P400 ON (P400.PROD_REQUEST_DATE = ZTB_OQC_TB.PROD_REQUEST_DATE AND P400.PROD_REQUEST_NO = ZTB_OQC_TB.PROD_REQUEST_NO AND P400.CTR_CD = ZTB_OQC_TB.CTR_CD)
          LEFT JOIN M100 ON (M100.G_CODE = P400.G_CODE AND M100.CTR_CD = P400.CTR_CD)
          LEFT JOIN M110 ON (M110.CUST_CD = ZTB_OQC_TB.CUST_CD AND M110.CTR_CD = ZTB_OQC_TB.CTR_CD)
          ${condition}
          AND ZTB_OQC_TB.CTR_CD='${DATA.CTR_CD}'
          ),
           OQCCUSTOMERTB AS 
          (
              SELECT CUST_NAME_KD, SUM(CASE WHEN SAMPLE_NG_QTY > 0 THEN 1 ELSE 0 END) AS NG_LOT, CTR_CD FROM OQC_TB  GROUP BY CUST_NAME_KD, CTR_CD
          ) 
          SELECT * FROM OQCCUSTOMERTB WHERE NG_LOT >0  ORDER BY NG_LOT DESC
          `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "ngbyProTypeOQC":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = `WHERE DELIVERY_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE}'`;
          if (DATA.CUST_NAME_KD !== '') condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`;
          let setpdQuery = `
            WITH OQC_TB AS
            (
            SELECT OQC_ID, DELIVERY_DATE, SHIFT_CODE, M110.CUST_NAME_KD, ZTB_OQC_TB.PROD_REQUEST_NO, ZTB_OQC_TB.PROCESS_LOT_NO, ZTB_OQC_TB.LABEL_ID, M100.PROD_TYPE, ZTB_OQC_TB.PROD_REQUEST_DATE, P400.PROD_REQUEST_QTY, M100.G_CODE, M100.G_NAME, M100.G_NAME_KD, ZTB_OQC_TB.DELIVERY_QTY, ZTB_OQC_TB.SAMPLE_QTY, ZTB_OQC_TB.SAMPLE_NG_QTY, M100.PROD_LAST_PRICE, (M100.PROD_LAST_PRICE* ZTB_OQC_TB.DELIVERY_QTY) AS DELIVERY_AMOUNT, (M100.PROD_LAST_PRICE* ZTB_OQC_TB.SAMPLE_NG_QTY) AS SAMPLE_NG_AMOUNT, ZTB_OQC_TB.REMARK, COUNT(M100.G_CODE) OVER(PARTITION BY M100.G_CODE ORDER BY OQC_ID ASC) AS RUNNING_COUNT, ZTB_OQC_TB.CTR_CD
            FROM 
            ZTB_OQC_TB 
            LEFT JOIN P400 ON (P400.PROD_REQUEST_DATE = ZTB_OQC_TB.PROD_REQUEST_DATE AND P400.PROD_REQUEST_NO = ZTB_OQC_TB.PROD_REQUEST_NO AND P400.CTR_CD = ZTB_OQC_TB.CTR_CD) 
            LEFT JOIN M100 ON (M100.G_CODE = P400.G_CODE AND M100.CTR_CD = P400.CTR_CD) 
            LEFT JOIN M110 ON (M110.CUST_CD = ZTB_OQC_TB.CUST_CD AND M110.CTR_CD = ZTB_OQC_TB.CTR_CD)  
            ${condition}    
            AND ZTB_OQC_TB.CTR_CD='${DATA.CTR_CD}'
            ),
            OQCPRODTYPETB AS 
            (
            SELECT PROD_TYPE, SUM(CASE WHEN SAMPLE_NG_QTY > 0 THEN 1 ELSE 0 END) AS NG_LOT, CTR_CD FROM OQC_TB GROUP BY PROD_TYPE, CTR_CD
            ) 
            SELECT * FROM OQCPRODTYPETB WHERE NG_LOT >0 ORDER BY NG_LOT DESC
          `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "dailyOQCTrendingData":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = `WHERE DELIVERY_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE}'`;
          if (DATA.CUST_NAME_KD !== '') condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`;
          let setpdQuery = `
           WITH OQC_TB AS
          (
          SELECT OQC_ID, DELIVERY_DATE, SHIFT_CODE, M110.CUST_NAME_KD, ZTB_OQC_TB.PROD_REQUEST_NO, ZTB_OQC_TB.PROCESS_LOT_NO, ZTB_OQC_TB.LABEL_ID, ZTB_OQC_TB.PROD_REQUEST_DATE, P400.PROD_REQUEST_QTY, M100.G_CODE, M100.G_NAME, M100.G_NAME_KD, ZTB_OQC_TB.DELIVERY_QTY, ZTB_OQC_TB.SAMPLE_QTY, ZTB_OQC_TB.SAMPLE_NG_QTY, M100.PROD_LAST_PRICE, (M100.PROD_LAST_PRICE* ZTB_OQC_TB.DELIVERY_QTY) AS DELIVERY_AMOUNT, (M100.PROD_LAST_PRICE* ZTB_OQC_TB.SAMPLE_NG_QTY) AS SAMPLE_NG_AMOUNT, ZTB_OQC_TB.REMARK, COUNT(M100.G_CODE) OVER(PARTITION BY M100.G_CODE ORDER BY OQC_ID ASC) AS RUNNING_COUNT, ZTB_OQC_TB.CTR_CD
          FROM 
          ZTB_OQC_TB 
          LEFT JOIN P400 ON (P400.PROD_REQUEST_DATE = ZTB_OQC_TB.PROD_REQUEST_DATE AND P400.PROD_REQUEST_NO = ZTB_OQC_TB.PROD_REQUEST_NO AND P400.CTR_CD = ZTB_OQC_TB.CTR_CD) 
          LEFT JOIN M100 ON (M100.G_CODE = P400.G_CODE AND M100.CTR_CD = P400.CTR_CD) 
          LEFT JOIN M110 ON (M110.CUST_CD = ZTB_OQC_TB.CUST_CD AND M110.CTR_CD = ZTB_OQC_TB.CTR_CD)
          ${condition}
          AND ZTB_OQC_TB.CTR_CD='${DATA.CTR_CD}'
          )
          SELECT DELIVERY_DATE, COUNT(OQC_ID) AS TOTAL_LOT, SUM(CASE WHEN SAMPLE_NG_QTY > 0 THEN 1 ELSE 0 END) AS NG_LOT FROM OQC_TB GROUP BY DELIVERY_DATE
          ORDER BY DELIVERY_DATE DESC
          `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "weeklyOQCTrendingData":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = `WHERE DELIVERY_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE}'`;
          if (DATA.CUST_NAME_KD !== '') condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`;
          let setpdQuery = `
          WITH OQC_TB AS
          (
          SELECT OQC_ID, DELIVERY_DATE, YEAR(DELIVERY_DATE) AS DELIVERY_YEAR, DATEPART(WEEK, DELIVERY_DATE) AS DELIVERY_WEEK, SHIFT_CODE,  M110.CUST_NAME_KD, ZTB_OQC_TB.PROD_REQUEST_NO, ZTB_OQC_TB.PROCESS_LOT_NO, ZTB_OQC_TB.LABEL_ID,　ZTB_OQC_TB.PROD_REQUEST_DATE, P400.PROD_REQUEST_QTY, M100.G_CODE, M100.G_NAME, M100.G_NAME_KD, ZTB_OQC_TB.DELIVERY_QTY, ZTB_OQC_TB.SAMPLE_QTY, ZTB_OQC_TB.SAMPLE_NG_QTY,M100.PROD_LAST_PRICE, (M100.PROD_LAST_PRICE* ZTB_OQC_TB.DELIVERY_QTY) AS DELIVERY_AMOUNT, (M100.PROD_LAST_PRICE* ZTB_OQC_TB.SAMPLE_NG_QTY) AS SAMPLE_NG_AMOUNT, ZTB_OQC_TB.REMARK, COUNT(M100.G_CODE) OVER(PARTITION BY M100.G_CODE ORDER BY OQC_ID ASC) AS RUNNING_COUNT, ZTB_OQC_TB.CTR_CD
          FROM 
          ZTB_OQC_TB 
          LEFT JOIN P400 ON (P400.PROD_REQUEST_DATE = ZTB_OQC_TB.PROD_REQUEST_DATE AND P400.PROD_REQUEST_NO = ZTB_OQC_TB.PROD_REQUEST_NO AND P400.CTR_CD = ZTB_OQC_TB.CTR_CD) 
          LEFT JOIN M100 ON (M100.G_CODE = P400.G_CODE AND M100.CTR_CD = P400.CTR_CD) 
          LEFT JOIN M110 ON (M110.CUST_CD = ZTB_OQC_TB.CUST_CD AND M110.CTR_CD = ZTB_OQC_TB.CTR_CD)
          ${condition}
          AND ZTB_OQC_TB.CTR_CD='${DATA.CTR_CD}'
          )
          SELECT DELIVERY_YEAR, DELIVERY_WEEK, CONCAT( DELIVERY_YEAR,'_', DELIVERY_WEEK) AS DELIVERY_YW,COUNT(OQC_ID) AS TOTAL_LOT, SUM(CASE WHEN SAMPLE_NG_QTY > 0 THEN 1 ELSE 0 END) AS NG_LOT FROM OQC_TB GROUP BY DELIVERY_YEAR, DELIVERY_WEEK ORDER BY DELIVERY_YEAR DESC, DELIVERY_WEEK DESC
          `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "monthlyOQCTrendingData":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = `WHERE DELIVERY_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE}'`;
          if (DATA.CUST_NAME_KD !== '') condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`;
          let setpdQuery = `
          WITH OQC_TB AS
          (
          SELECT OQC_ID, DELIVERY_DATE, YEAR(DELIVERY_DATE) AS DELIVERY_YEAR, MONTH(DELIVERY_DATE) AS DELIVERY_MONTH, SHIFT_CODE,  M110.CUST_NAME_KD, ZTB_OQC_TB.PROD_REQUEST_NO, ZTB_OQC_TB.PROCESS_LOT_NO, ZTB_OQC_TB.LABEL_ID, ZTB_OQC_TB.PROD_REQUEST_DATE, P400.PROD_REQUEST_QTY, M100.G_CODE, M100.G_NAME, M100.G_NAME_KD, ZTB_OQC_TB.DELIVERY_QTY, ZTB_OQC_TB.SAMPLE_QTY, ZTB_OQC_TB.SAMPLE_NG_QTY,M100.PROD_LAST_PRICE, (M100.PROD_LAST_PRICE* ZTB_OQC_TB.DELIVERY_QTY) AS DELIVERY_AMOUNT, (M100.PROD_LAST_PRICE* ZTB_OQC_TB.SAMPLE_NG_QTY) AS SAMPLE_NG_AMOUNT, ZTB_OQC_TB.REMARK, COUNT(M100.G_CODE) OVER(PARTITION BY M100.G_CODE ORDER BY OQC_ID ASC) AS RUNNING_COUNT, ZTB_OQC_TB.CTR_CD
          FROM 
          ZTB_OQC_TB 
          LEFT JOIN P400 ON (P400.PROD_REQUEST_DATE = ZTB_OQC_TB.PROD_REQUEST_DATE AND P400.PROD_REQUEST_NO = ZTB_OQC_TB.PROD_REQUEST_NO AND P400.CTR_CD = ZTB_OQC_TB.CTR_CD) 
          LEFT JOIN M100 ON (M100.G_CODE = P400.G_CODE AND M100.CTR_CD = P400.CTR_CD) 
          LEFT JOIN M110 ON (M110.CUST_CD = ZTB_OQC_TB.CUST_CD AND M110.CTR_CD = ZTB_OQC_TB.CTR_CD)
          ${condition}
          AND ZTB_OQC_TB.CTR_CD='${DATA.CTR_CD}'
          )
          SELECT DELIVERY_YEAR, DELIVERY_MONTH, CONCAT( DELIVERY_YEAR,'_', DELIVERY_MONTH) AS DELIVERY_YM,COUNT(OQC_ID) AS TOTAL_LOT, SUM(CASE WHEN SAMPLE_NG_QTY > 0 THEN 1 ELSE 0 END) AS NG_LOT FROM OQC_TB GROUP BY DELIVERY_YEAR, DELIVERY_MONTH ORDER BY DELIVERY_YEAR DESC, DELIVERY_MONTH DESC
          `;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "yearlyOQCTrendingData":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = `WHERE DELIVERY_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE}'`;
          if (DATA.CUST_NAME_KD !== '') condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`;
          let setpdQuery = `
          WITH OQC_TB AS
          (
          SELECT OQC_ID, DELIVERY_DATE, YEAR(DELIVERY_DATE) AS DELIVERY_YEAR, MONTH(DELIVERY_DATE) AS DELIVERY_MONTH, SHIFT_CODE,  M110.CUST_NAME_KD, ZTB_OQC_TB.PROD_REQUEST_NO, ZTB_OQC_TB.PROCESS_LOT_NO, ZTB_OQC_TB.LABEL_ID,　ZTB_OQC_TB.PROD_REQUEST_DATE, P400.PROD_REQUEST_QTY, M100.G_CODE, M100.G_NAME, M100.G_NAME_KD, ZTB_OQC_TB.DELIVERY_QTY, ZTB_OQC_TB.SAMPLE_QTY, ZTB_OQC_TB.SAMPLE_NG_QTY,M100.PROD_LAST_PRICE, (M100.PROD_LAST_PRICE* ZTB_OQC_TB.DELIVERY_QTY) AS DELIVERY_AMOUNT, (M100.PROD_LAST_PRICE* ZTB_OQC_TB.SAMPLE_NG_QTY) AS SAMPLE_NG_AMOUNT, ZTB_OQC_TB.REMARK, COUNT(M100.G_CODE) OVER(PARTITION BY M100.G_CODE ORDER BY OQC_ID ASC) AS RUNNING_COUNT, ZTB_OQC_TB.CTR_CD
          FROM 
          ZTB_OQC_TB 
          LEFT JOIN P400 ON (P400.PROD_REQUEST_DATE = ZTB_OQC_TB.PROD_REQUEST_DATE AND P400.PROD_REQUEST_NO = ZTB_OQC_TB.PROD_REQUEST_NO AND P400.CTR_CD = ZTB_OQC_TB.CTR_CD) 
          LEFT JOIN M100 ON (M100.G_CODE = P400.G_CODE AND M100.CTR_CD = P400.CTR_CD) 
          LEFT JOIN M110 ON (M110.CUST_CD = ZTB_OQC_TB.CUST_CD AND M110.CTR_CD = ZTB_OQC_TB.CTR_CD)
          ${condition}
          AND ZTB_OQC_TB.CTR_CD='${DATA.CTR_CD}'
          )
          SELECT DELIVERY_YEAR, COUNT(OQC_ID) AS TOTAL_LOT, SUM(CASE WHEN SAMPLE_NG_QTY > 0 THEN 1 ELSE 0 END) AS NG_LOT FROM OQC_TB GROUP BY DELIVERY_YEAR ORDER BY DELIVERY_YEAR DESC
          `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "tralichsutemlotsx":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = `WHERE P501.PLAN_ID is not null AND P501.M_LOT_NO <> '' AND P501.INS_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE} 23:59:59'`;
          if (DATA.G_NAME !== '') condition += ` AND M100.G_NAME LIKE '%${DATA.G_NAME}%'`;
          if (DATA.G_CODE !== '') condition += ` AND M100.G_CODE = '${DATA.G_CODE}'`;
          if (DATA.PROD_REQUEST_NO !== '') condition += ` AND ZTB_QLSXPLAN.PROD_REQUEST_NO = '${DATA.PROD_REQUEST_NO}'`;
          if (DATA.PROCESS_LOT_NO !== '') condition += ` AND P501.PROCESS_LOT_NO = '${DATA.PROCESS_LOT_NO}'`;
          let setpdQuery = `
         SELECT  P501.*, M100.G_CODE,M100.G_NAME,I222.LOTNCC, ZTB_QLSXPLAN.PROD_REQUEST_NO,M090.M_NAME, M090.WIDTH_CD, M010.EMPL_NAME, P500.EQUIPMENT_CD, P500.FACTORY,ZTB_QLSXPLAN.PLAN_QTY, TEMP_QTY * ZTB_SX_RESULT.PD * 1.0 /CAVITY/1000 AS TEMP_MET, P500.SETTING_MET, P500.PR_NG, P500.PR_NB FROM P501
        LEFT JOIN ZTB_QLSXPLAN ON ZTB_QLSXPLAN.CTR_CD = P501.CTR_CD AND ZTB_QLSXPLAN.PLAN_ID = P501.PLAN_ID
        LEFT JOIN M100 ON ZTB_QLSXPLAN.CTR_CD = M100.CTR_CD AND ZTB_QLSXPLAN.G_CODE = M100.G_CODE
        LEFT JOIN P500 ON P500.CTR_CD = P501.CTR_CD AND P500.PROCESS_IN_DATE = P501.PROCESS_IN_DATE AND P500.PROCESS_IN_NO = P501.PROCESS_IN_NO AND P500.PROCESS_IN_SEQ = P501.PROCESS_IN_SEQ 
        LEFT JOIN M010 ON M010.CTR_CD = P501.CTR_CD AND  M010.EMPL_NO= P501.INS_EMPL
        LEFT JOIN I222 ON I222.CTR_CD = P501.CTR_CD AND I222.M_LOT_NO = P501.M_LOT_NO
        LEFT JOIN M090 ON I222.CTR_CD = M090.CTR_CD AND I222.M_CODE = M090.M_CODE
        LEFT JOIN ZTB_SX_RESULT ON ZTB_QLSXPLAN.CTR_CD = ZTB_SX_RESULT.CTR_CD AND ZTB_QLSXPLAN.PLAN_ID = ZTB_SX_RESULT.PLAN_ID 
          ${condition}          
          AND P501.CTR_CD='${DATA.CTR_CD}'
          ORDER BY P501.INS_DATE DESC
          `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "trasxlosstrendingdata":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = `WHERE  P500.INS_DATE > '2023-12-01 00:00:00' AND P500.M_LOT_NO <> '' AND  P500.INS_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE} 23:59:59'`;
          if (DATA.FACTORY !== 'ALL') condition += ` AND P500.FACTORY LIKE '%${DATA.FACTORY}%'`;
          if (DATA.MACHINE !== 'ALL') condition += ` AND SUBSTRING(P500.EQUIPMENT_CD,1,2) = '${DATA.MACHINE}'`;
          let setpdQuery = `
            WITH P501_A AS
            (
            SELECT P501.CTR_CD, P501.M_LOT_NO, P501.PLAN_ID, SUM(P501.TEMP_QTY) AS TEMP_QTY FROM P501 WHERE P501.INS_DATE > '2023-12-01' AND TEMP_QTY is not null AND P501.CTR_CD='${DATA.CTR_CD}' GROUP BY P501.CTR_CD, P501.M_LOT_NO, P501.PLAN_ID
            ),
            INSP_INPUT_TB AS 
            (
            SELECT CTR_CD, PLAN_ID, M_LOT_NO, CAST(SUM(INPUT_QTY_EA) as bigint) AS INSP_INPUT FROM ZTBINSPECTINPUTTB
            WHERE M_LOT_NO is not null AND M_LOT_NO <> '' AND CTR_CD='${DATA.CTR_CD}'
            GROUP BY CTR_CD, PLAN_ID, M_LOT_NO
            ),
            INSP_NK_TB AS
            (
            SELECT CTR_CD, PLAN_ID, M_LOT_NO, SUM(INSPECT_TOTAL_QTY) AS INSPECT_TOTAL_QTY FROM ZTBINSPECTNGTB WHERE M_LOT_NO is not null AND PLAN_ID is not null AND PLAN_ID <> '' AND M_LOT_NO <>'' AND CTR_CD='${DATA.CTR_CD}' GROUP BY CTR_CD, PLAN_ID, M_LOT_NO
            ),
            PROCESS_TB AS
            (
            SELECT CTR_CD, G_CODE,
            CASE WHEN EQ4 <> 'NA' AND EQ4 <> 'NO' AND EQ4 is not null AND EQ4 <> '' THEN 4 
            WHEN EQ3 <> 'NA' AND EQ3 <> 'NO' AND EQ3 is not null AND EQ3 <> ''  THEN 3
            WHEN EQ2 <> 'NA' AND EQ2 <> 'NO' AND EQ2 is not null AND EQ2 <> ''  THEN 2 
            ELSE 1 END AS MAX_PROCESS_NUMBER
            FROM M100 WHERE CTR_CD='${DATA.CTR_CD}'
            ),
            DATA_ROLL AS
            (
            SELECT  CAST(P500.INS_DATE as date) AS INPUT_DATE, ZTB_QLSXPLAN.IS_SETTING, P500.EQUIPMENT_CD,  P500.PROD_REQUEST_NO, ZTB_QLSXPLAN.PLAN_ID,  ZTB_QLSXPLAN.PLAN_QTY,  M100.PROD_MODEL, M100.G_NAME_KD, M090.M_NAME, M090.WIDTH_CD, P500.M_LOT_NO, P500.INPUT_QTY, isnull(P500.REMAIN_QTY,0) AS REMAIN_QTY,(P500.INPUT_QTY- isnull(P500.REMAIN_QTY,0)) AS USED_QTY,   ZTB_SX_RESULT.RPM, P500.SETTING_MET, P500.PR_NG, (P500.INPUT_QTY - isnull(P500.REMAIN_QTY,0) -isnull(P500.SETTING_MET,0)- isnull(P500.PR_NG,0)) AS OK_MET_AUTO,  (isnull(P501_A.TEMP_QTY,0) * ZTB_SX_RESULT.PD /ZTB_SX_RESULT.CAVITY/1000) AS OK_MET_TT ,isnull(P500.SETTING_MET,0)*1.0/ (P500.INPUT_QTY - isnull(P500.REMAIN_QTY,0)) *100 AS LOSS_ST,  isnull(P500.PR_NG,0)*1.0/ (P500.INPUT_QTY - isnull(P500.REMAIN_QTY,0)) *100 AS LOSS_SX,
            isnull(P501_A.TEMP_QTY,0) AS OK_EA, 
            CASE WHEN PROCESS_TB.MAX_PROCESS_NUMBER = P500.PR_NB THEN isnull(P501_A.TEMP_QTY,0) ELSE 0 END AS OUTPUT_EA ,
            isnull(INSP_INPUT_TB.INSP_INPUT,0) AS INSPECT_INPUT,
            isnull(INSP_NK_TB.INSPECT_TOTAL_QTY,0) AS INSPECT_TT_QTY,
            P500.REMARK, ZTB_SX_RESULT.PD, ZTB_SX_RESULT.CAVITY, ZTB_QLSXPLAN.STEP, P500.PR_NB, PROCESS_TB.MAX_PROCESS_NUMBER, CASE WHEN PROCESS_TB.MAX_PROCESS_NUMBER = P500.PR_NB THEN 1 ELSE 0 END AS LAST_PROCESS  FROM P500
            LEFT JOIN ZTB_SX_RESULT ON (P500.PLAN_ID = ZTB_SX_RESULT.PLAN_ID AND P500.CTR_CD = ZTB_SX_RESULT.CTR_CD)
            LEFT JOIN ZTB_QLSXPLAN ON (ZTB_QLSXPLAN.PLAN_ID = P500.PLAN_ID AND ZTB_QLSXPLAN.CTR_CD = P500.CTR_CD)
            LEFT JOIN P501_A ON (P501_A.PLAN_ID = P500.PLAN_ID AND P501_A.M_LOT_NO = P500.M_LOT_NO AND P501_A.CTR_CD = P500.CTR_CD)
            LEFT JOIN INSP_INPUT_TB ON  (INSP_INPUT_TB.PLAN_ID = P500.PLAN_ID AND INSP_INPUT_TB.M_LOT_NO = P500.M_LOT_NO AND INSP_INPUT_TB.CTR_CD = P500.CTR_CD)
            LEFT JOIN INSP_NK_TB ON (INSP_NK_TB.PLAN_ID = P500.PLAN_ID AND INSP_NK_TB.M_LOT_NO = P500.M_LOT_NO AND INSP_NK_TB.CTR_CD = P500.CTR_CD)
            LEFT JOIN M100 ON (P500.G_CODE = M100.G_CODE AND P500.CTR_CD = M100.CTR_CD)
            LEFT JOIN PROCESS_TB ON (PROCESS_TB.G_CODE = P500.G_CODE AND PROCESS_TB.CTR_CD = P500.CTR_CD)
            LEFT JOIN M090 ON (M090.M_CODE = P500.M_CODE AND M090.CTR_CD = P500.CTR_CD)
            ${condition}            
            AND P500.CTR_CD='${DATA.CTR_CD}'
            )
            SELECT DATA_ROLL.INPUT_DATE,SUM(DATA_ROLL.USED_QTY) AS USED_QTY, SUM(DATA_ROLL.SETTING_MET) AS SETTING_MET, SUM(DATA_ROLL.PR_NG) AS PR_NG, 1.0*SUM(DATA_ROLL.SETTING_MET)/SUM(DATA_ROLL.USED_QTY)*100 AS LOSS_ST, 1.0*SUM(DATA_ROLL.PR_NG)/SUM(DATA_ROLL.USED_QTY)*100 AS LOSS_SX, SUM(DATA_ROLL.OUTPUT_EA) AS OUTPUT_EA, SUM(DATA_ROLL.INSPECT_INPUT) AS INSPECT_INPUT, SUM(DATA_ROLL.INSPECT_TT_QTY) AS INSPECT_TT_QTY,  
            CASE WHEN SUM(DATA_ROLL.OUTPUT_EA) <>0 THEN 
            100-1.0*SUM(DATA_ROLL.INSPECT_INPUT)/SUM(DATA_ROLL.OUTPUT_EA)*100  ELSE 0 END AS RATE1, 
            CASE WHEN SUM(DATA_ROLL.OUTPUT_EA) <>0 THEN 
            100-1.0*SUM(DATA_ROLL.INSPECT_TT_QTY)/SUM(DATA_ROLL.OUTPUT_EA)*100 ELSE 0 END AS RATE2 
            FROM DATA_ROLL GROUP BY DATA_ROLL.INPUT_DATE
            ORDER BY DATA_ROLL.INPUT_DATE ASC
          `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "getpatrolheader":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let today = moment().format("YYYY-MM-DD");
          let condition = ``
          if(DATA.NG_TYPE !=='ALL')
            condition += ` AND ERROR_TABLE.ERR_TYPE='${DATA.NG_TYPE}'`;
          let setpdQuery = `
          WITH INSPECTION_DATA_DOC1 AS
          (
          SELECT CAST(ZTBINSPECTNGTB.INSPECT_START_TIME as date) AS INSPECT_DATE, DATEPART(year, ZTBINSPECTNGTB.INSPECT_START_TIME) AS YEAR_NUM, DATEPART(ISO_WEEK, ZTBINSPECTNGTB.INSPECT_START_TIME) AS WEEK_NUM,
          (ZTBINSPECTNGTB.INSPECT_TOTAL_QTY-ERR32) AS INSPECT_TOTAL_QTY, M100.G_CODE, M100.G_NAME_KD, ZTBINSPECTNGTB.INSPECT_OK_QTY, ZTBINSPECTNGTB2.NG_QTY, (ZTBINSPECTNGTB2.NG_QTY * M100.PROD_LAST_PRICE)  AS NG_AMOUNT, ZTBINSPECTNGTB2.ERR_CODE, ZTBINSPECTNGTB.CTR_CD
          FROM ZTBINSPECTNGTB2
          LEFT JOIN ZTBINSPECTNGTB ON (ZTBINSPECTNGTB2.INSPECT_ID = ZTBINSPECTNGTB.INSPECT_ID AND ZTBINSPECTNGTB2.CTR_CD = ZTBINSPECTNGTB.CTR_CD)
          LEFT JOIN M100 ON (M100.G_CODE = ZTBINSPECTNGTB.G_CODE AND M100.CTR_CD = ZTBINSPECTNGTB.CTR_CD)
		  WHERE CAST(ZTBINSPECTNGTB.INSPECT_START_TIME as date) BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE}'
          AND ZTBINSPECTNGTB.CTR_CD='${DATA.CTR_CD}'
          ),
		      INSPECTION_DATA_DOC AS
        (
        SELECT ZTBINSPECTNGTB.G_CODE, CAST(ZTBINSPECTNGTB.INSPECT_START_TIME as date) AS INSPECT_DATE, DATEPART(year, ZTBINSPECTNGTB.INSPECT_START_TIME) AS YEAR_NUM, DATEPART(ISO_WEEK, ZTBINSPECTNGTB.INSPECT_START_TIME) AS WEEK_NUM,
        (ZTBINSPECTNGTB.INSPECT_TOTAL_QTY-ERR32) AS INSPECT_TOTAL_QTY, ZTBINSPECTNGTB.INSPECT_OK_QTY, ZTBINSPECTNGTB2.NG_QTY, (ZTBINSPECTNGTB2.NG_QTY * M100.PROD_LAST_PRICE)  AS NG_AMOUNT, ZTBINSPECTNGTB2.ERR_CODE, ZTBINSPECTNGTB.CTR_CD
        FROM ZTBINSPECTNGTB2
        LEFT JOIN ZTBINSPECTNGTB ON (ZTBINSPECTNGTB2.INSPECT_ID = ZTBINSPECTNGTB.INSPECT_ID AND ZTBINSPECTNGTB2.CTR_CD = ZTBINSPECTNGTB.CTR_CD)
        LEFT JOIN M100 ON (M100.G_CODE = ZTBINSPECTNGTB.G_CODE AND M100.CTR_CD = ZTBINSPECTNGTB.CTR_CD)
		WHERE CAST(ZTBINSPECTNGTB.INSPECT_START_TIME as date) BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE}'
        AND ZTBINSPECTNGTB.CTR_CD='${DATA.CTR_CD}'
        ),
        ERRBYGCODE AS
        (
        SELECT INSPECTION_DATA_DOC.G_CODE, ERROR_TABLE.ERR_CODE, ERROR_TABLE.ERR_NAME_VN, ERROR_TABLE.ERR_NAME_KR, SUM(CAST(INSPECTION_DATA_DOC.NG_QTY as bigint)) AS NG_QTY, SUM(NG_AMOUNT) AS NG_AMOUNT, INSPECTION_DATA_DOC.CTR_CD FROM INSPECTION_DATA_DOC
        LEFT JOIN ERROR_TABLE ON (ERROR_TABLE.ERR_CODE = INSPECTION_DATA_DOC.ERR_CODE AND ERROR_TABLE.CTR_CD = INSPECTION_DATA_DOC.CTR_CD)
        WHERE INSPECT_DATE  BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE}'  ${condition}
        AND INSPECTION_DATA_DOC.CTR_CD='${DATA.CTR_CD}'
        GROUP BY INSPECTION_DATA_DOC.G_CODE, ERROR_TABLE.ERR_CODE, ERROR_TABLE.ERR_NAME_VN, ERROR_TABLE.ERR_NAME_KR, INSPECTION_DATA_DOC.CTR_CD
        ),
        FINALTB AS
        (
        SELECT G_CODE, ERR_CODE, ERR_NAME_VN, ERR_NAME_KR, NG_QTY, NG_AMOUNT, COUNT(G_CODE) OVER (PARTITION BY G_CODE ORDER BY NG_AMOUNT DESC,ERR_CODE ASC) AS STT, CTR_CD FROM ERRBYGCODE
        ),
        FINAL2TB AS
        (
        SELECT * FROM FINALTB where STT <=3
        ),
        FINALPVTB AS
        (
        SELECT pvtb.G_CODE, isnull(pvtb.[1],'') AS WORST1, isnull(pvtb.[2],'') AS WORST2, isnull(pvtb.[3],'') AS WORST3, pvtb.CTR_CD FROM
        (SELECT G_CODE, ERR_NAME_VN, STT, CTR_CD FROM FINAL2TB) AS SRC
        PIVOT
        (
          MAX(SRC.ERR_NAME_VN) FOR STT IN ([1],[2],[3])
        )
        as pvtb),
        FCOSTTB as
        (
                SELECT INSPECTION_DATA_DOC1.G_CODE, INSPECTION_DATA_DOC1.G_NAME_KD, SUM(NG_AMOUNT) AS NG_AMOUNT,  SUM(CAST(INSPECTION_DATA_DOC1.INSPECT_TOTAL_QTY as bigint)) AS INSPECT_TOTAL_QTY, SUM(CAST(INSPECTION_DATA_DOC1.NG_QTY as bigint)) AS NG_QTY, INSPECTION_DATA_DOC1.CTR_CD
            FROM INSPECTION_DATA_DOC1
                LEFT JOIN ERROR_TABLE ON (ERROR_TABLE.ERR_CODE = INSPECTION_DATA_DOC1.ERR_CODE AND ERROR_TABLE.CTR_CD = INSPECTION_DATA_DOC1.CTR_CD)
            LEFT JOIN FINALPVTB ON (FINALPVTB.G_CODE = INSPECTION_DATA_DOC1.G_CODE AND FINALPVTB.CTR_CD = INSPECTION_DATA_DOC1.CTR_CD)
                WHERE INSPECT_DATE  BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE}' ${condition} AND INSPECTION_DATA_DOC1.NG_AMOUNT <> 0
                AND INSPECTION_DATA_DOC1.CTR_CD='${DATA.CTR_CD}'
                GROUP BY INSPECTION_DATA_DOC1.G_CODE, INSPECTION_DATA_DOC1.G_NAME_KD, INSPECTION_DATA_DOC1.CTR_CD
        )
        SELECT TOP 3 * FROM FCOSTTB LEFT JOIN FINALPVTB ON (FCOSTTB.G_CODE = FINALPVTB.G_CODE AND FCOSTTB.CTR_CD = FINALPVTB.CTR_CD) WHERE FCOSTTB.CTR_CD='${DATA.CTR_CD}' ORDER  BY FCOSTTB.NG_AMOUNT DESC
          `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "trainspectionpatrol":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
            SELECT TOP 3
            ZTBINSPECTION_PATROL.INS_PATROL_ID,
              ZTBINSPECTION_PATROL.PROD_REQUEST_NO,
              ZTBINSPECTION_PATROL.PLAN_ID,
              ZTBINSPECTION_PATROL.PROCESS_LOT_NO,
              ZTBINSPECTION_PATROL.G_CODE,
              ZTBINSPECTION_PATROL.ERR_CODE,
              ZTBINSPECTION_PATROL.INSPECT_QTY,
              ZTBINSPECTION_PATROL.DEFECT_QTY,
              ZTBINSPECTION_PATROL.DEFECT_PHENOMENON,
              ZTBINSPECTION_PATROL.DEFECT_IMAGE_LINK,
              ZTBINSPECTION_PATROL.LINEQC_PIC,
              ZTBINSPECTION_PATROL.PROD_PIC,
              ZTBINSPECTION_PATROL.INSP_PIC,
              ZTBINSPECTION_PATROL.INS_DATE,
              ZTBINSPECTION_PATROL.INS_EMPL,
              ZTBINSPECTION_PATROL.UPD_DATE,
              ZTBINSPECTION_PATROL.UPD_EMPL,
              ZTBINSPECTION_PATROL.PHANLOAI,
              ZTBINSPECTION_PATROL.REMARK,
              ZTBINSPECTION_PATROL.FACTORY,
              M100.G_NAME_KD,
              M110.CUST_NAME_KD,
              ZTBINSPECTION_PATROL.EQUIPMENT_CD,
              ZTBINSPECTION_PATROL.OCCURR_TIME,
              ZTBINSPECTION_PATROL.CTR_CD
            FROM ZTBINSPECTION_PATROL 
            LEFT JOIN M100 ON M100.G_CODE = ZTBINSPECTION_PATROL.G_CODE AND M100.CTR_CD = ZTBINSPECTION_PATROL.CTR_CD
            LEFT JOIN M110 ON M110.CUST_CD = ZTBINSPECTION_PATROL.CUST_CD AND M110.CTR_CD = ZTBINSPECTION_PATROL.CTR_CD
            WHERE ZTBINSPECTION_PATROL.INS_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE} 23:59:59'
              AND ZTBINSPECTION_PATROL.CTR_CD='${DATA.CTR_CD}'
            ORDER BY ZTBINSPECTION_PATROL.OCCURR_TIME DESC        
            `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "loadWebSetting":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `SELECT * FROM ZTB_WEB_SETTING WHERE CTR_CD='${DATA.CTR_CD}'`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "checkYcsxStatus":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `SELECT P400.USE_YN FROM ZTB_QLSXPLAN LEFT JOIN P400 ON P400.PROD_REQUEST_NO = ZTB_QLSXPLAN.PROD_REQUEST_NO AND P400.CTR_CD = ZTB_QLSXPLAN.CTR_CD WHERE ZTB_QLSXPLAN.PLAN_ID='${DATA.PLAN_ID}' AND ZTB_QLSXPLAN.CTR_CD='${DATA.CTR_CD}'`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "checkNextPlanClosed":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `SELECT CHOTBC FROM ZTB_QLSXPLAN WHERE CTR_CD='${DATA.CTR_CD}' AND  PLAN_ID='${DATA.PLAN_ID}'`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "loadChoKiemGop":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `SELECT ZTB_WAIT_INSPECT.G_CODE, M100.G_NAME, M100.G_NAME_KD, SUM(INSPECT_BALANCE_QTY) AS INSPECT_BALANCE_QTY, SUM(WAIT_CS_QTY) AS WAIT_CS_QTY, SUM(WAIT_SORTING_RMA) AS WAIT_SORTING_RMA,  SUM(INSPECT_BALANCE_QTY+ WAIT_CS_QTY+ WAIT_SORTING_RMA) AS TOTAL_WAIT FROM ZTB_WAIT_INSPECT JOIN M100 ON ( M100.G_CODE = ZTB_WAIT_INSPECT.G_CODE AND M100.CTR_CD = ZTB_WAIT_INSPECT.CTR_CD) 
          WHERE ZTB_WAIT_INSPECT.UPDATE_DATE = '${DATA.TO_DATE}'  AND ZTB_WAIT_INSPECT.CALAMVIEC='DEM' AND ZTB_WAIT_INSPECT.CTR_CD='${DATA.CTR_CD}'
          GROUP BY ZTB_WAIT_INSPECT.G_CODE, M100.G_NAME, M100.G_NAME_KD`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "loadChoKiemGop_NEW":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `WITH OLD_CHO_KIEM AS
(
SELECT ZTB_WAIT_INSPECT.CTR_CD, ZTB_WAIT_INSPECT.G_CODE, M100.G_NAME, M100.G_NAME_KD, SUM(INSPECT_BALANCE_QTY) AS INSPECT_BALANCE_QTY, SUM(WAIT_CS_QTY) AS WAIT_CS_QTY, SUM(WAIT_SORTING_RMA) AS WAIT_SORTING_RMA,  SUM(INSPECT_BALANCE_QTY+ WAIT_CS_QTY+ WAIT_SORTING_RMA) AS TOTAL_WAIT FROM ZTB_WAIT_INSPECT JOIN M100 ON ( M100.G_CODE = ZTB_WAIT_INSPECT.G_CODE AND M100.CTR_CD = ZTB_WAIT_INSPECT.CTR_CD) 
          WHERE ZTB_WAIT_INSPECT.UPDATE_DATE = '${DATA.TO_DATE}'  AND ZTB_WAIT_INSPECT.CALAMVIEC='DEM' AND ZTB_WAIT_INSPECT.CTR_CD='${DATA.CTR_CD}'
          GROUP BY ZTB_WAIT_INSPECT.CTR_CD,ZTB_WAIT_INSPECT.G_CODE, M100.G_NAME, M100.G_NAME_KD
),
NEW_CHO_KIEM AS 
(
SELECT CTR_CD, G_CODE, SUM(INPUT_QTY_EA) AS INSPECT_BALANCE_QTY FROM ZTBINSPECTINPUTTB WHERE INSPECT_YN='Y' AND P400_YN='Y' GROUP BY CTR_CD, G_CODE
),
TKTB AS
(
SELECT M100.CTR_CD, M100.G_CODE, M100.G_NAME, M100.G_NAME_KD, isnull(NEW_CHO_KIEM.INSPECT_BALANCE_QTY,0) AS INSPECT_BALANCE_QTY, isnull(OLD_CHO_KIEM.WAIT_CS_QTY,0) AS WAIT_CS_QTY,isnull(OLD_CHO_KIEM.WAIT_SORTING_RMA,0) AS WAIT_SORTING_RMA, (isnull(NEW_CHO_KIEM.INSPECT_BALANCE_QTY,0) + isnull(OLD_CHO_KIEM.WAIT_CS_QTY,0) + isnull(OLD_CHO_KIEM.WAIT_SORTING_RMA,0)) AS TOTAL_WAIT  FROM M100 
LEFT JOIN OLD_CHO_KIEM ON (OLD_CHO_KIEM.CTR_CD = M100.CTR_CD AND OLD_CHO_KIEM.G_CODE = M100.G_CODE)
LEFT JOIN NEW_CHO_KIEM ON (NEW_CHO_KIEM.CTR_CD = M100.CTR_CD AND NEW_CHO_KIEM.G_CODE = M100.G_CODE)
) 
SELECT * FROM TKTB WHERE TOTAL_WAIT > 0 AND CTR_CD='${DATA.CTR_CD}'`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "inspectionLotPrintHistory":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `SELECT M110.CUST_NAME_KD, ZTBLOTPRINTHISTORYTB.FACTORY, ZTBLOTPRINTHISTORYTB.LABEL_ID2, ZTBLOTPRINTHISTORYTB.MFT_WEEK, ZTBLOTPRINTHISTORYTB.LOT_PRINT_DATE, M100.G_NAME,  P400.PROD_REQUEST_NO, P501.PLAN_ID, ZTBLOTPRINTHISTORYTB.PO_TYPE, ZTBLOTPRINTHISTORYTB.PROCESS_LOT_NO, ZTBLOTPRINTHISTORYTB.MACHINE_NO, P500.EQUIPMENT_CD, ZTBLOTPRINTHISTORYTB.LINEQC_EMPL_NO, ZTBLOTPRINTHISTORYTB.EMPL_NO, ZTBLOTPRINTHISTORYTB.LOT_QTY, ZTBLOTPRINTHISTORYTB.PACKING_QTY, ZTBLOTPRINTHISTORYTB.MFT_DATE, ZTBLOTPRINTHISTORYTB.EXP_DATE, ZTBLOTPRINTHISTORYTB.REMARK,ZTBLOTPRINTHISTORYTB.TABLE_NO, ZTBLOTPRINTHISTORYTB.INS_STATUS, ZTBLOTPRINTHISTORYTB.REMARK2, ZTBLOTPRINTHISTORYTB.CNDB_ENCODES, ZTBLOTPRINTHISTORYTB.LABEL_SEQ, ZTBLOTPRINTHISTORYTB.LABEL_ID_OLD, ZTBLOTPRINTHISTORYTB.LABEL_ID FROM 
          ZTBLOTPRINTHISTORYTB
          LEFT JOIN P501 ON P501.PROCESS_LOT_NO = ZTBLOTPRINTHISTORYTB.PROCESS_LOT_NO AND P501.CTR_CD = ZTBLOTPRINTHISTORYTB.CTR_CD
          LEFT JOIN P500 ON P501.PROCESS_IN_DATE = P500.PROCESS_IN_DATE AND P501.PROCESS_IN_SEQ = P500.PROCESS_IN_SEQ AND P501.PROCESS_IN_NO = P500.PROCESS_IN_NO AND P500.CTR_CD = P501.CTR_CD
          LEFT JOIN P400 ON P500.PROD_REQUEST_NO = P400.PROD_REQUEST_NO AND P400.CTR_CD = P500.CTR_CD
          LEFT JOIN M100 ON M100.G_CODE = P500.G_CODE AND M100.CTR_CD = P500.CTR_CD
          LEFT JOIN M110 ON M110.CUST_CD = P400.CUST_CD AND M110.CTR_CD = P400.CTR_CD
          WHERE ZTBLOTPRINTHISTORYTB.LOT_PRINT_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE} 23:59:59' AND ZTBLOTPRINTHISTORYTB.CTR_CD='${DATA.CTR_CD}'`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "getI221Lastest_IN_NO":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `SELECT MAX(IN_NO) AS MAX_IN_NO FROM I221 WHERE CTR_CD='${DATA.CTR_CD}' AND IN_DATE ='${moment().format("YYYYMMDD")}'`;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "getI222Lastest_M_LOT_NO":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `SELECT isnull(MAX(M_LOT_NO),FORMAT(GETDATE(),'yyyyMMdd0000')) AS MAX_M_LOT_NO FROM I222 WHERE CTR_CD='${DATA.CTR_CD}' AND IN_DATE ='${moment().format("YYYYMMDD")}'`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "insert_I221":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `INSERT I221 (CTR_CD, IN_DATE, IN_NO, IN_SEQ, CODE_03,M_CODE, IN_CFM_QTY, CODE_54, REMK, USE_YN, INS_DATE, INS_EMPL, FACTORY, CODE_50, INVOICE, CUST_CD, ROLL_QTY, EXP_DATE) VALUES ('${DATA.CTR_CD}','${moment().format("YYYYMMDD")}','${DATA.IN_NO}','${DATA.IN_SEQ}','03','${DATA.M_CODE}',${DATA.IN_CFM_QTY},'USD','${DATA.REMARK}','Y',GETDATE(),'${EMPL_NO}','${DATA.FACTORY}','${DATA.CODE_50}','${DATA.INVOICE_NO}','${DATA.CUST_CD}',${DATA.ROLL_QTY},'${DATA.EXP_DATE}')`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "insert_I222":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `INSERT I222 (CTR_CD, IN_DATE, IN_NO, IN_SEQ, M_LOT_NO,LOC_CD, M_CODE, IN_CFM_QTY, WAHS_CD,  USE_YN, INS_DATE, INS_EMPL, FACTORY, CUST_CD, ROLL_QTY, PROD_YCSX_NO) VALUES ('${DATA.CTR_CD}','${moment().format("YYYYMMDD")}','${DATA.IN_NO}','${DATA.IN_SEQ}','${DATA.M_LOT_NO}', '${DATA.LOC_CD}','${DATA.M_CODE}',${DATA.IN_CFM_QTY},'${DATA.WAHS_CD}','Y',GETDATE(),'${EMPL_NO}','${DATA.FACTORY}','${DATA.CUST_CD}',${DATA.ROLL_QTY},'${DATA.PROD_REQUEST_NO}')`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "checksolanout_O302":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `SELECT MAX(SOLANOUT) AS SOLANOUT FROM O302 WHERE  CTR_CD='${DATA.CTR_CD}' AND PLAN_ID ='${DATA.PLAN_ID}'`;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "insert_O302":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `INSERT INTO O302 (CTR_CD, OUT_DATE, OUT_NO, OUT_SEQ, M_LOT_NO, LOC_CD, M_CODE, OUT_CFM_QTY, WAHS_CD, REMK, USE_YN, INS_DATE, INS_EMPL, FACTORY, CUST_CD, ROLL_QTY, OUT_DATE_THUCTE, IN_DATE_O302, PLAN_ID, SOLANOUT, LIEUQL_SX, INS_RECEPTION, FSC_O302) VALUES ('${DATA.CTR_CD}', '${DATA.OUT_DATE}','${DATA.OUT_NO}', '${DATA.OUT_SEQ}', '${DATA.M_LOT_NO}','${DATA.LOC_CD}','${DATA.M_CODE}','${DATA.OUT_CFM_QTY}', '${DATA.WAHS_CD}','${DATA.REMARK}','${DATA.USE_YN}', GETDATE(), '${DATA.INS_EMPL}', '${DATA.FACTORY}', '${DATA.CUST_CD}',${DATA.ROLL_QTY},'${DATA.OUT_DATE_THUCTE}', '${DATA.IN_DATE_O302}', '${DATA.PLAN_ID}', '${DATA.SOLANOUT}', ${DATA.LIEUQL_SX}, '${DATA.INS_RECEPTION}', '${DATA.FSC_O302}') `;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "xuatpackkhotp": // chua update CTR_CD
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = `WHERE 1=1 `;
          if (!DATA.ALLTIME) {
            condition += ` AND AA.OUT_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE}'`;
          }
          if (DATA.G_CODE !== '') {
            condition += `AND AA.G_CODE='${DATA.G_CODE}'`
          }
          if (DATA.G_NAME !== '') {
            condition += `AND AA.G_NAME LIKE'%${DATA.G_NAME}%'`
          }
          if (DATA.CUST_NAME_KD !== '') {
            condition += `AND AA.CUST_NAME_KD LIKE'%${DATA.CUST_NAME_KD}%'`
          }
          else
            if (DATA.CAPBU === false) {
              condition += `AND  AA.CUST_NAME_KD <>'CMSV'`
            }
          let setpdQuery = `SELECT * FROM 
          (
          SELECT  tbl_Bxout.Product_MaVach AS G_CODE, M100.G_NAME,M100.G_NAME_KD, M100.PROD_MODEL, tbl_Bxout.OutID,M110.CUST_NAME_KD, tbl_Bxout.Customer_SortName, CAST(tbl_Bxout.Time as date) as OUT_DATE,tbl_Bxout.Time AS OUT_DATETIME,isnull(tbl_Bxin.Qty*tbl_Bxin.Qty_KTID, tbl_Bxout.Qty_OutID*tbl_Bxout.Qty) AS Out_Qty,
          isnull(CAST(P501.INS_DATE AS date), P501_A.INS_DATE) SX_DATE,
          isnull(ZTBLOTPRINTHISTORYTB.LABEL_ID2,ZTBLOTPRINTHISTORYTB_A.LABEL_ID2) AS INSPECT_LOT_NO,
          CAST(isnull(tbl_Bxin.SXID,P501_A.PROCESS_LOT_NO) AS varchar) AS PROCESS_LOT_NO , 
          isnull(P501.M_LOT_NO, P501_A.M_LOT_NO) AS M_LOT_NO, 
          isnull(I222.LOTNCC, I222_A.LOTNCC) AS LOTNCC,
          isnull(M090.M_NAME,M090_A.M_NAME) AS M_NAME,
          isnull(M090.WIDTH_CD,M090_A.WIDTH_CD) AS WIDTH_CD,
          isnull(P501.INS_EMPL, P501_A.INS_EMPL) AS SX_EMPL,
          isnull(ZTBLOTPRINTHISTORYTB.LINEQC_EMPL_NO,ZTBLOTPRINTHISTORYTB_A.LINEQC_EMPL_NO) AS LINEQC_EMPL,
          isnull(ZTBLOTPRINTHISTORYTB.EMPL_NO,ZTBLOTPRINTHISTORYTB_A.EMPL_NO) AS INSPECT_EMPL,
          isnull(ZTBLOTPRINTHISTORYTB.EXP_DATE,ZTBLOTPRINTHISTORYTB_A.EXP_DATE) AS EXP_DATE,
          tbl_Bxout.Outtype
          FROM tbl_Bxout 
          LEFT JOIN M100 ON (M100.G_CODE = tbl_Bxout.Product_MaVach)
          LEFT JOIN tbl_Bxin ON (tbl_Bxout.OutID = tbl_Bxin.BXID)
          LEFT JOIN P501 ON (P501.PROCESS_LOT_NO = CAST(tbl_Bxin.SXID as varchar))
          LEFT JOIN  ZTBLOTPRINTHISTORYTB ON (ZTBLOTPRINTHISTORYTB.LABEL_ID2 = CAST(tbl_Bxout.OutID as varchar))
          LEFT JOIN (SELECT * FROM P501) AS P501_A ON (P501_A.PROCESS_LOT_NO = ZTBLOTPRINTHISTORYTB.PROCESS_LOT_NO)
          LEFT JOIN I222 ON I222.M_LOT_NO = P501.M_LOT_NO
          LEFT JOIN M090 ON M090.M_CODE = I222.M_CODE
          LEFT JOIN (SELECT * FROM I222) AS I222_A ON I222_A.M_LOT_NO= P501_A.M_LOT_NO
          LEFT JOIN (SELECT * FROM M090) AS M090_A ON M090_A.M_CODE = I222_A.M_CODE
          LEFT JOIN tbl_Customer ON tbl_Customer.Customer_SortName = tbl_Bxout.Customer_SortName
          LEFT JOIN M110 ON tbl_Customer.CUST_CD = M110.CUST_CD
          LEFT JOIN (SELECT * FROM ZTBLOTPRINTHISTORYTB) AS ZTBLOTPRINTHISTORYTB_A ON ZTBLOTPRINTHISTORYTB_A.LABEL_ID2 = CAST(tbl_Bxin.KTID as varchar)
          ) AS AA
          ${condition}
          ORDER BY AA.OUT_DATETIME DESC`;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "dailyDefectTrending":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = `WHERE ZTBINSPECTNGTB.INSPECT_DATETIME BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE} 23:59:59' `;
          if (DATA.codeArray.length === 1) {
            condition += ` AND ZTBINSPECTNGTB.G_CODE='${DATA.codeArray[0]}'`
          }
          else if (DATA.codeArray.length > 1) {
            let codeString = ``;
            let codeArStr = DATA.codeArray.map((ele, index) => `'${ele}'`).join(",");
            condition += ` AND ZTBINSPECTNGTB.G_CODE IN (${codeArStr})`;
          }
          if (DATA.CUST_NAME_KD !== '') {
            condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`
          }
          let setpdQuery = `
          SELECT CAST(INSPECT_DATETIME AS date) AS INSPECT_DATE, SUM(INSPECT_TOTAL_QTY) AS INSPECT_TOTAL_QTY , SUM(INSPECT_OK_QTY) AS INSPECT_OK_QTY , SUM(ERR4+ERR5+ERR6+ERR7+ERR8+ERR9+ERR10+ERR11+ERR12+ERR13+ERR14+ERR15+ERR16+ERR17+ERR18+ERR19+ERR20+ERR21+ERR22+ERR23+ERR24+ERR25+ERR26+ERR27+ERR28+ERR29+ERR30+ERR31) AS INSPECT_NG_QTY,
          SUM(ERR1) *1000000.0/ SUM(INSPECT_TOTAL_QTY-ERR32) AS ERR1,SUM(ERR2) *1000000.0/ SUM(INSPECT_TOTAL_QTY-ERR32) AS ERR2,SUM(ERR3) *1000000.0/ SUM(INSPECT_TOTAL_QTY-ERR32) AS ERR3,SUM(ERR4) *1000000.0/ SUM(INSPECT_TOTAL_QTY-ERR32) AS ERR4,SUM(ERR5) *1000000.0/ SUM(INSPECT_TOTAL_QTY-ERR32) AS ERR5,SUM(ERR6) *1000000.0/ SUM(INSPECT_TOTAL_QTY-ERR32) AS ERR6,SUM(ERR7) *1000000.0/ SUM(INSPECT_TOTAL_QTY-ERR32) AS ERR7,SUM(ERR8) *1000000.0/ SUM(INSPECT_TOTAL_QTY-ERR32) AS ERR8,SUM(ERR9) *1000000.0/ SUM(INSPECT_TOTAL_QTY-ERR32) AS ERR9,SUM(ERR10) *1000000.0/ SUM(INSPECT_TOTAL_QTY-ERR32) AS ERR10,SUM(ERR11) *1000000.0/ SUM(INSPECT_TOTAL_QTY-ERR32) AS ERR11,SUM(ERR12) *1000000.0/ SUM(INSPECT_TOTAL_QTY-ERR32) AS ERR12,SUM(ERR13) *1000000.0/ SUM(INSPECT_TOTAL_QTY-ERR32) AS ERR13,SUM(ERR14) *1000000.0/ SUM(INSPECT_TOTAL_QTY-ERR32) AS ERR14,SUM(ERR15) *1000000.0/ SUM(INSPECT_TOTAL_QTY-ERR32) AS ERR15,SUM(ERR16) *1000000.0/ SUM(INSPECT_TOTAL_QTY-ERR32) AS ERR16,SUM(ERR17) *1000000.0/ SUM(INSPECT_TOTAL_QTY-ERR32) AS ERR17,SUM(ERR18) *1000000.0/ SUM(INSPECT_TOTAL_QTY-ERR32) AS ERR18,SUM(ERR19) *1000000.0/ SUM(INSPECT_TOTAL_QTY-ERR32) AS ERR19,SUM(ERR20) *1000000.0/ SUM(INSPECT_TOTAL_QTY-ERR32) AS ERR20,SUM(ERR21) *1000000.0/ SUM(INSPECT_TOTAL_QTY-ERR32) AS ERR21,SUM(ERR22) *1000000.0/ SUM(INSPECT_TOTAL_QTY-ERR32) AS ERR22,SUM(ERR23) *1000000.0/ SUM(INSPECT_TOTAL_QTY-ERR32) AS ERR23,SUM(ERR24) *1000000.0/ SUM(INSPECT_TOTAL_QTY-ERR32) AS ERR24,SUM(ERR25) *1000000.0/ SUM(INSPECT_TOTAL_QTY-ERR32) AS ERR25,SUM(ERR26) *1000000.0/ SUM(INSPECT_TOTAL_QTY-ERR32) AS ERR26,SUM(ERR27) *1000000.0/ SUM(INSPECT_TOTAL_QTY-ERR32) AS ERR27,SUM(ERR28) *1000000.0/ SUM(INSPECT_TOTAL_QTY-ERR32) AS ERR28,SUM(ERR29) *1000000.0/ SUM(INSPECT_TOTAL_QTY-ERR32) AS ERR29,SUM(ERR30) *1000000.0/ SUM(INSPECT_TOTAL_QTY-ERR32) AS ERR30,SUM(ERR31) *1000000.0/ SUM(INSPECT_TOTAL_QTY-ERR32) AS ERR31,SUM(ERR32) *1000000.0/ SUM(INSPECT_TOTAL_QTY-ERR32) AS ERR32
          FROM ZTBINSPECTNGTB 
          LEFT JOIN P400 ON P400.PROD_REQUEST_NO = ZTBINSPECTNGTB.PROD_REQUEST_NO AND P400.CTR_CD = ZTBINSPECTNGTB.CTR_CD
          LEFT JOIN M110 ON M110.CUST_CD = P400.CUST_CD AND M110.CTR_CD = P400.CTR_CD
          ${condition}
          AND ZTBINSPECTNGTB.CTR_CD='${DATA.CTR_CD}'
          GROUP BY CAST(INSPECT_DATETIME AS date)
          ORDER BY CAST(INSPECT_DATETIME AS date) DESC
          `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "dailyPQCDefectTrending":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = `WHERE ERR_CODE is not null AND OCCURR_TIME BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE} 23:59:59' `;
          if (DATA.codeArray.length === 1) {
            condition += ` AND ZTBPQC3TABLE.G_CODE='${DATA.codeArray[0]}'`
          }
          else if (DATA.codeArray.length > 1) {
            let codeString = ``;
            let codeArStr = DATA.codeArray.map((ele, index) => `'${ele}'`).join(",");
            condition += ` AND ZTBPQC3TABLE.G_CODE IN (${codeArStr})`;
          }
          if (DATA.CUST_NAME_KD !== '') {
            condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`
          }
          let setpdQuery = `
          WITH PQC3_DATA AS
          (
          SELECT CAST(OCCURR_TIME AS date) AS OCCURR_TIME, ERR_CODE, SUM(INSPECT_QTY) AS INSPECT_QTY, SUM(DEFECT_QTY) AS DEFECT_QTY, SUM(DEFECT_QTY)*1.0/ SUM(INSPECT_QTY) AS NG_RATE FROM ZTBPQC3TABLE 
          LEFT JOIN P400 ON P400.PROD_REQUEST_NO = ZTBPQC3TABLE.PROD_REQUEST_NO AND P400.CTR_CD = ZTBPQC3TABLE.CTR_CD
          LEFT JOIN M110 ON M110.CUST_CD = P400.CUST_CD AND M110.CTR_CD = P400.CTR_CD
          ${condition}
          AND ZTBPQC3TABLE.CTR_CD='${DATA.CTR_CD}'
          GROUP BY CAST(OCCURR_TIME AS date), ERR_CODE
          )
          SELECT INSPECT_DATE,isnull([ERR1],0) AS ERR1,isnull([ERR2],0) AS ERR2,isnull([ERR3],0) AS ERR3,isnull([ERR4],0) AS ERR4,isnull([ERR5],0) AS ERR5,isnull([ERR6],0) AS ERR6,isnull([ERR7],0) AS ERR7,isnull([ERR8],0) AS ERR8,isnull([ERR9],0) AS ERR9,isnull([ERR10],0) AS ERR10,isnull([ERR11],0) AS ERR11,isnull([ERR12],0) AS ERR12,isnull([ERR13],0) AS ERR13,isnull([ERR14],0) AS ERR14,isnull([ERR15],0) AS ERR15,isnull([ERR16],0) AS ERR16,isnull([ERR17],0) AS ERR17,isnull([ERR18],0) AS ERR18,isnull([ERR19],0) AS ERR19,isnull([ERR20],0) AS ERR20,isnull([ERR21],0) AS ERR21,isnull([ERR22],0) AS ERR22,isnull([ERR23],0) AS ERR23,isnull([ERR24],0) AS ERR24,isnull([ERR25],0) AS ERR25,isnull([ERR26],0) AS ERR26,isnull([ERR27],0) AS ERR27,isnull([ERR28],0) AS ERR28,isnull([ERR29],0) AS ERR29,isnull([ERR30],0) AS ERR30,isnull([ERR31],0) AS ERR31,isnull([ERR32],0) AS ERR32
 FROM 
          (SELECT OCCURR_TIME AS INSPECT_DATE,ERR_CODE, NG_RATE FROM PQC3_DATA) AS src
          PIVOT
          ( SUM(NG_RATE)
            FOR ERR_CODE IN ([ERR1],[ERR2],[ERR3],[ERR4],[ERR5],[ERR6],[ERR7],[ERR8],[ERR9],[ERR10],[ERR11],[ERR12],[ERR13],[ERR14],[ERR15],[ERR16],[ERR17],[ERR18],[ERR19],[ERR20],[ERR21],[ERR22],[ERR23],[ERR24],[ERR25],[ERR26],[ERR27],[ERR28],[ERR29],[ERR30],[ERR31],[ERR32])
          ) as pvtb
          ORDER BY pvtb.INSPECT_DATE DESC
          `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "loadInspectionPatrol":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
          SELECT ZTBINSPECTION_PATROL.INS_PATROL_ID, ZTBINSPECTION_PATROL.PROD_REQUEST_NO, ZTBINSPECTION_PATROL.PLAN_ID, ZTBINSPECTION_PATROL.PROCESS_LOT_NO, ZTBINSPECTION_PATROL.G_CODE, ZTBINSPECTION_PATROL.ERR_CODE, ZTBINSPECTION_PATROL.INSPECT_QTY, ZTBINSPECTION_PATROL.DEFECT_QTY, ZTBINSPECTION_PATROL.DEFECT_PHENOMENON, ZTBINSPECTION_PATROL.LINEQC_PIC, ZTBINSPECTION_PATROL.INSP_PIC, ZTBINSPECTION_PATROL.PROD_PIC, ZTBINSPECTION_PATROL.INS_DATE, ZTBINSPECTION_PATROL.PHANLOAI, ZTBINSPECTION_PATROL.REMARK, ZTBINSPECTION_PATROL.OCCURR_TIME, ZTBINSPECTION_PATROL.LABEL_ID, ZTBINSPECTION_PATROL.EQUIPMENT_CD, ZTBINSPECTION_PATROL.CUST_CD, ZTBINSPECTION_PATROL.FACTORY, ZTBINSPECTION_PATROL.CTR_CD, M100.G_NAME, M100.G_NAME_KD, M110.CUST_NAME_KD FROM ZTBINSPECTION_PATROL
          LEFT JOIN M100 ON M100.G_CODE = ZTBINSPECTION_PATROL.G_CODE AND M100.CTR_CD = ZTBINSPECTION_PATROL.CTR_CD
          LEFT JOIN M110 ON M110.CUST_CD = ZTBINSPECTION_PATROL.CUST_CD AND M110.CTR_CD = ZTBINSPECTION_PATROL.CTR_CD
          WHERE ZTBINSPECTION_PATROL.CTR_CD='${DATA.CTR_CD}'
          `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "pqcdailyppm":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = `WHERE ZTBPQC1TABLE.SETTING_OK_TIME BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE} 23:59:59' `;
          if (DATA.codeArray.length === 1) {
            condition += ` AND ZTBPQC1TABLE.G_CODE='${DATA.codeArray[0]}'`
          }
          else if (DATA.codeArray.length > 1) {
            let codeString = ``;
            let codeArStr = DATA.codeArray.map((ele, index) => `'${ele}'`).join(",");
            condition += ` AND ZTBPQC1TABLE.G_CODE IN (${codeArStr})`;
          }
          if (DATA.CUST_NAME_KD !== '') {
            condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`
          }
          let setpdQuery = `
          WITH PQC_DATA AS
          (
            SELECT CONCAT(YEAR(ZTBPQC1TABLE.SETTING_OK_TIME),'_', DATEPART(ISO_WEEK, ZTBPQC1TABLE.SETTING_OK_TIME)) AS SETTING_YW, CONCAT(YEAR(ZTBPQC1TABLE.SETTING_OK_TIME),'_', MONTH(ZTBPQC1TABLE.SETTING_OK_TIME)) AS SETTING_YM, CAST(ZTBPQC1TABLE.SETTING_OK_TIME as date)  AS SETTING_DATE, YEAR(ZTBPQC1TABLE.SETTING_OK_TIME) AS SETTING_YEAR, MONTH(ZTBPQC1TABLE.SETTING_OK_TIME) AS SETTING_MONTH, DATEPART(ISO_WEEK, ZTBPQC1TABLE.SETTING_OK_TIME) AS SETTING_WEEK,   ZTBPQC1TABLE.PQC1_ID, PQC3_ID, isnull(M100.PROD_LAST_PRICE,0) * isnull(ZTBPQC1TABLE.INSPECT_SAMPLE_QTY,0) AS INSPECT_AMOUNT, ZTBPQC1TABLE.CTR_CD FROM ZTBPQC1TABLE 
            LEFT JOIN ZTBPQC3TABLE ON (ZTBPQC1TABLE.PQC1_ID = ZTBPQC3TABLE.PQC1_ID AND ZTBPQC1TABLE.CTR_CD = ZTBPQC3TABLE.CTR_CD)
            LEFT JOIN M100 ON M100.G_CODE = ZTBPQC1TABLE.G_CODE AND M100.CTR_CD = ZTBPQC1TABLE.CTR_CD
            LEFT JOIN M110 ON M110.CUST_CD = M100.CUST_CD AND M110.CTR_CD = M100.CTR_CD
          ${condition} AND ZTBPQC1TABLE.CTR_CD='${DATA.CTR_CD}'
          )
          SELECT SETTING_DATE, COUNT(PQC1_ID) AS TOTAL_LOT, COUNT(PQC3_ID) AS NG_LOT,COUNT(PQC3_ID)*1.0/COUNT(PQC1_ID) AS NG_RATE,  SUM(INSPECT_AMOUNT) AS  INSPECT_AMOUNT FROM PQC_DATA 
          GROUP BY SETTING_DATE 
          ORDER BY SETTING_DATE DESC
          `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "pqcweeklyppm":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = `WHERE ZTBPQC1TABLE.SETTING_OK_TIME BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE} 23:59:59' `;
          if (DATA.codeArray.length === 1) {
            condition += ` AND ZTBPQC1TABLE.G_CODE='${DATA.codeArray[0]}'`
          }
          else if (DATA.codeArray.length > 1) {
            let codeString = ``;
            let codeArStr = DATA.codeArray.map((ele, index) => `'${ele}'`).join(",");
            condition += ` AND ZTBPQC1TABLE.G_CODE IN (${codeArStr})`;
          }
          if (DATA.CUST_NAME_KD !== '') {
            condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`
          }
          let setpdQuery = `
          WITH PQC_DATA AS
          (
            SELECT CONCAT(YEAR(ZTBPQC1TABLE.SETTING_OK_TIME),'_', DATEPART(ISO_WEEK, ZTBPQC1TABLE.SETTING_OK_TIME)) AS SETTING_YW, CONCAT(YEAR(ZTBPQC1TABLE.SETTING_OK_TIME),'_', MONTH(ZTBPQC1TABLE.SETTING_OK_TIME)) AS SETTING_YM, CAST(ZTBPQC1TABLE.SETTING_OK_TIME as date)  AS SETTING_DATE, YEAR(ZTBPQC1TABLE.SETTING_OK_TIME) AS SETTING_YEAR, MONTH(ZTBPQC1TABLE.SETTING_OK_TIME) AS SETTING_MONTH, DATEPART(ISO_WEEK, ZTBPQC1TABLE.SETTING_OK_TIME) AS SETTING_WEEK,   ZTBPQC1TABLE.PQC1_ID, PQC3_ID, isnull(M100.PROD_LAST_PRICE,0) * isnull(ZTBPQC1TABLE.INSPECT_SAMPLE_QTY,0) AS INSPECT_AMOUNT, ZTBPQC1TABLE.CTR_CD FROM ZTBPQC1TABLE 
            LEFT JOIN ZTBPQC3TABLE ON (ZTBPQC1TABLE.PQC1_ID = ZTBPQC3TABLE.PQC1_ID AND ZTBPQC1TABLE.CTR_CD = ZTBPQC3TABLE.CTR_CD)
            LEFT JOIN M100 ON M100.G_CODE = ZTBPQC1TABLE.G_CODE AND M100.CTR_CD = ZTBPQC1TABLE.CTR_CD
            LEFT JOIN M110 ON M110.CUST_CD = M100.CUST_CD AND M110.CTR_CD = M100.CTR_CD
          ${condition} AND ZTBPQC1TABLE.CTR_CD='${DATA.CTR_CD}'
          )
          SELECT CONCAT(SETTING_YEAR, '_', SETTING_WEEK) AS SETTING_YW, SETTING_YEAR, SETTING_WEEK, COUNT(PQC1_ID) AS TOTAL_LOT, COUNT(PQC3_ID) AS NG_LOT, COUNT(PQC3_ID)*1.0/COUNT(PQC1_ID) AS NG_RATE, SUM(INSPECT_AMOUNT) AS  INSPECT_AMOUNT FROM PQC_DATA GROUP BY SETTING_YEAR, SETTING_WEEK 
          ORDER BY SETTING_YEAR DESC, SETTING_WEEK DESC
          `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "pqcmonthlyppm":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = `WHERE ZTBPQC1TABLE.SETTING_OK_TIME BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE} 23:59:59' `;
          if (DATA.codeArray.length === 1) {
            condition += ` AND ZTBPQC1TABLE.G_CODE='${DATA.codeArray[0]}'`
          }
          else if (DATA.codeArray.length > 1) {
            let codeString = ``;
            let codeArStr = DATA.codeArray.map((ele, index) => `'${ele}'`).join(",");
            condition += ` AND ZTBPQC1TABLE.G_CODE IN (${codeArStr})`;
          }
          if (DATA.CUST_NAME_KD !== '') {
            condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`
          }
          let setpdQuery = `
          WITH PQC_DATA AS
          (
          SELECT CONCAT(YEAR(ZTBPQC1TABLE.SETTING_OK_TIME),'_', DATEPART(ISO_WEEK, ZTBPQC1TABLE.SETTING_OK_TIME)) AS SETTING_YW, CONCAT(YEAR(ZTBPQC1TABLE.SETTING_OK_TIME),'_', MONTH(ZTBPQC1TABLE.SETTING_OK_TIME)) AS SETTING_YM, CAST(ZTBPQC1TABLE.SETTING_OK_TIME as date)  AS SETTING_DATE, YEAR(ZTBPQC1TABLE.SETTING_OK_TIME) AS SETTING_YEAR, MONTH(ZTBPQC1TABLE.SETTING_OK_TIME) AS SETTING_MONTH, DATEPART(ISO_WEEK, ZTBPQC1TABLE.SETTING_OK_TIME) AS SETTING_WEEK,   ZTBPQC1TABLE.PQC1_ID, PQC3_ID, isnull(M100.PROD_LAST_PRICE,0) * isnull(ZTBPQC1TABLE.INSPECT_SAMPLE_QTY,0) AS INSPECT_AMOUNT, ZTBPQC1TABLE.CTR_CD FROM ZTBPQC1TABLE 
          LEFT JOIN ZTBPQC3TABLE ON (ZTBPQC1TABLE.PQC1_ID = ZTBPQC3TABLE.PQC1_ID AND ZTBPQC1TABLE.CTR_CD = ZTBPQC3TABLE.CTR_CD)
          LEFT JOIN M100 ON M100.G_CODE = ZTBPQC1TABLE.G_CODE AND M100.CTR_CD = ZTBPQC1TABLE.CTR_CD
          LEFT JOIN M110 ON M110.CUST_CD = M100.CUST_CD AND M110.CTR_CD = M100.CTR_CD
          ${condition} AND ZTBPQC1TABLE.CTR_CD='${DATA.CTR_CD}'
          )
          SELECT CONCAT(SETTING_YEAR, '_', SETTING_MONTH) AS SETTING_YM, SETTING_YEAR, SETTING_MONTH, COUNT(PQC1_ID) AS TOTAL_LOT, COUNT(PQC3_ID) AS NG_LOT, COUNT(PQC3_ID)*1.0/COUNT(PQC1_ID) AS NG_RATE, SUM(INSPECT_AMOUNT) AS  INSPECT_AMOUNT FROM PQC_DATA GROUP BY SETTING_YEAR, SETTING_MONTH
          ORDER BY SETTING_YEAR DESC, SETTING_MONTH DESC
          `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "pqcyearlyppm":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = `WHERE ZTBPQC1TABLE.SETTING_OK_TIME BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE} 23:59:59' `;
          if (DATA.codeArray.length === 1) {
            condition += ` AND ZTBPQC1TABLE.G_CODE='${DATA.codeArray[0]}'`
          }
          else if (DATA.codeArray.length > 1) {
            let codeString = ``;
            let codeArStr = DATA.codeArray.map((ele, index) => `'${ele}'`).join(",");
            condition += ` AND ZTBPQC1TABLE.G_CODE IN (${codeArStr})`;
          }
          if (DATA.CUST_NAME_KD !== '') {
            condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`
          }
          let setpdQuery = `
          WITH PQC_DATA AS
          (
          SELECT CONCAT(YEAR(ZTBPQC1TABLE.SETTING_OK_TIME),'_', DATEPART(ISO_WEEK, ZTBPQC1TABLE.SETTING_OK_TIME)) AS SETTING_YW, CONCAT(YEAR(ZTBPQC1TABLE.SETTING_OK_TIME),'_', MONTH(ZTBPQC1TABLE.SETTING_OK_TIME)) AS SETTING_YM, CAST(ZTBPQC1TABLE.SETTING_OK_TIME as date)  AS SETTING_DATE, YEAR(ZTBPQC1TABLE.SETTING_OK_TIME) AS SETTING_YEAR, MONTH(ZTBPQC1TABLE.SETTING_OK_TIME) AS SETTING_MONTH, DATEPART(ISO_WEEK, ZTBPQC1TABLE.SETTING_OK_TIME) AS SETTING_WEEK,   ZTBPQC1TABLE.PQC1_ID, PQC3_ID, isnull(M100.PROD_LAST_PRICE,0) * isnull(ZTBPQC1TABLE.INSPECT_SAMPLE_QTY,0) AS INSPECT_AMOUNT, ZTBPQC1TABLE.CTR_CD FROM ZTBPQC1TABLE 
          LEFT JOIN ZTBPQC3TABLE ON (ZTBPQC1TABLE.PQC1_ID = ZTBPQC3TABLE.PQC1_ID AND ZTBPQC1TABLE.CTR_CD = ZTBPQC3TABLE.CTR_CD)
          LEFT JOIN M100 ON M100.G_CODE = ZTBPQC1TABLE.G_CODE AND M100.CTR_CD = ZTBPQC1TABLE.CTR_CD
          LEFT JOIN M110 ON M110.CUST_CD = M100.CUST_CD AND M110.CTR_CD = M100.CTR_CD
          ${condition} AND ZTBPQC1TABLE.CTR_CD='${DATA.CTR_CD}'
          )
          SELECT SETTING_YEAR,  COUNT(PQC1_ID) AS TOTAL_LOT, COUNT(PQC3_ID) AS NG_LOT, COUNT(PQC3_ID)*1.0/COUNT(PQC1_ID) AS NG_RATE, SUM(INSPECT_AMOUNT) AS  INSPECT_AMOUNT FROM PQC_DATA GROUP BY SETTING_YEAR
          ORDER BY SETTING_YEAR DESC
          `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "csdailyconfirmdata":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = `WHERE PHANLOAI <>'' AND CS_CONFIRM_TABLE.CONFIRM_DATE BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE} 23:59:59' `;
          if (DATA.codeArray.length === 1) {
            condition += ` AND CS_CONFIRM_TABLE.G_CODE='${DATA.codeArray[0]}'`
          }
          else if (DATA.codeArray.length > 1) {
            let codeString = ``;
            let codeArStr = DATA.codeArray.map((ele, index) => `'${ele}'`).join(",");
            condition += ` AND CS_CONFIRM_TABLE.G_CODE IN (${codeArStr})`;
          }
          if (DATA.CUST_NAME_KD !== '') {
            condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`
          }
          let setpdQuery = `
            WITH CS_DATA AS
            (
            SELECT CONCAT(datepart(YEAR,CS_CONFIRM_TABLE.CONFIRM_DATE),'_',datepart(ISO_WEEK,DATEADD(day,1,CS_CONFIRM_TABLE.CONFIRM_DATE))) AS YEAR_WEEK,CS_CONFIRM_TABLE.CONFIRM_ID,CS_CONFIRM_TABLE.CONFIRM_DATE,CS_CONFIRM_TABLE.CONTACT_ID,CS_CONFIRM_TABLE.CS_EMPL_NO,M010.EMPL_NAME,CS_CONFIRM_TABLE.G_CODE,M100.G_NAME,M100.G_NAME_KD,CS_CONFIRM_TABLE.PROD_REQUEST_NO,CS_CONFIRM_TABLE.CUST_CD,M110.CUST_NAME_KD,CS_CONFIRM_TABLE.CONTENT,CS_CONFIRM_TABLE.INSPECT_QTY,CS_CONFIRM_TABLE.NG_QTY,CS_CONFIRM_TABLE.REPLACE_RATE,CS_CONFIRM_TABLE.REDUCE_QTY,CS_CONFIRM_TABLE.FACTOR,CS_CONFIRM_TABLE.RESULT,CS_CONFIRM_TABLE.CONFIRM_STATUS,CS_CONFIRM_TABLE.REMARK,CS_CONFIRM_TABLE.INS_DATETIME,CS_CONFIRM_TABLE.PHANLOAI,CS_CONFIRM_TABLE.LINK,M100.PROD_TYPE,M100.PROD_MODEL,M100.PROD_PROJECT,M100.PROD_LAST_PRICE, (M100.PROD_LAST_PRICE*CS_CONFIRM_TABLE.REDUCE_QTY) AS REDUCE_AMOUNT, CS_CONFIRM_TABLE.CTR_CD
                      FROM CS_CONFIRM_TABLE
                      LEFT JOIN M010 ON (M010.EMPL_NO = CS_CONFIRM_TABLE.CS_EMPL_NO AND M010.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)
                      LEFT JOIN M100 ON (M100.G_CODE = CS_CONFIRM_TABLE.G_CODE AND M100.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)
                      LEFT JOIN M110 ON (M110.CUST_CD = CS_CONFIRM_TABLE.CUST_CD AND M110.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)		
                      ${condition} AND CS_CONFIRM_TABLE.CTR_CD='${DATA.CTR_CD}'
            )
            SELECT * FROM
            (SELECT CONFIRM_DATE, FACTOR, CONFIRM_ID AS CF_ID FROM CS_DATA) as src
            PIVOT
            (
              COUNT(CF_ID) FOR FACTOR IN ([C],[K])
            )as pvtb
            ORDER BY CONFIRM_DATE DESC
            `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "csweeklyconfirmdata":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = `WHERE PHANLOAI <>'' AND  CS_CONFIRM_TABLE.CONFIRM_DATE BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE} 23:59:59' `;
          if (DATA.codeArray.length === 1) {
            condition += ` AND CS_CONFIRM_TABLE.G_CODE='${DATA.codeArray[0]}'`
          }
          else if (DATA.codeArray.length > 1) {
            let codeString = ``;
            let codeArStr = DATA.codeArray.map((ele, index) => `'${ele}'`).join(",");
            condition += ` AND CS_CONFIRM_TABLE.G_CODE IN (${codeArStr})`;
          }
          if (DATA.CUST_NAME_KD !== '') {
            condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`
          }
          let setpdQuery = `
            WITH CS_DATA AS
            (
            SELECT CONCAT(datepart(YEAR,CS_CONFIRM_TABLE.CONFIRM_DATE),'_',datepart(ISO_WEEK,DATEADD(day,1,CS_CONFIRM_TABLE.CONFIRM_DATE))) AS YEAR_WEEK,CS_CONFIRM_TABLE.CONFIRM_ID,CS_CONFIRM_TABLE.CONFIRM_DATE,CS_CONFIRM_TABLE.CONTACT_ID,CS_CONFIRM_TABLE.CS_EMPL_NO,M010.EMPL_NAME,CS_CONFIRM_TABLE.G_CODE,M100.G_NAME,M100.G_NAME_KD,CS_CONFIRM_TABLE.PROD_REQUEST_NO,CS_CONFIRM_TABLE.CUST_CD,M110.CUST_NAME_KD,CS_CONFIRM_TABLE.CONTENT,CS_CONFIRM_TABLE.INSPECT_QTY,CS_CONFIRM_TABLE.NG_QTY,CS_CONFIRM_TABLE.REPLACE_RATE,CS_CONFIRM_TABLE.REDUCE_QTY,CS_CONFIRM_TABLE.FACTOR,CS_CONFIRM_TABLE.RESULT,CS_CONFIRM_TABLE.CONFIRM_STATUS,CS_CONFIRM_TABLE.REMARK,CS_CONFIRM_TABLE.INS_DATETIME,CS_CONFIRM_TABLE.PHANLOAI,CS_CONFIRM_TABLE.LINK,M100.PROD_TYPE,M100.PROD_MODEL,M100.PROD_PROJECT,M100.PROD_LAST_PRICE, (M100.PROD_LAST_PRICE*CS_CONFIRM_TABLE.REDUCE_QTY) AS REDUCE_AMOUNT, CS_CONFIRM_TABLE.CTR_CD
                      FROM CS_CONFIRM_TABLE
                      LEFT JOIN M010 ON (M010.EMPL_NO = CS_CONFIRM_TABLE.CS_EMPL_NO AND M010.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)
                      LEFT JOIN M100 ON (M100.G_CODE = CS_CONFIRM_TABLE.G_CODE AND M100.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)
                      LEFT JOIN M110 ON (M110.CUST_CD = CS_CONFIRM_TABLE.CUST_CD AND M110.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)
                      ${condition} AND CS_CONFIRM_TABLE.CTR_CD='${DATA.CTR_CD}'
            )
            SELECT pvtb.CONFIRM_YW, pvtb.[C] AS C, pvtb.[K] AS K FROM
            (SELECT CONCAT(YEAR(CONFIRM_DATE),'_', DATEPART(ISO_WEEK, CONFIRM_DATE)) AS CONFIRM_YW, YEAR(CONFIRM_DATE) AS CONFIRM_YEAR,DATEPART(ISO_WEEK, CONFIRM_DATE) AS CONFIRM_WEEK, FACTOR, CONFIRM_ID AS CF_ID FROM CS_DATA) as src
            PIVOT
            (
              COUNT(CF_ID) FOR FACTOR IN ([C],[K])
            )as pvtb
            ORDER BY pvtb.CONFIRM_YEAR DESC, pvtb.CONFIRM_WEEK DESC
            `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "csmonthlyconfirmdata":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = `WHERE PHANLOAI <>'' AND  CS_CONFIRM_TABLE.CONFIRM_DATE BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE} 23:59:59' `;
          if (DATA.codeArray.length === 1) {
            condition += ` AND CS_CONFIRM_TABLE.G_CODE='${DATA.codeArray[0]}'`
          }
          else if (DATA.codeArray.length > 1) {
            let codeString = ``;
            let codeArStr = DATA.codeArray.map((ele, index) => `'${ele}'`).join(",");
            condition += ` AND CS_CONFIRM_TABLE.G_CODE IN (${codeArStr})`;
          }
          if (DATA.CUST_NAME_KD !== '') {
            condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`
          }
          let setpdQuery = `
            WITH CS_DATA AS
            (
            SELECT CONCAT(datepart(YEAR,CS_CONFIRM_TABLE.CONFIRM_DATE),'_',datepart(ISO_WEEK,DATEADD(day,1,CS_CONFIRM_TABLE.CONFIRM_DATE))) AS YEAR_WEEK,CS_CONFIRM_TABLE.CONFIRM_ID,CS_CONFIRM_TABLE.CONFIRM_DATE,CS_CONFIRM_TABLE.CONTACT_ID,CS_CONFIRM_TABLE.CS_EMPL_NO,M010.EMPL_NAME,CS_CONFIRM_TABLE.G_CODE,M100.G_NAME,M100.G_NAME_KD,CS_CONFIRM_TABLE.PROD_REQUEST_NO,CS_CONFIRM_TABLE.CUST_CD,M110.CUST_NAME_KD,CS_CONFIRM_TABLE.CONTENT,CS_CONFIRM_TABLE.INSPECT_QTY,CS_CONFIRM_TABLE.NG_QTY,CS_CONFIRM_TABLE.REPLACE_RATE,CS_CONFIRM_TABLE.REDUCE_QTY,CS_CONFIRM_TABLE.FACTOR,CS_CONFIRM_TABLE.RESULT,CS_CONFIRM_TABLE.CONFIRM_STATUS,CS_CONFIRM_TABLE.REMARK,CS_CONFIRM_TABLE.INS_DATETIME,CS_CONFIRM_TABLE.PHANLOAI,CS_CONFIRM_TABLE.LINK,M100.PROD_TYPE,M100.PROD_MODEL,M100.PROD_PROJECT,M100.PROD_LAST_PRICE, (M100.PROD_LAST_PRICE*CS_CONFIRM_TABLE.REDUCE_QTY) AS REDUCE_AMOUNT, CS_CONFIRM_TABLE.CTR_CD
                      FROM CS_CONFIRM_TABLE
                      LEFT JOIN M010 ON (M010.EMPL_NO = CS_CONFIRM_TABLE.CS_EMPL_NO AND M010.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)
                      LEFT JOIN M100 ON (M100.G_CODE = CS_CONFIRM_TABLE.G_CODE AND M100.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)
                      LEFT JOIN M110 ON (M110.CUST_CD = CS_CONFIRM_TABLE.CUST_CD AND M110.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)
                      ${condition} AND CS_CONFIRM_TABLE.CTR_CD='${DATA.CTR_CD}'
            )
            SELECT pvtb.CONFIRM_YM, pvtb.[C] AS C, pvtb.[K] AS K FROM
            (SELECT CONCAT(YEAR(CONFIRM_DATE),'_', DATEPART(MONTH, CONFIRM_DATE)) AS CONFIRM_YM, YEAR(CONFIRM_DATE) AS CONFIRM_YEAR,DATEPART(MONTH, CONFIRM_DATE) AS CONFIRM_MONTH, FACTOR, CONFIRM_ID AS CF_ID, CTR_CD FROM CS_DATA) as src
            PIVOT
            (
              COUNT(CF_ID) FOR FACTOR IN ([C],[K])
            )as pvtb
            ORDER BY pvtb.CONFIRM_YEAR DESC, pvtb.CONFIRM_MONTH DESC
            `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "csyearlyconfirmdata":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = `WHERE PHANLOAI <>'' AND  CS_CONFIRM_TABLE.CONFIRM_DATE BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE} 23:59:59' `;
          if (DATA.codeArray.length === 1) {
            condition += ` AND CS_CONFIRM_TABLE.G_CODE='${DATA.codeArray[0]}'`
          }
          else if (DATA.codeArray.length > 1) {
            let codeString = ``;
            let codeArStr = DATA.codeArray.map((ele, index) => `'${ele}'`).join(",");
            condition += ` AND CS_CONFIRM_TABLE.G_CODE IN (${codeArStr})`;
          }
          if (DATA.CUST_NAME_KD !== '') {
            condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`
          }
          let setpdQuery = `
            WITH CS_DATA AS
            (
            SELECT CONCAT(datepart(YEAR,CS_CONFIRM_TABLE.CONFIRM_DATE),'_',datepart(ISO_WEEK,DATEADD(day,1,CS_CONFIRM_TABLE.CONFIRM_DATE))) AS YEAR_WEEK,CS_CONFIRM_TABLE.CONFIRM_ID,CS_CONFIRM_TABLE.CONFIRM_DATE,CS_CONFIRM_TABLE.CONTACT_ID,CS_CONFIRM_TABLE.CS_EMPL_NO,M010.EMPL_NAME,CS_CONFIRM_TABLE.G_CODE,M100.G_NAME,M100.G_NAME_KD,CS_CONFIRM_TABLE.PROD_REQUEST_NO,CS_CONFIRM_TABLE.CUST_CD,M110.CUST_NAME_KD,CS_CONFIRM_TABLE.CONTENT,CS_CONFIRM_TABLE.INSPECT_QTY,CS_CONFIRM_TABLE.NG_QTY,CS_CONFIRM_TABLE.REPLACE_RATE,CS_CONFIRM_TABLE.REDUCE_QTY,CS_CONFIRM_TABLE.FACTOR,CS_CONFIRM_TABLE.RESULT,CS_CONFIRM_TABLE.CONFIRM_STATUS,CS_CONFIRM_TABLE.REMARK,CS_CONFIRM_TABLE.INS_DATETIME,CS_CONFIRM_TABLE.PHANLOAI,CS_CONFIRM_TABLE.LINK,M100.PROD_TYPE,M100.PROD_MODEL,M100.PROD_PROJECT,M100.PROD_LAST_PRICE, (M100.PROD_LAST_PRICE*CS_CONFIRM_TABLE.REDUCE_QTY) AS REDUCE_AMOUNT, CS_CONFIRM_TABLE.CTR_CD
                      FROM CS_CONFIRM_TABLE
                      LEFT JOIN M010 ON (M010.EMPL_NO = CS_CONFIRM_TABLE.CS_EMPL_NO AND M010.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)
                      LEFT JOIN M100 ON (M100.G_CODE = CS_CONFIRM_TABLE.G_CODE AND M100.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)
                      LEFT JOIN M110 ON (M110.CUST_CD = CS_CONFIRM_TABLE.CUST_CD AND M110.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)
                      ${condition} AND CS_CONFIRM_TABLE.CTR_CD='${DATA.CTR_CD}'
            )
            SELECT pvtb.CONFIRM_YEAR, pvtb.[C] AS C, pvtb.[K] AS K FROM
            (SELECT  YEAR(CONFIRM_DATE) AS CONFIRM_YEAR, FACTOR, CONFIRM_ID AS CF_ID, CTR_CD FROM CS_DATA) as src
            PIVOT
            (
              COUNT(CF_ID) FOR FACTOR IN ([C],[K])
            )as pvtb
            ORDER BY pvtb.CONFIRM_YEAR DESC
            `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "csConfirmDataByCustomer":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = `WHERE PHANLOAI <>'' AND  CS_CONFIRM_TABLE.CONFIRM_DATE BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE} 23:59:59' `;
          if (DATA.codeArray.length === 1) {
            condition += ` AND CS_CONFIRM_TABLE.G_CODE='${DATA.codeArray[0]}'`
          }
          else if (DATA.codeArray.length > 1) {
            let codeString = ``;
            let codeArStr = DATA.codeArray.map((ele, index) => `'${ele}'`).join(",");
            condition += ` AND CS_CONFIRM_TABLE.G_CODE IN (${codeArStr})`;
          }
          if (DATA.CUST_NAME_KD !== '') {
            condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`
          }
          let setpdQuery = `
            WITH CS_DATA AS
            (
            SELECT CONCAT(datepart(YEAR,CS_CONFIRM_TABLE.CONFIRM_DATE),'_',datepart(ISO_WEEK,DATEADD(day,1,CS_CONFIRM_TABLE.CONFIRM_DATE))) AS YEAR_WEEK,CS_CONFIRM_TABLE.CONFIRM_ID,CS_CONFIRM_TABLE.CONFIRM_DATE,CS_CONFIRM_TABLE.CONTACT_ID,CS_CONFIRM_TABLE.CS_EMPL_NO,M010.EMPL_NAME,CS_CONFIRM_TABLE.G_CODE,M100.G_NAME,M100.G_NAME_KD,CS_CONFIRM_TABLE.PROD_REQUEST_NO,CS_CONFIRM_TABLE.CUST_CD,M110.CUST_NAME_KD,CS_CONFIRM_TABLE.CONTENT,CS_CONFIRM_TABLE.INSPECT_QTY,CS_CONFIRM_TABLE.NG_QTY,CS_CONFIRM_TABLE.REPLACE_RATE,CS_CONFIRM_TABLE.REDUCE_QTY,CS_CONFIRM_TABLE.FACTOR,CS_CONFIRM_TABLE.RESULT,CS_CONFIRM_TABLE.CONFIRM_STATUS,CS_CONFIRM_TABLE.REMARK,CS_CONFIRM_TABLE.INS_DATETIME,CS_CONFIRM_TABLE.PHANLOAI,CS_CONFIRM_TABLE.LINK,M100.PROD_TYPE,M100.PROD_MODEL,M100.PROD_PROJECT,M100.PROD_LAST_PRICE, (M100.PROD_LAST_PRICE*CS_CONFIRM_TABLE.REDUCE_QTY) AS REDUCE_AMOUNT, CS_CONFIRM_TABLE.CTR_CD
                      FROM CS_CONFIRM_TABLE
                      LEFT JOIN M010 ON (M010.EMPL_NO = CS_CONFIRM_TABLE.CS_EMPL_NO AND M010.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)
                      LEFT JOIN M100 ON (M100.G_CODE = CS_CONFIRM_TABLE.G_CODE AND M100.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)
                      LEFT JOIN M110 ON (M110.CUST_CD = CS_CONFIRM_TABLE.CUST_CD AND M110.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)
                  ${condition} AND CS_CONFIRM_TABLE.CTR_CD='${DATA.CTR_CD}'
            )
            SELECT CUST_NAME_KD, COUNT(CONFIRM_ID) AS  TOTAL FROM CS_DATA GROUP BY CUST_NAME_KD
            ORDER BY  COUNT(CONFIRM_ID) DESC
            `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "csConfirmDataByPIC":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = `WHERE PHANLOAI <>'' AND  CS_CONFIRM_TABLE.CONFIRM_DATE BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE} 23:59:59' `;
          if (DATA.codeArray.length === 1) {
            condition += ` AND CS_CONFIRM_TABLE.G_CODE='${DATA.codeArray[0]}'`
          }
          else if (DATA.codeArray.length > 1) {
            let codeString = ``;
            let codeArStr = DATA.codeArray.map((ele, index) => `'${ele}'`).join(",");
            condition += ` AND CS_CONFIRM_TABLE.G_CODE IN (${codeArStr})`;
          }
          if (DATA.CUST_NAME_KD !== '') {
            condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`
          }
          let setpdQuery = `
            WITH CS_DATA AS
            (
            SELECT CONCAT(datepart(YEAR,CS_CONFIRM_TABLE.CONFIRM_DATE),'_',datepart(ISO_WEEK,DATEADD(day,1,CS_CONFIRM_TABLE.CONFIRM_DATE))) AS YEAR_WEEK,CS_CONFIRM_TABLE.CONFIRM_ID,CS_CONFIRM_TABLE.CONFIRM_DATE,CS_CONFIRM_TABLE.CONTACT_ID,CS_CONFIRM_TABLE.CS_EMPL_NO,M010.EMPL_NAME,CS_CONFIRM_TABLE.G_CODE,M100.G_NAME,M100.G_NAME_KD,CS_CONFIRM_TABLE.PROD_REQUEST_NO,CS_CONFIRM_TABLE.CUST_CD,M110.CUST_NAME_KD,CS_CONFIRM_TABLE.CONTENT,CS_CONFIRM_TABLE.INSPECT_QTY,CS_CONFIRM_TABLE.NG_QTY,CS_CONFIRM_TABLE.REPLACE_RATE,CS_CONFIRM_TABLE.REDUCE_QTY,CS_CONFIRM_TABLE.FACTOR,CS_CONFIRM_TABLE.RESULT,CS_CONFIRM_TABLE.CONFIRM_STATUS,CS_CONFIRM_TABLE.REMARK,CS_CONFIRM_TABLE.INS_DATETIME,CS_CONFIRM_TABLE.PHANLOAI,CS_CONFIRM_TABLE.LINK,M100.PROD_TYPE,M100.PROD_MODEL,M100.PROD_PROJECT,M100.PROD_LAST_PRICE, (M100.PROD_LAST_PRICE*CS_CONFIRM_TABLE.REDUCE_QTY) AS REDUCE_AMOUNT, CS_CONFIRM_TABLE.CTR_CD
                      FROM CS_CONFIRM_TABLE
                      LEFT JOIN M010 ON (M010.EMPL_NO = CS_CONFIRM_TABLE.CS_EMPL_NO AND M010.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)
                      LEFT JOIN M100 ON (M100.G_CODE = CS_CONFIRM_TABLE.G_CODE AND M100.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)
                      LEFT JOIN M110 ON (M110.CUST_CD = CS_CONFIRM_TABLE.CUST_CD AND M110.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)
                  ${condition} AND CS_CONFIRM_TABLE.CTR_CD='${DATA.CTR_CD}'
            )
            SELECT EMPL_NAME, COUNT(CONFIRM_ID) AS  TOTAL FROM CS_DATA GROUP BY EMPL_NAME
            ORDER BY  COUNT(CONFIRM_ID) DESC
            `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "csdailyreduceamount":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = `WHERE PHANLOAI <>'' AND  CS_CONFIRM_TABLE.CONFIRM_DATE BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE} 23:59:59' `;
          if (DATA.codeArray.length === 1) {
            condition += ` AND CS_CONFIRM_TABLE.G_CODE='${DATA.codeArray[0]}'`
          }
          else if (DATA.codeArray.length > 1) {
            let codeString = ``;
            let codeArStr = DATA.codeArray.map((ele, index) => `'${ele}'`).join(",");
            condition += ` AND CS_CONFIRM_TABLE.G_CODE IN (${codeArStr})`;
          }
          let condition2 = ` WHERE RESULT = 'OK' AND  CS_SPECIAL_APPROVE_TABLE.SA_REQUEST_DATE BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE} 23:59:59' `
          if (DATA.codeArray.length === 1) {
            condition2 += ` AND CS_SPECIAL_APPROVE_TABLE.G_CODE='${DATA.codeArray[0]}'`
          }
          else if (DATA.codeArray.length > 1) {
            let codeString = ``;
            let codeArStr = DATA.codeArray.map((ele, index) => `'${ele}'`).join(",");
            condition2 += ` AND CS_SPECIAL_APPROVE_TABLE.G_CODE IN (${codeArStr})`;
          }
          if (DATA.CUST_NAME_KD !== '') {
            condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`
          }
          let setpdQuery = `
            WITH CS_DATA AS
            (
            SELECT CS_CONFIRM_TABLE.CONFIRM_ID,CS_CONFIRM_TABLE.CONFIRM_DATE,CS_CONFIRM_TABLE.CONTACT_ID,CS_CONFIRM_TABLE.CS_EMPL_NO,M010.EMPL_NAME,CS_CONFIRM_TABLE.G_CODE,M100.G_NAME,M100.G_NAME_KD,CS_CONFIRM_TABLE.PROD_REQUEST_NO,CS_CONFIRM_TABLE.CUST_CD,M110.CUST_NAME_KD,CS_CONFIRM_TABLE.CONTENT,CS_CONFIRM_TABLE.INSPECT_QTY,CS_CONFIRM_TABLE.NG_QTY,CS_CONFIRM_TABLE.REPLACE_RATE,CS_CONFIRM_TABLE.REDUCE_QTY,CS_CONFIRM_TABLE.FACTOR,CS_CONFIRM_TABLE.RESULT,CS_CONFIRM_TABLE.CONFIRM_STATUS,CS_CONFIRM_TABLE.REMARK,CS_CONFIRM_TABLE.INS_DATETIME,CS_CONFIRM_TABLE.PHANLOAI,CS_CONFIRM_TABLE.LINK,M100.PROD_TYPE,M100.PROD_MODEL,M100.PROD_PROJECT,M100.PROD_LAST_PRICE, (M100.PROD_LAST_PRICE*CS_CONFIRM_TABLE.REDUCE_QTY) AS REDUCE_AMOUNT, CS_CONFIRM_TABLE.CTR_CD
                      FROM CS_CONFIRM_TABLE
                      LEFT JOIN M010 ON (M010.EMPL_NO = CS_CONFIRM_TABLE.CS_EMPL_NO AND M010.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)
                      LEFT JOIN M100 ON (M100.G_CODE = CS_CONFIRM_TABLE.G_CODE AND M100.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)
                      LEFT JOIN M110 ON (M110.CUST_CD = CS_CONFIRM_TABLE.CUST_CD AND M110.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)
                  ${condition} AND CS_CONFIRM_TABLE.CTR_CD='${DATA.CTR_CD}'
            ),
            SA_DATA AS (
            SELECT CS_SPECIAL_APPROVE_TABLE.SA_ID, CS_SPECIAL_APPROVE_TABLE.SA_REQUEST_DATE, CS_SPECIAL_APPROVE_TABLE.CONTACT_ID, CS_SPECIAL_APPROVE_TABLE.CS_EMPL_NO,CS_SPECIAL_APPROVE_TABLE.G_CODE,M100.G_NAME, M110.CUST_NAME_KD, CS_SPECIAL_APPROVE_TABLE.PROD_REQUEST_NO, CS_SPECIAL_APPROVE_TABLE.REQUEST_DATETIME, CS_SPECIAL_APPROVE_TABLE.CONTENT, CS_SPECIAL_APPROVE_TABLE.SA_QTY, (CS_SPECIAL_APPROVE_TABLE.SA_QTY * M100.PROD_LAST_PRICE) AS SA_AMOUNT, CS_SPECIAL_APPROVE_TABLE.RESULT, CS_SPECIAL_APPROVE_TABLE.SA_STATUS, CS_SPECIAL_APPROVE_TABLE.SA_REMARK, CS_SPECIAL_APPROVE_TABLE.INS_DATETIME, SA_CUST_CD, CS_SPECIAL_APPROVE_TABLE.CTR_CD
                      FROM CS_SPECIAL_APPROVE_TABLE
                      LEFT JOIN M100 ON (M100.G_CODE = CS_SPECIAL_APPROVE_TABLE.G_CODE AND M100.CTR_CD = CS_SPECIAL_APPROVE_TABLE.CTR_CD)
                      LEFT JOIN M110 ON (M110.CUST_CD = CS_SPECIAL_APPROVE_TABLE.SA_CUST_CD AND M110.CTR_CD = CS_SPECIAL_APPROVE_TABLE.CTR_CD)
                 ${condition2} AND CS_SPECIAL_APPROVE_TABLE.CTR_CD='${DATA.CTR_CD}'
            ),
            REDUCE_TB AS
            (
            SELECT CONFIRM_DATE, SUM(REDUCE_AMOUNT) AS REDUCE_AMOUNT FROM CS_DATA GROUP BY CONFIRM_DATE
            ),
            SA_TB AS
            (
              SELECT SA_REQUEST_DATE, SUM(SA_AMOUNT) AS SA_AMOUNT FROM SA_DATA GROUP BY SA_REQUEST_DATE
            )
            SELECT DATETABLE.DATE_COLUMN AS CONFIRM_DATE, (isnull(REDUCE_TB.REDUCE_AMOUNT,0) + isnull(SA_TB.SA_AMOUNT,0)) AS REDUCE_AMOUNT FROM DATETABLE
            LEFT JOIN REDUCE_TB ON (DATETABLE.DATE_COLUMN = REDUCE_TB.CONFIRM_DATE)
            LEFT JOIN SA_TB ON (SA_TB.SA_REQUEST_DATE = DATETABLE.DATE_COLUMN)
            WHERE DATETABLE.DATE_COLUMN BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE} 23:59:59'
            ORDER BY DATETABLE.DATE_COLUMN DESC
            `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "csweeklyreduceamount":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = `WHERE PHANLOAI <>'' AND  CS_CONFIRM_TABLE.CONFIRM_DATE BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE} 23:59:59' `;
          if (DATA.codeArray.length === 1) {
            condition += ` AND CS_CONFIRM_TABLE.G_CODE='${DATA.codeArray[0]}'`
          }
          else if (DATA.codeArray.length > 1) {
            let codeString = ``;
            let codeArStr = DATA.codeArray.map((ele, index) => `'${ele}'`).join(",");
            condition += ` AND CS_CONFIRM_TABLE.G_CODE IN (${codeArStr})`;
          }
          let condition2 = ` WHERE RESULT = 'OK' AND  CS_SPECIAL_APPROVE_TABLE.SA_REQUEST_DATE BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE} 23:59:59' `
          if (DATA.codeArray.length === 1) {
            condition2 += ` AND CS_SPECIAL_APPROVE_TABLE.G_CODE='${DATA.codeArray[0]}'`
          }
          else if (DATA.codeArray.length > 1) {
            let codeString = ``;
            let codeArStr = DATA.codeArray.map((ele, index) => `'${ele}'`).join(",");
            condition2 += ` AND CS_SPECIAL_APPROVE_TABLE.G_CODE IN (${codeArStr})`;
          }
          if (DATA.CUST_NAME_KD !== '') {
            condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`
          }
          let setpdQuery = `
            WITH CS_DATA AS
            (
            SELECT CS_CONFIRM_TABLE.CONFIRM_ID,CS_CONFIRM_TABLE.CONFIRM_DATE,CS_CONFIRM_TABLE.CONTACT_ID,CS_CONFIRM_TABLE.CS_EMPL_NO,M010.EMPL_NAME,CS_CONFIRM_TABLE.G_CODE,M100.G_NAME,M100.G_NAME_KD,CS_CONFIRM_TABLE.PROD_REQUEST_NO,CS_CONFIRM_TABLE.CUST_CD,M110.CUST_NAME_KD,CS_CONFIRM_TABLE.CONTENT,CS_CONFIRM_TABLE.INSPECT_QTY,CS_CONFIRM_TABLE.NG_QTY,CS_CONFIRM_TABLE.REPLACE_RATE,CS_CONFIRM_TABLE.REDUCE_QTY,CS_CONFIRM_TABLE.FACTOR,CS_CONFIRM_TABLE.RESULT,CS_CONFIRM_TABLE.CONFIRM_STATUS,CS_CONFIRM_TABLE.REMARK,CS_CONFIRM_TABLE.INS_DATETIME,CS_CONFIRM_TABLE.PHANLOAI,CS_CONFIRM_TABLE.LINK,M100.PROD_TYPE,M100.PROD_MODEL,M100.PROD_PROJECT,M100.PROD_LAST_PRICE, (M100.PROD_LAST_PRICE*CS_CONFIRM_TABLE.REDUCE_QTY) AS REDUCE_AMOUNT, CS_CONFIRM_TABLE.CTR_CD
                      FROM CS_CONFIRM_TABLE
                      LEFT JOIN M010 ON (M010.EMPL_NO = CS_CONFIRM_TABLE.CS_EMPL_NO AND M010.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)
                      LEFT JOIN M100 ON (M100.G_CODE = CS_CONFIRM_TABLE.G_CODE AND M100.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)
                      LEFT JOIN M110 ON (M110.CUST_CD = CS_CONFIRM_TABLE.CUST_CD AND M110.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)
                  ${condition} AND CS_CONFIRM_TABLE.CTR_CD='${DATA.CTR_CD}'
            ),
            SA_DATA AS (
            SELECT CS_SPECIAL_APPROVE_TABLE.SA_ID, CS_SPECIAL_APPROVE_TABLE.SA_REQUEST_DATE, CS_SPECIAL_APPROVE_TABLE.CONTACT_ID, CS_SPECIAL_APPROVE_TABLE.CS_EMPL_NO,CS_SPECIAL_APPROVE_TABLE.G_CODE,M100.G_NAME, M110.CUST_NAME_KD, CS_SPECIAL_APPROVE_TABLE.PROD_REQUEST_NO, CS_SPECIAL_APPROVE_TABLE.REQUEST_DATETIME, CS_SPECIAL_APPROVE_TABLE.CONTENT, CS_SPECIAL_APPROVE_TABLE.SA_QTY, (CS_SPECIAL_APPROVE_TABLE.SA_QTY * M100.PROD_LAST_PRICE) AS SA_AMOUNT, CS_SPECIAL_APPROVE_TABLE.RESULT, CS_SPECIAL_APPROVE_TABLE.SA_STATUS, CS_SPECIAL_APPROVE_TABLE.SA_REMARK, CS_SPECIAL_APPROVE_TABLE.INS_DATETIME, SA_CUST_CD, CS_SPECIAL_APPROVE_TABLE.CTR_CD
                      FROM CS_SPECIAL_APPROVE_TABLE
                      LEFT JOIN M100 ON (M100.G_CODE = CS_SPECIAL_APPROVE_TABLE.G_CODE AND M100.CTR_CD = CS_SPECIAL_APPROVE_TABLE.CTR_CD)
                      LEFT JOIN M110 ON (M110.CUST_CD = CS_SPECIAL_APPROVE_TABLE.SA_CUST_CD AND M110.CTR_CD = CS_SPECIAL_APPROVE_TABLE.CTR_CD)
                 ${condition2} AND CS_SPECIAL_APPROVE_TABLE.CTR_CD='${DATA.CTR_CD}'
            ),
            REDUCE_TB AS
            (
            SELECT CONFIRM_DATE, SUM(REDUCE_AMOUNT) AS REDUCE_AMOUNT FROM CS_DATA GROUP BY CONFIRM_DATE
            ),
            SA_TB AS
            (
              SELECT SA_REQUEST_DATE, SUM(SA_AMOUNT) AS SA_AMOUNT FROM SA_DATA GROUP BY SA_REQUEST_DATE
            )
            SELECT YEAR(DATETABLE.DATE_COLUMN) AS CONFIRM_YEAR, DATEPART(ISO_WEEK, DATETABLE.DATE_COLUMN) AS CONFIRM_WEEK, CONCAT(YEAR(DATETABLE.DATE_COLUMN),'_', DATEPART(ISO_WEEK, DATETABLE.DATE_COLUMN)) AS CONFIRM_YW, SUM(isnull(REDUCE_TB.REDUCE_AMOUNT,0) + isnull(SA_TB.SA_AMOUNT,0)) AS REDUCE_AMOUNT 
            FROM DATETABLE
            LEFT JOIN REDUCE_TB ON (DATETABLE.DATE_COLUMN = REDUCE_TB.CONFIRM_DATE)
            LEFT JOIN SA_TB ON (SA_TB.SA_REQUEST_DATE = DATETABLE.DATE_COLUMN)
            WHERE DATETABLE.DATE_COLUMN BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE} 23:59:59' AND DATETABLE.CTR_CD='${DATA.CTR_CD}'      
            GROUP BY CONCAT(YEAR(DATETABLE.DATE_COLUMN),'_', DATEPART(ISO_WEEK, DATETABLE.DATE_COLUMN)), YEAR(DATETABLE.DATE_COLUMN), DATEPART(ISO_WEEK, DATETABLE.DATE_COLUMN)
            ORDER BY YEAR(DATETABLE.DATE_COLUMN) DESC, DATEPART(ISO_WEEK, DATETABLE.DATE_COLUMN) DESC
            `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "csmonthlyreduceamount":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = `WHERE PHANLOAI <>'' AND  CS_CONFIRM_TABLE.CONFIRM_DATE BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE} 23:59:59' `;
          if (DATA.codeArray.length === 1) {
            condition += ` AND CS_CONFIRM_TABLE.G_CODE='${DATA.codeArray[0]}'`
          }
          else if (DATA.codeArray.length > 1) {
            let codeString = ``;
            let codeArStr = DATA.codeArray.map((ele, index) => `'${ele}'`).join(",");
            condition += ` AND CS_CONFIRM_TABLE.G_CODE IN (${codeArStr})`;
          }
          let condition2 = ` WHERE RESULT = 'OK' AND  CS_SPECIAL_APPROVE_TABLE.SA_REQUEST_DATE BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE} 23:59:59' `
          if (DATA.codeArray.length === 1) {
            condition2 += ` AND CS_SPECIAL_APPROVE_TABLE.G_CODE='${DATA.codeArray[0]}'`
          }
          else if (DATA.codeArray.length > 1) {
            let codeString = ``;
            let codeArStr = DATA.codeArray.map((ele, index) => `'${ele}'`).join(",");
            condition2 += ` AND CS_SPECIAL_APPROVE_TABLE.G_CODE IN (${codeArStr})`;
          }
          if (DATA.CUST_NAME_KD !== '') {
            condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`
          }
          let setpdQuery = `
            WITH CS_DATA AS
            (
            SELECT CS_CONFIRM_TABLE.CONFIRM_ID,CS_CONFIRM_TABLE.CONFIRM_DATE,CS_CONFIRM_TABLE.CONTACT_ID,CS_CONFIRM_TABLE.CS_EMPL_NO,M010.EMPL_NAME,CS_CONFIRM_TABLE.G_CODE,M100.G_NAME,M100.G_NAME_KD,CS_CONFIRM_TABLE.PROD_REQUEST_NO,CS_CONFIRM_TABLE.CUST_CD,M110.CUST_NAME_KD,CS_CONFIRM_TABLE.CONTENT,CS_CONFIRM_TABLE.INSPECT_QTY,CS_CONFIRM_TABLE.NG_QTY,CS_CONFIRM_TABLE.REPLACE_RATE,CS_CONFIRM_TABLE.REDUCE_QTY,CS_CONFIRM_TABLE.FACTOR,CS_CONFIRM_TABLE.RESULT,CS_CONFIRM_TABLE.CONFIRM_STATUS,CS_CONFIRM_TABLE.REMARK,CS_CONFIRM_TABLE.INS_DATETIME,CS_CONFIRM_TABLE.PHANLOAI,CS_CONFIRM_TABLE.LINK,M100.PROD_TYPE,M100.PROD_MODEL,M100.PROD_PROJECT,M100.PROD_LAST_PRICE, (M100.PROD_LAST_PRICE*CS_CONFIRM_TABLE.REDUCE_QTY) AS REDUCE_AMOUNT, CS_CONFIRM_TABLE.CTR_CD
                      FROM CS_CONFIRM_TABLE
                      LEFT JOIN M010 ON (M010.EMPL_NO = CS_CONFIRM_TABLE.CS_EMPL_NO AND M010.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)
                      LEFT JOIN M100 ON (M100.G_CODE = CS_CONFIRM_TABLE.G_CODE AND M100.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)
                      LEFT JOIN M110 ON (M110.CUST_CD = CS_CONFIRM_TABLE.CUST_CD AND M110.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)
                  ${condition}
            ),
            SA_DATA AS (
            SELECT CS_SPECIAL_APPROVE_TABLE.SA_ID, CS_SPECIAL_APPROVE_TABLE.SA_REQUEST_DATE, CS_SPECIAL_APPROVE_TABLE.CONTACT_ID, CS_SPECIAL_APPROVE_TABLE.CS_EMPL_NO,CS_SPECIAL_APPROVE_TABLE.G_CODE,M100.G_NAME, M110.CUST_NAME_KD, CS_SPECIAL_APPROVE_TABLE.PROD_REQUEST_NO, CS_SPECIAL_APPROVE_TABLE.REQUEST_DATETIME, CS_SPECIAL_APPROVE_TABLE.CONTENT, CS_SPECIAL_APPROVE_TABLE.SA_QTY, (CS_SPECIAL_APPROVE_TABLE.SA_QTY * M100.PROD_LAST_PRICE) AS SA_AMOUNT, CS_SPECIAL_APPROVE_TABLE.RESULT, CS_SPECIAL_APPROVE_TABLE.SA_STATUS, CS_SPECIAL_APPROVE_TABLE.SA_REMARK, CS_SPECIAL_APPROVE_TABLE.INS_DATETIME, SA_CUST_CD, CS_SPECIAL_APPROVE_TABLE.CTR_CD
                      FROM CS_SPECIAL_APPROVE_TABLE
                      LEFT JOIN M100 ON (M100.G_CODE = CS_SPECIAL_APPROVE_TABLE.G_CODE AND M100.CTR_CD = CS_SPECIAL_APPROVE_TABLE.CTR_CD)
                      LEFT JOIN M110 ON (M110.CUST_CD = CS_SPECIAL_APPROVE_TABLE.SA_CUST_CD AND M110.CTR_CD = CS_SPECIAL_APPROVE_TABLE.CTR_CD)
                 ${condition2}
            ),
            REDUCE_TB AS
            (
            SELECT CONFIRM_DATE, SUM(REDUCE_AMOUNT) AS REDUCE_AMOUNT, CTR_CD FROM CS_DATA GROUP BY CONFIRM_DATE, CTR_CD
            ),
            SA_TB AS
            (
              SELECT SA_REQUEST_DATE, SUM(SA_AMOUNT) AS SA_AMOUNT, CTR_CD FROM SA_DATA GROUP BY SA_REQUEST_DATE, CTR_CD
            )
            SELECT YEAR(DATETABLE.DATE_COLUMN) AS CONFIRM_YEAR, MONTH(DATETABLE.DATE_COLUMN) AS CONFIRM_MONTH, CONCAT(YEAR(DATETABLE.DATE_COLUMN),'_', MONTH(DATETABLE.DATE_COLUMN)) AS CONFIRM_YM, SUM(isnull(REDUCE_TB.REDUCE_AMOUNT,0) + isnull(SA_TB.SA_AMOUNT,0)) AS REDUCE_AMOUNT 
            FROM DATETABLE
            LEFT JOIN REDUCE_TB ON (DATETABLE.DATE_COLUMN = REDUCE_TB.CONFIRM_DATE AND DATETABLE.CTR_CD = REDUCE_TB.CTR_CD)
            LEFT JOIN SA_TB ON (SA_TB.SA_REQUEST_DATE = DATETABLE.DATE_COLUMN AND DATETABLE.CTR_CD = SA_TB.CTR_CD)
            WHERE DATETABLE.DATE_COLUMN BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE} 23:59:59' AND DATETABLE.CTR_CD='${DATA.CTR_CD}'      
            GROUP BY CONCAT(YEAR(DATETABLE.DATE_COLUMN),'_', MONTH(DATETABLE.DATE_COLUMN)), YEAR(DATETABLE.DATE_COLUMN), MONTH(DATETABLE.DATE_COLUMN)
            ORDER BY YEAR(DATETABLE.DATE_COLUMN) DESC, MONTH(DATETABLE.DATE_COLUMN) DESC
            `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "csyearlyreduceamount":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = `WHERE PHANLOAI <>'' AND  CS_CONFIRM_TABLE.CONFIRM_DATE BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE} 23:59:59' `;
          if (DATA.codeArray.length === 1) {
            condition += ` AND CS_CONFIRM_TABLE.G_CODE='${DATA.codeArray[0]}'`
          }
          else if (DATA.codeArray.length > 1) {
            let codeString = ``;
            let codeArStr = DATA.codeArray.map((ele, index) => `'${ele}'`).join(",");
            condition += ` AND CS_CONFIRM_TABLE.G_CODE IN (${codeArStr})`;
          }
          let condition2 = ` WHERE RESULT = 'OK' AND  CS_SPECIAL_APPROVE_TABLE.SA_REQUEST_DATE BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE} 23:59:59' `
          if (DATA.codeArray.length === 1) {
            condition2 += ` AND CS_SPECIAL_APPROVE_TABLE.G_CODE='${DATA.codeArray[0]}'`
          }
          else if (DATA.codeArray.length > 1) {
            let codeString = ``;
            let codeArStr = DATA.codeArray.map((ele, index) => `'${ele}'`).join(",");
            condition2 += ` AND CS_SPECIAL_APPROVE_TABLE.G_CODE IN (${codeArStr})`;
          }
          if (DATA.CUST_NAME_KD !== '') {
            condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`
          }
          let setpdQuery = `
            WITH CS_DATA AS
            (
            SELECT CS_CONFIRM_TABLE.CONFIRM_ID,CS_CONFIRM_TABLE.CONFIRM_DATE,CS_CONFIRM_TABLE.CONTACT_ID,CS_CONFIRM_TABLE.CS_EMPL_NO,M010.EMPL_NAME,CS_CONFIRM_TABLE.G_CODE,M100.G_NAME,M100.G_NAME_KD,CS_CONFIRM_TABLE.PROD_REQUEST_NO,CS_CONFIRM_TABLE.CUST_CD,M110.CUST_NAME_KD,CS_CONFIRM_TABLE.CONTENT,CS_CONFIRM_TABLE.INSPECT_QTY,CS_CONFIRM_TABLE.NG_QTY,CS_CONFIRM_TABLE.REPLACE_RATE,CS_CONFIRM_TABLE.REDUCE_QTY,CS_CONFIRM_TABLE.FACTOR,CS_CONFIRM_TABLE.RESULT,CS_CONFIRM_TABLE.CONFIRM_STATUS,CS_CONFIRM_TABLE.REMARK,CS_CONFIRM_TABLE.INS_DATETIME,CS_CONFIRM_TABLE.PHANLOAI,CS_CONFIRM_TABLE.LINK,M100.PROD_TYPE,M100.PROD_MODEL,M100.PROD_PROJECT,M100.PROD_LAST_PRICE, (M100.PROD_LAST_PRICE*CS_CONFIRM_TABLE.REDUCE_QTY) AS REDUCE_AMOUNT, CS_CONFIRM_TABLE.CTR_CD
                      FROM CS_CONFIRM_TABLE
                      LEFT JOIN M010 ON (M010.EMPL_NO = CS_CONFIRM_TABLE.CS_EMPL_NO AND M010.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)
                      LEFT JOIN M100 ON (M100.G_CODE = CS_CONFIRM_TABLE.G_CODE AND M100.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)
                      LEFT JOIN M110 ON (M110.CUST_CD = CS_CONFIRM_TABLE.CUST_CD AND M110.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)
                  ${condition}
            ),
            SA_DATA AS (
            SELECT CS_SPECIAL_APPROVE_TABLE.SA_ID, CS_SPECIAL_APPROVE_TABLE.SA_REQUEST_DATE, CS_SPECIAL_APPROVE_TABLE.CONTACT_ID, CS_SPECIAL_APPROVE_TABLE.CS_EMPL_NO,CS_SPECIAL_APPROVE_TABLE.G_CODE,M100.G_NAME, M110.CUST_NAME_KD, CS_SPECIAL_APPROVE_TABLE.PROD_REQUEST_NO, CS_SPECIAL_APPROVE_TABLE.REQUEST_DATETIME, CS_SPECIAL_APPROVE_TABLE.CONTENT, CS_SPECIAL_APPROVE_TABLE.SA_QTY, (CS_SPECIAL_APPROVE_TABLE.SA_QTY * M100.PROD_LAST_PRICE) AS SA_AMOUNT, CS_SPECIAL_APPROVE_TABLE.RESULT, CS_SPECIAL_APPROVE_TABLE.SA_STATUS, CS_SPECIAL_APPROVE_TABLE.SA_REMARK, CS_SPECIAL_APPROVE_TABLE.INS_DATETIME, SA_CUST_CD, CS_SPECIAL_APPROVE_TABLE.CTR_CD
                      FROM CS_SPECIAL_APPROVE_TABLE
                      LEFT JOIN M100 ON (M100.G_CODE = CS_SPECIAL_APPROVE_TABLE.G_CODE AND M100.CTR_CD = CS_SPECIAL_APPROVE_TABLE.CTR_CD)
                      LEFT JOIN M110 ON (M110.CUST_CD = CS_SPECIAL_APPROVE_TABLE.SA_CUST_CD AND M110.CTR_CD = CS_SPECIAL_APPROVE_TABLE.CTR_CD)
                 ${condition2}
            ),
            REDUCE_TB AS
            (
            SELECT CONFIRM_DATE, SUM(REDUCE_AMOUNT) AS REDUCE_AMOUNT, CTR_CD FROM CS_DATA GROUP BY CONFIRM_DATE, CTR_CD
            ),
            SA_TB AS
            (
              SELECT SA_REQUEST_DATE, SUM(SA_AMOUNT) AS SA_AMOUNT, CTR_CD FROM SA_DATA GROUP BY SA_REQUEST_DATE, CTR_CD
            )
            SELECT YEAR(DATETABLE.DATE_COLUMN) AS CONFIRM_YEAR, SUM(isnull(REDUCE_TB.REDUCE_AMOUNT,0) + isnull(SA_TB.SA_AMOUNT,0)) AS REDUCE_AMOUNT 
            FROM DATETABLE
            LEFT JOIN REDUCE_TB ON (DATETABLE.DATE_COLUMN = REDUCE_TB.CONFIRM_DATE AND DATETABLE.CTR_CD = REDUCE_TB.CTR_CD)
            LEFT JOIN SA_TB ON (SA_TB.SA_REQUEST_DATE = DATETABLE.DATE_COLUMN AND DATETABLE.CTR_CD = SA_TB.CTR_CD)
            WHERE DATETABLE.DATE_COLUMN BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE} 23:59:59' AND DATETABLE.CTR_CD='${DATA.CTR_CD}'
            GROUP BY YEAR(DATETABLE.DATE_COLUMN)
            ORDER BY YEAR(DATETABLE.DATE_COLUMN) DESC
            `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "csdailyRMAAmount":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = `WHERE CS_RMA_TABLE.RETURN_DATE BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE} 23:59:59' `;
          if (DATA.codeArray.length === 1) {
            condition += ` AND CS_RMA_TABLE.G_CODE='${DATA.codeArray[0]}'`
          }
          else if (DATA.codeArray.length > 1) {
            let codeString = ``;
            let codeArStr = DATA.codeArray.map((ele, index) => `'${ele}'`).join(",");
            condition += ` AND CS_RMA_TABLE.G_CODE IN (${codeArStr})`;
          }
          if (DATA.CUST_NAME_KD !== '') {
            condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`
          }
          let setpdQuery = `
            WITH RMA_DATA AS
            (
            SELECT CS_RMA_TABLE.RMA_ID,CS_RMA_TABLE.CONFIRM_ID,M100.G_NAME_KD, CS_RMA_TABLE.RETURN_DATE,CS_RMA_TABLE.PROD_REQUEST_NO,CS_RMA_TABLE.G_CODE,CS_RMA_TABLE.RMA_TYPE,CS_RMA_TABLE.RMA_EMPL_NO,CS_RMA_TABLE.INS_DATETIME,CS_RMA_TABLE.FACTORY,CS_RMA_TABLE.RETURN_QTY,isnull(SORTING_TB.SORTING_OK_QTY,0) AS SORTING_OK_QTY,isnull(CS_RMA_TABLE.RETURN_QTY-SORTING_TB.SORTING_OK_QTY,0) AS SORTING_NG_QTY,isnull(DELIV_TB.RMA_DELIVERY_QTY,0) AS RMA_DELIVERY_QTY,
            isnull(DELIV_TB.RMA_DELIVERY_QTY,0)-isnull(SORTING_TB.SORTING_OK_QTY,0) AS RMA_QTY,
                      M100.PROD_LAST_PRICE, (M100.PROD_LAST_PRICE*CS_RMA_TABLE.RETURN_QTY) AS RETURN_AMOUNT,
                      (M100.PROD_LAST_PRICE*isnull(SORTING_TB.SORTING_OK_QTY,0)) AS SORTING_OK_AMOUNT,
                      (M100.PROD_LAST_PRICE*isnull(CS_RMA_TABLE.RETURN_QTY-SORTING_TB.SORTING_OK_QTY,0)) AS SORTING_NG_AMOUNT,
                  (isnull(DELIV_TB.RMA_DELIVERY_QTY,0)-isnull(SORTING_TB.SORTING_OK_QTY,0)) * M100.PROD_LAST_PRICE AS RMA_AMOUNT,          M100.G_NAME,M100.PROD_TYPE,M100.PROD_MODEL,CS_CONFIRM_TABLE.CONFIRM_DATE,CS_CONFIRM_TABLE.CS_EMPL_NO,CS_CONFIRM_TABLE.CONTENT,CS_CONFIRM_TABLE.INSPECT_QTY,CS_CONFIRM_TABLE.NG_QTY,CS_CONFIRM_TABLE.REPLACE_RATE,CS_CONFIRM_TABLE.REDUCE_QTY,CS_CONFIRM_TABLE.FACTOR,CS_CONFIRM_TABLE.RESULT,CS_CONFIRM_TABLE.CONFIRM_STATUS,CS_CONFIRM_TABLE.REMARK,CS_CONFIRM_TABLE.PHANLOAI,CS_CONFIRM_TABLE.LINK,M110.CUST_NAME_KD, CS_RMA_TABLE.CTR_CD
                      FROM CS_RMA_TABLE
                      LEFT JOIN (SELECT RMA_ID, SUM(SORTING_OK_QTY) AS SORTING_OK_QTY, CTR_CD FROM CS_SORTING_TABLE GROUP BY RMA_ID, CTR_CD) AS SORTING_TB ON (CS_RMA_TABLE.RMA_ID=SORTING_TB.RMA_ID AND CS_RMA_TABLE.CTR_CD=SORTING_TB.CTR_CD)
                      LEFT JOIN (SELECT RMA_ID, SUM(RMA_DELIVERY_QTY) AS RMA_DELIVERY_QTY, CTR_CD FROM CS_RMA_DELIVERY GROUP BY RMA_ID, CTR_CD) AS DELIV_TB ON (CS_RMA_TABLE.RMA_ID=DELIV_TB.RMA_ID AND CS_RMA_TABLE.CTR_CD=DELIV_TB.CTR_CD)
                      LEFT JOIN M100 ON (M100.G_CODE = CS_RMA_TABLE.G_CODE AND M100.CTR_CD = CS_RMA_TABLE.CTR_CD)
                      LEFT JOIN CS_CONFIRM_TABLE ON (CS_RMA_TABLE.CONFIRM_ID = CS_CONFIRM_TABLE.CONFIRM_ID AND CS_RMA_TABLE.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)
                      LEFT JOIN M110 ON (M110.CUST_CD = CS_CONFIRM_TABLE.CUST_CD AND M110.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)
                      ${condition} AND CS_RMA_TABLE.CTR_CD='${DATA.CTR_CD}'
            ),
            RMA_PVTB AS
            (
            SELECT pvtb.RETURN_DATE AS RT_DATE, CASE WHEN isnull(pvtb.HT,0) < 0 THEN  0 ELSE isnull(pvtb.HT,0) END AS HT, CASE WHEN isnull(pvtb.CD,0) < 0 THEN  0 ELSE isnull(pvtb.CD,0) END AS CD, CASE WHEN isnull(pvtb.MD,0) < 0 THEN  0 ELSE isnull(pvtb.MD,0) END AS MD, CTR_CD
            FROM 
            (SELECT RETURN_DATE, RMA_TYPE, RMA_AMOUNT, CTR_CD FROM RMA_DATA) AS src
            PIVOT 
            (
              SUM(RMA_AMOUNT) FOR RMA_TYPE IN ([HT],[CD],[MD])
            ) as pvtb
            ) 
            SELECT * FROM RMA_PVTB
            WHERE CTR_CD='${DATA.CTR_CD}'
            ORDER BY RT_DATE DESC
            `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "csweeklyRMAAmount":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = `WHERE CS_RMA_TABLE.RETURN_DATE BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE} 23:59:59' `;
          if (DATA.codeArray.length === 1) {
            condition += ` AND CS_RMA_TABLE.G_CODE='${DATA.codeArray[0]}'`
          }
          else if (DATA.codeArray.length > 1) {
            let codeString = ``;
            let codeArStr = DATA.codeArray.map((ele, index) => `'${ele}'`).join(",");
            condition += ` AND CS_RMA_TABLE.G_CODE IN (${codeArStr})`;
          }
          if (DATA.CUST_NAME_KD !== '') {
            condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`
          }
          let setpdQuery = `
            WITH RMA_DATA AS
            (
            SELECT CS_RMA_TABLE.RMA_ID,CS_RMA_TABLE.CONFIRM_ID,M100.G_NAME_KD, CS_RMA_TABLE.RETURN_DATE,CS_RMA_TABLE.PROD_REQUEST_NO,CS_RMA_TABLE.G_CODE,CS_RMA_TABLE.RMA_TYPE,CS_RMA_TABLE.RMA_EMPL_NO,CS_RMA_TABLE.INS_DATETIME,CS_RMA_TABLE.FACTORY,CS_RMA_TABLE.RETURN_QTY,isnull(SORTING_TB.SORTING_OK_QTY,0) AS SORTING_OK_QTY,isnull(CS_RMA_TABLE.RETURN_QTY-SORTING_TB.SORTING_OK_QTY,0) AS SORTING_NG_QTY,isnull(DELIV_TB.RMA_DELIVERY_QTY,0) AS RMA_DELIVERY_QTY,
            isnull(DELIV_TB.RMA_DELIVERY_QTY,0)-isnull(SORTING_TB.SORTING_OK_QTY,0) AS RMA_QTY,
                      M100.PROD_LAST_PRICE, (M100.PROD_LAST_PRICE*CS_RMA_TABLE.RETURN_QTY) AS RETURN_AMOUNT,
                      (M100.PROD_LAST_PRICE*isnull(SORTING_TB.SORTING_OK_QTY,0)) AS SORTING_OK_AMOUNT,
                      (M100.PROD_LAST_PRICE*isnull(CS_RMA_TABLE.RETURN_QTY-SORTING_TB.SORTING_OK_QTY,0)) AS SORTING_NG_AMOUNT,
                  (isnull(DELIV_TB.RMA_DELIVERY_QTY,0)-isnull(SORTING_TB.SORTING_OK_QTY,0)) * M100.PROD_LAST_PRICE AS RMA_AMOUNT,          M100.G_NAME,M100.PROD_TYPE,M100.PROD_MODEL,CS_CONFIRM_TABLE.CONFIRM_DATE,CS_CONFIRM_TABLE.CS_EMPL_NO,CS_CONFIRM_TABLE.CONTENT,CS_CONFIRM_TABLE.INSPECT_QTY,CS_CONFIRM_TABLE.NG_QTY,CS_CONFIRM_TABLE.REPLACE_RATE,CS_CONFIRM_TABLE.REDUCE_QTY,CS_CONFIRM_TABLE.FACTOR,CS_CONFIRM_TABLE.RESULT,CS_CONFIRM_TABLE.CONFIRM_STATUS,CS_CONFIRM_TABLE.REMARK,CS_CONFIRM_TABLE.PHANLOAI,CS_CONFIRM_TABLE.LINK,M110.CUST_NAME_KD, CS_RMA_TABLE.CTR_CD
                      FROM CS_RMA_TABLE
                      LEFT JOIN (SELECT RMA_ID, SUM(SORTING_OK_QTY) AS SORTING_OK_QTY, CTR_CD FROM CS_SORTING_TABLE GROUP BY RMA_ID, CTR_CD) AS SORTING_TB ON (CS_RMA_TABLE.RMA_ID=SORTING_TB.RMA_ID AND CS_RMA_TABLE.CTR_CD=SORTING_TB.CTR_CD)
                      LEFT JOIN (SELECT RMA_ID, SUM(RMA_DELIVERY_QTY) AS RMA_DELIVERY_QTY, CTR_CD FROM CS_RMA_DELIVERY GROUP BY RMA_ID, CTR_CD) AS DELIV_TB ON (CS_RMA_TABLE.RMA_ID=DELIV_TB.RMA_ID AND CS_RMA_TABLE.CTR_CD=DELIV_TB.CTR_CD)
                      LEFT JOIN M100 ON (M100.G_CODE = CS_RMA_TABLE.G_CODE AND M100.CTR_CD = CS_RMA_TABLE.CTR_CD)
                      LEFT JOIN CS_CONFIRM_TABLE ON (CS_RMA_TABLE.CONFIRM_ID = CS_CONFIRM_TABLE.CONFIRM_ID AND CS_RMA_TABLE.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)
                      LEFT JOIN M110 ON (M110.CUST_CD = CS_CONFIRM_TABLE.CUST_CD AND M110.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)
                      ${condition} AND CS_RMA_TABLE.CTR_CD='${DATA.CTR_CD}'
            ),
            RMA_PVTB AS
            (
            SELECT pvtb.RETURN_DATE AS RT_DATE, CASE WHEN isnull(pvtb.HT,0) < 0 THEN  0 ELSE isnull(pvtb.HT,0) END AS HT, CASE WHEN isnull(pvtb.CD,0) < 0 THEN  0 ELSE isnull(pvtb.CD,0) END AS CD, CASE WHEN isnull(pvtb.MD,0) < 0 THEN  0 ELSE isnull(pvtb.MD,0) END AS MD, CTR_CD
            FROM 
            (SELECT RETURN_DATE, RMA_TYPE, RMA_AMOUNT, CTR_CD FROM RMA_DATA) AS src
            PIVOT 
            (
              SUM(RMA_AMOUNT) FOR RMA_TYPE IN ([HT],[CD],[MD])
            ) as pvtb
            ) 
            SELECT CONCAT(YEAR(RT_DATE), '_',DATEPART(ISO_WEEK, RT_DATE)) AS RT_YW, YEAR(RT_DATE) AS RT_YEAR, DATEPART(ISO_WEEK, RT_DATE) AS RT_WEEK, SUM(HT) AS HT, SUM(MD) AS MD, SUM(CD) AS CD FROM RMA_PVTB
            WHERE CTR_CD='${DATA.CTR_CD}'
            GROUP BY YEAR(RT_DATE), DATEPART(ISO_WEEK, RT_DATE)
            ORDER BY YEAR(RT_DATE) DESC, DATEPART(ISO_WEEK, RT_DATE) DESC
            `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "csmonthlyRMAAmount":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = `WHERE CS_RMA_TABLE.RETURN_DATE BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE} 23:59:59' `;
          if (DATA.codeArray.length === 1) {
            condition += ` AND CS_RMA_TABLE.G_CODE='${DATA.codeArray[0]}'`
          }
          else if (DATA.codeArray.length > 1) {
            let codeString = ``;
            let codeArStr = DATA.codeArray.map((ele, index) => `'${ele}'`).join(",");
            condition += ` AND CS_RMA_TABLE.G_CODE IN (${codeArStr})`;
          }
          if (DATA.CUST_NAME_KD !== '') {
            condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`
          }
          let setpdQuery = `
            WITH RMA_DATA AS
            (
            SELECT CS_RMA_TABLE.RMA_ID,CS_RMA_TABLE.CONFIRM_ID,M100.G_NAME_KD, CS_RMA_TABLE.RETURN_DATE,CS_RMA_TABLE.PROD_REQUEST_NO,CS_RMA_TABLE.G_CODE,CS_RMA_TABLE.RMA_TYPE,CS_RMA_TABLE.RMA_EMPL_NO,CS_RMA_TABLE.INS_DATETIME,CS_RMA_TABLE.FACTORY,CS_RMA_TABLE.RETURN_QTY,isnull(SORTING_TB.SORTING_OK_QTY,0) AS SORTING_OK_QTY,isnull(CS_RMA_TABLE.RETURN_QTY-SORTING_TB.SORTING_OK_QTY,0) AS SORTING_NG_QTY,isnull(DELIV_TB.RMA_DELIVERY_QTY,0) AS RMA_DELIVERY_QTY,
            isnull(DELIV_TB.RMA_DELIVERY_QTY,0)-isnull(SORTING_TB.SORTING_OK_QTY,0) AS RMA_QTY,
                      M100.PROD_LAST_PRICE, (M100.PROD_LAST_PRICE*CS_RMA_TABLE.RETURN_QTY) AS RETURN_AMOUNT,
                      (M100.PROD_LAST_PRICE*isnull(SORTING_TB.SORTING_OK_QTY,0)) AS SORTING_OK_AMOUNT,
                      (M100.PROD_LAST_PRICE*isnull(CS_RMA_TABLE.RETURN_QTY-SORTING_TB.SORTING_OK_QTY,0)) AS SORTING_NG_AMOUNT,
                  (isnull(DELIV_TB.RMA_DELIVERY_QTY,0)-isnull(SORTING_TB.SORTING_OK_QTY,0)) * M100.PROD_LAST_PRICE AS RMA_AMOUNT,          M100.G_NAME,M100.PROD_TYPE,M100.PROD_MODEL,CS_CONFIRM_TABLE.CONFIRM_DATE,CS_CONFIRM_TABLE.CS_EMPL_NO,CS_CONFIRM_TABLE.CONTENT,CS_CONFIRM_TABLE.INSPECT_QTY,CS_CONFIRM_TABLE.NG_QTY,CS_CONFIRM_TABLE.REPLACE_RATE,CS_CONFIRM_TABLE.REDUCE_QTY,CS_CONFIRM_TABLE.FACTOR,CS_CONFIRM_TABLE.RESULT,CS_CONFIRM_TABLE.CONFIRM_STATUS,CS_CONFIRM_TABLE.REMARK,CS_CONFIRM_TABLE.PHANLOAI,CS_CONFIRM_TABLE.LINK,M110.CUST_NAME_KD, CS_RMA_TABLE.CTR_CD
                      FROM CS_RMA_TABLE
                      LEFT JOIN (SELECT RMA_ID, SUM(SORTING_OK_QTY) AS SORTING_OK_QTY, CTR_CD FROM CS_SORTING_TABLE GROUP BY RMA_ID, CTR_CD) AS SORTING_TB ON (CS_RMA_TABLE.RMA_ID=SORTING_TB.RMA_ID AND CS_RMA_TABLE.CTR_CD=SORTING_TB.CTR_CD)
                      LEFT JOIN (SELECT RMA_ID, SUM(RMA_DELIVERY_QTY) AS RMA_DELIVERY_QTY, CTR_CD FROM CS_RMA_DELIVERY GROUP BY RMA_ID, CTR_CD) AS DELIV_TB ON (CS_RMA_TABLE.RMA_ID=DELIV_TB.RMA_ID AND CS_RMA_TABLE.CTR_CD=DELIV_TB.CTR_CD)
                      LEFT JOIN M100 ON (M100.G_CODE = CS_RMA_TABLE.G_CODE AND M100.CTR_CD = CS_RMA_TABLE.CTR_CD)
                      LEFT JOIN CS_CONFIRM_TABLE ON (CS_RMA_TABLE.CONFIRM_ID = CS_CONFIRM_TABLE.CONFIRM_ID AND CS_RMA_TABLE.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)
                      LEFT JOIN M110 ON (M110.CUST_CD = CS_CONFIRM_TABLE.CUST_CD AND M110.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)
                      ${condition} AND CS_RMA_TABLE.CTR_CD='${DATA.CTR_CD}'
            ),
            RMA_PVTB AS
            (
            SELECT pvtb.RETURN_DATE AS RT_DATE, CASE WHEN isnull(pvtb.HT,0) < 0 THEN  0 ELSE isnull(pvtb.HT,0) END AS HT, CASE WHEN isnull(pvtb.CD,0) < 0 THEN  0 ELSE isnull(pvtb.CD,0) END AS CD, CASE WHEN isnull(pvtb.MD,0) < 0 THEN  0 ELSE isnull(pvtb.MD,0) END AS MD, CTR_CD
            FROM 
            (SELECT RETURN_DATE, RMA_TYPE, RMA_AMOUNT, CTR_CD FROM RMA_DATA) AS src
            PIVOT 
            (
              SUM(RMA_AMOUNT) FOR RMA_TYPE IN ([HT],[CD],[MD])
            ) as pvtb
            ) 
            SELECT CONCAT(YEAR(RT_DATE), '_',MONTH(RT_DATE)) AS RT_YM, YEAR(RT_DATE) AS RT_YEAR, MONTH(RT_DATE) AS RT_MONTH, SUM(HT) AS HT, SUM(MD) AS MD, SUM(CD) AS CD FROM RMA_PVTB
            WHERE CTR_CD='${DATA.CTR_CD}'
            GROUP BY YEAR(RT_DATE), MONTH(RT_DATE)
            ORDER BY YEAR(RT_DATE) DESC, MONTH(RT_DATE) DESC
            `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "csyearlyRMAAmount":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = `WHERE CS_RMA_TABLE.RETURN_DATE BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE} 23:59:59' `;
          if (DATA.codeArray.length === 1) {
            condition += ` AND CS_RMA_TABLE.G_CODE='${DATA.codeArray[0]}'`
          }
          else if (DATA.codeArray.length > 1) {
            let codeString = ``;
            let codeArStr = DATA.codeArray.map((ele, index) => `'${ele}'`).join(",");
            condition += ` AND CS_RMA_TABLE.G_CODE IN (${codeArStr})`;
          }
          if (DATA.CUST_NAME_KD !== '') {
            condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`
          }
          let setpdQuery = `
            WITH RMA_DATA AS
            (
            SELECT CS_RMA_TABLE.RMA_ID,CS_RMA_TABLE.CONFIRM_ID,M100.G_NAME_KD, CS_RMA_TABLE.RETURN_DATE,CS_RMA_TABLE.PROD_REQUEST_NO,CS_RMA_TABLE.G_CODE,CS_RMA_TABLE.RMA_TYPE,CS_RMA_TABLE.RMA_EMPL_NO,CS_RMA_TABLE.INS_DATETIME,CS_RMA_TABLE.FACTORY,CS_RMA_TABLE.RETURN_QTY,isnull(SORTING_TB.SORTING_OK_QTY,0) AS SORTING_OK_QTY,isnull(CS_RMA_TABLE.RETURN_QTY-SORTING_TB.SORTING_OK_QTY,0) AS SORTING_NG_QTY,isnull(DELIV_TB.RMA_DELIVERY_QTY,0) AS RMA_DELIVERY_QTY,
            isnull(DELIV_TB.RMA_DELIVERY_QTY,0)-isnull(SORTING_TB.SORTING_OK_QTY,0) AS RMA_QTY,
                      M100.PROD_LAST_PRICE, (M100.PROD_LAST_PRICE*CS_RMA_TABLE.RETURN_QTY) AS RETURN_AMOUNT,
                      (M100.PROD_LAST_PRICE*isnull(SORTING_TB.SORTING_OK_QTY,0)) AS SORTING_OK_AMOUNT,
                      (M100.PROD_LAST_PRICE*isnull(CS_RMA_TABLE.RETURN_QTY-SORTING_TB.SORTING_OK_QTY,0)) AS SORTING_NG_AMOUNT,
                  (isnull(DELIV_TB.RMA_DELIVERY_QTY,0)-isnull(SORTING_TB.SORTING_OK_QTY,0)) * M100.PROD_LAST_PRICE AS RMA_AMOUNT,          M100.G_NAME,M100.PROD_TYPE,M100.PROD_MODEL,CS_CONFIRM_TABLE.CONFIRM_DATE,CS_CONFIRM_TABLE.CS_EMPL_NO,CS_CONFIRM_TABLE.CONTENT,CS_CONFIRM_TABLE.INSPECT_QTY,CS_CONFIRM_TABLE.NG_QTY,CS_CONFIRM_TABLE.REPLACE_RATE,CS_CONFIRM_TABLE.REDUCE_QTY,CS_CONFIRM_TABLE.FACTOR,CS_CONFIRM_TABLE.RESULT,CS_CONFIRM_TABLE.CONFIRM_STATUS,CS_CONFIRM_TABLE.REMARK,CS_CONFIRM_TABLE.PHANLOAI,CS_CONFIRM_TABLE.LINK,M110.CUST_NAME_KD, CS_RMA_TABLE.CTR_CD
                      FROM CS_RMA_TABLE
                      LEFT JOIN (SELECT RMA_ID, SUM(SORTING_OK_QTY) AS SORTING_OK_QTY, CTR_CD FROM CS_SORTING_TABLE GROUP BY RMA_ID, CTR_CD) AS SORTING_TB ON (CS_RMA_TABLE.RMA_ID=SORTING_TB.RMA_ID AND CS_RMA_TABLE.CTR_CD=SORTING_TB.CTR_CD)
                      LEFT JOIN (SELECT RMA_ID, SUM(RMA_DELIVERY_QTY) AS RMA_DELIVERY_QTY, CTR_CD FROM CS_RMA_DELIVERY GROUP BY RMA_ID, CTR_CD) AS DELIV_TB ON (CS_RMA_TABLE.RMA_ID=DELIV_TB.RMA_ID AND CS_RMA_TABLE.CTR_CD=DELIV_TB.CTR_CD)
                      LEFT JOIN M100 ON (M100.G_CODE = CS_RMA_TABLE.G_CODE AND M100.CTR_CD = CS_RMA_TABLE.CTR_CD)
                      LEFT JOIN CS_CONFIRM_TABLE ON (CS_RMA_TABLE.CONFIRM_ID = CS_CONFIRM_TABLE.CONFIRM_ID AND CS_RMA_TABLE.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)
                      LEFT JOIN M110 ON (M110.CUST_CD = CS_CONFIRM_TABLE.CUST_CD AND M110.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)
                      ${condition} AND CS_RMA_TABLE.CTR_CD='${DATA.CTR_CD}'
            ),
            RMA_PVTB AS
            (
            SELECT pvtb.RETURN_DATE AS RT_DATE, CASE WHEN isnull(pvtb.HT,0) < 0 THEN  0 ELSE isnull(pvtb.HT,0) END AS HT, CASE WHEN isnull(pvtb.CD,0) < 0 THEN  0 ELSE isnull(pvtb.CD,0) END AS CD, CASE WHEN isnull(pvtb.MD,0) < 0 THEN  0 ELSE isnull(pvtb.MD,0) END AS MD, CTR_CD
            FROM 
            (SELECT RETURN_DATE, RMA_TYPE, RMA_AMOUNT, CTR_CD FROM RMA_DATA) AS src
            PIVOT 
            (
              SUM(RMA_AMOUNT) FOR RMA_TYPE IN ([HT],[CD],[MD])
            ) as pvtb
            ) 
            SELECT YEAR(RT_DATE) AS RT_YEAR, SUM(HT) AS HT, SUM(MD) AS MD, SUM(CD) AS CD FROM RMA_PVTB
            WHERE CTR_CD='${DATA.CTR_CD}'
            GROUP BY YEAR(RT_DATE)
            ORDER BY YEAR(RT_DATE) DESC
            `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "csdailyTaxiAmount":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
            WITH TAXI_DATA  AS
            (
            SELECT CS_TAXI_TABLE.TAXI_ID, CS_TAXI_TABLE.CONFIRM_ID, CS_TAXI_TABLE.SA_ID, CS_TAXI_TABLE.CHIEU, CS_TAXI_TABLE.CONG_VIEC, CS_TAXI_TABLE.TAXI_DATE, CS_TAXI_TABLE.TAXI_SHIFT, CS_TAXI_TABLE.CS_EMPL_NO, M110.CUST_NAME_KD AS DIEM_DI, M110_A.CUST_NAME_KD AS DIEM_DEN, CS_TAXI_TABLE.TAXI_AMOUNT, CS_TAXI_TABLE.TRANSPORTATION, CS_TAXI_TABLE.TAXI_REMARK, CS_TAXI_TABLE.INS_DATETIME, CS_TAXI_TABLE.CTR_CD  FROM CS_TAXI_TABLE
            LEFT JOIN M110 ON M110.CUST_CD = CS_TAXI_TABLE.DEPARTURE AND M110.CTR_CD = CS_TAXI_TABLE.CTR_CD
            LEFT JOIN (SELECT * FROM  M110) AS M110_A ON M110_A.CUST_CD = CS_TAXI_TABLE.ARRIVAL AND M110_A.CTR_CD = CS_TAXI_TABLE.CTR_CD
            )
            SELECT DATETABLE.DATE_COLUMN AS TAXI_DATE, SUM(isnull(TAXI_DATA.TAXI_AMOUNT,0))*1.0/23100 AS TAXI_AMOUNT  FROM DATETABLE 
            LEFT JOIN TAXI_DATA ON DATETABLE.DATE_COLUMN = TAXI_DATA.TAXI_DATE
            WHERE  DATETABLE.DATE_COLUMN BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE} 23:59:59'
              AND DATETABLE.CTR_CD='${DATA.CTR_CD}'
            GROUP BY DATETABLE.DATE_COLUMN
            ORDER BY DATETABLE.DATE_COLUMN DESC
            `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "csweeklyTaxiAmount":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
            WITH TAXI_DATA  AS
            (
            SELECT CS_TAXI_TABLE.TAXI_ID, CS_TAXI_TABLE.CONFIRM_ID, CS_TAXI_TABLE.SA_ID, CS_TAXI_TABLE.CHIEU, CS_TAXI_TABLE.CONG_VIEC, CS_TAXI_TABLE.TAXI_DATE, CS_TAXI_TABLE.TAXI_SHIFT, CS_TAXI_TABLE.CS_EMPL_NO, M110.CUST_NAME_KD AS DIEM_DI, M110_A.CUST_NAME_KD AS DIEM_DEN, CS_TAXI_TABLE.TAXI_AMOUNT, CS_TAXI_TABLE.TRANSPORTATION, CS_TAXI_TABLE.TAXI_REMARK, CS_TAXI_TABLE.INS_DATETIME, CS_TAXI_TABLE.CTR_CD  FROM CS_TAXI_TABLE
                      LEFT JOIN M110 ON M110.CUST_CD = CS_TAXI_TABLE.DEPARTURE AND M110.CTR_CD = CS_TAXI_TABLE.CTR_CD
                      LEFT JOIN (SELECT * FROM  M110) AS M110_A ON M110_A.CUST_CD = CS_TAXI_TABLE.ARRIVAL AND M110_A.CTR_CD = CS_TAXI_TABLE.CTR_CD
            )
            SELECT CONCAT(YEAR(DATETABLE.DATE_COLUMN),'_', DATEPART(ISO_WEEK, DATETABLE.DATE_COLUMN)) AS TAXI_YW, YEAR(DATETABLE.DATE_COLUMN) AS TAXI_YEAR,DATEPART(ISO_WEEK, DATETABLE.DATE_COLUMN) AS TAXI_WEEK,   SUM(isnull(TAXI_DATA.TAXI_AMOUNT,0))*1.0/23100 AS TAXI_AMOUNT  FROM DATETABLE 
            LEFT JOIN TAXI_DATA ON DATETABLE.DATE_COLUMN = TAXI_DATA.TAXI_DATE AND DATETABLE.CTR_CD = TAXI_DATA.CTR_CD
            WHERE  DATETABLE.DATE_COLUMN BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE} 23:59:59'
              AND DATETABLE.CTR_CD='${DATA.CTR_CD}'
            GROUP BY CONCAT(YEAR(DATETABLE.DATE_COLUMN),'_', DATEPART(ISO_WEEK, DATETABLE.DATE_COLUMN)), YEAR(DATETABLE.DATE_COLUMN) ,DATEPART(ISO_WEEK, DATETABLE.DATE_COLUMN)
            ORDER BY YEAR(DATETABLE.DATE_COLUMN) DESC ,DATEPART(ISO_WEEK, DATETABLE.DATE_COLUMN) DESC
            `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "csmonthlyTaxiAmount":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
            WITH TAXI_DATA  AS
            (
            SELECT CS_TAXI_TABLE.TAXI_ID, CS_TAXI_TABLE.CONFIRM_ID, CS_TAXI_TABLE.SA_ID, CS_TAXI_TABLE.CHIEU, CS_TAXI_TABLE.CONG_VIEC, CS_TAXI_TABLE.TAXI_DATE, CS_TAXI_TABLE.TAXI_SHIFT, CS_TAXI_TABLE.CS_EMPL_NO, M110.CUST_NAME_KD AS DIEM_DI, M110_A.CUST_NAME_KD AS DIEM_DEN, CS_TAXI_TABLE.TAXI_AMOUNT, CS_TAXI_TABLE.TRANSPORTATION, CS_TAXI_TABLE.TAXI_REMARK,CS_TAXI_TABLE.INS_DATETIME, CS_TAXI_TABLE.CTR_CD  FROM CS_TAXI_TABLE
                      LEFT JOIN M110 ON M110.CUST_CD = CS_TAXI_TABLE.DEPARTURE AND M110.CTR_CD = CS_TAXI_TABLE.CTR_CD
                      LEFT JOIN (SELECT * FROM  M110) AS M110_A ON M110_A.CUST_CD = CS_TAXI_TABLE.ARRIVAL AND M110_A.CTR_CD = CS_TAXI_TABLE.CTR_CD
            )
            SELECT CONCAT(YEAR(DATETABLE.DATE_COLUMN),'_', MONTH(DATETABLE.DATE_COLUMN)) AS TAXI_YM, YEAR(DATETABLE.DATE_COLUMN) AS TAXI_YEAR,MONTH(DATETABLE.DATE_COLUMN) AS TAXI_MONTH,   SUM(isnull(TAXI_DATA.TAXI_AMOUNT,0))*1.0/23100 AS TAXI_AMOUNT  FROM DATETABLE 
            LEFT JOIN TAXI_DATA ON DATETABLE.DATE_COLUMN = TAXI_DATA.TAXI_DATE AND DATETABLE.CTR_CD = TAXI_DATA.CTR_CD
            WHERE  DATETABLE.DATE_COLUMN BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE} 23:59:59'
              AND DATETABLE.CTR_CD='${DATA.CTR_CD}'
            GROUP BY CONCAT(YEAR(DATETABLE.DATE_COLUMN),'_', MONTH(DATETABLE.DATE_COLUMN)), YEAR(DATETABLE.DATE_COLUMN) ,MONTH(DATETABLE.DATE_COLUMN)
            ORDER BY YEAR(DATETABLE.DATE_COLUMN) DESC, MONTH(DATETABLE.DATE_COLUMN) DESC
            `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "csyearlyTaxiAmount":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
            WITH TAXI_DATA  AS
            (
            SELECT CS_TAXI_TABLE.TAXI_ID, CS_TAXI_TABLE.CONFIRM_ID, CS_TAXI_TABLE.SA_ID, CS_TAXI_TABLE.CHIEU, CS_TAXI_TABLE.CONG_VIEC, CS_TAXI_TABLE.TAXI_DATE, CS_TAXI_TABLE.TAXI_SHIFT, CS_TAXI_TABLE.CS_EMPL_NO, M110.CUST_NAME_KD AS DIEM_DI, M110_A.CUST_NAME_KD AS DIEM_DEN, CS_TAXI_TABLE.TAXI_AMOUNT, CS_TAXI_TABLE.TRANSPORTATION, CS_TAXI_TABLE.TAXI_REMARK,CS_TAXI_TABLE.INS_DATETIME, CS_TAXI_TABLE.CTR_CD  FROM CS_TAXI_TABLE
                      LEFT JOIN M110 ON M110.CUST_CD = CS_TAXI_TABLE.DEPARTURE AND M110.CTR_CD = CS_TAXI_TABLE.CTR_CD
                      LEFT JOIN (SELECT * FROM  M110) AS M110_A ON M110_A.CUST_CD = CS_TAXI_TABLE.ARRIVAL AND M110_A.CTR_CD = CS_TAXI_TABLE.CTR_CD
            )
            SELECT YEAR(DATETABLE.DATE_COLUMN) AS TAXI_YEAR, SUM(isnull(TAXI_DATA.TAXI_AMOUNT,0))*1.0/23100 AS TAXI_AMOUNT  FROM DATETABLE 
            LEFT JOIN TAXI_DATA ON DATETABLE.DATE_COLUMN = TAXI_DATA.TAXI_DATE AND DATETABLE.CTR_CD = TAXI_DATA.CTR_CD
            WHERE  DATETABLE.DATE_COLUMN BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE} 23:59:59'
              AND DATETABLE.CTR_CD='${DATA.CTR_CD}'
            GROUP BY YEAR(DATETABLE.DATE_COLUMN)
            ORDER BY YEAR(DATETABLE.DATE_COLUMN) DESC
            `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "updatenndspqc":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
            UPDATE ZTBPQC3TABLE SET NG_NHAN=N'${DATA.NG_NHAN}', DOI_SACH=N'${DATA.DOI_SACH}' WHERE CTR_CD='${DATA.CTR_CD}' AND  PQC3_ID=${DATA.PQC3_ID}
            `;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "updatenndscs":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
            UPDATE CS_CONFIRM_TABLE SET NG_NHAN=N'${DATA.NG_NHAN}', DOI_SACH=N'${DATA.DOI_SACH}' WHERE CTR_CD='${DATA.CTR_CD}' AND CONFIRM_ID=${DATA.CONFIRM_ID}
            `;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "updateCSImageStatus":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
            UPDATE CS_CONFIRM_TABLE SET LINK='Y' WHERE CTR_CD='${DATA.CTR_CD}' AND CONFIRM_ID=${DATA.CONFIRM_ID}
            `;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "updateTDSStatus":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
            UPDATE ZTB_MATERIAL_TB SET TDS='Y' WHERE CTR_CD='${DATA.CTR_CD}' AND M_ID=${DATA.M_ID}
            `;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "updateCSDoiSachVNStatus":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
            UPDATE CS_CONFIRM_TABLE SET DS_VN='Y' WHERE CTR_CD='${DATA.CTR_CD}' AND CONFIRM_ID=${DATA.CONFIRM_ID}
            `;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "updateCSDoiSachKRStatus":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
            UPDATE CS_CONFIRM_TABLE SET DS_KR='Y' WHERE CTR_CD='${DATA.CTR_CD}' AND  CONFIRM_ID=${DATA.CONFIRM_ID}
            `;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "loadMonthlyRevenueByCustomer":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
          DECLARE @StartDate DATE = '${DATA.FROM_DATE}'; -- Thay đổi start date tại đây
          DECLARE @EndDate DATE = '${DATA.TO_DATE}'; -- Thay đổi end date tại đây
          DECLARE @CurrentDate DATE = @StartDate;
          DECLARE @str1 VARCHAR(MAX) = '';
          WHILE @CurrentDate <= @EndDate
          BEGIN
              SET  @str1 =  @str1 + 'ISNULL([' + FORMAT(@CurrentDate, 'yyyy_MM') + '],0) + ';
              SET @CurrentDate = DATEADD(MONTH, 1, @CurrentDate);
          END
          -- Xóa dấu phẩy cuối cùng
          SET  @str1 = LEFT( @str1, LEN( @str1) - 1);
          SET @CurrentDate = @StartDate;
          DECLARE @str2 VARCHAR(MAX) = '';
          WHILE @CurrentDate <= @EndDate
          BEGIN
              SET  @str2 =  @str2 + 'ISNULL([' + FORMAT(@CurrentDate, 'yyyy_MM') + '],0) AS [' + FORMAT(@CurrentDate, 'yyyy_MM') + '], ';
              SET @CurrentDate = DATEADD(MONTH, 1, @CurrentDate);
          END
          -- Xóa dấu phẩy cuối cùng
          SET  @str2 = LEFT( @str2, LEN( @str2) - 1);
          SET @CurrentDate = @StartDate;
          DECLARE @str3 VARCHAR(MAX) = '';
          WHILE @CurrentDate <= @EndDate
          BEGIN
              SET  @str3 =  @str3 + '[' + FORMAT(@CurrentDate, 'yyyy_MM')+'], ';
              SET @CurrentDate = DATEADD(MONTH, 1, @CurrentDate);
          END
          -- Xóa dấu phẩy cuối cùng
          SET  @str3 = LEFT( @str3, LEN( @str3) - 1);
          SET @CurrentDate = @StartDate;
          DECLARE @str4 VARCHAR(MAX) = '';
          WHILE @CurrentDate <= @EndDate
          BEGIN
              SET  @str4 =  @str4 + 'B5.[' + FORMAT(@CurrentDate, 'yyyy_MM')+'], ';
              SET @CurrentDate = DATEADD(MONTH, 1, @CurrentDate);
          END
          -- Xóa dấu phẩy cuối cùng
          SET  @str4 = LEFT( @str4, LEN( @str4) - 1);
          SET @CurrentDate = @StartDate;
          DECLARE @str5 VARCHAR(MAX) = '';
          WHILE @CurrentDate <= @EndDate
          BEGIN
              SET  @str5 =  @str5 + 'B6.[' + FORMAT(@CurrentDate, 'yyyy_MM')+'] AS [' + FORMAT(@CurrentDate, 'yyyy_MM')+'_QTY], ';
              SET @CurrentDate = DATEADD(MONTH, 1, @CurrentDate);
          END
          -- Xóa dấu phẩy cuối cùng
          SET  @str5 = LEFT( @str5, LEN( @str5) - 1);
          declare @query varchar(max) 
          select 
          @query = '
          WITH ZTBDLVR AS 
          (
          SELECT M110.CUST_NAME_KD, ZTBDelivery.DELIVERY_DATE, ZTBDelivery.DELIVERY_QTY, ZTBDelivery.DELIVERY_QTY * ZTBPOTable.PROD_PRICE AS DELIVERED_AMOUNT, ZTBDelivery.CTR_CD	
          FROM ZTBDelivery 
          LEFT JOIN ZTBPOTable ON (ZTBPOTable.CUST_CD = ZTBDelivery.CUST_CD AND ZTBPOTable.PO_NO = ZTBDelivery.PO_NO AND ZTBPOTable.G_CODE = ZTBDelivery.G_CODE AND ZTBPOTable.CTR_CD = ZTBDelivery.CTR_CD)	
          LEFT JOIN M110 ON (M110.CUST_CD = ZTBDelivery.CUST_CD AND M110.CTR_CD = ZTBDelivery.CTR_CD)
          ),
          DL2TB AS
          (
          SELECT CUST_NAME_KD, CONCAT(YEAR(DELIVERY_DATE),''_'', FORMAT(DELIVERY_DATE,''MM'')) AS DL_YM, YEAR(DELIVERY_DATE) AS DL_YEAR, FORMAT(DELIVERY_DATE,''MM'') AS DL_MONTH, DELIVERED_AMOUNT, DELIVERY_QTY, CTR_CD FROM ZTBDLVR
          ), 
          B1 as
          (
            SELECT pvtb.CUST_NAME_KD, (+ ' + @str1 + ') AS TOTAL, '+ @str2 +' FROM 
            (
            SELECT CUST_NAME_KD, DL_YM, DELIVERED_AMOUNT, CTR_CD FROM DL2TB)
            AS src
            PIVOT
            (
            SUM(DELIVERED_AMOUNT) FOR DL_YM IN ('+@str3+')
            ) as pvtb
            WHERE (' +@str1+') <> 0 AND pvtb.CTR_CD=''${DATA.CTR_CD}''
          ),
          B2 as
          (
            SELECT ''TOTAL'' AS CUST_NAME_KD, (+ ' + @str1 + ') AS TOTAL, '+ @str2 +' FROM 
            (
            SELECT DL_YM, DELIVERED_AMOUNT, CTR_CD FROM DL2TB)
            AS src
            PIVOT
            (
            SUM(DELIVERED_AMOUNT) FOR DL_YM IN ('+@str3+')
            ) as pvtb
            WHERE (' +@str1+') <> 0 AND pvtb.CTR_CD=''${DATA.CTR_CD}''
          ), 
          B3 as
          (
          SELECT pvtb.CUST_NAME_KD, ('+ @str1 +' ) AS TOTAL, '+ @str2 +' FROM 
          (
          SELECT CUST_NAME_KD, DL_YM, DELIVERY_QTY, CTR_CD FROM DL2TB)
          AS src
          PIVOT
          (
          SUM(DELIVERY_QTY) FOR DL_YM IN ('+@str3+')
          ) as pvtb
          WHERE  (' +@str1+') <> 0 AND pvtb.CTR_CD=''${DATA.CTR_CD}''
          ),
          B4 as
          (
          SELECT ''TOTAL'' AS CUST_NAME_KD, ('+ @str1 +') AS TOTAL, '+ @str2 +' FROM 
          (
          SELECT DL_YM, DELIVERY_QTY, CTR_CD FROM DL2TB)
          AS src
          PIVOT
          (
          SUM(DELIVERY_QTY) FOR DL_YM IN ('+@str3+')
          ) as pvtb
          WHERE  (' +@str1+') <> 0 AND pvtb.CTR_CD=''${DATA.CTR_CD}''
          ),
          B5 AS (SELECT * FROM B2 UNION ALL SELECT * FROM B1),
          B6 AS (SELECT * FROM B4 UNION ALL SELECT * FROM B3)
          SELECT B5.CUST_NAME_KD, B5.TOTAL AS TOTAL_AMOUNT, '+@str4+', B6.TOTAL AS TOTAL_QTY, '+@str5+'  FROM B5 LEFT JOIN B6 ON (B5.CUST_NAME_KD = B6.CUST_NAME_KD)
          ORDER BY B5.TOTAL DESC
          '
          print(@query)
          execute(@query)
            `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "loadRNRchitiet":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = `WHERE  SUBDEPTNAME is not null  `
          if (DATA.ALLTIME === false) {
            condition += ` AND ZTB_RNR_TEST.TEST_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE}'`;
          }
          if (DATA.EMPL_NAME !== '') {
            condition += ` AND CONCAT(ZTBEMPLINFO.MIDLAST_NAME,' ',ZTBEMPLINFO.FIRST_NAME) LIKE N'%${DATA.EMPL_NAME}%'`
          }
          if (DATA.FACTORY !== 'ALL') {
            condition += ` AND CASE WHEN ZTBEMPLINFO.FACTORY_CODE=1 THEN 'NM1' ELSE 'NM2' END='${DATA.FACTORY}'`
          }
          if (DATA.TEST_TYPE !== 'ALL') {
            condition += ` AND ZTB_RNR_TEST.TEST_TYPE='${DATA.TEST_TYPE}'`
          }
          if (DATA.TEST_ID !== '') {
            condition += ` AND ZTB_RNR_TEST.TEST_ID='${DATA.TEST_ID}'`
          }
          let setpdQuery = `
            SELECT ZTB_RNR_TEST.TEST_DATE, ZTB_RNR_TEST.TEST_ID, ZTB_RNR_TEST.TEST_NO, ZTB_RNR_TEST.TEST_TYPE, CASE WHEN ZTBEMPLINFO.FACTORY_CODE=1 THEN 'NM1' ELSE 'NM2' END AS FACTORY, CONCAT(ZTBEMPLINFO.MIDLAST_NAME,' ',ZTBEMPLINFO.FIRST_NAME) AS FULL_NAME, ZTBSUBDEPARTMENT.SUBDEPTNAME, ZTB_RNR_TEST.TEST_EMPL_NO, 
            ZTB_RNR_TEST.UPD_DATE, ZTB_RNR_TEST.UPD_EMPL, ZTB_RNR_TEST.TEST_NUMBER, ZTB_RNR_RESULT.TEST_NUMBER2, ZTB_RNR_RESULT.RESULT_OK_NG, ZTB_RNR_RESULT.RESULT_DETAIL, ZTB_RNR_TEST.TEST_RESULT1, ZTB_RNR_TEST.TEST_REUST2, CASE WHEN TEST_RESULT1 <> ZTB_RNR_RESULT.RESULT_OK_NG AND SUBSTRING(RESULT_DETAIL,1,2) ='NG' THEN 1 ELSE 0 END AS MIX1, CASE WHEN TEST_REUST2 <> ZTB_RNR_RESULT.RESULT_OK_NG AND SUBSTRING(RESULT_DETAIL,1,2) ='NG' THEN 1 ELSE 0 END AS MIX2,  CASE WHEN TEST_RESULT1 <> ZTB_RNR_RESULT.RESULT_OK_NG AND SUBSTRING(RESULT_DETAIL,1,2) ='OK' THEN 1 ELSE 0 END AS BAT_NHAM1,  CASE WHEN TEST_RESULT1 <> ZTB_RNR_RESULT.RESULT_OK_NG AND SUBSTRING(RESULT_DETAIL,1,2) ='NG' THEN 1 ELSE 0 END AS BO_SOT1,CASE WHEN TEST_REUST2 <> ZTB_RNR_RESULT.RESULT_OK_NG AND SUBSTRING(RESULT_DETAIL,1,2) ='OK' THEN 1 ELSE 0 END AS BAT_NHAM2, CASE WHEN TEST_REUST2 <> ZTB_RNR_RESULT.RESULT_OK_NG AND SUBSTRING(RESULT_DETAIL,1,2) ='NG' THEN 1 ELSE 0 END AS BO_SOT2, ZTB_RNR_TEST.CTR_CD
            FROM 
            ZTB_RNR_TEST LEFT JOIN
            ZTB_RNR_RESULT ON ZTB_RNR_RESULT.TEST_ID = ZTB_RNR_TEST.TEST_ID AND ZTB_RNR_RESULT.TEST_NUMBER = ZTB_RNR_TEST.TEST_NUMBER AND ZTB_RNR_RESULT.TEST_NO = ZTB_RNR_TEST.TEST_NO AND ZTB_RNR_RESULT.CTR_CD = ZTB_RNR_TEST.CTR_CD
            LEFT JOIN ZTBEMPLINFO ON ZTB_RNR_TEST.TEST_EMPL_NO = ZTBEMPLINFO.EMPL_NO AND ZTB_RNR_TEST.CTR_CD = ZTBEMPLINFO.CTR_CD
            LEFT JOIN ZTBWORKPOSITION ON ZTBEMPLINFO.WORK_POSITION_CODE = ZTBWORKPOSITION.WORK_POSITION_CODE AND ZTBEMPLINFO.CTR_CD = ZTBWORKPOSITION.CTR_CD
            LEFT JOIN ZTBSUBDEPARTMENT ON ZTBWORKPOSITION.SUBDEPTCODE = ZTBSUBDEPARTMENT.SUBDEPTCODE AND ZTBWORKPOSITION.CTR_CD = ZTBSUBDEPARTMENT.CTR_CD
            ${condition}
            AND ZTB_RNR_TEST.CTR_CD='${DATA.CTR_CD}'
            ORDER BY ZTB_RNR_TEST.TEST_ID DESC, ZTB_RNR_TEST.TEST_EMPL_NO DESC,  ZTB_RNR_TEST.TEST_NUMBER ASC
          `;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "RnRtheonhanvien":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = `WHERE SUBDEPTNAME is not null  `
          if (DATA.ALLTIME === false) {
            condition += ` AND ZTB_RNR_TEST.TEST_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE}'`;
          }
          if (DATA.EMPL_NAME !== '') {
            condition += ` AND CONCAT(ZTBEMPLINFO.MIDLAST_NAME,' ',ZTBEMPLINFO.FIRST_NAME) LIKE N'%${DATA.EMPL_NAME}%'`
          }
          if (DATA.FACTORY !== 'ALL') {
            condition += ` AND CASE WHEN ZTBEMPLINFO.FACTORY_CODE=1 THEN 'NM1' ELSE 'NM2' END='${DATA.FACTORY}'`
          }
          if (DATA.TEST_TYPE !== 'ALL') {
            condition += ` AND ZTB_RNR_TEST.TEST_TYPE='${DATA.TEST_TYPE}'`
          }
          if (DATA.TEST_ID !== '') {
            condition += ` AND ZTB_RNR_TEST.TEST_ID='${DATA.TEST_ID}'`
          }
          let setpdQuery = `
          WITH RNR_DATA AS
          (
          SELECT ZTB_RNR_TEST.TEST_DATE, ZTB_RNR_TEST.TEST_ID, ZTB_RNR_TEST.TEST_NO, ZTB_RNR_TEST.TEST_TYPE, CASE WHEN ZTBEMPLINFO.FACTORY_CODE=1 THEN 'NM1' ELSE 'NM2' END AS FACTORY, CONCAT(ZTBEMPLINFO.MIDLAST_NAME,' ',ZTBEMPLINFO.FIRST_NAME) AS FULL_NAME, ZTBSUBDEPARTMENT.SUBDEPTNAME, ZTB_RNR_TEST.TEST_EMPL_NO, 
          ZTB_RNR_TEST.UPD_DATE, ZTB_RNR_TEST.UPD_EMPL, ZTB_RNR_TEST.TEST_NUMBER, ZTB_RNR_RESULT.TEST_NUMBER2, ZTB_RNR_RESULT.RESULT_OK_NG, ZTB_RNR_RESULT.RESULT_DETAIL, ZTB_RNR_TEST.TEST_RESULT1, ZTB_RNR_TEST.TEST_REUST2, CASE WHEN TEST_RESULT1 <> ZTB_RNR_RESULT.RESULT_OK_NG AND SUBSTRING(RESULT_DETAIL,1,2) ='NG' THEN 1 ELSE 0 END AS MIX1, CASE WHEN TEST_REUST2 <> ZTB_RNR_RESULT.RESULT_OK_NG AND SUBSTRING(RESULT_DETAIL,1,2) ='NG' THEN 1 ELSE 0 END AS MIX2,  CASE WHEN TEST_RESULT1 <> ZTB_RNR_RESULT.RESULT_OK_NG AND SUBSTRING(RESULT_DETAIL,1,2) ='OK' THEN 1 ELSE 0 END AS BAT_NHAM1,  CASE WHEN TEST_RESULT1 <> ZTB_RNR_RESULT.RESULT_OK_NG AND SUBSTRING(RESULT_DETAIL,1,2) ='NG' THEN 1 ELSE 0 END AS BO_SOT1,CASE WHEN TEST_REUST2 <> ZTB_RNR_RESULT.RESULT_OK_NG AND SUBSTRING(RESULT_DETAIL,1,2) ='OK' THEN 1 ELSE 0 END AS BAT_NHAM2, CASE WHEN TEST_REUST2 <> ZTB_RNR_RESULT.RESULT_OK_NG AND SUBSTRING(RESULT_DETAIL,1,2) ='NG' THEN 1 ELSE 0 END AS BO_SOT2, ZTB_RNR_TEST.CTR_CD
          FROM 
          ZTB_RNR_TEST LEFT JOIN
          ZTB_RNR_RESULT ON ZTB_RNR_RESULT.TEST_ID = ZTB_RNR_TEST.TEST_ID AND ZTB_RNR_RESULT.TEST_NUMBER = ZTB_RNR_TEST.TEST_NUMBER AND ZTB_RNR_RESULT.TEST_NO = ZTB_RNR_TEST.TEST_NO AND ZTB_RNR_RESULT.CTR_CD = ZTB_RNR_TEST.CTR_CD
          LEFT JOIN ZTBEMPLINFO ON ZTB_RNR_TEST.TEST_EMPL_NO = ZTBEMPLINFO.EMPL_NO AND ZTB_RNR_TEST.CTR_CD = ZTBEMPLINFO.CTR_CD
          LEFT JOIN ZTBWORKPOSITION ON ZTBEMPLINFO.WORK_POSITION_CODE = ZTBWORKPOSITION.WORK_POSITION_CODE AND ZTBEMPLINFO.CTR_CD = ZTBWORKPOSITION.CTR_CD
          LEFT JOIN ZTBSUBDEPARTMENT ON ZTBWORKPOSITION.SUBDEPTCODE = ZTBSUBDEPARTMENT.SUBDEPTCODE AND ZTBWORKPOSITION.CTR_CD = ZTBSUBDEPARTMENT.CTR_CD
          ${condition}
          AND ZTB_RNR_TEST.CTR_CD='${DATA.CTR_CD}'
          )
          SELECT FULL_NAME, SUBDEPTNAME, TEST_ID, TEST_TYPE, TEST_NO, SUM(CASE WHEN TEST_RESULT1 = RESULT_OK_NG THEN 1 ELSE 0 END) AS COUNT1, SUM(CASE WHEN TEST_REUST2 = RESULT_OK_NG THEN 1 ELSE 0 END) AS COUNT2, CASE WHEN TEST_TYPE='G_RNR' THEN 20 WHEN TEST_TYPE='Test_CC' THEN 30 ELSE 10 END AS SO_CAU, SUM(CASE WHEN TEST_RESULT1 = RESULT_OK_NG THEN 1 ELSE 0 END)*1.0/(CASE WHEN TEST_TYPE='G_RNR' THEN 20 WHEN TEST_TYPE='Test_CC' THEN 30 ELSE 10 END)*100 AS SCORE1,SUM(CASE WHEN TEST_REUST2 = RESULT_OK_NG THEN 1 ELSE 0 END)*1.0/(CASE WHEN TEST_TYPE='G_RNR' THEN 20 WHEN TEST_TYPE='Test_CC' THEN 30 ELSE 10 END)*100 AS SCORE2, SUM(MIX1) AS MIX1, SUM(MIX2) AS MIX2, SUM(BAT_NHAM1) AS BAT_NHAM1, SUM(BAT_NHAM2) AS BAT_NHAM2, SUM(BO_SOT1) AS BO_SOT1, SUM(BO_SOT2) AS BO_SOT2, CTR_CD
          FROM RNR_DATA
          WHERE CTR_CD='${DATA.CTR_CD}'
          GROUP BY FULL_NAME, SUBDEPTNAME, TEST_ID,TEST_TYPE, TEST_NO, CTR_CD
          ORDER BY  FULL_NAME ASC,TEST_ID DESC, TEST_NO ASC 
          `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "auditlistcheck":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
          SELECT  AUDIT_INFO_TABLE.AUDIT_ID, AUDIT_INFO_TABLE.AUDIT_NAME, M110.CUST_NAME_KD, AUDIT_INFO_TABLE.PASS_SCORE FROM  
          AUDIT_INFO_TABLE LEFT OUTER JOIN M110 ON M110.CUST_CD = AUDIT_INFO_TABLE.CUST_CD AND M110.CTR_CD = AUDIT_INFO_TABLE.CTR_CD
          WHERE AUDIT_INFO_TABLE.CTR_CD='${DATA.CTR_CD}'
          `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "createNewAudit":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
          INSERT INTO AUDIT_RESULT_TABLE (CTR_CD, AUDIT_ID, AUDIT_NAME, AUDIT_DATE, REMARK, INS_DATE, INS_EMPL) VALUES ('${DATA.CTR_CD}',${DATA.AUDIT_ID},'${DATA.AUDIT_NAME}','${moment().format('YYYY-MM-DD')}','',GETDATE(),'${EMPL_NO}')
          `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "loadAuditResultList":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
          SELECT        AUDIT_RESULT_TABLE.AUDIT_RESULT_ID, AUDIT_INFO_TABLE.AUDIT_ID, AUDIT_INFO_TABLE.AUDIT_NAME, AUDIT_RESULT_TABLE.AUDIT_DATE, AUDIT_RESULT_TABLE.REMARK, AUDIT_INFO_TABLE.INS_DATE,
           AUDIT_INFO_TABLE.INS_EMPL, AUDIT_INFO_TABLE.UPD_DATE, AUDIT_INFO_TABLE.UPD_EMPL
 FROM            AUDIT_RESULT_TABLE  LEFT JOIN
           AUDIT_INFO_TABLE ON AUDIT_INFO_TABLE.AUDIT_ID = AUDIT_RESULT_TABLE.AUDIT_ID AND AUDIT_INFO_TABLE.CTR_CD = AUDIT_RESULT_TABLE.CTR_CD
           WHERE AUDIT_RESULT_TABLE.AUDIT_ID=${DATA.AUDIT_ID} AND AUDIT_RESULT_TABLE.CTR_CD='${DATA.CTR_CD}'
          `;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "loadAuditResultCheckList":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
          SELECT AUDIT_RESULT_DETAIL.AUDIT_RESULT_DETAIL_ID, AUDIT_RESULT_DETAIL.AUDIT_RESULT_ID, AUDIT_DETAIL_TABLE.AUDIT_DETAIL_ID, AUDIT_DETAIL_TABLE.AUDIT_ID, AUDIT_INFO_TABLE.AUDIT_NAME, AUDIT_DETAIL_TABLE.MAIN_ITEM_NO, AUDIT_DETAIL_TABLE.MAIN_ITEM_CONTENT, 
          AUDIT_DETAIL_TABLE.SUB_ITEM_NO, AUDIT_DETAIL_TABLE.SUB_ITEM_CONTENT, AUDIT_DETAIL_TABLE.LEVEL_CAT, AUDIT_DETAIL_TABLE.DETAIL_VN, AUDIT_DETAIL_TABLE.DETAIL_KR, 
          AUDIT_DETAIL_TABLE.DETAIL_EN, AUDIT_DETAIL_TABLE.MAX_SCORE,  AUDIT_RESULT_DETAIL.AUDIT_SCORE,AUDIT_RESULT_DETAIL.AUDIT_EVIDENT,AUDIT_RESULT_DETAIL.REMARK, AUDIT_DETAIL_TABLE.DEPARTMENT,
          AUDIT_DETAIL_TABLE.INS_DATE, AUDIT_DETAIL_TABLE.INS_EMPL, AUDIT_DETAIL_TABLE.UPD_DATE, AUDIT_DETAIL_TABLE.UPD_EMPL
          FROM AUDIT_DETAIL_TABLE 
          LEFT JOIN AUDIT_INFO_TABLE ON  AUDIT_DETAIL_TABLE.AUDIT_ID = AUDIT_INFO_TABLE.AUDIT_ID AND AUDIT_DETAIL_TABLE.CTR_CD = AUDIT_INFO_TABLE.CTR_CD
          LEFT JOIN AUDIT_RESULT_DETAIL ON  AUDIT_DETAIL_TABLE.AUDIT_ID = AUDIT_RESULT_DETAIL.AUDIT_ID AND AUDIT_DETAIL_TABLE.MAIN_ITEM_NO = AUDIT_RESULT_DETAIL.MAIN_ITEM_NO AND AUDIT_DETAIL_TABLE.SUB_ITEM_NO = AUDIT_RESULT_DETAIL.SUB_ITEM_NO AND AUDIT_DETAIL_TABLE.CTR_CD = AUDIT_RESULT_DETAIL.CTR_CD
          WHERE AUDIT_RESULT_DETAIL.AUDIT_RESULT_ID = ${DATA.AUDIT_RESULT_ID} AND AUDIT_DETAIL_TABLE.CTR_CD='${DATA.CTR_CD}'
          `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "checkAuditResultCheckListExist":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
          SELECT TOP 1 AUDIT_RESULT_DETAIL.AUDIT_RESULT_ID FROM AUDIT_RESULT_DETAIL  WHERE CTR_CD='${DATA.CTR_CD}' AND AUDIT_RESULT_DETAIL.AUDIT_RESULT_ID = ${DATA.AUDIT_RESULT_ID}
          `;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "insertResultIDtoCheckList":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
          INSERT INTO AUDIT_RESULT_DETAIL 
          (CTR_CD,AUDIT_RESULT_ID, AUDIT_ID, MAIN_ITEM_NO, SUB_ITEM_NO, INS_DATE,INS_EMPL)
          SELECT '${DATA.CTR_CD}' AS CTR_CD,${DATA.AUDIT_RESULT_ID} AS AUDIT_RESULT_ID,  AUDIT_ID, MAIN_ITEM_NO,SUB_ITEM_NO, GETDATE() AS INS_DATE, 'NHU1903' AS INS_EMPL FROM AUDIT_DETAIL_TABLE
          WHERE AUDIT_ID=${DATA.AUDIT_ID}          
          `;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "updateEvident":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
          UPDATE AUDIT_RESULT_DETAIL SET AUDIT_EVIDENT=N'${DATA.AUDIT_EVIDENT}' WHERE CTR_CD='${DATA.CTR_CD}' AND AUDIT_RESULT_DETAIL_ID=${DATA.AUDIT_RESULT_DETAIL_ID}
          `;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "updatechecksheetResultRow":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
          UPDATE AUDIT_RESULT_DETAIL SET REMARK=N'${DATA.REMARK}',AUDIT_SCORE=${DATA.AUDIT_SCORE}, UPD_DATE=GETDATE(), UPD_EMPL='${EMPL_NO}' WHERE CTR_CD='${DATA.CTR_CD}' AND  AUDIT_RESULT_DETAIL_ID=${DATA.AUDIT_RESULT_DETAIL_ID}
          `;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "resetEvident":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
          UPDATE AUDIT_RESULT_DETAIL SET AUDIT_EVIDENT=null WHERE  CTR_CD='${DATA.CTR_CD}' AND AUDIT_RESULT_DETAIL_ID=${DATA.AUDIT_RESULT_DETAIL_ID}
          `;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "insertNewAuditInfo":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
          INSERT INTO AUDIT_INFO_TABLE (CTR_CD, AUDIT_NAME, CUST_CD, PASS_SCORE, INS_DATE, INS_EMPL) VALUES ('${DATA.CTR_CD}',N'${DATA.AUDIT_NAME}', '${DATA.CUST_CD}', ${DATA.PASS_SCORE},GETDATE(), '${EMPL_NO}')
          `;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "insertCheckSheetData":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
          INSERT INTO AUDIT_DETAIL_TABLE (CTR_CD, AUDIT_ID, MAIN_ITEM_NO, MAIN_ITEM_CONTENT, SUB_ITEM_NO, SUB_ITEM_CONTENT,LEVEL_CAT, DETAIL_VN, DETAIL_KR, DETAIL_EN, MAX_SCORE, DEPARTMENT, INS_DATE, INS_EMPL) VALUES ('${DATA.CTR_CD}',${DATA.AUDIT_ID},${DATA.MAIN_ITEM_NO},N'${DATA.MAIN_ITEM_CONTENT}',${DATA.SUB_ITEM_NO},N'${DATA.SUB_ITEM_CONTENT}',N'${DATA.LEVEL_CAT}',N'${DATA.DETAIL_VN}',N'${DATA.DETAIL_KR}',N'${DATA.DETAIL_EN}',${DATA.MAX_SCORE},N'${DATA.DEPARTMENT}',GETDATE(),'${EMPL_NO}')
          `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "checkAuditNamebyCustomer":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
          SELECT * FROM AUDIT_INFO_TABLE WHERE  CTR_CD='${DATA.CTR_CD}' AND AUDIT_NAME =N'${DATA.AUDIT_NAME}' AND CUST_CD='${DATA.CUST_CD}'
          `;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "checklastAuditID":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
          SELECT MAX(AUDIT_ID) AS MAX_AUDIT_ID FROM AUDIT_INFO_TABLE WHERE  CTR_CD='${DATA.CTR_CD}'
          `;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "addbangiaodaofilmtailieu":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
           INSERT INTO KNIFE_FILM (CTR_CD,FACTORY_NAME, NGAYBANGIAO, G_CODE, LOAIBANGIAO_PDP, LOAIPHATHANH, SOLUONG, SOLUONGOHP, LYDOBANGIAO, PQC_EMPL_NO, RND_EMPL_NO, SX_EMPL_NO, REMARK, MA_DAO, CUST_CD, G_WIDTH, G_LENGTH, KNIFE_TYPE) VALUES ('${DATA.CTR_CD}','${DATA.FACTORY}','${DATA.NGAYBANGIAO}','${DATA.G_CODE}','${DATA.LOAIBANGIAO_PDP}','${DATA.LOAIPHATHANH}','${DATA.SOLUONG}','${DATA.SOLUONGOHP}','${DATA.LYDOBANGIAO}','${DATA.PQC_EMPL_NO}','${DATA.RND_EMPL_NO}','${DATA.SX_EMPL_NO}',N'${DATA.REMARK}','${DATA.MA_DAO}','${DATA.CUST_CD}',${DATA.G_WIDTH},${DATA.G_LENGTH},'${DATA.KNIFE_TYPE}')
          `;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "dailyoverduedata":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
          DECLARE @D_P int;
          set @D_P =${DATA.D_PLUS};
          WITH DLVRDATA AS
          (
          SELECT  ZTBDelivery.DELIVERY_ID, ZTBDelivery.CUST_CD,M110.CUST_NAME_KD,ZTBDelivery.EMPL_NO,M010.EMPL_NAME,ZTBDelivery.G_CODE,M100.G_NAME,M100.G_NAME_KD,ZTBPOTable.PO_ID, ZTBDelivery.PO_NO,ZTBPOTable.PO_DATE, ZTBPOTable.RD_DATE, DATEDIFF(day, ZTBPOTable.PO_DATE,ZTBPOTable.RD_DATE) AS D_PLUS, ZTBDelivery.DELIVERY_DATE,ZTBDelivery.DELIVERY_QTY,isnull(ZTBPOTable.BEP,0) AS BEP, ZTBPOTable.PROD_PRICE,  (ZTBDelivery.DELIVERY_QTY*ZTBPOTable.PROD_PRICE) AS DELIVERED_AMOUNT,(isnull(ZTBPOTable.BEP,0)*ZTBPOTable.PROD_PRICE) AS DELIVERED_BEP_AMOUNT ,ZTBDelivery.REMARK,ZTBDelivery.INVOICE_NO,M100.PROD_MAIN_MATERIAL,M100.PROD_TYPE,M100.PROD_MODEL,M100.PROD_PROJECT, DATEPART(YEAR,DELIVERY_DATE) AS YEARNUM,DATEPART(ISOWK,DELIVERY_DATE) AS WEEKNUM,CASE WHEN ZTBPOTable.RD_DATE < ZTBDelivery.DELIVERY_DATE THEN 'OVER' ELSE 'OK' END AS OVERDUE, ZTBDelivery.CTR_CD
                    FROM ZTBDelivery
                    LEFT JOIN M110 ON (M110.CUST_CD = ZTBDelivery.CUST_CD AND M110.CTR_CD = ZTBDelivery.CTR_CD)
                    LEFT JOIN M010 ON (M010.EMPL_NO = ZTBDelivery.EMPL_NO AND M010.CTR_CD = ZTBDelivery.CTR_CD)
                    LEFT JOIN M100 ON (M100.G_CODE = ZTBDelivery.G_CODE AND M100.CTR_CD = ZTBDelivery.CTR_CD)
                    LEFT JOIN ZTBPOTable ON (ZTBDelivery.PO_NO = ZTBPOTable.PO_NO AND ZTBDelivery.G_CODE = ZTBPOTable.G_CODE AND ZTBDelivery.CUST_CD = ZTBPOTable.CUST_CD AND ZTBDelivery.CTR_CD = ZTBPOTable.CTR_CD)
                    WHERE ZTBDelivery.DELIVERY_DATE BETWEEN '${DATA.START_DATE}' AND '${DATA.END_DATE}' AND ZTBDelivery.CTR_CD='${DATA.CTR_CD}'
          )
          SELECT DELIVERY_DATE, COUNT (DELIVERY_ID) AS TOTAL_IV, COUNT (CASE WHEN OVERDUE = 'OK' OR D_PLUS <=@D_P THEN 1 ELSE null END) AS OK_IV, COUNT (CASE WHEN OVERDUE = 'OVER'  AND D_PLUS>@D_P THEN 1 ELSE null END) AS OVER_IV FROM DLVRDATA GROUP BY DELIVERY_DATE ORDER BY DELIVERY_DATE DESC
          `;
          ///console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "weeklyoverduedata":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
          DECLARE @D_P int;
          set @D_P =${DATA.D_PLUS};
          WITH DLVRDATA AS
          (
          SELECT  ZTBDelivery.DELIVERY_ID, ZTBDelivery.CUST_CD,M110.CUST_NAME_KD,ZTBDelivery.EMPL_NO,M010.EMPL_NAME,ZTBDelivery.G_CODE,M100.G_NAME,M100.G_NAME_KD,ZTBPOTable.PO_ID, ZTBDelivery.PO_NO,ZTBPOTable.PO_DATE, ZTBPOTable.RD_DATE,DATEDIFF(day, ZTBPOTable.PO_DATE,ZTBPOTable.RD_DATE) AS D_PLUS, ZTBDelivery.DELIVERY_DATE,ZTBDelivery.DELIVERY_QTY,isnull(ZTBPOTable.BEP,0) AS BEP, ZTBPOTable.PROD_PRICE,  (ZTBDelivery.DELIVERY_QTY*ZTBPOTable.PROD_PRICE) AS DELIVERED_AMOUNT,(isnull(ZTBPOTable.BEP,0)*ZTBPOTable.PROD_PRICE) AS DELIVERED_BEP_AMOUNT ,ZTBDelivery.REMARK,ZTBDelivery.INVOICE_NO,M100.PROD_MAIN_MATERIAL,M100.PROD_TYPE,M100.PROD_MODEL,M100.PROD_PROJECT, DATEPART(YEAR,DELIVERY_DATE) AS YEARNUM,DATEPART(ISOWK,DELIVERY_DATE) AS WEEKNUM,CASE WHEN ZTBPOTable.RD_DATE < ZTBDelivery.DELIVERY_DATE THEN 'OVER' ELSE 'OK' END AS OVERDUE, ZTBDelivery.CTR_CD
                    FROM ZTBDelivery
                    LEFT JOIN M110 ON (M110.CUST_CD = ZTBDelivery.CUST_CD AND M110.CTR_CD = ZTBDelivery.CTR_CD)
                    LEFT JOIN M010 ON (M010.EMPL_NO = ZTBDelivery.EMPL_NO AND M010.CTR_CD = ZTBDelivery.CTR_CD)
                    LEFT JOIN M100 ON (M100.G_CODE = ZTBDelivery.G_CODE AND M100.CTR_CD = ZTBDelivery.CTR_CD)
                    LEFT JOIN ZTBPOTable ON (ZTBDelivery.PO_NO = ZTBPOTable.PO_NO AND ZTBDelivery.G_CODE = ZTBPOTable.G_CODE AND ZTBDelivery.CUST_CD = ZTBPOTable.CUST_CD AND ZTBDelivery.CTR_CD = ZTBPOTable.CTR_CD)
                    WHERE ZTBDelivery.DELIVERY_DATE BETWEEN '${DATA.START_DATE}' AND '${DATA.END_DATE}' AND ZTBDelivery.CTR_CD='${DATA.CTR_CD}'
          )
          SELECT CONCAT(YEARNUM,'_', WEEKNUM) AS DEL_YW,YEARNUM, WEEKNUM, COUNT (DELIVERY_ID) AS TOTAL_IV, COUNT (CASE WHEN (OVERDUE = 'OK' OR D_PLUS<=@D_P) THEN 1 ELSE null END) AS OK_IV, COUNT (CASE WHEN OVERDUE = 'OVER' AND D_PLUS>@D_P THEN 1 ELSE null END) AS OVER_IV FROM DLVRDATA GROUP BY CONCAT(YEARNUM,'_', WEEKNUM), YEARNUM ,WEEKNUM ORDER BY YEARNUM DESC,WEEKNUM DESC
          `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "monthlyoverduedata":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
          DECLARE @D_P int;
          set @D_P =${DATA.D_PLUS};
          WITH DLVRDATA AS
          (
          SELECT  ZTBDelivery.DELIVERY_ID, ZTBDelivery.CUST_CD,M110.CUST_NAME_KD,ZTBDelivery.EMPL_NO,M010.EMPL_NAME,ZTBDelivery.G_CODE,M100.G_NAME,M100.G_NAME_KD,ZTBPOTable.PO_ID, ZTBDelivery.PO_NO,ZTBPOTable.PO_DATE, ZTBPOTable.RD_DATE,DATEDIFF(day, ZTBPOTable.PO_DATE,ZTBPOTable.RD_DATE) AS D_PLUS, ZTBDelivery.DELIVERY_DATE,ZTBDelivery.DELIVERY_QTY,isnull(ZTBPOTable.BEP,0) AS BEP, ZTBPOTable.PROD_PRICE,  (ZTBDelivery.DELIVERY_QTY*ZTBPOTable.PROD_PRICE) AS DELIVERED_AMOUNT,(isnull(ZTBPOTable.BEP,0)*ZTBPOTable.PROD_PRICE) AS DELIVERED_BEP_AMOUNT ,ZTBDelivery.REMARK,ZTBDelivery.INVOICE_NO,M100.PROD_MAIN_MATERIAL,M100.PROD_TYPE,M100.PROD_MODEL,M100.PROD_PROJECT, DATEPART(YEAR,DELIVERY_DATE) AS YEARNUM,DATEPART(ISOWK,DELIVERY_DATE) AS WEEKNUM,DATEPART(MONTH,DELIVERY_DATE) AS MONTHNUM, CASE WHEN ZTBPOTable.RD_DATE < ZTBDelivery.DELIVERY_DATE THEN 'OVER' ELSE 'OK' END AS OVERDUE, ZTBDelivery.CTR_CD
                    FROM ZTBDelivery
                    LEFT JOIN M110 ON (M110.CUST_CD = ZTBDelivery.CUST_CD AND M110.CTR_CD = ZTBDelivery.CTR_CD)
                    LEFT JOIN M010 ON (M010.EMPL_NO = ZTBDelivery.EMPL_NO AND M010.CTR_CD = ZTBDelivery.CTR_CD)
                    LEFT JOIN M100 ON (M100.G_CODE = ZTBDelivery.G_CODE AND M100.CTR_CD = ZTBDelivery.CTR_CD)
                    LEFT JOIN ZTBPOTable ON (ZTBDelivery.PO_NO = ZTBPOTable.PO_NO AND ZTBDelivery.G_CODE = ZTBPOTable.G_CODE AND ZTBDelivery.CUST_CD = ZTBPOTable.CUST_CD AND ZTBDelivery.CTR_CD = ZTBPOTable.CTR_CD)
                    WHERE ZTBDelivery.DELIVERY_DATE BETWEEN '${DATA.START_DATE}' AND '${DATA.END_DATE}' AND ZTBDelivery.CTR_CD='${DATA.CTR_CD}'
          )
          SELECT CONCAT(YEARNUM,'_', MONTHNUM) AS DEL_YM,YEARNUM, MONTHNUM, COUNT (DELIVERY_ID) AS TOTAL_IV, COUNT (CASE WHEN (OVERDUE = 'OK' OR D_PLUS<=@D_P) THEN 1 ELSE null END) AS OK_IV, COUNT (CASE WHEN OVERDUE = 'OVER' AND D_PLUS>@D_P THEN 1 ELSE null END) AS OVER_IV FROM DLVRDATA GROUP BY CONCAT(YEARNUM,'_', MONTHNUM), YEARNUM ,MONTHNUM ORDER BY YEARNUM DESC,MONTHNUM DESC
          `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "yearlyoverduedata":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
          DECLARE @D_P int;
          set @D_P =${DATA.D_PLUS};
          WITH DLVRDATA AS
          (
          SELECT  ZTBDelivery.DELIVERY_ID, ZTBDelivery.CUST_CD,M110.CUST_NAME_KD,ZTBDelivery.EMPL_NO,M010.EMPL_NAME,ZTBDelivery.G_CODE,M100.G_NAME,M100.G_NAME_KD,ZTBPOTable.PO_ID, ZTBDelivery.PO_NO,ZTBPOTable.PO_DATE, ZTBPOTable.RD_DATE,DATEDIFF(day, ZTBPOTable.PO_DATE,ZTBPOTable.RD_DATE) AS D_PLUS, ZTBDelivery.DELIVERY_DATE,ZTBDelivery.DELIVERY_QTY,isnull(ZTBPOTable.BEP,0) AS BEP, ZTBPOTable.PROD_PRICE,  (ZTBDelivery.DELIVERY_QTY*ZTBPOTable.PROD_PRICE) AS DELIVERED_AMOUNT,(isnull(ZTBPOTable.BEP,0)*ZTBPOTable.PROD_PRICE) AS DELIVERED_BEP_AMOUNT ,ZTBDelivery.REMARK,ZTBDelivery.INVOICE_NO,M100.PROD_MAIN_MATERIAL,M100.PROD_TYPE,M100.PROD_MODEL,M100.PROD_PROJECT, DATEPART(YEAR,DELIVERY_DATE) AS YEARNUM,DATEPART(ISOWK,DELIVERY_DATE) AS WEEKNUM,DATEPART(MONTH,DELIVERY_DATE) AS MONTHNUM, CASE WHEN ZTBPOTable.RD_DATE < ZTBDelivery.DELIVERY_DATE THEN 'OVER' ELSE 'OK' END AS OVERDUE, ZTBDelivery.CTR_CD
                    FROM ZTBDelivery
                    LEFT JOIN M110 ON (M110.CUST_CD = ZTBDelivery.CUST_CD AND M110.CTR_CD = ZTBDelivery.CTR_CD)
                    LEFT JOIN M010 ON (M010.EMPL_NO = ZTBDelivery.EMPL_NO AND M010.CTR_CD = ZTBDelivery.CTR_CD)
                    LEFT JOIN M100 ON (M100.G_CODE = ZTBDelivery.G_CODE AND M100.CTR_CD = ZTBDelivery.CTR_CD)
                    LEFT JOIN ZTBPOTable ON (ZTBDelivery.PO_NO = ZTBPOTable.PO_NO AND ZTBDelivery.G_CODE = ZTBPOTable.G_CODE AND ZTBDelivery.CUST_CD = ZTBPOTable.CUST_CD AND ZTBDelivery.CTR_CD = ZTBPOTable.CTR_CD)
                    WHERE ZTBDelivery.DELIVERY_DATE BETWEEN '${DATA.START_DATE}' AND '${DATA.END_DATE}' AND ZTBDelivery.CTR_CD='${DATA.CTR_CD}'
          )
          SELECT YEARNUM,  COUNT (DELIVERY_ID) AS TOTAL_IV, COUNT (CASE WHEN (OVERDUE = 'OK' OR D_PLUS<=@D_P) THEN 1 ELSE null END) AS OK_IV, COUNT (CASE WHEN OVERDUE = 'OVER' AND D_PLUS>@D_P THEN 1 ELSE null END) AS OVER_IV FROM DLVRDATA GROUP BY YEARNUM ORDER BY YEARNUM DESC
          `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "dailysxlosstrend":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = ` WHERE P500.INS_DATE > '2023-12-01 00:00:00' AND P500.M_LOT_NO <> '' AND P500.INS_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE} 23:59:59' AND (P500.INPUT_QTY- isnull(P500.REMAIN_QTY,0)) <> 0`
          if (DATA.MACHINE !== 'ALL') {
            condition += ` AND SUBSTRING(P500.EQUIPMENT_CD,1,2)='${DATA.MACHINE}'`
          }
          if (DATA.FACTORY !== 'ALL')
            condition += ` AND ZTB_QLSXPLAN.PLAN_FACTORY='${DATA.FACTORY}'`
          let setpdQuery = `
          WITH P501_A AS
          (
          SELECT P501.M_LOT_NO, P501.PLAN_ID, SUM(P501.TEMP_QTY) AS TEMP_QTY, P501.CTR_CD FROM P501 WHERE P501.INS_DATE > '2023-11-30 20:00:00' AND TEMP_QTY is not null AND P501.CTR_CD='${DATA.CTR_CD}' GROUP BY P501.M_LOT_NO, P501.PLAN_ID, P501.CTR_CD
          ),          
          INSP_NK_TB AS
          (
          SELECT PLAN_ID, M_LOT_NO, SUM(INSPECT_TOTAL_QTY) AS INSPECT_TOTAL_QTY, SUM(INSPECT_OK_QTY) AS INSPECT_OK_QTY, CTR_CD FROM ZTBINSPECTNGTB WHERE M_LOT_NO is not null AND PLAN_ID is not null AND PLAN_ID <> '' AND M_LOT_NO <>'' AND CTR_CD='${DATA.CTR_CD}' GROUP BY PLAN_ID, M_LOT_NO, CTR_CD
          ),
          PROCESS_TB AS
          (
          SELECT G_CODE,
          CASE WHEN EQ4 <> 'NA' AND EQ4 <> 'NO' AND EQ4 is not null AND EQ4 <> '' THEN 4 
          WHEN EQ3 <> 'NA' AND EQ3 <> 'NO' AND EQ3 is not null AND EQ3 <> ''  THEN 3
          WHEN EQ2 <> 'NA' AND EQ2 <> 'NO' AND EQ2 is not null AND EQ2 <> ''  THEN 2 
          ELSE 1 END AS MAX_PROCESS_NUMBER,
          CTR_CD
          FROM M100
          WHERE CTR_CD='${DATA.CTR_CD}'
          ),
          ROLL_TB AS
          (
          SELECT CAST(P500.INS_DATE as date) AS INPUT_DATE, CASE WHEN P500.PR_NB=1 THEN (P500.INPUT_QTY- isnull(P500.REMAIN_QTY,0)) ELSE 0 END AS PURE_INPUT, CASE WHEN PROCESS_TB.MAX_PROCESS_NUMBER = P500.PR_NB THEN (isnull(INSP_NK_TB.INSPECT_OK_QTY,0)*1.0 * M100.PD /(M100.G_C * M100.G_C_R)/1000) ELSE 0 END AS PURE_OUTPUT
          FROM P500
          LEFT JOIN ZTB_SX_RESULT ON (P500.PLAN_ID = ZTB_SX_RESULT.PLAN_ID AND P500.CTR_CD = ZTB_SX_RESULT.CTR_CD) 
          LEFT JOIN P501_A ON (P501_A.PLAN_ID = P500.PLAN_ID AND P501_A.M_LOT_NO = P500.M_LOT_NO AND P501_A.CTR_CD = P500.CTR_CD)  
          LEFT JOIN INSP_NK_TB ON (INSP_NK_TB.PLAN_ID = P500.PLAN_ID AND INSP_NK_TB.M_LOT_NO = P500.M_LOT_NO AND INSP_NK_TB.CTR_CD = P500.CTR_CD)
          LEFT JOIN M100 ON (P500.G_CODE = M100.G_CODE AND P500.CTR_CD = M100.CTR_CD)
          LEFT JOIN PROCESS_TB ON (PROCESS_TB.G_CODE = P500.G_CODE AND PROCESS_TB.CTR_CD = P500.CTR_CD)        
          ${condition} AND P500.CTR_CD='${DATA.CTR_CD}'
          )
          SELECT INPUT_DATE, SUM(PURE_INPUT) AS PURE_INPUT, SUM(PURE_OUTPUT) AS PURE_OUTPUT FROM ROLL_TB GROUP BY INPUT_DATE
          `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "weeklysxlosstrend":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = ` WHERE P500.INS_DATE > '2023-12-01 00:00:00' AND P500.M_LOT_NO <> '' AND P500.INS_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE} 23:59:59' AND (P500.INPUT_QTY- isnull(P500.REMAIN_QTY,0)) <> 0`
          if (DATA.MACHINE !== 'ALL') {
            condition += ` AND SUBSTRING(P500.EQUIPMENT_CD,1,2)='${DATA.MACHINE}'`
          }
          if (DATA.FACTORY !== 'ALL')
            condition += ` AND ZTB_QLSXPLAN.PLAN_FACTORY='${DATA.FACTORY}'`
          let setpdQuery = `
          WITH P501_A AS
          (
          SELECT P501.M_LOT_NO, P501.PLAN_ID, SUM(P501.TEMP_QTY) AS TEMP_QTY, P501.CTR_CD FROM P501 WHERE P501.INS_DATE > '2023-11-30 20:00:00' AND TEMP_QTY is not null AND P501.CTR_CD='${DATA.CTR_CD}' GROUP BY P501.M_LOT_NO, P501.PLAN_ID, P501.CTR_CD
          ),          
          INSP_NK_TB AS
          (
          SELECT PLAN_ID, M_LOT_NO, SUM(INSPECT_TOTAL_QTY) AS INSPECT_TOTAL_QTY, SUM(INSPECT_OK_QTY) AS INSPECT_OK_QTY, CTR_CD FROM ZTBINSPECTNGTB WHERE M_LOT_NO is not null AND PLAN_ID is not null AND PLAN_ID <> '' AND M_LOT_NO <>'' AND CTR_CD='${DATA.CTR_CD}' GROUP BY PLAN_ID, M_LOT_NO, CTR_CD
          ),
          PROCESS_TB AS
          (
          SELECT G_CODE,
          CASE WHEN EQ4 <> 'NA' AND EQ4 <> 'NO' AND EQ4 is not null AND EQ4 <> '' THEN 4 
          WHEN EQ3 <> 'NA' AND EQ3 <> 'NO' AND EQ3 is not null AND EQ3 <> ''  THEN 3
          WHEN EQ2 <> 'NA' AND EQ2 <> 'NO' AND EQ2 is not null AND EQ2 <> ''  THEN 2 
          ELSE 1 END AS MAX_PROCESS_NUMBER,
          CTR_CD
          FROM M100
          WHERE CTR_CD='${DATA.CTR_CD}'
          ),
          ROLL_TB AS
          (
          SELECT CAST(P500.INS_DATE as date) AS INPUT_DATE, CASE WHEN P500.PR_NB=1 THEN (P500.INPUT_QTY- isnull(P500.REMAIN_QTY,0)) ELSE 0 END AS PURE_INPUT, CASE WHEN PROCESS_TB.MAX_PROCESS_NUMBER = P500.PR_NB THEN (isnull(INSP_NK_TB.INSPECT_OK_QTY,0)*1.0 * M100.PD /(M100.G_C * M100.G_C_R)/1000) ELSE 0 END AS PURE_OUTPUT
          FROM P500
          LEFT JOIN ZTB_SX_RESULT ON (P500.PLAN_ID = ZTB_SX_RESULT.PLAN_ID AND P500.CTR_CD = ZTB_SX_RESULT.CTR_CD) 
          LEFT JOIN P501_A ON (P501_A.PLAN_ID = P500.PLAN_ID AND P501_A.M_LOT_NO = P500.M_LOT_NO AND P501_A.CTR_CD = P500.CTR_CD)  
          LEFT JOIN INSP_NK_TB ON (INSP_NK_TB.PLAN_ID = P500.PLAN_ID AND INSP_NK_TB.M_LOT_NO = P500.M_LOT_NO AND INSP_NK_TB.CTR_CD = P500.CTR_CD)
          LEFT JOIN M100 ON (P500.G_CODE = M100.G_CODE AND P500.CTR_CD = M100.CTR_CD)
          LEFT JOIN PROCESS_TB ON (PROCESS_TB.G_CODE = P500.G_CODE AND PROCESS_TB.CTR_CD = P500.CTR_CD)        
          ${condition} AND P500.CTR_CD='${DATA.CTR_CD}'
          )
          SELECT YEAR(INPUT_DATE) AS INPUT_YEAR,DATEPART(WEEK,INPUT_DATE) AS INPUT_WEEK, CONCAT(YEAR(INPUT_DATE),'_',DATEPART(WEEK,INPUT_DATE)) AS INPUT_YW,  SUM(PURE_INPUT) AS PURE_INPUT, SUM(PURE_OUTPUT) AS PURE_OUTPUT FROM ROLL_TB 
          GROUP BY YEAR(INPUT_DATE),DATEPART(WEEK,INPUT_DATE),CONCAT(YEAR(INPUT_DATE),'_',DATEPART(WEEK,INPUT_DATE))
          ORDER BY YEAR(INPUT_DATE) DESC, DATEPART(WEEK,INPUT_DATE) DESC
          `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "monthlysxlosstrend":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = ` WHERE P500.INS_DATE > '2023-12-01 00:00:00' AND P500.M_LOT_NO <> '' AND P500.INS_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE} 23:59:59' AND (P500.INPUT_QTY- isnull(P500.REMAIN_QTY,0)) <> 0`
          if (DATA.MACHINE !== 'ALL') {
            condition += ` AND SUBSTRING(P500.EQUIPMENT_CD,1,2)='${DATA.MACHINE}'`
          }
          if (DATA.FACTORY !== 'ALL')
            condition += ` AND ZTB_QLSXPLAN.PLAN_FACTORY='${DATA.FACTORY}'`
          let setpdQuery = `
          WITH P501_A AS
          (
          SELECT P501.M_LOT_NO, P501.PLAN_ID, SUM(P501.TEMP_QTY) AS TEMP_QTY, P501.CTR_CD FROM P501 WHERE P501.INS_DATE > '2023-11-30 20:00:00' AND TEMP_QTY is not null AND P501.CTR_CD='${DATA.CTR_CD}' GROUP BY P501.M_LOT_NO, P501.PLAN_ID, P501.CTR_CD
          ),          
          INSP_NK_TB AS
          (
          SELECT PLAN_ID, M_LOT_NO, SUM(INSPECT_TOTAL_QTY) AS INSPECT_TOTAL_QTY, SUM(INSPECT_OK_QTY) AS INSPECT_OK_QTY, CTR_CD FROM ZTBINSPECTNGTB WHERE M_LOT_NO is not null AND PLAN_ID is not null AND PLAN_ID <> '' AND M_LOT_NO <>'' AND CTR_CD='${DATA.CTR_CD}' GROUP BY PLAN_ID, M_LOT_NO, CTR_CD
          ),
          PROCESS_TB AS
          (
          SELECT G_CODE,
          CASE WHEN EQ4 <> 'NA' AND EQ4 <> 'NO' AND EQ4 is not null AND EQ4 <> '' THEN 4 
          WHEN EQ3 <> 'NA' AND EQ3 <> 'NO' AND EQ3 is not null AND EQ3 <> ''  THEN 3
          WHEN EQ2 <> 'NA' AND EQ2 <> 'NO' AND EQ2 is not null AND EQ2 <> ''  THEN 2 
          ELSE 1 END AS MAX_PROCESS_NUMBER,
          CTR_CD
          FROM M100
          WHERE CTR_CD='${DATA.CTR_CD}'
          ),
          ROLL_TB AS
          (
          SELECT CAST(P500.INS_DATE as date) AS INPUT_DATE, CASE WHEN P500.PR_NB=1 THEN (P500.INPUT_QTY- isnull(P500.REMAIN_QTY,0)) ELSE 0 END AS PURE_INPUT, CASE WHEN PROCESS_TB.MAX_PROCESS_NUMBER = P500.PR_NB THEN (isnull(INSP_NK_TB.INSPECT_OK_QTY,0)*1.0 * M100.PD /(M100.G_C * M100.G_C_R)/1000) ELSE 0 END AS PURE_OUTPUT
          FROM P500
          LEFT JOIN ZTB_SX_RESULT ON (P500.PLAN_ID = ZTB_SX_RESULT.PLAN_ID AND P500.CTR_CD = ZTB_SX_RESULT.CTR_CD) 
          LEFT JOIN P501_A ON (P501_A.PLAN_ID = P500.PLAN_ID AND P501_A.M_LOT_NO = P500.M_LOT_NO AND P501_A.CTR_CD = P500.CTR_CD)  
          LEFT JOIN INSP_NK_TB ON (INSP_NK_TB.PLAN_ID = P500.PLAN_ID AND INSP_NK_TB.M_LOT_NO = P500.M_LOT_NO AND INSP_NK_TB.CTR_CD = P500.CTR_CD)
          LEFT JOIN M100 ON (P500.G_CODE = M100.G_CODE AND P500.CTR_CD = M100.CTR_CD)
          LEFT JOIN PROCESS_TB ON (PROCESS_TB.G_CODE = P500.G_CODE AND PROCESS_TB.CTR_CD = P500.CTR_CD)        
          ${condition} AND P500.CTR_CD='${DATA.CTR_CD}'
          )
          SELECT YEAR(INPUT_DATE) AS INPUT_YEAR,DATEPART(MONTH,INPUT_DATE) AS INPUT_WEEK, CONCAT(YEAR(INPUT_DATE),'_',DATEPART(MONTH,INPUT_DATE)) AS INPUT_YM,  SUM(PURE_INPUT) AS PURE_INPUT, SUM(PURE_OUTPUT) AS PURE_OUTPUT FROM ROLL_TB 
          GROUP BY YEAR(INPUT_DATE),DATEPART(MONTH,INPUT_DATE),CONCAT(YEAR(INPUT_DATE),'_',DATEPART(MONTH,INPUT_DATE))
          ORDER BY YEAR(INPUT_DATE) DESC, DATEPART(MONTH,INPUT_DATE) DESC
          `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "yearlysxlosstrend":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = ` WHERE P500.INS_DATE > '2023-12-01 00:00:00' AND P500.M_LOT_NO <> '' AND (P500.INPUT_QTY- isnull(P500.REMAIN_QTY,0)) <> 0`
          if (DATA.MACHINE !== 'ALL') {
            condition += ` AND SUBSTRING(P500.EQUIPMENT_CD,1,2)='${DATA.MACHINE}'`
          }
          if (DATA.FACTORY !== 'ALL')
            condition += ` AND ZTB_QLSXPLAN.PLAN_FACTORY='${DATA.FACTORY}'`
          let setpdQuery = `
          WITH P501_A AS
          (
          SELECT P501.M_LOT_NO, P501.PLAN_ID, SUM(P501.TEMP_QTY) AS TEMP_QTY, P501.CTR_CD FROM P501 WHERE P501.INS_DATE > '2023-11-30 20:00:00' AND TEMP_QTY is not null AND P501.CTR_CD='${DATA.CTR_CD}' GROUP BY P501.M_LOT_NO, P501.PLAN_ID, P501.CTR_CD
          ),          
          INSP_NK_TB AS
          (
          SELECT PLAN_ID, M_LOT_NO, SUM(INSPECT_TOTAL_QTY) AS INSPECT_TOTAL_QTY, SUM(INSPECT_OK_QTY) AS INSPECT_OK_QTY, CTR_CD FROM ZTBINSPECTNGTB WHERE M_LOT_NO is not null AND PLAN_ID is not null AND PLAN_ID <> '' AND M_LOT_NO <>'' AND CTR_CD='${DATA.CTR_CD}' GROUP BY PLAN_ID, M_LOT_NO, CTR_CD
          ),
          PROCESS_TB AS
          (
          SELECT G_CODE,
          CASE WHEN EQ4 <> 'NA' AND EQ4 <> 'NO' AND EQ4 is not null AND EQ4 <> '' THEN 4 
          WHEN EQ3 <> 'NA' AND EQ3 <> 'NO' AND EQ3 is not null AND EQ3 <> ''  THEN 3
          WHEN EQ2 <> 'NA' AND EQ2 <> 'NO' AND EQ2 is not null AND EQ2 <> ''  THEN 2 
          ELSE 1 END AS MAX_PROCESS_NUMBER,
          CTR_CD
          FROM M100
          WHERE CTR_CD='${DATA.CTR_CD}'
          ),
          ROLL_TB AS
          (
          SELECT CAST(P500.INS_DATE as date) AS INPUT_DATE, CASE WHEN P500.PR_NB=1 THEN (P500.INPUT_QTY- isnull(P500.REMAIN_QTY,0)) ELSE 0 END AS PURE_INPUT, CASE WHEN PROCESS_TB.MAX_PROCESS_NUMBER = P500.PR_NB THEN (isnull(INSP_NK_TB.INSPECT_OK_QTY,0)*1.0 * M100.PD /(M100.G_C * M100.G_C_R)/1000) ELSE 0 END AS PURE_OUTPUT
          FROM P500
          LEFT JOIN ZTB_SX_RESULT ON (P500.PLAN_ID = ZTB_SX_RESULT.PLAN_ID AND P500.CTR_CD = ZTB_SX_RESULT.CTR_CD) 
          LEFT JOIN P501_A ON (P501_A.PLAN_ID = P500.PLAN_ID AND P501_A.M_LOT_NO = P500.M_LOT_NO AND P501_A.CTR_CD = P500.CTR_CD)  
          LEFT JOIN INSP_NK_TB ON (INSP_NK_TB.PLAN_ID = P500.PLAN_ID AND INSP_NK_TB.M_LOT_NO = P500.M_LOT_NO AND INSP_NK_TB.CTR_CD = P500.CTR_CD)
          LEFT JOIN M100 ON (P500.G_CODE = M100.G_CODE AND P500.CTR_CD = M100.CTR_CD)
          LEFT JOIN PROCESS_TB ON (PROCESS_TB.G_CODE = P500.G_CODE AND PROCESS_TB.CTR_CD = P500.CTR_CD)
          ${condition} AND P500.CTR_CD='${DATA.CTR_CD}'
          )
          SELECT YEAR(INPUT_DATE) AS INPUT_YEAR, SUM(PURE_INPUT) AS PURE_INPUT, SUM(PURE_OUTPUT) AS PURE_OUTPUT FROM ROLL_TB 
          GROUP BY YEAR(INPUT_DATE)
          ORDER BY YEAR(INPUT_DATE) DESC
          `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "changepassword":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
          UPDATE ZTBEMPLINFO SET PASSWORD='${DATA.PASSWORD}' WHERE CTR_CD='${DATA.CTR_CD}' AND EMPL_NO='${EMPL_NO}'
          `;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "rnddailynewcode":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = `WHERE CODETB.CREATED_DATE BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE} 23:59:59' `;
          let setpdQuery = `
            WITH CODETB AS (SELECT G_CODE, CTR_CD, CASE WHEN REV_NO='A' THEN 1 ELSE 0 END AS NEWCODE, CASE WHEN REV_NO<>'A' THEN 1 ELSE 0 END AS ECN, CAST(INS_DATE as date) AS CREATED_DATE FROM M100 WHERE CTR_CD='${DATA.CTR_CD}')
            SELECT CODETB.CREATED_DATE, SUM(NEWCODE) AS NEWCODE, SUM(ECN) AS ECN FROM CODETB 
            ${condition} AND CODETB.CTR_CD='${DATA.CTR_CD}'
            GROUP BY CODETB.CREATED_DATE            
            ORDER BY CODETB.CREATED_DATE DESC
            `;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "rndweeklynewcode":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = `WHERE CODETB.CREATED_DATE BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE} 23:59:59' `;
          let setpdQuery = `
              WITH CODETB AS (SELECT G_CODE, CTR_CD, CASE WHEN REV_NO='A' THEN 1 ELSE 0 END AS NEWCODE, CASE WHEN REV_NO<>'A' THEN 1 ELSE 0 END AS ECN, CAST(INS_DATE as date) AS CREATED_DATE FROM M100 WHERE CTR_CD='${DATA.CTR_CD}')
              SELECT YEAR(CREATED_DATE) AS CREATED_YEAR,  DATEPART(WEEK,CREATED_DATE) AS CREATE_WEEK, CONCAT(YEAR(CREATED_DATE),'_', DATEPART(WEEK,CREATED_DATE)) AS CREATED_YW,SUM(NEWCODE) AS NEWCODE, SUM(ECN) AS ECN FROM CODETB 
              ${condition} AND CODETB.CTR_CD='${DATA.CTR_CD}'
              GROUP BY YEAR(CREATED_DATE), DATEPART(WEEK,CREATED_DATE)              
              ORDER BY YEAR(CREATED_DATE) DESC,  DATEPART(WEEK,CREATED_DATE) DESC
              `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "rndmonthlynewcode":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = `WHERE CODETB.CREATED_DATE BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE} 23:59:59' `;
          let setpdQuery = `
              WITH CODETB AS (SELECT G_CODE, CTR_CD, CASE WHEN REV_NO='A' THEN 1 ELSE 0 END AS NEWCODE, CASE WHEN REV_NO<>'A' THEN 1 ELSE 0 END AS ECN, CAST(INS_DATE as date) AS CREATED_DATE FROM M100 WHERE CTR_CD='${DATA.CTR_CD}')
              SELECT YEAR(CREATED_DATE) AS CREATED_YEAR,  MONTH(CREATED_DATE) AS CREATE_MONTH, CONCAT(YEAR(CREATED_DATE),'_', MONTH(CREATED_DATE)) AS CREATED_YM,SUM(NEWCODE) AS NEWCODE, SUM(ECN) AS ECN FROM CODETB 
              ${condition} AND CODETB.CTR_CD='${DATA.CTR_CD}'
              GROUP BY YEAR(CREATED_DATE),  MONTH(CREATED_DATE)              
              ORDER BY YEAR(CREATED_DATE) DESC,  MONTH(CREATED_DATE) DESC
              `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "rndyearlynewcode":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = `WHERE CODETB.CREATED_DATE BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE} 23:59:59' `;
          let setpdQuery = `
              WITH CODETB AS (SELECT G_CODE, CTR_CD, CASE WHEN REV_NO='A' THEN 1 ELSE 0 END AS NEWCODE, CASE WHEN REV_NO<>'A' THEN 1 ELSE 0 END AS ECN, CAST(INS_DATE as date) AS CREATED_DATE FROM M100 WHERE CTR_CD='${DATA.CTR_CD}')
              SELECT YEAR(CREATED_DATE) AS CREATED_YEAR, SUM(NEWCODE) AS NEWCODE, SUM(ECN) AS ECN FROM CODETB 
              ${condition} AND CODETB.CTR_CD='${DATA.CTR_CD}'
              GROUP BY YEAR(CREATED_DATE)        
              ORDER BY YEAR(CREATED_DATE) DESC
              `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "rndNewCodeByCustomer":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
              WITH CODETB AS (SELECT G_CODE, CAST(INS_DATE as date) AS CREATED_DATE, CUST_CD, CTR_CD FROM M100),
              CUST_CODE_TB AS 
              (SELECT CODETB.CUST_CD, COUNT(G_CODE) AS NEWCODE, CODETB.CTR_CD FROM CODETB
              WHERE CODETB.CREATED_DATE BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE} 23:59:59' 
              AND CODETB.CTR_CD='${DATA.CTR_CD}'
              GROUP BY CODETB.CUST_CD, CODETB.CTR_CD
              ) 
              SELECT M110.CUST_NAME_KD, CUST_CODE_TB.NEWCODE FROM CUST_CODE_TB 
              LEFT JOIN M110 ON M110.CUST_CD = CUST_CODE_TB.CUST_CD AND M110.CTR_CD = CUST_CODE_TB.CTR_CD 
              WHERE CUST_CODE_TB.CTR_CD='${DATA.CTR_CD}'
              ORDER BY CUST_CODE_TB.NEWCODE DESC
              `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "rndNewCodeByProdType":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
              WITH CODETB AS (SELECT G_CODE, CAST(INS_DATE as date) AS CREATED_DATE, PROD_TYPE, CTR_CD FROM M100)
              SELECT CODETB.PROD_TYPE, COUNT(G_CODE) AS NEWCODE FROM CODETB
              WHERE CODETB.CREATED_DATE BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE} 23:59:59' 
              AND CODETB.CTR_CD='${DATA.CTR_CD}'
              GROUP BY CODETB.PROD_TYPE, CODETB.CTR_CD      
              ORDER BY NEWCODE DESC       
              `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "checkP500M_CODE":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
          SELECT DISTINCT M_NAME, PROD_REQUEST_NO, P500.CTR_CD FROM P500 
          LEFT JOIN M090 ON M090.M_CODE = P500.M_CODE AND M090.CTR_CD = P500.CTR_CD
          WHERE PROD_REQUEST_NO='${DATA.PROD_REQUEST_NO}' 
          AND P500.CTR_CD='${DATA.CTR_CD}'
              `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "delete_P500_YCSX":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
            DELETE FROM P500 WHERE CTR_CD='${DATA.CTR_CD}' AND PROD_REQUEST_NO='${DATA.PROD_REQUEST_NO}' AND INS_EMPL='${DATA.INS_EMPL}' AND M_LOT_NO=''
              `;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "delete_P501_YCSX":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
            DELETE FROM P501 WHERE CTR_CD='${DATA.CTR_CD}' AND PLAN_ID='${DATA.PLAN_ID}' AND INS_EMPL='${DATA.INS_EMPL}' AND M_LOT_NO=''
              `;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "deleteAMZ_DATA":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
            DELETE FROM  AMAZONE_DATA WHERE CTR_CD='${DATA.CTR_CD}' AND PROD_REQUEST_NO='${DATA.PROD_REQUEST_NO}' AND INLAI_COUNT = 0 AND INS_EMPL='${EMPL_NO}'
              `;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "checkInLaiCount_AMZ":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
            SELECT PROD_REQUEST_NO, SUM(INLAI_COUNT) AS IN_LAI_QTY  FROM AMAZONE_DATA WHERE CTR_CD='${DATA.CTR_CD}' AND PROD_REQUEST_NO='${DATA.PROD_REQUEST_NO}' GROUP BY PROD_REQUEST_NO
            `;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "getFSCList":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
            SELECT * FROM ZTB_FSC_TB WHERE CTR_CD='${DATA.CTR_CD}'
            `;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "checkMainMaterialFSC":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
            SELECT TOP 1 isnull(FSC,'N') AS FSC, isnull(ZTB_MATERIAL_TB.FSC_CODE,'01') AS FSC_CODE, ZTB_FSC_TB.FSC_NAME, EXP_DATE
            FROM ZTB_MATERIAL_TB 
            LEFT JOIN ZTB_FSC_TB ON ZTB_FSC_TB.FSC_CODE = ZTB_MATERIAL_TB.FSC_CODE AND ZTB_FSC_TB.CTR_CD = ZTB_MATERIAL_TB.CTR_CD
            WHERE ZTB_MATERIAL_TB.M_NAME='${DATA.M_NAME}' AND ZTB_MATERIAL_TB.CTR_CD='${DATA.CTR_CD}'
            `;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "loadSampleMonitorTable":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
            SELECT ZTB_SAMPLE_MONITOR.SAMPLE_ID, ZTB_SAMPLE_MONITOR.PROD_REQUEST_NO, ZTB_SAMPLE_MONITOR.G_NAME_KD, ZTB_SAMPLE_MONITOR.FILE_MAKET, ZTB_SAMPLE_MONITOR.FILM_FILE, ZTB_SAMPLE_MONITOR.KNIFE_STATUS,ZTB_SAMPLE_MONITOR.KNIFE_CODE, ZTB_SAMPLE_MONITOR.FILM, ZTB_SAMPLE_MONITOR.RND_EMPL, ZTB_SAMPLE_MONITOR.RND_UPD_DATE, ZTB_SAMPLE_MONITOR.MATERIAL_STATUS, ZTB_SAMPLE_MONITOR.PUR_EMPL, ZTB_SAMPLE_MONITOR.PUR_UPD_DATE, ZTB_SAMPLE_MONITOR.PRINT_STATUS,ZTB_SAMPLE_MONITOR.DIECUT_STATUS, ZTB_SAMPLE_MONITOR.PR_EMPL, ZTB_SAMPLE_MONITOR.PR_UPD_DATE, ZTB_SAMPLE_MONITOR.QC_STATUS, ZTB_SAMPLE_MONITOR.QC_EMPL, ZTB_SAMPLE_MONITOR.QC_UPD_DATE, ZTB_SAMPLE_MONITOR.APPROVE_STATUS, ZTB_SAMPLE_MONITOR.APPROVE_DATE, ZTB_SAMPLE_MONITOR.USE_YN, ZTB_SAMPLE_MONITOR.REMARK, ZTB_SAMPLE_MONITOR.INS_DATE, ZTB_SAMPLE_MONITOR.INS_EMPL, P400.PROD_REQUEST_DATE, P400.G_CODE, P400.PROD_REQUEST_QTY, P400.CUST_CD, P400.DELIVERY_DT, M100.G_WIDTH, M100.G_LENGTH, M110.CUST_NAME_KD, M100.G_NAME
            FROM ZTB_SAMPLE_MONITOR LEFT OUTER JOIN
            P400 ON P400.PROD_REQUEST_NO = ZTB_SAMPLE_MONITOR.PROD_REQUEST_NO AND P400.CTR_CD = ZTB_SAMPLE_MONITOR.CTR_CD LEFT OUTER JOIN
            M100 ON P400.G_CODE = M100.G_CODE AND P400.CTR_CD = M100.CTR_CD LEFT OUTER JOIN
            M110 ON M110.CUST_CD = P400.CUST_CD AND M110.CTR_CD = P400.CTR_CD
            WHERE ZTB_SAMPLE_MONITOR.CTR_CD='${DATA.CTR_CD}'
            ORDER BY SAMPLE_ID DESC
            `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "updateRND_SAMPLE_STATUS":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
            UPDATE ZTB_SAMPLE_MONITOR SET FILE_MAKET='${DATA.FILE_MAKET}', FILM_FILE='${DATA.FILM_FILE}', KNIFE_STATUS='${DATA.KNIFE_STATUS}', KNIFE_CODE=N'${DATA.KNIFE_CODE ?? ''}', FILM='${DATA.FILM}', RND_EMPL='${EMPL_NO}', RND_UPD_DATE=GETDATE() WHERE  CTR_CD='${DATA.CTR_CD}' AND SAMPLE_ID=${DATA.SAMPLE_ID}
            `;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "updateSX_SAMPLE_STATUS":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
            UPDATE ZTB_SAMPLE_MONITOR SET PRINT_STATUS='${DATA.PRINT_STATUS}', DIECUT_STATUS='${DATA.DIECUT_STATUS}', PR_EMPL='${EMPL_NO}', PR_UPD_DATE=GETDATE() WHERE CTR_CD='${DATA.CTR_CD}' AND SAMPLE_ID=${DATA.SAMPLE_ID}
            `;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "updateQC_SAMPLE_STATUS":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
            UPDATE ZTB_SAMPLE_MONITOR SET QC_STATUS='${DATA.QC_STATUS}',  QC_EMPL='${EMPL_NO}', QC_UPD_DATE=GETDATE() WHERE CTR_CD='${DATA.CTR_CD}' AND SAMPLE_ID=${DATA.SAMPLE_ID}
            `;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "updateMATERIAL_STATUS":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
            UPDATE ZTB_SAMPLE_MONITOR SET MATERIAL_STATUS='${DATA.MATERIAL_STATUS}',  PUR_EMPL='${EMPL_NO}', PUR_UPD_DATE=GETDATE() WHERE CTR_CD='${DATA.CTR_CD}' AND SAMPLE_ID=${DATA.SAMPLE_ID}
            `;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "updateAPPROVE_SAMPLE_STATUS":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
            UPDATE ZTB_SAMPLE_MONITOR SET APPROVE_STATUS='${DATA.APPROVE_STATUS}',REMARK=N'${DATA.REMARK}', ${DATA.APPROVE_STATUS === 'Y' ? 'APPROVE_DATE=GETDATE(),' : ''}  UPD_EMPL='${EMPL_NO}', UPD_DATE=GETDATE() WHERE CTR_CD='${DATA.CTR_CD}' AND SAMPLE_ID=${DATA.SAMPLE_ID}
            `;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "addMonitoringSample":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
            INSERT INTO ZTB_SAMPLE_MONITOR (CTR_CD, PROD_REQUEST_NO, G_NAME_KD, INS_EMPL, UPD_EMPL,INS_DATE, UPD_DATE) VALUES ('${DATA.CTR_CD}','${DATA.PROD_REQUEST_NO}','${DATA.G_NAME_KD}','${EMPL_NO}','${EMPL_NO}',GETDATE(),GETDATE())
            `;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "lockSample":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
            UPDATE ZTB_SAMPLE_MONITOR SET USE_YN='${DATA.USE_YN}' WHERE CTR_CD='${DATA.CTR_CD}' AND SAMPLE_ID=${DATA.SAMPLE_ID}
            `;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "insertDBYCSX":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
            INSERT INTO ZTB_DM_HISTORY
            SELECT '${DATA.CTR_CD}' AS CTR_CD,'${DATA.PROD_REQUEST_NO}' AS PROD_REQUEST_NO, LOSS_SX1,LOSS_SX2,LOSS_SX3,LOSS_SX4,LOSS_SETTING1,LOSS_SETTING2,LOSS_SETTING3,LOSS_SETTING4, GETDATE() AS INS_DATE, '${EMPL_NO}' AS INS_EMPL, GETDATE() AS UPD_DATE, '${EMPL_NO}' AS UPD_EMPL, isnull(LOSS_KT,0) AS LOSS_KT FROM M100 WHERE G_CODE='${DATA.G_CODE}' AND CTR_CD='${DATA.CTR_CD}'
            `;
          setpdQuery = `
            INSERT INTO ZTB_DM_HISTORY
            SELECT '${DATA.CTR_CD}' AS CTR_CD,'${DATA.PROD_REQUEST_NO}' AS PROD_REQUEST_NO, LOSS_SX1,LOSS_SX2,LOSS_SX3,LOSS_SX4,LOSS_SETTING1,LOSS_SETTING2,LOSS_SETTING3,LOSS_SETTING4, GETDATE() AS INS_DATE, '${EMPL_NO}' AS INS_EMPL, GETDATE() AS UPD_DATE, '${EMPL_NO}' AS UPD_EMPL, 0 AS LOSS_KT FROM M100 WHERE G_CODE='${DATA.G_CODE}' AND CTR_CD='${DATA.CTR_CD}'
            `;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "insertDBYCSX_New":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
            INSERT INTO ZTB_DM_HISTORY2
            SELECT '${DATA.CTR_CD}' AS CTR_CD, '${DATA.PROD_REQUEST_NO}' AS PROD_REQUEST_NO,PROCESS_NUMBER,EQ_SERIES,SETTING_TIME,UPH,STEP,LOSS_SX,LOSS_SETTING,FACTORY,GETDATE() AS INS_DATE,'${EMPL_NO}' AS INS_EMPL,GETDATE() AS UPD_DATE,'${EMPL_NO}' AS UPD_EMPL FROM ZTB_PROD_PROCESS_TB WHERE G_CODE='${DATA.G_CODE}' AND CTR_CD='${DATA.CTR_CD}'
            `;         
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "updateDBYCSX":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
            UPDATE ZTB_DM_HISTORY SET LOSS_SX1='${DATA.LOSS_SX1}',LOSS_SX2='${DATA.LOSS_SX2}',LOSS_SX3='${DATA.LOSS_SX3}',LOSS_SX4='${DATA.LOSS_SX4}',LOSS_SETTING1='${DATA.LOSS_SETTING1}',LOSS_SETTING2='${DATA.LOSS_SETTING2}',LOSS_SETTING3='${DATA.LOSS_SETTING3}',LOSS_SETTING4='${DATA.LOSS_SETTING4}', UPD_EMPL='${EMPL_NO}', UPD_DATE=GETDATE(), LOSS_KT=${DATA.LOSS_KT} WHERE CTR_CD='${DATA.CTR_CD}' AND PROD_REQUEST_NO='${DATA.PROD_REQUEST_NO}'  
            `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "updateDBYCSX_New":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
            MERGE INTO ZTB_DM_HISTORY2
            USING (
              SELECT * FROM ZTB_PROD_PROCESS_TB WHERE G_CODE='${DATA.G_CODE}' AND CTR_CD='${DATA.CTR_CD}'
            )
            AS SRC_TB
            ON SRC_TB.CTR_CD = ZTB_DM_HISTORY2.CTR_CD AND SRC_TB.PROCESS_NUMBER = ZTB_DM_HISTORY2.PROCESS_NUMBER AND ZTB_DM_HISTORY2.PROD_REQUEST_NO='${DATA.PROD_REQUEST_NO}'
            WHEN MATCHED THEN
            UPDATE
            SET 
            EQ_SERIES = SRC_TB.EQ_SERIES,
            SETTING_TIME = SRC_TB.SETTING_TIME,
            UPH = SRC_TB.UPH,
            STEP = SRC_TB.STEP,
            LOSS_SX = SRC_TB.LOSS_SX,
            LOSS_SETTING = SRC_TB.LOSS_SETTING,
            FACTORY = SRC_TB.FACTORY,
            UPD_DATE = GETDATE(),
            UPD_EMPL = 'NHU1903';
            `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "deleteDMYCSX":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
             DELETE FROM ZTB_DM_HISTORY WHERE CTR_CD='${DATA.CTR_CD}' AND PROD_REQUEST_NO='${DATA.PROD_REQUEST_NO}'
            `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "deleteDMYCSX2":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
             DELETE FROM ZTB_DM_HISTORY2 WHERE CTR_CD='${DATA.CTR_CD}' AND PROD_REQUEST_NO='${DATA.PROD_REQUEST_NO}'
            `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "checkMassG_CODE":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
             SELECT TOP 1 * FROM P400 WHERE CTR_CD='${DATA.CTR_CD}'  AND G_CODE='${DATA.G_CODE}' AND CODE_55 <> '04' ORDER BY INS_DATE DESC
            `;
          /* let setpdQuery = `
             SELECT TOP 1 * FROM P400 WHERE G_CODE='${DATA.G_CODE}' AND CODE_55 <> '04' ORDER BY INS_DATE ASC
            `; */
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "datasxdailylosstrend":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
             WITH AA AS (
            SELECT PLAN_ID_SUDUNG, M090.M_NAME, SUM(isnull(TOTAL_IN_QTY, 0)) AS INPUT_QTY, IN_KHO_SX.CTR_CD
            FROM IN_KHO_SX
            LEFT JOIN M090 ON (M090.M_CODE = IN_KHO_SX.M_CODE AND M090.CTR_CD = IN_KHO_SX.CTR_CD)
            WHERE IN_KHO_SX.USE_YN = 'X' AND IN_KHO_SX.CTR_CD = '${DATA.CTR_CD}'
            GROUP BY IN_KHO_SX.PLAN_ID_SUDUNG, M090.M_NAME, IN_KHO_SX.CTR_CD
            ),
        BB AS (
            SELECT P500.PLAN_ID, M090.M_NAME, SUM(isnull(REMAIN_QTY, 0)) AS REMAIN_QTY, SUM(isnull(INPUT_QTY, 0)) AS INPUT_QTY, P500.CTR_CD
            FROM P500
            LEFT JOIN M090 ON (M090.M_CODE = P500.M_CODE AND M090.CTR_CD = P500.CTR_CD)
            WHERE P500.CTR_CD = '${DATA.CTR_CD}'
            GROUP BY PLAN_ID, M090.M_NAME, P500.CTR_CD),
        INSPECT_OUTPUT_TABLE AS 
        (SELECT 
              PLAN_ID, 
              SUM(
                CAST(OUTPUT_QTY_EA as float)
              ) AS INS_OUTPUT,
              CTR_CD
            FROM 
              ZTBINSPECTOUTPUTTB 
            WHERE CTR_CD = '${DATA.CTR_CD}'
            GROUP BY 
              PLAN_ID, CTR_CD),
        SXDATATB AS
        (
        SELECT
        ZTB_QLSXPLAN.PLAN_DATE,
        CASE WHEN ZTB_QLSXPLAN.PROCESS_NUMBER = 1 THEN
        (isnull(BB.INPUT_QTY * 1.00000, isnull(AA.INPUT_QTY * 1.00000,0)) - isnull(BB.REMAIN_QTY, 0)) ELSE 0 END AS USED_QTY,
        CASE WHEN ZTB_QLSXPLAN.PROCESS_NUMBER = 1 THEN ((isnull(BB.INPUT_QTY * 1.00000, isnull(AA.INPUT_QTY,0) * 1.00000) - isnull(BB.REMAIN_QTY, 0))*1.0)/ ZTB_SX_RESULT.PD * ZTB_SX_RESULT.CAVITY * 1000 ELSE 0 END AS ESTIMATED_QTY, 
          isnull(INSPECT_OUTPUT_TABLE.INS_OUTPUT,0) AS INS_OUTPUT
        FROM 
          ZTB_QLSXPLAN 
          LEFT JOIN AA ON (AA.PLAN_ID_SUDUNG = ZTB_QLSXPLAN.PLAN_ID AND AA.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
          LEFT JOIN BB ON (BB.PLAN_ID = ZTB_QLSXPLAN.PLAN_ID AND BB.CTR_CD = ZTB_QLSXPLAN.CTR_CD)  
          LEFT JOIN ZTB_SX_RESULT ON (ZTB_SX_RESULT.PLAN_ID = ZTB_QLSXPLAN.PLAN_ID AND ZTB_SX_RESULT.CTR_CD = ZTB_QLSXPLAN.CTR_CD) 
          LEFT JOIN INSPECT_OUTPUT_TABLE ON (ZTB_QLSXPLAN.PLAN_ID = INSPECT_OUTPUT_TABLE.PLAN_ID AND ZTB_QLSXPLAN.CTR_CD = INSPECT_OUTPUT_TABLE.CTR_CD) 
          LEFT JOIN P400 ON (P400.PROD_REQUEST_NO = ZTB_QLSXPLAN.PROD_REQUEST_NO AND P400.CTR_CD = ZTB_QLSXPLAN.CTR_CD) 
          WHERE P400.CODE_55 <> '04' AND PLAN_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE}' AND ZTB_SX_RESULT.SX_DATE is not null AND ZTB_QLSXPLAN.CTR_CD = '${DATA.CTR_CD}'
        )
        SELECT PLAN_DATE AS INPUT_DATE, SUM(ESTIMATED_QTY) AS PURE_INPUT, SUM(INS_OUTPUT) AS PURE_OUTPUT FROM SXDATATB GROUP BY PLAN_DATE
        ORDER BY PLAN_DATE ASC
            `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "datasxweeklylosstrend":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
             WITH AA AS (
    SELECT PLAN_ID_SUDUNG, M090.M_NAME, SUM(isnull(TOTAL_IN_QTY, 0)) AS INPUT_QTY, IN_KHO_SX.CTR_CD
    FROM IN_KHO_SX
    LEFT JOIN M090 ON (M090.M_CODE = IN_KHO_SX.M_CODE AND M090.CTR_CD = IN_KHO_SX.CTR_CD)
    WHERE IN_KHO_SX.USE_YN = 'X' AND IN_KHO_SX.CTR_CD = '${DATA.CTR_CD}'
    GROUP BY IN_KHO_SX.PLAN_ID_SUDUNG, M090.M_NAME, IN_KHO_SX.CTR_CD
    ),
BB AS (
    SELECT P500.PLAN_ID, M090.M_NAME, SUM(isnull(REMAIN_QTY, 0)) AS REMAIN_QTY, SUM(isnull(INPUT_QTY, 0)) AS INPUT_QTY, P500.CTR_CD
    FROM P500
    LEFT JOIN M090 ON (M090.M_CODE = P500.M_CODE AND M090.CTR_CD = P500.CTR_CD)
    WHERE P500.CTR_CD = '${DATA.CTR_CD}'
    GROUP BY PLAN_ID, M090.M_NAME, P500.CTR_CD),
INSPECT_OUTPUT_TABLE AS 
(SELECT 
      PLAN_ID, 
      SUM(
        CAST(OUTPUT_QTY_EA as float)
      ) AS INS_OUTPUT,
      CTR_CD
    FROM 
      ZTBINSPECTOUTPUTTB 
    WHERE CTR_CD = '${DATA.CTR_CD}'
    GROUP BY 
      PLAN_ID, CTR_CD),
SXDATATB AS
(
SELECT
ZTB_QLSXPLAN.PLAN_DATE,
CASE WHEN ZTB_QLSXPLAN.PROCESS_NUMBER = 1 THEN
(isnull(BB.INPUT_QTY * 1.00000, isnull(AA.INPUT_QTY * 1.00000,0)) - isnull(BB.REMAIN_QTY, 0)) ELSE 0 END AS USED_QTY,
 CASE WHEN ZTB_QLSXPLAN.PROCESS_NUMBER = 1 THEN ((isnull(BB.INPUT_QTY * 1.00000, isnull(AA.INPUT_QTY,0) * 1.00000) - isnull(BB.REMAIN_QTY, 0))*1.0)/ ZTB_SX_RESULT.PD * ZTB_SX_RESULT.CAVITY * 1000 ELSE 0 END AS ESTIMATED_QTY, 
  isnull(INSPECT_OUTPUT_TABLE.INS_OUTPUT,0) AS INS_OUTPUT,
  ZTB_QLSXPLAN.CTR_CD
FROM 
  ZTB_QLSXPLAN 
  LEFT JOIN AA ON (AA.PLAN_ID_SUDUNG = ZTB_QLSXPLAN.PLAN_ID AND AA.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
  LEFT JOIN BB ON (BB.PLAN_ID = ZTB_QLSXPLAN.PLAN_ID AND BB.CTR_CD = ZTB_QLSXPLAN.CTR_CD)  
  LEFT JOIN ZTB_SX_RESULT ON (ZTB_SX_RESULT.PLAN_ID = ZTB_QLSXPLAN.PLAN_ID AND ZTB_SX_RESULT.CTR_CD = ZTB_QLSXPLAN.CTR_CD) 
  LEFT JOIN INSPECT_OUTPUT_TABLE ON (ZTB_QLSXPLAN.PLAN_ID = INSPECT_OUTPUT_TABLE.PLAN_ID AND ZTB_QLSXPLAN.CTR_CD = INSPECT_OUTPUT_TABLE.CTR_CD) 
  LEFT JOIN P400 ON (P400.PROD_REQUEST_NO = ZTB_QLSXPLAN.PROD_REQUEST_NO AND P400.CTR_CD = ZTB_QLSXPLAN.CTR_CD) 
  WHERE P400.CODE_55 <> '04' AND PLAN_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE}' AND ZTB_SX_RESULT.SX_DATE is not null AND ZTB_QLSXPLAN.CTR_CD = '${DATA.CTR_CD}'
 )
 SELECT YEAR(PLAN_DATE) AS INPUT_YEAR, DATEPART(WEEK, PLAN_DATE) AS INPUT_WEEK, CONCAT(YEAR(PLAN_DATE),'_',DATEPART(WEEK, PLAN_DATE)) AS INPUT_YW, SUM(ESTIMATED_QTY) AS PURE_INPUT, SUM(INS_OUTPUT) AS PURE_OUTPUT FROM SXDATATB 
 GROUP BY YEAR(PLAN_DATE), DATEPART(WEEK, PLAN_DATE)
 ORDER BY YEAR(PLAN_DATE) DESC, DATEPART(WEEK, PLAN_DATE) DESC
            `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "datasxmonthlylosstrend":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
             WITH AA AS (
    SELECT PLAN_ID_SUDUNG, M090.M_NAME, SUM(isnull(TOTAL_IN_QTY, 0)) AS INPUT_QTY, IN_KHO_SX.CTR_CD
    FROM IN_KHO_SX
    LEFT JOIN M090 ON (M090.M_CODE = IN_KHO_SX.M_CODE AND M090.CTR_CD = IN_KHO_SX.CTR_CD)
    WHERE IN_KHO_SX.USE_YN = 'X' AND IN_KHO_SX.CTR_CD = '${DATA.CTR_CD}'
    GROUP BY IN_KHO_SX.PLAN_ID_SUDUNG, M090.M_NAME, IN_KHO_SX.CTR_CD
    ),
BB AS (
    SELECT P500.PLAN_ID, M090.M_NAME, SUM(isnull(REMAIN_QTY, 0)) AS REMAIN_QTY, SUM(isnull(INPUT_QTY, 0)) AS INPUT_QTY, P500.CTR_CD
    FROM P500
    LEFT JOIN M090 ON (M090.M_CODE = P500.M_CODE AND M090.CTR_CD = P500.CTR_CD)
    WHERE P500.CTR_CD = '${DATA.CTR_CD}'
    GROUP BY PLAN_ID, M090.M_NAME, P500.CTR_CD),
INSPECT_OUTPUT_TABLE AS 
(SELECT 
      PLAN_ID, 
      SUM(
        CAST(OUTPUT_QTY_EA as float)
      ) AS INS_OUTPUT,
      CTR_CD
    FROM 
      ZTBINSPECTOUTPUTTB 
    WHERE CTR_CD = '${DATA.CTR_CD}'
    GROUP BY 
      PLAN_ID, CTR_CD),
SXDATATB AS
(
SELECT
ZTB_QLSXPLAN.PLAN_DATE,
CASE WHEN ZTB_QLSXPLAN.PROCESS_NUMBER = 1 THEN
(isnull(BB.INPUT_QTY * 1.00000, isnull(AA.INPUT_QTY * 1.00000,0)) - isnull(BB.REMAIN_QTY, 0)) ELSE 0 END AS USED_QTY,
 CASE WHEN ZTB_QLSXPLAN.PROCESS_NUMBER = 1 THEN ((isnull(BB.INPUT_QTY * 1.00000, isnull(AA.INPUT_QTY,0) * 1.00000) - isnull(BB.REMAIN_QTY, 0))*1.0)/ ZTB_SX_RESULT.PD * ZTB_SX_RESULT.CAVITY * 1000 ELSE 0 END AS ESTIMATED_QTY, 
  isnull(INSPECT_OUTPUT_TABLE.INS_OUTPUT,0) AS INS_OUTPUT,
  ZTB_QLSXPLAN.CTR_CD
FROM 
  ZTB_QLSXPLAN 
  LEFT JOIN AA ON (AA.PLAN_ID_SUDUNG = ZTB_QLSXPLAN.PLAN_ID AND AA.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
  LEFT JOIN BB ON (BB.PLAN_ID = ZTB_QLSXPLAN.PLAN_ID AND BB.CTR_CD = ZTB_QLSXPLAN.CTR_CD)  
  LEFT JOIN ZTB_SX_RESULT ON (ZTB_SX_RESULT.PLAN_ID = ZTB_QLSXPLAN.PLAN_ID AND ZTB_SX_RESULT.CTR_CD = ZTB_QLSXPLAN.CTR_CD) 
  LEFT JOIN INSPECT_OUTPUT_TABLE ON (ZTB_QLSXPLAN.PLAN_ID = INSPECT_OUTPUT_TABLE.PLAN_ID AND ZTB_QLSXPLAN.CTR_CD = INSPECT_OUTPUT_TABLE.CTR_CD) 
  LEFT JOIN P400 ON (P400.PROD_REQUEST_NO = ZTB_QLSXPLAN.PROD_REQUEST_NO AND P400.CTR_CD = ZTB_QLSXPLAN.CTR_CD) 
  WHERE P400.CODE_55 <> '04' AND PLAN_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE}' AND ZTB_SX_RESULT.SX_DATE is not null AND ZTB_QLSXPLAN.CTR_CD = '${DATA.CTR_CD}'
 )
 SELECT YEAR(PLAN_DATE) AS INPUT_YEAR, MONTH(PLAN_DATE) AS INPUT_MONTH, CONCAT(YEAR(PLAN_DATE),'_',MONTH(PLAN_DATE)) AS INPUT_YM, SUM(ESTIMATED_QTY) AS PURE_INPUT, SUM(INS_OUTPUT) AS PURE_OUTPUT FROM SXDATATB 
 GROUP BY YEAR(PLAN_DATE), MONTH(PLAN_DATE)
 ORDER BY YEAR(PLAN_DATE) DESC, MONTH(PLAN_DATE) DESC
            `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "datasxyearlylosstrend":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
             WITH AA AS (
    SELECT PLAN_ID_SUDUNG, M090.M_NAME, SUM(isnull(TOTAL_IN_QTY, 0)) AS INPUT_QTY, IN_KHO_SX.CTR_CD
    FROM IN_KHO_SX
    LEFT JOIN M090 ON (M090.M_CODE = IN_KHO_SX.M_CODE)
    WHERE IN_KHO_SX.USE_YN = 'X' AND IN_KHO_SX.CTR_CD = '${DATA.CTR_CD}'
    GROUP BY IN_KHO_SX.PLAN_ID_SUDUNG, M090.M_NAME, IN_KHO_SX.CTR_CD
    ),
BB AS (
    SELECT P500.PLAN_ID, M090.M_NAME, SUM(isnull(REMAIN_QTY, 0)) AS REMAIN_QTY, SUM(isnull(INPUT_QTY, 0)) AS INPUT_QTY, P500.CTR_CD
    FROM P500
    LEFT JOIN M090 ON (M090.M_CODE = P500.M_CODE)
    WHERE P500.CTR_CD = '${DATA.CTR_CD}'
    GROUP BY PLAN_ID, M090.M_NAME, P500.CTR_CD),
INSPECT_OUTPUT_TABLE AS 
(SELECT 
      PLAN_ID, 
      SUM(
        CAST(OUTPUT_QTY_EA as float)
      ) AS INS_OUTPUT,
      CTR_CD
    FROM 
      ZTBINSPECTOUTPUTTB 
    WHERE CTR_CD = '${DATA.CTR_CD}'
    GROUP BY 
      PLAN_ID, CTR_CD),
SXDATATB AS
(
SELECT
ZTB_QLSXPLAN.PLAN_DATE,
CASE WHEN ZTB_QLSXPLAN.PROCESS_NUMBER = 1 THEN
(isnull(BB.INPUT_QTY * 1.00000, isnull(AA.INPUT_QTY * 1.00000,0)) - isnull(BB.REMAIN_QTY, 0)) ELSE 0 END AS USED_QTY,
 CASE WHEN ZTB_QLSXPLAN.PROCESS_NUMBER = 1 THEN ((isnull(BB.INPUT_QTY * 1.00000, isnull(AA.INPUT_QTY,0) * 1.00000) - isnull(BB.REMAIN_QTY, 0))*1.0)/ ZTB_SX_RESULT.PD * ZTB_SX_RESULT.CAVITY * 1000 ELSE 0 END AS ESTIMATED_QTY, 
  isnull(INSPECT_OUTPUT_TABLE.INS_OUTPUT,0) AS INS_OUTPUT,
  ZTB_QLSXPLAN.CTR_CD
FROM 
  ZTB_QLSXPLAN 
  LEFT JOIN AA ON (AA.PLAN_ID_SUDUNG = ZTB_QLSXPLAN.PLAN_ID AND AA.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
  LEFT JOIN BB ON (BB.PLAN_ID = ZTB_QLSXPLAN.PLAN_ID AND BB.CTR_CD = ZTB_QLSXPLAN.CTR_CD)  
  LEFT JOIN ZTB_SX_RESULT ON (ZTB_SX_RESULT.PLAN_ID = ZTB_QLSXPLAN.PLAN_ID AND ZTB_SX_RESULT.CTR_CD = ZTB_QLSXPLAN.CTR_CD) 
  LEFT JOIN INSPECT_OUTPUT_TABLE ON (ZTB_QLSXPLAN.PLAN_ID = INSPECT_OUTPUT_TABLE.PLAN_ID AND ZTB_QLSXPLAN.CTR_CD = INSPECT_OUTPUT_TABLE.CTR_CD) 
  LEFT JOIN P400 ON (P400.PROD_REQUEST_NO = ZTB_QLSXPLAN.PROD_REQUEST_NO AND P400.CTR_CD = ZTB_QLSXPLAN.CTR_CD) 
  WHERE P400.CODE_55 <> '04' AND PLAN_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE}' AND ZTB_SX_RESULT.SX_DATE is not null AND ZTB_QLSXPLAN.CTR_CD = '${DATA.CTR_CD}'
 )
 SELECT YEAR(PLAN_DATE) AS INPUT_YEAR, SUM(ESTIMATED_QTY) AS PURE_INPUT, SUM(INS_OUTPUT) AS PURE_OUTPUT FROM SXDATATB 
 GROUP BY YEAR(PLAN_DATE)
 ORDER BY YEAR(PLAN_DATE) DESC
            `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "sxdailyachivementtrending":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
           SELECT  ZTB_SX_RESULT.SX_DATE, SUM(ZTB_SX_RESULT.SX_RESULT) AS SX_RESULT, SUM(ZTB_QLSXPLAN.PLAN_QTY) AS PLAN_QTY, ZTB_SX_RESULT.CTR_CD  
          FROM ZTB_SX_RESULT LEFT JOIN ZTB_QLSXPLAN ON (ZTB_SX_RESULT.PLAN_ID = ZTB_QLSXPLAN.PLAN_ID AND ZTB_SX_RESULT.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
          WHERE ZTB_SX_RESULT.SX_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE}'
            AND ZTB_SX_RESULT.CTR_CD = '${DATA.CTR_CD}'
          GROUP BY ZTB_SX_RESULT.SX_DATE, ZTB_SX_RESULT.CTR_CD
          ORDER BY SX_DATE ASC             
            `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "sxweeklyachivementtrending":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
           SELECT  YEAR(ZTB_SX_RESULT.SX_DATE) AS SX_YEAR, DATEPART(WEEK,ZTB_SX_RESULT.SX_DATE) AS SX_WEEK, CONCAT(YEAR(ZTB_SX_RESULT.SX_DATE),'_', DATEPART(WEEK,ZTB_SX_RESULT.SX_DATE)) AS SX_YW, SUM(ZTB_SX_RESULT.SX_RESULT) AS SX_RESULT, SUM(ZTB_QLSXPLAN.PLAN_QTY) AS PLAN_QTY, ZTB_SX_RESULT.CTR_CD  
 FROM ZTB_SX_RESULT LEFT JOIN ZTB_QLSXPLAN ON (ZTB_SX_RESULT.PLAN_ID = ZTB_QLSXPLAN.PLAN_ID AND ZTB_SX_RESULT.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
  WHERE ZTB_SX_RESULT.SX_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE}'
    AND ZTB_SX_RESULT.CTR_CD = '${DATA.CTR_CD}'
 GROUP BY YEAR(ZTB_SX_RESULT.SX_DATE), DATEPART(WEEK,ZTB_SX_RESULT.SX_DATE), ZTB_SX_RESULT.CTR_CD
 ORDER BY YEAR(ZTB_SX_RESULT.SX_DATE) DESC, DATEPART(WEEK,ZTB_SX_RESULT.SX_DATE) DESC         
            `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "sxmonthlyachivementtrending":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
           SELECT  YEAR(ZTB_SX_RESULT.SX_DATE) AS SX_YEAR, MONTH(ZTB_SX_RESULT.SX_DATE) AS SX_MONTH, CONCAT(YEAR(ZTB_SX_RESULT.SX_DATE),'_', MONTH(ZTB_SX_RESULT.SX_DATE)) AS SX_YM, SUM(ZTB_SX_RESULT.SX_RESULT) AS SX_RESULT, SUM(ZTB_QLSXPLAN.PLAN_QTY) AS PLAN_QTY, ZTB_SX_RESULT.CTR_CD  
 FROM ZTB_SX_RESULT LEFT JOIN ZTB_QLSXPLAN ON (ZTB_SX_RESULT.PLAN_ID = ZTB_QLSXPLAN.PLAN_ID AND ZTB_SX_RESULT.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
  WHERE ZTB_SX_RESULT.SX_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE}'
    AND ZTB_SX_RESULT.CTR_CD = '${DATA.CTR_CD}'
 GROUP BY YEAR(ZTB_SX_RESULT.SX_DATE), MONTH(ZTB_SX_RESULT.SX_DATE), ZTB_SX_RESULT.CTR_CD
 ORDER BY YEAR(ZTB_SX_RESULT.SX_DATE) DESC, MONTH(ZTB_SX_RESULT.SX_DATE) DESC      
            `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "sxyearlyachivementtrending":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
           SELECT  YEAR(ZTB_SX_RESULT.SX_DATE) AS SX_YEAR, SUM(CAST(ZTB_SX_RESULT.SX_RESULT AS float)) AS SX_RESULT, SUM(CAST(ZTB_QLSXPLAN.PLAN_QTY AS float)) AS PLAN_QTY, ZTB_SX_RESULT.CTR_CD  
 FROM ZTB_SX_RESULT LEFT JOIN ZTB_QLSXPLAN ON (ZTB_SX_RESULT.PLAN_ID = ZTB_QLSXPLAN.PLAN_ID AND ZTB_SX_RESULT.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
  WHERE ZTB_SX_RESULT.SX_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE}'
    AND ZTB_SX_RESULT.CTR_CD = '${DATA.CTR_CD}'
 GROUP BY YEAR(ZTB_SX_RESULT.SX_DATE), ZTB_SX_RESULT.CTR_CD
 ORDER BY YEAR(ZTB_SX_RESULT.SX_DATE) DESC     
            `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "dailyEQEffTrending":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
           WITH AA AS
(
SELECT
    ZTB_SX_RESULT.SX_DATE,   
    DATEDIFF(minute, SETTING_START_TIME, MASS_END_TIME) as TOTAL_TIME,(DATEDIFF(minute, MASS_START_TIME, MASS_END_TIME)) AS RUN_TIME_SX, 
    DATEDIFF(minute, SETTING_START_TIME, MASS_START_TIME) as SETTING_TIME,(isnull(LAY_DO, 0) + isnull(MAY_HONG, 0) + isnull(DAO_NG, 0) + isnull(CHO_BTP, 0) + isnull(CHO_LIEU, 0) + isnull(HET_LIEU, 0) + isnull(LIEU_NG, 0) + isnull(CAN_HANG, 0) + isnull(HOP_FL, 0) + isnull(CHO_QC, 0) + isnull(CHOT_BAOCAO, 0) + isnull(CHUYEN_CODE, 0) + isnull(KHAC, 0)) AS TOTAL_LOSS_TIME,
    ZTB_SX_RESULT.CTR_CD     
    FROM 
    ZTB_SX_RESULT 
    LEFT JOIN ZTB_SX_EFFICIENCY ON (
        ZTB_SX_RESULT.PLAN_ID = ZTB_SX_EFFICIENCY.PLAN_ID 
        AND ZTB_SX_RESULT.WORK_SHIFT = ZTB_SX_EFFICIENCY.WORK_SHIFT
        AND ZTB_SX_RESULT.CTR_CD = ZTB_SX_EFFICIENCY.CTR_CD
    )
    LEFT JOIN ZTB_QLSXPLAN ON (
        ZTB_SX_RESULT.PLAN_ID = ZTB_QLSXPLAN.PLAN_ID
        AND ZTB_SX_RESULT.CTR_CD = ZTB_QLSXPLAN.CTR_CD
    ) 
    LEFT JOIN M100 ON (
        M100.G_CODE = ZTB_QLSXPLAN.G_CODE
        AND ZTB_SX_RESULT.CTR_CD = M100.CTR_CD
    ) 
    LEFT JOIN P400 ON (ZTB_QLSXPLAN.PROD_REQUEST_NO = P400.PROD_REQUEST_NO
        AND ZTB_SX_RESULT.CTR_CD = P400.CTR_CD)
    WHERE P400.CODE_55 <> '04' AND ZTB_SX_RESULT.MASS_END_TIME is not null  AND ZTB_SX_RESULT.MASS_START_TIME is not null  AND ZTB_SX_RESULT.SETTING_START_TIME is not null
    AND ZTB_SX_RESULT.CTR_CD='${DATA.CTR_CD}'
)
SELECT 
AA.SX_DATE,
74880 AS ALVB_TIME,
SUM(AA.TOTAL_TIME) AS TOTAL_TIME, 
SUM(AA.RUN_TIME_SX) AS RUN_TIME_SX, 
CASE WHEN SUM(AA.RUN_TIME_SX) - SUM(AA.TOTAL_LOSS_TIME) > =0 THEN SUM(AA.RUN_TIME_SX) - SUM(AA.TOTAL_LOSS_TIME) ELSE 0  END AS PURE_RUN_TIME,
SUM(AA.SETTING_TIME) AS SETTING_TIME, 
SUM(AA.TOTAL_LOSS_TIME) AS LOSS_TIME, 
CAST(SUM(AA.RUN_TIME_SX) as float)/ CAST(SUM(AA.TOTAL_TIME) as float) AS HIEU_SUAT_TIME, 
CAST(SUM(AA.SETTING_TIME) as float)/ CAST(SUM(AA.TOTAL_TIME) as float) AS SETTING_TIME_RATE, 
CAST(SUM(AA.TOTAL_LOSS_TIME) as float)/ CAST(SUM(AA.TOTAL_TIME) as float) AS LOSS_TIME_RATE,
AA.CTR_CD
FROM AA
WHERE AA.SX_DATE is not null AND AA.SX_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE}'
AND AA.CTR_CD='${DATA.CTR_CD}'
GROUP BY 
AA.SX_DATE,
AA.CTR_CD
ORDER BY 
AA.SX_DATE DESC
            `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "weeklyEQEffTrending":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
           WITH AA AS
(
SELECT
    ZTB_SX_RESULT.SX_DATE,   
    DATEDIFF(minute, SETTING_START_TIME, MASS_END_TIME) as TOTAL_TIME,(DATEDIFF(minute, MASS_START_TIME, MASS_END_TIME)) AS RUN_TIME_SX, 
    DATEDIFF(minute, SETTING_START_TIME, MASS_START_TIME) as SETTING_TIME,(isnull(LAY_DO, 0) + isnull(MAY_HONG, 0) + isnull(DAO_NG, 0) + isnull(CHO_BTP, 0) + isnull(CHO_LIEU, 0) + isnull(HET_LIEU, 0) + isnull(LIEU_NG, 0) + isnull(CAN_HANG, 0) + isnull(HOP_FL, 0) + isnull(CHO_QC, 0) + isnull(CHOT_BAOCAO, 0) + isnull(CHUYEN_CODE, 0) + isnull(KHAC, 0)) AS TOTAL_LOSS_TIME,
    ZTB_SX_RESULT.CTR_CD     
    FROM 
    ZTB_SX_RESULT 
    LEFT JOIN ZTB_SX_EFFICIENCY ON (
        ZTB_SX_RESULT.PLAN_ID = ZTB_SX_EFFICIENCY.PLAN_ID 
        AND ZTB_SX_RESULT.WORK_SHIFT = ZTB_SX_EFFICIENCY.WORK_SHIFT
        AND ZTB_SX_RESULT.CTR_CD = ZTB_SX_EFFICIENCY.CTR_CD
    )
    LEFT JOIN ZTB_QLSXPLAN ON (
        ZTB_SX_RESULT.PLAN_ID = ZTB_QLSXPLAN.PLAN_ID
        AND ZTB_SX_RESULT.CTR_CD = ZTB_QLSXPLAN.CTR_CD
    ) 
    LEFT JOIN M100 ON (
        M100.G_CODE = ZTB_QLSXPLAN.G_CODE
        AND ZTB_SX_RESULT.CTR_CD = M100.CTR_CD
    ) 
    LEFT JOIN P400 ON (ZTB_QLSXPLAN.PROD_REQUEST_NO = P400.PROD_REQUEST_NO
        AND ZTB_SX_RESULT.CTR_CD = P400.CTR_CD)
    WHERE P400.CODE_55 <> '04' AND ZTB_SX_RESULT.MASS_END_TIME is not null  AND ZTB_SX_RESULT.MASS_START_TIME is not null  AND ZTB_SX_RESULT.SETTING_START_TIME is not null
    AND ZTB_SX_RESULT.CTR_CD='${DATA.CTR_CD}'
)
SELECT 
YEAR(AA.SX_DATE) AS SX_YEAR,
449280 AS ALVB_TIME,
DATEPART(WEEK, AA.SX_DATE) AS SX_WEEK,
CONCAT(YEAR(AA.SX_DATE),'_',DATEPART(WEEK, AA.SX_DATE)) AS SX_YW,
SUM(AA.TOTAL_TIME) AS TOTAL_TIME, 
CASE WHEN SUM(AA.RUN_TIME_SX) - SUM(AA.TOTAL_LOSS_TIME) > =0 THEN SUM(AA.RUN_TIME_SX) - SUM(AA.TOTAL_LOSS_TIME) ELSE 0  END AS PURE_RUN_TIME,
SUM(AA.RUN_TIME_SX) AS RUN_TIME_SX, 
SUM(AA.SETTING_TIME) AS SETTING_TIME, 
SUM(AA.TOTAL_LOSS_TIME) AS LOSS_TIME, 
CAST(SUM(AA.RUN_TIME_SX) as float)/ CAST(SUM(AA.TOTAL_TIME) as float) AS HIEU_SUAT_TIME, 
CAST(SUM(AA.SETTING_TIME) as float)/ CAST(SUM(AA.TOTAL_TIME) as float) AS SETTING_TIME_RATE, 
CAST(SUM(AA.TOTAL_LOSS_TIME) as float)/ CAST(SUM(AA.TOTAL_TIME) as float) AS LOSS_TIME_RATE,
AA.CTR_CD
FROM AA
WHERE AA.SX_DATE is not null AND AA.SX_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE}'
AND AA.CTR_CD='${DATA.CTR_CD}'
GROUP BY 
YEAR(AA.SX_DATE), DATEPART(WEEK, AA.SX_DATE), AA.CTR_CD
ORDER BY 
YEAR(AA.SX_DATE) DESC, DATEPART(WEEK, AA.SX_DATE) DESC
            `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "monthlyEQEffTrending":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
           WITH AA AS
(
SELECT
    ZTB_SX_RESULT.SX_DATE,   
    DATEDIFF(minute, SETTING_START_TIME, MASS_END_TIME) as TOTAL_TIME,(DATEDIFF(minute, MASS_START_TIME, MASS_END_TIME)) AS RUN_TIME_SX, 
    DATEDIFF(minute, SETTING_START_TIME, MASS_START_TIME) as SETTING_TIME,(isnull(LAY_DO, 0) + isnull(MAY_HONG, 0) + isnull(DAO_NG, 0) + isnull(CHO_BTP, 0) + isnull(CHO_LIEU, 0) + isnull(HET_LIEU, 0) + isnull(LIEU_NG, 0) + isnull(CAN_HANG, 0) + isnull(HOP_FL, 0) + isnull(CHO_QC, 0) + isnull(CHOT_BAOCAO, 0) + isnull(CHUYEN_CODE, 0) + isnull(KHAC, 0)) AS TOTAL_LOSS_TIME,
    ZTB_SX_RESULT.CTR_CD     
    FROM 
    ZTB_SX_RESULT 
    LEFT JOIN ZTB_SX_EFFICIENCY ON (
        ZTB_SX_RESULT.PLAN_ID = ZTB_SX_EFFICIENCY.PLAN_ID 
        AND ZTB_SX_RESULT.WORK_SHIFT = ZTB_SX_EFFICIENCY.WORK_SHIFT
        AND ZTB_SX_RESULT.CTR_CD = ZTB_SX_EFFICIENCY.CTR_CD
    )
    LEFT JOIN ZTB_QLSXPLAN ON (
        ZTB_SX_RESULT.PLAN_ID = ZTB_QLSXPLAN.PLAN_ID
        AND ZTB_SX_RESULT.CTR_CD = ZTB_QLSXPLAN.CTR_CD
    ) 
    LEFT JOIN M100 ON (
        M100.G_CODE = ZTB_QLSXPLAN.G_CODE
        AND ZTB_SX_RESULT.CTR_CD = M100.CTR_CD
    ) 
    LEFT JOIN P400 ON (ZTB_QLSXPLAN.PROD_REQUEST_NO = P400.PROD_REQUEST_NO
        AND ZTB_SX_RESULT.CTR_CD = P400.CTR_CD)
    WHERE P400.CODE_55 <> '04' AND ZTB_SX_RESULT.MASS_END_TIME is not null  AND ZTB_SX_RESULT.MASS_START_TIME is not null  AND ZTB_SX_RESULT.SETTING_START_TIME is not null
    AND ZTB_SX_RESULT.CTR_CD='${DATA.CTR_CD}'
)
SELECT 
YEAR(AA.SX_DATE) AS SX_YEAR,
MONTH(AA.SX_DATE) AS SX_MONTH,
CONCAT(YEAR(AA.SX_DATE),'_',MONTH(AA.SX_DATE)) AS SX_YM,
1797120 AS ALVB_TIME,
SUM(AA.TOTAL_TIME) AS TOTAL_TIME, 
CASE WHEN SUM(AA.RUN_TIME_SX) - SUM(AA.TOTAL_LOSS_TIME) > =0 THEN SUM(AA.RUN_TIME_SX) - SUM(AA.TOTAL_LOSS_TIME) ELSE 0  END AS PURE_RUN_TIME,
SUM(AA.RUN_TIME_SX) AS RUN_TIME_SX, 
SUM(AA.SETTING_TIME) AS SETTING_TIME, 
SUM(AA.TOTAL_LOSS_TIME) AS LOSS_TIME, 
CAST(SUM(AA.RUN_TIME_SX) as float)/ CAST(SUM(AA.TOTAL_TIME) as float) AS HIEU_SUAT_TIME, 
CAST(SUM(AA.SETTING_TIME) as float)/ CAST(SUM(AA.TOTAL_TIME) as float) AS SETTING_TIME_RATE, 
CAST(SUM(AA.TOTAL_LOSS_TIME) as float)/ CAST(SUM(AA.TOTAL_TIME) as float) AS LOSS_TIME_RATE,
AA.CTR_CD
FROM AA
WHERE AA.SX_DATE is not null AND AA.SX_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE}'
AND AA.CTR_CD='${DATA.CTR_CD}'
GROUP BY 
YEAR(AA.SX_DATE),MONTH(AA.SX_DATE),AA.CTR_CD
ORDER BY 
YEAR(AA.SX_DATE) DESC, MONTH(AA.SX_DATE) DESC
            `;
          ////console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "yearlyEQEffTrending":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
           WITH AA AS
(
SELECT
    ZTB_SX_RESULT.SX_DATE,   
    DATEDIFF(minute, SETTING_START_TIME, MASS_END_TIME) as TOTAL_TIME,(DATEDIFF(minute, MASS_START_TIME, MASS_END_TIME)) AS RUN_TIME_SX, 
    DATEDIFF(minute, SETTING_START_TIME, MASS_START_TIME) as SETTING_TIME,(isnull(LAY_DO, 0) + isnull(MAY_HONG, 0) + isnull(DAO_NG, 0) + isnull(CHO_BTP, 0) + isnull(CHO_LIEU, 0) + isnull(HET_LIEU, 0) + isnull(LIEU_NG, 0) + isnull(CAN_HANG, 0) + isnull(HOP_FL, 0) + isnull(CHO_QC, 0) + isnull(CHOT_BAOCAO, 0) + isnull(CHUYEN_CODE, 0) + isnull(KHAC, 0)) AS TOTAL_LOSS_TIME,
    ZTB_SX_RESULT.CTR_CD     
    FROM 
    ZTB_SX_RESULT 
    LEFT JOIN ZTB_SX_EFFICIENCY ON (
        ZTB_SX_RESULT.PLAN_ID = ZTB_SX_EFFICIENCY.PLAN_ID 
        AND ZTB_SX_RESULT.WORK_SHIFT = ZTB_SX_EFFICIENCY.WORK_SHIFT
        AND ZTB_SX_RESULT.CTR_CD = ZTB_SX_EFFICIENCY.CTR_CD
    )
    LEFT JOIN ZTB_QLSXPLAN ON (
        ZTB_SX_RESULT.PLAN_ID = ZTB_QLSXPLAN.PLAN_ID
        AND ZTB_SX_RESULT.CTR_CD = ZTB_QLSXPLAN.CTR_CD
    ) 
    LEFT JOIN M100 ON (
        M100.G_CODE = ZTB_QLSXPLAN.G_CODE
        AND ZTB_SX_RESULT.CTR_CD = M100.CTR_CD
    ) 
    LEFT JOIN P400 ON (ZTB_QLSXPLAN.PROD_REQUEST_NO = P400.PROD_REQUEST_NO
        AND ZTB_SX_RESULT.CTR_CD = P400.CTR_CD)
    WHERE P400.CODE_55 <> '04' AND ZTB_SX_RESULT.MASS_END_TIME is not null  AND ZTB_SX_RESULT.MASS_START_TIME is not null  AND ZTB_SX_RESULT.SETTING_START_TIME is not null
    AND ZTB_SX_RESULT.CTR_CD='${DATA.CTR_CD}'
)
SELECT 
YEAR(AA.SX_DATE) AS SX_YEAR,
21565440 AS ALVB_TIME,
SUM(AA.TOTAL_TIME) AS TOTAL_TIME, 
CASE WHEN SUM(AA.RUN_TIME_SX) - SUM(AA.TOTAL_LOSS_TIME) > =0 THEN SUM(AA.RUN_TIME_SX) - SUM(AA.TOTAL_LOSS_TIME) ELSE 0  END AS PURE_RUN_TIME,
SUM(AA.RUN_TIME_SX) AS RUN_TIME_SX, 
SUM(AA.SETTING_TIME) AS SETTING_TIME, 
SUM(AA.TOTAL_LOSS_TIME) AS LOSS_TIME, 
CAST(SUM(AA.RUN_TIME_SX) as float)/ CAST(SUM(AA.TOTAL_TIME) as float) AS HIEU_SUAT_TIME, 
CAST(SUM(AA.SETTING_TIME) as float)/ CAST(SUM(AA.TOTAL_TIME) as float) AS SETTING_TIME_RATE, 
CAST(SUM(AA.TOTAL_LOSS_TIME) as float)/ CAST(SUM(AA.TOTAL_TIME) as float) AS LOSS_TIME_RATE,
AA.CTR_CD
FROM AA
WHERE AA.SX_DATE is not null AND AA.SX_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE}'
AND AA.CTR_CD='${DATA.CTR_CD}'
GROUP BY 
YEAR(AA.SX_DATE), AA.CTR_CD
ORDER BY 
YEAR(AA.SX_DATE) DESC
            `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "sxLossTimeByReason":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
            WITH LOSS_TIME_TB AS
            (
            SELECT SUM(isnull(LAY_DO, 0)) AS LAY_DO , SUM(isnull(MAY_HONG, 0)) AS MAY_HONG , SUM(isnull(DAO_NG, 0)) AS DAO_NG , SUM(isnull(CHO_BTP, 0)) AS CHO_BTP , SUM(isnull(CHO_LIEU, 0)) AS CHO_LIEU , SUM(isnull(HET_LIEU, 0)) AS HET_LIEU , SUM(isnull(LIEU_NG, 0)) AS LIEU_NG , SUM(isnull(CAN_HANG, 0)) AS CAN_HANG , SUM(isnull(HOP_FL, 0)) AS HOP_FL , SUM(isnull(CHO_QC, 0)) AS CHO_QC , SUM(isnull(CHOT_BAOCAO, 0)) AS CHOT_BAOCAO , SUM(isnull(CHUYEN_CODE, 0)) AS CHUYEN_CODE , SUM(isnull(KHAC, 0)) AS KHAC, SUM((isnull(LAY_DO, 0) + isnull(MAY_HONG, 0) + isnull(DAO_NG, 0) + isnull(CHO_BTP, 0) + isnull(CHO_LIEU, 0) + isnull(HET_LIEU, 0) + isnull(LIEU_NG, 0) + isnull(CAN_HANG, 0) + isnull(HOP_FL, 0) + isnull(CHO_QC, 0) + isnull(CHOT_BAOCAO, 0) + isnull(CHUYEN_CODE, 0) + isnull(KHAC, 0))) AS TOTAL_LOSS_TIME, ZTB_SX_EFFICIENCY.CTR_CD FROM ZTB_SX_EFFICIENCY
            LEFT JOIN ZTB_SX_RESULT ON (ZTB_SX_RESULT.PLAN_ID = ZTB_SX_EFFICIENCY.PLAN_ID AND ZTB_SX_RESULT.WORK_SHIFT = ZTB_SX_EFFICIENCY.WORK_SHIFT AND ZTB_SX_RESULT.CTR_CD = ZTB_SX_EFFICIENCY.CTR_CD)
            WHERE ZTB_SX_RESULT.SX_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE}'
            AND ZTB_SX_EFFICIENCY.CTR_CD='${DATA.CTR_CD}'
            GROUP BY ZTB_SX_EFFICIENCY.CTR_CD
            )
            SELECT unpvt.REASON, unpvt.LOSS_TIME, unpvt.TOTAL_LOSS_TIME, unpvt.LOSS_TIME*1.0/ unpvt.TOTAL_LOSS_TIME AS RATE, unpvt.CTR_CD FROM 
            (
            SELECT * FROM LOSS_TIME_TB
            ) AS s
            UNPIVOT
            (
            LOSS_TIME FOR [REASON] IN ([LAY_DO],[MAY_HONG],[DAO_NG],[CHO_LIEU],[HET_LIEU],[LIEU_NG],[HOP_FL],[CHO_QC],[CHOT_BAOCAO],[CHUYEN_CODE],[CAN_HANG],[CHO_BTP],[KHAC])
            ) as unpvt
            WHERE unpvt.CTR_CD='${DATA.CTR_CD}'
            ORDER BY unpvt.LOSS_TIME DESC
              `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "sxLossTimeByEmpl":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
            WITH LOSS_TIME_TB AS
              (
              SELECT M010.EMPL_NAME, SUM((isnull(LAY_DO, 0) + isnull(MAY_HONG, 0) + isnull(DAO_NG, 0) + isnull(CHO_BTP, 0) + isnull(CHO_LIEU, 0) + isnull(HET_LIEU, 0) + isnull(LIEU_NG, 0) + isnull(CAN_HANG, 0) + isnull(HOP_FL, 0) + isnull(CHO_QC, 0) + isnull(CHOT_BAOCAO, 0) + isnull(CHUYEN_CODE, 0) + isnull(KHAC, 0))) AS TOTAL_LOSS_TIME, ZTB_SX_EFFICIENCY.CTR_CD FROM ZTB_SX_EFFICIENCY
              LEFT JOIN ZTB_SX_RESULT ON (ZTB_SX_RESULT.PLAN_ID= ZTB_SX_EFFICIENCY.PLAN_ID AND ZTB_SX_RESULT.WORK_SHIFT= ZTB_SX_EFFICIENCY.WORK_SHIFT AND ZTB_SX_RESULT.CTR_CD = ZTB_SX_EFFICIENCY.CTR_CD)
              LEFT JOIN M010 ON M010.EMPL_NO = ZTB_SX_RESULT.INS_EMPL AND M010.CTR_CD = ZTB_SX_RESULT.CTR_CD
              WHERE ZTB_SX_RESULT.SX_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE}' AND ZTB_SX_RESULT.INS_EMPL is not null AND ZTB_SX_EFFICIENCY.CTR_CD='${DATA.CTR_CD}'
              GROUP BY M010.EMPL_NAME, ZTB_SX_EFFICIENCY.CTR_CD
              )
              SELECT * FROM LOSS_TIME_TB
              WHERE CTR_CD='${DATA.CTR_CD}'
              ORDER BY TOTAL_LOSS_TIME DESC
              `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "quickcheckycsx":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
          WITH  AA AS
          (
            SELECT
              PVTB.PROD_REQUEST_NO,
              isnull(PVTB.[1], 0) AS CD1,
              isnull(PVTB.[2], 0) AS CD2,
              isnull(PVTB.[3], 0) AS CD3,
              isnull(PVTB.[4], 0) AS CD4,
              PVTB.CTR_CD
            FROM
              (
                SELECT
                  ZTB_QLSXPLAN.PROD_REQUEST_NO,
                  ZTB_QLSXPLAN.PROCESS_NUMBER,
                  SUM(isnull(SX_RESULT, 0)) AS KETQUASX,
                  ZTB_QLSXPLAN.CTR_CD
                FROM
                  ZTB_SX_RESULT
                  LEFT JOIN ZTB_QLSXPLAN ON (ZTB_QLSXPLAN.PLAN_ID = ZTB_SX_RESULT.PLAN_ID AND ZTB_QLSXPLAN.CTR_CD = ZTB_SX_RESULT.CTR_CD)
                WHERE
                  ZTB_QLSXPLAN.STEP = 0
                GROUP BY
                  ZTB_QLSXPLAN.PROD_REQUEST_NO,
                  ZTB_QLSXPLAN.PROCESS_NUMBER,
                  ZTB_QLSXPLAN.CTR_CD
              ) AS PV PIVOT (
                SUM(PV.KETQUASX) FOR PV.PROCESS_NUMBER IN ([1], [2], [3], [4])
              ) AS PVTB
          ),
		  LOSSKT AS (
           SELECT BB.G_CODE, SUM(BB.INSPECT_TOTAL_QTY) AS INSPECT_TOTAL_QTY, SUM(BB.TOTAL_NG) AS TOTAL_NG, CASE WHEN SUM(BB.TOTAL_NG)*1.0/SUM(BB.INSPECT_TOTAL_QTY) > 0.05 THEN 0.05 ELSE  SUM(BB.TOTAL_NG)*1.0/SUM(BB.INSPECT_TOTAL_QTY) END AS NG_RATE, BB.CTR_CD FROM 
            (
            SELECT AA.G_CODE, AA.INSPECT_DATE,AA.INSPECT_TOTAL_QTY, AA.TOTAL_NG, COUNT(G_CODE) OVER(PARTITION BY G_CODE ORDER BY INSPECT_DATE DESC) AS CNT, AA.CTR_CD
            FROM 
            (
            SELECT  G_CODE,CAST(INSPECT_DATETIME AS date) AS INSPECT_DATE, SUM(INSPECT_TOTAL_QTY-ERR32) AS INSPECT_TOTAL_QTY, SUM(ERR1+ERR2+ERR3+ERR4+ERR5+ERR6+ERR7+ERR8+ERR9+ERR10+ERR11+ERR12+ERR13+ERR14+ERR15+ERR16+ERR17+ERR18+ERR19+ERR20+ERR21+ERR22+ERR23+ERR24+ERR25+ERR26+ERR27+ERR28+ERR29+ERR30+ERR31
            ) AS TOTAL_NG, CTR_CD FROM ZTBINSPECTNGTB
            WHERE CTR_CD='${DATA.CTR_CD}'
            GROUP BY G_CODE,CAST(INSPECT_DATETIME AS date), CTR_CD
            ) AS AA
            ) AS BB
            WHERE BB.CNT <=10 AND BB.INSPECT_TOTAL_QTY<>0
            GROUP BY BB.G_CODE, BB.CTR_CD
          )
          SELECT 
          M100.FACTORY,
                    M100.Setting1,
                    M100.Setting2,
                    M100.Step1,
                    M100.Step2,
                    M100.LOSS_SX1,
                    M100.LOSS_SX2,
                    M100.LOSS_SETTING1,
                    M100.LOSS_SETTING2,
                    M100.NOTE,
                    M100.UPH1,
                    M100.UPH2,
                    M100.Step3,
                    M100.Step4,
                    M100.EQ3,
                    M100.EQ4,
                    M100.UPH3,
                    M100.UPH4,
                    M100.Setting3,
                    M100.Setting4,
                    M100.LOSS_SX3,
                    M100.LOSS_SX4,
                    M100.LOSS_SETTING3,
                    M100.LOSS_SETTING4,
                    P400.G_CODE,                   
                    M100.G_NAME,
                    M100.G_NAME_KD,                   
                    P400.PROD_REQUEST_QTY,
                    M100.EQ1,
                    M100.EQ2,	
					CASE WHEN M100.PD <> 0 THEN CEILING((P400.PROD_REQUEST_QTY*(1+(isnull(LOSS_SX2,0)+isnull(LOSS_SX3,0)+isnull(LOSS_SX4,0))*1.0/100+isnull(LOSSKT.NG_RATE,0)) + (isnull(LOSS_SETTING2,0)+isnull(LOSS_SETTING3,0)+isnull(LOSS_SETTING4,0))*1.0/M100.PD*(M100.G_C*M100.G_C_R)*1000)) ELSE 0 END AS SLC_CD1,
CASE WHEN M100.PD <> 0 THEN CEILING((P400.PROD_REQUEST_QTY*(1+(isnull(LOSS_SX3,0)+isnull(LOSS_SX4,0))*1.0/100+isnull(LOSSKT.NG_RATE,0)) + (isnull(LOSS_SETTING3,0)+isnull(LOSS_SETTING4,0))*1.0/M100.PD*(M100.G_C*M100.G_C_R)*1000)) ELSE 0 END AS SLC_CD2,
CASE WHEN M100.PD <> 0 THEN CEILING((P400.PROD_REQUEST_QTY*(1+(isnull(LOSS_SX4,0))*1.0/100+isnull(LOSSKT.NG_RATE,0)) + (isnull(LOSS_SETTING4,0))*1.0/M100.PD*(M100.G_C*M100.G_C_R)*1000)) ELSE 0 END AS SLC_CD3,
CASE WHEN M100.PD <> 0 THEN CEILING((P400.PROD_REQUEST_QTY*(1+(0)*1.0/100+isnull(LOSSKT.NG_RATE,0)) + (0)*1.0/M100.PD*(M100.G_C*M100.G_C_R)*1000)) ELSE 0 END AS SLC_CD4,
                    isnull(AA.CD1, 0) AS CD1,
                    isnull(AA.CD2, 0) AS CD2,
                    isnull(AA.CD3, 0) AS CD3,
                    isnull(AA.CD4, 0) AS CD4,
                    P400.CTR_CD
          FROM P400
          LEFT JOIN M100 ON (M100.G_CODE = P400.G_CODE AND M100.CTR_CD = P400.CTR_CD)         
          LEFT JOIN AA ON (AA.PROD_REQUEST_NO = P400.PROD_REQUEST_NO AND AA.CTR_CD = P400.CTR_CD)
		      LEFT JOIN LOSSKT ON (LOSSKT.G_CODE = P400.G_CODE AND LOSSKT.CTR_CD = P400.CTR_CD)
          WHERE P400.PROD_REQUEST_NO='${DATA.PROD_REQUEST_NO}' AND P400.CTR_CD='${DATA.CTR_CD}'
            `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          ////console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "quickcheckycsx_New":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
          WITH  AA AS
          (
            SELECT
              PVTB.PROD_REQUEST_NO,
              isnull(PVTB.[1], 0) AS CD1,
              isnull(PVTB.[2], 0) AS CD2,
              isnull(PVTB.[3], 0) AS CD3,
              isnull(PVTB.[4], 0) AS CD4,
              PVTB.CTR_CD
            FROM
              (
                SELECT
                  ZTB_QLSXPLAN.PROD_REQUEST_NO,
                  ZTB_QLSXPLAN.PROCESS_NUMBER,
                  SUM(isnull(SX_RESULT, 0)) AS KETQUASX,
                  ZTB_QLSXPLAN.CTR_CD
                FROM
                  ZTB_SX_RESULT
                  LEFT JOIN ZTB_QLSXPLAN ON (ZTB_QLSXPLAN.PLAN_ID = ZTB_SX_RESULT.PLAN_ID AND ZTB_QLSXPLAN.CTR_CD = ZTB_SX_RESULT.CTR_CD)
                WHERE
                  ZTB_QLSXPLAN.STEP = 0
                GROUP BY
                  ZTB_QLSXPLAN.PROD_REQUEST_NO,
                  ZTB_QLSXPLAN.PROCESS_NUMBER,
                  ZTB_QLSXPLAN.CTR_CD
              ) AS PV PIVOT (
                SUM(PV.KETQUASX) FOR PV.PROCESS_NUMBER IN ([1], [2], [3], [4])
              ) AS PVTB
          ),
		  LOSSKT AS (
           SELECT BB.G_CODE, SUM(BB.INSPECT_TOTAL_QTY) AS INSPECT_TOTAL_QTY, SUM(BB.TOTAL_NG) AS TOTAL_NG, BB.CTR_CD FROM 
            (
            SELECT AA.G_CODE, AA.INSPECT_DATE,AA.INSPECT_TOTAL_QTY, AA.TOTAL_NG, COUNT(G_CODE) OVER(PARTITION BY G_CODE ORDER BY INSPECT_DATE DESC) AS CNT, AA.CTR_CD 
            FROM 
            (
            SELECT  G_CODE,CAST(INSPECT_DATETIME AS date) AS INSPECT_DATE, SUM(INSPECT_TOTAL_QTY-ERR32) AS INSPECT_TOTAL_QTY, SUM(ERR1+ERR2+ERR3+ERR4+ERR5+ERR6+ERR7+ERR8+ERR9+ERR10+ERR11+ERR12+ERR13+ERR14+ERR15+ERR16+ERR17+ERR18+ERR19+ERR20+ERR21+ERR22+ERR23+ERR24+ERR25+ERR26+ERR27+ERR28+ERR29+ERR30+ERR31
            ) AS TOTAL_NG, CTR_CD FROM ZTBINSPECTNGTB
            GROUP BY G_CODE,CAST(INSPECT_DATETIME AS date), CTR_CD
            ) AS AA
            ) AS BB
            WHERE BB.CNT <=10
            GROUP BY BB.G_CODE, BB.CTR_CD
          ),
		  ZTB_PROD_PROCESS_TB2 AS (
SELECT CTR_CD,G_CODE,PROCESS_NUMBER,EQ_SERIES,SETTING_TIME,UPH,STEP,LOSS_SX,LOSS_SETTING,INS_DATE,INS_EMPL,UPD_DATE,UPD_EMPL,FACTORY,SUM(LOSS_SX) OVER (PARTITION BY G_CODE ORDER BY PROCESS_NUMBER ROWS BETWEEN 1 FOLLOWING AND UNBOUNDED FOLLOWING) AS Total_LOSS_SX,SUM(LOSS_SETTING) OVER (PARTITION BY G_CODE ORDER BY PROCESS_NUMBER ROWS BETWEEN 1 FOLLOWING AND UNBOUNDED FOLLOWING) AS Total_LOSS_SETTING FROM ZTB_PROD_PROCESS_TB
),
SLCTB AS
(SELECT P400.CTR_CD,P400.G_CODE, P400.PROD_REQUEST_DATE, P400.PROD_REQUEST_NO,P400.PROD_REQUEST_QTY, ZTB_PROD_PROCESS_TB2.PROCESS_NUMBER, CEILING(P400.PROD_REQUEST_QTY*(1+(isnull(ZTB_PROD_PROCESS_TB2.Total_LOSS_SX,0) + isnull(LOSSKT.TOTAL_NG*1.0/LOSSKT.INSPECT_TOTAL_QTY*100,0) )*1.0/100) + isnull(ZTB_PROD_PROCESS_TB2.Total_LOSS_SETTING,0)*1.0/M100.PD*1000*(M100.G_C*M100.G_C_R)) AS SLC  
FROM P400 
LEFT JOIN ZTB_PROD_PROCESS_TB2 ON P400.G_CODE = ZTB_PROD_PROCESS_TB2.G_CODE AND P400.CTR_CD = ZTB_PROD_PROCESS_TB2.CTR_CD
LEFT JOIN M100 ON M100.CTR_CD = P400.CTR_CD AND M100.G_CODE = P400.G_CODE
LEFT JOIN LOSSKT ON LOSSKT.CTR_CD = P400.CTR_CD AND LOSSKT.G_CODE = P400.G_CODE
),
SLC_PVTB AS
(
SELECT SLCTB.CTR_CD, SLCTB.PROD_REQUEST_QTY, SLCTB.G_CODE, SLCTB.PROD_REQUEST_NO, isnull(SLCTB.[1],0) AS SLC_CD1, isnull(SLCTB.[2],0) AS SLC_CD2, isnull(SLCTB.[3],0) AS SLC_CD3, isnull(SLCTB.[4],0) AS SLC_CD4 
FROM (
SELECT 
CTR_CD,
PROD_REQUEST_NO, 
PROD_REQUEST_QTY,
G_CODE,
PROCESS_NUMBER,
SLC
FROM 
SLCTB
) AS SourceTable
PIVOT (
MAX(SLC) FOR PROCESS_NUMBER IN ([1], [2], [3], [4], [5]) -- Add as many process numbers as you have
) AS SLCTB
)
SELECT SLC_PVTB.PROD_REQUEST_NO, SLC_PVTB.PROD_REQUEST_QTY ,SLC_PVTB.G_CODE, M100.G_NAME, M100.G_NAME_KD, AA.CD1,  AA.CD2, AA.CD3, AA.CD4, SLC_PVTB.SLC_CD1,SLC_PVTB.SLC_CD2,SLC_PVTB.SLC_CD3,SLC_PVTB.SLC_CD4, (SLC_PVTB.SLC_CD1-AA.CD1) AS TON_CD1, 
(SLC_PVTB.SLC_CD2-AA.CD2) AS TON_CD2,
(SLC_PVTB.SLC_CD3-AA.CD3) AS TON_CD3,
(SLC_PVTB.SLC_CD4-AA.CD4) AS TON_CD4
FROM SLC_PVTB 
LEFT JOIN AA ON AA.PROD_REQUEST_NO = SLC_PVTB.PROD_REQUEST_NO AND AA.CTR_CD = SLC_PVTB.CTR_CD
LEFT JOIN M100 ON M100.G_CODE = SLC_PVTB.G_CODE AND  M100.CTR_CD = SLC_PVTB.CTR_CD
          WHERE SLC_PVTB.PROD_REQUEST_NO='${DATA.PROD_REQUEST_NO}' AND SLC_PVTB.CTR_CD='${DATA.CTR_CD}'
            `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          ////console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "loadProdOverData":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = `WHERE ZTB_PROD_OVER_TB.CTR_CD='${DATA.CTR_CD}' `
          console.log(DATA.ONLY_PENDING);
          if (DATA.ONLY_PENDING === true) {
            condition += ` AND ZTB_PROD_OVER_TB.KD_CFM='P'`
          }
          let setpdQuery = `
            SELECT P400.EMPL_NO,M110.CUST_NAME_KD, M100.G_CODE, M100.G_NAME, M100.G_NAME_KD, ZTB_PROD_OVER_TB.*, M100.PROD_LAST_PRICE,P400.PROD_REQUEST_QTY,(ZTB_PROD_OVER_TB.OVER_QTY*M100.PROD_LAST_PRICE) AS AMOUNT  
 FROM ZTB_PROD_OVER_TB
            LEFT JOIN P400 ON P400.PROD_REQUEST_NO = ZTB_PROD_OVER_TB.PROD_REQUEST_NO AND P400.CTR_CD = ZTB_PROD_OVER_TB.CTR_CD
            LEFT JOIN M100 ON M100.G_CODE = P400.G_CODE AND M100.CTR_CD = P400.CTR_CD
            LEFT JOIN M110 ON M110.CUST_CD = P400.CUST_CD AND  M110.CTR_CD = P400.CTR_CD	
			      ${condition}
            ORDER BY ZTB_PROD_OVER_TB.AUTO_ID DESC
            `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "autoConfirmProdOver":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
            MERGE INTO ZTB_PROD_OVER_TB
            USING
            (
            SELECT *, CTR_CD FROM ZTB_PROD_OVER_TB
            WHERE ((GETDATE() > DATEADD(hour,24, INS_DATE)) AND (DATEPART(WEEKDAY,INS_DATE) <> 7) )  OR ((GETDATE() > DATEADD(hour,48, INS_DATE)) AND (DATEPART(WEEKDAY,INS_DATE) =7) ) AND HANDLE_STATUS='P' AND ZTB_PROD_OVER_TB.CTR_CD='${DATA.CTR_CD}'
            ) AS src
            ON(src.AUTO_ID= ZTB_PROD_OVER_TB.AUTO_ID AND src.CTR_CD = ZTB_PROD_OVER_TB.CTR_CD)
            WHEN MATCHED THEN
            UPDATE
            SET ZTB_PROD_OVER_TB.KD_CFM='Y', ZTB_PROD_OVER_TB.KD_EMPL_NO= 'ADMIN',  UPD_DATE= GETDATE(), UPD_EMPL='ADMIN', KD_CF_DATETIME=GETDATE(),  KD_REMARK = N'AUTO_CONFIRM'; 
            `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "updateProdOverData":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `UPDATE ZTB_PROD_OVER_TB SET KD_CFM='${DATA.KD_CFM}', KD_EMPL_NO='${EMPL_NO}', KD_CF_DATETIME=GETDATE(), KD_REMARK = N'${DATA.KD_REMARK}'  WHERE CTR_CD='${DATA.CTR_CD}' AND AUTO_ID=${DATA.AUTO_ID}`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "checktonKhoAoMLotNo":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `SELECT * FROM IN_KHO_SX WHERE CTR_CD='${DATA.CTR_CD}' AND  M_LOT_NO='${DATA.M_LOT_NO}' AND USE_YN ='Y' `;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "checktonKhoSubMLotNo":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `SELECT * FROM IN_KHO_SX_SUB WHERE CTR_CD='${DATA.CTR_CD}' AND  M_LOT_NO='${DATA.M_LOT_NO}' AND USE_YN ='Y' `;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "neededSXQtyByYCSX":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
            WITH DMSXTB AS
            (
            SELECT G_CODE, PD, (G_C*G_C_R) AS CAVITY, isnull(LOSS_SX1,0) AS LOSS_SX1, isnull(LOSS_SX2,0) AS LOSS_SX2,isnull(LOSS_SX3,0) AS LOSS_SX3,isnull(LOSS_SX4,0) AS LOSS_SX4, isnull(LOSS_SETTING1,0) AS LOSS_SETTING1,isnull(LOSS_SETTING2,0) AS LOSS_SETTING2,isnull(LOSS_SETTING3,0) AS LOSS_SETTING3,isnull(LOSS_SETTING4,0) AS LOSS_SETTING4, CTR_CD FROM M100 WHERE G_CODE='${DATA.G_CODE}' AND CTR_CD='${DATA.CTR_CD}'
            ),
            LOSSKT AS (
            SELECT BB.G_CODE, BB.CTR_CD, SUM(BB.INSPECT_TOTAL_QTY) AS INSPECT_TOTAL_QTY, SUM(BB.TOTAL_NG) AS TOTAL_NG FROM 
            (
            SELECT AA.G_CODE, AA.CTR_CD, AA.INSPECT_DATE,AA.INSPECT_TOTAL_QTY, AA.TOTAL_NG, COUNT(G_CODE) OVER(PARTITION BY G_CODE, CTR_CD ORDER BY INSPECT_DATE DESC) AS CNT 
            FROM 
            (
            SELECT  G_CODE, CTR_CD, CAST(INSPECT_DATETIME AS date) AS INSPECT_DATE, SUM(INSPECT_TOTAL_QTY-ERR32) AS INSPECT_TOTAL_QTY, SUM(ERR1+ERR2+ERR3+ERR4+ERR5+ERR6+ERR7+ERR8+ERR9+ERR10+ERR11+ERR12+ERR13+ERR14+ERR15+ERR16+ERR17+ERR18+ERR19+ERR20+ERR21+ERR22+ERR23+ERR24+ERR25+ERR26+ERR27+ERR28+ERR29+ERR30+ERR31) AS TOTAL_NG FROM ZTBINSPECTNGTB
            WHERE CTR_CD='${DATA.CTR_CD}'
            GROUP BY G_CODE, CTR_CD, CAST(INSPECT_DATETIME AS date)
            ) AS AA
            ) AS BB
            WHERE BB.CNT <=10 AND BB.INSPECT_TOTAL_QTY >0
            GROUP BY BB.G_CODE, BB.CTR_CD
            )
            SELECT PROD_REQUEST_NO, P400.G_CODE, PD, CAVITY,LOSS_SX1,LOSS_SX2,LOSS_SX3,LOSS_SX4,LOSS_SETTING1,LOSS_SETTING2,LOSS_SETTING3,LOSS_SETTING4,LOSSKT.TOTAL_NG*1.0/LOSSKT.INSPECT_TOTAL_QTY AS LOSS_KT,
            P400.PROD_REQUEST_QTY, 
            (P400.PROD_REQUEST_QTY*(1+(LOSS_SX2+LOSS_SX3+LOSS_SX4)*1.0/100+isnull((LOSSKT.TOTAL_NG*1.0/LOSSKT.INSPECT_TOTAL_QTY),0)) + (LOSS_SETTING2+LOSS_SETTING3+LOSS_SETTING4)*1.0/PD*CAVITY*1000) AS SLC_CD1,
            (P400.PROD_REQUEST_QTY*(1+(LOSS_SX3+LOSS_SX4)*1.0/100+isnull((LOSSKT.TOTAL_NG*1.0/LOSSKT.INSPECT_TOTAL_QTY),0)) + (LOSS_SETTING3+LOSS_SETTING4)*1.0/PD*CAVITY*1000) AS SLC_CD2,
            (P400.PROD_REQUEST_QTY*(1+(LOSS_SX4)*1.0/100+isnull((LOSSKT.TOTAL_NG*1.0/LOSSKT.INSPECT_TOTAL_QTY),0)) + (LOSS_SETTING4)*1.0/PD*CAVITY*1000) AS SLC_CD3,
            (P400.PROD_REQUEST_QTY*(1+(0)*1.0/100+isnull((LOSSKT.TOTAL_NG*1.0/LOSSKT.INSPECT_TOTAL_QTY),0)) + (0)*1.0/PD*CAVITY*1000) AS SLC_CD4
            FROM P400
            LEFT JOIN DMSXTB ON DMSXTB.G_CODE = P400.G_CODE AND DMSXTB.CTR_CD = P400.CTR_CD
            LEFT JOIN LOSSKT ON LOSSKT.G_CODE = P400.G_CODE AND LOSSKT.CTR_CD = P400.CTR_CD
            WHERE DMSXTB.PD <> 0 AND PROD_REQUEST_NO='${DATA.PROD_REQUEST_NO}' AND P400.CTR_CD='${DATA.CTR_CD}'
          `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "tinhhinhycsxtheongay":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `DECLARE @ycsxno varchar(7), @ctr_cd varchar(3)
          SET @ycsxno = '${DATA.PROD_REQUEST_NO}';
          SET @ctr_cd = '${DATA.CTR_CD}';
          WITH SXTB AS
          (
          SELECT * FROM fn_ProductionReport(@ycsxno,@ctr_cd)
          ),
          PROD1 AS
          (
          SELECT PLAN_DATE, CTR_CD, SUM(isnull(NEEDED_QTY,PLAN_QTY)) AS THEORY_INPUT_QTY, SUM(ESTIMATED_QTY) AS ACTUAL_INPUT_QTY, SUM(isnull(KETQUASX,0)) AS RESULT FROM SXTB
          WHERE STEP=0 AND PROCESS_NUMBER =1 AND CTR_CD='${DATA.CTR_CD}'
          GROUP BY PLAN_DATE, CTR_CD
          ),
          PROD2 AS
          (
          SELECT PLAN_DATE, CTR_CD, SUM(isnull(NEEDED_QTY,PLAN_QTY)) AS THEORY_INPUT_QTY, SUM(ESTIMATED_QTY) AS ACTUAL_INPUT_QTY, SUM(isnull(KETQUASX,0)) AS RESULT FROM SXTB
          WHERE STEP=0 AND PROCESS_NUMBER =2 AND CTR_CD='${DATA.CTR_CD}'
          GROUP BY PLAN_DATE, CTR_CD
          ),
          PROD3 AS
          (
          SELECT PLAN_DATE, CTR_CD, SUM(isnull(NEEDED_QTY,PLAN_QTY)) AS THEORY_INPUT_QTY, SUM(ESTIMATED_QTY) AS ACTUAL_INPUT_QTY, SUM(isnull(KETQUASX,0)) AS RESULT FROM SXTB
          WHERE STEP=0 AND PROCESS_NUMBER =3 AND CTR_CD='${DATA.CTR_CD}'
          GROUP BY PLAN_DATE, CTR_CD
          ),
          PROD4 AS
          (
          SELECT PLAN_DATE, CTR_CD, SUM(isnull(NEEDED_QTY,PLAN_QTY)) AS THEORY_INPUT_QTY, SUM(ESTIMATED_QTY) AS ACTUAL_INPUT_QTY, SUM(isnull(KETQUASX,0)) AS RESULT FROM SXTB
          WHERE STEP=0 AND PROCESS_NUMBER =4 AND CTR_CD='${DATA.CTR_CD}'
          GROUP BY PLAN_DATE, CTR_CD
          ),
          INSPECTDATA AS (
          SELECT CAST(INSPECT_DATETIME as date) AS PLAN_DATE, CTR_CD, SUM(INSPECT_TOTAL_QTY- ERR32) AS INSPECT_QTY,SUM(ERR2+ERR3) AS INSPECT_LOSS,  SUM(ERR4+ERR5+ERR6+ERR7+ERR8+ERR9+ERR10+ERR11+ERR12+ERR13+ERR14+ERR15+ERR16+ERR17+ERR18+ERR19+ERR20+ERR21+ERR22+ERR23+ERR24+ERR25+ERR26+ERR27+ERR28+ERR29+ERR30+ERR31) AS INSPECT_NG, SUM(INSPECT_OK_QTY) AS INSPECT_OK FROM ZTBINSPECTNGTB 
          WHERE PROD_REQUEST_NO=@ycsxno AND CTR_CD='${DATA.CTR_CD}'
          GROUP BY CAST(INSPECT_DATETIME as date), CTR_CD
          ),
          PLANDATETB AS
          ( 
          SELECT DISTINCT PLAN_DATE, CTR_CD FROM SXTB
          UNION
          SELECT DISTINCT CAST(INSPECT_DATETIME as date) AS PLAN_DATE, CTR_CD FROM ZTBINSPECTNGTB WHERE PROD_REQUEST_NO=@ycsxno AND CTR_CD='${DATA.CTR_CD}'
          )
          SELECT PLANDATETB.PLAN_DATE, PLANDATETB.CTR_CD, 
          isnull(PROD1.THEORY_INPUT_QTY,0) AS TARGET1, isnull(PROD1.ACTUAL_INPUT_QTY,0) AS INPUT1, isnull(PROD1.RESULT,0) AS RESULT1,
          isnull(PROD2.THEORY_INPUT_QTY,0) AS TARGET2, isnull(PROD2.ACTUAL_INPUT_QTY,0) AS INPUT2, isnull(PROD2.RESULT,0) AS RESULT2,
          isnull(PROD3.THEORY_INPUT_QTY,0) AS TARGET3, isnull(PROD3.ACTUAL_INPUT_QTY,0) AS INPUT3, isnull(PROD3.RESULT,0) AS RESULT3,
          isnull(PROD4.THEORY_INPUT_QTY,0) AS TARGET4, isnull(PROD4.ACTUAL_INPUT_QTY,0) AS INPUT4, isnull(PROD4.RESULT,0) AS RESULT4,
          isnull(INSPECTDATA.INSPECT_QTY,0) AS INSP_QTY, isnull(INSPECTDATA.INSPECT_LOSS,0) AS INSP_LOSS, isnull(INSPECTDATA.INSPECT_NG,0) AS INSP_NG, isnull(INSPECTDATA.INSPECT_OK,0) AS INSP_OK
          FROM PLANDATETB
          LEFT JOIN PROD1 ON PROD1.PLAN_DATE = PLANDATETB.PLAN_DATE AND PROD1.CTR_CD = PLANDATETB.CTR_CD
          LEFT JOIN PROD2 ON PROD2.PLAN_DATE = PLANDATETB.PLAN_DATE AND PROD2.CTR_CD = PLANDATETB.CTR_CD
          LEFT JOIN PROD3 ON PROD3.PLAN_DATE = PLANDATETB.PLAN_DATE AND PROD3.CTR_CD = PLANDATETB.CTR_CD
          LEFT JOIN PROD4 ON PROD4.PLAN_DATE = PLANDATETB.PLAN_DATE AND PROD4.CTR_CD = PLANDATETB.CTR_CD
          LEFT JOIN INSPECTDATA ON INSPECTDATA.PLAN_DATE = PLANDATETB.PLAN_DATE AND INSPECTDATA.CTR_CD = PLANDATETB.CTR_CD
          WHERE PLANDATETB.CTR_CD='${DATA.CTR_CD}'
          ORDER BY PLANDATETB.PLAN_DATE ASC`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "checkmainBOM2":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `SELECT USAGE, MAIN_M FROM ZTB_BOM2 WHERE CTR_CD='${DATA.CTR_CD}' AND G_CODE='${DATA.G_CODE}' AND USAGE='main' AND MAIN_M = 1 `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "loadquanlydaofilm":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = `WHERE 1=1 `;
          if (DATA.ALLTIME !== true) {
            condition += ` AND ZTB_QL_KNIFE_FILM.INS_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE} 23:59:59'`
          }
          if (DATA.G_CODE !== '') {
            condition += ` AND M100.G_CODE ='${DATA.G_CODE}'`
          }
          if (DATA.G_NAME !== '') {
            condition += ` AND M100.G_NAME LIKE '%${DATA.G_NAME}%'`
          }
          if (DATA.FACTORY !== 'All') {
            condition += ` AND ZTB_QL_KNIFE_FILM.FACTORY_NAME = '${DATA.FACTORY}'`
          }
          if (DATA.KNIFE_TYPE !== 'All') {
            condition += ` AND ZTB_QL_KNIFE_FILM.KNIFE_TYPE = '${DATA.KNIFE_TYPE}'`
          }
          let setpdQuery = `SELECT ZTB_QL_KNIFE_FILM.*, M100.G_NAME, M100.G_NAME_KD, M100.PROD_TYPE, M100.REV_NO, M110.CUST_NAME_KD AS VENDOR FROM ZTB_QL_KNIFE_FILM
LEFT JOIN M100 ON M100.G_CODE = ZTB_QL_KNIFE_FILM.G_CODE AND M100.CTR_CD = ZTB_QL_KNIFE_FILM.CTR_CD
LEFT JOIN M110 ON M110.CUST_CD = ZTB_QL_KNIFE_FILM.CUST_CD AND M110.CTR_CD = ZTB_QL_KNIFE_FILM.CTR_CD
${condition}
AND ZTB_QL_KNIFE_FILM.CTR_CD = '${DATA.CTR_CD}'
ORDER BY KNIFE_FILM_ID DESC`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "lichsuxuatdaofilm":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = `WHERE 1=1 `;
          if (DATA.ALLTIME !== true) {
            condition += ` AND OUT_KNIFE_FILM.INS_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE} 23:59:59'`
          }
          if (DATA.G_CODE !== '') {
            condition += ` AND ZTB_QLSXPLAN.G_CODE ='${DATA.G_CODE}'`
          }
          if (DATA.G_NAME !== '') {
            condition += ` AND M100.G_NAME LIKE '%${DATA.G_NAME}%'`
          }
          if (DATA.PLAN_ID !== '') {
            condition += ` AND ZTB_QLSXPLAN.PLAN_ID = '${DATA.PLAN_ID}'`
          }
          if (DATA.FACTORY !== 'All') {
            condition += ` AND ZTB_QLSXPLAN.PLAN_FACTORY = '${DATA.FACTORY}'`
          }
          let setpdQuery = `SELECT OUT_KNIFE_FILM.*, M100.G_NAME, M100.G_NAME_KD, ZTB_SX_RESULT.INS_EMPL AS SX_EMPL_NO, ZTB_QLSXPLAN.PLAN_DATE, ZTB_SX_RESULT.SX_DATE, OUT_KNIFE_FILM.CTR_CD FROM OUT_KNIFE_FILM
          LEFT JOIN ZTB_QLSXPLAN ON ZTB_QLSXPLAN.PLAN_ID=OUT_KNIFE_FILM.PLAN_ID AND ZTB_QLSXPLAN.CTR_CD=OUT_KNIFE_FILM.CTR_CD
          LEFT JOIN ZTB_SX_RESULT ON ZTB_SX_RESULT.PLAN_ID=OUT_KNIFE_FILM.PLAN_ID AND ZTB_SX_RESULT.CTR_CD=OUT_KNIFE_FILM.CTR_CD
          LEFT JOIN M100 ON M100.G_CODE = ZTB_QLSXPLAN.G_CODE AND M100.CTR_CD = ZTB_QLSXPLAN.CTR_CD
          ${condition}
          AND OUT_KNIFE_FILM.CTR_CD='${DATA.CTR_CD}'
          `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "checkmainBOM2_M140_M_CODE_MATCHING":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `SELECT COUNT(ZTB_BOM2.M_CODE) AS BOM2_M_CODE_COUNT, COUNT(M140.M_CODE) AS M140_M_CODE_COUNT, COUNT(ZTB_BOM2.M_CODE) - COUNT(M140.M_CODE) AS THIEU, ZTB_BOM2.CTR_CD FROM ZTB_BOM2 LEFT JOIN M140 ON M140.G_CODE = ZTB_BOM2.G_CODE AND M140.M_CODE = ZTB_BOM2.M_CODE AND M140.CTR_CD = ZTB_BOM2.CTR_CD WHERE ZTB_BOM2.G_CODE='${DATA.G_CODE}' AND ZTB_BOM2.CTR_CD='${DATA.CTR_CD}' GROUP BY ZTB_BOM2.CTR_CD`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "loadXbarData":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = ` WHERE ZTB_REL_RESULT.TEST_CODE = ${DATA.TEST_CODE} `
          if (DATA.G_CODE !== '') condition += ` AND ZTB_REL_REQUESTTABLE.G_CODE ='${DATA.G_CODE}'`
          if (DATA.G_NAME !== '') condition += ` AND M100.G_NAME LIKE '%${DATA.G_NAME}%'`
          if (DATA.TEST_CODE === 1) condition += ` AND ZTB_REL_RESULT.POINT_CODE =${DATA.POINT_CODE}`
          if (DATA.M_NAME !== '') condition += ` AND M090.M_NAME ='${DATA.M_NAME}'`
          let setpdQuery = `WITH DTCTB AS (
          SELECT  ZTB_REL_SPECTTABLE.BARCODE_CONTENT, ZTB_REL_RESULT.DTC_ID, (CASE ZTBEMPLINFO.FACTORY_CODE WHEN 1 THEN 'NM1' WHEN 2 THEN 'NM2' END) AS FACTORY , ZTB_REL_REQUESTTABLE.TEST_FINISH_TIME, ZTB_REL_REQUESTTABLE.TEST_EMPL_NO, ZTB_REL_RESULT.G_CODE, ZTB_REL_REQUESTTABLE.PROD_REQUEST_NO, M100.G_NAME, ZTB_REL_TESTTABLE.TEST_NAME, ZTB_REL_SPECTTABLE.POINT_CODE, ZTB_REL_SPECTTABLE.CENTER_VALUE , ZTB_REL_SPECTTABLE.UPPER_TOR,LOWER_TOR , ZTB_REL_RESULT.RESULT, ZTB_REL_SPECTTABLE.REMARK , ZTB_REL_TESTTYPE.TEST_TYPE_NAME,ZTBWORKPOSITION.WORK_POSITION_NAME , ZTB_REL_RESULT.SAMPLE_NO, ZTB_REL_REQUESTTABLE.REQUEST_DATETIME , ZTB_REL_REQUESTTABLE.REQUEST_EMPL_NO ,ZTB_REL_RESULT.M_CODE ,M090.M_NAME , M090.WIDTH_CD AS SIZE, NHAP_NVL.LOTCMS , ZTB_REL_RESULT.TEST_CODE,M090.TDS, M090.TDS_EMPL ,TDS_UPD_DATE, ZTB_REL_RESULT.CTR_CD FROM ZTB_REL_RESULT LEFT JOIN M100 ON(M100.G_CODE = ZTB_REL_RESULT.G_CODE AND M100.CTR_CD = ZTB_REL_RESULT.CTR_CD) LEFT JOIN M090 ON (M090.M_CODE = ZTB_REL_RESULT.M_CODE AND M090.CTR_CD = ZTB_REL_RESULT.CTR_CD) LEFT JOIN ZTB_REL_SPECTTABLE ON (  ZTB_REL_SPECTTABLE.G_CODE = ZTB_REL_RESULT.G_CODE AND ZTB_REL_SPECTTABLE.TEST_CODE = ZTB_REL_RESULT.TEST_CODE AND ZTB_REL_SPECTTABLE.POINT_CODE = ZTB_REL_RESULT.POINT_CODE AND ZTB_REL_SPECTTABLE.M_CODE = ZTB_REL_RESULT.M_CODE AND ZTB_REL_SPECTTABLE.CTR_CD = ZTB_REL_RESULT.CTR_CD)  LEFT JOIN ZTB_REL_REQUESTTABLE ON (ZTB_REL_REQUESTTABLE.DTC_ID = ZTB_REL_RESULT.DTC_ID AND ZTB_REL_REQUESTTABLE.TEST_CODE = ZTB_REL_RESULT.TEST_CODE AND ZTB_REL_REQUESTTABLE.CTR_CD = ZTB_REL_RESULT.CTR_CD)  LEFT JOIN ZTB_REL_TESTTABLE ON (ZTB_REL_TESTTABLE.TEST_CODE = ZTB_REL_RESULT.TEST_CODE AND ZTB_REL_TESTTABLE.CTR_CD = ZTB_REL_RESULT.CTR_CD) LEFT JOIN ZTB_REL_TESTTYPE ON (ZTB_REL_TESTTYPE.TEST_TYPE_CODE = ZTB_REL_REQUESTTABLE.TEST_TYPE_CODE AND ZTB_REL_TESTTYPE.CTR_CD = ZTB_REL_REQUESTTABLE.CTR_CD) LEFT JOIN ZTBEMPLINFO ON (ZTBEMPLINFO.EMPL_NO = ZTB_REL_REQUESTTABLE.REQUEST_EMPL_NO AND ZTBEMPLINFO.CTR_CD = ZTB_REL_REQUESTTABLE.CTR_CD) LEFT JOIN ZTBWORKPOSITION ON (ZTBWORKPOSITION.WORK_POSITION_CODE = ZTBEMPLINFO.WORK_POSITION_CODE AND ZTBWORKPOSITION.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN NHAP_NVL ON(NHAP_NVL.LOTNCC = ZTB_REL_REQUESTTABLE.REMARK AND NHAP_NVL.SIZE = M090.WIDTH_CD AND NHAP_NVL.CTR_CD = ZTB_REL_REQUESTTABLE.CTR_CD)
            ${condition}
            AND ZTB_REL_RESULT.CTR_CD='${DATA.CTR_CD}'
          ),
          CTE AS (
              SELECT 
                  DTC_ID,
                  CENTER_VALUE,
                  (UPPER_TOR + CENTER_VALUE) AS UPPER_VALUE,
                  (CENTER_VALUE-LOWER_TOR ) AS LOWER_VALUE,
              RESULT,      
                  ROW_NUMBER() OVER (ORDER BY DTC_ID) AS RowNum,
                  CTR_CD
              FROM 
                  DTCTB
          ),
          GroupedData AS (
              SELECT 
                  (RowNum - 1) / 5 + 1 AS GRP_ID,
                  CENTER_VALUE,
                  LOWER_VALUE,
                  UPPER_VALUE,
              MIN(RESULT) AS MIN_VALUE,
              MAX(RESULT) AS MAX_VALUE,
              (MAX(RESULT)-MIN(RESULT)) AS R_VALUE,
                  AVG(RESULT) AS AVG_VALUE,
                  CTR_CD
              FROM 
                  CTE
              GROUP BY 
                  (RowNum - 1) / 5 + 1, 
                  CENTER_VALUE,
                  LOWER_VALUE,
                  UPPER_VALUE,
                  CTR_CD
          )
          SELECT * FROM GroupedData WHERE CTR_CD='${DATA.CTR_CD}' ORDER BY GRP_ID ASC`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "loadCPKTrend":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = ` WHERE ZTB_REL_RESULT.TEST_CODE = ${DATA.TEST_CODE} `
          if (DATA.G_CODE !== '') condition += ` AND ZTB_REL_REQUESTTABLE.G_CODE ='${DATA.G_CODE}'`
          if (DATA.G_NAME !== '') condition += ` AND M100.G_NAME LIKE '%${DATA.G_NAME}%'`
          if (DATA.TEST_CODE === 1) condition += ` AND ZTB_REL_RESULT.POINT_CODE =${DATA.POINT_CODE}`
          if (DATA.M_NAME !== '') condition += ` AND M090.M_NAME ='${DATA.M_NAME}'`
          let setpdQuery = `WITH DTCTB AS (
          SELECT  ZTB_REL_SPECTTABLE.BARCODE_CONTENT, ZTB_REL_RESULT.DTC_ID, (CASE ZTBEMPLINFO.FACTORY_CODE WHEN 1 THEN 'NM1' WHEN 2 THEN 'NM2' END) AS FACTORY , ZTB_REL_REQUESTTABLE.TEST_FINISH_TIME, ZTB_REL_REQUESTTABLE.TEST_EMPL_NO, ZTB_REL_RESULT.G_CODE, ZTB_REL_REQUESTTABLE.PROD_REQUEST_NO, M100.G_NAME, ZTB_REL_TESTTABLE.TEST_NAME, ZTB_REL_SPECTTABLE.POINT_CODE, ZTB_REL_SPECTTABLE.CENTER_VALUE , ZTB_REL_SPECTTABLE.UPPER_TOR,LOWER_TOR , ZTB_REL_RESULT.RESULT, ZTB_REL_SPECTTABLE.REMARK , ZTB_REL_TESTTYPE.TEST_TYPE_NAME,ZTBWORKPOSITION.WORK_POSITION_NAME , ZTB_REL_RESULT.SAMPLE_NO, ZTB_REL_REQUESTTABLE.REQUEST_DATETIME , ZTB_REL_REQUESTTABLE.REQUEST_EMPL_NO ,ZTB_REL_RESULT.M_CODE ,M090.M_NAME , M090.WIDTH_CD AS SIZE, NHAP_NVL.LOTCMS , ZTB_REL_RESULT.TEST_CODE,M090.TDS, M090.TDS_EMPL ,TDS_UPD_DATE, ZTB_REL_RESULT.CTR_CD FROM ZTB_REL_RESULT LEFT JOIN M100 ON(M100.G_CODE = ZTB_REL_RESULT.G_CODE AND M100.CTR_CD = ZTB_REL_RESULT.CTR_CD) LEFT JOIN M090 ON (M090.M_CODE = ZTB_REL_RESULT.M_CODE AND M090.CTR_CD = ZTB_REL_RESULT.CTR_CD) LEFT JOIN ZTB_REL_SPECTTABLE ON (  ZTB_REL_SPECTTABLE.G_CODE = ZTB_REL_RESULT.G_CODE AND ZTB_REL_SPECTTABLE.TEST_CODE = ZTB_REL_RESULT.TEST_CODE AND ZTB_REL_SPECTTABLE.POINT_CODE = ZTB_REL_RESULT.POINT_CODE AND ZTB_REL_SPECTTABLE.M_CODE = ZTB_REL_RESULT.M_CODE AND ZTB_REL_SPECTTABLE.CTR_CD = ZTB_REL_RESULT.CTR_CD)  LEFT JOIN ZTB_REL_REQUESTTABLE ON (ZTB_REL_REQUESTTABLE.DTC_ID = ZTB_REL_RESULT.DTC_ID AND ZTB_REL_REQUESTTABLE.TEST_CODE = ZTB_REL_RESULT.TEST_CODE AND ZTB_REL_REQUESTTABLE.CTR_CD = ZTB_REL_RESULT.CTR_CD)  LEFT JOIN ZTB_REL_TESTTABLE ON (ZTB_REL_TESTTABLE.TEST_CODE = ZTB_REL_RESULT.TEST_CODE AND ZTB_REL_TESTTABLE.CTR_CD = ZTB_REL_RESULT.CTR_CD) LEFT JOIN ZTB_REL_TESTTYPE ON (ZTB_REL_TESTTYPE.TEST_TYPE_CODE = ZTB_REL_REQUESTTABLE.TEST_TYPE_CODE AND ZTB_REL_TESTTYPE.CTR_CD = ZTB_REL_REQUESTTABLE.CTR_CD) LEFT JOIN ZTBEMPLINFO ON (ZTBEMPLINFO.EMPL_NO = ZTB_REL_REQUESTTABLE.REQUEST_EMPL_NO AND ZTBEMPLINFO.CTR_CD = ZTB_REL_REQUESTTABLE.CTR_CD) LEFT JOIN ZTBWORKPOSITION ON (ZTBWORKPOSITION.WORK_POSITION_CODE = ZTBEMPLINFO.WORK_POSITION_CODE AND ZTBWORKPOSITION.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN NHAP_NVL ON(NHAP_NVL.LOTNCC = ZTB_REL_REQUESTTABLE.REMARK AND NHAP_NVL.SIZE = M090.WIDTH_CD AND NHAP_NVL.CTR_CD = ZTB_REL_REQUESTTABLE.CTR_CD)
          ${condition} AND ZTB_REL_RESULT.CTR_CD='${DATA.CTR_CD}'
          ),
          CTE AS (
              SELECT 
                  DTC_ID,
                  CENTER_VALUE,
                  (UPPER_TOR + CENTER_VALUE) AS UPPER_VALUE,
                  (CENTER_VALUE-LOWER_TOR ) AS LOWER_VALUE,
              RESULT,      
                  ROW_NUMBER() OVER (ORDER BY DTC_ID) AS RowNum,
                  CTR_CD
              FROM 
                  DTCTB
          ),
          GroupedData AS (
              SELECT 
                  (RowNum - 1) / 25 + 1 AS GRP_ID,
                  CENTER_VALUE,
                  LOWER_VALUE,
                  UPPER_VALUE,
                  AVG(RESULT) AS AVG_VALUE,
                  STDEV(RESULT) AS STD_DEV_VALUE,
                  CTR_CD
              FROM 
                  CTE
              GROUP BY 
                  (RowNum - 1) / 25 + 1, 
                  CENTER_VALUE,
                  LOWER_VALUE,
                  UPPER_VALUE,
                  CTR_CD
          )
          SELECT 
              GRP_ID,
              CENTER_VALUE,
              LOWER_VALUE,
              UPPER_VALUE,
              AVG_VALUE,
              STD_DEV_VALUE,
              (UPPER_VALUE - AVG_VALUE) / (6 * STD_DEV_VALUE) AS CPU,
              (AVG_VALUE - LOWER_VALUE) / (6 * STD_DEV_VALUE) AS CPL,
              LEAST((UPPER_VALUE - AVG_VALUE) / (6 * STD_DEV_VALUE), 
                    (AVG_VALUE - LOWER_VALUE) / (6 * STD_DEV_VALUE)) AS CPK,
              CTR_CD
          FROM 
              GroupedData
            WHERE STD_DEV_VALUE <> 0 AND CTR_CD='${DATA.CTR_CD}'
          ORDER BY 
              GRP_ID;`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "loadHistogram":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = ` WHERE ZTB_REL_RESULT.TEST_CODE = ${DATA.TEST_CODE} `
          if (DATA.G_CODE !== '') condition += ` AND ZTB_REL_REQUESTTABLE.G_CODE ='${DATA.G_CODE}'`
          if (DATA.G_NAME !== '') condition += ` AND M100.G_NAME LIKE '%${DATA.G_NAME}%'`
          if (DATA.TEST_CODE === 1) condition += ` AND ZTB_REL_RESULT.POINT_CODE =${DATA.POINT_CODE}`
          if (DATA.M_NAME !== '') condition += ` AND M090.M_NAME ='${DATA.M_NAME}'`
          let setpdQuery = `WITH DTCTB AS (
          SELECT  ZTB_REL_SPECTTABLE.BARCODE_CONTENT, ZTB_REL_RESULT.DTC_ID, (CASE ZTBEMPLINFO.FACTORY_CODE WHEN 1 THEN 'NM1' WHEN 2 THEN 'NM2' END) AS FACTORY , ZTB_REL_REQUESTTABLE.TEST_FINISH_TIME, ZTB_REL_REQUESTTABLE.TEST_EMPL_NO, ZTB_REL_RESULT.G_CODE, ZTB_REL_REQUESTTABLE.PROD_REQUEST_NO, M100.G_NAME, ZTB_REL_TESTTABLE.TEST_NAME, ZTB_REL_SPECTTABLE.POINT_CODE, ZTB_REL_SPECTTABLE.CENTER_VALUE , ZTB_REL_SPECTTABLE.UPPER_TOR,LOWER_TOR , ZTB_REL_RESULT.RESULT, ZTB_REL_SPECTTABLE.REMARK , ZTB_REL_TESTTYPE.TEST_TYPE_NAME,ZTBWORKPOSITION.WORK_POSITION_NAME , ZTB_REL_RESULT.SAMPLE_NO, ZTB_REL_REQUESTTABLE.REQUEST_DATETIME , ZTB_REL_REQUESTTABLE.REQUEST_EMPL_NO ,ZTB_REL_RESULT.M_CODE ,M090.M_NAME , M090.WIDTH_CD AS SIZE, NHAP_NVL.LOTCMS , ZTB_REL_RESULT.TEST_CODE,M090.TDS, M090.TDS_EMPL ,TDS_UPD_DATE, ZTB_REL_RESULT.CTR_CD FROM ZTB_REL_RESULT LEFT JOIN M100 ON(M100.G_CODE = ZTB_REL_RESULT.G_CODE AND M100.CTR_CD = ZTB_REL_RESULT.CTR_CD) LEFT JOIN M090 ON (M090.M_CODE = ZTB_REL_RESULT.M_CODE AND M090.CTR_CD = ZTB_REL_RESULT.CTR_CD) LEFT JOIN ZTB_REL_SPECTTABLE ON (  ZTB_REL_SPECTTABLE.G_CODE = ZTB_REL_RESULT.G_CODE AND ZTB_REL_SPECTTABLE.TEST_CODE = ZTB_REL_RESULT.TEST_CODE AND ZTB_REL_SPECTTABLE.POINT_CODE = ZTB_REL_RESULT.POINT_CODE AND ZTB_REL_SPECTTABLE.M_CODE = ZTB_REL_RESULT.M_CODE AND ZTB_REL_SPECTTABLE.CTR_CD = ZTB_REL_RESULT.CTR_CD)  LEFT JOIN ZTB_REL_REQUESTTABLE ON (ZTB_REL_REQUESTTABLE.DTC_ID = ZTB_REL_RESULT.DTC_ID AND ZTB_REL_REQUESTTABLE.TEST_CODE = ZTB_REL_RESULT.TEST_CODE AND ZTB_REL_REQUESTTABLE.CTR_CD = ZTB_REL_RESULT.CTR_CD)  LEFT JOIN ZTB_REL_TESTTABLE ON (ZTB_REL_TESTTABLE.TEST_CODE = ZTB_REL_RESULT.TEST_CODE AND ZTB_REL_TESTTABLE.CTR_CD = ZTB_REL_RESULT.CTR_CD) LEFT JOIN ZTB_REL_TESTTYPE ON (ZTB_REL_TESTTYPE.TEST_TYPE_CODE = ZTB_REL_REQUESTTABLE.TEST_TYPE_CODE AND ZTB_REL_TESTTYPE.CTR_CD = ZTB_REL_REQUESTTABLE.CTR_CD) LEFT JOIN ZTBEMPLINFO ON (ZTBEMPLINFO.EMPL_NO = ZTB_REL_REQUESTTABLE.REQUEST_EMPL_NO AND ZTBEMPLINFO.CTR_CD = ZTB_REL_REQUESTTABLE.CTR_CD) LEFT JOIN ZTBWORKPOSITION ON (ZTBWORKPOSITION.WORK_POSITION_CODE = ZTBEMPLINFO.WORK_POSITION_CODE AND ZTBWORKPOSITION.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN NHAP_NVL ON(NHAP_NVL.LOTNCC = ZTB_REL_REQUESTTABLE.REMARK AND NHAP_NVL.SIZE = M090.WIDTH_CD AND NHAP_NVL.CTR_CD = ZTB_REL_REQUESTTABLE.CTR_CD)
          ${condition} AND ZTB_REL_RESULT.CTR_CD='${DATA.CTR_CD}'
          )
          SELECT RESULT, COUNT(RESULT) AS CNT FROM DTCTB GROUP BY RESULT ORDER BY RESULT  ASC`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "loadDtcTestList":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
          SELECT * FROM ZTB_REL_TESTTABLE WHERE CTR_CD='${DATA.CTR_CD}'
          `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "loadDtcTestPointList":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
         SELECT ZTB_REL_TESTTABLE.TEST_CODE, ZTB_REL_TESTTABLE.TEST_NAME, ZTB_REL_TESTPOINT.POINT_CODE, ZTB_REL_TESTPOINT.POINT_NAME FROM ZTB_REL_TESTPOINT
LEFT JOIN ZTB_REL_TESTTABLE ON ZTB_REL_TESTPOINT.TEST_CODE = ZTB_REL_TESTTABLE.TEST_CODE AND ZTB_REL_TESTPOINT.CTR_CD = ZTB_REL_TESTTABLE.CTR_CD
WHERE ZTB_REL_TESTTABLE.TEST_CODE = ${DATA.TEST_CODE} AND ZTB_REL_TESTPOINT.CTR_CD = '${DATA.CTR_CD}'
          `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "addTestItem":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = ''
          if (DATA.TEST_CODE === -1) {
            setpdQuery = `INSERT INTO ZTB_REL_TESTTABLE (CTR_CD, TEST_NAME) VALUES ('${DATA.CTR_CD}',N'${DATA.TEST_NAME}')`
          }
          else {
            setpdQuery = `
            INSERT INTO ZTB_REL_TESTTABLE (CTR_CD, TEST_CODE, TEST_NAME) VALUES ('${DATA.CTR_CD}','${DATA.TEST_CODE}',N'${DATA.TEST_NAME}')
          `;
          }
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "addTestPoint":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `INSERT INTO ZTB_REL_TESTPOINT (CTR_CD, TEST_CODE, POINT_CODE, POINT_NAME) VALUES ('${DATA.CTR_CD}','${DATA.TEST_CODE}','${DATA.POINT_CODE}',N'${DATA.POINT_NAME}')`;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "loadHoldingMaterialByNCR_ID":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `SELECT NCR_ID,VENDOR_LOT, HOLDING_TB.M_CODE, M_NAME, WIDTH_CD,SUM(HOLDING_ROLL_QTY) AS TOTAL_HOLDING_ROLL, SUM(HOLDING_ROLL_QTY * HOLDING_QTY) AS TOTAL_HOLDING_M, SUM(HOLDING_ROLL_QTY * HOLDING_QTY*WIDTH_CD/1000) AS TOTAL_HOLDING_SQM, 'HOLDING' AS TYPE FROM HOLDING_TB 
          LEFT JOIN M090 ON M090.M_CODE= HOLDING_TB.M_CODE AND M090.CTR_CD = HOLDING_TB.CTR_CD
          WHERE NCR_ID=${DATA.NCR_ID} AND HOLDING_TB.CTR_CD='${DATA.CTR_CD}'
          GROUP BY NCR_ID,VENDOR_LOT, HOLDING_TB.M_CODE, M_NAME, WIDTH_CD
          UNION
          SELECT NCR_ID, VENDOR_LOT, ZTB_SX_NG_MATERIAL.M_CODE,M_NAME, WIDTH_CD, SUM(ROLL_QTY) AS TOTAL_HOLDING_ROLL, SUM(TOTAL_IN_QTY) AS TOTAL_HOLDING_M, SUM(TOTAL_IN_QTY*WIDTH_CD/1000) AS TOTAL_HOLDING_SQM, 'FAILING' AS TYPE FROM ZTB_SX_NG_MATERIAL
          LEFT JOIN M090 ON M090.M_CODE= ZTB_SX_NG_MATERIAL.M_CODE AND M090.CTR_CD= ZTB_SX_NG_MATERIAL.CTR_CD
          WHERE NCR_ID=${DATA.NCR_ID} AND ZTB_SX_NG_MATERIAL.CTR_CD='${DATA.CTR_CD}'
          GROUP BY NCR_ID,VENDOR_LOT, ZTB_SX_NG_MATERIAL.M_CODE, M_NAME, WIDTH_CD`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "updateDMLOSSKT_ZTB_DM_HISTORY":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `MERGE INTO ZTB_DM_HISTORY
          USING
          (
          SELECT ZTB_DM_HISTORY.PROD_REQUEST_NO, ZTB_DM_HISTORY.CTR_CD, isnull(BB.CURRENT_LOSS_KT,0) AS CURRENT_LOSS_KT  FROM ZTB_DM_HISTORY 
          LEFT JOIN (SELECT * FROM (
          SELECT PROD_REQUEST_NO, CTR_CD, CURRENT_LOSS_KT, INS_DATE, COUNT(PROD_REQUEST_NO) OVER (PARTITION BY PROD_REQUEST_NO ORDER BY INS_DATE DESC)  AS STT FROM ZTB_QLSXPLAN WHERE CURRENT_LOSS_KT is not null AND CURRENT_LOSS_KT <> 5 AND CTR_CD='${DATA.CTR_CD}'
          ) AS AA
          ) AS BB
          ON BB.PROD_REQUEST_NO = ZTB_DM_HISTORY.PROD_REQUEST_NO AND BB.CTR_CD = ZTB_DM_HISTORY.CTR_CD
          WHERE (BB.STT = 1 OR BB.STT is null) AND ZTB_DM_HISTORY.CTR_CD='${DATA.CTR_CD}'
          ) AS SRC
          ON (SRC.PROD_REQUEST_NO = ZTB_DM_HISTORY.PROD_REQUEST_NO AND SRC.CTR_CD = ZTB_DM_HISTORY.CTR_CD)
          WHEN MATCHED THEN
          UPDATE SET ZTB_DM_HISTORY.LOSS_KT = SRC.CURRENT_LOSS_KT;`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "deleteM_CODE_O301":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `DELETE FROM O301 WHERE CTR_CD='${DATA.CTR_CD}' AND PLAN_ID='${DATA.PLAN_ID}' AND M_CODE NOT IN (${DATA.M_CODE_LIST})`;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "deleteM_CODE_ZTB_QLSXCHITHI":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `DELETE FROM ZTB_QLSXCHITHI WHERE CTR_CD='${DATA.CTR_CD}' AND PLAN_ID='${DATA.PLAN_ID}' AND M_CODE NOT IN (${DATA.M_CODE_LIST})`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "traDataPlanLossSX":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = ``
          if (DATA.FACTORY !== 'ALL') {
            condition += ` AND SUBSTRING(ZTB_QLSXPLAN.PLAN_EQ,1,2)='${DATA.FACTORY}'`
          }
          let setpdQuery = `
          WITH AA AS (
            SELECT PLAN_ID_SUDUNG,M090.M_NAME, SUM(isnull(TOTAL_IN_QTY, 0)) AS INPUT_QTY, IN_KHO_SX.CTR_CD
            FROM IN_KHO_SX
            LEFT JOIN M090 ON (M090.M_CODE = IN_KHO_SX.M_CODE AND M090.CTR_CD = IN_KHO_SX.CTR_CD)
            WHERE IN_KHO_SX.USE_YN = 'X' AND IN_KHO_SX.CTR_CD='${DATA.CTR_CD}'
            GROUP BY IN_KHO_SX.PLAN_ID_SUDUNG,M090.M_NAME,IN_KHO_SX.CTR_CD
            ),
        BB AS (
            SELECT P500.PLAN_ID,M090.M_NAME,SUM(isnull(REMAIN_QTY, 0)) AS REMAIN_QTY,SUM(isnull(INPUT_QTY, 0))  AS INPUT_QTY, P500.CTR_CD
            FROM P500
            LEFT JOIN M090 ON (M090.M_CODE = P500.M_CODE AND M090.CTR_CD = P500.CTR_CD)
            GROUP BY PLAN_ID,M090.M_NAME,P500.CTR_CD),
        WAREHOUSE_OUT AS (
            SELECT PLAN_ID_INPUT,M090.M_NAME,SUM(isnull(TOTAL_IN_QTY, 0)) AS WAREHOUSE_OUTPUT_QTY, IN_KHO_SX.CTR_CD
            FROM IN_KHO_SX
            LEFT JOIN M090 ON (M090.M_CODE = IN_KHO_SX.M_CODE AND M090.CTR_CD = IN_KHO_SX.CTR_CD)
            WHERE IN_KHO_SX.PHANLOAI = 'N' AND IN_KHO_SX.CTR_CD='${DATA.CTR_CD}'
            GROUP BY PLAN_ID_INPUT,M090.M_NAME,IN_KHO_SX.CTR_CD),
        CC AS (
        SELECT PLAN_ID_INPUT,M090.M_NAME,SUM(isnull(TOTAL_IN_QTY, 0)) AS RETURN_QTY, IN_KHO_SX.CTR_CD
            FROM IN_KHO_SX
            LEFT JOIN M090 ON (M090.M_CODE = IN_KHO_SX.M_CODE AND M090.CTR_CD = IN_KHO_SX.CTR_CD)
            WHERE IN_KHO_SX.REMARK = 'TRA_KHO' AND IN_KHO_SX.PLAN_ID_SUDUNG is null AND IN_KHO_SX.CTR_CD='${DATA.CTR_CD}'
            GROUP BY PLAN_ID_INPUT,M090.M_NAME,IN_KHO_SX.CTR_CD) ,
        DD AS (
        SELECT PLAN_ID_INPUT,M090.M_NAME,SUM(isnull(TOTAL_IN_QTY, 0)) AS NEXT_OUT_QTY, IN_KHO_SX.CTR_CD
        FROM IN_KHO_SX
        LEFT JOIN M090 ON (M090.M_CODE = IN_KHO_SX.M_CODE AND M090.CTR_CD = IN_KHO_SX.CTR_CD)
        WHERE PLAN_ID_INPUT <> PLAN_ID_SUDUNG AND IN_KHO_SX.USE_YN = 'X' AND isnull(REMARK,'') <> 'TRA_KHO' AND IN_KHO_SX.CTR_CD='${DATA.CTR_CD}'
        GROUP BY PLAN_ID_INPUT,M090.M_NAME,IN_KHO_SX.CTR_CD),
        EE AS (
        SELECT PLAN_ID_SUDUNG,M090.M_NAME,SUM(isnull(TOTAL_IN_QTY, 0)) AS NEXT_IN_QTY, IN_KHO_SX.CTR_CD
        FROM IN_KHO_SX
        LEFT JOIN M090 ON (M090.M_CODE = IN_KHO_SX.M_CODE AND M090.CTR_CD = IN_KHO_SX.CTR_CD)
        WHERE PLAN_ID_INPUT <> PLAN_ID_SUDUNG AND IN_KHO_SX.CTR_CD='${DATA.CTR_CD}'
        GROUP BY PLAN_ID_SUDUNG,M090.M_NAME,IN_KHO_SX.CTR_CD),
        FF AS (
        SELECT PLAN_ID_INPUT,M090.M_NAME,SUM(isnull(TOTAL_IN_QTY, 0)) AS TON_KHO_AO, IN_KHO_SX.CTR_CD
        FROM IN_KHO_SX
        LEFT JOIN M090 ON (M090.M_CODE = IN_KHO_SX.M_CODE AND M090.CTR_CD = IN_KHO_SX.CTR_CD)
        WHERE IN_KHO_SX.USE_YN='Y' AND IN_KHO_SX.CTR_CD='${DATA.CTR_CD}'
        GROUP BY PLAN_ID_INPUT,M090.M_NAME,IN_KHO_SX.CTR_CD),
        GG AS (
        SELECT PLAN_ID_INPUT,M090.M_NAME,SUM(isnull(TOTAL_IN_QTY, 0)) AS LOCK_QTY, IN_KHO_SX.CTR_CD
        FROM IN_KHO_SX
        LEFT JOIN M090 ON (M090.M_CODE = IN_KHO_SX.M_CODE AND M090.CTR_CD = IN_KHO_SX.CTR_CD)
        WHERE IN_KHO_SX.USE_YN='O' AND IN_KHO_SX.CTR_CD='${DATA.CTR_CD}'
        GROUP BY PLAN_ID_INPUT,M090.M_NAME,IN_KHO_SX.CTR_CD)
        , INSPECT_INPUT_TABLE AS 
        ( SELECT 
              PLAN_ID, 
              SUM(
                CAST(INPUT_QTY_EA as float)
              ) AS INS_INPUT,
              CTR_CD
            FROM 
              ZTBINSPECTINPUTTB 
            WHERE CTR_CD='${DATA.CTR_CD}'
            GROUP BY 
              PLAN_ID, CTR_CD),
        INSPECT_OUTPUT_TABLE AS 
        (SELECT 
              PLAN_ID, 
              SUM(
                CAST(OUTPUT_QTY_EA as float)
              ) AS INS_OUTPUT,
              CTR_CD
            FROM 
              ZTBINSPECTOUTPUTTB 
            WHERE CTR_CD='${DATA.CTR_CD}'
            GROUP BY 
              PLAN_ID, CTR_CD),
          INSPECT_NK_TABLE AS
          ( SELECT 
              PLAN_ID, 
              SUM(
                CAST((INSPECT_TOTAL_QTY-ERR32) as float)
              ) AS INSPECT_TOTAL_QTY, 
              SUM(
                CAST(INSPECT_OK_QTY as float)
              ) AS INSPECT_OK_QTY, 
              SUM(
                CAST(
                  (
                    ERR4 + ERR5 + ERR6 + ERR7 + ERR8 + ERR9 + ERR10 + ERR11 + ERR12 + ERR13 + ERR14 + ERR15 + ERR16 + ERR17 + ERR18 + ERR19 + ERR20 + ERR21 + ERR22 + ERR23 + ERR24 + ERR25 + ERR26 + ERR27 + ERR28 + ERR29 + ERR30 + ERR31
                  ) as float
                )
              ) AS INSPECT_TOTAL_NG , 
              SUM(ERR4+ERR5+ERR6+ERR7+ERR8+ERR9+ERR10+ERR11) AS INSPECT_MATERIAL_NG, SUM(ERR12+ERR13+ERR14+ERR15+ERR16+ERR17+ERR18+ERR19+ERR20+ERR21+ERR22+ERR23+ERR24+ERR25+ERR26+ERR27+ERR28+ERR29+ERR30+ERR31) AS INSPECT_PROCESS_NG, SUM(ERR32) AS SX_MARKING_QTY, SUM(ERR1) AS LOSS_THEM_TUI,SUM(ERR1+ ERR2+ERR3) AS INSPECT_LOSS_QTY,
              CTR_CD
            FROM 
              ZTBINSPECTNGTB 
            WHERE CTR_CD='${DATA.CTR_CD}'
            GROUP BY 
              PLAN_ID, CTR_CD),
        PROCESS_TB AS
                  (
                  SELECT G_CODE,
                  CASE WHEN EQ4 <> 'NA' AND EQ4 <> 'NO' AND EQ4 is not null AND EQ4 <> '' THEN 4 
                  WHEN EQ3 <> 'NA' AND EQ3 <> 'NO' AND EQ3 is not null AND EQ3 <> ''  THEN 3
                  WHEN EQ2 <> 'NA' AND EQ2 <> 'NO' AND EQ2 is not null AND EQ2 <> ''  THEN 2 
                  ELSE 1 END AS MAX_PROCESS_NUMBER,
                  CTR_CD
                  FROM M100
                  WHERE CTR_CD='${DATA.CTR_CD}'
        ),
        QLSXPLANTB AS
        (
        SELECT 
          CASE WHEN P400.CODE_55 = '04' THEN 'SAMPLE' ELSE 'MASS' END AS PHAN_LOAI, 
          ZTB_QLSXPLAN.G_CODE, 
          ZTB_QLSXPLAN.PLAN_ID, 
          ZTB_QLSXPLAN.PLAN_DATE, 
          CONCAT(YEAR(ZTB_QLSXPLAN.PLAN_DATE) , '_',  MONTH(ZTB_QLSXPLAN.PLAN_DATE)) AS YW,
          ZTB_QLSXPLAN.PROD_REQUEST_NO, 
          M100.G_NAME, 
          M100.G_NAME_KD,
          isnull(
          CASE 
          WHEN ZTB_QLSXPLAN.PROCESS_NUMBER = 1 THEN (ZTB_QLSXPLAN.PLAN_QTY* ZTB_SX_RESULT.PD*1.0/ZTB_SX_RESULT.CAVITY/1000*(1+isnull(ZTB_DM_HISTORY.LOSS_SX1, M100.LOSS_SX1)/100) + isnull(ZTB_DM_HISTORY.LOSS_SETTING1,M100.LOSS_SETTING1) ) 
          WHEN ZTB_QLSXPLAN.PROCESS_NUMBER = 2 THEN (ZTB_QLSXPLAN.PLAN_QTY* ZTB_SX_RESULT.PD*1.0/ZTB_SX_RESULT.CAVITY/1000*(1+isnull(ZTB_DM_HISTORY.LOSS_SX2, M100.LOSS_SX2)/100) + isnull(ZTB_DM_HISTORY.LOSS_SETTING2,M100.LOSS_SETTING2))
          WHEN ZTB_QLSXPLAN.PROCESS_NUMBER = 3 THEN (ZTB_QLSXPLAN.PLAN_QTY* ZTB_SX_RESULT.PD*1.0/ZTB_SX_RESULT.CAVITY/1000*(1+isnull(ZTB_DM_HISTORY.LOSS_SX3, M100.LOSS_SX3)/100) + isnull(ZTB_DM_HISTORY.LOSS_SETTING3,M100.LOSS_SETTING3))
          WHEN ZTB_QLSXPLAN.PROCESS_NUMBER = 4 THEN (ZTB_QLSXPLAN.PLAN_QTY* ZTB_SX_RESULT.PD*1.0/ZTB_SX_RESULT.CAVITY/1000*(1+isnull(ZTB_DM_HISTORY.LOSS_SX4, M100.LOSS_SX4)/100) + isnull(ZTB_DM_HISTORY.LOSS_SETTING4,M100.LOSS_SETTING4))
          ELSE ZTB_QLSXPLAN.PLAN_QTY* ZTB_SX_RESULT.PD*1.0/ZTB_SX_RESULT.CAVITY/1000 END,0) AS PLAN_TARGET_MET
          ,
          ZTB_QLSXPLAN.PLAN_QTY, 
          ZTB_QLSXPLAN.PLAN_QTY* ZTB_SX_RESULT.PD*1.0/ZTB_SX_RESULT.CAVITY/1000 AS PLAN_ORG_MET,  
          M100.EQ1, 
          M100.EQ2, 
          ZTB_QLSXPLAN.PLAN_EQ, 
          ZTB_QLSXPLAN.PLAN_FACTORY, 
          ZTB_QLSXPLAN.PROCESS_NUMBER, 
          ZTB_QLSXPLAN.STEP, 
        (isnull(BB.INPUT_QTY * 1.00000, isnull(AA.INPUT_QTY * 1.00000,0)) - isnull(BB.REMAIN_QTY, 0)) AS USED_QTY, 
        isnull(ZTB_SX_RESULT.NG_MET,0) AS NG_MET, 
          isnull(ZTB_SX_RESULT.SETTING_MET,0) AS SETTING_MET,
          isnull(ZTB_SX_RESULT.SX_RESULT,0) AS SX_RESULT,
        SUBSTRING(ZTB_SX_RESULT.EQ_NAME, 1, 2) AS MACHINE_NAME,
        ZTB_QLSXPLAN.CTR_CD
        FROM 
          ZTB_QLSXPLAN 
          LEFT JOIN AA ON (AA.PLAN_ID_SUDUNG= ZTB_QLSXPLAN.PLAN_ID AND AA.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
          LEFT JOIN BB ON (BB.PLAN_ID= ZTB_QLSXPLAN.PLAN_ID AND BB.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
          LEFT JOIN CC ON (CC.PLAN_ID_INPUT= ZTB_QLSXPLAN.PLAN_ID AND CC.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
          LEFT JOIN DD ON (DD.PLAN_ID_INPUT= ZTB_QLSXPLAN.PLAN_ID AND DD.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
          LEFT JOIN EE ON (EE.PLAN_ID_SUDUNG= ZTB_QLSXPLAN.PLAN_ID AND EE.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
          LEFT JOIN FF ON (FF.PLAN_ID_INPUT= ZTB_QLSXPLAN.PLAN_ID AND FF.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
          LEFT JOIN GG ON (GG.PLAN_ID_INPUT= ZTB_QLSXPLAN.PLAN_ID AND GG.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
          LEFT JOIN WAREHOUSE_OUT ON (WAREHOUSE_OUT.PLAN_ID_INPUT= ZTB_QLSXPLAN.PLAN_ID AND WAREHOUSE_OUT.CTR_CD = ZTB_QLSXPLAN.CTR_CD) 
          LEFT JOIN ZTB_SX_RESULT ON (ZTB_SX_RESULT.PLAN_ID = ZTB_QLSXPLAN.PLAN_ID AND ZTB_SX_RESULT.CTR_CD = ZTB_QLSXPLAN.CTR_CD) 
          LEFT JOIN  INSPECT_INPUT_TABLE ON(ZTB_QLSXPLAN.PLAN_ID = INSPECT_INPUT_TABLE.PLAN_ID AND INSPECT_INPUT_TABLE.CTR_CD = ZTB_QLSXPLAN.CTR_CD) 
          LEFT JOIN INSPECT_OUTPUT_TABLE ON (ZTB_QLSXPLAN.PLAN_ID = INSPECT_OUTPUT_TABLE.PLAN_ID AND INSPECT_OUTPUT_TABLE.CTR_CD = ZTB_QLSXPLAN.CTR_CD) 
          LEFT JOIN  INSPECT_NK_TABLE ON (ZTB_QLSXPLAN.PLAN_ID = INSPECT_NK_TABLE.PLAN_ID AND INSPECT_NK_TABLE.CTR_CD = ZTB_QLSXPLAN.CTR_CD) 
          LEFT JOIN M100 ON (M100.G_CODE = ZTB_QLSXPLAN.G_CODE AND M100.CTR_CD = ZTB_QLSXPLAN.CTR_CD) 
          LEFT JOIN PROCESS_TB ON (PROCESS_TB.G_CODE = ZTB_QLSXPLAN.G_CODE AND PROCESS_TB.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
          LEFT JOIN ZTB_SX_EFFICIENCY ON (ZTB_QLSXPLAN.PLAN_ID = ZTB_SX_EFFICIENCY.PLAN_ID AND ZTB_SX_EFFICIENCY.CTR_CD = ZTB_QLSXPLAN.CTR_CD) 
          LEFT JOIN P400 ON (P400.PROD_REQUEST_NO = ZTB_QLSXPLAN.PROD_REQUEST_NO AND P400.CTR_CD = ZTB_QLSXPLAN.CTR_CD) 
          LEFT JOIN ZTB_DM_HISTORY ON ZTB_QLSXPLAN.PROD_REQUEST_NO= ZTB_DM_HISTORY.PROD_REQUEST_NO AND ZTB_DM_HISTORY.CTR_CD = ZTB_QLSXPLAN.CTR_CD
          WHERE ZTB_QLSXPLAN.PLAN_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE}' AND ZTB_QLSXPLAN.PLAN_DATE > '2024-01-01' AND P400.CODE_55 <> '04' AND ZTB_QLSXPLAN.STEP = 0 AND ZTB_QLSXPLAN.PROCESS_NUMBER <> 0 AND ZTB_SX_RESULT.SX_RESULT is not null ${condition} AND ZTB_QLSXPLAN.CTR_CD='${DATA.CTR_CD}'
        ),
        FNTB AS
        (
        SELECT QLSXPLANTB.*, (PLAN_TARGET_MET- PLAN_ORG_MET)/PLAN_ORG_MET AS PLAN_LOSS, (PLAN_TARGET_MET- PLAN_ORG_MET) AS PLAN_LOSS_MET, (NG_MET + SETTING_MET) AS ACTUAL_LOSS_MET, (NG_MET + SETTING_MET)/(USED_QTY) AS ACTUAL_LOSS FROM QLSXPLANTB WHERE USED_QTY <> 0 AND PLAN_ORG_MET <> 0
        )
        SELECT YW, SUM(PLAN_ORG_MET) AS PLAN_ORG_MET, SUM(PLAN_TARGET_MET) AS PLAN_INPUT_MET, SUM(PLAN_QTY) AS PLAN_QTY,SUM(SX_RESULT) AS SX_RESULT,SUM(USED_QTY) AS ACTUAL_INPUT_MET, SUM(PLAN_LOSS_MET) AS PLAN_LOSS_MET , SUM(ACTUAL_LOSS_MET) AS ACTUAL_LOSS_MET,SUM(PLAN_LOSS_MET)/SUM(USED_QTY) AS PLAN_LOSS_RATE,SUM(ACTUAL_LOSS_MET)/SUM(USED_QTY) AS ACTUAL_LOSS_RATE  FROM FNTB GROUP BY YW ORDER BY YW ASC`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "loadLeadtimeData":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
            WITH
AA AS
(
SELECT
PVTB.PROD_REQUEST_NO,
PVTB.CTR_CD,
isnull(PVTB.[1], 0) AS CD1,
isnull(PVTB.[2], 0) AS CD2,
isnull(PVTB.[3], 0) AS CD3,
isnull(PVTB.[4], 0) AS CD4
FROM
(
SELECT
ZTB_QLSXPLAN.PROD_REQUEST_NO,
ZTB_QLSXPLAN.PROCESS_NUMBER,
ZTB_QLSXPLAN.CTR_CD,
SUM(isnull(SX_RESULT, 0)) AS KETQUASX
FROM
ZTB_SX_RESULT
LEFT JOIN ZTB_QLSXPLAN ON (ZTB_QLSXPLAN.PLAN_ID = ZTB_SX_RESULT.PLAN_ID AND ZTB_QLSXPLAN.CTR_CD = ZTB_SX_RESULT.CTR_CD)
WHERE
ZTB_QLSXPLAN.STEP = 0
GROUP BY
ZTB_QLSXPLAN.PROD_REQUEST_NO,
ZTB_QLSXPLAN.PROCESS_NUMBER,
ZTB_QLSXPLAN.CTR_CD
) AS PV PIVOT (
SUM(PV.KETQUASX) FOR PV.PROCESS_NUMBER IN ([1], [2], [3], [4])
) AS PVTB
),
LOSSKT AS (
SELECT BB.G_CODE, BB.CTR_CD, SUM(BB.INSPECT_TOTAL_QTY) AS INSPECT_TOTAL_QTY, SUM(BB.TOTAL_NG) AS TOTAL_NG FROM
(
SELECT AA.G_CODE, AA.CTR_CD, AA.INSPECT_DATE,AA.INSPECT_TOTAL_QTY, AA.TOTAL_NG, COUNT(G_CODE) OVER(PARTITION BY G_CODE, CTR_CD ORDER BY INSPECT_DATE DESC) AS CNT
FROM
(
SELECT  G_CODE, CTR_CD, CAST(INSPECT_DATETIME AS date) AS INSPECT_DATE, SUM(INSPECT_TOTAL_QTY-ERR32) AS INSPECT_TOTAL_QTY, SUM(ERR1+ERR2+ERR3+ERR4+ERR5+ERR6+ERR7+ERR8+ERR9+ERR10+ERR11+ERR12+ERR13+ERR14+ERR15+ERR16+ERR17+ERR18+ERR19+ERR20+ERR21+ERR22+ERR23+ERR24+ERR25+ERR26+ERR27+ERR28+ERR29+ERR30+ERR31
) AS TOTAL_NG FROM ZTBINSPECTNGTB
GROUP BY G_CODE, CTR_CD, CAST(INSPECT_DATETIME AS date)
) AS AA
) AS BB
WHERE BB.CNT <=10 AND BB.INSPECT_TOTAL_QTY <> 0
GROUP BY BB.G_CODE, BB.CTR_CD
),
INSPECT_OUTPUT_TB AS
(
SELECT CTR_CD,PROD_REQUEST_NO, SUM(OUTPUT_QTY_EA) AS LOT_TOTAL_OUTPUT_QTY_EA FROM ZTBINSPECTOUTPUTTB GROUP BY CTR_CD,PROD_REQUEST_NO
),
M_STOCKTB AS
(
SELECT M140.G_CODE, M140.CTR_CD, M090.M_NAME, SUM(isnull(STOCK_CFM_NM1,0)+ isnull(STOCK_CFM_NM2,0)) AS STOCK FROM M140 
JOIN M090 ON M090.M_CODE = M140.M_CODE AND M090.CTR_CD = M140.CTR_CD
JOIN M100 ON M100.G_CODE=  M140.G_CODE AND M100.CTR_CD = M140.CTR_CD
WHERE LIEUQL_SX =1 AND (M090.WIDTH_CD >= G_WIDTH  OR M090.WIDTH_CD >= G_LENGTH)
GROUP BY M140.G_CODE, M140.CTR_CD, M090.M_NAME
),
YCSXTB AS
(
SELECT
M100.FACTORY,
M100.LOSS_SETTING1,
M100.LOSS_SETTING2,
M100.LOSS_SETTING3,
M100.LOSS_SETTING4,
M100.LOSS_SX1,
M100.LOSS_SX2,
M100.LOSS_SX3,
M100.LOSS_SX4,
M100.Setting1,
M100.Setting2,
M100.Step1,
M100.Step2,
M100.UPH1,
M100.UPH2,
M100.Step3,
M100.Step4,
P400.DELIVERY_DT,
M100.EQ1,
M100.EQ2,
M100.EQ3,
M100.EQ4,
M100.UPH3,
M100.UPH4,
M100.Setting3,
M100.Setting4,
P400.G_CODE,
M100.PROD_MAIN_MATERIAL,
P400.PROD_REQUEST_DATE,
  CASE WHEN (P400.YCSX_PENDING =0 OR isnull(INSPECT_OUTPUT_TB.LOT_TOTAL_OUTPUT_QTY_EA, 0) >= P400.PROD_REQUEST_QTY) THEN 0 ELSE 1 END AS YCSX_PENDING,
M100.G_NAME,
M100.G_NAME_KD,
M100.G_WIDTH,
M100.G_LENGTH,
M100.PD,
M100.G_C* M100.G_C_R AS CAVITY,
P400.PROD_REQUEST_NO,
P400.CTR_CD,
isnull(AA.CD1, 0) AS CD1,
isnull(AA.CD2, 0) AS CD2,
isnull(AA.CD3, 0) AS CD3,
isnull(AA.CD4, 0) AS CD4,
    CASE WHEN M100.PD <>0 THEN
CEILING((P400.PROD_REQUEST_QTY*(1+(isnull(LOSS_SX2,0)+isnull(LOSS_SX3,0)+isnull(LOSS_SX4,0))*1.0/100+isnull((LOSSKT.TOTAL_NG*1.0/LOSSKT.INSPECT_TOTAL_QTY),0)) + (isnull(LOSS_SETTING2,0)+isnull(LOSS_SETTING3,0)+isnull(LOSS_SETTING4,0))*1.0/M100.PD*(M100.G_C*M100.G_C_R)*1000)) ELSE 0 END AS SLC_CD1,      
CASE WHEN M100.PD <>0 THEN CEILING((P400.PROD_REQUEST_QTY*(1+(isnull(LOSS_SX3,0)+isnull(LOSS_SX4,0))*1.0/100+isnull((LOSSKT.TOTAL_NG*1.0/LOSSKT.INSPECT_TOTAL_QTY),0)) + (isnull(LOSS_SETTING3,0)+isnull(LOSS_SETTING4,0))*1.0/M100.PD*(M100.G_C*M100.G_C_R)*1000)) ELSE 0 END AS SLC_CD2,
CASE WHEN M100.PD <>0 THEN CEILING((P400.PROD_REQUEST_QTY*(1+(isnull(LOSS_SX4,0))*1.0/100+isnull((LOSSKT.TOTAL_NG*1.0/LOSSKT.INSPECT_TOTAL_QTY),0)) + (isnull(LOSS_SETTING4,0))*1.0/M100.PD*(M100.G_C*M100.G_C_R)*1000)) ELSE 0 END AS SLC_CD3,
CASE WHEN M100.PD <>0 THEN CEILING((P400.PROD_REQUEST_QTY*(1+(0)*1.0/100+isnull((LOSSKT.TOTAL_NG*1.0/LOSSKT.INSPECT_TOTAL_QTY),0)) + (0)*1.0/M100.PD*(M100.G_C*M100.G_C_R)*1000)) ELSE 0 END AS SLC_CD4
FROM P400
LEFT JOIN M100 ON (M100.G_CODE =P400.G_CODE AND M100.CTR_CD = P400.CTR_CD)
LEFT JOIN AA ON (AA.PROD_REQUEST_NO = P400.PROD_REQUEST_NO AND AA.CTR_CD = P400.CTR_CD)
LEFT JOIN LOSSKT ON (LOSSKT.G_CODE = P400.G_CODE AND LOSSKT.CTR_CD = P400.CTR_CD)
LEFT JOIN INSPECT_OUTPUT_TB ON (INSPECT_OUTPUT_TB.PROD_REQUEST_NO = P400.PROD_REQUEST_NO AND INSPECT_OUTPUT_TB.CTR_CD = P400.CTR_CD)   
WHERE P400.CODE_55<> '04' AND P400.USE_YN ='Y' AND P400.INS_DATE > '2024-07-01' AND P400.CTR_CD='${DATA.CTR_CD}'
),
YCSXTB2 AS
(
SELECT YCSXTB.*,
CASE WHEN EQ1 <> 'NA' AND EQ1 <> 'NO' THEN CASE WHEN SLC_CD1 - CD1 < 0 THEN 0 ELSE SLC_CD1 - CD1 END  ELSE 0 END AS TCD1,
CASE WHEN EQ2 <> 'NA' AND EQ2 <> 'NO' THEN CASE WHEN SLC_CD2 - CD2 < 0 THEN 0 ELSE SLC_CD2 - CD2 END  ELSE 0 END AS TCD2,
CASE WHEN EQ3 <> 'NA' AND EQ3 <> 'NO' THEN CASE WHEN SLC_CD3 - CD3 < 0 THEN 0 ELSE SLC_CD3 - CD3 END  ELSE 0 END AS TCD3,
CASE WHEN EQ4 <> 'NA' AND EQ4 <> 'NO' THEN CASE WHEN SLC_CD4 - CD4 < 0 THEN 0 ELSE SLC_CD4 - CD4 END  ELSE 0 END AS TCD4
FROM YCSXTB  WHERE  YCSXTB.YCSX_PENDING = 1
),
YCSXTB3 AS
(
SELECT YCSXTB2.*,
CASE WHEN TCD1 > 0 AND UPH1 <>0 THEN TCD1/UPH1*60*Step1  + Setting1 ELSE 0 END AS LT1,        
CASE WHEN TCD2 > 0 AND UPH2 <>0 THEN TCD1/UPH2*60*Step2  + Setting2 ELSE 0 END AS LT2,        
CASE WHEN TCD3 > 0 AND UPH3 <>0 THEN TCD1/UPH3*60*Step3  + Setting3 ELSE 0 END AS LT3,        
CASE WHEN TCD4 > 0 AND UPH4 <>0 THEN TCD1/UPH4*60*Step4  + Setting4 ELSE 0 END AS LT4
FROM YCSXTB2
),
YCSXTB4 AS
(
SELECT 'FR' AS MACHINE, YCSXTB3.*, CASE WHEN EQ1='FR' THEN LT1 WHEN EQ2= 'FR' THEN LT2 WHEN EQ3='FR' THEN LT3 WHEN EQ4='FR' THEN LT4 ELSE 0 END AS LEADTIME,  CASE WHEN EQ1='FR' THEN TCD1 WHEN EQ2= 'FR' THEN TCD2 WHEN EQ3='FR' THEN TCD3 WHEN EQ4='FR' THEN TCD4 ELSE 0 END AS TCD, CASE WHEN EQ1='FR' THEN LOSS_SX1 WHEN EQ2= 'FR' THEN LOSS_SX2 WHEN EQ3='FR' THEN LOSS_SX3 WHEN EQ4='FR' THEN LOSS_SX4 ELSE 0 END AS LCD, CASE WHEN EQ1='FR' THEN LOSS_SETTING1 WHEN EQ2= 'FR' THEN LOSS_SETTING2 WHEN EQ3='FR' THEN LOSS_SETTING3 WHEN EQ4='FR' THEN LOSS_SETTING4 ELSE 0 END AS STCD  FROM YCSXTB3
UNION ALL
SELECT 'SR' AS MACHINE, YCSXTB3.*, CASE WHEN EQ1='SR' THEN LT1 WHEN EQ2= 'SR' THEN LT2 WHEN EQ3='SR' THEN LT3 WHEN EQ4='SR' THEN LT4 ELSE 0 END AS LEADTIME,  CASE WHEN EQ1='SR' THEN TCD1 WHEN EQ2= 'SR' THEN TCD2 WHEN EQ3='SR' THEN TCD3 WHEN EQ4='SR' THEN TCD4 ELSE 0 END AS TCD, CASE WHEN EQ1='SR' THEN LOSS_SX1 WHEN EQ2= 'SR' THEN LOSS_SX2 WHEN EQ3='SR' THEN LOSS_SX3 WHEN EQ4='SR' THEN LOSS_SX4 ELSE 0 END AS LCD, CASE WHEN EQ1='SR' THEN LOSS_SETTING1 WHEN EQ2= 'SR' THEN LOSS_SETTING2 WHEN EQ3='SR' THEN LOSS_SETTING3 WHEN EQ4='SR' THEN LOSS_SETTING4 ELSE 0 END AS STCD FROM YCSXTB3
UNION ALL
SELECT 'DC' AS MACHINE, YCSXTB3.*, CASE WHEN EQ1='DC' THEN LT1 WHEN EQ2= 'DC' THEN LT2 WHEN EQ3='DC' THEN LT3 WHEN EQ4='DC' THEN LT4 ELSE 0 END AS LEADTIME,  CASE WHEN EQ1='DC' THEN TCD1 WHEN EQ2= 'DC' THEN TCD2 WHEN EQ3='DC' THEN TCD3 WHEN EQ4='DC' THEN TCD4 ELSE 0 END AS TCD, CASE WHEN EQ1='DC' THEN LOSS_SX1 WHEN EQ2= 'DC' THEN LOSS_SX2 WHEN EQ3='DC' THEN LOSS_SX3 WHEN EQ4='DC' THEN LOSS_SX4 ELSE 0 END AS LCD, CASE WHEN EQ1='DC' THEN LOSS_SETTING1 WHEN EQ2= 'DC' THEN LOSS_SETTING2 WHEN EQ3='DC' THEN LOSS_SETTING3 WHEN EQ4='DC' THEN LOSS_SETTING4 ELSE 0 END AS STCD FROM YCSXTB3
UNION ALL
SELECT 'ED' AS MACHINE, YCSXTB3.*, CASE WHEN EQ1='ED' THEN LT1 WHEN EQ2= 'ED' THEN LT2 WHEN EQ3='ED' THEN LT3 WHEN EQ4='ED' THEN LT4 ELSE 0 END AS LEADTIME,  CASE WHEN EQ1='ED' THEN TCD1 WHEN EQ2= 'ED' THEN TCD2 WHEN EQ3='ED' THEN TCD3 WHEN EQ4='ED' THEN TCD4 ELSE 0 END AS TCD, CASE WHEN EQ1='ED' THEN LOSS_SX1 WHEN EQ2= 'ED' THEN LOSS_SX2 WHEN EQ3='ED' THEN LOSS_SX3 WHEN EQ4='ED' THEN LOSS_SX4 ELSE 0 END AS LCD, CASE WHEN EQ1='ED' THEN LOSS_SETTING1 WHEN EQ2= 'ED' THEN LOSS_SETTING2 WHEN EQ3='ED' THEN LOSS_SETTING3 WHEN EQ4='ED' THEN LOSS_SETTING4 ELSE 0 END AS STCD FROM YCSXTB3
)
SELECT YCSXTB4.*, TCD*PD/CAVITY/1000*(1+isnull(LCD,0)/100) + isnull(STCD,0) AS NEEDED_M, isnull(M_STOCKTB.STOCK,0) AS M_STOCK_QTY FROM YCSXTB4 
LEFT JOIN M_STOCKTB ON M_STOCKTB.G_CODE = YCSXTB4.G_CODE AND M_STOCKTB.CTR_CD = YCSXTB4.CTR_CD
WHERE LEADTIME > 0
ORDER BY PROD_REQUEST_NO ASC
        `;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "loadDMSX":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `SELECT G_CODE, EQ1, EQ2, EQ3, EQ4, Setting1, Setting2, Setting3, Setting4, UPH1, UPH2, UPH3, UPH4, Step1, Step2, Step3, Step4, LOSS_SX1, LOSS_SX2, LOSS_SX3, LOSS_SX4, LOSS_SETTING1, LOSS_SETTING2, LOSS_SETTING3, LOSS_SETTING4, FACTORY, NOTE, CTR_CD FROM M100 WHERE G_CODE='${DATA.G_CODE}' AND M100.CTR_CD='${DATA.CTR_CD}'`;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "updateG_SEQ_M140":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `MERGE INTO M140
            USING 
            (SELECT G_CODE, M_CODE, G_SEQ, RIGHT('00000' + CAST(COUNT(G_CODE) OVER (PARTITION BY G_CODE ORDER BY INS_DATE ASC) AS VARCHAR(3)), 3) AS STT, INS_DATE, CTR_CD
             FROM M140 
             WHERE G_SEQ='NaN' AND CTR_CD='${DATA.CTR_CD}')
            AS SRC_TB
            ON (SRC_TB.G_CODE = M140.G_CODE AND SRC_TB.M_CODE = M140.M_CODE AND SRC_TB.INS_DATE = M140.INS_DATE AND SRC_TB.CTR_CD = M140.CTR_CD)
            WHEN MATCHED THEN
            UPDATE
            SET M140.G_SEQ = SRC_TB.STT
            WHERE M140.CTR_CD='${DATA.CTR_CD}';`;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "updateO301_OUT_CFM_QTY_FROM_O302":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `MERGE INTO O301
          USING (
          SELECT PLAN_ID, M_CODE, CTR_CD, SUM(OUT_CFM_QTY) AS OUT_CFM_QTY FROM O302 WHERE PLAN_ID='${DATA.PLAN_ID}' AND CTR_CD='${DATA.CTR_CD}' GROUP BY PLAN_ID, M_CODE, CTR_CD
          ) AS SRC_TB
          ON (O301.PLAN_ID = SRC_TB.PLAN_ID AND O301.M_CODE = SRC_TB.M_CODE AND O301.CTR_CD = SRC_TB.CTR_CD)
          WHEN MATCHED THEN
          UPDATE
          SET O301.OUT_CFM_QTY = SRC_TB.OUT_CFM_QTY;`;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "updateUSE_YN_I222_RETURN_NVL":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `UPDATE I222 SET USE_YN='X', UPD_DATE= GETDATE(), UPD_EMPL='${DATA.UPD_EMPL}' WHERE M_LOT_NO='${DATA.M_LOT_NO}' AND USE_YN <> 'X'
          UPDATE RETURN_NVL SET USE_YN='X',UPD_DATE= GETDATE(), UPD_EMPL='${DATA.UPD_EMPL}' WHERE CTR_CD='${DATA.CTR_CD}' AND M_LOT_NO='${DATA.M_LOT_NO}' AND USE_YN <> 'X'
          `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "updateIQCConfirm_FAILING":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
          UPDATE ZTB_SX_NG_MATERIAL SET IN2_EMPL='${DATA.IN2_EMPL.toUpperCase()}', UPD_EMPL='${DATA.IN2_EMPL.toUpperCase()}', UPD_DATE= GETDATE() WHERE CTR_CD='${DATA.CTR_CD}' AND FAIL_ID=${DATA.FAIL_ID} 
          `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "toggleMachineActiveStatus":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
          UPDATE ZTB_SX_EQ_STATUS SET EQ_ACTIVE ='${DATA.EQ_ACTIVE}' WHERE CTR_CD='${DATA.CTR_CD}' AND EQ_CODE='${DATA.EQ_CODE}'
          `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "addMachine":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
          INSERT INTO ZTB_SX_EQ_STATUS (CTR_CD, FACTORY, EQ_CODE, EQ_NAME, EQ_OP, EQ_ACTIVE, EQ_STATUS, INS_DATE, INS_EMPL, UPD_DATE, UPD_EMPL) VALUES ('${DATA.CTR_CD}','${DATA.FACTORY}','${DATA.EQ_CODE}','${DATA.EQ_NAME}', ${DATA.EQ_OP},'${DATA.EQ_ACTIVE}','STOP',GETDATE(),'${EMPL_NO}',GETDATE(), '${EMPL_NO}')
          `;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "deleteMachine":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
          DELETE FROM ZTB_SX_EQ_STATUS WHERE CTR_CD='${DATA.CTR_CD}' AND EQ_CODE='${DATA.EQ_CODE}'
          `;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "update_file_name":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
          INSERT INTO ZTB_FILE_TRANSFER (CTR_CD, FILE_NAME, FILE_SIZE, INS_DATE, INS_EMPL, UPD_DATE, UPD_EMPL) VALUES ('${DATA.CTR_CD}','${DATA.FILE_NAME}',${DATA.FILE_SIZE ?? 0}, GETDATE(),'${EMPL_NO}',GETDATE(), '${EMPL_NO}')
          `;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "get_file_list":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
          SELECT * FROM ZTB_FILE_TRANSFER ORDER BY INS_DATE DESC
          `;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "delete_file":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          fs.rm(`C:/xampp/htdocs/globalfiles/${DATA.CTR_CD}_${DATA.FILE_NAME}`, (error) => {
            //you can handle the error here
            console.log("Loi remove file" + error);
          });
          let setpdQuery = `
          DELETE FROM ZTB_FILE_TRANSFER WHERE CTR_CD='${DATA.CTR_CD}' AND FILE_NAME='${DATA.FILE_NAME}'
          `;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "resetStatus":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery1 = `
          UPDATE ZTBLOTPRINTHISTORYTB SET INS_STATUS='E' WHERE INS_STATUS <> 'E' AND TABLE_NO='${DATA.EQ_NAME}' AND CTR_CD='${DATA.CTR_CD}'
          `;
          let setpdQuery2 = `
          UPDATE ZTB_INS_STATUS SET EQ_STATUS='STOP', EMPL_COUNT=0 WHERE EQ_NAME='${DATA.EQ_NAME}' AND EQ_STATUS='START' AND CTR_CD='${DATA.CTR_CD}'
          `;
          console.log(setpdQuery1);
          checkkq = await queryDB(setpdQuery1);
          console.log(setpdQuery2);
          checkkq = await queryDB(setpdQuery2);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "updateStockM090":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery1 = `
            MERGE INTO M090 USING(
            SELECT 
              M090.CTR_CD,
              M090.M_CODE, 
              M090.M_NAME, 
              isnull(STOCK_TB2.STOCK_ROLL_NM1, 0) AS STOCK_ROLL_NM1, 
              isnull(STOCK_TB2.STOCK_CFM_NM1, 0) AS STOCK_CFM_NM1, 
              isnull(HOLDING_TB.HOLDING_ROLL_NM1, 0) AS HOLDING_ROLL_NM1, 
              isnull(HOLDING_TB.HOLDING_CFM_NM1, 0) AS HOLDING_CFM_NM1 
            FROM 
              M090 
              LEFT JOIN(
                SELECT 
                  STOCK_TB.CTR_CD,
                  STOCK_TB.M_CODE, 
                  SUM(STOCK_TB.IN_ROLL_QTY) AS STOCK_ROLL_NM1, 
                  SUM(STOCK_TB.IN_CFM_QTY) AS STOCK_CFM_NM1 
                FROM 
                  (
                    SELECT 
                      I222.CTR_CD,
                      I222.M_CODE, 
                      SUM(I222.ROLL_QTY) AS IN_ROLL_QTY, 
                      SUM(I222.ROLL_QTY * IN_CFM_QTY) AS IN_CFM_QTY 
                    FROM 
                      I222 
                    WHERE 
                      I222.USE_YN = 'T' 
                      AND I222.FACTORY = 'NM1' 
                      AND I222.CTR_CD='${DATA.CTR_CD}'
                    GROUP BY 
                      I222.CTR_CD, I222.M_CODE 
                    UNION ALL 
                    SELECT 
                      RETURN_NVL.CTR_CD,
                      RETURN_NVL.M_CODE, 
                      SUM(RETURN_NVL.ROLL_QTY) AS IN_ROLL_QTY, 
                      SUM(RETURN_NVL.ROLL_QTY * RETURN_QTY) AS IN_CFM_QTY 
                    FROM 
                      RETURN_NVL 
                    WHERE 
                      RETURN_NVL.USE_YN = 'Y' 
                      AND RETURN_NVL.FACTORY = 'NM1' 
                      AND RETURN_NVL.CTR_CD='${DATA.CTR_CD}'
                    GROUP BY 
                      RETURN_NVL.CTR_CD, RETURN_NVL.M_CODE
                  ) AS STOCK_TB 
                GROUP BY 
                  STOCK_TB.CTR_CD, STOCK_TB.M_CODE
              ) AS STOCK_TB2 ON(STOCK_TB2.CTR_CD = M090.CTR_CD AND STOCK_TB2.M_CODE = M090.M_CODE) 
              LEFT JOIN(
                SELECT 
                  HOLDING_TB.CTR_CD,
                  HOLDING_TB.M_CODE, 
                  SUM(HOLDING_TB.HOLDING_ROLL_QTY) AS HOLDING_ROLL_NM1, 
                  SUM(
                    HOLDING_TB.HOLDING_ROLL_QTY * HOLDING_QTY
                  ) AS HOLDING_CFM_NM1 
                FROM 
                  HOLDING_TB 
                WHERE 
                  HOLDING_TB.USE_YN = 'B' 
                  AND HOLDING_TB.FACTORY = 'NM1' 
                  AND HOLDING_TB.CTR_CD='${DATA.CTR_CD}'
                GROUP BY 
                  HOLDING_TB.CTR_CD, HOLDING_TB.M_CODE
              ) AS HOLDING_TB ON(HOLDING_TB.CTR_CD = M090.CTR_CD AND HOLDING_TB.M_CODE = M090.M_CODE)
            WHERE M090.CTR_CD='${DATA.CTR_CD}'
          ) AS TONLIEU ON(M090.CTR_CD = TONLIEU.CTR_CD AND M090.M_CODE = TONLIEU.M_CODE) WHEN MATCHED THEN 
          UPDATE 
          SET 
            STOCK_ROLL_NM1 = TONLIEU.STOCK_ROLL_NM1, 
            STOCK_CFM_NM1 = TONLIEU.STOCK_CFM_NM1, 
            HOLDING_ROLL_NM1 = TONLIEU.HOLDING_ROLL_NM1, 
            HOLDING_CFM_NM1 = TONLIEU.HOLDING_CFM_NM1;
            `;
          let setpdQuery2 = `
             MERGE INTO M090 USING(
            SELECT 
              M090.M_CODE, 
              M090.M_NAME, 
              M090.CTR_CD,
              isnull(STOCK_TB2.STOCK_ROLL_NM2, 0) AS STOCK_ROLL_NM2, 
              isnull(STOCK_TB2.STOCK_CFM_NM2, 0) AS STOCK_CFM_NM2, 
              isnull(HOLDING_TB.HOLDING_ROLL_NM2, 0) AS HOLDING_ROLL_NM2, 
              isnull(HOLDING_TB.HOLDING_CFM_NM2, 0) AS HOLDING_CFM_NM2 
            FROM 
              M090 
              LEFT JOIN(
                SELECT 
                  STOCK_TB.M_CODE, 
                  STOCK_TB.CTR_CD,
                  SUM(STOCK_TB.IN_ROLL_QTY) AS STOCK_ROLL_NM2, 
                  SUM(STOCK_TB.IN_CFM_QTY) AS STOCK_CFM_NM2 
                FROM 
                  (
                    SELECT 
                      I222.M_CODE, 
                      I222.CTR_CD,
                      SUM(I222.ROLL_QTY) AS IN_ROLL_QTY, 
                      SUM(I222.ROLL_QTY * IN_CFM_QTY) AS IN_CFM_QTY 
                    FROM 
                      I222 
                    WHERE 
                      I222.USE_YN = 'T' 
                      AND I222.FACTORY = 'NM2' 
                      AND I222.CTR_CD='${DATA.CTR_CD}'
                    GROUP BY 
                      I222.M_CODE, I222.CTR_CD
                    UNION ALL 
                    SELECT 
                      RETURN_NVL.M_CODE, 
                      RETURN_NVL.CTR_CD,
                      SUM(RETURN_NVL.ROLL_QTY) AS IN_ROLL_QTY, 
                      SUM(RETURN_NVL.ROLL_QTY * RETURN_QTY) AS IN_CFM_QTY 
                    FROM 
                      RETURN_NVL 
                    WHERE 
                      RETURN_NVL.USE_YN = 'Y' 
                      AND RETURN_NVL.FACTORY = 'NM2' 
                      AND RETURN_NVL.CTR_CD='${DATA.CTR_CD}'
                    GROUP BY 
                      RETURN_NVL.M_CODE, RETURN_NVL.CTR_CD
                  ) AS STOCK_TB 
                GROUP BY 
                  STOCK_TB.M_CODE, STOCK_TB.CTR_CD
              ) AS STOCK_TB2 ON(STOCK_TB2.M_CODE = M090.M_CODE AND STOCK_TB2.CTR_CD = M090.CTR_CD) 
              LEFT JOIN(
                SELECT 
                  HOLDING_TB.M_CODE, 
                  HOLDING_TB.CTR_CD,
                  SUM(HOLDING_TB.HOLDING_ROLL_QTY) AS HOLDING_ROLL_NM2, 
                  SUM(
                    HOLDING_TB.HOLDING_ROLL_QTY * HOLDING_QTY
                  ) AS HOLDING_CFM_NM2 
                FROM 
                  HOLDING_TB 
                WHERE 
                  HOLDING_TB.USE_YN = 'B' 
                  AND HOLDING_TB.FACTORY = 'NM2' 
                  AND HOLDING_TB.CTR_CD='${DATA.CTR_CD}'
                GROUP BY 
                  HOLDING_TB.M_CODE, HOLDING_TB.CTR_CD
              ) AS HOLDING_TB ON(HOLDING_TB.M_CODE = M090.M_CODE AND HOLDING_TB.CTR_CD = M090.CTR_CD)
            WHERE M090.CTR_CD='${DATA.CTR_CD}'
          ) AS TONLIEU ON(M090.M_CODE = TONLIEU.M_CODE AND M090.CTR_CD = TONLIEU.CTR_CD) WHEN MATCHED THEN 
          UPDATE 
          SET 
            STOCK_ROLL_NM2 = TONLIEU.STOCK_ROLL_NM2, 
            STOCK_CFM_NM2 = TONLIEU.STOCK_CFM_NM2, 
            HOLDING_ROLL_NM2 = TONLIEU.HOLDING_ROLL_NM2, 
            HOLDING_CFM_NM2 = TONLIEU.HOLDING_CFM_NM2;
            `
          //console.log(setpdQuery);
          checkkq1 = await queryDB(setpdQuery1);
          checkkq2 = await queryDB(setpdQuery2);
          //console.log(checkkq);
          res.send(checkkq1);
        })();
        break;
      case "loadDefectProcessData":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = ` WHERE ZTB_NG_SX100.CTR_CD='${DATA.CTR_CD}'`
          if (DATA.G_CODE && DATA.G_CODE !== '') condition += ` AND ZTB_NG_SX100.G_CODE='${DATA.G_CODE}' `
          if (DATA.PROCESS_NUMBER && DATA.PROCESS_NUMBER !== -1) condition += ` AND ZTB_NG_SX100.PROCESS_NUMBER=${DATA.PROCESS_NUMBER} `
          if (DATA.G_NAME && DATA.G_NAME !== '') condition += ` AND G_NAME LIKE '%${DATA.G_NAME}%'`
          if (DATA.USE_YN) condition += ` AND ZTB_NG_SX100.USE_YN='${DATA.USE_YN}' `
          if (!DATA.USE_YN) condition += ` AND ZTB_NG_SX100.USE_YN='Y' `
          let setpdQuery = `
          SELECT ZTB_NG_SX100.*, M100.G_NAME, M100.PROD_TYPE, M100.DESCR, M100.PROD_MODEL FROM ZTB_NG_SX100
          LEFT JOIN M100 ON M100.G_CODE = ZTB_NG_SX100.G_CODE AND M100.CTR_CD = ZTB_NG_SX100.CTR_CD
           ${condition} ORDER BY G_CODE, PROCESS_NUMBER, STT
          `;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "resetKhoSX_IQC1":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `UPDATE IN_KHO_SX SET USE_YN='X', REMARK ='TRA_IQC' WHERE PLAN_ID_INPUT='${DATA.PLAN_ID}' AND M_LOT_NO='${DATA.M_LOT_NO}' AND CTR_CD='${DATA.CTR_CD}'`;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          setpdQuery = `UPDATE OUT_KHO_SX SET USE_YN='X', REMARK ='TRA_IQC' WHERE PLAN_ID_OUTPUT='${DATA.PLAN_ID}' AND M_LOT_NO='${DATA.M_LOT_NO}' AND CTR_CD='${DATA.CTR_CD}' `;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "resetKhoSX_IQC2":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `UPDATE IN_KHO_SX SET USE_YN='X', REMARK ='TRA_IQC' WHERE PLAN_ID_SUDUNG='${DATA.PLAN_ID}' AND M_LOT_NO='${DATA.M_LOT_NO}' AND CTR_CD='${DATA.CTR_CD}'`;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          setpdQuery = `UPDATE OUT_KHO_SX SET USE_YN='X', REMARK ='TRA_IQC' WHERE PLAN_ID_OUTPUT='${DATA.PLAN_ID}' AND M_LOT_NO='${DATA.M_LOT_NO}' AND CTR_CD='${DATA.CTR_CD}' `;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
         /*  setpdQuery = `UPDATE P500 SET USE_YN='X',INPUT_QTY=0, REMAIN_QTY = 0, REMARK ='TRA_IQC' WHERE PLAN_ID='${DATA.PLAN_ID}' AND M_LOT_NO='${DATA.M_LOT_NO}' AND CTR_CD='${DATA.CTR_CD}' `;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery); */
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "getMaterialDocData":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = ` WHERE CTR_CD='${DATA.CTR_CD}' AND USE_YN='Y'`
          if (DATA.DOC_TYPE !== 'ALL') condition += ` AND DOC_TYPE='${DATA.DOC_TYPE}' `
          if (DATA.M_NAME !== '') condition += ` AND M_NAME LIKE '%${DATA.M_NAME}%'`
          let setpdQuery = `SELECT * FROM ZTB_DOC_TB ${condition}`;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "checkDocVersion":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `SELECT MAX(VER) AS VER FROM ZTB_DOC_TB WHERE M_ID=${DATA.M_ID} AND DOC_TYPE='${DATA.DOC_TYPE}' AND CTR_CD='${DATA.CTR_CD}' `;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "insertMaterialDocData":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `INSERT INTO ZTB_DOC_TB (CTR_CD,DOC_TYPE,M_ID,M_NAME,VER,FILE_NAME,FILE_UPLOADED,INS_DATE, INS_EMPL) VALUES ('${DATA.CTR_CD}','${DATA.DOC_TYPE}',${DATA.M_ID},'${DATA.M_NAME}',${DATA.VER},N'${DATA.FILE_NAME}', 'Y',GETDATE(),'${EMPL_NO}')`;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "updateMaterialDocData":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `UPDATE ZTB_DOC_TB SET USE_YN='${DATA.USE_YN}', REG_DATE='${DATA.REG_DATE}', EXP_DATE='${DATA.EXP_DATE}', EXP_YN='${DATA.EXP_YN}', UPD_DATE=GETDATE(), UPD_EMPL='${EMPL_NO}' WHERE DOC_ID=${DATA.DOC_ID} AND CTR_CD='${DATA.CTR_CD}'`;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "updatePurApp":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `UPDATE ZTB_DOC_TB SET PUR_APP='${DATA.PUR_APP}', PUR_EMPL='${EMPL_NO}', PUR_APP_DATE=GETDATE() WHERE DOC_ID=${DATA.DOC_ID} AND CTR_CD='${DATA.CTR_CD}'`;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "updateDtcApp":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `UPDATE ZTB_DOC_TB SET DTC_APP='${DATA.DTC_APP}', DTC_EMPL='${EMPL_NO}', DTC_APP_DATE=GETDATE() WHERE DOC_ID=${DATA.DOC_ID} AND CTR_CD='${DATA.CTR_CD}'`;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "updateRndApp":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `UPDATE ZTB_DOC_TB SET RND_APP='${DATA.RND_APP}', RND_EMPL='${EMPL_NO}', RND_APP_DATE=GETDATE() WHERE DOC_ID=${DATA.DOC_ID} AND CTR_CD='${DATA.CTR_CD}'`;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "fixTime":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `UPDATE ZTBATTENDANCETB SET IN_TIME='${DATA.IN_TIME}', OUT_TIME='${DATA.OUT_TIME}' WHERE EMPL_NO='${DATA.EMPL_NO}' AND APPLY_DATE='${DATA.APPLY_DATE}' AND CTR_CD='${DATA.CTR_CD}'`;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      case "getSXCapaData":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
          DECLARE @machine VARCHAR(100);
          DECLARE @worktime int;
          SET @worktime = 900;

          SELECT @machine = STRING_AGG(CONCAT('''', SUBSTRING(EQ_NAME, 0, 3), ''''), ',')
          FROM (
              SELECT DISTINCT SUBSTRING(EQ_NAME, 0, 3) AS EQ_NAME
              FROM ZTB_SX_EQ_STATUS WHERE CTR_CD='${DATA.CTR_CD}'
          ) AS AA;

          --PRINT(@machine);

          DECLARE @query varchar(max), @query2 varchar(max), @query3 varchar(max)
          SELECT @query = '
          DECLARE @worktime int;
			    SET @worktime = 900;
          WITH ZTBDLVR AS 
          (SELECT CUST_CD, G_CODE, PO_NO, SUM(DELIVERY_QTY) AS DELIVERY_QTY FROM ZTBDelivery WHERE CTR_CD=''${DATA.CTR_CD}''  GROUP BY CUST_CD, G_CODE, PO_NO),
          POTB AS
          (
          SELECT ZTBPOTable.G_CODE, SUM((ZTBPOTable.PO_QTY-isnull(ZTBDLVR.DELIVERY_QTY,0))) AS PO_BALANCE FROM ZTBPOTable LEFT JOIN ZTBDLVR ON (ZTBPOTable.G_CODE = ZTBDLVR.G_CODE AND ZTBPOTable.CUST_CD = ZTBDLVR.CUST_CD AND ZTBPOTable.PO_NO = ZTBDLVR.PO_NO) WHERE ZTBPOTable.CTR_CD=''${DATA.CTR_CD}'' GROUP BY ZTBPOTable.G_CODE
          ),
          THANHPHAM AS
          (
                  SELECT  AA.G_CODE, M100.G_NAME, M100.G_NAME_KD, M100.PROD_TYPE, AA.STOCK, AA.BLOCK_QTY, (AA.STOCK + AA.BLOCK_QTY) AS TOTAL_STOCK FROM 
                    (
                    SELECT G_CODE, CTR_CD, SUM(CASE WHEN STATUS=''N'' THEN I660.IN_QTY ELSE 0 END) AS STOCK, SUM(CASE WHEN STATUS=''B'' THEN I660.IN_QTY ELSE 0 END) AS BLOCK_QTY FROM I660 WHERE USE_YN =''Y'' AND I660.CTR_CD=''${DATA.CTR_CD}'' GROUP BY G_CODE, CTR_CD
                    ) AS AA
                    LEFT JOIN M100 ON (M100.G_CODE = AA.G_CODE AND M100.CTR_CD = AA.CTR_CD)         
                    AND M100.CTR_CD=''${DATA.CTR_CD}''
          ),
          FN_BALANCETB AS
          (
          SELECT POTB.G_CODE, CASE WHEN POTB.PO_BALANCE-isnull(THANHPHAM.STOCK,0) >0 THEN POTB.PO_BALANCE-isnull(THANHPHAM.STOCK,0) ELSE 0 END AS FNBL  FROM POTB 
          LEFT JOIN THANHPHAM  ON (POTB.G_CODE = THANHPHAM.G_CODE)
          WHERE  POTB.PO_BALANCE <>0
          )
          ,
          LEADTIMETB AS
          (
          SELECT FN_BALANCETB.FNBL, M100.EQ1, M100.EQ2, M100.EQ3, M100.EQ4,
          CASE WHEN M100.EQ1 IN ('+@machine+') THEN CAST(FN_BALANCETB.FNBL AS bigint)/M100.UPH1 *60*M100.Step1 + M100.Setting1 ELSE 0 END AS LT1,
          CASE WHEN M100.EQ2 IN ('+@machine+') THEN CAST(FN_BALANCETB.FNBL AS bigint)/M100.UPH2 *60*M100.Step2 + M100.Setting2 ELSE 0 END AS LT2,
          CASE WHEN M100.EQ3 IN ('+@machine+') THEN CAST(FN_BALANCETB.FNBL AS bigint)/M100.UPH3 *60*M100.Step3 + M100.Setting3 ELSE 0 END AS LT3,
          CASE WHEN M100.EQ4 IN ('+@machine+') THEN CAST(FN_BALANCETB.FNBL AS bigint)/M100.UPH4 *60*M100.Step4 + M100.Setting4 ELSE 0 END AS LT4
          FROM FN_BALANCETB
          LEFT JOIN M100 ON (M100.G_CODE = FN_BALANCETB.G_CODE)
          WHERE M100.CTR_CD =''${DATA.CTR_CD}'' AND FNBL <>0 AND M100.UPH1<>0  AND  M100.EQ1 IN ('+@machine+') AND  ((M100.EQ2 IN ('+@machine+') AND M100.UPH2 <>0) OR NOT (M100.EQ2 IN ('+@machine+')))
          ),
          LT1TB AS
          (
          SELECT EQ1 AS EQ_NAME, SUM(isnull(LT1,0)) AS LEADTIME FROM LEADTIMETB GROUP BY EQ1
          ),
          LT2TB AS
          (
          SELECT EQ2 AS EQ_NAME, SUM(isnull(LT2,0)) AS LEADTIME FROM LEADTIMETB GROUP BY EQ2
          ),
          LT3TB AS
          (
          SELECT EQ3 AS EQ_NAME, SUM(isnull(LT3,0)) AS LEADTIME FROM LEADTIMETB GROUP BY EQ3
          ),
          LT4TB AS
          (
          SELECT EQ4 AS EQ_NAME, SUM(isnull(LT4,0)) AS LEADTIME FROM LEADTIMETB GROUP BY EQ4
          ),'
          SELECT @query2 = '
          EQ_TB AS (
          SELECT DISTINCT SUBSTRING(EQ_NAME, 0, 3) AS EQ_NAME FROM ZTB_SX_EQ_STATUS WHERE CTR_CD=''${DATA.CTR_CD}''),
          YCSX_BALANCE_TB AS
          (
          SELECT EQ_TB.EQ_NAME, (isnull(LT1TB.LEADTIME,0) + isnull(LT2TB.LEADTIME,0)+ isnull(LT3TB.LEADTIME,0)+ isnull(LT4TB.LEADTIME,0)) AS YCSX_BALANCE
          FROM  EQ_TB
          LEFT JOIN LT1TB ON (LT1TB.EQ_NAME= EQ_TB.EQ_NAME)
          LEFT JOIN LT2TB ON (LT2TB.EQ_NAME= EQ_TB.EQ_NAME)
          LEFT JOIN LT3TB ON (LT3TB.EQ_NAME= EQ_TB.EQ_NAME)
          LEFT JOIN LT4TB ON (LT4TB.EQ_NAME= EQ_TB.EQ_NAME)
          ),
          EQ_SERIES AS
          (
          SELECT DISTINCT SUBSTRING(EQ_NAME,1,2) AS EQ_SERIES FROM ZTB_SX_EQ_STATUS WHERE CTR_CD=''${DATA.CTR_CD}''
          ),
          EQ_OP_TB AS
          (
          SELECT SUBSTRING(EQ_NAME,1,2) AS EQ_SERIES,COUNT(EQ_NAME) AS EQ_QTY, SUM(EQ_OP)*2 AS EQ_OP, AVG(EQ_OP) AS AVG_EQ_OP, COUNT(EQ_NAME) * @worktime AS MAN_FULL_CAPA  FROM ZTB_SX_EQ_STATUS WHERE EQ_ACTIVE=''OK'' AND CTR_CD=''${DATA.CTR_CD}'' GROUP BY SUBSTRING(EQ_NAME,1,2)
          ),
          RETAIN_WF_TB AS
          (
          SELECT SUBSTRING(ZTBWORKPOSITION.WORK_POSITION_NAME,4,2) AS EQ_SERIES, ZTBWORKPOSITION.WORK_POSITION_NAME, ZTBJOB.JOB_NAME, ZTBSUBDEPARTMENT.SUBDEPTNAME, ZTBMAINDEPARMENT.MAINDEPTNAME FROM ZTBEMPLINFO
          LEFT JOIN ZTBWORKPOSITION ON ZTBEMPLINFO.WORK_POSITION_CODE = ZTBWORKPOSITION.WORK_POSITION_CODE AND ZTBEMPLINFO.CTR_CD = ZTBWORKPOSITION.CTR_CD
          LEFT JOIN ZTBJOB ON ZTBEMPLINFO.JOB_CODE = ZTBJOB.JOB_CODE AND ZTBEMPLINFO.CTR_CD = ZTBJOB.CTR_CD
          LEFT JOIN ZTBSUBDEPARTMENT ON ZTBWORKPOSITION.SUBDEPTCODE = ZTBSUBDEPARTMENT.SUBDEPTCODE  AND ZTBWORKPOSITION.CTR_CD = ZTBSUBDEPARTMENT.CTR_CD
          LEFT JOIN ZTBMAINDEPARMENT ON ZTBSUBDEPARTMENT.MAINDEPTCODE = ZTBMAINDEPARMENT.MAINDEPTCODE AND ZTBSUBDEPARTMENT.CTR_CD = ZTBMAINDEPARMENT.CTR_CD
          WHERE ZTBJOB.JOB_NAME=''Worker'' AND ZTBMAINDEPARMENT.MAINDEPTNAME = ''SX'' AND ZTBWORKPOSITION.WORK_POSITION_NAME<>''SX_VP'' AND ZTBEMPLINFO.WORK_STATUS_CODE = 1 AND ZTBEMPLINFO.CTR_CD=''${DATA.CTR_CD}''
          ),
          RETAIN_WF_BY_SERIES AS
          (
            SELECT EQ_SERIES, COUNT(EQ_SERIES) AS RETAIN_WF, COUNT(EQ_SERIES) * @worktime AS RETAIN_WF_CAPA FROM RETAIN_WF_TB
            GROUP BY EQ_SERIES
          ),
          ATT_WF_TB AS
          (
            SELECT SUBSTRING(ZTBWORKPOSITION.WORK_POSITION_NAME,4,2) AS EQ_SERIES, ZTBWORKPOSITION.WORK_POSITION_NAME, ZTBJOB.JOB_NAME, ZTBSUBDEPARTMENT.SUBDEPTNAME, ZTBMAINDEPARMENT.MAINDEPTNAME FROM ZTBATTENDANCETB
            LEFT JOIN ZTBEMPLINFO ON ZTBEMPLINFO.EMPL_NO = ZTBATTENDANCETB.EMPL_NO AND  ZTBEMPLINFO.CTR_CD = ZTBATTENDANCETB.CTR_CD
            LEFT JOIN ZTBWORKPOSITION ON ZTBEMPLINFO.WORK_POSITION_CODE = ZTBWORKPOSITION.WORK_POSITION_CODE AND ZTBEMPLINFO.CTR_CD = ZTBWORKPOSITION.CTR_CD
          LEFT JOIN ZTBJOB ON ZTBEMPLINFO.JOB_CODE = ZTBJOB.JOB_CODE AND ZTBEMPLINFO.CTR_CD = ZTBJOB.CTR_CD
          LEFT JOIN ZTBSUBDEPARTMENT ON ZTBWORKPOSITION.SUBDEPTCODE = ZTBSUBDEPARTMENT.SUBDEPTCODE  AND ZTBWORKPOSITION.CTR_CD = ZTBSUBDEPARTMENT.CTR_CD
          LEFT JOIN ZTBMAINDEPARMENT ON ZTBSUBDEPARTMENT.MAINDEPTCODE = ZTBMAINDEPARMENT.MAINDEPTCODE AND ZTBSUBDEPARTMENT.CTR_CD = ZTBMAINDEPARMENT.CTR_CD
          WHERE ZTBATTENDANCETB.ON_OFF=1 AND ZTBJOB.JOB_NAME=''Worker'' AND ZTBMAINDEPARMENT.MAINDEPTNAME = ''SX'' AND ZTBWORKPOSITION.WORK_POSITION_NAME<>''SX_VP'' AND ZTBEMPLINFO.WORK_STATUS_CODE = 1 AND ZTBEMPLINFO.CTR_CD=''${DATA.CTR_CD}'' AND APPLY_DATE = CAST(GETDATE() as date)
            
          ),
          ATT_WF_BY_SERIES AS
          (
          SELECT EQ_SERIES, COUNT(EQ_SERIES) AS ATT_WF, COUNT(EQ_SERIES) * @worktime AS ATT_WF_CAPA FROM ATT_WF_TB GROUP BY EQ_SERIES
          ),
          CAPA_TB AS
          (
          SELECT EQ_SERIES.EQ_SERIES,EQ_OP_TB.EQ_QTY, EQ_OP_TB.EQ_OP, EQ_OP_TB.AVG_EQ_OP, EQ_OP_TB.MAN_FULL_CAPA, isnull(RETAIN_WF_BY_SERIES.RETAIN_WF,0) AS RETAIN_WF, 
          isnull(RETAIN_WF_BY_SERIES.RETAIN_WF,0)*1.0/2/AVG_EQ_OP * @worktime AS RETAIN_WF_CAPA, 
          isnull(ATT_WF_BY_SERIES.ATT_WF,0) AS ATT_WF, 
          isnull(ATT_WF_BY_SERIES.ATT_WF,0)*1.0/2/AVG_EQ_OP * @worktime AS ATT_WF_CAPA, 

          isnull(RETAIN_WF_BY_SERIES.RETAIN_WF,0)*1.0 / EQ_OP_TB.AVG_EQ_OP/2 AS RETAIN_WF_TO_EQ, 
          isnull(RETAIN_WF_BY_SERIES.RETAIN_WF,0) *1.0 / EQ_OP_TB.AVG_EQ_OP/2 * @worktime AS RETAIN_WF_TO_EQ_CAPA, 

          isnull(ATT_WF_BY_SERIES.ATT_WF,0)*1.0 / EQ_OP_TB.AVG_EQ_OP/2 AS ATT_WF_TO_EQ, 
          isnull(ATT_WF_BY_SERIES.ATT_WF,0)*1.0 / EQ_OP_TB.AVG_EQ_OP/2 * @worktime AS ATT_WF_TO_EQ_CAPA,'

          SELECT @query3='
           CASE WHEN isnull(RETAIN_WF_BY_SERIES.RETAIN_WF,0) *1.0 / EQ_OP_TB.AVG_EQ_OP/2 * @worktime > EQ_OP_TB.MAN_FULL_CAPA THEN EQ_OP_TB.MAN_FULL_CAPA ELSE isnull(RETAIN_WF_BY_SERIES.RETAIN_WF,0) *1.0 / EQ_OP_TB.AVG_EQ_OP/2 * @worktime END AS RETAIN_WF_MIN_CAPA,
           CASE WHEN isnull(ATT_WF_BY_SERIES.ATT_WF,0)*1.0 / EQ_OP_TB.AVG_EQ_OP/2 * @worktime > EQ_OP_TB.MAN_FULL_CAPA THEN EQ_OP_TB.MAN_FULL_CAPA ELSE isnull(ATT_WF_BY_SERIES.ATT_WF,0)*1.0 / EQ_OP_TB.AVG_EQ_OP/2 * @worktime END AS ATT_WF_MIN_CAPA
           FROM EQ_SERIES
           LEFT JOIN EQ_OP_TB ON EQ_OP_TB.EQ_SERIES = EQ_SERIES.EQ_SERIES
           LEFT JOIN RETAIN_WF_BY_SERIES ON RETAIN_WF_BY_SERIES.EQ_SERIES = EQ_SERIES.EQ_SERIES
           LEFT JOIN ATT_WF_BY_SERIES ON ATT_WF_BY_SERIES.EQ_SERIES = EQ_SERIES.EQ_SERIES
           )
           SELECT CAPA_TB.*, YCSX_BALANCE_TB.YCSX_BALANCE, CASE WHEN RETAIN_WF_MIN_CAPA = 0 THEN 1000 ELSE YCSX_BALANCE/RETAIN_WF_MIN_CAPA END AS RETAIN_WF_LEADTIME_DAYS, CASE WHEN ATT_WF_MIN_CAPA = 0 THEN 1000 ELSE YCSX_BALANCE/ATT_WF_MIN_CAPA END AS ATT_WF_LEADTIME_DAYS  FROM CAPA_TB
           LEFT JOIN YCSX_BALANCE_TB ON YCSX_BALANCE_TB.EQ_NAME = CAPA_TB.EQ_SERIES
           ORDER BY CAPA_TB.EQ_SERIES DESC
           '
           print( @query + @query2 + @query3)
		       execute(@query + @query2 + @query3)
          `;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
        case "loadProdProcessData":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
          SELECT * FROM ZTB_PROD_PROCESS_TB WHERE G_CODE='${DATA.G_CODE}' AND CTR_CD='${DATA.CTR_CD}' ORDER BY PROCESS_NUMBER ASC
          `;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
        case "addProdProcessData":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
          INSERT INTO ZTB_PROD_PROCESS_TB (CTR_CD, G_CODE, PROCESS_NUMBER, EQ_SERIES, INS_DATE, INS_EMPL, UPD_DATE, UPD_EMPL) VALUES ('${DATA.CTR_CD}', '${DATA.G_CODE}', ${DATA.PROCESS_NUMBER}, '${DATA.EQ_SERIES}', GETDATE(), '${EMPL_NO}', GETDATE(), '${EMPL_NO}')
          `;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
        case "addProdProcessDataQLSX":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
          INSERT INTO ZTB_PROD_PROCESS_TB (CTR_CD, G_CODE, PROCESS_NUMBER, EQ_SERIES,SETTING_TIME, UPH, STEP, LOSS_SX, LOSS_SETTING, FACTORY, INS_DATE, INS_EMPL, UPD_DATE, UPD_EMPL) VALUES ('${DATA.CTR_CD}', '${DATA.G_CODE}', ${DATA.PROCESS_NUMBER}, '${DATA.EQ_SERIES}', ${DATA.SETTING_TIME}, ${DATA.UPH}, ${DATA.STEP},${DATA.LOSS_SX}, ${DATA.LOSS_SETTING}, '${DATA.FACTORY}', GETDATE(), '${EMPL_NO}', GETDATE(), '${EMPL_NO}')
          `;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
        case "updateProdProcessData":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
          UPDATE ZTB_PROD_PROCESS_TB SET EQ_SERIES='${DATA.EQ_SERIES}', UPD_DATE=GETDATE(), UPD_EMPL='${EMPL_NO}' WHERE G_CODE='${DATA.G_CODE}' AND CTR_CD='${DATA.CTR_CD}' AND PROCESS_NUMBER=${DATA.PROCESS_NUMBER}
          `;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
        case "updateProdProcessDataQLSX":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
          UPDATE ZTB_PROD_PROCESS_TB SET EQ_SERIES='${DATA.EQ_SERIES}',SETTING_TIME=${DATA.SETTING_TIME}, UPH=${DATA.UPH}, STEP =${DATA.STEP}, LOSS_SX=${DATA.LOSS_SX}, LOSS_SETTING=${DATA.LOSS_SETTING}, UPD_DATE=GETDATE(), UPD_EMPL='${EMPL_NO}' WHERE G_CODE='${DATA.G_CODE}' AND CTR_CD='${DATA.CTR_CD}' AND PROCESS_NUMBER=${DATA.PROCESS_NUMBER}
          `;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
        case "deleteProdProcessData":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
          DELETE FROM ZTB_PROD_PROCESS_TB WHERE G_CODE='${DATA.G_CODE}' AND CTR_CD='${DATA.CTR_CD}'
          `;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
        case "deleteProcessNotInCurrentListFromDataBase":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
          DELETE FROM ZTB_PROD_PROCESS_TB WHERE G_CODE='${DATA.G_CODE}' AND PROCESS_NUMBER NOT IN (${DATA.PROCESS_NUMBER_LIST}) AND CTR_CD='${DATA.CTR_CD}'
          `;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
        case "checkProcessExist":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
          SELECT COUNT(*) AS COUNT_QTY FROM ZTB_PROD_PROCESS_TB WHERE G_CODE='${DATA.G_CODE}' AND PROCESS_NUMBER='${DATA.PROCESS_NUMBER}' AND CTR_CD='${DATA.CTR_CD}'
          `;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
        case "autoUpdateDocUSEYN_EXP":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
          MERGE INTO ZTB_DOC_TB
          USING
          (
          SELECT * FROM ZTB_DOC_TB WHERE EXP_DATE <= GETDATE() AND EXP_YN='Y' AND CTR_CD='${DATA.CTR_CD}'
          ) AS SRC_TB
          ON (SRC_TB.CTR_CD = ZTB_DOC_TB.CTR_CD AND SRC_TB.DOC_ID = ZTB_DOC_TB.DOC_ID)
          WHEN MATCHED THEN
          UPDATE 
          SET USE_YN='N';
          `;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
        case "isM_LOT_NO_in_IN_KHO_SX":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
          SELECT * FROM IN_KHO_SX WHERE M_LOT_NO='${DATA.M_LOT_NO}' AND CTR_CD='${DATA.CTR_CD}' AND PLAN_ID_INPUT='${DATA.PLAN_ID}'
          `;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
        case "isM_LOT_NO_in_O302":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
          SELECT * FROM O302 WHERE M_LOT_NO='${DATA.M_LOT_NO}' AND CTR_CD='${DATA.CTR_CD}' AND PLAN_ID='${DATA.PLAN_ID}'
          `;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;        
        case "load_Notification_Data":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = ``;

          if(EMPL_NO==='NHU1903') {
            setpdQuery = `
            SELECT TOP 1000 * FROM ZTB_NOTIFICATION WHERE CTR_CD='${DATA.CTR_CD}' ORDER BY INS_DATE DESC
            `;
          }
          else if (JOB_NAME === 'Leader') {
            setpdQuery = `
            SELECT  TOP 1000 * FROM ZTB_NOTIFICATION WHERE CTR_CD='${DATA.CTR_CD}' AND MAINDEPTNAME LIKE '%${DATA.MAINDEPTNAME}%' ORDER BY INS_DATE DESC
            `;
          }
          else {
            setpdQuery = `SELECT  TOP 1000 * FROM ZTB_NOTIFICATION WHERE CTR_CD='${DATA.CTR_CD}' AND MAINDEPTNAME LIKE '%${DATA.MAINDEPTNAME}%' AND SUBDEPTNAME LIKE '%${DATA.SUBDEPTNAME}%' ORDER BY INS_DATE DESC`;
          }
              
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
        case "insert_Notification_Data":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
            INSERT INTO ZTB_NOTIFICATION (CTR_CD, TITLE, CONTENT, SUBDEPTNAME, MAINDEPTNAME, INS_DATE, INS_EMPL, UPD_DATE, UPD_EMPL, NOTI_TYPE) VALUES ('${DATA.CTR_CD}', N'${DATA.TITLE}', N'${DATA.CONTENT}', N'${DATA.SUBDEPTNAME}', N'${DATA.MAINDEPTNAME}', GETDATE(), '${EMPL_NO}', GETDATE(), '${EMPL_NO}', '${DATA.NOTI_TYPE}')
          `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
        case "check_G_NAME_2Ver_active":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
            SELECT  DISTINCT G_NAME_KD, REV_NO ,USE_YN FROM M100 WHERE G_NAME_KD IN (
SELECT G_NAME_KD FROM M100 WHERE G_CODE='${DATA.G_CODE}') AND USE_YN='Y' AND CTR_CD='${DATA.CTR_CD}'
          `;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
        case "loadBTPAuto":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
            WITH BTPTB AS
            (
            SELECT ZTB_GIAONHAN_M_LOT.FACTORY AS FINAL_FACTORY, ZTB_GIAONHAN_M_LOT.XUONG AS FINAL_XUONG, P501.CTR_CD, P501.INS_DATE, P400.PROD_REQUEST_NO,M100.G_CODE, M100.G_NAME, M100.G_NAME_KD, P500.EQUIPMENT_CD,SUBSTRING(P500.EQUIPMENT_CD,1,2) AS MACHINE,  P501.PLAN_ID, P501.M_LOT_NO, P501.PROCESS_LOT_NO, P501.TEMP_QTY, LOT_STATUS,ZTB_TON_BTP.PLAN_ID_INPUT, ZTB_TON_BTP.REMAIN_QTY,P400.PL_HANG,P501.USE_YN, P501.PROCESS_NUMBER AS PR_NB, FLOOR(ZTB_TON_BTP.REMAIN_QTY*1.0/ZTB_SX_RESULT.PD*ZTB_SX_RESULT.CAVITY*1000) AS BTP_REMAIN_EA, SXRS.EQ_NAME,
            CASE 
            WHEN  P501.PROCESS_NUMBER = 1 THEN M100.EQ2
            WHEN  P501.PROCESS_NUMBER = 2 THEN M100.EQ3
            WHEN  P501.PROCESS_NUMBER = 3 THEN M100.EQ4
            WHEN  P501.PROCESS_NUMBER = 4 THEN 'KT'
            END AS NEXT_EQ
            FROM P501
            LEFT JOIN P500 ON P501.CTR_CD = P500.CTR_CD AND P501.PROCESS_IN_DATE = P500.PROCESS_IN_DATE AND P501.PROCESS_IN_NO = P500.PROCESS_IN_NO AND P501.PROCESS_IN_SEQ = P500.PROCESS_IN_SEQ
            LEFT JOIN P400 ON P400.PROD_REQUEST_NO = P500.PROD_REQUEST_NO AND P400.CTR_CD = P500.CTR_CD
            LEFT JOIN ZTB_SX_RESULT ON ZTB_SX_RESULT.PLAN_ID = P501.PLAN_ID AND ZTB_SX_RESULT.CTR_CD = P501.CTR_CD
            LEFT JOIN M100 ON M100.G_CODE = P400.G_CODE AND  M100.CTR_CD = P400.CTR_CD
            LEFT JOIN ZTB_TON_BTP ON P501.PLAN_ID= ZTB_TON_BTP.PLAN_ID_INPUT AND P501.CTR_CD= ZTB_TON_BTP.CTR_CD AND P501.PROCESS_LOT_NO= ZTB_TON_BTP.PROCESS_LOT_NO 
            LEFT JOIN ZTB_SX_RESULT AS SXRS ON SXRS.SX_RESULT_ID = ZTB_TON_BTP.SX_RESULT_ID AND SXRS.CTR_CD = ZTB_TON_BTP.CTR_CD
			LEFT JOIN ZTB_GIAONHAN_M_LOT ON P501.CTR_CD= ZTB_GIAONHAN_M_LOT.CTR_CD AND P501.PROCESS_LOT_NO= ZTB_GIAONHAN_M_LOT.PROCESS_LOT_NO AND P501.PLAN_ID= ZTB_GIAONHAN_M_LOT.PLAN_ID 
            WHERE P501.INS_DATE > '2024-01-01' 
            AND ((P501.LOT_STATUS = 'SX' AND ZTB_TON_BTP.REMAIN_QTY >0 )  OR P501.LOT_STATUS is null)
            AND P400.PL_HANG = 'TT'  
            AND ZTB_TON_BTP.PLAN_ID_SUDUNG is null 
            AND P501.PLAN_ID is not null 
            AND (P501.REMARK<>'HUY TEM' OR P501.REMARK is null) 
            AND (P501.USE_YN <>'X' OR (ZTB_TON_BTP.USE_YN='Y' AND ZTB_TON_BTP.REMAIN_QTY >0))
            ),
            SECONDTB AS
            (
            SELECT BTPTB.*,
            CASE 
              WHEN BTP_REMAIN_EA > 0 THEN BTP_REMAIN_EA
              ELSE TEMP_QTY
            END
            AS FINAL_BTP,
            CASE 
            WHEN  LOT_STATUS is null THEN PR_NB
            WHEN LOT_STATUS = 'SX' THEN (PR_NB+1)
            END AS FINAL_PR_NB, 
            CASE 
            WHEN  LOT_STATUS is null THEN EQUIPMENT_CD
            WHEN LOT_STATUS = 'SX' THEN NEXT_EQ
            END AS BTP_LOCATION, 
            CASE 
            WHEN  LOT_STATUS is null THEN SUBSTRING(EQUIPMENT_CD,1,2)
            WHEN LOT_STATUS = 'SX' THEN SUBSTRING(NEXT_EQ,1,2)
            END AS FINAL_MACHINE 
            FROM BTPTB
            )
            SELECT SECONDTB.*, 
            CASE WHEN EQ_NAME is not null THEN EQ_NAME ELSE BTP_LOCATION END AS FINAL_LOCATION,
            CASE WHEN FINAL_MACHINE IN ('FR','SR') THEN 'B' ELSE 'A' END AS XUONG
            FROM SECONDTB
            WHERE TEMP_QTY > 0
          `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
        case "loadBTPAuto2":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
            SELECT P501.INS_DATE, P501.FACTORY,P501.XUONG,P501.EQ_NAME,ZTB_QLSXPLAN.G_CODE,M100.G_NAME,M100.PROD_TYPE, (CASE WHEN M100.CODE_33='01' THEN 'EA' WHEN M100.CODE_33= '02' THEN 'ROLL' WHEN M100.CODE_33= '03' THEN 'SHEET' WHEN M100.CODE_33= '04' THEN 'MET' WHEN M100.CODE_33= '06' THEN 'PACK (BAG)' WHEN M100.CODE_33= '99' THEN 'X' END) AS UNIT,ZTB_QLSXPLAN.PROD_REQUEST_NO,P501.PLAN_ID,ZTB_QLSXPLAN.PROCESS_NUMBER,BANG_GOP.M_LOT_NO,BANG_GOP.PROCESS_LOT_NO,REMAIN_QTY AS REMAIN_QTY_M,BANG_GOP.TEMP_QTY_EA,(CASE WHEN TRANS_LOT_NO is not null THEN ZTB_GIAONHAN_M_LOT.FACTORY  ELSE P501.FACTORY  END) AS FINAL_FACTORY, (CASE WHEN TRANS_LOT_NO is not null THEN ZTB_GIAONHAN_M_LOT.XUONG  ELSE P501.XUONG  END) AS FINAL_XUONG,PHAN_LOAI,BANG_GOP.USE_YN,BANG_GOP.PD,BANG_GOP.CAVITY,ZTB_GIAONHAN_M_LOT.TRANS_LOT_NO FROM ( SELECT P501.CTR_CD,       P501.M_LOT_NO,     P501.PROCESS_LOT_NO,     FLOOR(((P501.TEMP_QTY * PD) / CAVITY) / 1000) AS REMAIN_QTY,     P501.TEMP_QTY AS TEMP_QTY_EA,     'SX_NEW' AS PHAN_LOAI,     P501.USE_YN,     ZTB_SX_RESULT.PD,     ZTB_SX_RESULT.CAVITY FROM P501 LEFT JOIN ZTB_SX_RESULT ON (ZTB_SX_RESULT.PLAN_ID = P501.PLAN_ID AND ZTB_SX_RESULT.CTR_CD = P501.CTR_CD) WHERE P501.USE_YN = 'Y' AND P501.LOT_STATUS IS NULL UNION ALL SELECT      ZTB_TON_BTP.CTR_CD,  ZTB_TON_BTP.M_LOT_NO,     ZTB_TON_BTP.PROCESS_LOT_NO,     ZTB_TON_BTP.REMAIN_QTY,     FLOOR(((ZTB_TON_BTP.REMAIN_QTY / PD) * CAVITY) * 1000) AS TEMP_QTY_EA,     'TON_BTP' AS PHAN_LOAI,     ZTB_TON_BTP.USE_YN,     ZTB_SX_RESULT.PD,     ZTB_SX_RESULT.CAVITY FROM ZTB_TON_BTP LEFT JOIN ZTB_SX_RESULT ON (ZTB_SX_RESULT.PLAN_ID = ZTB_TON_BTP.PLAN_ID_INPUT) LEFT JOIN ZTB_SX_EQ_STATUS ON (ZTB_SX_EQ_STATUS.EQ_NAME = ZTB_SX_RESULT.EQ_NAME  AND ZTB_SX_EQ_STATUS.FACTORY = ZTB_SX_RESULT.FACTORY  AND ZTB_SX_EQ_STATUS.CTR_CD = ZTB_SX_RESULT.CTR_CD) WHERE ZTB_TON_BTP.USE_YN = 'Y' ) AS BANG_GOP LEFT JOIN P501 ON(P501.PROCESS_LOT_NO = BANG_GOP.PROCESS_LOT_NO AND P501.CTR_CD = BANG_GOP.CTR_CD ) LEFT JOIN ZTB_QLSXPLAN ON(ZTB_QLSXPLAN.PLAN_ID = P501.PLAN_ID AND ZTB_QLSXPLAN.CTR_CD = P501.CTR_CD ) LEFT JOIN M100 ON(M100.G_CODE = ZTB_QLSXPLAN.G_CODE AND M100.CTR_CD = ZTB_QLSXPLAN.CTR_CD ) LEFT JOIN ZTB_GIAONHAN_M_LOT ON(ZTB_GIAONHAN_M_LOT.PROCESS_LOT_NO = BANG_GOP.PROCESS_LOT_NO AND ZTB_GIAONHAN_M_LOT.CTR_CD = BANG_GOP.CTR_CD )
          `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
        case "loadBTPSummaryAuto":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
           WITH BTPTB AS
          (
          SELECT P501.CTR_CD, P501.INS_DATE, P400.PROD_REQUEST_NO,M100.G_CODE, M100.G_NAME, M100.G_NAME_KD, P500.EQUIPMENT_CD,SUBSTRING(P500.EQUIPMENT_CD,1,2) AS MACHINE,  P501.PLAN_ID, P501.M_LOT_NO, P501.PROCESS_LOT_NO, P501.TEMP_QTY, LOT_STATUS,ZTB_TON_BTP.PLAN_ID_INPUT, ZTB_TON_BTP.REMAIN_QTY,P400.PL_HANG,P501.USE_YN, P501.PROCESS_NUMBER AS PR_NB, FLOOR(ZTB_TON_BTP.REMAIN_QTY*1.0/ZTB_SX_RESULT.PD*ZTB_SX_RESULT.CAVITY*1000) AS BTP_REMAIN_EA, SXRS.EQ_NAME,
          CASE
          WHEN P501.PROCESS_NUMBER = 1 THEN M100.EQ2
          WHEN P501.PROCESS_NUMBER = 2 THEN M100.EQ3
          WHEN P501.PROCESS_NUMBER = 3 THEN M100.EQ4
          WHEN P501.PROCESS_NUMBER = 4 THEN 'KT'
          END AS NEXT_EQ
          FROM P501
          LEFT JOIN P500 ON P501.CTR_CD = P500.CTR_CD AND P501.PROCESS_IN_DATE = P500.PROCESS_IN_DATE AND P501.PROCESS_IN_NO = P500.PROCESS_IN_NO AND P501.PROCESS_IN_SEQ = P500.PROCESS_IN_SEQ
          LEFT JOIN P400 ON P400.PROD_REQUEST_NO = P500.PROD_REQUEST_NO AND P400.CTR_CD = P500.CTR_CD
          LEFT JOIN ZTB_SX_RESULT ON ZTB_SX_RESULT.PLAN_ID = P501.PLAN_ID AND ZTB_SX_RESULT.CTR_CD = P501.CTR_CD
          LEFT JOIN M100 ON M100.G_CODE = P400.G_CODE AND  M100.CTR_CD = P400.CTR_CD
          LEFT JOIN ZTB_TON_BTP ON P501.PLAN_ID= ZTB_TON_BTP.PLAN_ID_INPUT AND P501.CTR_CD= ZTB_TON_BTP.CTR_CD AND P501.PROCESS_LOT_NO= ZTB_TON_BTP.PROCESS_LOT_NO
          LEFT JOIN ZTB_SX_RESULT AS SXRS ON SXRS.SX_RESULT_ID = ZTB_TON_BTP.SX_RESULT_ID AND SXRS.CTR_CD = ZTB_TON_BTP.CTR_CD
           WHERE P501.INS_DATE > '2024-01-01' 
            AND ((P501.LOT_STATUS = 'SX' AND ZTB_TON_BTP.REMAIN_QTY >0 )  OR P501.LOT_STATUS is null)
            AND P400.PL_HANG = 'TT'  
            AND ZTB_TON_BTP.PLAN_ID_SUDUNG is null 
            AND P501.PLAN_ID is not null 
            AND (P501.REMARK<>'HUY TEM' OR P501.REMARK is null) 
            AND (P501.USE_YN <>'X' OR (ZTB_TON_BTP.USE_YN='Y' AND ZTB_TON_BTP.REMAIN_QTY >0))
            AND P501.TEMP_QTY > 0
          ),
          SECONDTB AS
          (
          SELECT BTPTB.*,
          CASE
              WHEN BTP_REMAIN_EA > 0 THEN BTP_REMAIN_EA
              ELSE TEMP_QTY
          END
          AS FINAL_BTP,
          CASE
          WHEN  LOT_STATUS is null THEN PR_NB
          WHEN LOT_STATUS = 'SX' THEN (PR_NB+1)
          END AS FINAL_PR_NB,
          CASE
          WHEN  LOT_STATUS is null THEN EQUIPMENT_CD
          WHEN LOT_STATUS = 'SX' THEN NEXT_EQ
          END AS BTP_LOCATION,
          CASE
          WHEN  LOT_STATUS is null THEN SUBSTRING(EQUIPMENT_CD,1,2)
          WHEN LOT_STATUS = 'SX' THEN SUBSTRING(NEXT_EQ,1,2)
          END AS FINAL_MACHINE
          FROM BTPTB
          ),
          THIRD AS 
          (
          SELECT SECONDTB.*,
          CASE WHEN EQ_NAME is not null THEN EQ_NAME ELSE BTP_LOCATION END AS FINAL_LOCATION,
          CASE WHEN FINAL_MACHINE IN ('FR','SR') THEN 'B' ELSE 'A' END AS XUONG    
          FROM SECONDTB
          WHERE LOT_STATUS is null OR (LOT_STATUS ='SX' AND USE_YN='X')
          )
          SELECT G_CODE, G_NAME, SUM(CASE WHEN XUONG='A' THEN FINAL_BTP ELSE 0 END) AS XA, SUM(CASE WHEN XUONG='B' THEN FINAL_BTP ELSE 0 END) AS XB, SUM(FINAL_BTP) AS TOTAL_BTP FROM THIRD GROUP BY G_CODE, G_NAME         
          `;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
        case "loadBTPSummaryAuto2":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
          WITH TONBTPTB AS
(SELECT P501.FACTORY,P501.XUONG,P501.EQ_NAME,ZTB_QLSXPLAN.G_CODE,M100.G_NAME,M100.PROD_TYPE, (CASE WHEN M100.CODE_33='01' THEN 'EA' WHEN M100.CODE_33= '02' THEN 'ROLL' WHEN M100.CODE_33= '03' THEN 'SHEET' WHEN M100.CODE_33= '04' THEN 'MET' WHEN M100.CODE_33= '06' THEN 'PACK (BAG)' WHEN M100.CODE_33= '99' THEN 'X' END) AS UNIT,ZTB_QLSXPLAN.PROD_REQUEST_NO,P501.PLAN_ID,ZTB_QLSXPLAN.PROCESS_NUMBER,BANG_GOP.M_LOT_NO,BANG_GOP.PROCESS_LOT_NO,REMAIN_QTY AS REMAIN_QTY_M,BANG_GOP.TEMP_QTY_EA,(CASE WHEN TRANS_LOT_NO is not null THEN ZTB_GIAONHAN_M_LOT.FACTORY  ELSE P501.FACTORY  END) AS FINAL_FACTORY, (CASE WHEN TRANS_LOT_NO is not null THEN ZTB_GIAONHAN_M_LOT.XUONG  ELSE P501.XUONG  END) AS FINAL_XUONG,PHAN_LOAI,BANG_GOP.USE_YN,BANG_GOP.PD,BANG_GOP.CAVITY,ZTB_GIAONHAN_M_LOT.TRANS_LOT_NO FROM ( SELECT P501.CTR_CD,       P501.M_LOT_NO,     P501.PROCESS_LOT_NO,     FLOOR(((P501.TEMP_QTY * PD) / CAVITY) / 1000) AS REMAIN_QTY,     P501.TEMP_QTY AS TEMP_QTY_EA,     'SX_NEW' AS PHAN_LOAI,     P501.USE_YN,     ZTB_SX_RESULT.PD,     ZTB_SX_RESULT.CAVITY FROM P501 LEFT JOIN ZTB_SX_RESULT ON (ZTB_SX_RESULT.PLAN_ID = P501.PLAN_ID AND ZTB_SX_RESULT.CTR_CD = P501.CTR_CD) WHERE P501.USE_YN = 'Y' AND P501.LOT_STATUS IS NULL UNION ALL SELECT      ZTB_TON_BTP.CTR_CD,  ZTB_TON_BTP.M_LOT_NO,     ZTB_TON_BTP.PROCESS_LOT_NO,     ZTB_TON_BTP.REMAIN_QTY,     FLOOR(((ZTB_TON_BTP.REMAIN_QTY / PD) * CAVITY) * 1000) AS TEMP_QTY_EA,     'TON_BTP' AS PHAN_LOAI,     ZTB_TON_BTP.USE_YN,     ZTB_SX_RESULT.PD,     ZTB_SX_RESULT.CAVITY FROM ZTB_TON_BTP LEFT JOIN ZTB_SX_RESULT ON (ZTB_SX_RESULT.PLAN_ID = ZTB_TON_BTP.PLAN_ID_INPUT) LEFT JOIN ZTB_SX_EQ_STATUS ON (ZTB_SX_EQ_STATUS.EQ_NAME = ZTB_SX_RESULT.EQ_NAME  AND ZTB_SX_EQ_STATUS.FACTORY = ZTB_SX_RESULT.FACTORY  AND ZTB_SX_EQ_STATUS.CTR_CD = ZTB_SX_RESULT.CTR_CD) WHERE ZTB_TON_BTP.USE_YN = 'Y' ) AS BANG_GOP LEFT JOIN P501 ON(P501.PROCESS_LOT_NO = BANG_GOP.PROCESS_LOT_NO AND P501.CTR_CD = BANG_GOP.CTR_CD ) LEFT JOIN ZTB_QLSXPLAN ON(ZTB_QLSXPLAN.PLAN_ID = P501.PLAN_ID AND ZTB_QLSXPLAN.CTR_CD = P501.CTR_CD ) LEFT JOIN M100 ON(M100.G_CODE = ZTB_QLSXPLAN.G_CODE AND M100.CTR_CD = ZTB_QLSXPLAN.CTR_CD ) LEFT JOIN ZTB_GIAONHAN_M_LOT ON(ZTB_GIAONHAN_M_LOT.PROCESS_LOT_NO = BANG_GOP.PROCESS_LOT_NO AND ZTB_GIAONHAN_M_LOT.CTR_CD = BANG_GOP.CTR_CD )
) 
SELECT  G_CODE, G_NAME, SUM(CASE WHEN FINAL_XUONG='A' THEN TONBTPTB.TEMP_QTY_EA ELSE 0 END) AS XA, SUM(CASE WHEN FINAL_XUONG='B' THEN TONBTPTB.TEMP_QTY_EA ELSE 0 END) AS XB,SUM(TONBTPTB.TEMP_QTY_EA) AS TOTAL_BTP  FROM TONBTPTB GROUP BY G_CODE, G_NAME     
          `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
        case "setMaterial_YN":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
          UPDATE P400 SET MATERIAL_YN='${DATA.MATERIAL_YN}' WHERE PROD_REQUEST_NO='${DATA.PROD_REQUEST_NO}'
          `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
        case "setca":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
          UPDATE ZTBEMPLINFO SET CALV=${DATA.CALV} WHERE EMPL_NO='${DATA.EMPL_NO}'
          `;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
        case "setcadiemdanh":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
          UPDATE ZTBATTENDANCETB SET CURRENT_CA=${DATA.CALV} WHERE EMPL_NO='${DATA.EMPL_NO}' AND APPLY_DATE='${DATA.APPLY_DATE}' AND CTR_CD='${DATA.CTR_CD}'          
          `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
        case "updateBTP_M100":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
          WITH BTPTB AS
          (
          SELECT P501.CTR_CD, P501.INS_DATE, P400.PROD_REQUEST_NO,M100.G_CODE, M100.G_NAME, M100.G_NAME_KD, P500.EQUIPMENT_CD,SUBSTRING(P500.EQUIPMENT_CD,1,2) AS MACHINE,  P501.PLAN_ID, P501.M_LOT_NO, P501.PROCESS_LOT_NO, P501.TEMP_QTY, LOT_STATUS,ZTB_TON_BTP.PLAN_ID_INPUT, ZTB_TON_BTP.REMAIN_QTY,P400.PL_HANG,P501.USE_YN, P500.PR_NB, FLOOR(ZTB_TON_BTP.REMAIN_QTY*1.0/ZTB_SX_RESULT.PD*ZTB_SX_RESULT.CAVITY*1000) AS BTP_REMAIN_EA, SXRS.EQ_NAME,
          CASE
          WHEN PR_NB = 1 THEN M100.EQ2
          WHEN PR_NB = 2 THEN M100.EQ3
          WHEN PR_NB = 3 THEN M100.EQ4
          WHEN PR_NB = 4 THEN 'KT'
          END AS NEXT_EQ
          FROM P501
          LEFT JOIN P500 ON P501.CTR_CD = P500.CTR_CD AND P501.PROCESS_IN_DATE = P500.PROCESS_IN_DATE AND P501.PROCESS_IN_NO = P500.PROCESS_IN_NO AND P501.PROCESS_IN_SEQ = P500.PROCESS_IN_SEQ
          LEFT JOIN P400 ON P400.PROD_REQUEST_NO = P500.PROD_REQUEST_NO AND P400.CTR_CD = P500.CTR_CD
          LEFT JOIN ZTB_SX_RESULT ON ZTB_SX_RESULT.PLAN_ID = P501.PLAN_ID AND ZTB_SX_RESULT.CTR_CD = P501.CTR_CD
          LEFT JOIN M100 ON M100.G_CODE = P400.G_CODE AND  M100.CTR_CD = P400.CTR_CD
          LEFT JOIN ZTB_TON_BTP ON P501.PLAN_ID= ZTB_TON_BTP.PLAN_ID_INPUT AND P501.CTR_CD= ZTB_TON_BTP.CTR_CD AND P501.PROCESS_LOT_NO= ZTB_TON_BTP.PROCESS_LOT_NO
          LEFT JOIN ZTB_SX_RESULT AS SXRS ON SXRS.SX_RESULT_ID = ZTB_TON_BTP.SX_RESULT_ID AND SXRS.CTR_CD = ZTB_TON_BTP.CTR_CD
           WHERE P501.INS_DATE > '2024-01-01' 
            AND ((P501.LOT_STATUS = 'SX' AND ZTB_TON_BTP.REMAIN_QTY >0 )  OR P501.LOT_STATUS is null)
            AND P400.PL_HANG = 'TT'  
            AND ZTB_TON_BTP.PLAN_ID_SUDUNG is null 
            AND P501.PLAN_ID is not null 
            AND (P501.REMARK<>'HUY TEM' OR P501.REMARK is null) 
            AND (P501.USE_YN <>'X' OR (ZTB_TON_BTP.USE_YN='Y' AND ZTB_TON_BTP.REMAIN_QTY >0))
			AND P501.TEMP_QTY > 0
          ),
          SECONDTB AS
          (
          SELECT BTPTB.*,
          CASE
              WHEN BTP_REMAIN_EA > 0 THEN BTP_REMAIN_EA
              ELSE TEMP_QTY
          END
          AS FINAL_BTP,
          CASE
          WHEN  LOT_STATUS is null THEN PR_NB
          WHEN LOT_STATUS = 'SX' THEN (PR_NB+1)
          END AS FINAL_PR_NB,
          CASE
          WHEN  LOT_STATUS is null THEN EQUIPMENT_CD
          WHEN LOT_STATUS = 'SX' THEN NEXT_EQ
          END AS BTP_LOCATION,
          CASE
          WHEN  LOT_STATUS is null THEN SUBSTRING(EQUIPMENT_CD,1,2)
          WHEN LOT_STATUS = 'SX' THEN SUBSTRING(NEXT_EQ,1,2)
          END AS FINAL_MACHINE
          FROM BTPTB
          ),
          THIRD AS 
          (
          SELECT SECONDTB.*,
          CASE WHEN EQ_NAME is not null THEN EQ_NAME ELSE BTP_LOCATION END AS FINAL_LOCATION,
          CASE WHEN FINAL_MACHINE IN ('FR','SR') THEN 'B' ELSE 'A' END AS XUONG    
          FROM SECONDTB
          WHERE LOT_STATUS is null OR (LOT_STATUS ='SX' AND USE_YN='X')
          )
		  MERGE INTO M100 
		  USING 
		  (
          SELECT M100.CTR_CD, M100.G_CODE, SUM(isnull(FINAL_BTP,0)) AS TOTAL_BTP FROM 
		  M100 LEFT JOIN THIRD ON M100.CTR_CD= THIRD.CTR_CD AND M100.G_CODE= THIRD.G_CODE
		  GROUP BY M100.CTR_CD,M100.G_CODE
		  ) AS SRC_TB
		  ON (SRC_TB.CTR_CD = M100.CTR_CD AND SRC_TB.G_CODE = M100.G_CODE)
		  WHEN MATCHED THEN
		  UPDATE 
		  SET BTP_QTY = SRC_TB.TOTAL_BTP;

          `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
        case "updateBTP_M1002":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
            WITH BTPTB AS
          (
          SELECT P501.CTR_CD, P501.FACTORY,P501.XUONG,P501.EQ_NAME,ZTB_QLSXPLAN.G_CODE,M100.G_NAME,M100.PROD_TYPE, (CASE WHEN M100.CODE_33='01' THEN 'EA' WHEN M100.CODE_33= '02' THEN 'ROLL' WHEN M100.CODE_33= '03' THEN 'SHEET' WHEN M100.CODE_33= '04' THEN 'MET' WHEN M100.CODE_33= '06' THEN 'PACK (BAG)' WHEN M100.CODE_33= '99' THEN 'X' END) AS UNIT,ZTB_QLSXPLAN.PROD_REQUEST_NO,P501.PLAN_ID,ZTB_QLSXPLAN.PROCESS_NUMBER,BANG_GOP.M_LOT_NO,BANG_GOP.PROCESS_LOT_NO,REMAIN_QTY AS REMAIN_QTY_M,BANG_GOP.TEMP_QTY_EA,(CASE WHEN TRANS_LOT_NO is not null THEN ZTB_GIAONHAN_M_LOT.FACTORY  ELSE P501.FACTORY  END) AS FINAL_FACTORY, (CASE WHEN TRANS_LOT_NO is not null THEN ZTB_GIAONHAN_M_LOT.XUONG  ELSE P501.XUONG  END) AS FINAL_XUONG,PHAN_LOAI,BANG_GOP.USE_YN,BANG_GOP.PD,BANG_GOP.CAVITY,ZTB_GIAONHAN_M_LOT.TRANS_LOT_NO FROM ( SELECT P501.CTR_CD,       P501.M_LOT_NO,     P501.PROCESS_LOT_NO,     FLOOR(((P501.TEMP_QTY * PD) / CAVITY) / 1000) AS REMAIN_QTY,     P501.TEMP_QTY AS TEMP_QTY_EA,     'SX_NEW' AS PHAN_LOAI,     P501.USE_YN,     ZTB_SX_RESULT.PD,     ZTB_SX_RESULT.CAVITY FROM P501 LEFT JOIN ZTB_SX_RESULT ON (ZTB_SX_RESULT.PLAN_ID = P501.PLAN_ID AND ZTB_SX_RESULT.CTR_CD = P501.CTR_CD) WHERE P501.USE_YN = 'Y' AND P501.LOT_STATUS IS NULL UNION ALL SELECT      ZTB_TON_BTP.CTR_CD,  ZTB_TON_BTP.M_LOT_NO,     ZTB_TON_BTP.PROCESS_LOT_NO,     ZTB_TON_BTP.REMAIN_QTY,     FLOOR(((ZTB_TON_BTP.REMAIN_QTY / PD) * CAVITY) * 1000) AS TEMP_QTY_EA,     'TON_BTP' AS PHAN_LOAI,     ZTB_TON_BTP.USE_YN,     ZTB_SX_RESULT.PD,     ZTB_SX_RESULT.CAVITY FROM ZTB_TON_BTP LEFT JOIN ZTB_SX_RESULT ON (ZTB_SX_RESULT.PLAN_ID = ZTB_TON_BTP.PLAN_ID_INPUT) LEFT JOIN ZTB_SX_EQ_STATUS ON (ZTB_SX_EQ_STATUS.EQ_NAME = ZTB_SX_RESULT.EQ_NAME  AND ZTB_SX_EQ_STATUS.FACTORY = ZTB_SX_RESULT.FACTORY  AND ZTB_SX_EQ_STATUS.CTR_CD = ZTB_SX_RESULT.CTR_CD) WHERE ZTB_TON_BTP.USE_YN = 'Y' ) AS BANG_GOP LEFT JOIN P501 ON(P501.PROCESS_LOT_NO = BANG_GOP.PROCESS_LOT_NO AND P501.CTR_CD = BANG_GOP.CTR_CD ) LEFT JOIN ZTB_QLSXPLAN ON(ZTB_QLSXPLAN.PLAN_ID = P501.PLAN_ID AND ZTB_QLSXPLAN.CTR_CD = P501.CTR_CD ) LEFT JOIN M100 ON(M100.G_CODE = ZTB_QLSXPLAN.G_CODE AND M100.CTR_CD = ZTB_QLSXPLAN.CTR_CD ) LEFT JOIN ZTB_GIAONHAN_M_LOT ON(ZTB_GIAONHAN_M_LOT.PROCESS_LOT_NO = BANG_GOP.PROCESS_LOT_NO AND ZTB_GIAONHAN_M_LOT.CTR_CD = BANG_GOP.CTR_CD )
          ),
		  THIRD AS
		  (

SELECT CTR_CD,G_CODE, SUM(TEMP_QTY_EA) AS FINAL_BTP FROM  BTPTB GROUP BY  CTR_CD,G_CODE
)

		  MERGE INTO M100 
		  USING 
		  (
          SELECT M100.CTR_CD, M100.G_CODE, SUM(isnull(FINAL_BTP,0)) AS TOTAL_BTP FROM 
		  M100 LEFT JOIN THIRD ON M100.G_CODE= THIRD.G_CODE AND M100.CTR_CD= THIRD.CTR_CD
		  GROUP BY M100.CTR_CD,M100.G_CODE
		  ) AS SRC_TB
		  ON (SRC_TB.G_CODE = M100.G_CODE AND SRC_TB.CTR_CD = M100.CTR_CD)
		  WHEN MATCHED THEN
		  UPDATE 
		  SET BTP_QTY = SRC_TB.TOTAL_BTP;


          `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
        case "updateTONKIEM_M100":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `
          WITH NEW_CHO_KIEM AS 
          (
          SELECT CTR_CD, G_CODE, SUM(INPUT_QTY_EA) AS INSPECT_BALANCE_QTY FROM ZTBINSPECTINPUTTB WHERE INSPECT_YN='Y' AND P400_YN='Y' GROUP BY CTR_CD, G_CODE
          ),
          TKTB AS
          (
          SELECT M100.CTR_CD, M100.G_CODE, M100.G_NAME, M100.G_NAME_KD, isnull(NEW_CHO_KIEM.INSPECT_BALANCE_QTY,0) AS INSPECT_BALANCE_QTY FROM M100 
          LEFT JOIN NEW_CHO_KIEM ON (NEW_CHO_KIEM.CTR_CD = M100.CTR_CD AND NEW_CHO_KIEM.G_CODE = M100.G_CODE) WHERE  M100.CTR_CD='002'
          ) 
          MERGE INTO M100 
          USING(SELECT * FROM TKTB) AS SRC_TB
          ON (SRC_TB.CTR_CD=  M100.CTR_CD AND SRC_TB.G_CODE=  M100.G_CODE)
          WHEN MATCHED THEN
          UPDATE 
          SET TONKIEM_QTY = SRC_TB.INSPECT_BALANCE_QTY;
          `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
        case "insert_information":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `          
          INSERT INTO ZTB_POST_TB (CTR_CD,  DEPT_CODE, FILE_NAME, TITLE, CONTENT, INS_DATE, INS_EMPL, UPD_DATE, UPD_EMPL) 
          VALUES ('002', '${DATA.DEPT_CODE}', N'${DATA.FILE_NAME}',N'${DATA.TITLE}', N'${DATA.CONTENT}',GETDATE(), '${EMPL_NO}', GETDATE(), '${EMPL_NO}')
          `;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery); 
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
        case "getDepartmentList":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `          
          SELECT * FROM ZTB_DEPARTMENT_TB ORDER BY DEPT_CODE ASC
          `;
          //console.log(insertQuery);
          checkkq = await queryDB(setpdQuery);  
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
        case "getlastestPostId":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `          
          SELECT isnull(MAX(POST_ID),1) AS POST_ID FROM ZTB_POST_TB
          `;
          //console.log(insertQuery);
          checkkq = await queryDB(setpdQuery);  
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
        case "loadPost":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let condition = `WHERE 1=1 `;
          if(DATA.DEPT_CODE !==0)
            condition += ` AND ZTB_POST_TB.DEPT_CODE=${DATA.DEPT_CODE}`
          if(DATA.DEPT_CODE ===0)
            condition += ` AND ZTB_POST_TB.IS_PINNED='Y'`
          let setpdQuery = `          
          SELECT ZTB_POST_TB.*, ZTB_DEPARTMENT_TB.SUBDEPT, ZTB_DEPARTMENT_TB.MAINDEPT,ZTB_DEPARTMENT_TB.PIN_QTY FROM ZTB_POST_TB LEFT JOIN ZTB_DEPARTMENT_TB ON ZTB_POST_TB.DEPT_CODE = ZTB_DEPARTMENT_TB.DEPT_CODE 
          ${condition} ORDER BY POST_ID DESC
          `;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);  
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
        case "loadPostAll":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";          
         
          let setpdQuery = `          
          SELECT ZTB_POST_TB.*, ZTB_DEPARTMENT_TB.SUBDEPT, ZTB_DEPARTMENT_TB.MAINDEPT,ZTB_DEPARTMENT_TB.PIN_QTY FROM ZTB_POST_TB LEFT JOIN ZTB_DEPARTMENT_TB ON ZTB_POST_TB.DEPT_CODE = ZTB_DEPARTMENT_TB.DEPT_CODE 
          ORDER BY POST_ID DESC
          `;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);  
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
        case "loadKHSXDAIHAN":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `          
          DECLARE @machine VARCHAR(100);
          DECLARE @query varchar(max);
          SELECT @machine = STRING_AGG(CONCAT('''', SUBSTRING(EQ_NAME, 0, 3), ''''), ',')
          FROM (
              SELECT DISTINCT SUBSTRING(EQ_NAME, 0, 3) AS EQ_NAME
              FROM ZTB_SX_EQ_STATUS WHERE CTR_CD='${DATA.CTR_CD}'
          ) AS AA;

          SELECT @query = '
          WITH KQSX AS
          ( SELECT ZTB_QLSXPLAN.PROD_REQUEST_NO, ZTB_QLSXPLAN.PROCESS_NUMBER, SUM(isnull(SX_RESULT,0)) AS KETQUASX, ZTB_QLSXPLAN.CTR_CD FROM ZTB_SX_RESULT LEFT JOIN ZTB_QLSXPLAN ON (ZTB_QLSXPLAN.PLAN_ID = ZTB_SX_RESULT.PLAN_ID AND ZTB_QLSXPLAN.CTR_CD = ZTB_SX_RESULT.CTR_CD) WHERE ZTB_QLSXPLAN.STEP=0 AND ZTB_QLSXPLAN.CTR_CD=''${DATA.CTR_CD}'' GROUP BY ZTB_QLSXPLAN.PROD_REQUEST_NO, ZTB_QLSXPLAN.PROCESS_NUMBER, ZTB_QLSXPLAN.CTR_CD
          ),
          EQ_Unpivot AS (
              SELECT 
              CTR_CD,
                  G_CODE, 
                  RIGHT(Attribute, 1) AS PROCESS_NUMBER,
                  Value AS EQ_NAME
              FROM M100
              UNPIVOT
              (
                  Value FOR Attribute IN (EQ1, EQ2, EQ3, EQ4)
              ) AS Unpvt
          ),
          PROCESS_TB AS
          (
          SELECT 
            E.CTR_CD,
              E.G_CODE,   
              E.PROCESS_NUMBER,
            E.EQ_NAME
            FROM EQ_Unpivot AS E
            WHERE E.EQ_NAME IN ('+@machine+') AND E.EQ_NAME is not null
          ),
          TON_YCSX_TB AS
          (
          SELECT P400.CTR_CD, M100.G_CODE,M100.G_NAME, PROCESS_TB.PROCESS_NUMBER, PROCESS_TB.EQ_NAME, P400.PROD_REQUEST_QTY,isnull(KQSX.KETQUASX,0) AS KETQUASX, CASE WHEN (P400.PROD_REQUEST_QTY - isnull(KQSX.KETQUASX,0)) > 0 THEn (P400.PROD_REQUEST_QTY - isnull(KQSX.KETQUASX,0)) ELSE 0 END AS TON_YCSX  FROM P400 
          LEFT JOIN KQSX ON (KQSX.CTR_CD = P400.CTR_CD AND KQSX.PROD_REQUEST_NO = P400.PROD_REQUEST_NO)
          LEFT JOIN M100 ON (M100.CTR_CD = P400.CTR_CD AND M100.G_CODE = P400.G_CODE)
          LEFT JOIN PROCESS_TB ON (M100.CTR_CD = PROCESS_TB.CTR_CD AND M100.G_CODE = PROCESS_TB.G_CODE)
          WHERE P400.PL_HANG=''TT'' AND P400.PROD_REQUEST_DATE > ''2024-12-01'' AND P400.CTR_CD=''${DATA.CTR_CD}'' AND P400.USE_YN=''Y'' AND P400.YCSX_PENDING = 1 AND P400.CODE_55 <> ''04''
          ),
          TON2_TB AS
          (
          SELECT CTR_CD,G_CODE,G_NAME, PROCESS_NUMBER, EQ_NAME, SUM(PROD_REQUEST_QTY) AS PROD_REQUEST_QTY, SUM(KETQUASX) AS KETQUASX, SUM(TON_YCSX) AS TON_YCSX FROM TON_YCSX_TB  GROUP BY CTR_CD,G_CODE,G_NAME, PROCESS_NUMBER, EQ_NAME
          ),
          PLANTB AS 
          (	
            SELECT * FROM ZTB_PROD_PLAN_TB WHERE PLAN_DATE = ''${DATA.PLAN_DATE}''
          )
          SELECT TON2_TB.*,PLANTB.PLAN_DATE, 
          CASE
           WHEN TON2_TB.PROCESS_NUMBER = 1 THEN UPH1
           WHEN TON2_TB.PROCESS_NUMBER = 2 THEN UPH2
           WHEN TON2_TB.PROCESS_NUMBER = 3 THEN UPH3
           WHEN TON2_TB.PROCESS_NUMBER = 4 THEN UPH4
           ELSE 1
          END AS UPH,
          isnull(D1,0) AS D1,
          isnull(D2,0) AS D2,
          isnull(D3,0) AS D3,
          isnull(D4,0) AS D4,
          isnull(D5,0) AS D5,
          isnull(D6,0) AS D6,
          isnull(D7,0) AS D7,
          isnull(D8,0) AS D8,
          isnull(D9,0) AS D9,
          isnull(D10,0) AS D10,
          isnull(D11,0) AS D11,
          isnull(D12,0) AS D12,
          isnull(D13,0) AS D13,
          isnull(D14,0) AS D14,
          isnull(D15,0) AS D15,
          (TON2_TB.TON_YCSX - (isnull(D1,0)+isnull(D2,0)+isnull(D3,0)+isnull(D4,0)+isnull(D5,0)+isnull(D6,0)+isnull(D7,0)+isnull(D8,0)+isnull(D9,0)+isnull(D10,0)+isnull(D11,0)+isnull(D12,0)+isnull(D13,0)+isnull(D14,0)+isnull(D15,0))) AS D16    FROM TON2_TB 
          LEFT JOIN PLANTB ON (TON2_TB.CTR_CD = PLANTB.CTR_CD AND TON2_TB.EQ_NAME = PLANTB.EQ_SERIES AND TON2_TB.G_CODE = PLANTB.G_CODE AND TON2_TB.PROCESS_NUMBER = PLANTB.PROCESS_NUMBER)
          LEFT JOIN M100 ON (TON2_TB.CTR_CD = M100.CTR_CD AND TON2_TB.G_CODE = M100.G_CODE)
          WHERE TON_YCSX >0
          ORDER BY G_CODE ASC, PROCESS_NUMBER ASC
          '
          execute(@query)
          `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);  
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
        case "moveKHSXDAIHAN":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `          
          DECLARE @machine VARCHAR(100);
          DECLARE @query varchar(max);
          SELECT @machine = STRING_AGG(CONCAT('''', SUBSTRING(EQ_NAME, 0, 3), ''''), ',')
          FROM (
              SELECT DISTINCT SUBSTRING(EQ_NAME, 0, 3) AS EQ_NAME
              FROM ZTB_SX_EQ_STATUS WHERE CTR_CD='${DATA.CTR_CD}'
          ) AS AA;

          SELECT @query = '
          WITH KQSX AS
          ( SELECT ZTB_QLSXPLAN.PROD_REQUEST_NO, ZTB_QLSXPLAN.PROCESS_NUMBER, SUM(isnull(SX_RESULT,0)) AS KETQUASX, ZTB_QLSXPLAN.CTR_CD FROM ZTB_SX_RESULT LEFT JOIN ZTB_QLSXPLAN ON (ZTB_QLSXPLAN.PLAN_ID = ZTB_SX_RESULT.PLAN_ID AND ZTB_QLSXPLAN.CTR_CD = ZTB_SX_RESULT.CTR_CD) WHERE ZTB_QLSXPLAN.STEP=0 AND ZTB_QLSXPLAN.CTR_CD=''${DATA.CTR_CD}'' GROUP BY ZTB_QLSXPLAN.PROD_REQUEST_NO, ZTB_QLSXPLAN.PROCESS_NUMBER, ZTB_QLSXPLAN.CTR_CD
          ),
          EQ_Unpivot AS (
              SELECT 
              CTR_CD,
                  G_CODE, 
                  RIGHT(Attribute, 1) AS PROCESS_NUMBER,
                  Value AS EQ_NAME
              FROM M100
              UNPIVOT
              (
                  Value FOR Attribute IN (EQ1, EQ2, EQ3, EQ4)
              ) AS Unpvt
          ),
          PROCESS_TB AS
          (
          SELECT 
            E.CTR_CD,
              E.G_CODE,   
              E.PROCESS_NUMBER,
            E.EQ_NAME
            FROM EQ_Unpivot AS E
            WHERE E.EQ_NAME IN ('+@machine+') AND E.EQ_NAME is not null
          ),
          TON_YCSX_TB AS
          (
          SELECT P400.CTR_CD, M100.G_CODE,M100.G_NAME, PROCESS_TB.PROCESS_NUMBER, PROCESS_TB.EQ_NAME, P400.PROD_REQUEST_QTY,isnull(KQSX.KETQUASX,0) AS KETQUASX, CASE WHEN (P400.PROD_REQUEST_QTY - isnull(KQSX.KETQUASX,0)) > 0 THEn (P400.PROD_REQUEST_QTY - isnull(KQSX.KETQUASX,0)) ELSE 0 END AS TON_YCSX  FROM P400 
          LEFT JOIN KQSX ON (KQSX.CTR_CD = P400.CTR_CD AND KQSX.PROD_REQUEST_NO = P400.PROD_REQUEST_NO)
          LEFT JOIN M100 ON (M100.CTR_CD = P400.CTR_CD AND M100.G_CODE = P400.G_CODE)
          LEFT JOIN PROCESS_TB ON (M100.CTR_CD = PROCESS_TB.CTR_CD AND M100.G_CODE = PROCESS_TB.G_CODE)
          WHERE P400.PL_HANG=''TT'' AND P400.PROD_REQUEST_DATE > ''2024-12-01'' AND P400.CTR_CD=''${DATA.CTR_CD}'' AND P400.USE_YN=''Y'' AND P400.YCSX_PENDING = 1 AND P400.CODE_55 <> ''04''
          ),
          TON2_TB AS
          (
          SELECT CTR_CD,G_CODE,G_NAME, PROCESS_NUMBER, EQ_NAME, SUM(PROD_REQUEST_QTY) AS PROD_REQUEST_QTY, SUM(KETQUASX) AS KETQUASX, SUM(TON_YCSX) AS TON_YCSX FROM TON_YCSX_TB  GROUP BY CTR_CD,G_CODE,G_NAME, PROCESS_NUMBER, EQ_NAME
          ),
         
          TON3_TB AS
          (SELECT * FROM TON2_TB WHERE TON2_TB.TON_YCSX > 0)
          INSERT INTO ZTB_PROD_PLAN_TB
SELECT CTR_CD, EQ_SERIES, G_CODE, PROCESS_NUMBER, ''${DATA.TO_DATE}'' AS PLAN_DATE, D2 AS D1, D3 AS D2, D4 AS D3, D5 AS D4, D6 AS D5, D7 AS D6, D8 AS D7, D9 AS D8, D10 AS D9, D11 AS D10, D12 AS D11, D13 AS D12, D14 AS D13, D15 AS D14, 0 AS D15, GETDATE() AS INS_DATE, ''${EMPL_NO}'' AS INS_EMPL, GETDATE() AS UPD_DATE, ''${EMPL_NO}'' AS UPD_EMPL FROM ZTB_PROD_PLAN_TB WHERE PLAN_DATE =''${DATA.FROM_DATE}'' AND G_CODE  IN (SELECT DISTINCT G_CODE FROM TON3_TB)
          '
          execute(@query)
          `;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);  
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
       case "insertKHSXDAIHAN":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";          
          let setpdQuery = `          
          INSERT INTO ZTB_PROD_PLAN_TB (CTR_CD,EQ_SERIES,G_CODE,PROCESS_NUMBER,PLAN_DATE,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15, INS_EMPL, INS_DATE,UPD_EMPL,UPD_DATE) VALUES ('${DATA.CTR_CD}','${DATA.EQ_NAME}','${DATA.G_CODE}',${DATA.PROCESS_NUMBER},'${DATA.PLAN_DATE}',${DATA.D1},${DATA.D2},${DATA.D3},${DATA.D4},${DATA.D5},${DATA.D6},${DATA.D7},${DATA.D8},${DATA.D9},${DATA.D10},${DATA.D11},${DATA.D12},${DATA.D13},${DATA.D14},${DATA.D15},'${EMPL_NO}',GETDATE(), '${EMPL_NO}',GETDATE())
          `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);  
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
       case "updateKHSXDAIHAN":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `          
          UPDATE ZTB_PROD_PLAN_TB SET
          D1=${DATA.D1},
          D2=${DATA.D2},
          D3=${DATA.D3},
          D4=${DATA.D4},
          D5=${DATA.D5},
          D6=${DATA.D6},
          D7=${DATA.D7},
          D8=${DATA.D8},
          D9=${DATA.D9},
          D10=${DATA.D10},
          D11=${DATA.D11},
          D12=${DATA.D12},
          D13=${DATA.D13},
          D14=${DATA.D14},
          D15=${DATA.D15},
          UPD_EMPL='${EMPL_NO}',
          UPD_DATE=GETDATE()
          WHERE PLAN_DATE='${DATA.PLAN_DATE}' AND G_CODE='${DATA.G_CODE}' AND PROCESS_NUMBER='${DATA.PROCESS_NUMBER}' AND CTR_CD='${DATA.CTR_CD}'
          `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);  
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
       case "moveKHSXDAIHAN_old":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `          
          INSERT INTO ZTB_PROD_PLAN_TB
SELECT CTR_CD, EQ_SERIES, G_CODE, PROCESS_NUMBER, '${DATA.TO_DATE}' AS PLAN_DATE, D2 AS D1, D3 AS D2, D4 AS D3, D5 AS D4, D6 AS D5, D7 AS D6, D8 AS D7, D9 AS D8, D10 AS D9, D11 AS D10, D12 AS D11, D13 AS D12, D14 AS D13, D15 AS D14, 0 AS D15 FROM ZTB_PROD_PLAN_TB WHERE PLAN_DATE ='${DATA.FROM_DATE}'
          `;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);  
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
       case "getProductionPlanCapaData":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";
          let setpdQuery = `          
          DECLARE @worktime int;
          SET @worktime = 900;
          WITH PLTB AS
          (
          SELECT ZTB_PROD_PLAN_TB.*,
          CASE
            WHEN PROCESS_NUMBER = 1 THEN isnull(UPH1,1)
            WHEN PROCESS_NUMBER = 2 THEN isnull(UPH2,1)
            WHEN PROCESS_NUMBER = 3 THEN isnull(UPH3,1)
            WHEN PROCESS_NUMBER = 4 THEN isnull(UPH4,1)
            ELSE 1
          END AS UPH,
          CASE
            WHEN PROCESS_NUMBER = 1 THEN isnull(Setting1,9999)
            WHEN PROCESS_NUMBER = 2 THEN isnull(Setting2,9999)
            WHEN PROCESS_NUMBER = 3 THEN isnull(Setting3,9999)
            WHEN PROCESS_NUMBER = 4 THEN isnull(Setting4,9999)
            ELSE 99999
          END AS Setting,
          CASE
            WHEN PROCESS_NUMBER = 1 THEN isnull(Step1,1)
            WHEN PROCESS_NUMBER = 2 THEN isnull(Step2,1)
            WHEN PROCESS_NUMBER = 3 THEN isnull(Step3,1)
            WHEN PROCESS_NUMBER = 4 THEN isnull(Step4,1)
            ELSE 1
          END AS Step
          FROM ZTB_PROD_PLAN_TB
          LEFT JOIN M100 ON M100.G_CODE = ZTB_PROD_PLAN_TB.G_CODE AND M100.CTR_CD = ZTB_PROD_PLAN_TB.CTR_CD
          WHERE PLAN_DATE='${DATA.PLAN_DATE}'
          ),
          LEATIMETB1 AS
          (
            SELECT PLTB.*, 
            CASE WHEN D1 <> 0 THEN (D1*1.0/UPH + Setting*Step*1.0/60) ELSE 0 END AS LT01,
            CASE WHEN D2 <> 0 THEN (D2*1.0/UPH + Setting*Step*1.0/60) ELSE 0 END AS LT02,
            CASE WHEN D3 <> 0 THEN (D3*1.0/UPH + Setting*Step*1.0/60) ELSE 0 END AS LT03,
            CASE WHEN D4 <> 0 THEN (D4*1.0/UPH + Setting*Step*1.0/60) ELSE 0 END AS LT04,
            CASE WHEN D5 <> 0 THEN (D5*1.0/UPH + Setting*Step*1.0/60) ELSE 0 END AS LT05,
            CASE WHEN D6 <> 0 THEN (D6*1.0/UPH + Setting*Step*1.0/60) ELSE 0 END AS LT06,
            CASE WHEN D7 <> 0 THEN (D7*1.0/UPH + Setting*Step*1.0/60) ELSE 0 END AS LT07,
            CASE WHEN D8 <> 0 THEN (D8*1.0/UPH + Setting*Step*1.0/60) ELSE 0 END AS LT08,
            CASE WHEN D9 <> 0 THEN (D9*1.0/UPH + Setting*Step*1.0/60) ELSE 0 END AS LT09,
            CASE WHEN D10 <> 0 THEN (D10*1.0/UPH + Setting*Step*1.0/60) ELSE 0 END AS LT10,
            CASE WHEN D11 <> 0 THEN (D11*1.0/UPH + Setting*Step*1.0/60) ELSE 0 END AS LT11,
            CASE WHEN D12 <> 0 THEN (D12*1.0/UPH + Setting*Step*1.0/60) ELSE 0 END AS LT12,
            CASE WHEN D13 <> 0 THEN (D13*1.0/UPH + Setting*Step*1.0/60) ELSE 0 END AS LT13,
            CASE WHEN D14 <> 0 THEN (D14*1.0/UPH + Setting*Step*1.0/60) ELSE 0 END AS LT14,
            CASE WHEN D15 <> 0 THEN (D15*1.0/UPH + Setting*Step*1.0/60) ELSE 0 END AS LT15
          FROM PLTB
          ),
          LEADTIMETB2 AS
          (
          SELECT CTR_CD, EQ_SERIES, 
          SUM(LT01) AS LT01, 
          SUM(LT02) AS LT02,
          SUM(LT03) AS LT03,
          SUM(LT04) AS LT04,
          SUM(LT05) AS LT05,
          SUM(LT06) AS LT06,
          SUM(LT07) AS LT07,
          SUM(LT08) AS LT08,
          SUM(LT09) AS LT09,
          SUM(LT10) AS LT10,
          SUM(LT11) AS LT11,
          SUM(LT12) AS LT12,
          SUM(LT13) AS LT13,
          SUM(LT14) AS LT14,
          SUM(LT15) AS LT15
          FROM LEATIMETB1 WHERE CTR_CD ='${DATA.CTR_CD}' GROUP BY CTR_CD,EQ_SERIES
          ),
          UnPivot_LeadTime AS (
              SELECT 
                  EQ_SERIES, Attribute AS PROD_DATE,
                  
                  Value AS LEADTIME
              FROM LEADTIMETB2
              UNPIVOT
              (
                  Value FOR Attribute IN (LT01, LT02, LT03, LT04, LT05, LT06, LT07,LT08, LT09, LT10, LT11, LT12, LT13, LT14, LT15)
              ) AS Unpvt
          ),
          EQ_SERIES AS
                    (
                    SELECT DISTINCT SUBSTRING(EQ_NAME,1,2) AS EQ_SERIES FROM ZTB_SX_EQ_STATUS WHERE CTR_CD='${DATA.CTR_CD}'
                    ),
                    EQ_OP_TB AS
                    (
                    SELECT SUBSTRING(EQ_NAME,1,2) AS EQ_SERIES,COUNT(EQ_NAME) AS EQ_QTY, SUM(EQ_OP)*2 AS EQ_OP, AVG(EQ_OP) AS AVG_EQ_OP, COUNT(EQ_NAME) * @worktime AS MAN_FULL_CAPA  FROM ZTB_SX_EQ_STATUS WHERE EQ_ACTIVE='OK' AND CTR_CD='002' GROUP BY SUBSTRING(EQ_NAME,1,2)
                    ),
                    RETAIN_WF_TB AS
                    (
                    SELECT SUBSTRING(ZTBWORKPOSITION.WORK_POSITION_NAME,4,2) AS EQ_SERIES, ZTBWORKPOSITION.WORK_POSITION_NAME, ZTBJOB.JOB_NAME, ZTBSUBDEPARTMENT.SUBDEPTNAME, ZTBMAINDEPARMENT.MAINDEPTNAME FROM ZTBEMPLINFO
                    LEFT JOIN ZTBWORKPOSITION ON ZTBEMPLINFO.WORK_POSITION_CODE = ZTBWORKPOSITION.WORK_POSITION_CODE AND ZTBEMPLINFO.CTR_CD = ZTBWORKPOSITION.CTR_CD
                    LEFT JOIN ZTBJOB ON ZTBEMPLINFO.JOB_CODE = ZTBJOB.JOB_CODE AND ZTBEMPLINFO.CTR_CD = ZTBJOB.CTR_CD
                    LEFT JOIN ZTBSUBDEPARTMENT ON ZTBWORKPOSITION.SUBDEPTCODE = ZTBSUBDEPARTMENT.SUBDEPTCODE  AND ZTBWORKPOSITION.CTR_CD = ZTBSUBDEPARTMENT.CTR_CD
                    LEFT JOIN ZTBMAINDEPARMENT ON ZTBSUBDEPARTMENT.MAINDEPTCODE = ZTBMAINDEPARMENT.MAINDEPTCODE AND ZTBSUBDEPARTMENT.CTR_CD = ZTBMAINDEPARMENT.CTR_CD
                    WHERE ZTBJOB.JOB_NAME='Worker' AND ZTBMAINDEPARMENT.MAINDEPTNAME = 'SX' AND ZTBWORKPOSITION.WORK_POSITION_NAME<>'SX_VP' AND ZTBEMPLINFO.WORK_STATUS_CODE = 1 AND ZTBEMPLINFO.CTR_CD='${DATA.CTR_CD}'
                    ),
                    RETAIN_WF_BY_SERIES AS
                    (
                      SELECT EQ_SERIES, COUNT(EQ_SERIES) AS RETAIN_WF, COUNT(EQ_SERIES) * @worktime AS RETAIN_WF_CAPA FROM RETAIN_WF_TB
                      GROUP BY EQ_SERIES
                    ),
                    ATT_WF_TB AS
                    (
                      SELECT SUBSTRING(ZTBWORKPOSITION.WORK_POSITION_NAME,4,2) AS EQ_SERIES, ZTBWORKPOSITION.WORK_POSITION_NAME, ZTBJOB.JOB_NAME, ZTBSUBDEPARTMENT.SUBDEPTNAME, ZTBMAINDEPARMENT.MAINDEPTNAME FROM ZTBATTENDANCETB
                      LEFT JOIN ZTBEMPLINFO ON ZTBEMPLINFO.EMPL_NO = ZTBATTENDANCETB.EMPL_NO AND  ZTBEMPLINFO.CTR_CD = ZTBATTENDANCETB.CTR_CD
                      LEFT JOIN ZTBWORKPOSITION ON ZTBEMPLINFO.WORK_POSITION_CODE = ZTBWORKPOSITION.WORK_POSITION_CODE AND ZTBEMPLINFO.CTR_CD = ZTBWORKPOSITION.CTR_CD
                    LEFT JOIN ZTBJOB ON ZTBEMPLINFO.JOB_CODE = ZTBJOB.JOB_CODE AND ZTBEMPLINFO.CTR_CD = ZTBJOB.CTR_CD
                    LEFT JOIN ZTBSUBDEPARTMENT ON ZTBWORKPOSITION.SUBDEPTCODE = ZTBSUBDEPARTMENT.SUBDEPTCODE  AND ZTBWORKPOSITION.CTR_CD = ZTBSUBDEPARTMENT.CTR_CD
                    LEFT JOIN ZTBMAINDEPARMENT ON ZTBSUBDEPARTMENT.MAINDEPTCODE = ZTBMAINDEPARMENT.MAINDEPTCODE AND ZTBSUBDEPARTMENT.CTR_CD = ZTBMAINDEPARMENT.CTR_CD
                    WHERE ZTBATTENDANCETB.ON_OFF=1 AND ZTBJOB.JOB_NAME='Worker' AND ZTBMAINDEPARMENT.MAINDEPTNAME = 'SX' AND ZTBWORKPOSITION.WORK_POSITION_NAME<>'SX_VP' AND ZTBEMPLINFO.WORK_STATUS_CODE = 1 AND ZTBEMPLINFO.CTR_CD='${DATA.CTR_CD}' AND APPLY_DATE = CAST(GETDATE() as date)
                      
                    ),
                    ATT_WF_BY_SERIES AS
                    (
                    SELECT EQ_SERIES, COUNT(EQ_SERIES) AS ATT_WF, COUNT(EQ_SERIES) * @worktime AS ATT_WF_CAPA FROM ATT_WF_TB GROUP BY EQ_SERIES
                    )
          SELECT UnPivot_LeadTime.*, EQ_OP_TB.MAN_FULL_CAPA*1.0/60 AS EQ_CAPA, EQ_OP_TB.MAN_FULL_CAPA*1.0/60*1.333333 AS EQ_CAPA_12H, RETAIN_WF_BY_SERIES.RETAIN_WF_CAPA*1.0/60 AS RETAIN_WF_CAPA, ATT_WF_BY_SERIES.ATT_WF_CAPA*1.0/60 AS ATT_WF_CAPA,RETAIN_WF_BY_SERIES.RETAIN_WF_CAPA*1.0/60*1.333333 AS RETAIN_WF_CAPA_12H,ATT_WF_BY_SERIES.ATT_WF_CAPA*1.0/60*1.333333 AS ATT_WF_CAPA_12H  FROM UnPivot_LeadTime 
          LEFT JOIN EQ_OP_TB ON (UnPivot_LeadTime.EQ_SERIES = EQ_OP_TB.EQ_SERIES)
          LEFT JOIN RETAIN_WF_BY_SERIES ON (UnPivot_LeadTime.EQ_SERIES = RETAIN_WF_BY_SERIES.EQ_SERIES)
          LEFT JOIN ATT_WF_BY_SERIES ON (UnPivot_LeadTime.EQ_SERIES = ATT_WF_BY_SERIES.EQ_SERIES)
          ORDER BY UnPivot_LeadTime.EQ_SERIES ASC, UnPivot_LeadTime.PROD_DATE ASC
          `;
          //console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);  
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
        case "updatePost":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";          
          let setpdQuery = `
         UPDATE ZTB_POST_TB SET TITLE=N'${DATA.TITLE}', CONTENT=N'${DATA.CONTENT}', IS_PINNED='${DATA.IS_PINNED}' WHERE POST_ID='${DATA.POST_ID}' AND CTR_CD='${DATA.CTR_CD}'
          `;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
        case "deletePost":
        (async () => {
          let DATA = qr["DATA"];
          //console.log(DATA);
          let EMPL_NO = req.payload_data["EMPL_NO"];
          let JOB_NAME = req.payload_data["JOB_NAME"];
          let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
          let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
          let checkkq = "OK";          
          let setpdQuery = `
          DELETE FROM ZTB_POST_TB WHERE POST_ID='${DATA.POST_ID}' AND CTR_CD='${DATA.CTR_CD}'
          `;
          console.log(setpdQuery);
          checkkq = await queryDB(setpdQuery);
          //console.log(checkkq);
          res.send(checkkq);
        })();
        break;
      default:
        //console.log(qr['command']);
        res.send({ tk_status: "ok", data: req.payload_data });
    }
  } else {
    res.send({
      tk_status: "NG",
      message: "Bạn không có quyền truy cập sub server",
    });
  }
};
