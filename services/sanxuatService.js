const { queryDB } = require("../config/database");
exports.loadDataSX = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = " WHERE 1=1  ";
  if (DATA.ALLTIME === false) {
    condition += ` AND ZTB_QLSXPLAN.PLAN_DATE BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE}'`;
  }
  if (DATA.G_NAME !== "") {
    condition += ` AND M100.G_NAME LIKE '%${DATA.G_NAME}%'`;
  }
  if (DATA.G_CODE !== "") {
    condition += ` AND M100.G_CODE = '${DATA.G_CODE}'`;
  }
  if (DATA.PLAN_ID !== "") {
    condition += ` AND ZTB_QLSXPLAN.PLAN_ID = '${DATA.PLAN_ID}'`;
  }
  if (DATA.PROD_REQUEST_NO !== "") {
    condition += ` AND ZTB_QLSXPLAN.PROD_REQUEST_NO = '${DATA.PROD_REQUEST_NO}'`;
  }
  if (DATA.FACTORY !== "ALL") {
    condition += ` AND ZTB_QLSXPLAN.PLAN_FACTORY = '${DATA.FACTORY}'`;
  }
  if (DATA.M_NAME !== "") {
    condition += ` AND isnull(isnull(WAREHOUSE_OUT.M_NAME, AA.M_NAME),BB.M_NAME) LIKE '%${DATA.M_NAME}%'`;
  }
  if (DATA.M_CODE !== "") {
    condition += ` AND M090.M_CODE = '${DATA.M_CODE}'`;
  }
  if (DATA.PLAN_EQ !== "ALL") {
    condition += ` AND SUBSTRING(ZTB_QLSXPLAN.PLAN_EQ,1,2)= '${DATA.PLAN_EQ}'`;
  }
  if (DATA.TRUSAMPLE) {
    condition += ` AND P400.CODE_55 <> '04'`;
  }
  let setpdQuery = `
  WITH AA AS (
SELECT PLAN_ID_SUDUNG,M090.M_NAME, SUM(isnull(TOTAL_IN_QTY, 0)) AS INPUT_QTY, IN_KHO_SX.CTR_CD
FROM IN_KHO_SX
LEFT JOIN M090 ON (M090.M_CODE = IN_KHO_SX.M_CODE AND M090.CTR_CD = IN_KHO_SX.CTR_CD)
WHERE IN_KHO_SX.USE_YN = 'X' AND IN_KHO_SX.CTR_CD='${DATA.CTR_CD}'
GROUP BY IN_KHO_SX.PLAN_ID_SUDUNG,M090.M_NAME, IN_KHO_SX.CTR_CD
),
BB AS (
SELECT P500.PLAN_ID,M090.M_NAME,SUM(isnull(REMAIN_QTY, 0)) AS REMAIN_QTY,SUM(isnull(INPUT_QTY, 0))  AS INPUT_QTY, P500.CTR_CD
FROM P500
LEFT JOIN M090 ON (M090.M_CODE = P500.M_CODE AND M090.CTR_CD = P500.CTR_CD)
WHERE P500.CTR_CD='${DATA.CTR_CD}'
GROUP BY PLAN_ID,M090.M_NAME, P500.CTR_CD),
WAREHOUSE_OUT AS (
SELECT PLAN_ID_INPUT,M090.M_NAME,SUM(isnull(TOTAL_IN_QTY, 0)) AS WAREHOUSE_OUTPUT_QTY, IN_KHO_SX.CTR_CD
FROM IN_KHO_SX
LEFT JOIN M090 ON (M090.M_CODE = IN_KHO_SX.M_CODE AND M090.CTR_CD = IN_KHO_SX.CTR_CD)
WHERE IN_KHO_SX.PHANLOAI = 'N' AND IN_KHO_SX.CTR_CD='${DATA.CTR_CD}'
GROUP BY PLAN_ID_INPUT,M090.M_NAME, IN_KHO_SX.CTR_CD),
CC AS (
SELECT PLAN_ID_INPUT,M090.M_NAME,SUM(isnull(TOTAL_IN_QTY, 0)) AS RETURN_QTY, IN_KHO_SX.CTR_CD
FROM IN_KHO_SX
LEFT JOIN M090 ON (M090.M_CODE = IN_KHO_SX.M_CODE AND M090.CTR_CD = IN_KHO_SX.CTR_CD)
WHERE IN_KHO_SX.REMARK = 'TRA_KHO' AND IN_KHO_SX.PLAN_ID_SUDUNG is null AND IN_KHO_SX.CTR_CD='${DATA.CTR_CD}'
GROUP BY PLAN_ID_INPUT,M090.M_NAME, IN_KHO_SX.CTR_CD) ,
DD AS (
SELECT PLAN_ID_INPUT,M090.M_NAME,SUM(isnull(TOTAL_IN_QTY, 0)) AS NEXT_OUT_QTY, IN_KHO_SX.CTR_CD
FROM IN_KHO_SX
LEFT JOIN M090 ON (M090.M_CODE = IN_KHO_SX.M_CODE AND M090.CTR_CD = IN_KHO_SX.CTR_CD)
WHERE PLAN_ID_INPUT <> PLAN_ID_SUDUNG AND IN_KHO_SX.USE_YN = 'X' AND isnull(REMARK,'') <> 'TRA_KHO' AND IN_KHO_SX.CTR_CD='${DATA.CTR_CD}'
GROUP BY PLAN_ID_INPUT,M090.M_NAME, IN_KHO_SX.CTR_CD),
EE AS (
SELECT PLAN_ID_SUDUNG,M090.M_NAME,SUM(isnull(TOTAL_IN_QTY, 0)) AS NEXT_IN_QTY, IN_KHO_SX.CTR_CD
FROM IN_KHO_SX
LEFT JOIN M090 ON (M090.M_CODE = IN_KHO_SX.M_CODE AND M090.CTR_CD = IN_KHO_SX.CTR_CD)
WHERE PLAN_ID_INPUT <> PLAN_ID_SUDUNG AND IN_KHO_SX.CTR_CD='${DATA.CTR_CD}'
GROUP BY PLAN_ID_SUDUNG,M090.M_NAME, IN_KHO_SX.CTR_CD),
FF AS (
SELECT PLAN_ID_INPUT,M090.M_NAME,SUM(isnull(TOTAL_IN_QTY, 0)) AS TON_KHO_AO, IN_KHO_SX.CTR_CD
FROM IN_KHO_SX
LEFT JOIN M090 ON (M090.M_CODE = IN_KHO_SX.M_CODE AND M090.CTR_CD = IN_KHO_SX.CTR_CD)
WHERE IN_KHO_SX.USE_YN='Y' AND IN_KHO_SX.CTR_CD='${DATA.CTR_CD}'
GROUP BY PLAN_ID_INPUT,M090.M_NAME, IN_KHO_SX.CTR_CD),
GG AS (
SELECT PLAN_ID_INPUT,M090.M_NAME,SUM(isnull(TOTAL_IN_QTY, 0)) AS LOCK_QTY, IN_KHO_SX.CTR_CD
FROM IN_KHO_SX
LEFT JOIN M090 ON (M090.M_CODE = IN_KHO_SX.M_CODE AND M090.CTR_CD = IN_KHO_SX.CTR_CD)
WHERE IN_KHO_SX.USE_YN='O' AND IN_KHO_SX.CTR_CD='${DATA.CTR_CD}'
GROUP BY PLAN_ID_INPUT,M090.M_NAME, IN_KHO_SX.CTR_CD),
HH AS (
SELECT  ZTB_SX_NG_MATERIAL.CTR_CD,PLAN_ID_SUDUNG, M090.M_NAME, SUM(TOTAL_IN_QTY) AS RETURN_IQC   
FROM ZTB_SX_NG_MATERIAL 
LEFT JOIN M090 ON M090.CTR_CD=  ZTB_SX_NG_MATERIAL.CTR_CD AND M090.M_CODE=  ZTB_SX_NG_MATERIAL.M_CODE 
WHERE LIEUQL_SX = 1 AND ZTB_SX_NG_MATERIAL.CTR_CD ='${DATA.CTR_CD}'  
GROUP BY ZTB_SX_NG_MATERIAL.CTR_CD,PLAN_ID_SUDUNG, M090.M_NAME
),
II AS (
SELECT ZTB_SX_NG_MATERIAL.CTR_CD,OUT_PLAN_ID, M090.M_NAME, SUM(TOTAL_IN_QTY) AS IQC_IN   
FROM ZTB_SX_NG_MATERIAL 
LEFT JOIN M090 ON M090.CTR_CD=  ZTB_SX_NG_MATERIAL.CTR_CD AND M090.M_CODE=  ZTB_SX_NG_MATERIAL.M_CODE 
WHERE LIEUQL_SX = 1 AND ZTB_SX_NG_MATERIAL.CTR_CD ='${DATA.CTR_CD}'  
GROUP BY ZTB_SX_NG_MATERIAL.CTR_CD,OUT_PLAN_ID, M090.M_NAME
)
, INSPECT_INPUT_TABLE AS 
( SELECT 
PLAN_ID, 
SUM(
CAST(INPUT_QTY_EA as float)
) AS INS_INPUT,
CTR_CD 
FROM 
ZTBINSPECTINPUTTB 
WHERE CTR_CD='${DATA.CTR_CD}'
GROUP BY 
PLAN_ID, CTR_CD),
INSPECT_OUTPUT_TABLE AS 
(SELECT 
PLAN_ID, 
SUM(
CAST(OUTPUT_QTY_EA as float)
) AS INS_OUTPUT,
CTR_CD 
FROM 
ZTBINSPECTOUTPUTTB 
WHERE SORTING='N' AND CTR_CD='${DATA.CTR_CD}'
GROUP BY 
PLAN_ID, CTR_CD),
INSPECT_NK_TABLE AS
( SELECT 
PLAN_ID, 
SUM(
CAST((INSPECT_TOTAL_QTY-ERR32) as float)
) AS INSPECT_TOTAL_QTY, 
SUM(
CAST(INSPECT_OK_QTY as float)
) AS INSPECT_OK_QTY, 
SUM(
CAST(
  (
    ERR4 + ERR5 + ERR6 + ERR7 + ERR8 + ERR9 + ERR10 + ERR11 + ERR12 + ERR13 + ERR14 + ERR15 + ERR16 + ERR17 + ERR18 + ERR19 + ERR20 + ERR21 + ERR22 + ERR23 + ERR24 + ERR25 + ERR26 + ERR27 + ERR28 + ERR29 + ERR30 + ERR31
  ) as float
)
) AS INSPECT_TOTAL_NG , 
SUM(ERR4+ERR5+ERR6+ERR7+ERR8+ERR9+ERR10+ERR11) AS INSPECT_MATERIAL_NG, SUM(ERR12+ERR13+ERR14+ERR15+ERR16+ERR17+ERR18+ERR19+ERR20+ERR21+ERR22+ERR23+ERR24+ERR25+ERR26+ERR27+ERR28+ERR29+ERR30+ERR31) AS INSPECT_PROCESS_NG, SUM(ERR32) AS SX_MARKING_QTY, SUM(ERR1) AS LOSS_THEM_TUI,SUM(ERR1+ ERR2+ERR3) AS INSPECT_LOSS_QTY,
CTR_CD
FROM 
ZTBINSPECTNGTB 
WHERE CTR_CD='${DATA.CTR_CD}'
GROUP BY 
PLAN_ID, CTR_CD),
PROCESS_TB AS
  (
  SELECT G_CODE,
  CASE WHEN EQ4 <> 'NA' AND EQ4 <> 'NO' AND EQ4 is not null AND EQ4 <> '' THEN 4 
  WHEN EQ3 <> 'NA' AND EQ3 <> 'NO' AND EQ3 is not null AND EQ3 <> ''  THEN 3
  WHEN EQ2 <> 'NA' AND EQ2 <> 'NO' AND EQ2 is not null AND EQ2 <> ''  THEN 2 
  ELSE 1 END AS MAX_PROCESS_NUMBER,
  CTR_CD
  FROM M100
  WHERE CTR_CD='${DATA.CTR_CD}'
)
SELECT 
CASE WHEN P400.CODE_55 = '04' THEN 'SAMPLE' ELSE 'MASS' END AS PHAN_LOAI, 
ZTB_QLSXPLAN.G_CODE, 
ZTB_QLSXPLAN.PLAN_ID, 
ZTB_QLSXPLAN.PLAN_DATE, 
ZTB_QLSXPLAN.PROD_REQUEST_NO, 
M100.G_NAME, 
M100.G_NAME_KD,
isnull(
CASE WHEN ZTB_QLSXPLAN.PROCESS_NUMBER = 1 THEN (ZTB_QLSXPLAN.PLAN_QTY* ZTB_SX_RESULT.PD*1.0/ZTB_SX_RESULT.CAVITY/1000*(1+ZTB_DM_HISTORY.LOSS_SX1/100) + ZTB_DM_HISTORY.LOSS_SETTING1)  
WHEN ZTB_QLSXPLAN.PROCESS_NUMBER = 2 THEN (ZTB_QLSXPLAN.PLAN_QTY* ZTB_SX_RESULT.PD*1.0/ZTB_SX_RESULT.CAVITY/1000*(1+ZTB_DM_HISTORY.LOSS_SX2/100) + ZTB_DM_HISTORY.LOSS_SETTING2)
WHEN ZTB_QLSXPLAN.PROCESS_NUMBER = 3 THEN (ZTB_QLSXPLAN.PLAN_QTY* ZTB_SX_RESULT.PD*1.0/ZTB_SX_RESULT.CAVITY/1000*(1+ZTB_DM_HISTORY.LOSS_SX3/100) + ZTB_DM_HISTORY.LOSS_SETTING3)
WHEN ZTB_QLSXPLAN.PROCESS_NUMBER = 4 THEN (ZTB_QLSXPLAN.PLAN_QTY* ZTB_SX_RESULT.PD*1.0/ZTB_SX_RESULT.CAVITY/1000*(1+ZTB_DM_HISTORY.LOSS_SX4/100) + ZTB_DM_HISTORY.LOSS_SETTING4)
ELSE ZTB_QLSXPLAN.PLAN_QTY* ZTB_SX_RESULT.PD*1.0/ZTB_SX_RESULT.CAVITY/1000 END,0) AS PLAN_TARGET_MET
,
ZTB_QLSXPLAN.PLAN_QTY, 
ZTB_QLSXPLAN.PLAN_QTY* ZTB_SX_RESULT.PD*1.0/ZTB_SX_RESULT.CAVITY/1000 AS PLAN_ORG_MET,  
M100.EQ1, 
M100.EQ2, 
ZTB_QLSXPLAN.PLAN_EQ, 
ZTB_QLSXPLAN.PLAN_FACTORY, 
ZTB_QLSXPLAN.PROCESS_NUMBER, 
ZTB_QLSXPLAN.STEP, 
isnull(isnull(WAREHOUSE_OUT.M_NAME, AA.M_NAME),BB.M_NAME) AS M_NAME, 
isnull(WAREHOUSE_OUT.WAREHOUSE_OUTPUT_QTY, 0) AS WAREHOUSE_OUTPUT_QTY,
isnull(EE.NEXT_IN_QTY,0) AS NEXT_IN_QTY,
isnull(II.IQC_IN,0) AS IQC_IN,
CASE WHEN PROCESS_NUMBER =1 THEN  (isnull(WAREHOUSE_OUT.WAREHOUSE_OUTPUT_QTY, 0)+ isnull(EE.NEXT_IN_QTY,0) - isnull(BB.INPUT_QTY * 1.000, isnull(AA.INPUT_QTY * 1.00000,0))) ELSE 0 END AS NOT_BEEP_QTY,
isnull(HH.RETURN_IQC,0) AS RETURN_IQC,
isnull(BB.INPUT_QTY * 1.000, isnull(AA.INPUT_QTY * 1.00000,0)) AS BEEP_QTY,	 
isnull(BB.REMAIN_QTY, 0) AS REMAIN_QTY,
(isnull(BB.INPUT_QTY * 1.00000, isnull(AA.INPUT_QTY * 1.00000,0)) - isnull(BB.REMAIN_QTY, 0)) AS USED_QTY,
isnull(GG.LOCK_QTY,0) AS LOCK_QTY,
isnull(FF.TON_KHO_AO,0) AS TON_KHO_AO,
isnull(DD.NEXT_OUT_QTY,0) AS NEXT_OUT_QTY,
isnull(CC.RETURN_QTY, 0) AS RETURN_QTY,  
isnull(ZTB_SX_RESULT.NG_MET,0) AS NG_MET, 
ZTB_SX_RESULT.SETTING_MET, 
ZTB_SX_RESULT.PD, 
ZTB_SX_RESULT.CAVITY, 
CASE WHEN ZTB_QLSXPLAN.PROCESS_NUMBER = 1 THEN M100.LOSS_SETTING1 WHEN ZTB_QLSXPLAN.PROCESS_NUMBER = 2 THEN M100.LOSS_SETTING2 WHEN ZTB_QLSXPLAN.PROCESS_NUMBER = 3 THEN M100.LOSS_SETTING3 WHEN ZTB_QLSXPLAN.PROCESS_NUMBER = 4 THEN M100.LOSS_SETTING4 ELSE 0 END AS SETTING_MET_TC, 
CASE WHEN ZTB_QLSXPLAN.PROCESS_NUMBER = 1 THEN M100.LOSS_ST_SX1 WHEN ZTB_QLSXPLAN.PROCESS_NUMBER = 2 THEN M100.LOSS_ST_SX2 WHEN ZTB_QLSXPLAN.PROCESS_NUMBER = 3 THEN M100.LOSS_ST_SX3 WHEN ZTB_QLSXPLAN.PROCESS_NUMBER = 4 THEN M100.LOSS_ST_SX4 ELSE 0 END AS SETTING_DM_SX, 
isnull(WAREHOUSE_OUT.WAREHOUSE_OUTPUT_QTY, 0) *1.0/ ZTB_SX_RESULT.PD * ZTB_SX_RESULT.CAVITY * 1000 AS WAREHOUSE_ESTIMATED_QTY, 
((isnull(BB.INPUT_QTY * 1.00000, AA.INPUT_QTY * 1.00000) - isnull(BB.REMAIN_QTY, 0))*1.0)/ ZTB_SX_RESULT.PD * ZTB_SX_RESULT.CAVITY * 1000 AS ESTIMATED_QTY, 
((isnull(BB.INPUT_QTY * 1.00000, AA.INPUT_QTY * 1.00000) - isnull(BB.REMAIN_QTY, 0))*1.0)/ ZTB_SX_RESULT.PD * ZTB_SX_RESULT.CAVITY * 1000AS ESTIMATED_QTY_ST,
ZTB_SX_RESULT.SETTING_MET *1.0/ ZTB_SX_RESULT.PD * ZTB_SX_RESULT.CAVITY * 1000 AS SETTING_EA, 
isnull(ZTB_SX_RESULT.NG_MET,0)/ ZTB_SX_RESULT.PD * ZTB_SX_RESULT.CAVITY * 1000 AS NG_EA,
CAST(ZTB_SX_RESULT.SX_RESULT AS float) AS KETQUASX, 
CASE WHEN PROCESS_TB.MAX_PROCESS_NUMBER =ZTB_QLSXPLAN.PROCESS_NUMBER AND ZTB_QLSXPLAN.STEP =0 THEN  CAST(ZTB_SX_RESULT.SX_RESULT AS float) ELSE 0 END AS KETQUASX_TP,
INSPECT_INPUT_TABLE.INS_INPUT, 
INSPECT_NK_TABLE.INSPECT_TOTAL_QTY, 
INSPECT_NK_TABLE.INSPECT_OK_QTY,
INSPECT_NK_TABLE.INSPECT_MATERIAL_NG, 
INSPECT_NK_TABLE.INSPECT_PROCESS_NG, 
INSPECT_NK_TABLE.INSPECT_TOTAL_NG, 
INSPECT_NK_TABLE.SX_MARKING_QTY, 
INSPECT_NK_TABLE.LOSS_THEM_TUI, 
INSPECT_NK_TABLE.INSPECT_LOSS_QTY, 
INSPECT_OUTPUT_TABLE.INS_OUTPUT, 
ZTB_SX_RESULT.SETTING_START_TIME, 
ZTB_SX_RESULT.MASS_START_TIME, 
ZTB_SX_RESULT.MASS_END_TIME, 
ZTB_SX_RESULT.RPM, 
ZTB_SX_RESULT.EQ_NAME AS EQ_NAME_TT, 
SUBSTRING(ZTB_SX_RESULT.EQ_NAME, 1, 2) AS MACHINE_NAME,
ZTB_SX_RESULT.SX_DATE, 
ZTB_SX_RESULT.WORK_SHIFT, 
ZTB_SX_RESULT.INS_EMPL, 
ZTB_SX_EFFICIENCY.FACTORY, 
ZTB_SX_EFFICIENCY.BOC_KIEM, 
ZTB_SX_EFFICIENCY.LAY_DO, 
ZTB_SX_EFFICIENCY.MAY_HONG, 
ZTB_SX_EFFICIENCY.DAO_NG, 
ZTB_SX_EFFICIENCY.CHO_LIEU, 
ZTB_SX_EFFICIENCY.CHO_BTP, 
ZTB_SX_EFFICIENCY.HET_LIEU, 
ZTB_SX_EFFICIENCY.LIEU_NG, 
ZTB_SX_EFFICIENCY.CAN_HANG, 
ZTB_SX_EFFICIENCY.HOP_FL, 
ZTB_SX_EFFICIENCY.CHO_QC, 
ZTB_SX_EFFICIENCY.CHOT_BAOCAO, 
ZTB_SX_EFFICIENCY.CHUYEN_CODE, 
ZTB_SX_EFFICIENCY.KHAC, 
ZTB_SX_EFFICIENCY.REMARK,
ZTB_QLSXPLAN.NEEDED_QTY,
ZTB_QLSXPLAN.CURRENT_LOSS_SX,
ZTB_QLSXPLAN.CURRENT_LOSS_KT,
ZTB_QLSXPLAN.CURRENT_SETTING_M
FROM 
ZTB_QLSXPLAN 
LEFT JOIN AA ON (AA.PLAN_ID_SUDUNG= ZTB_QLSXPLAN.PLAN_ID AND AA.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
LEFT JOIN BB ON (BB.PLAN_ID= ZTB_QLSXPLAN.PLAN_ID AND BB.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
LEFT JOIN CC ON (CC.PLAN_ID_INPUT= ZTB_QLSXPLAN.PLAN_ID AND CC.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
LEFT JOIN DD ON (DD.PLAN_ID_INPUT= ZTB_QLSXPLAN.PLAN_ID AND DD.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
LEFT JOIN EE ON (EE.PLAN_ID_SUDUNG= ZTB_QLSXPLAN.PLAN_ID AND EE.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
LEFT JOIN FF ON (FF.PLAN_ID_INPUT= ZTB_QLSXPLAN.PLAN_ID AND FF.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
LEFT JOIN GG ON (GG.PLAN_ID_INPUT= ZTB_QLSXPLAN.PLAN_ID AND GG.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
LEFT JOIN HH ON (HH.PLAN_ID_SUDUNG= ZTB_QLSXPLAN.PLAN_ID AND HH.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
LEFT JOIN II ON (II.OUT_PLAN_ID= ZTB_QLSXPLAN.PLAN_ID AND II.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
LEFT JOIN WAREHOUSE_OUT ON (WAREHOUSE_OUT.PLAN_ID_INPUT= ZTB_QLSXPLAN.PLAN_ID AND WAREHOUSE_OUT.CTR_CD = ZTB_QLSXPLAN.CTR_CD) 
LEFT JOIN ZTB_SX_RESULT ON (ZTB_SX_RESULT.PLAN_ID = ZTB_QLSXPLAN.PLAN_ID AND ZTB_SX_RESULT.CTR_CD = ZTB_QLSXPLAN.CTR_CD) 
LEFT JOIN  INSPECT_INPUT_TABLE ON(ZTB_QLSXPLAN.PLAN_ID = INSPECT_INPUT_TABLE.PLAN_ID AND ZTB_QLSXPLAN.CTR_CD = INSPECT_INPUT_TABLE.CTR_CD) 
LEFT JOIN INSPECT_OUTPUT_TABLE ON (ZTB_QLSXPLAN.PLAN_ID = INSPECT_OUTPUT_TABLE.PLAN_ID AND ZTB_QLSXPLAN.CTR_CD = INSPECT_OUTPUT_TABLE.CTR_CD) 
LEFT JOIN  INSPECT_NK_TABLE ON (ZTB_QLSXPLAN.PLAN_ID = INSPECT_NK_TABLE.PLAN_ID AND ZTB_QLSXPLAN.CTR_CD = INSPECT_NK_TABLE.CTR_CD) 
LEFT JOIN M100 ON (M100.G_CODE = ZTB_QLSXPLAN.G_CODE AND M100.CTR_CD = ZTB_QLSXPLAN.CTR_CD) 
LEFT JOIN PROCESS_TB ON (PROCESS_TB.G_CODE = ZTB_QLSXPLAN.G_CODE AND PROCESS_TB.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
LEFT JOIN ZTB_SX_EFFICIENCY ON (ZTB_QLSXPLAN.PLAN_ID = ZTB_SX_EFFICIENCY.PLAN_ID AND ZTB_QLSXPLAN.CTR_CD = ZTB_SX_EFFICIENCY.CTR_CD) 
LEFT JOIN P400 ON (P400.PROD_REQUEST_NO = ZTB_QLSXPLAN.PROD_REQUEST_NO AND P400.CTR_CD = ZTB_QLSXPLAN.CTR_CD) 
LEFT JOIN ZTB_DM_HISTORY ON (ZTB_QLSXPLAN.PROD_REQUEST_NO= ZTB_DM_HISTORY.PROD_REQUEST_NO AND ZTB_QLSXPLAN.CTR_CD = ZTB_DM_HISTORY.CTR_CD)
${condition} AND ZTB_QLSXPLAN.CTR_CD='${DATA.CTR_CD}'
ORDER BY 
ZTB_QLSXPLAN.PLAN_ID DESC
`;
  //console.log(setpdQuery)
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.nhapkhoao = async (req, res, DATA) => {
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let checkkq = "OK";
  let setpdQuery = `INSERT INTO IN_KHO_SX (CTR_CD,FACTORY,PHANLOAI,PLAN_ID_INPUT, PLAN_ID_SUDUNG, M_CODE,M_LOT_NO,ROLL_QTY,IN_QTY,TOTAL_IN_QTY,USE_YN,FSC, FSC_MCODE, FSC_GCODE,INS_DATE,INS_EMPL,UPD_DATE,UPD_EMPL) VALUES ('${DATA.CTR_CD}','${DATA.FACTORY}','${DATA.PHANLOAI}', ${DATA.PLAN_ID_INPUT !== null ? "'" + DATA.PLAN_ID_INPUT + "'" : null},${DATA.PLAN_ID_SUDUNG !== null ? "'" + DATA.PLAN_ID_SUDUNG + "'" : null}, '${DATA.M_CODE}','${DATA.M_LOT_NO}','${DATA.ROLL_QTY}','${DATA.IN_QTY}','${DATA.TOTAL_IN_QTY}','${DATA.USE_YN}', '${DATA.FSC}','${DATA.FSC_MCODE}','${DATA.FSC_GCODE}',GETDATE(), '${EMPL_NO}', GETDATE(),'${EMPL_NO}')`;
  //${moment().format('YYYY-MM-DD')}
  console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.resetKhoSX_IQC1 = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `UPDATE IN_KHO_SX SET USE_YN='X', REMARK ='TRA_IQC' WHERE PLAN_ID_INPUT='${DATA.PLAN_ID}' AND M_LOT_NO='${DATA.M_LOT_NO}' AND CTR_CD='${DATA.CTR_CD}'`;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  setpdQuery = `UPDATE OUT_KHO_SX SET USE_YN='X', REMARK ='TRA_IQC' WHERE PLAN_ID_OUTPUT='${DATA.PLAN_ID}' AND M_LOT_NO='${DATA.M_LOT_NO}' AND CTR_CD='${DATA.CTR_CD}' `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.resetKhoSX_IQC2 = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `UPDATE IN_KHO_SX SET USE_YN='X', REMARK ='TRA_IQC' WHERE PLAN_ID_SUDUNG='${DATA.PLAN_ID}' AND M_LOT_NO='${DATA.M_LOT_NO}' AND CTR_CD='${DATA.CTR_CD}'`;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  setpdQuery = `UPDATE OUT_KHO_SX SET USE_YN='X', REMARK ='TRA_IQC' WHERE PLAN_ID_OUTPUT='${DATA.PLAN_ID}' AND M_LOT_NO='${DATA.M_LOT_NO}' AND CTR_CD='${DATA.CTR_CD}' `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.common = async (req, res, DATA) => {

};
exports.common = async (req, res, DATA) => {

};
exports.common = async (req, res, DATA) => {

};