const moment = require("moment");
const { queryDB } = require("../config/database");
const { generate_condition_get_ycsx } = require("../utils/sqlUtils");
exports.loadDataSX = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = " WHERE 1=1  ";
  if (DATA.ALLTIME === false) {
    condition += ` AND ZTB_QLSXPLAN.PLAN_DATE BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE}'`;
  }
  if (DATA.G_NAME !== "") {
    condition += ` AND M100.G_NAME LIKE '%${DATA.G_NAME}%'`;
  }
  if (DATA.G_CODE !== "") {
    condition += ` AND M100.G_CODE = '${DATA.G_CODE}'`;
  }
  if (DATA.PLAN_ID !== "") {
    condition += ` AND ZTB_QLSXPLAN.PLAN_ID = '${DATA.PLAN_ID}'`;
  }
  if (DATA.PROD_REQUEST_NO !== "") {
    condition += ` AND ZTB_QLSXPLAN.PROD_REQUEST_NO = '${DATA.PROD_REQUEST_NO}'`;
  }
  if (DATA.FACTORY !== "ALL") {
    condition += ` AND ZTB_QLSXPLAN.PLAN_FACTORY = '${DATA.FACTORY}'`;
  }
  if (DATA.M_NAME !== "") {
    condition += ` AND isnull(isnull(WAREHOUSE_OUT.M_NAME, AA.M_NAME),BB.M_NAME) LIKE '%${DATA.M_NAME}%'`;
  }
  if (DATA.M_CODE !== "") {
    condition += ` AND M090.M_CODE = '${DATA.M_CODE}'`;
  }
  if (DATA.PLAN_EQ !== "ALL") {
    condition += ` AND SUBSTRING(ZTB_QLSXPLAN.PLAN_EQ,1,2)= '${DATA.PLAN_EQ}'`;
  }
  if (DATA.TRUSAMPLE) {
    condition += ` AND P400.CODE_55 <> '04'`;
  }
  let setpdQuery = `
  WITH AA AS (
SELECT PLAN_ID_SUDUNG,M090.M_NAME, SUM(isnull(TOTAL_IN_QTY, 0)) AS INPUT_QTY, IN_KHO_SX.CTR_CD
FROM IN_KHO_SX
LEFT JOIN M090 ON (M090.M_CODE = IN_KHO_SX.M_CODE AND M090.CTR_CD = IN_KHO_SX.CTR_CD)
WHERE IN_KHO_SX.USE_YN = 'X' AND IN_KHO_SX.CTR_CD='${DATA.CTR_CD}'
GROUP BY IN_KHO_SX.PLAN_ID_SUDUNG,M090.M_NAME, IN_KHO_SX.CTR_CD
),
BB AS (
SELECT P500.PLAN_ID,M090.M_NAME,SUM(isnull(REMAIN_QTY, 0)) AS REMAIN_QTY,SUM(isnull(INPUT_QTY, 0))  AS INPUT_QTY, P500.CTR_CD
FROM P500
LEFT JOIN M090 ON (M090.M_CODE = P500.M_CODE AND M090.CTR_CD = P500.CTR_CD)
WHERE P500.CTR_CD='${DATA.CTR_CD}'
GROUP BY PLAN_ID,M090.M_NAME, P500.CTR_CD),
WAREHOUSE_OUT AS (
SELECT PLAN_ID_INPUT,M090.M_NAME,SUM(isnull(TOTAL_IN_QTY, 0)) AS WAREHOUSE_OUTPUT_QTY, IN_KHO_SX.CTR_CD
FROM IN_KHO_SX
LEFT JOIN M090 ON (M090.M_CODE = IN_KHO_SX.M_CODE AND M090.CTR_CD = IN_KHO_SX.CTR_CD)
WHERE IN_KHO_SX.PHANLOAI = 'N' AND IN_KHO_SX.CTR_CD='${DATA.CTR_CD}'
GROUP BY PLAN_ID_INPUT,M090.M_NAME, IN_KHO_SX.CTR_CD),
CC AS (
SELECT PLAN_ID_INPUT,M090.M_NAME,SUM(isnull(TOTAL_IN_QTY, 0)) AS RETURN_QTY, IN_KHO_SX.CTR_CD
FROM IN_KHO_SX
LEFT JOIN M090 ON (M090.M_CODE = IN_KHO_SX.M_CODE AND M090.CTR_CD = IN_KHO_SX.CTR_CD)
WHERE IN_KHO_SX.REMARK = 'TRA_KHO' AND IN_KHO_SX.PLAN_ID_SUDUNG is null AND IN_KHO_SX.CTR_CD='${DATA.CTR_CD}'
GROUP BY PLAN_ID_INPUT,M090.M_NAME, IN_KHO_SX.CTR_CD) ,
DD AS (
SELECT PLAN_ID_INPUT,M090.M_NAME,SUM(isnull(TOTAL_IN_QTY, 0)) AS NEXT_OUT_QTY, IN_KHO_SX.CTR_CD
FROM IN_KHO_SX
LEFT JOIN M090 ON (M090.M_CODE = IN_KHO_SX.M_CODE AND M090.CTR_CD = IN_KHO_SX.CTR_CD)
WHERE PLAN_ID_INPUT <> PLAN_ID_SUDUNG AND IN_KHO_SX.USE_YN = 'X' AND isnull(REMARK,'') <> 'TRA_KHO' AND IN_KHO_SX.CTR_CD='${DATA.CTR_CD}'
GROUP BY PLAN_ID_INPUT,M090.M_NAME, IN_KHO_SX.CTR_CD),
EE AS (
SELECT PLAN_ID_SUDUNG,M090.M_NAME,SUM(isnull(TOTAL_IN_QTY, 0)) AS NEXT_IN_QTY, IN_KHO_SX.CTR_CD
FROM IN_KHO_SX
LEFT JOIN M090 ON (M090.M_CODE = IN_KHO_SX.M_CODE AND M090.CTR_CD = IN_KHO_SX.CTR_CD)
WHERE PLAN_ID_INPUT <> PLAN_ID_SUDUNG AND IN_KHO_SX.CTR_CD='${DATA.CTR_CD}'
GROUP BY PLAN_ID_SUDUNG,M090.M_NAME, IN_KHO_SX.CTR_CD),
FF AS (
SELECT PLAN_ID_INPUT,M090.M_NAME,SUM(isnull(TOTAL_IN_QTY, 0)) AS TON_KHO_AO, IN_KHO_SX.CTR_CD
FROM IN_KHO_SX
LEFT JOIN M090 ON (M090.M_CODE = IN_KHO_SX.M_CODE AND M090.CTR_CD = IN_KHO_SX.CTR_CD)
WHERE IN_KHO_SX.USE_YN='Y' AND IN_KHO_SX.CTR_CD='${DATA.CTR_CD}'
GROUP BY PLAN_ID_INPUT,M090.M_NAME, IN_KHO_SX.CTR_CD),
GG AS (
SELECT PLAN_ID_INPUT,M090.M_NAME,SUM(isnull(TOTAL_IN_QTY, 0)) AS LOCK_QTY, IN_KHO_SX.CTR_CD
FROM IN_KHO_SX
LEFT JOIN M090 ON (M090.M_CODE = IN_KHO_SX.M_CODE AND M090.CTR_CD = IN_KHO_SX.CTR_CD)
WHERE IN_KHO_SX.USE_YN='O' AND IN_KHO_SX.CTR_CD='${DATA.CTR_CD}'
GROUP BY PLAN_ID_INPUT,M090.M_NAME, IN_KHO_SX.CTR_CD),
HH AS (
SELECT  ZTB_SX_NG_MATERIAL.CTR_CD,PLAN_ID_SUDUNG, M090.M_NAME, SUM(TOTAL_IN_QTY) AS RETURN_IQC   
FROM ZTB_SX_NG_MATERIAL 
LEFT JOIN M090 ON M090.CTR_CD=  ZTB_SX_NG_MATERIAL.CTR_CD AND M090.M_CODE=  ZTB_SX_NG_MATERIAL.M_CODE 
WHERE LIEUQL_SX = 1 AND ZTB_SX_NG_MATERIAL.CTR_CD ='${DATA.CTR_CD}'  
GROUP BY ZTB_SX_NG_MATERIAL.CTR_CD,PLAN_ID_SUDUNG, M090.M_NAME
),
II AS (
SELECT ZTB_SX_NG_MATERIAL.CTR_CD,OUT_PLAN_ID, M090.M_NAME, SUM(TOTAL_IN_QTY) AS IQC_IN   
FROM ZTB_SX_NG_MATERIAL 
LEFT JOIN M090 ON M090.CTR_CD=  ZTB_SX_NG_MATERIAL.CTR_CD AND M090.M_CODE=  ZTB_SX_NG_MATERIAL.M_CODE 
WHERE LIEUQL_SX = 1 AND ZTB_SX_NG_MATERIAL.CTR_CD ='${DATA.CTR_CD}'  
GROUP BY ZTB_SX_NG_MATERIAL.CTR_CD,OUT_PLAN_ID, M090.M_NAME
)
, INSPECT_INPUT_TABLE AS 
( SELECT 
PLAN_ID, 
SUM(
CAST(INPUT_QTY_EA as float)
) AS INS_INPUT,
CTR_CD 
FROM 
ZTBINSPECTINPUTTB 
WHERE CTR_CD='${DATA.CTR_CD}'
GROUP BY 
PLAN_ID, CTR_CD),
INSPECT_OUTPUT_TABLE AS 
(SELECT 
PLAN_ID, 
SUM(
CAST(OUTPUT_QTY_EA as float)
) AS INS_OUTPUT,
CTR_CD 
FROM 
ZTBINSPECTOUTPUTTB 
WHERE SORTING='N' AND CTR_CD='${DATA.CTR_CD}'
GROUP BY 
PLAN_ID, CTR_CD),
INSPECT_NK_TABLE AS
( SELECT 
PLAN_ID, 
SUM(
CAST((INSPECT_TOTAL_QTY-ERR32) as float)
) AS INSPECT_TOTAL_QTY, 
SUM(
CAST(INSPECT_OK_QTY as float)
) AS INSPECT_OK_QTY, 
SUM(
CAST(
  (
    ERR4 + ERR5 + ERR6 + ERR7 + ERR8 + ERR9 + ERR10 + ERR11 + ERR12 + ERR13 + ERR14 + ERR15 + ERR16 + ERR17 + ERR18 + ERR19 + ERR20 + ERR21 + ERR22 + ERR23 + ERR24 + ERR25 + ERR26 + ERR27 + ERR28 + ERR29 + ERR30 + ERR31
  ) as float
)
) AS INSPECT_TOTAL_NG , 
SUM(ERR4+ERR5+ERR6+ERR7+ERR8+ERR9+ERR10+ERR11) AS INSPECT_MATERIAL_NG, SUM(ERR12+ERR13+ERR14+ERR15+ERR16+ERR17+ERR18+ERR19+ERR20+ERR21+ERR22+ERR23+ERR24+ERR25+ERR26+ERR27+ERR28+ERR29+ERR30+ERR31) AS INSPECT_PROCESS_NG, SUM(ERR32) AS SX_MARKING_QTY, SUM(ERR1) AS LOSS_THEM_TUI,SUM(ERR1+ ERR2+ERR3) AS INSPECT_LOSS_QTY,
CTR_CD
FROM 
ZTBINSPECTNGTB 
WHERE CTR_CD='${DATA.CTR_CD}'
GROUP BY 
PLAN_ID, CTR_CD),
PROCESS_TB AS
  (
  SELECT G_CODE,
  CASE WHEN EQ4 <> 'NA' AND EQ4 <> 'NO' AND EQ4 is not null AND EQ4 <> '' THEN 4 
  WHEN EQ3 <> 'NA' AND EQ3 <> 'NO' AND EQ3 is not null AND EQ3 <> ''  THEN 3
  WHEN EQ2 <> 'NA' AND EQ2 <> 'NO' AND EQ2 is not null AND EQ2 <> ''  THEN 2 
  ELSE 1 END AS MAX_PROCESS_NUMBER,
  CTR_CD
  FROM M100
  WHERE CTR_CD='${DATA.CTR_CD}'
)
SELECT 
CASE WHEN P400.CODE_55 = '04' THEN 'SAMPLE' ELSE 'MASS' END AS PHAN_LOAI, 
ZTB_QLSXPLAN.G_CODE, 
ZTB_QLSXPLAN.PLAN_ID, 
ZTB_QLSXPLAN.PLAN_DATE, 
ZTB_QLSXPLAN.PROD_REQUEST_NO, 
M100.G_NAME, 
M100.G_NAME_KD,
isnull(
CASE WHEN ZTB_QLSXPLAN.PROCESS_NUMBER = 1 THEN (ZTB_QLSXPLAN.PLAN_QTY* ZTB_SX_RESULT.PD*1.0/ZTB_SX_RESULT.CAVITY/1000*(1+ZTB_DM_HISTORY.LOSS_SX1/100) + ZTB_DM_HISTORY.LOSS_SETTING1)  
WHEN ZTB_QLSXPLAN.PROCESS_NUMBER = 2 THEN (ZTB_QLSXPLAN.PLAN_QTY* ZTB_SX_RESULT.PD*1.0/ZTB_SX_RESULT.CAVITY/1000*(1+ZTB_DM_HISTORY.LOSS_SX2/100) + ZTB_DM_HISTORY.LOSS_SETTING2)
WHEN ZTB_QLSXPLAN.PROCESS_NUMBER = 3 THEN (ZTB_QLSXPLAN.PLAN_QTY* ZTB_SX_RESULT.PD*1.0/ZTB_SX_RESULT.CAVITY/1000*(1+ZTB_DM_HISTORY.LOSS_SX3/100) + ZTB_DM_HISTORY.LOSS_SETTING3)
WHEN ZTB_QLSXPLAN.PROCESS_NUMBER = 4 THEN (ZTB_QLSXPLAN.PLAN_QTY* ZTB_SX_RESULT.PD*1.0/ZTB_SX_RESULT.CAVITY/1000*(1+ZTB_DM_HISTORY.LOSS_SX4/100) + ZTB_DM_HISTORY.LOSS_SETTING4)
ELSE ZTB_QLSXPLAN.PLAN_QTY* ZTB_SX_RESULT.PD*1.0/ZTB_SX_RESULT.CAVITY/1000 END,0) AS PLAN_TARGET_MET
,
ZTB_QLSXPLAN.PLAN_QTY, 
ZTB_QLSXPLAN.PLAN_QTY* ZTB_SX_RESULT.PD*1.0/ZTB_SX_RESULT.CAVITY/1000 AS PLAN_ORG_MET,  
M100.EQ1, 
M100.EQ2, 
ZTB_QLSXPLAN.PLAN_EQ, 
ZTB_QLSXPLAN.PLAN_FACTORY, 
ZTB_QLSXPLAN.PROCESS_NUMBER, 
ZTB_QLSXPLAN.STEP, 
isnull(isnull(WAREHOUSE_OUT.M_NAME, AA.M_NAME),BB.M_NAME) AS M_NAME, 
isnull(WAREHOUSE_OUT.WAREHOUSE_OUTPUT_QTY, 0) AS WAREHOUSE_OUTPUT_QTY,
isnull(EE.NEXT_IN_QTY,0) AS NEXT_IN_QTY,
isnull(II.IQC_IN,0) AS IQC_IN,
CASE WHEN PROCESS_NUMBER =1 THEN  (isnull(WAREHOUSE_OUT.WAREHOUSE_OUTPUT_QTY, 0)+ isnull(EE.NEXT_IN_QTY,0) - isnull(BB.INPUT_QTY * 1.000, isnull(AA.INPUT_QTY * 1.00000,0))) ELSE 0 END AS NOT_BEEP_QTY,
isnull(HH.RETURN_IQC,0) AS RETURN_IQC,
isnull(BB.INPUT_QTY * 1.000, isnull(AA.INPUT_QTY * 1.00000,0)) AS BEEP_QTY,	 
isnull(BB.REMAIN_QTY, 0) AS REMAIN_QTY,
(isnull(BB.INPUT_QTY * 1.00000, isnull(AA.INPUT_QTY * 1.00000,0)) - isnull(BB.REMAIN_QTY, 0)) AS USED_QTY,
isnull(GG.LOCK_QTY,0) AS LOCK_QTY,
isnull(FF.TON_KHO_AO,0) AS TON_KHO_AO,
isnull(DD.NEXT_OUT_QTY,0) AS NEXT_OUT_QTY,
isnull(CC.RETURN_QTY, 0) AS RETURN_QTY,  
isnull(ZTB_SX_RESULT.NG_MET,0) AS NG_MET, 
ZTB_SX_RESULT.SETTING_MET, 
ZTB_SX_RESULT.PD, 
ZTB_SX_RESULT.CAVITY, 
CASE WHEN ZTB_QLSXPLAN.PROCESS_NUMBER = 1 THEN M100.LOSS_SETTING1 WHEN ZTB_QLSXPLAN.PROCESS_NUMBER = 2 THEN M100.LOSS_SETTING2 WHEN ZTB_QLSXPLAN.PROCESS_NUMBER = 3 THEN M100.LOSS_SETTING3 WHEN ZTB_QLSXPLAN.PROCESS_NUMBER = 4 THEN M100.LOSS_SETTING4 ELSE 0 END AS SETTING_MET_TC, 
CASE WHEN ZTB_QLSXPLAN.PROCESS_NUMBER = 1 THEN M100.LOSS_ST_SX1 WHEN ZTB_QLSXPLAN.PROCESS_NUMBER = 2 THEN M100.LOSS_ST_SX2 WHEN ZTB_QLSXPLAN.PROCESS_NUMBER = 3 THEN M100.LOSS_ST_SX3 WHEN ZTB_QLSXPLAN.PROCESS_NUMBER = 4 THEN M100.LOSS_ST_SX4 ELSE 0 END AS SETTING_DM_SX, 
isnull(WAREHOUSE_OUT.WAREHOUSE_OUTPUT_QTY, 0) *1.0/ ZTB_SX_RESULT.PD * ZTB_SX_RESULT.CAVITY * 1000 AS WAREHOUSE_ESTIMATED_QTY, 
((isnull(BB.INPUT_QTY * 1.00000, AA.INPUT_QTY * 1.00000) - isnull(BB.REMAIN_QTY, 0))*1.0)/ ZTB_SX_RESULT.PD * ZTB_SX_RESULT.CAVITY * 1000 AS ESTIMATED_QTY, 
((isnull(BB.INPUT_QTY * 1.00000, AA.INPUT_QTY * 1.00000) - isnull(BB.REMAIN_QTY, 0))*1.0)/ ZTB_SX_RESULT.PD * ZTB_SX_RESULT.CAVITY * 1000AS ESTIMATED_QTY_ST,
ZTB_SX_RESULT.SETTING_MET *1.0/ ZTB_SX_RESULT.PD * ZTB_SX_RESULT.CAVITY * 1000 AS SETTING_EA, 
isnull(ZTB_SX_RESULT.NG_MET,0)/ ZTB_SX_RESULT.PD * ZTB_SX_RESULT.CAVITY * 1000 AS NG_EA,
CAST(ZTB_SX_RESULT.SX_RESULT AS float) AS KETQUASX, 
CASE WHEN PROCESS_TB.MAX_PROCESS_NUMBER =ZTB_QLSXPLAN.PROCESS_NUMBER AND ZTB_QLSXPLAN.STEP =0 THEN  CAST(ZTB_SX_RESULT.SX_RESULT AS float) ELSE 0 END AS KETQUASX_TP,
INSPECT_INPUT_TABLE.INS_INPUT, 
INSPECT_NK_TABLE.INSPECT_TOTAL_QTY, 
INSPECT_NK_TABLE.INSPECT_OK_QTY,
INSPECT_NK_TABLE.INSPECT_MATERIAL_NG, 
INSPECT_NK_TABLE.INSPECT_PROCESS_NG, 
INSPECT_NK_TABLE.INSPECT_TOTAL_NG, 
INSPECT_NK_TABLE.SX_MARKING_QTY, 
INSPECT_NK_TABLE.LOSS_THEM_TUI, 
INSPECT_NK_TABLE.INSPECT_LOSS_QTY, 
INSPECT_OUTPUT_TABLE.INS_OUTPUT, 
ZTB_SX_RESULT.SETTING_START_TIME, 
ZTB_SX_RESULT.MASS_START_TIME, 
ZTB_SX_RESULT.MASS_END_TIME, 
ZTB_SX_RESULT.RPM, 
ZTB_SX_RESULT.EQ_NAME AS EQ_NAME_TT, 
SUBSTRING(ZTB_SX_RESULT.EQ_NAME, 1, 2) AS MACHINE_NAME,
ZTB_SX_RESULT.SX_DATE, 
ZTB_SX_RESULT.WORK_SHIFT, 
ZTB_SX_RESULT.INS_EMPL, 
ZTB_SX_EFFICIENCY.FACTORY, 
ZTB_SX_EFFICIENCY.BOC_KIEM, 
ZTB_SX_EFFICIENCY.LAY_DO, 
ZTB_SX_EFFICIENCY.MAY_HONG, 
ZTB_SX_EFFICIENCY.DAO_NG, 
ZTB_SX_EFFICIENCY.CHO_LIEU, 
ZTB_SX_EFFICIENCY.CHO_BTP, 
ZTB_SX_EFFICIENCY.HET_LIEU, 
ZTB_SX_EFFICIENCY.LIEU_NG, 
ZTB_SX_EFFICIENCY.CAN_HANG, 
ZTB_SX_EFFICIENCY.HOP_FL, 
ZTB_SX_EFFICIENCY.CHO_QC, 
ZTB_SX_EFFICIENCY.CHOT_BAOCAO, 
ZTB_SX_EFFICIENCY.CHUYEN_CODE, 
ZTB_SX_EFFICIENCY.KHAC, 
ZTB_SX_EFFICIENCY.REMARK,
ZTB_QLSXPLAN.NEEDED_QTY,
ZTB_QLSXPLAN.CURRENT_LOSS_SX,
ZTB_QLSXPLAN.CURRENT_LOSS_KT,
ZTB_QLSXPLAN.CURRENT_SETTING_M
FROM 
ZTB_QLSXPLAN 
LEFT JOIN AA ON (AA.PLAN_ID_SUDUNG= ZTB_QLSXPLAN.PLAN_ID AND AA.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
LEFT JOIN BB ON (BB.PLAN_ID= ZTB_QLSXPLAN.PLAN_ID AND BB.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
LEFT JOIN CC ON (CC.PLAN_ID_INPUT= ZTB_QLSXPLAN.PLAN_ID AND CC.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
LEFT JOIN DD ON (DD.PLAN_ID_INPUT= ZTB_QLSXPLAN.PLAN_ID AND DD.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
LEFT JOIN EE ON (EE.PLAN_ID_SUDUNG= ZTB_QLSXPLAN.PLAN_ID AND EE.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
LEFT JOIN FF ON (FF.PLAN_ID_INPUT= ZTB_QLSXPLAN.PLAN_ID AND FF.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
LEFT JOIN GG ON (GG.PLAN_ID_INPUT= ZTB_QLSXPLAN.PLAN_ID AND GG.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
LEFT JOIN HH ON (HH.PLAN_ID_SUDUNG= ZTB_QLSXPLAN.PLAN_ID AND HH.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
LEFT JOIN II ON (II.OUT_PLAN_ID= ZTB_QLSXPLAN.PLAN_ID AND II.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
LEFT JOIN WAREHOUSE_OUT ON (WAREHOUSE_OUT.PLAN_ID_INPUT= ZTB_QLSXPLAN.PLAN_ID AND WAREHOUSE_OUT.CTR_CD = ZTB_QLSXPLAN.CTR_CD) 
LEFT JOIN ZTB_SX_RESULT ON (ZTB_SX_RESULT.PLAN_ID = ZTB_QLSXPLAN.PLAN_ID AND ZTB_SX_RESULT.CTR_CD = ZTB_QLSXPLAN.CTR_CD) 
LEFT JOIN  INSPECT_INPUT_TABLE ON(ZTB_QLSXPLAN.PLAN_ID = INSPECT_INPUT_TABLE.PLAN_ID AND ZTB_QLSXPLAN.CTR_CD = INSPECT_INPUT_TABLE.CTR_CD) 
LEFT JOIN INSPECT_OUTPUT_TABLE ON (ZTB_QLSXPLAN.PLAN_ID = INSPECT_OUTPUT_TABLE.PLAN_ID AND ZTB_QLSXPLAN.CTR_CD = INSPECT_OUTPUT_TABLE.CTR_CD) 
LEFT JOIN  INSPECT_NK_TABLE ON (ZTB_QLSXPLAN.PLAN_ID = INSPECT_NK_TABLE.PLAN_ID AND ZTB_QLSXPLAN.CTR_CD = INSPECT_NK_TABLE.CTR_CD) 
LEFT JOIN M100 ON (M100.G_CODE = ZTB_QLSXPLAN.G_CODE AND M100.CTR_CD = ZTB_QLSXPLAN.CTR_CD) 
LEFT JOIN PROCESS_TB ON (PROCESS_TB.G_CODE = ZTB_QLSXPLAN.G_CODE AND PROCESS_TB.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
LEFT JOIN ZTB_SX_EFFICIENCY ON (ZTB_QLSXPLAN.PLAN_ID = ZTB_SX_EFFICIENCY.PLAN_ID AND ZTB_QLSXPLAN.CTR_CD = ZTB_SX_EFFICIENCY.CTR_CD) 
LEFT JOIN P400 ON (P400.PROD_REQUEST_NO = ZTB_QLSXPLAN.PROD_REQUEST_NO AND P400.CTR_CD = ZTB_QLSXPLAN.CTR_CD) 
LEFT JOIN ZTB_DM_HISTORY ON (ZTB_QLSXPLAN.PROD_REQUEST_NO= ZTB_DM_HISTORY.PROD_REQUEST_NO AND ZTB_QLSXPLAN.CTR_CD = ZTB_DM_HISTORY.CTR_CD)
${condition} AND ZTB_QLSXPLAN.CTR_CD='${DATA.CTR_CD}'
ORDER BY 
ZTB_QLSXPLAN.PLAN_ID DESC
`;
  //console.log(setpdQuery)
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.nhapkhoao = async (req, res, DATA) => {
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let checkkq = "OK";
  let setpdQuery = `INSERT INTO IN_KHO_SX (CTR_CD,FACTORY,PHANLOAI,PLAN_ID_INPUT, PLAN_ID_SUDUNG, M_CODE,M_LOT_NO,ROLL_QTY,IN_QTY,TOTAL_IN_QTY,USE_YN,FSC, FSC_MCODE, FSC_GCODE,INS_DATE,INS_EMPL,UPD_DATE,UPD_EMPL) VALUES ('${DATA.CTR_CD}','${DATA.FACTORY}','${DATA.PHANLOAI}', ${DATA.PLAN_ID_INPUT !== null ? "'" + DATA.PLAN_ID_INPUT + "'" : null},${DATA.PLAN_ID_SUDUNG !== null ? "'" + DATA.PLAN_ID_SUDUNG + "'" : null}, '${DATA.M_CODE}','${DATA.M_LOT_NO}','${DATA.ROLL_QTY}','${DATA.IN_QTY}','${DATA.TOTAL_IN_QTY}','${DATA.USE_YN}', '${DATA.FSC}','${DATA.FSC_MCODE}','${DATA.FSC_GCODE}',GETDATE(), '${EMPL_NO}', GETDATE(),'${EMPL_NO}')`;
  //${moment().format('YYYY-MM-DD')}
  console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.resetKhoSX_IQC1 = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `UPDATE IN_KHO_SX SET USE_YN='X', REMARK ='TRA_IQC' WHERE PLAN_ID_INPUT='${DATA.PLAN_ID}' AND M_LOT_NO='${DATA.M_LOT_NO}' AND CTR_CD='${DATA.CTR_CD}'`;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  setpdQuery = `UPDATE OUT_KHO_SX SET USE_YN='X', REMARK ='TRA_IQC' WHERE PLAN_ID_OUTPUT='${DATA.PLAN_ID}' AND M_LOT_NO='${DATA.M_LOT_NO}' AND CTR_CD='${DATA.CTR_CD}' `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.resetKhoSX_IQC2 = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `UPDATE IN_KHO_SX SET USE_YN='X', REMARK ='TRA_IQC' WHERE PLAN_ID_SUDUNG='${DATA.PLAN_ID}' AND M_LOT_NO='${DATA.M_LOT_NO}' AND CTR_CD='${DATA.CTR_CD}'`;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  setpdQuery = `UPDATE OUT_KHO_SX SET USE_YN='X', REMARK ='TRA_IQC' WHERE PLAN_ID_OUTPUT='${DATA.PLAN_ID}' AND M_LOT_NO='${DATA.M_LOT_NO}' AND CTR_CD='${DATA.CTR_CD}' `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};

exports.updateLOT_SX_STATUS = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `UPDATE P501 SET P501.LOT_STATUS='${DATA.LOT_STATUS}' WHERE P501.PROCESS_LOT_NO='${DATA.PROCESS_LOT_NO}' AND P501.CTR_CD='${DATA.CTR_CD}'`;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery); 
  res.send(checkkq);
};
exports.loadtiledat = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = `WHERE P400.CODE_55 <> '04'  AND SX_DATE ='${DATA.PLAN_DATE}'`
  if (DATA.FACTORY !== 'ALL')
    condition += ` AND ZTB_SX_RESULT.FACTORY = '${DATA.FACTORY}' `;
  let conditionEQ = ``;
  if (DATA.MACHINE !== 'ALL')
    conditionEQ = `WHERE SUBSTRING(SUMARRYTB.EQ_NAME,1,2) = '${DATA.MACHINE}'`;
  let setpdQuery = `  
  WITH KQSXTB AS
  (
  SELECT ZTB_SX_RESULT.CTR_CD,ZTB_QLSXPLAN.STEP, ZTB_SX_RESULT.WORK_SHIFT, ZTB_QLSXPLAN.PROD_REQUEST_NO, ZTB_SX_RESULT.EQ_NAME, ZTB_QLSXPLAN.PLAN_QTY, isnull(ZTB_SX_RESULT.SX_RESULT,0) AS SX_RESULT FROM ZTB_SX_RESULT
  LEFT JOIN ZTB_QLSXPLAN ON (ZTB_QLSXPLAN.PLAN_ID = ZTB_SX_RESULT.PLAN_ID AND ZTB_QLSXPLAN.CTR_CD = ZTB_SX_RESULT.CTR_CD)
  LEFT JOIN P400 ON (P400.PROD_REQUEST_NO = ZTB_QLSXPLAN.PROD_REQUEST_NO AND P400.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
   ${condition} AND ZTB_SX_RESULT.CTR_CD='${DATA.CTR_CD}'
  ),
  PLAN_TB AS 
  (
  SELECT * FROM 
  (
    SELECT STEP, WORK_SHIFT, PROD_REQUEST_NO, EQ_NAME, CTR_CD, SUM(PLAN_QTY) AS PLAN_QTY FROM  KQSXTB GROUP BY WORK_SHIFT, PROD_REQUEST_NO, EQ_NAME, STEP, CTR_CD
  ) as src
  PIVOT
  (
    SUM(PLAN_QTY) FOR
    WORK_SHIFT IN ([DAY],[NIGHT])
  ) as pvtb
  ),
  RESULT_TB AS
  (
  SELECT * FROM 
  (
    SELECT STEP, WORK_SHIFT, PROD_REQUEST_NO, EQ_NAME, CTR_CD, SUM(SX_RESULT) AS SX_RESULT  FROM  KQSXTB GROUP BY WORK_SHIFT, PROD_REQUEST_NO, EQ_NAME, STEP, CTR_CD
  ) as src
  PIVOT
  (
    SUM(SX_RESULT) FOR
    WORK_SHIFT IN ([DAY],[NIGHT])
  ) as pvtb
  ),
  SUMARRYTB AS 
  (
  SELECT PLAN_TB.EQ_NAME, PLAN_TB.PROD_REQUEST_NO, PLAN_TB.STEP, PLAN_TB.CTR_CD, isnull(PLAN_TB.DAY,0) AS PLAN_DAY, isnull(PLAN_TB.NIGHT,0) AS PLAN_NIGHT, (isnull(PLAN_TB.DAY,0) +isnull(PLAN_TB.NIGHT,0) ) AS PLAN_TOTAL,  isnull(RESULT_TB.DAY,0) AS RESULT_DAY, isnull(RESULT_TB.NIGHT,0) AS RESULT_NIGHT, (isnull(RESULT_TB.DAY,0) + isnull(RESULT_TB.NIGHT,0)) AS RESULT_TOTAL,
  CASE WHEN isnull(PLAN_TB.DAY,0) = 0 THEN 0 ELSE isnull(RESULT_TB.DAY,0)*1.0/isnull(PLAN_TB.DAY,0)*100 END AS DAY_RATE,
  CASE WHEN isnull(PLAN_TB.NIGHT,0) = 0 THEN 0 ELSE isnull(RESULT_TB.NIGHT,0)*1.0/isnull(PLAN_TB.NIGHT,0)*100 END AS NIGHT_RATE,
  CASE WHEN (isnull(PLAN_TB.DAY,0) +isnull(PLAN_TB.NIGHT,0) ) = 0 THEN 0 ELSE (isnull(RESULT_TB.DAY,0) + isnull(RESULT_TB.NIGHT,0))*1.0/(isnull(PLAN_TB.DAY,0) +isnull(PLAN_TB.NIGHT,0))*100 END AS TOTAL_RATE
  FROM PLAN_TB 
  LEFT JOIN RESULT_TB ON (PLAN_TB.PROD_REQUEST_NO = RESULT_TB.PROD_REQUEST_NO AND PLAN_TB.EQ_NAME = RESULT_TB.EQ_NAME AND PLAN_TB.CTR_CD = RESULT_TB.CTR_CD)
  )
  SELECT SUMARRYTB.EQ_NAME, SUMARRYTB.PROD_REQUEST_NO, M100.G_NAME_KD, SUMARRYTB.STEP, SUMARRYTB.PLAN_DAY, SUMARRYTB.PLAN_NIGHT, SUMARRYTB.PLAN_TOTAL, SUMARRYTB.RESULT_DAY, SUMARRYTB.RESULT_NIGHT, SUMARRYTB.RESULT_TOTAL, SUMARRYTB.DAY_RATE, SUMARRYTB.NIGHT_RATE, SUMARRYTB.TOTAL_RATE  FROM SUMARRYTB 
  LEFT JOIN P400 ON (P400.PROD_REQUEST_NO = SUMARRYTB.PROD_REQUEST_NO AND P400.CTR_CD = SUMARRYTB.CTR_CD)
  LEFT JOIN M100 ON (P400.G_CODE = M100.G_CODE AND P400.CTR_CD = M100.CTR_CD)
  ${conditionEQ}
  WHERE SUMARRYTB.CTR_CD='${DATA.CTR_CD}'
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.getdatadinhmuc_G_CODE = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `SELECT * FROM M100 WHERE CTR_CD='${DATA.CTR_CD}' AND G_CODE='${DATA.G_CODE}'`;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.ycsxbalanceleadtimedata = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `SELECT * FROM 
    (SELECT TONYCSX_TABLE.PROD_REQUEST_NO, TONYCSX_TABLE.PROD_REQUEST_QTY, TONYCSX_TABLE.G_CODE,TONYCSX_TABLE.G_NAME, TONYCSX_TABLE.Setting1 ,TONYCSX_TABLE.Setting2, TONYCSX_TABLE.UPH1, TONYCSX_TABLE.UPH2, TONYCSX_TABLE.TON_CD1, TONYCSX_TABLE.TON_CD2, TONYCSX_TABLE.EQ1, TONYCSX_TABLE.EQ2, (TONYCSX_TABLE.Setting1 + TONYCSX_TABLE.TON_CD1/TONYCSX_TABLE.UPH1*60) AS LEATIME1, CASE WHEN TONYCSX_TABLE.EQ2 IN ('FR','SR','DC','ED') THEN (TONYCSX_TABLE.Setting2 + TONYCSX_TABLE.TON_CD2/TONYCSX_TABLE.UPH2*60) ELSE 0 END AS LEATIME2  FROM 
    (
    SELECT P400.PROD_REQUEST_NO, P400.CTR_CD, M100.G_CODE, M100.G_NAME,P400.PROD_REQUEST_QTY, isnull(KQSXTB.CD1,0) AS CD1, isnull(KQSXTB.CD2,0) AS CD2, 
    CASE WHEN P400.PROD_REQUEST_QTY- isnull(KQSXTB.CD1,0) >=0 THEN P400.PROD_REQUEST_QTY- isnull(KQSXTB.CD1,0) ELSE 0 END AS TON_CD1,
    CASE WHEN CAPA_TB.EQ2 IN ('FR','SR','DC','ED') THEN 
    CASE WHEN P400.PROD_REQUEST_QTY- isnull(KQSXTB.CD2,0) >=0 THEN P400.PROD_REQUEST_QTY- isnull(KQSXTB.CD2,0) ELSE 0 END 
    ELSE 0 END TON_CD2,
    CAPA_TB.FACTORY, CAPA_TB.EQ1, CAPA_TB.EQ2,  CAPA_TB.Setting1, CAPA_TB.Setting2, CAPA_TB.UPH1, CAPA_TB.UPH2, CAPA_TB.Step1, CAPA_TB.Step2  FROM P400
    LEFT JOIN 
    ((SELECT PVTB.PROD_REQUEST_NO, PVTB.CTR_CD, isnull(PVTB.[1],0) AS CD1, isnull(PVTB.[2],0) AS CD2 FROM 
    (
        SELECT ZTB_QLSXPLAN.PROD_REQUEST_NO, ZTB_QLSXPLAN.CTR_CD, ZTB_QLSXPLAN.PROCESS_NUMBER, SUM(isnull(SX_RESULT,0)) AS KETQUASX FROM ZTB_SX_RESULT LEFT JOIN ZTB_QLSXPLAN ON (ZTB_QLSXPLAN.PLAN_ID = ZTB_SX_RESULT.PLAN_ID AND ZTB_QLSXPLAN.CTR_CD = ZTB_SX_RESULT.CTR_CD) WHERE ZTB_QLSXPLAN.STEP=0 GROUP BY ZTB_QLSXPLAN.PROD_REQUEST_NO, ZTB_QLSXPLAN.CTR_CD, ZTB_QLSXPLAN.PROCESS_NUMBER
    )
    AS PV
    PIVOT
    ( 
    SUM(PV.KETQUASX) FOR PV.PROCESS_NUMBER IN ([1],[2])
    ) 
    AS PVTB)) AS KQSXTB ON (P400.PROD_REQUEST_NO = KQSXTB.PROD_REQUEST_NO AND P400.CTR_CD = KQSXTB.CTR_CD)
    LEFT JOIN 
    (
    SELECT G_CODE, G_NAME, CTR_CD, FACTORY, EQ1, EQ2, Setting1, Setting2, UPH1, UPH2, Step1, Step2 FROM M100 WHERE FACTORY IN ('NM1','NM2') AND EQ1 IN('FR','SR','DC','ED') AND Setting1 is not null AND Setting1 <>0 AND UPH1 is not null AND UPH1 <>0 AND ((EQ2 IN ('FR','SR','DC','ED') AND Setting2 is not null AND Setting2 <>0 AND UPH2 is not null AND UPH2 <>0) OR (EQ2 NOT IN ('FR','SR','DC','ED')))
    ) AS CAPA_TB
    ON(CAPA_TB.G_CODE = P400.G_CODE AND CAPA_TB.CTR_CD = P400.CTR_CD)
    LEFT JOIN M100 ON (P400.G_CODE = M100.G_CODE AND P400.CTR_CD = M100.CTR_CD)
    WHERE PROD_REQUEST_DATE > '20230101' AND P400.CODE_55 <> '04' AND P400.CTR_CD='${DATA.CTR_CD}'
    ) AS TONYCSX_TABLE
    ) AS YCSXCAPATB
    ORDER BY YCSXCAPATB.LEATIME1 DESC, YCSXCAPATB.LEATIME2 DESC`;
  //console.log(setpdQuery);
  //checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  checkkq = { tk_status: 'NG', message: ' tam thoi dung' }
  res.send(checkkq);
};
exports.checkEQ_STATUS = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `WITH DMTB AS
  (
    SELECT  PLAN_FACTORY, PLAN_DATE, ZTB_QLSXPLAN.G_CODE, PLAN_EQ, PLAN_ORDER, PLAN_ID, PLAN_QTY, 
    CASE 
    WHEN IS_SETTING = 'Y' AND SUBSTRING(PLAN_EQ,1,2) = M100.EQ1 THEN isnull(M100.Setting1,9999)
    WHEN IS_SETTING = 'Y' AND SUBSTRING(PLAN_EQ,1,2) = M100.EQ2 THEN isnull(M100.Setting2,9999)
    WHEN IS_SETTING = 'Y' AND SUBSTRING(PLAN_EQ,1,2) = M100.EQ3 THEN isnull(M100.Setting3,9999)
    WHEN IS_SETTING = 'Y' AND SUBSTRING(PLAN_EQ,1,2) = M100.EQ4 THEN isnull(M100.Setting4,9999)
    ELSE 0
    END AS SETTING_TIME,
    CASE 
    WHEN SUBSTRING(PLAN_EQ,1,2) = M100.EQ1 THEN isnull(CASE WHEN M100.UPH1 =0 THEN 1 ELSE M100.UPH1 END,1)
    WHEN SUBSTRING(PLAN_EQ,1,2) = M100.EQ2 THEN isnull(CASE WHEN M100.UPH2 =0 THEN 1 ELSE M100.UPH2 END,1)
    WHEN SUBSTRING(PLAN_EQ,1,2) = M100.EQ3 THEN isnull(CASE WHEN M100.UPH3 =0 THEN 1 ELSE M100.UPH3 END,1)
    WHEN SUBSTRING(PLAN_EQ,1,2) = M100.EQ4 THEN isnull(CASE WHEN M100.UPH4 =0 THEN 1 ELSE M100.UPH4 END,1)
    ELSE 1
    END AS UPH,
    ZTB_QLSXPLAN.CTR_CD
    FROM ZTB_QLSXPLAN
    LEFT JOIN M100 ON (M100.G_CODE = ZTB_QLSXPLAN.G_CODE AND M100.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
    LEFT JOIN P400 ON (P400.PROD_REQUEST_NO = ZTB_QLSXPLAN.PROD_REQUEST_NO AND P400.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
  WHERE PLAN_EQ is not null AND PLAN_DATE = CAST(GETDATE() AS date) AND ZTB_QLSXPLAN.CTR_CD='${DATA.CTR_CD}'
  ),
  NEXTB AS
  (
  SELECT PLAN_FACTORY, PLAN_DATE, G_CODE, PLAN_EQ, PLAN_ORDER, PLAN_ID, PLAN_QTY, SETTING_TIME, UPH, (SETTING_TIME + PLAN_QTY*1.0/UPH*60) AS LEADTIME, CTR_CD FROM DMTB
  ),
  LEATIMETB AS
  (
  SELECT PLAN_FACTORY, PLAN_DATE, PLAN_EQ, PLAN_ORDER, PLAN_ID, PLAN_QTY, LEADTIME, SUM(LEADTIME) OVER (PARTITION BY PLAN_FACTORY, PLAN_EQ ORDER BY PLAN_ORDER ASC) AS ACC_TIME, CTR_CD FROM NEXTB
  ),
  LTEQ AS
  (
  SELECT PLAN_FACTORY, PLAN_EQ,  MAX(ACC_TIME) AS ACC_TIME, CTR_CD FROM LEATIMETB GROUP BY PLAN_FACTORY,PLAN_EQ,CTR_CD
  )
  SELECT 
            ZTB_QLSXPLAN.STEP, 
            M100.G_NAME_KD, 
            M100.G_NAME, 
            M100.UPH1,
            M100.UPH2,
            M100.UPH3,
            M100.UPH4,
            M100.Setting1,
            M100.Setting2,
            M100.Setting3,
            M100.Setting4,
            ZTB_SX_EQ_STATUS.FACTORY, 
            ZTB_SX_EQ_STATUS.EQ_NAME, 
            ZTB_SX_EQ_STATUS.EQ_OP, 
            SUBSTRING(ZTB_SX_EQ_STATUS.EQ_NAME, 1, 2) AS EQ_SERIES, 
            ZTB_SX_EQ_STATUS.EQ_ACTIVE, 
            ZTB_SX_EQ_STATUS.REMARK, 
            ZTB_SX_EQ_STATUS.EQ_STATUS, 
            ZTB_SX_EQ_STATUS.CURR_PLAN_ID, 
            ZTB_SX_EQ_STATUS.CURR_G_CODE, 
            ZTB_SX_EQ_STATUS.INS_EMPL, 
            ZTB_SX_EQ_STATUS.INS_DATE, 
            ZTB_SX_EQ_STATUS.UPD_EMPL, 
            ZTB_SX_EQ_STATUS.UPD_DATE, 
            ZTB_SX_EQ_STATUS.EQ_CODE,
            ZTB_SX_RESULT.SETTING_START_TIME,
            ZTB_SX_RESULT.MASS_START_TIME,
            ZTB_SX_RESULT.MASS_END_TIME,  
            ZTB_QLSXPLAN.KQ_SX_TAM,
            ZTB_SX_RESULT.SX_RESULT,
            ZTB_QLSXPLAN.PROCESS_NUMBER,
            ZTB_QLSXPLAN.PLAN_QTY,
        isnull(LTEQ.ACC_TIME,0) AS ACC_TIME
          FROM 
            ZTB_SX_EQ_STATUS 
            LEFT JOIN M100 ON (
              M100.G_CODE = ZTB_SX_EQ_STATUS.CURR_G_CODE AND M100.CTR_CD = ZTB_SX_EQ_STATUS.CTR_CD
            ) 
            LEFT JOIN ZTB_QLSXPLAN ON (
              ZTB_QLSXPLAN.PLAN_ID = ZTB_SX_EQ_STATUS.CURR_PLAN_ID AND ZTB_QLSXPLAN.CTR_CD = ZTB_SX_EQ_STATUS.CTR_CD
            ) 
            LEFT JOIN ZTB_SX_RESULT ON (ZTB_SX_RESULT.PLAN_ID = ZTB_SX_EQ_STATUS.CURR_PLAN_ID AND ZTB_SX_RESULT.CTR_CD = ZTB_SX_EQ_STATUS.CTR_CD)
        LEFT JOIN LTEQ ON (LTEQ.PLAN_FACTORY = ZTB_SX_EQ_STATUS.FACTORY AND LTEQ.PLAN_EQ = ZTB_SX_EQ_STATUS.EQ_NAME AND LTEQ.CTR_CD = ZTB_SX_EQ_STATUS.CTR_CD)
          WHERE ZTB_SX_EQ_STATUS.CTR_CD='${DATA.CTR_CD}'
          ORDER BY 
            FACTORY DESC, 
            EQ_NAME ASC`;
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.diemdanhallbp = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `DECLARE @tradate DATE SET @tradate='${moment().format(
    "YYYY-MM-DD"
  )}' SELECT ZTBEMPLINFO.EMPL_NO as id,ZTBEMPLINFO.EMPL_NO,CMS_ID,MIDLAST_NAME,FIRST_NAME,PHONE_NUMBER,SEX_NAME,WORK_STATUS_NAME,FACTORY_NAME,JOB_NAME,WORK_SHIF_NAME,ZTBEMPLINFO.WORK_POSITION_CODE, WORK_POSITION_NAME,SUBDEPTNAME,MAINDEPTNAME,REQUEST_DATE,ZTBOFFREGISTRATIONTB_1.APPLY_DATE,APPROVAL_STATUS,OFF_ID,CA_NGHI,ON_OFF,OVERTIME_INFO,OVERTIME, REASON_NAME, ZTBOFFREGISTRATIONTB_1.REMARK FROM ZTBEMPLINFO LEFT JOIN ZTBSEX ON (ZTBSEX.SEX_CODE = ZTBEMPLINFO.SEX_CODE AND ZTBSEX.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBWORKSTATUS ON(ZTBWORKSTATUS.WORK_STATUS_CODE = ZTBEMPLINFO.WORK_STATUS_CODE AND ZTBWORKSTATUS.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBFACTORY ON (ZTBFACTORY.FACTORY_CODE = ZTBEMPLINFO.FACTORY_CODE AND ZTBFACTORY.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBJOB ON (ZTBJOB.JOB_CODE = ZTBEMPLINFO.JOB_CODE AND ZTBJOB.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBPOSITION ON (ZTBPOSITION.POSITION_CODE = ZTBEMPLINFO.POSITION_CODE AND ZTBPOSITION.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBWORKSHIFT ON (ZTBWORKSHIFT.WORK_SHIFT_CODE = ZTBEMPLINFO.WORK_SHIFT_CODE AND ZTBWORKSHIFT.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBWORKPOSITION ON (ZTBWORKPOSITION.WORK_POSITION_CODE = ZTBEMPLINFO.WORK_POSITION_CODE AND ZTBWORKPOSITION.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBSUBDEPARTMENT ON (ZTBSUBDEPARTMENT.SUBDEPTCODE = ZTBWORKPOSITION.SUBDEPTCODE AND ZTBSUBDEPARTMENT.CTR_CD = ZTBWORKPOSITION.CTR_CD) LEFT JOIN ZTBMAINDEPARMENT ON (ZTBMAINDEPARMENT.MAINDEPTCODE = ZTBSUBDEPARTMENT.MAINDEPTCODE AND ZTBMAINDEPARMENT.CTR_CD = ZTBSUBDEPARTMENT.CTR_CD) LEFT JOIN ( SELECT * FROM ZTBOFFREGISTRATIONTB WHERE ZTBOFFREGISTRATIONTB.APPLY_DATE = @tradate ) AS ZTBOFFREGISTRATIONTB_1 ON (ZTBOFFREGISTRATIONTB_1.EMPL_NO = ZTBEMPLINFO.EMPL_NO AND ZTBOFFREGISTRATIONTB_1.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN (	SELECT * FROM ZTBATTENDANCETB WHERE APPLY_DATE= @tradate ) AS ZTBATTENDANCETB_1 ON (ZTBATTENDANCETB_1.EMPL_NO = ZTBEMPLINFO.EMPL_NO AND ZTBATTENDANCETB_1.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBREASON ON (ZTBREASON.REASON_CODE = ZTBOFFREGISTRATIONTB_1.REASON_CODE AND ZTBREASON.CTR_CD = ZTBOFFREGISTRATIONTB_1.CTR_CD) 
  WHERE ZTBMAINDEPARMENT.MAINDEPTCODE = ${DATA.MAINDEPTCODE
    }  AND JOB_NAME='Worker' AND ZTBEMPLINFO.WORK_STATUS_CODE <> 2 AND ZTBEMPLINFO.WORK_STATUS_CODE <> 0 AND ZTBEMPLINFO.CTR_CD='${DATA.CTR_CD}'`;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.capabydeliveryplan = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
  DECLARE @tradate date;
   set @tradate ='${DATA.PLAN_DATE}';           
   SELECT * FROM 
(		   
   SELECT XX.CTR_CD, XX.FACTORY, XX.EQ,
   CASE
   WHEN XX.LT = 'LT1' THEN @tradate
   WHEN XX.LT = 'LT2' THEN DATEADD(DAY, 1, @tradate)
   WHEN XX.LT = 'LT3' THEN DATEADD(DAY, 2, @tradate)
   WHEN XX.LT = 'LT4' THEN DATEADD(DAY, 3, @tradate)
   WHEN XX.LT = 'LT5' THEN DATEADD(DAY, 4, @tradate)
   WHEN XX.LT = 'LT6' THEN DATEADD(DAY, 5, @tradate)
   WHEN XX.LT = 'LT7' THEN DATEADD(DAY, 6, @tradate)
   WHEN XX.LT = 'LT8' THEN DATEADD(DAY, 7, @tradate)
WHEN XX.LT = 'LT9' THEN DATEADD(DAY, 8, @tradate)
WHEN XX.LT = 'LT10' THEN DATEADD(DAY, 9, @tradate)
WHEN XX.LT = 'LT11' THEN DATEADD(DAY, 10, @tradate)
WHEN XX.LT = 'LT12' THEN DATEADD(DAY, 11, @tradate)
WHEN XX.LT = 'LT13' THEN DATEADD(DAY, 12, @tradate)
WHEN XX.LT = 'LT14' THEN DATEADD(DAY, 13, @tradate)
WHEN XX.LT = 'LT15' THEN DATEADD(DAY, 14, @tradate)		   
   END AS PL_DATE
   , SUM(XX.LEATIME) AS LEADTIME FROM
   (
   SELECT upv.CTR_CD, upv.FACTORY, upv.EQ1 AS EQ,upv.G_CODE, upv.LT, upv.LEATIME FROM
   (
   SELECT M100.CTR_CD, M100.FACTORY, M100.EQ1, M100.G_CODE, ZTBPLANTB.PLAN_DATE,
  CASE WHEN ZTBPLANTB.D1 is null OR ZTBPLANTB.D1 =0 THEN 0 ELSE (ZTBPLANTB.D1*1.0/M100.UPH1*60*M100.Step1 + M100.Setting1)*1.2 END AS LT1,
  CASE WHEN ZTBPLANTB.D2 is null OR ZTBPLANTB.D2 =0 THEN 0 ELSE (ZTBPLANTB.D2*1.0/M100.UPH1*60*M100.Step1 + M100.Setting1)*1.2 END AS LT2,
  CASE WHEN ZTBPLANTB.D3 is null OR ZTBPLANTB.D3 =0 THEN 0 ELSE (ZTBPLANTB.D3*1.0/M100.UPH1*60*M100.Step1 + M100.Setting1)*1.2 END AS LT3,
  CASE WHEN ZTBPLANTB.D4 is null OR ZTBPLANTB.D4 =0 THEN 0 ELSE (ZTBPLANTB.D4*1.0/M100.UPH1*60*M100.Step1 + M100.Setting1)*1.2 END AS LT4,
  CASE WHEN ZTBPLANTB.D5 is null OR ZTBPLANTB.D5 =0 THEN 0 ELSE (ZTBPLANTB.D5*1.0/M100.UPH1*60*M100.Step1 + M100.Setting1)*1.2 END AS LT5,
  CASE WHEN ZTBPLANTB.D6 is null OR ZTBPLANTB.D6 =0 THEN 0 ELSE (ZTBPLANTB.D6*1.0/M100.UPH1*60*M100.Step1 + M100.Setting1)*1.2 END AS LT6,
  CASE WHEN ZTBPLANTB.D7 is null OR ZTBPLANTB.D7 =0 THEN 0 ELSE (ZTBPLANTB.D7*1.0/M100.UPH1*60*M100.Step1 + M100.Setting1)*1.2 END AS LT7,
  CASE WHEN ZTBPLANTB.D8 is null OR ZTBPLANTB.D8 =0 THEN 0 ELSE (ZTBPLANTB.D8*1.0/M100.UPH1*60*M100.Step1 + M100.Setting1)*1.2 END AS LT8,
  CASE WHEN ZTBPLANTB.D9 is null OR ZTBPLANTB.D9 =0 THEN 0 ELSE (ZTBPLANTB.D9*1.0/M100.UPH1*60*M100.Step1 + M100.Setting1)*1.2 END AS LT9,
  CASE WHEN ZTBPLANTB.D10 is null OR ZTBPLANTB.D10 =0 THEN 0 ELSE (ZTBPLANTB.D10*1.0/M100.UPH1*60*M100.Step1 + M100.Setting1)*1.2 END AS LT10,
  CASE WHEN ZTBPLANTB.D11 is null OR ZTBPLANTB.D11 =0 THEN 0 ELSE (ZTBPLANTB.D11*1.0/M100.UPH1*60*M100.Step1 + M100.Setting1)*1.2 END AS LT11,
  CASE WHEN ZTBPLANTB.D12 is null OR ZTBPLANTB.D12 =0 THEN 0 ELSE (ZTBPLANTB.D12*1.0/M100.UPH1*60*M100.Step1 + M100.Setting1)*1.2 END AS LT12,
  CASE WHEN ZTBPLANTB.D13 is null OR ZTBPLANTB.D13 =0 THEN 0 ELSE (ZTBPLANTB.D13*1.0/M100.UPH1*60*M100.Step1 + M100.Setting1)*1.2 END AS LT13,
  CASE WHEN ZTBPLANTB.D14 is null OR ZTBPLANTB.D14 =0 THEN 0 ELSE (ZTBPLANTB.D14*1.0/M100.UPH1*60*M100.Step1 + M100.Setting1)*1.2 END AS LT14,
  CASE WHEN ZTBPLANTB.D15 is null OR ZTBPLANTB.D15 =0 THEN 0 ELSE (ZTBPLANTB.D15*1.0/M100.UPH1*60*M100.Step1 + M100.Setting1)*1.2 END AS LT15
   FROM  ZTBPLANTB LEFT JOIN M100 ON (M100.G_CODE = ZTBPLANTB.G_CODE AND M100.CTR_CD = ZTBPLANTB.CTR_CD)
   WHERE (M100.EQ1 <> 'NA' AND M100.EQ1 <>'NO' AND M100.EQ1 <>'' AND M100.EQ1 is not null) AND  M100.UPH1 <>0 AND ZTBPLANTB.PLAN_DATE = @tradate AND ZTBPLANTB.CTR_CD='${DATA.CTR_CD}'
   ) AS AA
   UNPiVOT
   (
     LEATIME FOR LT IN ([LT1],[LT2],[LT3],[LT4],[LT5],[LT6],[LT7],[LT8],[LT9],[LT10],[LT11],[LT12],[LT13],[LT14],[LT15])
   ) as upv
   UNION ALL
   SELECT upv.CTR_CD, upv.FACTORY, upv.EQ2 AS EQ,upv.G_CODE, upv.LT, upv.LEATIME FROM
   (
   SELECT M100.CTR_CD, M100.FACTORY, M100.EQ2, M100.G_CODE, ZTBPLANTB.PLAN_DATE,
  CASE WHEN ZTBPLANTB.D1 is null OR ZTBPLANTB.D1 =0 THEN 0 ELSE (ZTBPLANTB.D1*1.0/M100.UPH2*60*M100.Step2 + M100.Setting2)*1.2 END AS LT1,
  CASE WHEN ZTBPLANTB.D2 is null OR ZTBPLANTB.D2 =0 THEN 0 ELSE (ZTBPLANTB.D2*1.0/M100.UPH2*60*M100.Step2 + M100.Setting2)*1.2 END AS LT2,
  CASE WHEN ZTBPLANTB.D3 is null OR ZTBPLANTB.D3 =0 THEN 0 ELSE (ZTBPLANTB.D3*1.0/M100.UPH2*60*M100.Step2 + M100.Setting2)*1.2 END AS LT3,
  CASE WHEN ZTBPLANTB.D4 is null OR ZTBPLANTB.D4 =0 THEN 0 ELSE (ZTBPLANTB.D4*1.0/M100.UPH2*60*M100.Step2 + M100.Setting2)*1.2 END AS LT4,
  CASE WHEN ZTBPLANTB.D5 is null OR ZTBPLANTB.D5 =0 THEN 0 ELSE (ZTBPLANTB.D5*1.0/M100.UPH2*60*M100.Step2 + M100.Setting2)*1.2 END AS LT5,
  CASE WHEN ZTBPLANTB.D6 is null OR ZTBPLANTB.D6 =0 THEN 0 ELSE (ZTBPLANTB.D6*1.0/M100.UPH2*60*M100.Step2 + M100.Setting2)*1.2 END AS LT6,
  CASE WHEN ZTBPLANTB.D7 is null OR ZTBPLANTB.D7 =0 THEN 0 ELSE (ZTBPLANTB.D7*1.0/M100.UPH2*60*M100.Step2 + M100.Setting2)*1.2 END AS LT7,
  CASE WHEN ZTBPLANTB.D8 is null OR ZTBPLANTB.D8 =0 THEN 0 ELSE (ZTBPLANTB.D8*1.0/M100.UPH2*60*M100.Step2 + M100.Setting2)*1.2 END AS LT8,
  CASE WHEN ZTBPLANTB.D9 is null OR ZTBPLANTB.D9 =0 THEN 0 ELSE (ZTBPLANTB.D9*1.0/M100.UPH1*60*M100.Step1 + M100.Setting1)*1.2 END AS LT9,
  CASE WHEN ZTBPLANTB.D10 is null OR ZTBPLANTB.D10 =0 THEN 0 ELSE (ZTBPLANTB.D10*1.0/M100.UPH2*60*M100.Step2 + M100.Setting2)*1.2 END AS LT10,
  CASE WHEN ZTBPLANTB.D11 is null OR ZTBPLANTB.D11 =0 THEN 0 ELSE (ZTBPLANTB.D11*1.0/M100.UPH2*60*M100.Step2 + M100.Setting2)*1.2 END AS LT11,
  CASE WHEN ZTBPLANTB.D12 is null OR ZTBPLANTB.D12 =0 THEN 0 ELSE (ZTBPLANTB.D12*1.0/M100.UPH2*60*M100.Step2 + M100.Setting2)*1.2 END AS LT12,
  CASE WHEN ZTBPLANTB.D13 is null OR ZTBPLANTB.D13 =0 THEN 0 ELSE (ZTBPLANTB.D13*1.0/M100.UPH2*60*M100.Step2 + M100.Setting2)*1.2 END AS LT13,
  CASE WHEN ZTBPLANTB.D14 is null OR ZTBPLANTB.D14 =0 THEN 0 ELSE (ZTBPLANTB.D14*1.0/M100.UPH2*60*M100.Step2 + M100.Setting2)*1.2 END AS LT14,
  CASE WHEN ZTBPLANTB.D15 is null OR ZTBPLANTB.D15 =0 THEN 0 ELSE (ZTBPLANTB.D15*1.0/M100.UPH2*60*M100.Step2 + M100.Setting2)*1.2 END AS LT15
   FROM  ZTBPLANTB LEFT JOIN M100 ON (M100.G_CODE = ZTBPLANTB.G_CODE AND M100.CTR_CD = ZTBPLANTB.CTR_CD)
   WHERE (M100.EQ2 <> 'NA' AND M100.EQ2 <>'NO' AND M100.EQ2 <>'' AND M100.EQ2 is not null) AND M100.UPH2 <>0 AND ZTBPLANTB.PLAN_DATE = @tradate AND ZTBPLANTB.CTR_CD='${DATA.CTR_CD}'
   ) AS AA
   UNPiVOT
   (
     LEATIME FOR LT IN ([LT1],[LT2],[LT3],[LT4],[LT5],[LT6],[LT7],[LT8],[LT9],[LT10],[LT11],[LT12],[LT13],[LT14],[LT15])
   ) as upv
   ) AS XX          
   GROUP BY XX.CTR_CD, XX.FACTORY, XX.EQ, XX.LT
) AS YY
WHERE  YY.FACTORY='${DATA.FACTORY}' AND YY.CTR_CD='${DATA.CTR_CD}'
ORDER BY YY.PL_DATE ASC
`;
  /* WHERE YY.EQ='${DATA.EQ}' AND YY.FACTORY='${DATA.FACTORY}' */
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.machinecounting = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `SELECT SUBSTRING(EQ_NAME,1,2) AS EQ_NAME, COUNT(SUBSTRING(EQ_NAME,1,2)) AS EQ_QTY FROM ZTB_SX_EQ_STATUS WHERE CTR_CD='${DATA.CTR_CD}' AND EQ_ACTIVE ='OK'  GROUP BY SUBSTRING(EQ_NAME,1,2) ORDER BY EQ_NAME DESC`;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.ycsxbalancecapa = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
  WITH ZTBDLVR AS 
  (SELECT CUST_CD, G_CODE, PO_NO, SUM(DELIVERY_QTY) AS DELIVERY_QTY FROM ZTBDelivery GROUP BY CUST_CD, G_CODE, PO_NO),
  POTB AS
  (
  SELECT ZTBPOTable.G_CODE, SUM((ZTBPOTable.PO_QTY-isnull(ZTBDLVR.DELIVERY_QTY,0))) AS PO_BALANCE FROM ZTBPOTable LEFT JOIN ZTBDLVR ON (ZTBPOTable.G_CODE = ZTBDLVR.G_CODE AND ZTBPOTable.CUST_CD = ZTBDLVR.CUST_CD AND ZTBPOTable.PO_NO = ZTBDLVR.PO_NO) GROUP BY ZTBPOTable.G_CODE
  ),
  THANHPHAM AS
  (
            select Product_MaVach AS G_CODE, SUM(CASE WHEN IO_type='IN' THEN IO_Qty ELSE 0 END) AS NHAPKHO,SUM(CASE WHEN IO_type='OUT' THEN IO_Qty ELSE 0 END) AS XUATKHO,SUM(CASE WHEN IO_type='OUT' AND IO_Status= 'Pending' THEN IO_Qty ELSE 0 END) AS XUATKHO_PD,SUM(CASE WHEN IO_type='IN' THEN IO_Qty ELSE 0 END) -SUM(CASE WHEN IO_type='OUT' THEN IO_Qty ELSE 0 END) AS TONKHO, SUM(CASE WHEN IO_type='OUT' AND (IO_Status<> 'Pending' OR IO_Status is null) THEN IO_Qty ELSE 0 END) AS XUATKHO_TT, SUM(CASE WHEN IO_type='IN' THEN IO_Qty ELSE 0 END) -SUM(CASE WHEN IO_type='OUT' AND (IO_Status<> 'Pending' OR IO_Status is null)THEN IO_Qty ELSE 0 END) AS TONKHO_TT FROM tbl_InputOutput 
          group by Product_MaVach 
  ),
  FN_BALANCETB AS
  (
    SELECT POTB.G_CODE, CASE WHEN POTB.PO_BALANCE-THANHPHAM.TONKHO >0 THEN POTB.PO_BALANCE-THANHPHAM.TONKHO ELSE 0 END AS FNBL  FROM POTB 
    LEFT JOIN THANHPHAM  ON (POTB.G_CODE = THANHPHAM.G_CODE)
    WHERE  POTB.PO_BALANCE <>0
  ),
  LEADTIMETB AS
  (
  SELECT FN_BALANCETB.FNBL, M100.EQ1, M100.EQ2, 
  CASE WHEN M100.EQ1 IN ('FR','SR','DC', 'ED') THEN FN_BALANCETB.FNBL/M100.UPH1 *60*M100.Step1 + M100.Setting1 ELSE 0 END AS LT1,
  CASE WHEN M100.EQ2 IN ('FR','SR','DC', 'ED') THEN FN_BALANCETB.FNBL/M100.UPH2 *60*M100.Step2 + M100.Setting2 ELSE 0 END AS LT2
  FROM FN_BALANCETB
  LEFT JOIN M100 ON (M100.G_CODE = FN_BALANCETB.G_CODE)
  WHERE FNBL <>0 AND M100.UPH1<>0  AND  M100.EQ1 IN ('FR','SR','DC', 'ED') AND  ((M100.EQ2 IN ('FR','SR','DC', 'ED') AND M100.UPH2 <>0) OR NOT (M100.EQ2 IN ('FR','SR','DC', 'ED')))
  ),
  LT1TB AS
  (
    SELECT EQ1 AS EQ_NAME, SUM(isnull(LT1,0)) AS LEADTIME FROM LEADTIMETB GROUP BY EQ1
  ),
  LT2TB AS
  (
    SELECT EQ2 AS EQ_NAME, SUM(isnull(LT2,0)) AS LEADTIME FROM LEADTIMETB GROUP BY EQ2
  )
  SELECT LT1TB.EQ_NAME, (isnull(LT1TB.LEADTIME,0) + isnull(LT2TB.LEADTIME,0)) AS YCSX_BALANCE FROM LT1TB LEFT JOIN LT2TB ON (LT1TB.EQ_NAME = LT2TB.EQ_NAME)
  ORDER BY LT1TB.EQ_NAME DESC
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  //checkkq = {tk_status:'NG', message:' tam thoi dung'}
  res.send(checkkq);
};
exports.getSXCapaData = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
  DECLARE @machine VARCHAR(100);
  DECLARE @worktime int;
  SET @worktime = 900;
  SELECT @machine = STRING_AGG(CONCAT('''', SUBSTRING(EQ_NAME, 0, 3), ''''), ',')
  FROM (
      SELECT DISTINCT SUBSTRING(EQ_NAME, 0, 3) AS EQ_NAME
      FROM ZTB_SX_EQ_STATUS WHERE CTR_CD='${DATA.CTR_CD}'
  ) AS AA;
  --PRINT(@machine);
  DECLARE @query varchar(max), @query2 varchar(max), @query3 varchar(max)
  SELECT @query = '
  DECLARE @worktime int;
  SET @worktime = 900;
  WITH ZTBDLVR AS 
  (SELECT CUST_CD, G_CODE, PO_NO, SUM(DELIVERY_QTY) AS DELIVERY_QTY FROM ZTBDelivery WHERE CTR_CD=''${DATA.CTR_CD}''  GROUP BY CUST_CD, G_CODE, PO_NO),
  POTB AS
  (
  SELECT ZTBPOTable.G_CODE, SUM((ZTBPOTable.PO_QTY-isnull(ZTBDLVR.DELIVERY_QTY,0))) AS PO_BALANCE FROM ZTBPOTable LEFT JOIN ZTBDLVR ON (ZTBPOTable.G_CODE = ZTBDLVR.G_CODE AND ZTBPOTable.CUST_CD = ZTBDLVR.CUST_CD AND ZTBPOTable.PO_NO = ZTBDLVR.PO_NO) WHERE ZTBPOTable.CTR_CD=''${DATA.CTR_CD}'' GROUP BY ZTBPOTable.G_CODE
  ),
  THANHPHAM AS
  (
          SELECT  AA.G_CODE, M100.G_NAME, M100.G_NAME_KD, M100.PROD_TYPE, AA.STOCK, AA.BLOCK_QTY, (AA.STOCK + AA.BLOCK_QTY) AS TOTAL_STOCK FROM 
            (
            SELECT G_CODE, CTR_CD, SUM(CASE WHEN STATUS=''N'' THEN I660.IN_QTY ELSE 0 END) AS STOCK, SUM(CASE WHEN STATUS=''B'' THEN I660.IN_QTY ELSE 0 END) AS BLOCK_QTY FROM I660 WHERE USE_YN =''Y'' AND I660.CTR_CD=''${DATA.CTR_CD}'' GROUP BY G_CODE, CTR_CD
            ) AS AA
            LEFT JOIN M100 ON (M100.G_CODE = AA.G_CODE AND M100.CTR_CD = AA.CTR_CD)         
            AND M100.CTR_CD=''${DATA.CTR_CD}''
  ),
  FN_BALANCETB AS
  (
  SELECT POTB.G_CODE, CASE WHEN POTB.PO_BALANCE-isnull(THANHPHAM.STOCK,0) >0 THEN POTB.PO_BALANCE-isnull(THANHPHAM.STOCK,0) ELSE 0 END AS FNBL  FROM POTB 
  LEFT JOIN THANHPHAM  ON (POTB.G_CODE = THANHPHAM.G_CODE)
  WHERE  POTB.PO_BALANCE <>0
  )
  ,
  LEADTIMETB AS
  (
  SELECT FN_BALANCETB.FNBL, M100.EQ1, M100.EQ2, M100.EQ3, M100.EQ4,
  CASE WHEN M100.EQ1 IN ('+@machine+') THEN CAST(FN_BALANCETB.FNBL AS bigint)/M100.UPH1 *60*M100.Step1 + M100.Setting1 ELSE 0 END AS LT1,
  CASE WHEN M100.EQ2 IN ('+@machine+') THEN CAST(FN_BALANCETB.FNBL AS bigint)/M100.UPH2 *60*M100.Step2 + M100.Setting2 ELSE 0 END AS LT2,
  CASE WHEN M100.EQ3 IN ('+@machine+') THEN CAST(FN_BALANCETB.FNBL AS bigint)/M100.UPH3 *60*M100.Step3 + M100.Setting3 ELSE 0 END AS LT3,
  CASE WHEN M100.EQ4 IN ('+@machine+') THEN CAST(FN_BALANCETB.FNBL AS bigint)/M100.UPH4 *60*M100.Step4 + M100.Setting4 ELSE 0 END AS LT4
  FROM FN_BALANCETB
  LEFT JOIN M100 ON (M100.G_CODE = FN_BALANCETB.G_CODE)
  WHERE M100.CTR_CD =''${DATA.CTR_CD}'' AND FNBL <>0 AND M100.UPH1<>0  AND  M100.EQ1 IN ('+@machine+') AND  ((M100.EQ2 IN ('+@machine+') AND M100.UPH2 <>0) OR NOT (M100.EQ2 IN ('+@machine+')))
  ),
  LT1TB AS
  (
  SELECT EQ1 AS EQ_NAME, SUM(isnull(LT1,0)) AS LEADTIME FROM LEADTIMETB GROUP BY EQ1
  ),
  LT2TB AS
  (
  SELECT EQ2 AS EQ_NAME, SUM(isnull(LT2,0)) AS LEADTIME FROM LEADTIMETB GROUP BY EQ2
  ),
  LT3TB AS
  (
  SELECT EQ3 AS EQ_NAME, SUM(isnull(LT3,0)) AS LEADTIME FROM LEADTIMETB GROUP BY EQ3
  ),
  LT4TB AS
  (
  SELECT EQ4 AS EQ_NAME, SUM(isnull(LT4,0)) AS LEADTIME FROM LEADTIMETB GROUP BY EQ4
  ),'
  SELECT @query2 = '
  EQ_TB AS (
  SELECT DISTINCT SUBSTRING(EQ_NAME, 0, 3) AS EQ_NAME FROM ZTB_SX_EQ_STATUS WHERE CTR_CD=''${DATA.CTR_CD}''),
  YCSX_BALANCE_TB AS
  (
  SELECT EQ_TB.EQ_NAME, (isnull(LT1TB.LEADTIME,0) + isnull(LT2TB.LEADTIME,0)+ isnull(LT3TB.LEADTIME,0)+ isnull(LT4TB.LEADTIME,0)) AS YCSX_BALANCE
  FROM  EQ_TB
  LEFT JOIN LT1TB ON (LT1TB.EQ_NAME= EQ_TB.EQ_NAME)
  LEFT JOIN LT2TB ON (LT2TB.EQ_NAME= EQ_TB.EQ_NAME)
  LEFT JOIN LT3TB ON (LT3TB.EQ_NAME= EQ_TB.EQ_NAME)
  LEFT JOIN LT4TB ON (LT4TB.EQ_NAME= EQ_TB.EQ_NAME)
  ),
  EQ_SERIES AS
  (
  SELECT DISTINCT SUBSTRING(EQ_NAME,1,2) AS EQ_SERIES FROM ZTB_SX_EQ_STATUS WHERE CTR_CD=''${DATA.CTR_CD}''
  ),
  EQ_OP_TB AS
  (
  SELECT SUBSTRING(EQ_NAME,1,2) AS EQ_SERIES,COUNT(EQ_NAME) AS EQ_QTY, SUM(EQ_OP)*2 AS EQ_OP, AVG(EQ_OP) AS AVG_EQ_OP, COUNT(EQ_NAME) * @worktime AS MAN_FULL_CAPA  FROM ZTB_SX_EQ_STATUS WHERE EQ_ACTIVE=''OK'' AND CTR_CD=''${DATA.CTR_CD}'' GROUP BY SUBSTRING(EQ_NAME,1,2)
  ),
  RETAIN_WF_TB AS
  (
  SELECT SUBSTRING(ZTBWORKPOSITION.WORK_POSITION_NAME,4,2) AS EQ_SERIES, ZTBWORKPOSITION.WORK_POSITION_NAME, ZTBJOB.JOB_NAME, ZTBSUBDEPARTMENT.SUBDEPTNAME, ZTBMAINDEPARMENT.MAINDEPTNAME FROM ZTBEMPLINFO
  LEFT JOIN ZTBWORKPOSITION ON ZTBEMPLINFO.WORK_POSITION_CODE = ZTBWORKPOSITION.WORK_POSITION_CODE AND ZTBEMPLINFO.CTR_CD = ZTBWORKPOSITION.CTR_CD
  LEFT JOIN ZTBJOB ON ZTBEMPLINFO.JOB_CODE = ZTBJOB.JOB_CODE AND ZTBEMPLINFO.CTR_CD = ZTBJOB.CTR_CD
  LEFT JOIN ZTBSUBDEPARTMENT ON ZTBWORKPOSITION.SUBDEPTCODE = ZTBSUBDEPARTMENT.SUBDEPTCODE  AND ZTBWORKPOSITION.CTR_CD = ZTBSUBDEPARTMENT.CTR_CD
  LEFT JOIN ZTBMAINDEPARMENT ON ZTBSUBDEPARTMENT.MAINDEPTCODE = ZTBMAINDEPARMENT.MAINDEPTCODE AND ZTBSUBDEPARTMENT.CTR_CD = ZTBMAINDEPARMENT.CTR_CD
  WHERE ZTBJOB.JOB_NAME=''Worker'' AND ZTBMAINDEPARMENT.MAINDEPTNAME = ''SX'' AND ZTBWORKPOSITION.WORK_POSITION_NAME<>''SX_VP'' AND ZTBEMPLINFO.WORK_STATUS_CODE = 1 AND ZTBEMPLINFO.CTR_CD=''${DATA.CTR_CD}''
  ),
  RETAIN_WF_BY_SERIES AS
  (
    SELECT EQ_SERIES, COUNT(EQ_SERIES) AS RETAIN_WF, COUNT(EQ_SERIES) * @worktime AS RETAIN_WF_CAPA FROM RETAIN_WF_TB
    GROUP BY EQ_SERIES
  ),
  ATT_WF_TB AS
  (
    SELECT SUBSTRING(ZTBWORKPOSITION.WORK_POSITION_NAME,4,2) AS EQ_SERIES, ZTBWORKPOSITION.WORK_POSITION_NAME, ZTBJOB.JOB_NAME, ZTBSUBDEPARTMENT.SUBDEPTNAME, ZTBMAINDEPARMENT.MAINDEPTNAME FROM ZTBATTENDANCETB
    LEFT JOIN ZTBEMPLINFO ON ZTBEMPLINFO.EMPL_NO = ZTBATTENDANCETB.EMPL_NO AND  ZTBEMPLINFO.CTR_CD = ZTBATTENDANCETB.CTR_CD
    LEFT JOIN ZTBWORKPOSITION ON ZTBEMPLINFO.WORK_POSITION_CODE = ZTBWORKPOSITION.WORK_POSITION_CODE AND ZTBEMPLINFO.CTR_CD = ZTBWORKPOSITION.CTR_CD
  LEFT JOIN ZTBJOB ON ZTBEMPLINFO.JOB_CODE = ZTBJOB.JOB_CODE AND ZTBEMPLINFO.CTR_CD = ZTBJOB.CTR_CD
  LEFT JOIN ZTBSUBDEPARTMENT ON ZTBWORKPOSITION.SUBDEPTCODE = ZTBSUBDEPARTMENT.SUBDEPTCODE  AND ZTBWORKPOSITION.CTR_CD = ZTBSUBDEPARTMENT.CTR_CD
  LEFT JOIN ZTBMAINDEPARMENT ON ZTBSUBDEPARTMENT.MAINDEPTCODE = ZTBMAINDEPARMENT.MAINDEPTCODE AND ZTBSUBDEPARTMENT.CTR_CD = ZTBMAINDEPARMENT.CTR_CD
  WHERE ZTBATTENDANCETB.ON_OFF=1 AND ZTBJOB.JOB_NAME=''Worker'' AND ZTBMAINDEPARMENT.MAINDEPTNAME = ''SX'' AND ZTBWORKPOSITION.WORK_POSITION_NAME<>''SX_VP'' AND ZTBEMPLINFO.WORK_STATUS_CODE = 1 AND ZTBEMPLINFO.CTR_CD=''${DATA.CTR_CD}'' AND APPLY_DATE = CAST(GETDATE() as date)
  ),
  ATT_WF_BY_SERIES AS
  (
  SELECT EQ_SERIES, COUNT(EQ_SERIES) AS ATT_WF, COUNT(EQ_SERIES) * @worktime AS ATT_WF_CAPA FROM ATT_WF_TB GROUP BY EQ_SERIES
  ),
  CAPA_TB AS
  (
  SELECT EQ_SERIES.EQ_SERIES,EQ_OP_TB.EQ_QTY, EQ_OP_TB.EQ_OP, EQ_OP_TB.AVG_EQ_OP, EQ_OP_TB.MAN_FULL_CAPA, isnull(RETAIN_WF_BY_SERIES.RETAIN_WF,0) AS RETAIN_WF, 
  isnull(RETAIN_WF_BY_SERIES.RETAIN_WF,0)*1.0/2/AVG_EQ_OP * @worktime AS RETAIN_WF_CAPA, 
  isnull(ATT_WF_BY_SERIES.ATT_WF,0) AS ATT_WF, 
  isnull(ATT_WF_BY_SERIES.ATT_WF,0)*1.0/2/AVG_EQ_OP * @worktime AS ATT_WF_CAPA, 
  isnull(RETAIN_WF_BY_SERIES.RETAIN_WF,0)*1.0 / EQ_OP_TB.AVG_EQ_OP/2 AS RETAIN_WF_TO_EQ, 
  isnull(RETAIN_WF_BY_SERIES.RETAIN_WF,0) *1.0 / EQ_OP_TB.AVG_EQ_OP/2 * @worktime AS RETAIN_WF_TO_EQ_CAPA, 
  isnull(ATT_WF_BY_SERIES.ATT_WF,0)*1.0 / EQ_OP_TB.AVG_EQ_OP/2 AS ATT_WF_TO_EQ, 
  isnull(ATT_WF_BY_SERIES.ATT_WF,0)*1.0 / EQ_OP_TB.AVG_EQ_OP/2 * @worktime AS ATT_WF_TO_EQ_CAPA,'
  SELECT @query3='
   CASE WHEN isnull(RETAIN_WF_BY_SERIES.RETAIN_WF,0) *1.0 / EQ_OP_TB.AVG_EQ_OP/2 * @worktime > EQ_OP_TB.MAN_FULL_CAPA THEN EQ_OP_TB.MAN_FULL_CAPA ELSE isnull(RETAIN_WF_BY_SERIES.RETAIN_WF,0) *1.0 / EQ_OP_TB.AVG_EQ_OP/2 * @worktime END AS RETAIN_WF_MIN_CAPA,
   CASE WHEN isnull(ATT_WF_BY_SERIES.ATT_WF,0)*1.0 / EQ_OP_TB.AVG_EQ_OP/2 * @worktime > EQ_OP_TB.MAN_FULL_CAPA THEN EQ_OP_TB.MAN_FULL_CAPA ELSE isnull(ATT_WF_BY_SERIES.ATT_WF,0)*1.0 / EQ_OP_TB.AVG_EQ_OP/2 * @worktime END AS ATT_WF_MIN_CAPA
   FROM EQ_SERIES
   LEFT JOIN EQ_OP_TB ON EQ_OP_TB.EQ_SERIES = EQ_SERIES.EQ_SERIES
   LEFT JOIN RETAIN_WF_BY_SERIES ON RETAIN_WF_BY_SERIES.EQ_SERIES = EQ_SERIES.EQ_SERIES
   LEFT JOIN ATT_WF_BY_SERIES ON ATT_WF_BY_SERIES.EQ_SERIES = EQ_SERIES.EQ_SERIES
   )
   SELECT CAPA_TB.*, YCSX_BALANCE_TB.YCSX_BALANCE, CASE WHEN RETAIN_WF_MIN_CAPA = 0 THEN 1000 ELSE YCSX_BALANCE/RETAIN_WF_MIN_CAPA END AS RETAIN_WF_LEADTIME_DAYS, CASE WHEN ATT_WF_MIN_CAPA = 0 THEN 1000 ELSE YCSX_BALANCE/ATT_WF_MIN_CAPA END AS ATT_WF_LEADTIME_DAYS  FROM CAPA_TB
   LEFT JOIN YCSX_BALANCE_TB ON YCSX_BALANCE_TB.EQ_NAME = CAPA_TB.EQ_SERIES
   ORDER BY CAPA_TB.EQ_SERIES DESC
   '
   print( @query + @query2 + @query3)
   execute(@query + @query2 + @query3)
  `;
  console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.getchithidatatable = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
  WITH IQCTB AS
  (
  SELECT CTR_CD, M_CODE, SUM(TOTAL_IN_QTY) AS IQC_STOCK  FROM ZTB_SX_NG_MATERIAL WHERE QC_PASS='Y' AND USE_YN='Y' AND PHANLOAI='NVL' GROUP BY CTR_CD, M_CODE
  )
  SELECT ZTB_QLSXCHITHI.LIEUQL_SX ,ZTB_QLSXCHITHI.CHITHI_ID, ZTB_QLSXCHITHI.PLAN_ID, ZTB_QLSXCHITHI.M_CODE, M090.M_NAME, M090.WIDTH_CD, ZTB_QLSXCHITHI.M_ROLL_QTY, ZTB_QLSXCHITHI.M_MET_QTY,ZTB_QLSXCHITHI.M_QTY, isnull(BB.TOTAL_IN_QTY,0) AS OUT_KHO_SX, isnull(AA.OUT_CFM_QTY,0) AS OUT_CFM_QTY ,ZTB_QLSXCHITHI.INS_EMPL, ZTB_QLSXCHITHI.INS_DATE, ZTB_QLSXCHITHI.UPD_EMPL, ZTB_QLSXCHITHI.UPD_DATE, (isnull(M090.STOCK_CFM_NM1,0)+isnull(M090.STOCK_CFM_NM2,0)) AS M_STOCK, isnull(IQCTB.IQC_STOCK,0) AS IQC_STOCK FROM ZTB_QLSXCHITHI 
  JOIN M090 ON (M090.M_CODE = ZTB_QLSXCHITHI.M_CODE AND M090.CTR_CD = ZTB_QLSXCHITHI.CTR_CD) 
  LEFT JOIN IQCTB ON (IQCTB.M_CODE = ZTB_QLSXCHITHI.M_CODE AND IQCTB.CTR_CD = ZTB_QLSXCHITHI.CTR_CD) 
  LEFT JOIN 
  (
  SELECT PLAN_ID, M_CODE, CTR_CD, SUM(OUT_CFM_QTY) AS OUT_CFM_QTY FROM O302 WHERE PLAN_ID='${DATA.PLAN_ID}' AND CTR_CD='${DATA.CTR_CD}' GROUP BY PLAN_ID, M_CODE, CTR_CD
  ) AS AA ON (AA.PLAN_ID=ZTB_QLSXCHITHI.PLAN_ID AND AA.M_CODE=ZTB_QLSXCHITHI.M_CODE AND AA.CTR_CD=ZTB_QLSXCHITHI.CTR_CD)
  LEFT JOIN  
  (SELECT PLAN_ID_SUDUNG, M_CODE, CTR_CD, isnull(SUM(TOTAL_IN_QTY),0) AS TOTAL_IN_QTY  FROM IN_KHO_SX WHERE PLAN_ID_SUDUNG='${DATA.PLAN_ID}' AND IN_KHO_SX.PLAN_ID_INPUT <> IN_KHO_SX.PLAN_ID_SUDUNG AND CTR_CD='${DATA.CTR_CD}' GROUP BY PLAN_ID_SUDUNG, M_CODE, CTR_CD) AS BB ON (BB.PLAN_ID_SUDUNG=ZTB_QLSXCHITHI.PLAN_ID AND BB.M_CODE=ZTB_QLSXCHITHI.M_CODE AND BB.CTR_CD=ZTB_QLSXCHITHI.CTR_CD)
  WHERE ZTB_QLSXCHITHI.PLAN_ID='${DATA.PLAN_ID}' AND ZTB_QLSXCHITHI.CTR_CD='${DATA.CTR_CD}' ORDER BY (isnull(M090.STOCK_CFM_NM1,0)+isnull(M090.STOCK_CFM_NM2,0)) DESC
  `;
  //${moment().format('YYYY-MM-DD')}
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.checkP500M_CODE = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
  SELECT DISTINCT M_NAME, PROD_REQUEST_NO, P500.CTR_CD FROM P500 
  LEFT JOIN M090 ON M090.M_CODE = P500.M_CODE AND M090.CTR_CD = P500.CTR_CD
  WHERE PROD_REQUEST_NO='${DATA.PROD_REQUEST_NO}' 
  AND P500.CTR_CD='${DATA.CTR_CD}'
      `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.check_lieuql_sx_m140 = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `select top 1 * from M140 WHERE CTR_CD='${DATA.CTR_CD}' AND G_CODE = '${DATA.G_CODE}' AND LIEUQL_SX =1`;
  //${moment().format('YYYY-MM-DD')}
  ////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.checkPLANID_OUT_KHO_AO = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `SELECT TOP 1 * FROM OUT_KHO_SX WHERE CTR_CD='${DATA.CTR_CD}' AND PLAN_ID_OUTPUT='${DATA.PLAN_ID}'`;
  //${moment().format('YYYY-MM-DD')}
  ////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.deletePlanQLSX = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery1 = `DELETE FROM ZTB_QLSXPLAN WHERE CTR_CD='${DATA.CTR_CD}' AND PLAN_ID='${DATA.PLAN_ID}'`;
  let setpdQuery2 = `DELETE FROM ZTB_QLSXCHITHI WHERE CTR_CD='${DATA.CTR_CD}' AND PLAN_ID='${DATA.PLAN_ID}'`;
  let setpdQuery3 = `DELETE FROM O300 WHERE CTR_CD='${DATA.CTR_CD}' AND PLAN_ID='${DATA.PLAN_ID}'`;
  let setpdQuery4 = `DELETE FROM O301 WHERE CTR_CD='${DATA.CTR_CD}' AND PLAN_ID='${DATA.PLAN_ID}'`;
  //${moment().format('YYYY-MM-DD')}
  //console.log(setpdQuery1);
  checkkq = await queryDB(setpdQuery1);
  checkkq = await queryDB(setpdQuery2);
  checkkq = await queryDB(setpdQuery3);
  checkkq = await queryDB(setpdQuery4);
  res.send(checkkq);
};
exports.checkQLSXPLANSTATUS = async (req, res, DATA) => {
  let condition = " WHERE 1=1  ";
  if (DATA.ALLTIME === false) {
    condition += ` AND ZTB_QLSXPLAN.PLAN_DATE BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE}'`;
  }
  if (DATA.G_NAME !== "") {
    condition += ` AND M100.G_NAME LIKE '%${DATA.G_NAME}%'`;
  }
  if (DATA.G_CODE !== "") {
    condition += ` AND M100.G_CODE = '${DATA.G_CODE}'`;
  }
  if (DATA.PLAN_ID !== "") {
    condition += ` AND ZTB_QLSXPLAN.PLAN_ID = '${DATA.PLAN_ID}'`;
  }
  if (DATA.PROD_REQUEST_NO !== "") {
    condition += ` AND ZTB_QLSXPLAN.PROD_REQUEST_NO = '${DATA.PROD_REQUEST_NO}'`;
  }
  if (DATA.FACTORY !== "ALL") {
    condition += ` AND ZTB_QLSXPLAN.PLAN_FACTORY = '${DATA.FACTORY}'`;
  }
  if (DATA.PLAN_EQ !== "ALL") {
    condition += ` AND SUBSTRING(ZTB_QLSXPLAN.PLAN_EQ,1,2)= '${DATA.PLAN_EQ}'`;
  }
  let checkkq = "OK";
  let setpdQuery = `SELECT   ZTB_SX_RESULT.WORK_SHIFT, ZTB_QLSXPLAN.PLAN_QTY, ZTB_QLSXPLAN.KQ_SX_TAM, ZTB_QLSXPLAN.KETQUASX, ZTB_QLSXPLAN.STEP, ZTB_QLSXPLAN.PLAN_FACTORY, ZTB_QLSXPLAN.PLAN_ID, ZTB_QLSXPLAN.PLAN_DATE,  ZTB_QLSXPLAN.PLAN_EQ, M100.G_NAME,M100.G_NAME_KD, OUT_KNIFE_FILM_A.PLAN_ID AS XUATDAO, ZTB_SX_RESULT.SETTING_START_TIME, ZTB_SX_RESULT.MASS_START_TIME, ZTB_SX_RESULT.MASS_END_TIME,O301_A.PLAN_ID AS DKXL, OUT_KHO_SX_A.PLAN_ID_OUTPUT AS XUATLIEU, P501_A.PLAN_ID AS IN_TEM,ZTB_SX_RESULT.SX_RESULT AS CHOTBC
        FROM ZTB_QLSXPLAN
        LEFT JOIN (SELECT DISTINCT PLAN_ID, CTR_CD FROM OUT_KNIFE_FILM) AS OUT_KNIFE_FILM_A  
        ON (ZTB_QLSXPLAN.PLAN_ID  = OUT_KNIFE_FILM_A.PLAN_ID AND ZTB_QLSXPLAN.CTR_CD = OUT_KNIFE_FILM_A.CTR_CD)
        LEFT JOIN  ZTB_SX_RESULT ON( ZTB_SX_RESULT.PLAN_ID = ZTB_QLSXPLAN.PLAN_ID AND ZTB_SX_RESULT.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
        LEFT JOIN (SELECT DISTINCT PLAN_ID_OUTPUT, CTR_CD FROM OUT_KHO_SX) AS OUT_KHO_SX_A 
        ON (ZTB_QLSXPLAN.PLAN_ID = OUT_KHO_SX_A.PLAN_ID_OUTPUT AND ZTB_QLSXPLAN.CTR_CD = OUT_KHO_SX_A.CTR_CD)
        LEFT JOIN M100 ON (M100.G_CODE = ZTB_QLSXPLAN.G_CODE AND M100.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
        LEFT JOIN (SELECT DISTINCT PLAN_ID, CTR_CD FROM O301 WHERE INS_DATE > '2022-11-21') AS O301_A ON (O301_A.PLAN_ID = ZTB_QLSXPLAN.PLAN_ID AND O301_A.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
        LEFT JOIN (SELECT DISTINCT PLAN_ID, CTR_CD FROM P501 WHERE INS_DATE > '2022-11-21') AS P501_A  ON (P501_A.PLAN_ID = ZTB_QLSXPLAN.PLAN_ID AND P501_A.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
            ${condition} AND ZTB_QLSXPLAN.CTR_CD='${DATA.CTR_CD}'
            ORDER BY ZTB_QLSXPLAN.PLAN_DATE DESC, ZTB_QLSXPLAN.PLAN_ID DESC`;
  //${moment().format('YYYY-MM-DD')}
  ///console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.getLastestPLAN_ID = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `SELECT TOP 1 PLAN_ID from ZTB_QLSXPLAN WHERE CTR_CD='${DATA.CTR_CD}' AND PROD_REQUEST_NO='${DATA.PROD_REQUEST_NO}' ORDER BY PLAN_ID DESC `;
  //${moment().format('YYYY-MM-DD')}
  ////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.getLastestPLANORDER = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `SELECT  TOP 1 *  FROM ZTB_QLSXPLAN WHERE CTR_CD='${DATA.CTR_CD}' AND  PLAN_DATE='${DATA.PLAN_DATE}' AND PLAN_EQ='${DATA.PLAN_EQ}' AND PLAN_FACTORY='${DATA.PLAN_FACTORY}' ORDER BY PLAN_ORDER DESC`;
  //${moment().format('YYYY-MM-DD')}
  ////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.checkProd_request_no_Exist_O302 = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = ` SELECT TOP 1 * FROM P500 WHERE CTR_CD='${DATA.CTR_CD}' AND PROD_REQUEST_NO='${DATA.PROD_REQUEST_NO}' AND PLAN_ID is null`;
  //${moment().format('YYYY-MM-DD')}
  ////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.addPlanQLSX = async (req, res, DATA) => {
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let checkkq = "OK";
  let setpdQuery = `INSERT INTO ZTB_QLSXPLAN (CTR_CD,PLAN_ID,PLAN_DATE,PROD_REQUEST_NO,PLAN_QTY,PLAN_EQ,PLAN_FACTORY,PLAN_LEADTIME,STEP,INS_EMPL,INS_DATE,UPD_EMPL,UPD_DATE,PLAN_ORDER, G_CODE, PROCESS_NUMBER, NEXT_PLAN_ID, REQ_DF, IS_SETTING) VALUES('${DATA.CTR_CD}','${DATA.PLAN_ID}','${DATA.PLAN_DATE}','${DATA.PROD_REQUEST_NO}','${DATA.PLAN_QTY}','${DATA.PLAN_EQ}','${DATA.PLAN_FACTORY}','${DATA.PLAN_LEADTIME}','${DATA.STEP}','${EMPL_NO}',GETDATE(),'${EMPL_NO}',GETDATE(),'${DATA.PLAN_ORDER}', '${DATA.G_CODE}','${DATA.PROCESS_NUMBER}','${DATA.NEXT_PLAN_ID}','R','${DATA.IS_SETTING}')`;
  //${moment().format('YYYY-MM-DD')}
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.quickcheckycsx = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
  WITH  AA AS
  (
    SELECT
      PVTB.PROD_REQUEST_NO,
      isnull(PVTB.[1], 0) AS CD1,
      isnull(PVTB.[2], 0) AS CD2,
      isnull(PVTB.[3], 0) AS CD3,
      isnull(PVTB.[4], 0) AS CD4,
      PVTB.CTR_CD
    FROM
      (
        SELECT
          ZTB_QLSXPLAN.PROD_REQUEST_NO,
          ZTB_QLSXPLAN.PROCESS_NUMBER,
          SUM(isnull(SX_RESULT, 0)) AS KETQUASX,
          ZTB_QLSXPLAN.CTR_CD
        FROM
          ZTB_SX_RESULT
          LEFT JOIN ZTB_QLSXPLAN ON (ZTB_QLSXPLAN.PLAN_ID = ZTB_SX_RESULT.PLAN_ID AND ZTB_QLSXPLAN.CTR_CD = ZTB_SX_RESULT.CTR_CD)
        WHERE
          ZTB_QLSXPLAN.STEP = 0
        GROUP BY
          ZTB_QLSXPLAN.PROD_REQUEST_NO,
          ZTB_QLSXPLAN.PROCESS_NUMBER,
          ZTB_QLSXPLAN.CTR_CD
      ) AS PV PIVOT (
        SUM(PV.KETQUASX) FOR PV.PROCESS_NUMBER IN ([1], [2], [3], [4])
      ) AS PVTB
  ),
LOSSKT AS (
   SELECT BB.G_CODE, SUM(BB.INSPECT_TOTAL_QTY) AS INSPECT_TOTAL_QTY, SUM(BB.TOTAL_NG) AS TOTAL_NG, CASE WHEN SUM(BB.TOTAL_NG)*1.0/SUM(BB.INSPECT_TOTAL_QTY) > 0.05 THEN 0.05 ELSE  SUM(BB.TOTAL_NG)*1.0/SUM(BB.INSPECT_TOTAL_QTY) END AS NG_RATE, BB.CTR_CD FROM 
    (
    SELECT AA.G_CODE, AA.INSPECT_DATE,AA.INSPECT_TOTAL_QTY, AA.TOTAL_NG, COUNT(G_CODE) OVER(PARTITION BY G_CODE ORDER BY INSPECT_DATE DESC) AS CNT, AA.CTR_CD
    FROM 
    (
    SELECT  G_CODE,CAST(INSPECT_DATETIME AS date) AS INSPECT_DATE, SUM(INSPECT_TOTAL_QTY-ERR32) AS INSPECT_TOTAL_QTY, SUM(ERR1+ERR2+ERR3+ERR4+ERR5+ERR6+ERR7+ERR8+ERR9+ERR10+ERR11+ERR12+ERR13+ERR14+ERR15+ERR16+ERR17+ERR18+ERR19+ERR20+ERR21+ERR22+ERR23+ERR24+ERR25+ERR26+ERR27+ERR28+ERR29+ERR30+ERR31
    ) AS TOTAL_NG, CTR_CD FROM ZTBINSPECTNGTB
    WHERE CTR_CD='${DATA.CTR_CD}'
    GROUP BY G_CODE,CAST(INSPECT_DATETIME AS date), CTR_CD
    ) AS AA
    ) AS BB
    WHERE BB.CNT <=10 AND BB.INSPECT_TOTAL_QTY<>0
    GROUP BY BB.G_CODE, BB.CTR_CD
  )
  SELECT 
  M100.FACTORY,
            M100.Setting1,
            M100.Setting2,
            M100.Step1,
            M100.Step2,
            M100.LOSS_SX1,
            M100.LOSS_SX2,
            M100.LOSS_SETTING1,
            M100.LOSS_SETTING2,
            M100.NOTE,
            M100.UPH1,
            M100.UPH2,
            M100.Step3,
            M100.Step4,
            M100.EQ3,
            M100.EQ4,
            M100.UPH3,
            M100.UPH4,
            M100.Setting3,
            M100.Setting4,
            M100.LOSS_SX3,
            M100.LOSS_SX4,
            M100.LOSS_SETTING3,
            M100.LOSS_SETTING4,
            P400.G_CODE,                   
            M100.G_NAME,
            M100.G_NAME_KD,                   
            P400.PROD_REQUEST_QTY,
            M100.EQ1,
            M100.EQ2,	
  CASE WHEN M100.PD <> 0 THEN CEILING((P400.PROD_REQUEST_QTY*(1+(isnull(LOSS_SX2,0)+isnull(LOSS_SX3,0)+isnull(LOSS_SX4,0))*1.0/100+isnull(LOSSKT.NG_RATE,0)) + (isnull(LOSS_SETTING2,0)+isnull(LOSS_SETTING3,0)+isnull(LOSS_SETTING4,0))*1.0/M100.PD*(M100.G_C*M100.G_C_R)*1000)) ELSE 0 END AS SLC_CD1,
CASE WHEN M100.PD <> 0 THEN CEILING((P400.PROD_REQUEST_QTY*(1+(isnull(LOSS_SX3,0)+isnull(LOSS_SX4,0))*1.0/100+isnull(LOSSKT.NG_RATE,0)) + (isnull(LOSS_SETTING3,0)+isnull(LOSS_SETTING4,0))*1.0/M100.PD*(M100.G_C*M100.G_C_R)*1000)) ELSE 0 END AS SLC_CD2,
CASE WHEN M100.PD <> 0 THEN CEILING((P400.PROD_REQUEST_QTY*(1+(isnull(LOSS_SX4,0))*1.0/100+isnull(LOSSKT.NG_RATE,0)) + (isnull(LOSS_SETTING4,0))*1.0/M100.PD*(M100.G_C*M100.G_C_R)*1000)) ELSE 0 END AS SLC_CD3,
CASE WHEN M100.PD <> 0 THEN CEILING((P400.PROD_REQUEST_QTY*(1+(0)*1.0/100+isnull(LOSSKT.NG_RATE,0)) + (0)*1.0/M100.PD*(M100.G_C*M100.G_C_R)*1000)) ELSE 0 END AS SLC_CD4,
            isnull(AA.CD1, 0) AS CD1,
            isnull(AA.CD2, 0) AS CD2,
            isnull(AA.CD3, 0) AS CD3,
            isnull(AA.CD4, 0) AS CD4,
            P400.CTR_CD
  FROM P400
  LEFT JOIN M100 ON (M100.G_CODE = P400.G_CODE AND M100.CTR_CD = P400.CTR_CD)         
  LEFT JOIN AA ON (AA.PROD_REQUEST_NO = P400.PROD_REQUEST_NO AND AA.CTR_CD = P400.CTR_CD)
  LEFT JOIN LOSSKT ON (LOSSKT.G_CODE = P400.G_CODE AND LOSSKT.CTR_CD = P400.CTR_CD)
  WHERE P400.PROD_REQUEST_NO='${DATA.PROD_REQUEST_NO}' AND P400.CTR_CD='${DATA.CTR_CD}'
    `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  ////console.log(checkkq);
  res.send(checkkq);
};
exports.traYCSXDataFull_QLSX = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
  WITH
  PLANTABLE AS 
  (SELECT DISTINCT CTR_CD, PROD_REQUEST_NO  FROM ZTB_QLSXPLAN),
  INSPECT_INPUT_TB AS 
  (
  SELECT CTR_CD,PROD_REQUEST_NO, SUM(INPUT_QTY_EA) AS LOT_TOTAL_INPUT_QTY_EA FROM ZTBINSPECTINPUTTB GROUP BY CTR_CD,PROD_REQUEST_NO
  ),
  INSPECT_OUTPUT_TB AS 
  (
  SELECT CTR_CD,PROD_REQUEST_NO, SUM(OUTPUT_QTY_EA) AS LOT_TOTAL_OUTPUT_QTY_EA FROM ZTBINSPECTOUTPUTTB WHERE SORTING ='N' GROUP BY CTR_CD,PROD_REQUEST_NO
  ),
  WH_TABLE AS 
  (SELECT CTR_CD, I660.PROD_REQUEST_NO, SUM(I660.IN_QTY) AS INPUT_QTY, SUM(CASE WHEN STATUS='N' AND I660.USE_YN ='Y' THEN I660.IN_QTY ELSE 0 END) AS STOCK,SUM(CASE WHEN STATUS='B' AND I660.USE_YN ='Y' THEN I660.IN_QTY ELSE 0 END) AS BLOCK_QTY, SUM(CASE WHEN I660.USE_YN <> 'Y' THEN I660.IN_QTY ELSE 0 END) AS OUTPUT_QTY FROM I660  GROUP BY CTR_CD,I660.PROD_REQUEST_NO),
  ZTBDLVR AS
  (SELECT CTR_CD,G_CODE, SUM(DELIVERY_QTY) AS DELIVERY_QTY FROM ZTBDelivery GROUP BY CTR_CD,G_CODE),
  POTB AS
  (
  SELECT CTR_CD,G_CODE, SUM(ZTBPOTable.PO_QTY) AS PO_QTY FROM ZTBPOTable GROUP BY CTR_CD,G_CODE
  ),
  PO_TON AS
  (
    SELECT POTB.CTR_CD,POTB.G_CODE, (POTB.PO_QTY- ZTBDLVR.DELIVERY_QTY) AS PO_BALANCE FROM POTB LEFT JOIN ZTBDLVR ON (POTB.G_CODE =ZTBDLVR.G_CODE AND POTB.CTR_CD =ZTBDLVR.CTR_CD )
  ),
  AA AS
  (
    SELECT
PVTB.CTR_CD,
      PVTB.PROD_REQUEST_NO,
      isnull(PVTB.[1], 0) AS CD1,
      isnull(PVTB.[2], 0) AS CD2,
      isnull(PVTB.[3], 0) AS CD3,
      isnull(PVTB.[4], 0) AS CD4
    FROM
      (
        SELECT
  ZTB_QLSXPLAN.CTR_CD,
          ZTB_QLSXPLAN.PROD_REQUEST_NO,
          ZTB_QLSXPLAN.PROCESS_NUMBER,
          SUM(isnull(SX_RESULT, 0)) AS KETQUASX
        FROM
          ZTB_SX_RESULT
          LEFT JOIN ZTB_QLSXPLAN ON (ZTB_QLSXPLAN.PLAN_ID = ZTB_SX_RESULT.PLAN_ID AND ZTB_QLSXPLAN.CTR_CD = ZTB_SX_RESULT.CTR_CD)
        WHERE
          ZTB_QLSXPLAN.STEP = 0
        GROUP BY
  ZTB_QLSXPLAN.CTR_CD,
          ZTB_QLSXPLAN.PROD_REQUEST_NO,
          ZTB_QLSXPLAN.PROCESS_NUMBER
      ) AS PV PIVOT (
        SUM(PV.KETQUASX) FOR PV.PROCESS_NUMBER IN ([1], [2], [3], [4])
      ) AS PVTB
  ),
LOSSKT AS (
   SELECT BB.G_CODE, SUM(BB.INSPECT_TOTAL_QTY) AS INSPECT_TOTAL_QTY, SUM(BB.TOTAL_NG) AS TOTAL_NG, CASE WHEN SUM(BB.TOTAL_NG)*1.0/SUM(BB.INSPECT_TOTAL_QTY) > 0.05 THEN 0.05 ELSE  SUM(BB.TOTAL_NG)*1.0/SUM(BB.INSPECT_TOTAL_QTY) END AS NG_RATE, BB.CTR_CD FROM 
    (
    SELECT AA.G_CODE, AA.INSPECT_DATE,AA.INSPECT_TOTAL_QTY, AA.TOTAL_NG, COUNT(G_CODE) OVER(PARTITION BY G_CODE ORDER BY INSPECT_DATE DESC) AS CNT, AA.CTR_CD
    FROM 
    (
    SELECT  G_CODE,CAST(INSPECT_DATETIME AS date) AS INSPECT_DATE, SUM(INSPECT_TOTAL_QTY-ERR32) AS INSPECT_TOTAL_QTY, SUM(ERR1+ERR2+ERR3+ERR4+ERR5+ERR6+ERR7+ERR8+ERR9+ERR10+ERR11+ERR12+ERR13+ERR14+ERR15+ERR16+ERR17+ERR18+ERR19+ERR20+ERR21+ERR22+ERR23+ERR24+ERR25+ERR26+ERR27+ERR28+ERR29+ERR30+ERR31
    ) AS TOTAL_NG, CTR_CD FROM ZTBINSPECTNGTB
    WHERE CTR_CD='${DATA.CTR_CD}'
    GROUP BY G_CODE,CAST(INSPECT_DATETIME AS date), CTR_CD
    ) AS AA
    ) AS BB
    WHERE BB.CNT <=10 AND BB.INSPECT_TOTAL_QTY<>0
    GROUP BY BB.G_CODE, BB.CTR_CD
  )
  SELECT 
  M100.FACTORY,
            M100.Setting1,
            M100.Setting2,
            M100.Step1,
            M100.Step2,
            M100.LOSS_SX1,
            M100.LOSS_SX2,
            M100.LOSS_SETTING1,
            M100.LOSS_SETTING2,
            M100.NOTE,
            M100.UPH1,
            M100.UPH2,
            M100.Step3,
            M100.Step4,
            M100.EQ3,
            M100.EQ4,
            M100.UPH3,
            M100.UPH4,
            M100.Setting3,
            M100.Setting4,
            M100.LOSS_SX3,
            M100.LOSS_SX4,
            M100.LOSS_SETTING3,
            M100.LOSS_SETTING4,
            P400.G_CODE,
            M100.PROD_TYPE,
            M100.PROD_MAIN_MATERIAL,
            M100.DESCR,
            M100.PDBV,
            M100.PDBV_EMPL,
            M100.PDBV_DATE,
            M100.G_NAME,
            M100.G_NAME_KD,
            M100.G_WIDTH,
            M100.G_LENGTH,
            M100.PROD_PRINT_TIMES,
            M100.G_C,
            M100.G_C_R,
            M010.EMPL_NAME,
            M010.EMPL_NO,
            M110.CUST_NAME_KD,
            M110.CUST_CD,
            P400.PROD_REQUEST_NO,
            P400.PROD_REQUEST_DATE,
            P400.DELIVERY_DT,
            P400.PL_HANG,
            P400.MATERIAL_YN,
            P400.PROD_REQUEST_QTY,                  
           CASE WHEN (P400.YCSX_PENDING =0 OR isnull(INSPECT_OUTPUT_TB.LOT_TOTAL_OUTPUT_QTY_EA, 0) >= P400.PROD_REQUEST_QTY) THEN 0 ELSE 1 END AS YCSX_PENDING,
            P400.CODE_55 AS PHAN_LOAI,
            P400.REMK AS REMARK,         
            P400.PDUYET,
            P400.CODE_50 AS LOAIXH,
            M100.BANVE,
            M100.NO_INSPECTION,
            isnull(PO_TON.PO_BALANCE, 0) AS PO_BALANCE,
            M100.EQ1,
            M100.EQ2,
            isnull(AA.CD1, 0) AS CD1,
            isnull(AA.CD2, 0) AS CD2,
            isnull(AA.CD3, 0) AS CD3,
            isnull(AA.CD4, 0) AS CD4, 
            isnull(INSPECT_OUTPUT_TB.LOT_TOTAL_OUTPUT_QTY_EA, 0) AS LOT_TOTAL_OUTPUT_QTY_EA,
            PLANTABLE.PROD_REQUEST_NO AS DACHITHI,CASE WHEN M100.PD <> 0 THEN CEILING((P400.PROD_REQUEST_QTY*(1+(isnull(LOSS_SX2,0)+isnull(LOSS_SX3,0)+isnull(LOSS_SX4,0))*1.0/100+isnull(LOSSKT.NG_RATE,0)) + (isnull(LOSS_SETTING2,0)+isnull(LOSS_SETTING3,0)+isnull(LOSS_SETTING4,0))*1.0/M100.PD*(M100.G_C*M100.G_C_R)*1000)) ELSE 0 END AS SLC_CD1,
CASE WHEN M100.PD <> 0 THEN CEILING((P400.PROD_REQUEST_QTY*(1+(isnull(LOSS_SX3,0)+isnull(LOSS_SX4,0))*1.0/100+isnull(LOSSKT.NG_RATE,0)) + (isnull(LOSS_SETTING3,0)+isnull(LOSS_SETTING4,0))*1.0/M100.PD*(M100.G_C*M100.G_C_R)*1000)) ELSE 0 END AS SLC_CD2,
CASE WHEN M100.PD <> 0 THEN CEILING((P400.PROD_REQUEST_QTY*(1+(isnull(LOSS_SX4,0))*1.0/100+isnull(LOSSKT.NG_RATE,0)) + (isnull(LOSS_SETTING4,0))*1.0/M100.PD*(M100.G_C*M100.G_C_R)*1000)) ELSE 0 END AS SLC_CD3,
CASE WHEN M100.PD <> 0 THEN CEILING((P400.PROD_REQUEST_QTY*(1+(0)*1.0/100+isnull(LOSSKT.NG_RATE,0)) + (0)*1.0/M100.PD*(M100.G_C*M100.G_C_R)*1000)) ELSE 0 END AS SLC_CD4
  FROM P400
  LEFT JOIN M100 ON (M100.G_CODE =P400.G_CODE AND M100.CTR_CD =P400.CTR_CD)
  LEFT JOIN M010 ON (M010.EMPL_NO= P400.EMPL_NO AND M010.CTR_CD =P400.CTR_CD)
  LEFT JOIN M110 ON (M110.CUST_CD = P400.CUST_CD AND M110.CTR_CD =P400.CTR_CD)
  LEFT JOIN PO_TON ON (PO_TON.G_CODE = P400.G_CODE AND PO_TON.CTR_CD =P400.CTR_CD)
  LEFT JOIN AA ON (AA.PROD_REQUEST_NO = P400.PROD_REQUEST_NO AND AA.CTR_CD =P400.CTR_CD)         
  LEFT JOIN INSPECT_OUTPUT_TB ON (INSPECT_OUTPUT_TB.PROD_REQUEST_NO = P400.PROD_REQUEST_NO AND INSPECT_OUTPUT_TB.CTR_CD =P400.CTR_CD)
  LEFT JOIN PLANTABLE ON (PLANTABLE.PROD_REQUEST_NO = P400.PROD_REQUEST_NO AND PLANTABLE.CTR_CD =P400.CTR_CD)
LEFT JOIN LOSSKT ON (LOSSKT.G_CODE = P400.G_CODE AND LOSSKT.CTR_CD =P400.CTR_CD)
 ${generate_condition_get_ycsx(
    DATA.alltime,
    DATA.start_date,
    DATA.end_date,
    DATA.cust_name,
    DATA.codeCMS,
    DATA.codeKD,
    DATA.prod_type,
    DATA.empl_name,
    DATA.phanloai,
    DATA.ycsx_pending,
    DATA.prod_request_no,
    DATA.material,
    DATA.inspect_inputcheck,
    DATA.phanloaihang,
    DATA.CTR_CD,
    DATA.material_yes
  )} ORDER BY P400.PROD_REQUEST_NO DESC`;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  ////console.log(checkkq);
  res.send(checkkq);
};
exports.quickcheckycsx_New = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
  WITH  AA AS
  (
    SELECT
      PVTB.PROD_REQUEST_NO,
      isnull(PVTB.[1], 0) AS CD1,
      isnull(PVTB.[2], 0) AS CD2,
      isnull(PVTB.[3], 0) AS CD3,
      isnull(PVTB.[4], 0) AS CD4,
      PVTB.CTR_CD
    FROM
      (
        SELECT
          ZTB_QLSXPLAN.PROD_REQUEST_NO,
          ZTB_QLSXPLAN.PROCESS_NUMBER,
          SUM(isnull(SX_RESULT, 0)) AS KETQUASX,
          ZTB_QLSXPLAN.CTR_CD
        FROM
          ZTB_SX_RESULT
          LEFT JOIN ZTB_QLSXPLAN ON (ZTB_QLSXPLAN.PLAN_ID = ZTB_SX_RESULT.PLAN_ID AND ZTB_QLSXPLAN.CTR_CD = ZTB_SX_RESULT.CTR_CD)
        WHERE
          ZTB_QLSXPLAN.STEP = 0
        GROUP BY
          ZTB_QLSXPLAN.PROD_REQUEST_NO,
          ZTB_QLSXPLAN.PROCESS_NUMBER,
          ZTB_QLSXPLAN.CTR_CD
      ) AS PV PIVOT (
        SUM(PV.KETQUASX) FOR PV.PROCESS_NUMBER IN ([1], [2], [3], [4])
      ) AS PVTB
  ),
LOSSKT AS (
   SELECT BB.G_CODE, SUM(BB.INSPECT_TOTAL_QTY) AS INSPECT_TOTAL_QTY, SUM(BB.TOTAL_NG) AS TOTAL_NG, BB.CTR_CD FROM 
    (
    SELECT AA.G_CODE, AA.INSPECT_DATE,AA.INSPECT_TOTAL_QTY, AA.TOTAL_NG, COUNT(G_CODE) OVER(PARTITION BY G_CODE ORDER BY INSPECT_DATE DESC) AS CNT, AA.CTR_CD 
    FROM 
    (
    SELECT  G_CODE,CAST(INSPECT_DATETIME AS date) AS INSPECT_DATE, SUM(INSPECT_TOTAL_QTY-ERR32) AS INSPECT_TOTAL_QTY, SUM(ERR1+ERR2+ERR3+ERR4+ERR5+ERR6+ERR7+ERR8+ERR9+ERR10+ERR11+ERR12+ERR13+ERR14+ERR15+ERR16+ERR17+ERR18+ERR19+ERR20+ERR21+ERR22+ERR23+ERR24+ERR25+ERR26+ERR27+ERR28+ERR29+ERR30+ERR31
    ) AS TOTAL_NG, CTR_CD FROM ZTBINSPECTNGTB
    GROUP BY G_CODE,CAST(INSPECT_DATETIME AS date), CTR_CD
    ) AS AA
    ) AS BB
    WHERE BB.CNT <=10
    GROUP BY BB.G_CODE, BB.CTR_CD
  ),
ZTB_PROD_PROCESS_TB2 AS (
SELECT CTR_CD,G_CODE,PROCESS_NUMBER,EQ_SERIES,SETTING_TIME,UPH,STEP,LOSS_SX,LOSS_SETTING,INS_DATE,INS_EMPL,UPD_DATE,UPD_EMPL,FACTORY,SUM(LOSS_SX) OVER (PARTITION BY G_CODE ORDER BY PROCESS_NUMBER ROWS BETWEEN 1 FOLLOWING AND UNBOUNDED FOLLOWING) AS Total_LOSS_SX,SUM(LOSS_SETTING) OVER (PARTITION BY G_CODE ORDER BY PROCESS_NUMBER ROWS BETWEEN 1 FOLLOWING AND UNBOUNDED FOLLOWING) AS Total_LOSS_SETTING FROM ZTB_PROD_PROCESS_TB
),
SLCTB AS
(SELECT P400.CTR_CD,P400.G_CODE, P400.PROD_REQUEST_DATE, P400.PROD_REQUEST_NO,P400.PROD_REQUEST_QTY, ZTB_PROD_PROCESS_TB2.PROCESS_NUMBER, CEILING(P400.PROD_REQUEST_QTY*(1+(isnull(ZTB_PROD_PROCESS_TB2.Total_LOSS_SX,0) + isnull(LOSSKT.TOTAL_NG*1.0/LOSSKT.INSPECT_TOTAL_QTY*100,0) )*1.0/100) + isnull(ZTB_PROD_PROCESS_TB2.Total_LOSS_SETTING,0)*1.0/M100.PD*1000*(M100.G_C*M100.G_C_R)) AS SLC  
FROM P400 
LEFT JOIN ZTB_PROD_PROCESS_TB2 ON P400.G_CODE = ZTB_PROD_PROCESS_TB2.G_CODE AND P400.CTR_CD = ZTB_PROD_PROCESS_TB2.CTR_CD
LEFT JOIN M100 ON M100.CTR_CD = P400.CTR_CD AND M100.G_CODE = P400.G_CODE
LEFT JOIN LOSSKT ON LOSSKT.CTR_CD = P400.CTR_CD AND LOSSKT.G_CODE = P400.G_CODE
),
SLC_PVTB AS
(
SELECT SLCTB.CTR_CD, SLCTB.PROD_REQUEST_QTY, SLCTB.G_CODE, SLCTB.PROD_REQUEST_NO, isnull(SLCTB.[1],0) AS SLC_CD1, isnull(SLCTB.[2],0) AS SLC_CD2, isnull(SLCTB.[3],0) AS SLC_CD3, isnull(SLCTB.[4],0) AS SLC_CD4 
FROM (
SELECT 
CTR_CD,
PROD_REQUEST_NO, 
PROD_REQUEST_QTY,
G_CODE,
PROCESS_NUMBER,
SLC
FROM 
SLCTB
) AS SourceTable
PIVOT (
MAX(SLC) FOR PROCESS_NUMBER IN ([1], [2], [3], [4], [5]) -- Add as many process numbers as you have
) AS SLCTB
)
SELECT SLC_PVTB.PROD_REQUEST_NO, SLC_PVTB.PROD_REQUEST_QTY ,SLC_PVTB.G_CODE, M100.G_NAME, M100.G_NAME_KD, AA.CD1,  AA.CD2, AA.CD3, AA.CD4, SLC_PVTB.SLC_CD1,SLC_PVTB.SLC_CD2,SLC_PVTB.SLC_CD3,SLC_PVTB.SLC_CD4, (SLC_PVTB.SLC_CD1-AA.CD1) AS TON_CD1, 
(SLC_PVTB.SLC_CD2-AA.CD2) AS TON_CD2,
(SLC_PVTB.SLC_CD3-AA.CD3) AS TON_CD3,
(SLC_PVTB.SLC_CD4-AA.CD4) AS TON_CD4
FROM SLC_PVTB 
LEFT JOIN AA ON AA.PROD_REQUEST_NO = SLC_PVTB.PROD_REQUEST_NO AND AA.CTR_CD = SLC_PVTB.CTR_CD
LEFT JOIN M100 ON M100.G_CODE = SLC_PVTB.G_CODE AND  M100.CTR_CD = SLC_PVTB.CTR_CD
  WHERE SLC_PVTB.PROD_REQUEST_NO='${DATA.PROD_REQUEST_NO}' AND SLC_PVTB.CTR_CD='${DATA.CTR_CD}'
    `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  ////console.log(checkkq);
  res.send(checkkq);
};
exports.getProductionPlanCapaData = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `          
  DECLARE @worktime int;
  SET @worktime = 900;
  WITH PLTB AS
  (
  SELECT ZTB_PROD_PLAN_TB.*,
  CASE
    WHEN PROCESS_NUMBER = 1 THEN isnull(UPH1,1)
    WHEN PROCESS_NUMBER = 2 THEN isnull(UPH2,1)
    WHEN PROCESS_NUMBER = 3 THEN isnull(UPH3,1)
    WHEN PROCESS_NUMBER = 4 THEN isnull(UPH4,1)
    ELSE 1
  END AS UPH,
  CASE
    WHEN PROCESS_NUMBER = 1 THEN isnull(Setting1,9999)
    WHEN PROCESS_NUMBER = 2 THEN isnull(Setting2,9999)
    WHEN PROCESS_NUMBER = 3 THEN isnull(Setting3,9999)
    WHEN PROCESS_NUMBER = 4 THEN isnull(Setting4,9999)
    ELSE 99999
  END AS Setting,
  CASE
    WHEN PROCESS_NUMBER = 1 THEN isnull(Step1,1)
    WHEN PROCESS_NUMBER = 2 THEN isnull(Step2,1)
    WHEN PROCESS_NUMBER = 3 THEN isnull(Step3,1)
    WHEN PROCESS_NUMBER = 4 THEN isnull(Step4,1)
    ELSE 1
  END AS Step
  FROM ZTB_PROD_PLAN_TB
  LEFT JOIN M100 ON M100.G_CODE = ZTB_PROD_PLAN_TB.G_CODE AND M100.CTR_CD = ZTB_PROD_PLAN_TB.CTR_CD
  WHERE PLAN_DATE='${DATA.PLAN_DATE}'
  ),
  LEATIMETB1 AS
  (
    SELECT PLTB.*, 
    CASE WHEN D1 <> 0 THEN (D1*1.0/UPH*Step + Setting*1.0/60) ELSE 0 END AS LT01,
    CASE WHEN D2 <> 0 THEN (D2*1.0/UPH*Step + Setting*1.0/60) ELSE 0 END AS LT02,
    CASE WHEN D3 <> 0 THEN (D3*1.0/UPH*Step + Setting*1.0/60) ELSE 0 END AS LT03,
    CASE WHEN D4 <> 0 THEN (D4*1.0/UPH*Step + Setting*1.0/60) ELSE 0 END AS LT04,
    CASE WHEN D5 <> 0 THEN (D5*1.0/UPH*Step + Setting*1.0/60) ELSE 0 END AS LT05,
    CASE WHEN D6 <> 0 THEN (D6*1.0/UPH*Step + Setting*1.0/60) ELSE 0 END AS LT06,
    CASE WHEN D7 <> 0 THEN (D7*1.0/UPH*Step + Setting*1.0/60) ELSE 0 END AS LT07,
    CASE WHEN D8 <> 0 THEN (D8*1.0/UPH*Step + Setting*1.0/60) ELSE 0 END AS LT08,
    CASE WHEN D9 <> 0 THEN (D9*1.0/UPH*Step + Setting*1.0/60) ELSE 0 END AS LT09,
    CASE WHEN D10 <> 0 THEN (D10*1.0/UPH*Step + Setting*1.0/60) ELSE 0 END AS LT10,
    CASE WHEN D11 <> 0 THEN (D11*1.0/UPH*Step + Setting*1.0/60) ELSE 0 END AS LT11,
    CASE WHEN D12 <> 0 THEN (D12*1.0/UPH*Step + Setting*1.0/60) ELSE 0 END AS LT12,
    CASE WHEN D13 <> 0 THEN (D13*1.0/UPH*Step + Setting*1.0/60) ELSE 0 END AS LT13,
    CASE WHEN D14 <> 0 THEN (D14*1.0/UPH*Step + Setting*1.0/60) ELSE 0 END AS LT14,
    CASE WHEN D15 <> 0 THEN (D15*1.0/UPH*Step + Setting*1.0/60) ELSE 0 END AS LT15
  FROM PLTB
  ),
  LEADTIMETB2 AS
  (
  SELECT CTR_CD, EQ_SERIES, 
  SUM(LT01) AS LT01, 
  SUM(LT02) AS LT02,
  SUM(LT03) AS LT03,
  SUM(LT04) AS LT04,
  SUM(LT05) AS LT05,
  SUM(LT06) AS LT06,
  SUM(LT07) AS LT07,
  SUM(LT08) AS LT08,
  SUM(LT09) AS LT09,
  SUM(LT10) AS LT10,
  SUM(LT11) AS LT11,
  SUM(LT12) AS LT12,
  SUM(LT13) AS LT13,
  SUM(LT14) AS LT14,
  SUM(LT15) AS LT15
  FROM LEATIMETB1 WHERE CTR_CD ='${DATA.CTR_CD}' GROUP BY CTR_CD,EQ_SERIES
  ),
  UnPivot_LeadTime AS (
      SELECT 
          EQ_SERIES, Attribute AS PROD_DATE,
          Value AS LEADTIME
      FROM LEADTIMETB2
      UNPIVOT
      (
          Value FOR Attribute IN (LT01, LT02, LT03, LT04, LT05, LT06, LT07,LT08, LT09, LT10, LT11, LT12, LT13, LT14, LT15)
      ) AS Unpvt
  ),
  EQ_SERIES AS
            (
            SELECT DISTINCT SUBSTRING(EQ_NAME,1,2) AS EQ_SERIES FROM ZTB_SX_EQ_STATUS WHERE CTR_CD='${DATA.CTR_CD}'
            ),
            EQ_OP_TB AS
            (
            SELECT SUBSTRING(EQ_NAME,1,2) AS EQ_SERIES,COUNT(EQ_NAME) AS EQ_QTY, SUM(EQ_OP)*2 AS EQ_OP, AVG(EQ_OP) AS AVG_EQ_OP, COUNT(EQ_NAME) * @worktime AS MAN_FULL_CAPA  FROM ZTB_SX_EQ_STATUS WHERE EQ_ACTIVE='OK' AND CTR_CD='002' GROUP BY SUBSTRING(EQ_NAME,1,2)
            ),
            RETAIN_WF_TB AS
            (
            SELECT SUBSTRING(ZTBWORKPOSITION.WORK_POSITION_NAME,4,2) AS EQ_SERIES, ZTBWORKPOSITION.WORK_POSITION_NAME, ZTBJOB.JOB_NAME, ZTBSUBDEPARTMENT.SUBDEPTNAME, ZTBMAINDEPARMENT.MAINDEPTNAME FROM ZTBEMPLINFO
            LEFT JOIN ZTBWORKPOSITION ON ZTBEMPLINFO.WORK_POSITION_CODE = ZTBWORKPOSITION.WORK_POSITION_CODE AND ZTBEMPLINFO.CTR_CD = ZTBWORKPOSITION.CTR_CD
            LEFT JOIN ZTBJOB ON ZTBEMPLINFO.JOB_CODE = ZTBJOB.JOB_CODE AND ZTBEMPLINFO.CTR_CD = ZTBJOB.CTR_CD
            LEFT JOIN ZTBSUBDEPARTMENT ON ZTBWORKPOSITION.SUBDEPTCODE = ZTBSUBDEPARTMENT.SUBDEPTCODE  AND ZTBWORKPOSITION.CTR_CD = ZTBSUBDEPARTMENT.CTR_CD
            LEFT JOIN ZTBMAINDEPARMENT ON ZTBSUBDEPARTMENT.MAINDEPTCODE = ZTBMAINDEPARMENT.MAINDEPTCODE AND ZTBSUBDEPARTMENT.CTR_CD = ZTBMAINDEPARMENT.CTR_CD
            WHERE ZTBJOB.JOB_NAME='Worker' AND ZTBMAINDEPARMENT.MAINDEPTNAME = 'SX' AND ZTBWORKPOSITION.WORK_POSITION_NAME<>'SX_VP' AND ZTBEMPLINFO.WORK_STATUS_CODE = 1 AND ZTBEMPLINFO.CTR_CD='${DATA.CTR_CD}'
            ),
            RETAIN_WF_BY_SERIES AS
            (
              SELECT EQ_SERIES, COUNT(EQ_SERIES) AS RETAIN_WF, COUNT(EQ_SERIES) * @worktime*1.0/2 AS RETAIN_WF_CAPA FROM RETAIN_WF_TB
              GROUP BY EQ_SERIES
            ),
            ATT_WF_TB AS
            (
              SELECT SUBSTRING(ZTBWORKPOSITION.WORK_POSITION_NAME,4,2) AS EQ_SERIES, ZTBWORKPOSITION.WORK_POSITION_NAME, ZTBJOB.JOB_NAME, ZTBSUBDEPARTMENT.SUBDEPTNAME, ZTBMAINDEPARMENT.MAINDEPTNAME FROM ZTBATTENDANCETB
              LEFT JOIN ZTBEMPLINFO ON ZTBEMPLINFO.EMPL_NO = ZTBATTENDANCETB.EMPL_NO AND  ZTBEMPLINFO.CTR_CD = ZTBATTENDANCETB.CTR_CD
              LEFT JOIN ZTBWORKPOSITION ON ZTBEMPLINFO.WORK_POSITION_CODE = ZTBWORKPOSITION.WORK_POSITION_CODE AND ZTBEMPLINFO.CTR_CD = ZTBWORKPOSITION.CTR_CD
            LEFT JOIN ZTBJOB ON ZTBEMPLINFO.JOB_CODE = ZTBJOB.JOB_CODE AND ZTBEMPLINFO.CTR_CD = ZTBJOB.CTR_CD
            LEFT JOIN ZTBSUBDEPARTMENT ON ZTBWORKPOSITION.SUBDEPTCODE = ZTBSUBDEPARTMENT.SUBDEPTCODE  AND ZTBWORKPOSITION.CTR_CD = ZTBSUBDEPARTMENT.CTR_CD
            LEFT JOIN ZTBMAINDEPARMENT ON ZTBSUBDEPARTMENT.MAINDEPTCODE = ZTBMAINDEPARMENT.MAINDEPTCODE AND ZTBSUBDEPARTMENT.CTR_CD = ZTBMAINDEPARMENT.CTR_CD
            WHERE ZTBATTENDANCETB.ON_OFF=1 AND ZTBJOB.JOB_NAME='Worker' AND ZTBMAINDEPARMENT.MAINDEPTNAME = 'SX' AND ZTBWORKPOSITION.WORK_POSITION_NAME<>'SX_VP' AND ZTBEMPLINFO.WORK_STATUS_CODE = 1 AND ZTBEMPLINFO.CTR_CD='${DATA.CTR_CD}' AND APPLY_DATE = CAST(GETDATE() as date)
            ),
            ATT_WF_BY_SERIES AS
            (
            SELECT EQ_SERIES, COUNT(EQ_SERIES) AS ATT_WF, COUNT(EQ_SERIES) * @worktime*1.0/2 AS ATT_WF_CAPA FROM ATT_WF_TB GROUP BY EQ_SERIES
            )
  SELECT UnPivot_LeadTime.*, EQ_OP_TB.MAN_FULL_CAPA*1.0/60 AS EQ_CAPA, EQ_OP_TB.MAN_FULL_CAPA*1.0/60*1.333333 AS EQ_CAPA_12H, RETAIN_WF_BY_SERIES.RETAIN_WF_CAPA*1.0/60 AS RETAIN_WF_CAPA, ATT_WF_BY_SERIES.ATT_WF_CAPA*1.0/60 AS ATT_WF_CAPA,RETAIN_WF_BY_SERIES.RETAIN_WF_CAPA*1.0/60*1.333333 AS RETAIN_WF_CAPA_12H,ATT_WF_BY_SERIES.ATT_WF_CAPA*1.0/60*1.333333 AS ATT_WF_CAPA_12H  FROM UnPivot_LeadTime 
  LEFT JOIN EQ_OP_TB ON (UnPivot_LeadTime.EQ_SERIES = EQ_OP_TB.EQ_SERIES)
  LEFT JOIN RETAIN_WF_BY_SERIES ON (UnPivot_LeadTime.EQ_SERIES = RETAIN_WF_BY_SERIES.EQ_SERIES)
  LEFT JOIN ATT_WF_BY_SERIES ON (UnPivot_LeadTime.EQ_SERIES = ATT_WF_BY_SERIES.EQ_SERIES)
  ORDER BY UnPivot_LeadTime.EQ_SERIES ASC, UnPivot_LeadTime.PROD_DATE ASC
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.loadDefectProcessData = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = ` WHERE ZTB_NG_SX100.CTR_CD='${DATA.CTR_CD}'`
  if (DATA.G_CODE && DATA.G_CODE !== '') condition += ` AND ZTB_NG_SX100.G_CODE='${DATA.G_CODE}' `
  if (DATA.PROCESS_NUMBER && DATA.PROCESS_NUMBER !== -1) condition += ` AND ZTB_NG_SX100.PROCESS_NUMBER=${DATA.PROCESS_NUMBER} `
  if (DATA.G_NAME && DATA.G_NAME !== '') condition += ` AND G_NAME LIKE '%${DATA.G_NAME}%'`
  if (DATA.USE_YN) condition += ` AND ZTB_NG_SX100.USE_YN='${DATA.USE_YN}' `
  if (!DATA.USE_YN) condition += ` AND ZTB_NG_SX100.USE_YN='Y' `
  let setpdQuery = `
  SELECT ZTB_NG_SX100.*, M100.G_NAME, M100.PROD_TYPE, M100.DESCR, M100.PROD_MODEL FROM ZTB_NG_SX100
  LEFT JOIN M100 ON M100.G_CODE = ZTB_NG_SX100.G_CODE AND M100.CTR_CD = ZTB_NG_SX100.CTR_CD
   ${condition} ORDER BY G_CODE, PROCESS_NUMBER, STT
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.lichsuinputlieusanxuat_full = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = "WHERE 1=1";
  if (DATA.ALLTIME === false) {
    condition += ` AND P500.INS_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE} 23:59:59' `;
  }
  if (DATA.PROD_REQUEST_NO !== "") {
    condition += ` AND P500.PROD_REQUEST_NO = '${DATA.PROD_REQUEST_NO}'`;
  }
  if (DATA.PLAN_ID !== "") {
    condition += ` AND P500.PLAN_ID = '${DATA.PLAN_ID}'`;
  }
  if (DATA.M_NAME !== "") {
    condition += ` AND M090.M_NAME LIKE '%${DATA.M_NAME}%'`;
  }
  if (DATA.M_CODE !== "") {
    condition += ` AND P500.M_CODE = '${DATA.M_CODE}'`;
  }
  if (DATA.G_CODE !== "") {
    condition += ` AND M100.G_CODE = '${DATA.G_CODE}'`;
  }
  if (DATA.G_NAME !== "") {
    condition += ` AND M100.G_NAME LIKE '%${DATA.G_NAME}%'`;
  }
  let setpdQuery = `SELECT P500.PLAN_ID, P500.PROD_REQUEST_NO, M100.G_NAME,M100.G_CODE, M100.G_NAME_KD, P500.M_CODE, M090.M_NAME, M090.WIDTH_CD, P500.M_LOT_NO,I222.LOTNCC,  isnull(P500.INPUT_QTY,(isnull(BB.TOTAL_OUT_QTY,0)))  AS INPUT_QTY, isnull(P500.INPUT_QTY,(isnull(BB.TOTAL_OUT_QTY,0)))- isnull(P500.REMAIN_QTY,0) AS USED_QTY ,isnull(P500.REMAIN_QTY,0) AS REMAIN_QTY, P500.EMPL_NO, P500.EQUIPMENT_CD, P500.INS_DATE FROM P500
  LEFT JOIN M100 ON (M100.G_CODE = P500.G_CODE AND M100.CTR_CD = P500.CTR_CD)
  LEFT JOIN M090 ON (M090.M_CODE = P500.M_CODE AND M090.CTR_CD = P500.CTR_CD)
  LEFT JOIN  
  (SELECT PLAN_ID_SUDUNG, M_CODE, M_LOT_NO, CTR_CD, isnull(SUM(TOTAL_IN_QTY),0) AS TOTAL_OUT_QTY  FROM IN_KHO_SX  GROUP BY PLAN_ID_SUDUNG, M_CODE, M_LOT_NO, CTR_CD) AS BB 
ON (BB.PLAN_ID_SUDUNG = P500.PLAN_ID AND BB.M_CODE = P500.M_CODE AND BB.M_LOT_NO=P500.M_LOT_NO AND BB.CTR_CD = P500.CTR_CD)
LEFT JOIN I222 ON I222.M_LOT_NO = P500.M_LOT_NO AND I222.CTR_CD = P500.CTR_CD  ${condition} AND P500.CTR_CD='${DATA.CTR_CD}'
            ORDER BY INS_DATE DESC `;
  //${moment().format('YYYY-MM-DD')}
  ////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.lichsunhapkhoao = async (req, res, DATA) => {
  let checkkq = "OK";
  let conditon = ` WHERE IN_KHO_SX.INS_DATE BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE} 23:59:59'`;
  if (DATA.FACTORY !== "ALL") {
    conditon += ` AND IN_KHO_SX.FACTORY = '${DATA.FACTORY}' `;
  }
  if (DATA.M_LOT_NO !== undefined) {
    conditon += ` AND IN_KHO_SX.M_LOT_NO='${DATA.M_LOT_NO}'`
  }
  let setpdQuery = `SELECT  IN_KHO_SX.IN_KHO_ID, IN_KHO_SX.USE_YN, IN_KHO_SX.REMARK, IN_KHO_SX.PLAN_ID_SUDUNG, IN_KHO_SX.FACTORY, IN_KHO_SX.PHANLOAI, IN_KHO_SX.M_CODE, M090.M_NAME, M090.WIDTH_CD, IN_KHO_SX.M_LOT_NO, IN_KHO_SX.PLAN_ID_INPUT, IN_KHO_SX.ROLL_QTY, IN_KHO_SX.IN_QTY, IN_KHO_SX.TOTAL_IN_QTY, IN_KHO_SX.INS_DATE, IN_KHO_SX.INS_EMPL, RETURN_NVL.UPD_DATE  AS KHO_CFM_DATE, RETURN_NVL.USE_YN AS RETURN_STATUS FROM IN_KHO_SX 
LEFT JOIN M090 ON (M090.M_CODE = IN_KHO_SX.M_CODE AND M090.CTR_CD = IN_KHO_SX.CTR_CD) 
LEFT JOIN RETURN_NVL ON (IN_KHO_SX.PLAN_ID_INPUT = RETURN_NVL.LAST_PLAN_ID AND IN_KHO_SX.M_LOT_NO = RETURN_NVL.M_LOT_NO AND RETURN_NVL.CTR_CD = IN_KHO_SX.CTR_CD) ${conditon} AND IN_KHO_SX.CTR_CD='${DATA.CTR_CD}' ORDER BY IN_KHO_SX.INS_DATE DESC`;
  //${moment().format('YYYY-MM-DD')}
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.loadDataSX_YCSX = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = " WHERE PROD_REQUEST_NO1 is not null  ";
  if (DATA.ALLTIME === false) {
    condition += ` AND P400.PROD_REQUEST_DATE BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE}'`;
  }
  if (DATA.G_NAME !== "") {
    condition += ` AND M100.G_NAME LIKE '%${DATA.G_NAME}%'`;
  }
  if (DATA.G_CODE !== "") {
    condition += ` AND M100.G_CODE = '${DATA.G_CODE}'`;
  }
  if (DATA.PROD_REQUEST_NO !== "") {
    condition += ` AND P400.PROD_REQUEST_NO = '${DATA.PROD_REQUEST_NO}'`;
  }
  if (DATA.FACTORY !== "ALL") {
    condition += ` AND M100.FACTORY = '${DATA.FACTORY}'`;
  }
  if (DATA.M_NAME !== "") {
    condition += ` AND isnull(isnull(WAREHOUSE_OUT.M_NAME, AA.M_NAME),BB.M_NAME) LIKE '%${DATA.M_NAME}%'`;
  }
  if (DATA.TRUSAMPLE) {
    condition += ` AND P400.CODE_55 <> '04'`;
  }
  if (DATA.ONLYCLOSE) {
    condition += ` AND (isnull(INS_OUTPUT_TB.INS_OUTPUT,0) >= P400.PROD_REQUEST_QTY  OR P400.YCSX_PENDING=0) `
  }
  let setpdQuery = ` 
    WITH KQSXTABLE  AS
(SELECT PVTB.CTR_CD, PVTB.PROD_REQUEST_NO, isnull(PVTB.[1],0) AS CD1, isnull(PVTB.[2],0) AS CD2,isnull(PVTB.[3],0) AS CD3,isnull(PVTB.[4],0) AS CD4 FROM
(
SELECT ZTB_QLSXPLAN.CTR_CD, ZTB_QLSXPLAN.PROD_REQUEST_NO, ZTB_QLSXPLAN.PROCESS_NUMBER, SUM(isnull(SX_RESULT,0)) AS KETQUASX FROM ZTB_SX_RESULT LEFT JOIN ZTB_QLSXPLAN ON (ZTB_QLSXPLAN.PLAN_ID = ZTB_SX_RESULT.PLAN_ID AND ZTB_QLSXPLAN.CTR_CD = ZTB_SX_RESULT.CTR_CD) WHERE ZTB_QLSXPLAN.STEP=0 GROUP BY ZTB_QLSXPLAN.PROD_REQUEST_NO, ZTB_QLSXPLAN.PROCESS_NUMBER, ZTB_QLSXPLAN.CTR_CD
)
AS PV
PIVOT
(
SUM(PV.KETQUASX) FOR PV.PROCESS_NUMBER IN ([1],[2],[3],[4])
)
AS PVTB),
SX_RESULT_PD_CAVITY AS (
SELECT DISTINCT PLAN_ID, PD, CAVITY, CTR_CD FROM ZTB_SX_RESULT
),
KQSX_ST_TABLE AS (SELECT PVTB.CTR_CD, PVTB.PROD_REQUEST_NO, isnull(PVTB.[1],0) AS ST1, isnull(PVTB.[2],0) AS ST2,isnull(PVTB.[3],0) AS ST3,isnull(PVTB.[4],0) AS ST4 FROM 
(
SELECT ZTB_QLSXPLAN.CTR_CD, ZTB_QLSXPLAN.PROD_REQUEST_NO, ZTB_QLSXPLAN.PROCESS_NUMBER, SUM(isnull(SETTING_MET,0)) AS SETTING_MET FROM ZTB_SX_RESULT LEFT JOIN ZTB_QLSXPLAN ON (ZTB_QLSXPLAN.PLAN_ID = ZTB_SX_RESULT.PLAN_ID AND ZTB_QLSXPLAN.CTR_CD = ZTB_SX_RESULT.CTR_CD) WHERE ZTB_QLSXPLAN.STEP=0 GROUP BY ZTB_QLSXPLAN.PROD_REQUEST_NO, ZTB_QLSXPLAN.PROCESS_NUMBER, ZTB_QLSXPLAN.CTR_CD
)
AS PV
PIVOT
(
SUM(PV.SETTING_MET) FOR PV.PROCESS_NUMBER IN ([1],[2],[3],[4])
)
AS PVTB),
KQSX_NG_TABLE AS (
SELECT PVTB.CTR_CD, PVTB.PROD_REQUEST_NO, isnull(PVTB.[1],0) AS NG1, isnull(PVTB.[2],0) AS NG2,isnull(PVTB.[3],0) AS NG3,isnull(PVTB.[4],0) AS NG4 FROM
(
SELECT ZTB_QLSXPLAN.CTR_CD, ZTB_QLSXPLAN.PROD_REQUEST_NO, ZTB_QLSXPLAN.PROCESS_NUMBER, SUM(isnull(NG_MET,0)) AS NG_MET FROM ZTB_SX_RESULT LEFT JOIN ZTB_QLSXPLAN ON (ZTB_QLSXPLAN.PLAN_ID = ZTB_SX_RESULT.PLAN_ID AND ZTB_QLSXPLAN.CTR_CD = ZTB_SX_RESULT.CTR_CD) WHERE ZTB_QLSXPLAN.STEP=0 GROUP BY ZTB_QLSXPLAN.PROD_REQUEST_NO, ZTB_QLSXPLAN.PROCESS_NUMBER, ZTB_QLSXPLAN.CTR_CD
)
AS PV
PIVOT
(
SUM(PV.NG_MET) FOR PV.PROCESS_NUMBER IN ([1],[2],[3],[4])
)
AS PVTB
),
INS_INPUT_TB AS  (SELECT  PROD_REQUEST_NO, SUM(INPUT_QTY_EA) AS INS_INPUT, CTR_CD FROM ZTBINSPECTINPUTTB GROUP BY PROD_REQUEST_NO, CTR_CD),
INS_OUTPUT_TB AS (SELECT  PROD_REQUEST_NO, SUM(OUTPUT_QTY_EA) AS INS_OUTPUT, CTR_CD FROM ZTBINSPECTOUTPUTTB WHERE SORTING='N' GROUP BY PROD_REQUEST_NO, CTR_CD),
ZTB_QLSXPLAN_A AS (SELECT DISTINCT PROD_REQUEST_NO AS PROD_REQUEST_NO1, CTR_CD FROM ZTB_QLSXPLAN),
AA AS (
SELECT ZTB_QLSXPLAN.PROD_REQUEST_NO,M090.M_NAME, SUM(isnull(TOTAL_IN_QTY, 0)) AS INPUT_QTY,SUM(isnull(TOTAL_IN_QTY, 0)*1.0/ZTB_SX_RESULT.PD* ZTB_SX_RESULT.CAVITY*1000)  AS WAREHOUSE_ESTIMATED_QTY, ZTB_QLSXPLAN.CTR_CD
FROM IN_KHO_SX
LEFT JOIN M090 ON (M090.M_CODE = IN_KHO_SX.M_CODE AND M090.CTR_CD = IN_KHO_SX.CTR_CD)
LEFT JOIN ZTB_QLSXPLAN ON (ZTB_QLSXPLAN.PLAN_ID = IN_KHO_SX.PLAN_ID_INPUT AND ZTB_QLSXPLAN.CTR_CD = IN_KHO_SX.CTR_CD)
LEFT JOIN ZTB_SX_RESULT ON (ZTB_QLSXPLAN.PLAN_ID = ZTB_SX_RESULT.PLAN_ID AND ZTB_QLSXPLAN.CTR_CD = ZTB_SX_RESULT.CTR_CD)
WHERE IN_KHO_SX.USE_YN = 'X' AND ZTB_QLSXPLAN.PROCESS_NUMBER=1 AND isnull(IN_KHO_SX.REMARK,'') <> 'TRA_KHO'
GROUP BY ZTB_QLSXPLAN.PROD_REQUEST_NO,M090.M_NAME, ZTB_QLSXPLAN.CTR_CD
),
BB AS (
SELECT P500.PROD_REQUEST_NO,M090.M_NAME,SUM(isnull(P500.REMAIN_QTY, 0)) AS REMAIN_QTY,SUM(isnull(P500.INPUT_QTY, 0))  AS INPUT_QTY,SUM((isnull(P500.INPUT_QTY, 0)-isnull(P500.REMAIN_QTY, 0))*1.0/ZTB_SX_RESULT.PD* ZTB_SX_RESULT.CAVITY*1000) AS ESTIMATED_QTY, P500.CTR_CD
FROM P500
LEFT JOIN M090 ON (M090.M_CODE = P500.M_CODE AND M090.CTR_CD = P500.CTR_CD)
LEFT JOIN ZTB_QLSXPLAN ON (ZTB_QLSXPLAN.PLAN_ID = P500.PLAN_ID AND ZTB_QLSXPLAN.CTR_CD = P500.CTR_CD)
LEFT JOIN ZTB_SX_RESULT ON (ZTB_QLSXPLAN.PLAN_ID = ZTB_SX_RESULT.PLAN_ID AND ZTB_QLSXPLAN.CTR_CD = ZTB_SX_RESULT.CTR_CD)
WHERE ZTB_QLSXPLAN.PROCESS_NUMBER=1
GROUP BY P500.PROD_REQUEST_NO,M090.M_NAME, P500.CTR_CD),
WAREHOUSE_OUT AS (
SELECT ZTB_QLSXPLAN.PROD_REQUEST_NO,M090.M_NAME,SUM(isnull(TOTAL_IN_QTY, 0)) AS WAREHOUSE_OUTPUT_QTY, SUM(isnull(TOTAL_IN_QTY, 0)*1.0/ZTB_SX_RESULT.PD* ZTB_SX_RESULT.CAVITY*1000)  AS WAREHOUSE_ESTIMATED_QTY, ZTB_QLSXPLAN.CTR_CD
FROM IN_KHO_SX
LEFT JOIN M090 ON (M090.M_CODE = IN_KHO_SX.M_CODE AND M090.CTR_CD = IN_KHO_SX.CTR_CD)
LEFT JOIN ZTB_QLSXPLAN ON (ZTB_QLSXPLAN.PLAN_ID = IN_KHO_SX.PLAN_ID_INPUT AND ZTB_QLSXPLAN.CTR_CD = IN_KHO_SX.CTR_CD)
LEFT JOIN ZTB_SX_RESULT ON (ZTB_QLSXPLAN.PLAN_ID = ZTB_SX_RESULT.PLAN_ID AND ZTB_QLSXPLAN.CTR_CD = ZTB_SX_RESULT.CTR_CD)
WHERE IN_KHO_SX.PHANLOAI = 'N'
GROUP BY ZTB_QLSXPLAN.PROD_REQUEST_NO,M090.M_NAME, ZTB_QLSXPLAN.CTR_CD
),
CC AS (
SELECT ZTB_QLSXPLAN.PROD_REQUEST_NO,M090.M_NAME,SUM(isnull(TOTAL_IN_QTY, 0)) AS RETURN_QTY, ZTB_QLSXPLAN.CTR_CD
FROM IN_KHO_SX
LEFT JOIN M090 ON (M090.M_CODE = IN_KHO_SX.M_CODE AND M090.CTR_CD = IN_KHO_SX.CTR_CD)
LEFT JOIN ZTB_QLSXPLAN ON (ZTB_QLSXPLAN.PLAN_ID = IN_KHO_SX.PLAN_ID_INPUT AND ZTB_QLSXPLAN.CTR_CD = IN_KHO_SX.CTR_CD)
WHERE IN_KHO_SX.REMARK='TRA_KHO' AND PLAN_ID_SUDUNG is null
GROUP BY ZTB_QLSXPLAN.PROD_REQUEST_NO,M090.M_NAME, ZTB_QLSXPLAN.CTR_CD
),
DD AS (
SELECT ZTB_QLSXPLAN.PROD_REQUEST_NO,M090.M_NAME,SUM(isnull(TOTAL_IN_QTY, 0)) AS NEXT_OUT_QTY, ZTB_QLSXPLAN.CTR_CD
FROM IN_KHO_SX
LEFT JOIN M090 ON (M090.M_CODE = IN_KHO_SX.M_CODE AND M090.CTR_CD = IN_KHO_SX.CTR_CD)
LEFT JOIN ZTB_QLSXPLAN ON (ZTB_QLSXPLAN.PLAN_ID = IN_KHO_SX.PLAN_ID_INPUT AND ZTB_QLSXPLAN.CTR_CD = IN_KHO_SX.CTR_CD)
LEFT JOIN (SELECT * FROM ZTB_QLSXPLAN) AS ZTB_QLSXPLAN_A ON (ZTB_QLSXPLAN_A.PLAN_ID = IN_KHO_SX.PLAN_ID_SUDUNG AND ZTB_QLSXPLAN_A.CTR_CD = IN_KHO_SX.CTR_CD) 
WHERE ZTB_QLSXPLAN_A.PROD_REQUEST_NO <> ZTB_QLSXPLAN.PROD_REQUEST_NO AND IN_KHO_SX.USE_YN = 'X' AND isnull(IN_KHO_SX.REMARK,'') <> 'TRA_KHO'
GROUP BY ZTB_QLSXPLAN.PROD_REQUEST_NO,M090.M_NAME, ZTB_QLSXPLAN.CTR_CD),
EE AS (
SELECT ZTB_QLSXPLAN_A.PROD_REQUEST_NO,M090.M_NAME,SUM(isnull(TOTAL_IN_QTY, 0)) AS NEXT_IN_QTY, ZTB_QLSXPLAN_A.CTR_CD
FROM IN_KHO_SX
LEFT JOIN M090 ON (M090.M_CODE = IN_KHO_SX.M_CODE AND M090.CTR_CD = IN_KHO_SX.CTR_CD)
LEFT JOIN ZTB_QLSXPLAN ON (ZTB_QLSXPLAN.PLAN_ID = IN_KHO_SX.PLAN_ID_INPUT AND ZTB_QLSXPLAN.CTR_CD = IN_KHO_SX.CTR_CD)
LEFT JOIN (SELECT * FROM ZTB_QLSXPLAN) AS ZTB_QLSXPLAN_A ON (ZTB_QLSXPLAN_A.PLAN_ID = IN_KHO_SX.PLAN_ID_SUDUNG AND ZTB_QLSXPLAN_A.CTR_CD = IN_KHO_SX.CTR_CD) 
WHERE ZTB_QLSXPLAN_A.PROD_REQUEST_NO <> ZTB_QLSXPLAN.PROD_REQUEST_NO
GROUP BY ZTB_QLSXPLAN_A.PROD_REQUEST_NO,M090.M_NAME, ZTB_QLSXPLAN_A.CTR_CD),
FF AS (
SELECT ZTB_QLSXPLAN.PROD_REQUEST_NO,M090.M_NAME,SUM(isnull(TOTAL_IN_QTY, 0)) AS TON_KHO_AO, ZTB_QLSXPLAN.CTR_CD
FROM IN_KHO_SX
LEFT JOIN M090 ON (M090.M_CODE = IN_KHO_SX.M_CODE AND M090.CTR_CD = IN_KHO_SX.CTR_CD)
LEFT JOIN ZTB_QLSXPLAN ON (ZTB_QLSXPLAN.PLAN_ID = IN_KHO_SX.PLAN_ID_INPUT AND ZTB_QLSXPLAN.CTR_CD = IN_KHO_SX.CTR_CD)
WHERE IN_KHO_SX.USE_YN='Y'
GROUP BY ZTB_QLSXPLAN.PROD_REQUEST_NO,M090.M_NAME, ZTB_QLSXPLAN.CTR_CD),
GG AS (
SELECT ZTB_QLSXPLAN.PROD_REQUEST_NO,M090.M_NAME,SUM(isnull(TOTAL_IN_QTY, 0)) AS LOCK_QTY, ZTB_QLSXPLAN.CTR_CD
FROM IN_KHO_SX
LEFT JOIN M090 ON (M090.M_CODE = IN_KHO_SX.M_CODE AND M090.CTR_CD = IN_KHO_SX.CTR_CD)
LEFT JOIN ZTB_QLSXPLAN ON (ZTB_QLSXPLAN.PLAN_ID = IN_KHO_SX.PLAN_ID_INPUT AND ZTB_QLSXPLAN.CTR_CD = IN_KHO_SX.CTR_CD)
WHERE IN_KHO_SX.USE_YN='O'
GROUP BY ZTB_QLSXPLAN.PROD_REQUEST_NO,M090.M_NAME, ZTB_QLSXPLAN.CTR_CD),
HH AS (
SELECT  ZTB_SX_NG_MATERIAL.CTR_CD,ZTB_QLSXPLAN.PROD_REQUEST_NO, M090.M_NAME, SUM(TOTAL_IN_QTY) AS RETURN_IQC   
FROM ZTB_SX_NG_MATERIAL 
LEFT JOIN M090 ON M090.CTR_CD=  ZTB_SX_NG_MATERIAL.CTR_CD AND M090.M_CODE=  ZTB_SX_NG_MATERIAL.M_CODE 
LEFT JOIN ZTB_QLSXPLAN ON ZTB_QLSXPLAN.CTR_CD=  ZTB_SX_NG_MATERIAL.CTR_CD AND ZTB_QLSXPLAN.PLAN_ID = ZTB_SX_NG_MATERIAL.PLAN_ID_SUDUNG
WHERE LIEUQL_SX = 1 AND ZTB_SX_NG_MATERIAL.CTR_CD ='002' AND ZTB_QLSXPLAN.PROCESS_NUMBER =1
GROUP BY ZTB_SX_NG_MATERIAL.CTR_CD,ZTB_QLSXPLAN.PROD_REQUEST_NO, M090.M_NAME
),
II AS (
SELECT  ZTB_SX_NG_MATERIAL.CTR_CD,ZTB_QLSXPLAN.PROD_REQUEST_NO, M090.M_NAME, SUM(TOTAL_IN_QTY) AS IQC_IN   
FROM ZTB_SX_NG_MATERIAL 
LEFT JOIN M090 ON M090.CTR_CD=  ZTB_SX_NG_MATERIAL.CTR_CD AND M090.M_CODE=  ZTB_SX_NG_MATERIAL.M_CODE 
LEFT JOIN ZTB_QLSXPLAN ON ZTB_QLSXPLAN.CTR_CD=  ZTB_SX_NG_MATERIAL.CTR_CD AND ZTB_QLSXPLAN.PLAN_ID = ZTB_SX_NG_MATERIAL.OUT_PLAN_ID
WHERE LIEUQL_SX = 1 AND ZTB_SX_NG_MATERIAL.CTR_CD ='002' AND ZTB_QLSXPLAN.PROCESS_NUMBER =1
GROUP BY ZTB_SX_NG_MATERIAL.CTR_CD,ZTB_QLSXPLAN.PROD_REQUEST_NO, M090.M_NAME
),
NHATKYKT AS (
SELECT PROD_REQUEST_NO, SUM(INSPECT_TOTAL_QTY-ERR32) AS INSPECT_TOTAL_QTY, SUM(INSPECT_OK_QTY) AS INSPECT_OK_QTY, SUM(ERR1+ ERR2+ERR3) AS INSPECT_LOSS_QTY, SUM(ERR4+ERR5+ERR6+ERR7+ERR8+ERR9+ERR10+ERR11) AS INSPECT_MATERIAL_NG, SUM(ERR12+ERR13+ERR14+ERR15+ERR16+ERR17+ERR18+ERR19+ERR20+ERR21+ERR22+ERR23+ERR24+ERR25+ERR26+ERR27+ERR28+ERR29+ERR30+ERR31) AS INSPECT_PROCESS_NG, SUM(ERR4+ERR5+ERR6+ERR7+ERR8+ERR9+ERR10+ERR11+ERR12+ERR13+ERR14+ERR15+ERR16+ERR17+ERR18+ERR19+ERR20+ERR21+ERR22+ERR23+ERR24+ERR25+ERR26+ERR27+ERR28+ERR29+ERR30+ERR31
) AS INSPECT_TOTAL_NG, SUM(ERR32) AS SX_MARKING_QTY, SUM(ERR1) AS LOSS_THEM_TUI, CTR_CD
FROM ZTBINSPECTNGTB GROUP BY PROD_REQUEST_NO, CTR_CD
),
NHATKYKT2 AS (
SELECT G_CODE, SUM(INSPECT_TOTAL_QTY-ERR32) AS INSPECT_TOTAL_QTY, SUM(INSPECT_OK_QTY) AS INSPECT_OK_QTY, SUM(ERR1+ ERR2+ERR3) AS INSPECT_LOSS_QTY, SUM(ERR4+ERR5+ERR6+ERR7+ERR8+ERR9+ERR10+ERR11) AS INSPECT_MATERIAL_NG, SUM(ERR12+ERR13+ERR14+ERR15+ERR16+ERR17+ERR18+ERR19+ERR20+ERR21+ERR22+ERR23+ERR24+ERR25+ERR26+ERR27+ERR28+ERR29+ERR30+ERR31) AS INSPECT_PROCESS_NG, SUM(ERR4+ERR5+ERR6+ERR7+ERR8+ERR9+ERR10+ERR11+ERR12+ERR13+ERR14+ERR15+ERR16+ERR17+ERR18+ERR19+ERR20+ERR21+ERR22+ERR23+ERR24+ERR25+ERR26+ERR27+ERR28+ERR29+ERR30+ERR31
) AS INSPECT_TOTAL_NG, SUM(ERR32) AS SX_MARKING_QTY, SUM(ERR1) AS LOSS_THEM_TUI, CTR_CD
FROM ZTBINSPECTNGTB GROUP BY G_CODE, CTR_CD
)
SELECT CASE WHEN  (isnull(INS_OUTPUT_TB.INS_OUTPUT,0) >= P400.PROD_REQUEST_QTY  OR P400.YCSX_PENDING=0) THEN 'CLOSED' ELSE 'PENDING' END AS YCSX_PENDING, P400.G_CODE, CASE WHEN P400.CODE_55 = '04' THEN 'SAMPLE' ELSE 'MASS' END AS PHAN_LOAI, P400.PROD_REQUEST_NO, M100.G_NAME,M100.G_NAME_KD,M100.FACTORY, P400.PROD_REQUEST_DATE, P400.PROD_REQUEST_QTY,
M100.PD, M100.G_C* M100.G_C_R AS CAVITY,
isnull(isnull(WAREHOUSE_OUT.M_NAME, AA.M_NAME),BB.M_NAME) AS M_NAME,
isnull(WAREHOUSE_OUT.WAREHOUSE_OUTPUT_QTY, 0) AS M_OUTPUT,
isnull(EE.NEXT_IN_QTY,0) AS NEXT_IN_QTY,
isnull(II.IQC_IN,0) AS IQC_IN,
(isnull(WAREHOUSE_OUT.WAREHOUSE_OUTPUT_QTY, 0)  + isnull(EE.NEXT_IN_QTY,0)  - isnull(BB.INPUT_QTY, 0) )AS NOT_SCANNED_QTY,
isnull(BB.INPUT_QTY, 0) AS SCANNED_QTY,
isnull(BB.REMAIN_QTY, 0) AS REMAIN_QTY,
(isnull(BB.INPUT_QTY * 1.00000, isnull(AA.INPUT_QTY * 1.00000,0)) - isnull(BB.REMAIN_QTY, 0)) AS USED_QTY,
isnull(GG.LOCK_QTY,0) AS LOCK_QTY,
isnull(FF.TON_KHO_AO,0) AS TON_KHO_AO,
isnull(HH.RETURN_IQC,0) AS RETURN_IQC,
isnull(DD.NEXT_OUT_QTY,0) AS NEXT_OUT_QTY,
isnull(CC.RETURN_QTY, 0) AS RETURN_QTY,
isnull(WAREHOUSE_OUT.WAREHOUSE_ESTIMATED_QTY,0) AS WAREHOUSE_ESTIMATED_QTY,
isnull(BB.ESTIMATED_QTY,0) AS ESTIMATED_QTY,
M100.EQ1, M100.EQ2, M100.Setting1, M100.Setting2, M100.UPH1, M100.UPH2, M100.Step1, M100.Step2, isnull(M100.LOSS_SX1,0) AS LOSS_SX1, isnull(M100.LOSS_SX2,0) AS LOSS_SX2, isnull(M100.LOSS_SETTING1,0) AS LOSS_SETTING1, isnull(M100.LOSS_SETTING2,0) AS LOSS_SETTING2,M100.Step3, M100.Step4, M100.EQ3, M100.EQ4, M100.UPH3, M100.UPH4, M100.Setting3, M100.Setting4, isnull(M100.LOSS_SX3,0) AS LOSS_SX3, isnull(M100.LOSS_SX4,0) AS LOSS_SX4, isnull(M100.LOSS_SETTING3,0) AS LOSS_SETTING3, isnull(M100.LOSS_SETTING4,0) AS LOSS_SETTING4,CASE WHEN NHATKYKT2.INSPECT_TOTAL_QTY <>0 THEN isnull((NHATKYKT2.LOSS_THEM_TUI + NHATKYKT2.INSPECT_TOTAL_NG)*1.0/NHATKYKT2.INSPECT_TOTAL_QTY*100,0) ELSE 0 END AS LOSS_KT,
KQSXTABLE.CD1,KQSXTABLE.CD2, KQSXTABLE.CD3, KQSXTABLE.CD4,
KQSX_ST_TABLE.ST1 *1.000 / M100.PD * (M100.G_C* M100.G_C_R)*1000 AS ST1 ,
KQSX_ST_TABLE.ST2 *1.000 / M100.PD * (M100.G_C* M100.G_C_R)*1000 AS  ST2 ,
KQSX_ST_TABLE.ST3 *1.000 / M100.PD * (M100.G_C* M100.G_C_R)*1000 AS  ST3 ,
KQSX_ST_TABLE.ST4 *1.000 / M100.PD * (M100.G_C* M100.G_C_R)*1000 AS  ST4 ,
KQSX_NG_TABLE.NG1 *1.000 / M100.PD * (M100.G_C* M100.G_C_R)*1000 AS  NG1 ,
KQSX_NG_TABLE.NG2 *1.000 / M100.PD * (M100.G_C* M100.G_C_R)*1000 AS  NG2 ,
KQSX_NG_TABLE.NG3 *1.000 / M100.PD * (M100.G_C* M100.G_C_R)*1000 AS  NG3 ,
KQSX_NG_TABLE.NG4 *1.000 / M100.PD * (M100.G_C* M100.G_C_R)*1000 AS  NG4,
isnull(INS_INPUT_TB.INS_INPUT,0) INS_INPUT,
isnull(NHATKYKT.INSPECT_TOTAL_QTY,0) AS INSPECT_TOTAL_QTY, isnull(NHATKYKT.INSPECT_OK_QTY,0) AS INSPECT_OK_QTY,isnull(NHATKYKT.LOSS_THEM_TUI,0) AS LOSS_THEM_TUI, isnull(NHATKYKT.INSPECT_LOSS_QTY,0) AS INSPECT_LOSS_QTY, isnull(NHATKYKT.INSPECT_TOTAL_NG,0) AS INSPECT_TOTAL_NG, isnull(NHATKYKT.INSPECT_MATERIAL_NG,0) AS INSPECT_MATERIAL_NG, isnull(NHATKYKT.INSPECT_PROCESS_NG,0) AS INSPECT_PROCESS_NG, isnull(NHATKYKT.SX_MARKING_QTY,0) AS SX_MARKING_QTY, isnull(INS_OUTPUT_TB.INS_OUTPUT,0) AS INS_OUTPUT, P400.BTP_QTY, P400.INSPECT_BALANCE_QTY
FROM P400
LEFT JOIN KQSXTABLE ON (P400.PROD_REQUEST_NO = KQSXTABLE.PROD_REQUEST_NO AND P400.CTR_CD = KQSXTABLE.CTR_CD)
LEFT JOIN KQSX_ST_TABLE ON (P400.PROD_REQUEST_NO = KQSX_ST_TABLE.PROD_REQUEST_NO AND P400.CTR_CD = KQSX_ST_TABLE.CTR_CD)
LEFT JOIN KQSX_NG_TABLE ON (P400.PROD_REQUEST_NO = KQSX_NG_TABLE.PROD_REQUEST_NO AND P400.CTR_CD = KQSX_NG_TABLE.CTR_CD)
LEFT JOIN INS_INPUT_TB ON (INS_INPUT_TB.PROD_REQUEST_NO = P400.PROD_REQUEST_NO AND INS_INPUT_TB.CTR_CD = P400.CTR_CD)
LEFT JOIN INS_OUTPUT_TB ON (INS_OUTPUT_TB.PROD_REQUEST_NO = P400.PROD_REQUEST_NO AND INS_OUTPUT_TB.CTR_CD = P400.CTR_CD)
LEFT JOIN ZTB_QLSXPLAN_A ON (ZTB_QLSXPLAN_A.PROD_REQUEST_NO1 = P400.PROD_REQUEST_NO AND ZTB_QLSXPLAN_A.CTR_CD = P400.CTR_CD)
LEFT JOIN M100 ON (M100.G_CODE = P400.G_CODE AND M100.CTR_CD = P400.CTR_CD)
LEFT JOIN AA ON (AA.PROD_REQUEST_NO = P400.PROD_REQUEST_NO AND AA.CTR_CD = P400.CTR_CD)
LEFT JOIN BB ON (BB.PROD_REQUEST_NO = P400.PROD_REQUEST_NO AND BB.CTR_CD = P400.CTR_CD)
LEFT JOIN CC ON (CC.PROD_REQUEST_NO = P400.PROD_REQUEST_NO AND CC.CTR_CD = P400.CTR_CD)
LEFT JOIN DD ON (DD.PROD_REQUEST_NO = P400.PROD_REQUEST_NO AND DD.CTR_CD = P400.CTR_CD)
LEFT JOIN EE ON (EE.PROD_REQUEST_NO = P400.PROD_REQUEST_NO AND EE.CTR_CD = P400.CTR_CD)
LEFT JOIN FF ON (FF.PROD_REQUEST_NO = P400.PROD_REQUEST_NO AND FF.CTR_CD = P400.CTR_CD)
LEFT JOIN GG ON (GG.PROD_REQUEST_NO = P400.PROD_REQUEST_NO AND GG.CTR_CD = P400.CTR_CD)
LEFT JOIN HH ON (HH.PROD_REQUEST_NO = P400.PROD_REQUEST_NO AND HH.CTR_CD = P400.CTR_CD)
LEFT JOIN II ON (II.PROD_REQUEST_NO = P400.PROD_REQUEST_NO AND II.CTR_CD = P400.CTR_CD)
LEFT JOIN WAREHOUSE_OUT ON (WAREHOUSE_OUT.PROD_REQUEST_NO = P400.PROD_REQUEST_NO AND WAREHOUSE_OUT.CTR_CD = P400.CTR_CD)
LEFT JOIN NHATKYKT ON (NHATKYKT.PROD_REQUEST_NO = P400.PROD_REQUEST_NO AND NHATKYKT.CTR_CD = P400.CTR_CD)
LEFT JOIN NHATKYKT2 ON (NHATKYKT2.G_CODE = P400.G_CODE AND NHATKYKT2.CTR_CD = P400.CTR_CD)
${condition} AND P400.CTR_CD='${DATA.CTR_CD}'
ORDER BY P400.PROD_REQUEST_NO DESC
`
  //${moment().format('YYYY-MM-DD')}
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.updateBTP_P400 = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
  UPDATE P400 SET BTP_QTY = 0;
  WITH BTPTB AS
  (
  SELECT P501.CTR_CD, P501.FACTORY,P501.XUONG,P501.EQ_NAME,ZTB_QLSXPLAN.G_CODE,M100.G_NAME,M100.PROD_TYPE, (CASE WHEN M100.CODE_33='01' THEN 'EA' WHEN M100.CODE_33= '02' THEN 'ROLL' WHEN M100.CODE_33= '03' THEN 'SHEET' WHEN M100.CODE_33= '04' THEN 'MET' WHEN M100.CODE_33= '06' THEN 'PACK (BAG)' WHEN M100.CODE_33= '99' THEN 'X' END) AS UNIT,ZTB_QLSXPLAN.PROD_REQUEST_NO,P501.PLAN_ID,ZTB_QLSXPLAN.PROCESS_NUMBER,BANG_GOP.M_LOT_NO,BANG_GOP.PROCESS_LOT_NO,REMAIN_QTY AS REMAIN_QTY_M,BANG_GOP.TEMP_QTY_EA,(CASE WHEN TRANS_LOT_NO is not null THEN ZTB_GIAONHAN_M_LOT.FACTORY  ELSE P501.FACTORY  END) AS FINAL_FACTORY, (CASE WHEN TRANS_LOT_NO is not null THEN ZTB_GIAONHAN_M_LOT.XUONG  ELSE P501.XUONG  END) AS FINAL_XUONG,PHAN_LOAI,BANG_GOP.USE_YN,BANG_GOP.PD,BANG_GOP.CAVITY,ZTB_GIAONHAN_M_LOT.TRANS_LOT_NO FROM ( SELECT P501.CTR_CD,       P501.M_LOT_NO,     P501.PROCESS_LOT_NO,     FLOOR(((P501.TEMP_QTY * PD) / CAVITY) / 1000) AS REMAIN_QTY,     P501.TEMP_QTY AS TEMP_QTY_EA,     'SX_NEW' AS PHAN_LOAI,     P501.USE_YN,     ZTB_SX_RESULT.PD,     ZTB_SX_RESULT.CAVITY FROM P501 LEFT JOIN ZTB_SX_RESULT ON (ZTB_SX_RESULT.PLAN_ID = P501.PLAN_ID AND ZTB_SX_RESULT.CTR_CD = P501.CTR_CD) WHERE P501.USE_YN = 'Y' AND P501.LOT_STATUS IS NULL UNION ALL SELECT      ZTB_TON_BTP.CTR_CD,  ZTB_TON_BTP.M_LOT_NO,     ZTB_TON_BTP.PROCESS_LOT_NO,     ZTB_TON_BTP.REMAIN_QTY,     FLOOR(((ZTB_TON_BTP.REMAIN_QTY / PD) * CAVITY) * 1000) AS TEMP_QTY_EA,     'TON_BTP' AS PHAN_LOAI,     ZTB_TON_BTP.USE_YN,     ZTB_SX_RESULT.PD,     ZTB_SX_RESULT.CAVITY FROM ZTB_TON_BTP LEFT JOIN ZTB_SX_RESULT ON (ZTB_SX_RESULT.PLAN_ID = ZTB_TON_BTP.PLAN_ID_INPUT) LEFT JOIN ZTB_SX_EQ_STATUS ON (ZTB_SX_EQ_STATUS.EQ_NAME = ZTB_SX_RESULT.EQ_NAME  AND ZTB_SX_EQ_STATUS.FACTORY = ZTB_SX_RESULT.FACTORY  AND ZTB_SX_EQ_STATUS.CTR_CD = ZTB_SX_RESULT.CTR_CD) WHERE ZTB_TON_BTP.USE_YN = 'Y' ) AS BANG_GOP LEFT JOIN P501 ON(P501.PROCESS_LOT_NO = BANG_GOP.PROCESS_LOT_NO AND P501.CTR_CD = BANG_GOP.CTR_CD ) LEFT JOIN ZTB_QLSXPLAN ON(ZTB_QLSXPLAN.PLAN_ID = P501.PLAN_ID AND ZTB_QLSXPLAN.CTR_CD = P501.CTR_CD ) LEFT JOIN M100 ON(M100.G_CODE = ZTB_QLSXPLAN.G_CODE AND M100.CTR_CD = ZTB_QLSXPLAN.CTR_CD ) LEFT JOIN ZTB_GIAONHAN_M_LOT ON(ZTB_GIAONHAN_M_LOT.PROCESS_LOT_NO = BANG_GOP.PROCESS_LOT_NO AND ZTB_GIAONHAN_M_LOT.CTR_CD = BANG_GOP.CTR_CD )
  ),
  THIRD AS
  (
  SELECT CTR_CD,PROD_REQUEST_NO, SUM(TEMP_QTY_EA) AS FINAL_BTP FROM  BTPTB GROUP BY  CTR_CD,PROD_REQUEST_NO
  )
  MERGE INTO P400 
  USING THIRD
  ON THIRD.CTR_CD = P400.CTR_CD AND  THIRD.PROD_REQUEST_NO = P400.PROD_REQUEST_NO
  WHEN MATCHED THEN
  UPDATE
  SET BTP_QTY = THIRD.FINAL_BTP;
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.updatetonkiemP400 = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
  UPDATE P400 SET INSPECT_BALANCE_QTY = 0;
  WITH NEW_CHO_KIEM AS 
  (
  SELECT CTR_CD, PROD_REQUEST_NO, SUM(INPUT_QTY_EA) AS INSPECT_BALANCE_QTY FROM ZTBINSPECTINPUTTB WHERE INSPECT_YN='Y' AND P400_YN='Y' GROUP BY CTR_CD, PROD_REQUEST_NO
  )
  MERGE INTO P400 
  USING NEW_CHO_KIEM
  ON NEW_CHO_KIEM.CTR_CD = P400.CTR_CD AND  NEW_CHO_KIEM.PROD_REQUEST_NO = P400.PROD_REQUEST_NO
  WHEN MATCHED THEN
  UPDATE
  SET INSPECT_BALANCE_QTY = NEW_CHO_KIEM.INSPECT_BALANCE_QTY;
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.tinhhinhycsxtheongay = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `DECLARE @ycsxno varchar(7), @ctr_cd varchar(3)
  SET @ycsxno = '${DATA.PROD_REQUEST_NO}';
  SET @ctr_cd = '${DATA.CTR_CD}';
  WITH SXTB AS
  (
  SELECT * FROM fn_ProductionReport(@ycsxno,@ctr_cd)
  ),
  PROD1 AS
  (
  SELECT PLAN_DATE, CTR_CD, SUM(isnull(NEEDED_QTY,PLAN_QTY)) AS THEORY_INPUT_QTY, SUM(ESTIMATED_QTY) AS ACTUAL_INPUT_QTY, SUM(isnull(KETQUASX,0)) AS RESULT FROM SXTB
  WHERE STEP=0 AND PROCESS_NUMBER =1 AND CTR_CD='${DATA.CTR_CD}'
  GROUP BY PLAN_DATE, CTR_CD
  ),
  PROD2 AS
  (
  SELECT PLAN_DATE, CTR_CD, SUM(isnull(NEEDED_QTY,PLAN_QTY)) AS THEORY_INPUT_QTY, SUM(ESTIMATED_QTY) AS ACTUAL_INPUT_QTY, SUM(isnull(KETQUASX,0)) AS RESULT FROM SXTB
  WHERE STEP=0 AND PROCESS_NUMBER =2 AND CTR_CD='${DATA.CTR_CD}'
  GROUP BY PLAN_DATE, CTR_CD
  ),
  PROD3 AS
  (
  SELECT PLAN_DATE, CTR_CD, SUM(isnull(NEEDED_QTY,PLAN_QTY)) AS THEORY_INPUT_QTY, SUM(ESTIMATED_QTY) AS ACTUAL_INPUT_QTY, SUM(isnull(KETQUASX,0)) AS RESULT FROM SXTB
  WHERE STEP=0 AND PROCESS_NUMBER =3 AND CTR_CD='${DATA.CTR_CD}'
  GROUP BY PLAN_DATE, CTR_CD
  ),
  PROD4 AS
  (
  SELECT PLAN_DATE, CTR_CD, SUM(isnull(NEEDED_QTY,PLAN_QTY)) AS THEORY_INPUT_QTY, SUM(ESTIMATED_QTY) AS ACTUAL_INPUT_QTY, SUM(isnull(KETQUASX,0)) AS RESULT FROM SXTB
  WHERE STEP=0 AND PROCESS_NUMBER =4 AND CTR_CD='${DATA.CTR_CD}'
  GROUP BY PLAN_DATE, CTR_CD
  ),
  INSPECTDATA AS (
  SELECT CAST(INSPECT_DATETIME as date) AS PLAN_DATE, CTR_CD, SUM(INSPECT_TOTAL_QTY- ERR32) AS INSPECT_QTY,SUM(ERR2+ERR3) AS INSPECT_LOSS,  SUM(ERR4+ERR5+ERR6+ERR7+ERR8+ERR9+ERR10+ERR11+ERR12+ERR13+ERR14+ERR15+ERR16+ERR17+ERR18+ERR19+ERR20+ERR21+ERR22+ERR23+ERR24+ERR25+ERR26+ERR27+ERR28+ERR29+ERR30+ERR31) AS INSPECT_NG, SUM(INSPECT_OK_QTY) AS INSPECT_OK FROM ZTBINSPECTNGTB 
  WHERE PROD_REQUEST_NO=@ycsxno AND CTR_CD='${DATA.CTR_CD}'
  GROUP BY CAST(INSPECT_DATETIME as date), CTR_CD
  ),
  PLANDATETB AS
  ( 
  SELECT DISTINCT PLAN_DATE, CTR_CD FROM SXTB
  UNION
  SELECT DISTINCT CAST(INSPECT_DATETIME as date) AS PLAN_DATE, CTR_CD FROM ZTBINSPECTNGTB WHERE PROD_REQUEST_NO=@ycsxno AND CTR_CD='${DATA.CTR_CD}'
  )
  SELECT PLANDATETB.PLAN_DATE, PLANDATETB.CTR_CD, 
  isnull(PROD1.THEORY_INPUT_QTY,0) AS TARGET1, isnull(PROD1.ACTUAL_INPUT_QTY,0) AS INPUT1, isnull(PROD1.RESULT,0) AS RESULT1,
  isnull(PROD2.THEORY_INPUT_QTY,0) AS TARGET2, isnull(PROD2.ACTUAL_INPUT_QTY,0) AS INPUT2, isnull(PROD2.RESULT,0) AS RESULT2,
  isnull(PROD3.THEORY_INPUT_QTY,0) AS TARGET3, isnull(PROD3.ACTUAL_INPUT_QTY,0) AS INPUT3, isnull(PROD3.RESULT,0) AS RESULT3,
  isnull(PROD4.THEORY_INPUT_QTY,0) AS TARGET4, isnull(PROD4.ACTUAL_INPUT_QTY,0) AS INPUT4, isnull(PROD4.RESULT,0) AS RESULT4,
  isnull(INSPECTDATA.INSPECT_QTY,0) AS INSP_QTY, isnull(INSPECTDATA.INSPECT_LOSS,0) AS INSP_LOSS, isnull(INSPECTDATA.INSPECT_NG,0) AS INSP_NG, isnull(INSPECTDATA.INSPECT_OK,0) AS INSP_OK
  FROM PLANDATETB
  LEFT JOIN PROD1 ON PROD1.PLAN_DATE = PLANDATETB.PLAN_DATE AND PROD1.CTR_CD = PLANDATETB.CTR_CD
  LEFT JOIN PROD2 ON PROD2.PLAN_DATE = PLANDATETB.PLAN_DATE AND PROD2.CTR_CD = PLANDATETB.CTR_CD
  LEFT JOIN PROD3 ON PROD3.PLAN_DATE = PLANDATETB.PLAN_DATE AND PROD3.CTR_CD = PLANDATETB.CTR_CD
  LEFT JOIN PROD4 ON PROD4.PLAN_DATE = PLANDATETB.PLAN_DATE AND PROD4.CTR_CD = PLANDATETB.CTR_CD
  LEFT JOIN INSPECTDATA ON INSPECTDATA.PLAN_DATE = PLANDATETB.PLAN_DATE AND INSPECTDATA.CTR_CD = PLANDATETB.CTR_CD
  WHERE PLANDATETB.CTR_CD='${DATA.CTR_CD}'
  ORDER BY PLANDATETB.PLAN_DATE ASC`;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.addMachine = async (req, res, DATA) => {
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let checkkq = "OK";
  let setpdQuery = `
  INSERT INTO ZTB_SX_EQ_STATUS (CTR_CD, FACTORY, EQ_CODE, EQ_NAME, EQ_OP, EQ_ACTIVE, EQ_STATUS, INS_DATE, INS_EMPL, UPD_DATE, UPD_EMPL) VALUES ('${DATA.CTR_CD}','${DATA.FACTORY}','${DATA.EQ_CODE}','${DATA.EQ_NAME}', ${DATA.EQ_OP},'${DATA.EQ_ACTIVE}','STOP',GETDATE(),'${EMPL_NO}',GETDATE(), '${EMPL_NO}')
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.deleteMachine = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
  DELETE FROM ZTB_SX_EQ_STATUS WHERE CTR_CD='${DATA.CTR_CD}' AND EQ_CODE='${DATA.EQ_CODE}'
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.toggleMachineActiveStatus = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
  UPDATE ZTB_SX_EQ_STATUS SET EQ_ACTIVE ='${DATA.EQ_ACTIVE}' WHERE CTR_CD='${DATA.CTR_CD}' AND EQ_CODE='${DATA.EQ_CODE}'
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.loadLeadtimeData = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
    WITH
AA AS
(
SELECT
PVTB.PROD_REQUEST_NO,
PVTB.CTR_CD,
isnull(PVTB.[1], 0) AS CD1,
isnull(PVTB.[2], 0) AS CD2,
isnull(PVTB.[3], 0) AS CD3,
isnull(PVTB.[4], 0) AS CD4
FROM
(
SELECT
ZTB_QLSXPLAN.PROD_REQUEST_NO,
ZTB_QLSXPLAN.PROCESS_NUMBER,
ZTB_QLSXPLAN.CTR_CD,
SUM(isnull(SX_RESULT, 0)) AS KETQUASX
FROM
ZTB_SX_RESULT
LEFT JOIN ZTB_QLSXPLAN ON (ZTB_QLSXPLAN.PLAN_ID = ZTB_SX_RESULT.PLAN_ID AND ZTB_QLSXPLAN.CTR_CD = ZTB_SX_RESULT.CTR_CD)
WHERE
ZTB_QLSXPLAN.STEP = 0
GROUP BY
ZTB_QLSXPLAN.PROD_REQUEST_NO,
ZTB_QLSXPLAN.PROCESS_NUMBER,
ZTB_QLSXPLAN.CTR_CD
) AS PV PIVOT (
SUM(PV.KETQUASX) FOR PV.PROCESS_NUMBER IN ([1], [2], [3], [4])
) AS PVTB
),
LOSSKT AS (
SELECT BB.G_CODE, BB.CTR_CD, SUM(BB.INSPECT_TOTAL_QTY) AS INSPECT_TOTAL_QTY, SUM(BB.TOTAL_NG) AS TOTAL_NG FROM
(
SELECT AA.G_CODE, AA.CTR_CD, AA.INSPECT_DATE,AA.INSPECT_TOTAL_QTY, AA.TOTAL_NG, COUNT(G_CODE) OVER(PARTITION BY G_CODE, CTR_CD ORDER BY INSPECT_DATE DESC) AS CNT
FROM
(
SELECT  G_CODE, CTR_CD, CAST(INSPECT_DATETIME AS date) AS INSPECT_DATE, SUM(INSPECT_TOTAL_QTY-ERR32) AS INSPECT_TOTAL_QTY, SUM(ERR1+ERR2+ERR3+ERR4+ERR5+ERR6+ERR7+ERR8+ERR9+ERR10+ERR11+ERR12+ERR13+ERR14+ERR15+ERR16+ERR17+ERR18+ERR19+ERR20+ERR21+ERR22+ERR23+ERR24+ERR25+ERR26+ERR27+ERR28+ERR29+ERR30+ERR31
) AS TOTAL_NG FROM ZTBINSPECTNGTB
GROUP BY G_CODE, CTR_CD, CAST(INSPECT_DATETIME AS date)
) AS AA
) AS BB
WHERE BB.CNT <=10 AND BB.INSPECT_TOTAL_QTY <> 0
GROUP BY BB.G_CODE, BB.CTR_CD
),
INSPECT_OUTPUT_TB AS
(
SELECT CTR_CD,PROD_REQUEST_NO, SUM(OUTPUT_QTY_EA) AS LOT_TOTAL_OUTPUT_QTY_EA FROM ZTBINSPECTOUTPUTTB GROUP BY CTR_CD,PROD_REQUEST_NO
),
M_STOCKTB AS
(
SELECT M140.G_CODE, M140.CTR_CD, M090.M_NAME, SUM(isnull(STOCK_CFM_NM1,0)+ isnull(STOCK_CFM_NM2,0)) AS STOCK FROM M140 
JOIN M090 ON M090.M_CODE = M140.M_CODE AND M090.CTR_CD = M140.CTR_CD
JOIN M100 ON M100.G_CODE=  M140.G_CODE AND M100.CTR_CD = M140.CTR_CD
WHERE LIEUQL_SX =1 AND (M090.WIDTH_CD >= G_WIDTH  OR M090.WIDTH_CD >= G_LENGTH)
GROUP BY M140.G_CODE, M140.CTR_CD, M090.M_NAME
),
YCSXTB AS
(
SELECT
M100.FACTORY,
M100.LOSS_SETTING1,
M100.LOSS_SETTING2,
M100.LOSS_SETTING3,
M100.LOSS_SETTING4,
M100.LOSS_SX1,
M100.LOSS_SX2,
M100.LOSS_SX3,
M100.LOSS_SX4,
M100.Setting1,
M100.Setting2,
M100.Step1,
M100.Step2,
M100.UPH1,
M100.UPH2,
M100.Step3,
M100.Step4,
P400.DELIVERY_DT,
M100.EQ1,
M100.EQ2,
M100.EQ3,
M100.EQ4,
M100.UPH3,
M100.UPH4,
M100.Setting3,
M100.Setting4,
P400.G_CODE,
M100.PROD_MAIN_MATERIAL,
P400.PROD_REQUEST_DATE,
CASE WHEN (P400.YCSX_PENDING =0 OR isnull(INSPECT_OUTPUT_TB.LOT_TOTAL_OUTPUT_QTY_EA, 0) >= P400.PROD_REQUEST_QTY) THEN 0 ELSE 1 END AS YCSX_PENDING,
M100.G_NAME,
M100.G_NAME_KD,
M100.G_WIDTH,
M100.G_LENGTH,
M100.PD,
M100.G_C* M100.G_C_R AS CAVITY,
P400.PROD_REQUEST_NO,
P400.CTR_CD,
isnull(AA.CD1, 0) AS CD1,
isnull(AA.CD2, 0) AS CD2,
isnull(AA.CD3, 0) AS CD3,
isnull(AA.CD4, 0) AS CD4,
CASE WHEN M100.PD <>0 THEN
CEILING((P400.PROD_REQUEST_QTY*(1+(isnull(LOSS_SX2,0)+isnull(LOSS_SX3,0)+isnull(LOSS_SX4,0))*1.0/100+isnull((LOSSKT.TOTAL_NG*1.0/LOSSKT.INSPECT_TOTAL_QTY),0)) + (isnull(LOSS_SETTING2,0)+isnull(LOSS_SETTING3,0)+isnull(LOSS_SETTING4,0))*1.0/M100.PD*(M100.G_C*M100.G_C_R)*1000)) ELSE 0 END AS SLC_CD1,      
CASE WHEN M100.PD <>0 THEN CEILING((P400.PROD_REQUEST_QTY*(1+(isnull(LOSS_SX3,0)+isnull(LOSS_SX4,0))*1.0/100+isnull((LOSSKT.TOTAL_NG*1.0/LOSSKT.INSPECT_TOTAL_QTY),0)) + (isnull(LOSS_SETTING3,0)+isnull(LOSS_SETTING4,0))*1.0/M100.PD*(M100.G_C*M100.G_C_R)*1000)) ELSE 0 END AS SLC_CD2,
CASE WHEN M100.PD <>0 THEN CEILING((P400.PROD_REQUEST_QTY*(1+(isnull(LOSS_SX4,0))*1.0/100+isnull((LOSSKT.TOTAL_NG*1.0/LOSSKT.INSPECT_TOTAL_QTY),0)) + (isnull(LOSS_SETTING4,0))*1.0/M100.PD*(M100.G_C*M100.G_C_R)*1000)) ELSE 0 END AS SLC_CD3,
CASE WHEN M100.PD <>0 THEN CEILING((P400.PROD_REQUEST_QTY*(1+(0)*1.0/100+isnull((LOSSKT.TOTAL_NG*1.0/LOSSKT.INSPECT_TOTAL_QTY),0)) + (0)*1.0/M100.PD*(M100.G_C*M100.G_C_R)*1000)) ELSE 0 END AS SLC_CD4
FROM P400
LEFT JOIN M100 ON (M100.G_CODE =P400.G_CODE AND M100.CTR_CD = P400.CTR_CD)
LEFT JOIN AA ON (AA.PROD_REQUEST_NO = P400.PROD_REQUEST_NO AND AA.CTR_CD = P400.CTR_CD)
LEFT JOIN LOSSKT ON (LOSSKT.G_CODE = P400.G_CODE AND LOSSKT.CTR_CD = P400.CTR_CD)
LEFT JOIN INSPECT_OUTPUT_TB ON (INSPECT_OUTPUT_TB.PROD_REQUEST_NO = P400.PROD_REQUEST_NO AND INSPECT_OUTPUT_TB.CTR_CD = P400.CTR_CD)   
WHERE P400.CODE_55<> '04' AND P400.USE_YN ='Y' AND P400.INS_DATE > '2024-07-01' AND P400.CTR_CD='${DATA.CTR_CD}'
),
YCSXTB2 AS
(
SELECT YCSXTB.*,
CASE WHEN EQ1 <> 'NA' AND EQ1 <> 'NO' THEN CASE WHEN SLC_CD1 - CD1 < 0 THEN 0 ELSE SLC_CD1 - CD1 END  ELSE 0 END AS TCD1,
CASE WHEN EQ2 <> 'NA' AND EQ2 <> 'NO' THEN CASE WHEN SLC_CD2 - CD2 < 0 THEN 0 ELSE SLC_CD2 - CD2 END  ELSE 0 END AS TCD2,
CASE WHEN EQ3 <> 'NA' AND EQ3 <> 'NO' THEN CASE WHEN SLC_CD3 - CD3 < 0 THEN 0 ELSE SLC_CD3 - CD3 END  ELSE 0 END AS TCD3,
CASE WHEN EQ4 <> 'NA' AND EQ4 <> 'NO' THEN CASE WHEN SLC_CD4 - CD4 < 0 THEN 0 ELSE SLC_CD4 - CD4 END  ELSE 0 END AS TCD4
FROM YCSXTB  WHERE  YCSXTB.YCSX_PENDING = 1
),
YCSXTB3 AS
(
SELECT YCSXTB2.*,
CASE WHEN TCD1 > 0 AND UPH1 <>0 THEN TCD1/UPH1*60*Step1  + Setting1 ELSE 0 END AS LT1,        
CASE WHEN TCD2 > 0 AND UPH2 <>0 THEN TCD1/UPH2*60*Step2  + Setting2 ELSE 0 END AS LT2,        
CASE WHEN TCD3 > 0 AND UPH3 <>0 THEN TCD1/UPH3*60*Step3  + Setting3 ELSE 0 END AS LT3,        
CASE WHEN TCD4 > 0 AND UPH4 <>0 THEN TCD1/UPH4*60*Step4  + Setting4 ELSE 0 END AS LT4
FROM YCSXTB2
),
YCSXTB4 AS
(
SELECT 'FR' AS MACHINE, YCSXTB3.*, CASE WHEN EQ1='FR' THEN LT1 WHEN EQ2= 'FR' THEN LT2 WHEN EQ3='FR' THEN LT3 WHEN EQ4='FR' THEN LT4 ELSE 0 END AS LEADTIME,  CASE WHEN EQ1='FR' THEN TCD1 WHEN EQ2= 'FR' THEN TCD2 WHEN EQ3='FR' THEN TCD3 WHEN EQ4='FR' THEN TCD4 ELSE 0 END AS TCD, CASE WHEN EQ1='FR' THEN LOSS_SX1 WHEN EQ2= 'FR' THEN LOSS_SX2 WHEN EQ3='FR' THEN LOSS_SX3 WHEN EQ4='FR' THEN LOSS_SX4 ELSE 0 END AS LCD, CASE WHEN EQ1='FR' THEN LOSS_SETTING1 WHEN EQ2= 'FR' THEN LOSS_SETTING2 WHEN EQ3='FR' THEN LOSS_SETTING3 WHEN EQ4='FR' THEN LOSS_SETTING4 ELSE 0 END AS STCD  FROM YCSXTB3
UNION ALL
SELECT 'SR' AS MACHINE, YCSXTB3.*, CASE WHEN EQ1='SR' THEN LT1 WHEN EQ2= 'SR' THEN LT2 WHEN EQ3='SR' THEN LT3 WHEN EQ4='SR' THEN LT4 ELSE 0 END AS LEADTIME,  CASE WHEN EQ1='SR' THEN TCD1 WHEN EQ2= 'SR' THEN TCD2 WHEN EQ3='SR' THEN TCD3 WHEN EQ4='SR' THEN TCD4 ELSE 0 END AS TCD, CASE WHEN EQ1='SR' THEN LOSS_SX1 WHEN EQ2= 'SR' THEN LOSS_SX2 WHEN EQ3='SR' THEN LOSS_SX3 WHEN EQ4='SR' THEN LOSS_SX4 ELSE 0 END AS LCD, CASE WHEN EQ1='SR' THEN LOSS_SETTING1 WHEN EQ2= 'SR' THEN LOSS_SETTING2 WHEN EQ3='SR' THEN LOSS_SETTING3 WHEN EQ4='SR' THEN LOSS_SETTING4 ELSE 0 END AS STCD FROM YCSXTB3
UNION ALL
SELECT 'DC' AS MACHINE, YCSXTB3.*, CASE WHEN EQ1='DC' THEN LT1 WHEN EQ2= 'DC' THEN LT2 WHEN EQ3='DC' THEN LT3 WHEN EQ4='DC' THEN LT4 ELSE 0 END AS LEADTIME,  CASE WHEN EQ1='DC' THEN TCD1 WHEN EQ2= 'DC' THEN TCD2 WHEN EQ3='DC' THEN TCD3 WHEN EQ4='DC' THEN TCD4 ELSE 0 END AS TCD, CASE WHEN EQ1='DC' THEN LOSS_SX1 WHEN EQ2= 'DC' THEN LOSS_SX2 WHEN EQ3='DC' THEN LOSS_SX3 WHEN EQ4='DC' THEN LOSS_SX4 ELSE 0 END AS LCD, CASE WHEN EQ1='DC' THEN LOSS_SETTING1 WHEN EQ2= 'DC' THEN LOSS_SETTING2 WHEN EQ3='DC' THEN LOSS_SETTING3 WHEN EQ4='DC' THEN LOSS_SETTING4 ELSE 0 END AS STCD FROM YCSXTB3
UNION ALL
SELECT 'ED' AS MACHINE, YCSXTB3.*, CASE WHEN EQ1='ED' THEN LT1 WHEN EQ2= 'ED' THEN LT2 WHEN EQ3='ED' THEN LT3 WHEN EQ4='ED' THEN LT4 ELSE 0 END AS LEADTIME,  CASE WHEN EQ1='ED' THEN TCD1 WHEN EQ2= 'ED' THEN TCD2 WHEN EQ3='ED' THEN TCD3 WHEN EQ4='ED' THEN TCD4 ELSE 0 END AS TCD, CASE WHEN EQ1='ED' THEN LOSS_SX1 WHEN EQ2= 'ED' THEN LOSS_SX2 WHEN EQ3='ED' THEN LOSS_SX3 WHEN EQ4='ED' THEN LOSS_SX4 ELSE 0 END AS LCD, CASE WHEN EQ1='ED' THEN LOSS_SETTING1 WHEN EQ2= 'ED' THEN LOSS_SETTING2 WHEN EQ3='ED' THEN LOSS_SETTING3 WHEN EQ4='ED' THEN LOSS_SETTING4 ELSE 0 END AS STCD FROM YCSXTB3
)
SELECT YCSXTB4.*, TCD*PD/CAVITY/1000*(1+isnull(LCD,0)/100) + isnull(STCD,0) AS NEEDED_M, isnull(M_STOCKTB.STOCK,0) AS M_STOCK_QTY FROM YCSXTB4 
LEFT JOIN M_STOCKTB ON M_STOCKTB.G_CODE = YCSXTB4.G_CODE AND M_STOCKTB.CTR_CD = YCSXTB4.CTR_CD
WHERE LEADTIME > 0
ORDER BY PROD_REQUEST_NO ASC
`;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.an_lieu_kho_ao = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = ` UPDATE  IN_KHO_SX SET USE_YN='Z' WHERE CTR_CD='${DATA.CTR_CD}' AND IN_KHO_ID = ${DATA.IN_KHO_ID}`;
  //${moment().format('YYYY-MM-DD')}
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.checktonKhoAoMLotNo = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `SELECT * FROM IN_KHO_SX WHERE CTR_CD='${DATA.CTR_CD}' AND  M_LOT_NO='${DATA.M_LOT_NO}' AND USE_YN ='Y' `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.checkFSC_PLAN_ID = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `SELECT ZTB_QLSXPLAN.PLAN_ID, ZTB_QLSXPLAN.G_CODE, isnull(M100.FSC,'N') AS FSC, isnull(M100.FSC_CODE,'01') AS FSC_CODE FROM ZTB_QLSXPLAN JOIN M100 ON (M100.G_CODE = ZTB_QLSXPLAN.G_CODE AND M100.CTR_CD = ZTB_QLSXPLAN.CTR_CD) WHERE ZTB_QLSXPLAN.PLAN_ID='${DATA.PLAN_ID}' AND ZTB_QLSXPLAN.CTR_CD='${DATA.CTR_CD}'`;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.checkYcsxStatus = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `SELECT P400.USE_YN FROM ZTB_QLSXPLAN LEFT JOIN P400 ON P400.PROD_REQUEST_NO = ZTB_QLSXPLAN.PROD_REQUEST_NO AND P400.CTR_CD = ZTB_QLSXPLAN.CTR_CD WHERE ZTB_QLSXPLAN.PLAN_ID='${DATA.PLAN_ID}' AND ZTB_QLSXPLAN.CTR_CD='${DATA.CTR_CD}'`;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.checkTonTaiXuatKhoAo = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `SELECT TOP 1 * FROM OUT_KHO_SX WHERE CTR_CD='${DATA.CTR_CD}' AND PLAN_ID_OUTPUT='${DATA.PLAN_ID}' AND M_LOT_NO='${DATA.M_LOT_NO}'`;
  //${moment().format('YYYY-MM-DD')}
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.delete_in_kho_ao = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = ` DELETE FROM IN_KHO_SX WHERE CTR_CD='${DATA.CTR_CD}' AND IN_KHO_ID = ${DATA.IN_KHO_ID}`;
  //${moment().format('YYYY-MM-DD')}
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.delete_out_kho_ao = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = ` DELETE FROM OUT_KHO_SX WHERE CTR_CD='${DATA.CTR_CD}' AND PLAN_ID_INPUT = '${DATA.PLAN_ID_INPUT}' AND M_LOT_NO='${DATA.M_LOT_NO}'`;
  //${moment().format('YYYY-MM-DD')}
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.check_2_m_code_in_kho_ao = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = ` SELECT PLAN_ID_INPUT, COUNT(DISTINCT M_CODE) AS COUNT_M_CODE FROM IN_KHO_SX WHERE CTR_CD='${DATA.CTR_CD}' AND PLAN_ID_INPUT= '${DATA.PLAN_ID_INPUT}' GROUP BY PLAN_ID_INPUT `;
  //${moment().format('YYYY-MM-DD')}
  ////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.checkM_CODE_CHITHI = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `SELECT TOP 1 * FROM ZTB_QLSXCHITHI WHERE CTR_CD='${DATA.CTR_CD}' AND PLAN_ID='${DATA.PLAN_ID_OUTPUT}' AND M_CODE='${DATA.M_CODE}'`;
  //${moment().format('YYYY-MM-DD')}
  ////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.checkNextPlanClosed = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `SELECT CHOTBC FROM ZTB_QLSXPLAN WHERE CTR_CD='${DATA.CTR_CD}' AND  PLAN_ID='${DATA.PLAN_ID}'`;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.checktonlieutrongxuong = async (req, res, DATA) => {
  let checkkq = "OK";
  let conditon = ` WHERE IN_KHO_SX.USE_YN='Y'`;
  //console.log("factory: " + DATA.FACTORY);
  if (DATA.FACTORY !== "ALL") {
    conditon += ` AND IN_KHO_SX.FACTORY = '${DATA.FACTORY}' `;
  }
  let setpdQuery = `SELECT IN_KHO_SX.IN_KHO_ID, IN_KHO_SX.FACTORY, IN_KHO_SX.PHANLOAI, IN_KHO_SX.PLAN_ID_INPUT, IN_KHO_SX.M_CODE, M090.M_NAME, M090.WIDTH_CD, IN_KHO_SX.M_LOT_NO, IN_KHO_SX.ROLL_QTY, IN_KHO_SX.IN_QTY, IN_KHO_SX.TOTAL_IN_QTY,CASE WHEN IN_KHO_SX.FSC ='Y' THEN 'Y' ELSE 'N' END AS FSC, IN_KHO_SX.INS_DATE,ZTB_QLSXPLAN.PLAN_EQ  FROM IN_KHO_SX LEFT JOIN M090 ON  (M090.M_CODE= IN_KHO_SX.M_CODE AND M090.CTR_CD = IN_KHO_SX.CTR_CD) LEFT JOIN ZTB_QLSXPLAN ON (ZTB_QLSXPLAN.PLAN_ID=IN_KHO_SX.PLAN_ID_INPUT AND ZTB_QLSXPLAN.CTR_CD = IN_KHO_SX.CTR_CD) ${conditon} AND IN_KHO_SX.CTR_CD='${DATA.CTR_CD}' ORDER BY IN_KHO_SX.INS_DATE DESC`;
  //${moment().format('YYYY-MM-DD')}
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.lichsuxuatkhoao = async (req, res, DATA) => {
  let checkkq = "OK";
  let conditon = ` WHERE OUT_KHO_SX.INS_DATE BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE} 23:59:59'`;
  if (DATA.FACTORY !== "ALL") {
    conditon += ` AND OUT_KHO_SX.FACTORY = '${DATA.FACTORY}' `;
  }
  let setpdQuery = `SELECT  OUT_KHO_SX.OUT_KHO_ID,  OUT_KHO_SX.FACTORY, OUT_KHO_SX.PHANLOAI, OUT_KHO_SX.M_CODE, M090.M_NAME, M090.WIDTH_CD, OUT_KHO_SX.M_LOT_NO, OUT_KHO_SX.PLAN_ID_INPUT,OUT_KHO_SX.PLAN_ID_OUTPUT, OUT_KHO_SX.ROLL_QTY, OUT_KHO_SX.OUT_QTY, OUT_KHO_SX.TOTAL_OUT_QTY, OUT_KHO_SX.INS_DATE, OUT_KHO_SX.CTR_CD FROM OUT_KHO_SX LEFT JOIN M090 ON (M090.M_CODE = OUT_KHO_SX.M_CODE AND M090.CTR_CD = OUT_KHO_SX.CTR_CD) ${conditon} AND OUT_KHO_SX.CTR_CD='${DATA.CTR_CD}' ORDER BY OUT_KHO_SX.INS_DATE DESC`;
  //${moment().format('YYYY-MM-DD')}
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.setUSE_YN_KHO_AO_INPUT = async (req, res, DATA) => {
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let checkkq = "OK";
  /* let setpdQuery = `UPDATE IN_KHO_SX SET USE_YN ='${DATA.USE_YN}', PLAN_ID_SUDUNG='${DATA.PLAN_ID_SUDUNG}', UPD_DATE=GETDATE(), UPD_EMPL='${EMPL_NO}' WHERE PLAN_ID_INPUT= '${DATA.PLAN_ID_INPUT}' AND M_CODE='${DATA.M_CODE}' AND M_LOT_NO='${DATA.M_LOT_NO}' AND TOTAL_IN_QTY=${DATA.TOTAL_IN_QTY}`;  */
  let setpdQuery = `UPDATE IN_KHO_SX SET USE_YN ='${DATA.USE_YN}', PLAN_ID_SUDUNG='${DATA.PLAN_ID_SUDUNG.toUpperCase()}', UPD_DATE=GETDATE(), UPD_EMPL='${EMPL_NO}', REMARK2='W' WHERE CTR_CD='${DATA.CTR_CD}' AND IN_KHO_ID=${DATA.IN_KHO_ID}`;
  //${moment().format('YYYY-MM-DD')}
  ////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.xuatkhoao = async (req, res, DATA) => {
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let checkkq = "OK";
  let setpdQuery = `INSERT INTO OUT_KHO_SX (CTR_CD,FACTORY,PHANLOAI,PLAN_ID_INPUT,PLAN_ID_OUTPUT,M_CODE,M_LOT_NO,ROLL_QTY,OUT_QTY,TOTAL_OUT_QTY,USE_YN,INS_DATE,INS_EMPL,UPD_DATE,UPD_EMPL, REMARK) VALUES ('${DATA.CTR_CD}','${DATA.FACTORY}','${DATA.PHANLOAI}', '${DATA.PLAN_ID_INPUT}', '${DATA.PLAN_ID_OUTPUT}','${DATA.M_CODE}','${DATA.M_LOT_NO}','${DATA.ROLL_QTY}','${DATA.OUT_QTY}','${DATA.TOTAL_OUT_QTY}','${DATA.USE_YN}', GETDATE(), '${EMPL_NO}', GETDATE(),'${EMPL_NO}','${DATA.REMARK}')`;
  //${moment().format('YYYY-MM-DD')}
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.checktonKhoSubMLotNo = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `SELECT * FROM IN_KHO_SX_SUB WHERE CTR_CD='${DATA.CTR_CD}' AND  M_LOT_NO='${DATA.M_LOT_NO}' AND USE_YN ='Y' `;
  console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.lichsunhapkhosub = async (req, res, DATA) => {
  let checkkq = "OK";
  let conditon = ` WHERE IN_KHO_SX_SUB.INS_DATE BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE} 23:59:59'`;
  if (DATA.FACTORY !== "ALL") {
    conditon += ` AND IN_KHO_SX_SUB.FACTORY = '${DATA.FACTORY}' `;
  }
  if (DATA.M_LOT_NO !== undefined) {
    conditon += ` AND IN_KHO_SX_SUB.M_LOT_NO='${DATA.M_LOT_NO}'`
  }
  let setpdQuery = `SELECT  IN_KHO_SX_SUB.IN_KHO_ID, IN_KHO_SX_SUB.USE_YN, IN_KHO_SX_SUB.REMARK, IN_KHO_SX_SUB.PLAN_ID_SUDUNG, IN_KHO_SX_SUB.FACTORY, IN_KHO_SX_SUB.PHANLOAI, IN_KHO_SX_SUB.M_CODE, M090.M_NAME, M090.WIDTH_CD, IN_KHO_SX_SUB.M_LOT_NO, IN_KHO_SX_SUB.PLAN_ID_INPUT, IN_KHO_SX_SUB.ROLL_QTY, IN_KHO_SX_SUB.IN_QTY, IN_KHO_SX_SUB.TOTAL_IN_QTY, IN_KHO_SX_SUB.INS_DATE, RETURN_NVL.UPD_DATE  AS KHO_CFM_DATE, RETURN_NVL.USE_YN AS RETURN_STATUS FROM IN_KHO_SX_SUB 
LEFT JOIN M090 ON (M090.M_CODE = IN_KHO_SX_SUB.M_CODE AND M090.CTR_CD = IN_KHO_SX_SUB.CTR_CD) 
LEFT JOIN RETURN_NVL ON (IN_KHO_SX_SUB.PLAN_ID_INPUT = RETURN_NVL.LAST_PLAN_ID AND IN_KHO_SX_SUB.M_LOT_NO = RETURN_NVL.M_LOT_NO AND RETURN_NVL.CTR_CD = IN_KHO_SX_SUB.CTR_CD) ${conditon} AND IN_KHO_SX_SUB.CTR_CD='${DATA.CTR_CD}' ORDER BY IN_KHO_SX_SUB.INS_DATE DESC`;
  //${moment().format('YYYY-MM-DD')}
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.checktonlieutrongxuong_sub = async (req, res, DATA) => {
  let checkkq = "OK";
  let conditon = ` WHERE IN_KHO_SX_SUB.USE_YN='Y'`;
  //console.log("factory: " + DATA.FACTORY);
  if (DATA.FACTORY !== "ALL") {
    conditon += ` AND IN_KHO_SX_SUB.FACTORY = '${DATA.FACTORY}' `;
  }
  let setpdQuery = `SELECT IN_KHO_SX_SUB.IN_KHO_ID, IN_KHO_SX_SUB.FACTORY, IN_KHO_SX_SUB.PHANLOAI, IN_KHO_SX_SUB.PLAN_ID_INPUT, IN_KHO_SX_SUB.M_CODE, M090.M_NAME, M090.WIDTH_CD, IN_KHO_SX_SUB.M_LOT_NO, IN_KHO_SX_SUB.ROLL_QTY, IN_KHO_SX_SUB.IN_QTY, IN_KHO_SX_SUB.TOTAL_IN_QTY,CASE WHEN IN_KHO_SX_SUB.FSC ='Y' THEN 'Y' ELSE 'N' END AS FSC, IN_KHO_SX_SUB.INS_DATE,ZTB_QLSXPLAN.PLAN_EQ  FROM IN_KHO_SX_SUB LEFT JOIN M090 ON  (M090.M_CODE= IN_KHO_SX_SUB.M_CODE AND M090.CTR_CD = IN_KHO_SX_SUB.CTR_CD) LEFT JOIN ZTB_QLSXPLAN ON (ZTB_QLSXPLAN.PLAN_ID=IN_KHO_SX_SUB.PLAN_ID_INPUT AND ZTB_QLSXPLAN.CTR_CD = IN_KHO_SX_SUB.CTR_CD) ${conditon} AND IN_KHO_SX_SUB.CTR_CD='${DATA.CTR_CD}' ORDER BY IN_KHO_SX_SUB.INS_DATE DESC`;
  //${moment().format('YYYY-MM-DD')}
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.setUSE_YN_KHO_SUB_INPUT = async (req, res, DATA) => {
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let checkkq = "OK";
  /* let setpdQuery = `UPDATE IN_KHO_SX SET USE_YN ='${DATA.USE_YN}', PLAN_ID_SUDUNG='${DATA.PLAN_ID_SUDUNG}', UPD_DATE=GETDATE(), UPD_EMPL='${EMPL_NO}' WHERE PLAN_ID_INPUT= '${DATA.PLAN_ID_INPUT}' AND M_CODE='${DATA.M_CODE}' AND M_LOT_NO='${DATA.M_LOT_NO}' AND TOTAL_IN_QTY=${DATA.TOTAL_IN_QTY}`;  */
  let setpdQuery = `UPDATE IN_KHO_SX_SUB SET USE_YN ='${DATA.USE_YN}', PLAN_ID_SUDUNG='${DATA.PLAN_ID_SUDUNG.toUpperCase()}', UPD_DATE=GETDATE(), UPD_EMPL='${EMPL_NO}', REMARK2='W' WHERE CTR_CD='${DATA.CTR_CD}' AND IN_KHO_ID=${DATA.IN_KHO_ID}`;
  //${moment().format('YYYY-MM-DD')}
  ////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.deleteLongtermPlan = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
 DELETE FROM ZTB_PROD_PLAN_TB WHERE PLAN_DATE='${DATA.PLAN_DATE}' AND G_CODE='${DATA.G_CODE}' AND PROCESS_NUMBER='${DATA.PROCESS_NUMBER}' AND CTR_CD='${DATA.CTR_CD}' 
  `;
  console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.insertKHSXDAIHAN = async (req, res, DATA) => {
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let checkkq = "OK";
  let setpdQuery = `          
  INSERT INTO ZTB_PROD_PLAN_TB (CTR_CD,EQ_SERIES,G_CODE,PROCESS_NUMBER,PLAN_DATE,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15, INS_EMPL, INS_DATE,UPD_EMPL,UPD_DATE) VALUES ('${DATA.CTR_CD}','${DATA.EQ_NAME}','${DATA.G_CODE}',${DATA.PROCESS_NUMBER},'${DATA.PLAN_DATE}',${DATA.D1},${DATA.D2},${DATA.D3},${DATA.D4},${DATA.D5},${DATA.D6},${DATA.D7},${DATA.D8},${DATA.D9},${DATA.D10},${DATA.D11},${DATA.D12},${DATA.D13},${DATA.D14},${DATA.D15},'${EMPL_NO}',GETDATE(), '${EMPL_NO}',GETDATE())
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.loadKHSXDAIHAN = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `          
  DECLARE @machine VARCHAR(100);
  DECLARE @query varchar(max);
  SELECT @machine = STRING_AGG(CONCAT('''', SUBSTRING(EQ_NAME, 0, 3), ''''), ',')
  FROM (
      SELECT DISTINCT SUBSTRING(EQ_NAME, 0, 3) AS EQ_NAME
      FROM ZTB_SX_EQ_STATUS WHERE CTR_CD='${DATA.CTR_CD}'
  ) AS AA;
  SELECT @query = '
  WITH KQSX AS
  ( SELECT ZTB_QLSXPLAN.PROD_REQUEST_NO, ZTB_QLSXPLAN.PROCESS_NUMBER, SUM(isnull(SX_RESULT,0)) AS KETQUASX, ZTB_QLSXPLAN.CTR_CD FROM ZTB_SX_RESULT LEFT JOIN ZTB_QLSXPLAN ON (ZTB_QLSXPLAN.PLAN_ID = ZTB_SX_RESULT.PLAN_ID AND ZTB_QLSXPLAN.CTR_CD = ZTB_SX_RESULT.CTR_CD) WHERE ZTB_QLSXPLAN.STEP=0 AND ZTB_QLSXPLAN.CTR_CD=''${DATA.CTR_CD}'' GROUP BY ZTB_QLSXPLAN.PROD_REQUEST_NO, ZTB_QLSXPLAN.PROCESS_NUMBER, ZTB_QLSXPLAN.CTR_CD
  ),
  EQ_Unpivot AS (
      SELECT 
      CTR_CD,
          G_CODE, 
          RIGHT(Attribute, 1) AS PROCESS_NUMBER,
          Value AS EQ_NAME
      FROM M100
      UNPIVOT
      (
          Value FOR Attribute IN (EQ1, EQ2, EQ3, EQ4)
      ) AS Unpvt
  ),
  PROCESS_TB AS
  (
  SELECT 
    E.CTR_CD,
      E.G_CODE,   
      E.PROCESS_NUMBER,
    E.EQ_NAME
    FROM EQ_Unpivot AS E
    WHERE E.EQ_NAME IN ('+@machine+') AND E.EQ_NAME is not null
  ),
  INSPECT_OUTPUT_TB AS 
  (
  SELECT CTR_CD,PROD_REQUEST_NO, SUM(OUTPUT_QTY_EA) AS LOT_TOTAL_OUTPUT_QTY_EA FROM ZTBINSPECTOUTPUTTB WHERE SORTING=''N'' GROUP BY CTR_CD,PROD_REQUEST_NO
  ),
  TON_YCSX_TB AS
  (
  SELECT P400.CTR_CD, M100.G_CODE,M100.G_NAME, PROCESS_TB.PROCESS_NUMBER, PROCESS_TB.EQ_NAME, P400.PROD_REQUEST_QTY,isnull(KQSX.KETQUASX,0) AS KETQUASX, CASE WHEN (P400.PROD_REQUEST_QTY - isnull(KQSX.KETQUASX,0)) > 0 THEn (P400.PROD_REQUEST_QTY - isnull(KQSX.KETQUASX,0)) ELSE 0 END AS TON_YCSX  FROM P400 
 LEFT JOIN M100 ON (M100.CTR_CD = P400.CTR_CD AND M100.G_CODE = P400.G_CODE)
  LEFT JOIN PROCESS_TB ON (M100.CTR_CD = PROCESS_TB.CTR_CD AND M100.G_CODE = PROCESS_TB.G_CODE)
  LEFT JOIN KQSX ON (KQSX.CTR_CD = P400.CTR_CD AND KQSX.PROD_REQUEST_NO = P400.PROD_REQUEST_NO AND KQSX.PROCESS_NUMBER= PROCESS_TB.PROCESS_NUMBER)
  LEFT JOIN INSPECT_OUTPUT_TB ON (INSPECT_OUTPUT_TB.CTR_CD = P400.CTR_CD AND INSPECT_OUTPUT_TB.PROD_REQUEST_NO = P400.PROD_REQUEST_NO)
  WHERE P400.PL_HANG=''TT'' AND P400.PROD_REQUEST_DATE > ''2024-12-01'' AND P400.CTR_CD=''${DATA.CTR_CD}'' AND P400.USE_YN=''Y'' AND CASE WHEN (P400.YCSX_PENDING =0 OR isnull(INSPECT_OUTPUT_TB.LOT_TOTAL_OUTPUT_QTY_EA, 0) >= P400.PROD_REQUEST_QTY OR M100.USE_YN=''N'') THEN 0 ELSE 1 END = 1 AND P400.CODE_55 <> ''04''
  ),
  TON2_TB AS
  (
  SELECT CTR_CD,G_CODE,G_NAME, PROCESS_NUMBER, EQ_NAME, SUM(PROD_REQUEST_QTY) AS PROD_REQUEST_QTY, SUM(KETQUASX) AS KETQUASX, SUM(TON_YCSX) AS TON_YCSX FROM TON_YCSX_TB  GROUP BY CTR_CD,G_CODE,G_NAME, PROCESS_NUMBER, EQ_NAME
  ),
  PLANTB AS 
  (	
    SELECT * FROM ZTB_PROD_PLAN_TB WHERE PLAN_DATE = ''${DATA.PLAN_DATE}''
  )
  SELECT TON2_TB.*,PLANTB.PLAN_DATE, 
  CASE
   WHEN TON2_TB.PROCESS_NUMBER = 1 THEN UPH1
   WHEN TON2_TB.PROCESS_NUMBER = 2 THEN UPH2
   WHEN TON2_TB.PROCESS_NUMBER = 3 THEN UPH3
   WHEN TON2_TB.PROCESS_NUMBER = 4 THEN UPH4
   ELSE 1
  END AS UPH,
  isnull(D1,0) AS D1,
  isnull(D2,0) AS D2,
  isnull(D3,0) AS D3,
  isnull(D4,0) AS D4,
  isnull(D5,0) AS D5,
  isnull(D6,0) AS D6,
  isnull(D7,0) AS D7,
  isnull(D8,0) AS D8,
  isnull(D9,0) AS D9,
  isnull(D10,0) AS D10,
  isnull(D11,0) AS D11,
  isnull(D12,0) AS D12,
  isnull(D13,0) AS D13,
  isnull(D14,0) AS D14,
  isnull(D15,0) AS D15,
  (TON2_TB.TON_YCSX - (isnull(D1,0)+isnull(D2,0)+isnull(D3,0)+isnull(D4,0)+isnull(D5,0)+isnull(D6,0)+isnull(D7,0)+isnull(D8,0)+isnull(D9,0)+isnull(D10,0)+isnull(D11,0)+isnull(D12,0)+isnull(D13,0)+isnull(D14,0)+isnull(D15,0))) AS D16    FROM TON2_TB 
  LEFT JOIN PLANTB ON (TON2_TB.CTR_CD = PLANTB.CTR_CD AND TON2_TB.EQ_NAME = PLANTB.EQ_SERIES AND TON2_TB.G_CODE = PLANTB.G_CODE AND TON2_TB.PROCESS_NUMBER = PLANTB.PROCESS_NUMBER)
  LEFT JOIN M100 ON (TON2_TB.CTR_CD = M100.CTR_CD AND TON2_TB.G_CODE = M100.G_CODE)
  WHERE TON_YCSX >0
  ORDER BY G_CODE ASC, PROCESS_NUMBER ASC
  '
  execute(@query)
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.moveKHSXDAIHAN = async (req, res, DATA) => {
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let checkkq = "OK";
  let setpdQuery = `          
  DECLARE @machine VARCHAR(100);
  DECLARE @query varchar(max);
  SELECT @machine = STRING_AGG(CONCAT('''', SUBSTRING(EQ_NAME, 0, 3), ''''), ',')
  FROM (
      SELECT DISTINCT SUBSTRING(EQ_NAME, 0, 3) AS EQ_NAME
      FROM ZTB_SX_EQ_STATUS WHERE CTR_CD='${DATA.CTR_CD}'
  ) AS AA;
  SELECT @query = '
  WITH KQSX AS
  ( SELECT ZTB_QLSXPLAN.PROD_REQUEST_NO, ZTB_QLSXPLAN.PROCESS_NUMBER, SUM(isnull(SX_RESULT,0)) AS KETQUASX, ZTB_QLSXPLAN.CTR_CD FROM ZTB_SX_RESULT LEFT JOIN ZTB_QLSXPLAN ON (ZTB_QLSXPLAN.PLAN_ID = ZTB_SX_RESULT.PLAN_ID AND ZTB_QLSXPLAN.CTR_CD = ZTB_SX_RESULT.CTR_CD) WHERE ZTB_QLSXPLAN.STEP=0 AND ZTB_QLSXPLAN.CTR_CD=''${DATA.CTR_CD}'' GROUP BY ZTB_QLSXPLAN.PROD_REQUEST_NO, ZTB_QLSXPLAN.PROCESS_NUMBER, ZTB_QLSXPLAN.CTR_CD
  ),
  EQ_Unpivot AS (
      SELECT 
      CTR_CD,
          G_CODE, 
          RIGHT(Attribute, 1) AS PROCESS_NUMBER,
          Value AS EQ_NAME
      FROM M100
      UNPIVOT
      (
          Value FOR Attribute IN (EQ1, EQ2, EQ3, EQ4)
      ) AS Unpvt
  ),
  PROCESS_TB AS
  (
  SELECT 
    E.CTR_CD,
      E.G_CODE,   
      E.PROCESS_NUMBER,
    E.EQ_NAME
    FROM EQ_Unpivot AS E
    WHERE E.EQ_NAME IN ('+@machine+') AND E.EQ_NAME is not null
  ),
  TON_YCSX_TB AS
  (
  SELECT P400.CTR_CD, M100.G_CODE,M100.G_NAME, PROCESS_TB.PROCESS_NUMBER, PROCESS_TB.EQ_NAME, P400.PROD_REQUEST_QTY,isnull(KQSX.KETQUASX,0) AS KETQUASX, CASE WHEN (P400.PROD_REQUEST_QTY - isnull(KQSX.KETQUASX,0)) > 0 THEn (P400.PROD_REQUEST_QTY - isnull(KQSX.KETQUASX,0)) ELSE 0 END AS TON_YCSX  FROM P400 
  LEFT JOIN KQSX ON (KQSX.CTR_CD = P400.CTR_CD AND KQSX.PROD_REQUEST_NO = P400.PROD_REQUEST_NO)
  LEFT JOIN M100 ON (M100.CTR_CD = P400.CTR_CD AND M100.G_CODE = P400.G_CODE)
  LEFT JOIN PROCESS_TB ON (M100.CTR_CD = PROCESS_TB.CTR_CD AND M100.G_CODE = PROCESS_TB.G_CODE)
  WHERE P400.PL_HANG=''TT'' AND P400.PROD_REQUEST_DATE > ''2024-12-01'' AND P400.CTR_CD=''${DATA.CTR_CD}'' AND P400.USE_YN=''Y'' AND P400.YCSX_PENDING = 1 AND P400.CODE_55 <> ''04''
  ),
  TON2_TB AS
  (
  SELECT CTR_CD,G_CODE,G_NAME, PROCESS_NUMBER, EQ_NAME, SUM(PROD_REQUEST_QTY) AS PROD_REQUEST_QTY, SUM(KETQUASX) AS KETQUASX, SUM(TON_YCSX) AS TON_YCSX FROM TON_YCSX_TB  GROUP BY CTR_CD,G_CODE,G_NAME, PROCESS_NUMBER, EQ_NAME
  ),
  TON3_TB AS
  (SELECT * FROM TON2_TB WHERE TON2_TB.TON_YCSX > 0)
  INSERT INTO ZTB_PROD_PLAN_TB
SELECT CTR_CD, EQ_SERIES, G_CODE, PROCESS_NUMBER, ''${DATA.TO_DATE}'' AS PLAN_DATE, D2 AS D1, D3 AS D2, D4 AS D3, D5 AS D4, D6 AS D5, D7 AS D6, D8 AS D7, D9 AS D8, D10 AS D9, D11 AS D10, D12 AS D11, D13 AS D12, D14 AS D13, D15 AS D14, 0 AS D15, GETDATE() AS INS_DATE, ''${EMPL_NO}'' AS INS_EMPL, GETDATE() AS UPD_DATE, ''${EMPL_NO}'' AS UPD_EMPL FROM ZTB_PROD_PLAN_TB WHERE PLAN_DATE =''${DATA.FROM_DATE}'' AND G_CODE  IN (SELECT DISTINCT G_CODE FROM TON3_TB)
  '
  execute(@query)
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.checkplansetting = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `SELECT * FROM  ZTB_SX_RESULT WHERE CTR_CD='${DATA.CTR_CD}' AND PLAN_ID= '${DATA.PLAN_ID}'`;
  //${moment().format('YYYY-MM-DD')}
  ////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.move_plan = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `UPDATE ZTB_QLSXPLAN SET PLAN_DATE ='${DATA.PLAN_DATE}' WHERE CTR_CD='${DATA.CTR_CD}' AND PLAN_ID= '${DATA.PLAN_ID}'`;
  //${moment().format('YYYY-MM-DD')}
  ////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.getP4002 = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `SELECT * FROM P400 WHERE CTR_CD='${DATA.CTR_CD}' AND PROD_REQUEST_NO='${DATA.PROD_REQUEST_NO}'`;
  //${moment().format('YYYY-MM-DD')}
  ////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.check_PLAN_ID_OUT_KNIFE_FILM = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = ` SELECT * FROM OUT_KNIFE_FILM WHERE CTR_CD='${DATA.CTR_CD}' AND PLAN_ID='${DATA.PLAN_ID}'`;
  //${moment().format('YYYY-MM-DD')}
  ////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.insert_OUT_KNIFE_FILM = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `INSERT INTO OUT_KNIFE_FILM (CTR_CD, CA_LAM_VIEC, PLAN_ID, KNIFE_FILM_NO, QTY_KNIFE_FILM, CAVITY, PD, EQ_THUC_TE, EMPL_NO, F_WIDTH, F_LENGTH, INS_DATE, INS_EMPL) VALUES ('${DATA.CTR_CD}','${DATA.CA_LAM_VIEC}','${DATA.PLAN_ID}','${DATA.KNIFE_FILM_NO}', 1,${DATA.CAVITY},${DATA.PD}, '${DATA.EQ_THUC_TE}','${DATA.EMPL_NO}',0,0,GETDATE(),'${DATA.EMPL_NO}')`;
  let updateVQLSXPLAN = `UPDATE ZTB_QLSXPLAN SET XUATDAOFILM ='V' WHERE CTR_CD='${DATA.CTR_CD}' AND PLAN_ID='${DATA.PLAN_ID}'`;
  //${moment().format('YYYY-MM-DD')}
  ////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  checkkq = await queryDB(updateVQLSXPLAN);
  res.send(checkkq);
};
exports.check_PLAN_ID_KHO_AO = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = ` SELECT * FROM OUT_KHO_SX WHERE CTR_CD='${DATA.CTR_CD}' AND PLAN_ID_OUTPUT='${DATA.PLAN_ID}'`;
  //${moment().format('YYYY-MM-DD')}
  ////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.checkPLANID_O300 = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `SELECT TOP 1 * FROM O300 WHERE CTR_CD='${DATA.CTR_CD}' AND PLAN_ID='${DATA.PLAN_ID}'`;
  //${moment().format('YYYY-MM-DD')}
  ////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.checkPLANID_O301 = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `SELECT O301.OUT_DATE, O301.OUT_NO, O301.OUT_SEQ, O301.M_CODE, M090.M_NAME, M090.WIDTH_CD, O301.OUT_PRE_QTY, O301.OUT_CFM_QTY, O301.REMK, O301.USE_YN, O301.INS_DATE, O301.INS_EMPL, O301.UPD_DATE, O301.UPD_EMPL, O301.FACTORY, O301.CUST_CD, O301.TOTAL_ROLL_QTY, O301.PLAN_ID, O301.PLAN_ID2 FROM O301 LEFT JOIN M090 ON M090.M_CODE = O301.M_CODE AND M090.CTR_CD = O301.CTR_CD WHERE O301.CTR_CD='${DATA.CTR_CD}' AND O301.PLAN_ID='${DATA.PLAN_ID}' ORDER BY OUT_SEQ DESC`;
  //${moment().format('YYYY-MM-DD')}
  ////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.getO300_LAST_OUT_NO = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `SELECT TOP 1 OUT_NO, OUT_DATE FROM O300 WHERE CTR_CD='${DATA.CTR_CD}' AND OUT_DATE='${moment().format(
    "YYYYMMDD"
  )}' ORDER BY OUT_NO DESC`;
  //${moment().format('YYYY-MM-DD')}
  ////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.getP400 = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `SELECT * FROM P400 WHERE CTR_CD='${DATA.CTR_CD}' AND PROD_REQUEST_NO='${DATA.PROD_REQUEST_NO}' AND PROD_REQUEST_DATE='${DATA.PROD_REQUEST_DATE}'`;
  //////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  ////console.log(checkkq);
  res.send(checkkq);
};
exports.insertO300 = async (req, res, DATA) => {
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let checkkq = "OK";
  let setpdQuery = `INSERT INTO O300 (CTR_CD,OUT_DATE,OUT_NO,CODE_03,CODE_50,CODE_52,PROD_REQUEST_DATE,PROD_REQUEST_NO,USE_YN,INS_DATE,INS_EMPL,UPD_DATE,UPD_EMPL,FACTORY,PLAN_ID) VALUES('${DATA.CTR_CD}','${DATA.OUT_DATE}','${DATA.OUT_NO}','${DATA.CODE_03}','${DATA.CODE_50}','${DATA.CODE_52}','${DATA.PROD_REQUEST_DATE}','${DATA.PROD_REQUEST_NO}','${DATA.USE_YN}',GETDATE(),'${EMPL_NO}',GETDATE(),'${EMPL_NO}','${DATA.FACTORY}','${DATA.PLAN_ID}')`;
  //${moment().format('YYYY-MM-DD')}
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.getO300_ROW = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `SELECT TOP 1 OUT_NO, OUT_DATE FROM O300 WHERE CTR_CD='${DATA.CTR_CD}' AND PLAN_ID='${DATA.PLAN_ID}'`;
  //${moment().format('YYYY-MM-DD')}
  ////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.deleteM_CODE_O301 = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `DELETE FROM O301 WHERE CTR_CD='${DATA.CTR_CD}' AND PLAN_ID='${DATA.PLAN_ID}' AND M_CODE NOT IN (${DATA.M_CODE_LIST})`;
  console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.checkM_CODE_PLAN_ID_Exist_in_O301 = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `SELECT * FROM O301 WHERE CTR_CD='${DATA.CTR_CD}' AND PLAN_ID='${DATA.PLAN_ID}' AND M_CODE='${DATA.M_CODE}'`;
  //${moment().format('YYYY-MM-DD')}
  ////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.insertO301 = async (req, res, DATA) => {
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let checkkq = "OK";
  let setpdQuery = `INSERT INTO O301 (CTR_CD, OUT_DATE, OUT_NO, OUT_SEQ, CODE_03, M_CODE, OUT_PRE_QTY, USE_YN, INS_DATE, INS_EMPL, PLAN_ID, G_CODE) VALUES('${DATA.CTR_CD}','${DATA.OUT_DATE}','${DATA.OUT_NO}','${DATA.OUT_SEQ}','${DATA.CODE_03}','${DATA.M_CODE}','${DATA.OUT_PRE_QTY}','${DATA.USE_YN}',GETDATE(),'${EMPL_NO}','${DATA.PLAN_ID}','${DATA.G_CODE}')`;
  //${moment().format('YYYY-MM-DD')}
  ////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.updateO301 = async (req, res, DATA) => {
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let checkkq = "OK";
  let setpdQuery = `UPDATE O301 SET OUT_PRE_QTY='${DATA.OUT_PRE_QTY}', UPD_DATE=GETDATE(), UPD_EMPL='${EMPL_NO}' WHERE CTR_CD='${DATA.CTR_CD}' AND PLAN_ID='${DATA.PLAN_ID}' AND M_CODE='${DATA.M_CODE}'`;
  //${moment().format('YYYY-MM-DD')}
  ////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.updatePlanQLSX = async (req, res, DATA) => {
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let checkkq = "OK";
  //let setpdQuery = `UPDATE ZTB_QLSXPLAN SET PLAN_QTY=${DATA.PLAN_QTY}, STEP=${DATA.STEP}, PLAN_LEADTIME=${DATA.PLAN_LEADTIME}, PLAN_ORDER=${DATA.PLAN_ORDER},PROCESS_NUMBER=${DATA.PROCESS_NUMBER},KETQUASX=${DATA.KETQUASX},PLAN_EQ='${DATA.PLAN_EQ}', UPD_EMPL='${EMPL_NO}', UPD_DATE=GETDATE() WHERE PLAN_ID='${DATA.PLAN_ID}'`;
  let setpdQuery = `UPDATE ZTB_QLSXPLAN SET NEXT_PLAN_ID = '${DATA.NEXT_PLAN_ID}' ,PLAN_QTY=${DATA.PLAN_QTY}, OLD_PLAN_QTY=${DATA.OLD_PLAN_QTY},STEP=${DATA.STEP}, PLAN_LEADTIME=${DATA.PLAN_LEADTIME}, PLAN_ORDER=${DATA.PLAN_ORDER},PROCESS_NUMBER=${DATA.PROCESS_NUMBER},PLAN_EQ='${DATA.PLAN_EQ}', IS_SETTING='${DATA.IS_SETTING}', CURRENT_LOSS_SX=${DATA.CURRENT_LOSS_SX}, CURRENT_SETTING_M=${DATA.CURRENT_SETTING_M},CURRENT_LOSS_KT=${DATA.CURRENT_LOSS_KT}, NEEDED_QTY=${DATA.NEEDED_QTY}, UPD_EMPL='${EMPL_NO}', UPD_DATE=GETDATE() WHERE CTR_CD='${DATA.CTR_CD}' AND PLAN_ID='${DATA.PLAN_ID}'`;
  //${moment().format('YYYY-MM-DD')}
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.updatePlanOrder = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `MERGE INTO ZTB_QLSXPLAN
  USING
  (
  SELECT PLAN_ID, PLAN_DATE, PLAN_EQ, PLAN_ORDER, CTR_CD, ROW_NUMBER() OVER (PARTITION BY PLAN_DATE, PLAN_EQ ORDER BY PLAN_ORDER ASC) AS STT  FROM ZTB_QLSXPLAN WHERE PLAN_DATE ='${DATA.PLAN_DATE}' AND ZTB_QLSXPLAN.CTR_CD='${DATA.CTR_CD}'
  ) AS BANGNGUON
  ON BANGNGUON.PLAN_ID = ZTB_QLSXPLAN.PLAN_ID AND BANGNGUON.CTR_CD = ZTB_QLSXPLAN.CTR_CD
  WHEN MATCHED THEN
  UPDATE
  SET ZTB_QLSXPLAN.PLAN_ORDER = BANGNGUON.STT;`;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.getqlsxplan2 = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = " WHERE 1=1 ";
  if (DATA.FACTORY !== "ALL") {
    condition += ` AND ZTB_QLSXPLAN.PLAN_FACTORY='${DATA.FACTORY}'`;
  }
  if (DATA.MACHINE !== "ALL") {
    condition += ` AND SUBSTRING(ZTB_QLSXPLAN.PLAN_EQ,1,2)='${DATA.MACHINE}'`;
  }
  condition += ` AND ZTB_QLSXPLAN.PLAN_DATE='${DATA.PLAN_DATE}'`;
  let setpdQuery = `WITH DMTB AS
  (
    SELECT  PLAN_FACTORY, PLAN_DATE, ZTB_QLSXPLAN.G_CODE, PLAN_EQ, PLAN_ORDER, PLAN_ID, PLAN_QTY, 
    CASE 
    WHEN IS_SETTING = 'Y' AND SUBSTRING(PLAN_EQ,1,2) = M100.EQ1 THEN isnull(M100.Setting1,9999)
    WHEN IS_SETTING = 'Y' AND SUBSTRING(PLAN_EQ,1,2) = M100.EQ2 THEN isnull(M100.Setting2,9999)
    WHEN IS_SETTING = 'Y' AND SUBSTRING(PLAN_EQ,1,2) = M100.EQ3 THEN isnull(M100.Setting3,9999)
    WHEN IS_SETTING = 'Y' AND SUBSTRING(PLAN_EQ,1,2) = M100.EQ4 THEN isnull(M100.Setting4,9999)
    ELSE 0
    END AS SETTING_TIME,
    CASE 
    WHEN SUBSTRING(PLAN_EQ,1,2) = M100.EQ1 THEN isnull(CASE WHEN M100.UPH1 =0 THEN 1 ELSE M100.UPH1 END,1)
    WHEN SUBSTRING(PLAN_EQ,1,2) = M100.EQ2 THEN isnull(CASE WHEN M100.UPH2 =0 THEN 1 ELSE M100.UPH2 END,1)
    WHEN SUBSTRING(PLAN_EQ,1,2) = M100.EQ3 THEN isnull(CASE WHEN M100.UPH3 =0 THEN 1 ELSE M100.UPH3 END,1)
    WHEN SUBSTRING(PLAN_EQ,1,2) = M100.EQ4 THEN isnull(CASE WHEN M100.UPH4 =0 THEN 1 ELSE M100.UPH4 END,1)
    ELSE 1
    END AS UPH,
    ZTB_QLSXPLAN.CTR_CD
    FROM ZTB_QLSXPLAN
    LEFT JOIN M100 ON (M100.G_CODE = ZTB_QLSXPLAN.G_CODE AND M100.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
    LEFT JOIN P400 ON (P400.PROD_REQUEST_NO = ZTB_QLSXPLAN.PROD_REQUEST_NO AND P400.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
    WHERE ZTB_QLSXPLAN.CTR_CD='${DATA.CTR_CD}' AND PLAN_DATE='${DATA.PLAN_DATE}'
  ),
  TEMP_TB AS (
  SELECT CTR_CD, PLAN_ID, SUM(isnull(TEMP_QTY,0)) AS TEMP_QTY FROM P501 WHERE REMARK <> 'HUY TEM' OR REMARK is null GROUP BY PLAN_ID, CTR_CD
  ),
  NEXTB AS
  (
  SELECT PLAN_FACTORY, PLAN_DATE, G_CODE, PLAN_EQ, PLAN_ORDER, PLAN_ID, PLAN_QTY, SETTING_TIME, UPH, (SETTING_TIME + PLAN_QTY*1.0/UPH*60) AS LEADTIME, CTR_CD FROM DMTB
  ),
  LEATIMETB AS
  (
  SELECT PLAN_FACTORY, PLAN_DATE, PLAN_EQ, PLAN_ORDER, PLAN_ID, PLAN_QTY, LEADTIME, SUM(LEADTIME) OVER (PARTITION BY PLAN_EQ,PLAN_FACTORY ORDER BY PLAN_ORDER ASC) AS ACC_TIME, CTR_CD FROM NEXTB
  ),
  BB AS
  (SELECT PVTB.PROD_REQUEST_NO, isnull(PVTB.[1],0) AS CD1, isnull(PVTB.[2],0) AS CD2,isnull(PVTB.[3],0) AS CD3,isnull(PVTB.[4],0) AS CD4, PVTB.CTR_CD FROM 
  (
      SELECT ZTB_QLSXPLAN.PROD_REQUEST_NO, ZTB_QLSXPLAN.PROCESS_NUMBER, SUM(isnull(SX_RESULT,0)) AS KETQUASX, ZTB_QLSXPLAN.CTR_CD FROM ZTB_SX_RESULT LEFT JOIN ZTB_QLSXPLAN ON (ZTB_QLSXPLAN.PLAN_ID = ZTB_SX_RESULT.PLAN_ID AND ZTB_QLSXPLAN.CTR_CD = ZTB_SX_RESULT.CTR_CD) WHERE ZTB_QLSXPLAN.STEP=0 AND ZTB_QLSXPLAN.CTR_CD='${DATA.CTR_CD}' GROUP BY ZTB_QLSXPLAN.PROD_REQUEST_NO, ZTB_QLSXPLAN.PROCESS_NUMBER, ZTB_QLSXPLAN.CTR_CD
  )
  AS PV
  PIVOT
  ( 
  SUM(PV.KETQUASX) FOR PV.PROCESS_NUMBER IN ([1],[2],[3],[4])
  ) 
  AS PVTB), 
  LOSSKT AS (
   SELECT BB.G_CODE, SUM(BB.INSPECT_TOTAL_QTY) AS INSPECT_TOTAL_QTY, SUM(BB.TOTAL_NG) AS TOTAL_NG, CASE WHEN SUM(BB.TOTAL_NG)*1.0/SUM(BB.INSPECT_TOTAL_QTY) > 0.05 THEN 0.05 ELSE  SUM(BB.TOTAL_NG)*1.0/SUM(BB.INSPECT_TOTAL_QTY) END AS NG_RATE, BB.CTR_CD FROM 
    (
    SELECT AA.G_CODE, AA.INSPECT_DATE,AA.INSPECT_TOTAL_QTY, AA.TOTAL_NG, COUNT(G_CODE) OVER(PARTITION BY G_CODE ORDER BY INSPECT_DATE DESC) AS CNT, AA.CTR_CD
    FROM 
    (
    SELECT  G_CODE,CAST(INSPECT_DATETIME AS date) AS INSPECT_DATE, SUM(INSPECT_TOTAL_QTY-ERR32) AS INSPECT_TOTAL_QTY, SUM(ERR1+ERR2+ERR3+ERR4+ERR5+ERR6+ERR7+ERR8+ERR9+ERR10+ERR11+ERR12+ERR13+ERR14+ERR15+ERR16+ERR17+ERR18+ERR19+ERR20+ERR21+ERR22+ERR23+ERR24+ERR25+ERR26+ERR27+ERR28+ERR29+ERR30+ERR31
    ) AS TOTAL_NG, CTR_CD FROM ZTBINSPECTNGTB
    WHERE CTR_CD='${DATA.CTR_CD}'
    GROUP BY G_CODE,CAST(INSPECT_DATETIME AS date), CTR_CD
    ) AS AA
    ) AS BB
    WHERE BB.CNT <=10 AND BB.INSPECT_TOTAL_QTY<>0
    GROUP BY BB.G_CODE, BB.CTR_CD
  )
  SELECT P400.IS_TAM_THOI, P400.DELIVERY_DT, M100.USE_YN, M100.PDBV, M100.PDBV_EMPL, M100.PDBV_DATE, ZTB_QLSXPLAN.IS_SETTING,ZTB_QLSXPLAN.REQ_DF ,ZTB_QLSXPLAN.XUATDAOFILM, ZTB_QLSXPLAN.EQ_STATUS, ZTB_QLSXPLAN.MAIN_MATERIAL, ZTB_QLSXPLAN.INT_TEM, ZTB_QLSXPLAN.CHOTBC, ZTB_QLSXPLAN.DKXL,ZTB_QLSXPLAN.NEXT_PLAN_ID, TEMP_TB.TEMP_QTY AS KQ_SX_TAM, ZTB_QLSXPLAN.KETQUASX, ZTB_QLSXPLAN.PROCESS_NUMBER, ZTB_QLSXPLAN.PLAN_ORDER, ZTB_QLSXPLAN.STEP, ZTB_QLSXPLAN.PLAN_ID,ZTB_QLSXPLAN.PLAN_DATE,ZTB_QLSXPLAN.PROD_REQUEST_NO,ZTB_QLSXPLAN.PLAN_QTY, ZTB_QLSXPLAN.OLD_PLAN_QTY, ZTB_QLSXPLAN.PLAN_EQ,ZTB_QLSXPLAN.PLAN_FACTORY,ZTB_QLSXPLAN.PLAN_LEADTIME,ZTB_QLSXPLAN.INS_EMPL,ZTB_QLSXPLAN.INS_DATE,ZTB_QLSXPLAN.UPD_EMPL,ZTB_QLSXPLAN.UPD_DATE, M100.G_CODE, M100.G_NAME, M100.PD, (M100.G_C*M100.G_C_R) AS CAVITY, M100.G_NAME_KD, P400.PROD_REQUEST_DATE, P400.PROD_REQUEST_QTY, isnull(BB.CD1,0) AS CD1, isnull(BB.CD2,0) AS CD2, isnull(BB.CD3,0) AS CD3, isnull(BB.CD4,0) AS CD4,
  CASE WHEN ( NOT(M100.EQ1 <> 'NA' AND M100.EQ1 <>'NO' AND M100.EQ1 <>'' AND M100.EQ1 is not null)) THEN 0 ELSE P400.PROD_REQUEST_QTY-isnull(BB.CD1,0) END AS TON_CD1,
  CASE WHEN  (NOT (M100.EQ2 <> 'NA' AND M100.EQ2 <>'NO' AND M100.EQ2 <>'' AND M100.EQ2 is not null)) THEN 0 ELSE P400.PROD_REQUEST_QTY-isnull(BB.CD2,0) END AS TON_CD2,
  CASE WHEN  (NOT (M100.EQ3 <> 'NA' AND M100.EQ3 <>'NO' AND M100.EQ3 <>'' AND M100.EQ3 is not null)) THEN 0 ELSE P400.PROD_REQUEST_QTY-isnull(BB.CD3,0) END AS TON_CD3,
  CASE WHEN  (NOT (M100.EQ4 <> 'NA' AND M100.EQ4 <>'NO' AND M100.EQ4 <>'' AND M100.EQ4 is not null)) THEN 0 ELSE P400.PROD_REQUEST_QTY-isnull(BB.CD4,0) END AS TON_CD4,
  M100.FACTORY, M100.EQ1, M100.EQ2, M100.Setting1, M100.Setting2, M100.UPH1, M100.UPH2, M100.Step1, M100.Step2, isnull(M100.LOSS_SX1,0) AS LOSS_SX1, isnull(M100.LOSS_SX2,0) AS LOSS_SX2, isnull(M100.LOSS_SETTING1,0) AS LOSS_SETTING1, isnull(M100.LOSS_SETTING2,0) AS LOSS_SETTING2,M100.Step3, M100.Step4, M100.EQ3, M100.EQ4, M100.UPH3, M100.UPH4, M100.Setting3, M100.Setting4, isnull(M100.LOSS_SX3,0) AS LOSS_SX3, isnull(M100.LOSS_SX4,0) AS LOSS_SX4, isnull(M100.LOSS_SETTING3,0) AS LOSS_SETTING3, isnull(M100.LOSS_SETTING4,0) AS LOSS_SETTING4, M100.NOTE, isnull(LOSSKT.TOTAL_NG*1.0/LOSSKT.INSPECT_TOTAL_QTY,0)*100 AS LOSS_KT, ZTB_SX_RESULT.SETTING_START_TIME, ZTB_SX_RESULT.MASS_START_TIME, ZTB_SX_RESULT.MASS_END_TIME, LEATIMETB.LEADTIME AS AT_LEADTIME, LEATIMETB.ACC_TIME,CASE WHEN M100.PD <> 0 THEN CEILING((P400.PROD_REQUEST_QTY*(1+(isnull(LOSS_SX2,0)+isnull(LOSS_SX3,0)+isnull(LOSS_SX4,0))*1.0/100+isnull(LOSSKT.NG_RATE,0)) + (isnull(LOSS_SETTING2,0)+isnull(LOSS_SETTING3,0)+isnull(LOSS_SETTING4,0))*1.0/M100.PD*(M100.G_C*M100.G_C_R)*1000)) ELSE 0 END AS SLC_CD1,
CASE WHEN M100.PD <> 0 THEN CEILING((P400.PROD_REQUEST_QTY*(1+(isnull(LOSS_SX3,0)+isnull(LOSS_SX4,0))*1.0/100+isnull(LOSSKT.NG_RATE,0)) + (isnull(LOSS_SETTING3,0)+isnull(LOSS_SETTING4,0))*1.0/M100.PD*(M100.G_C*M100.G_C_R)*1000)) ELSE 0 END AS SLC_CD2,
CASE WHEN M100.PD <> 0 THEN CEILING((P400.PROD_REQUEST_QTY*(1+(isnull(LOSS_SX4,0))*1.0/100+isnull(LOSSKT.NG_RATE,0)) + (isnull(LOSS_SETTING4,0))*1.0/M100.PD*(M100.G_C*M100.G_C_R)*1000)) ELSE 0 END AS SLC_CD3,
CASE WHEN M100.PD <> 0 THEN CEILING((P400.PROD_REQUEST_QTY*(1+(0)*1.0/100+isnull(LOSSKT.NG_RATE,0)) + (0)*1.0/M100.PD*(M100.G_C*M100.G_C_R)*1000)) ELSE 0 END AS SLC_CD4, P400.FL_YN
  FROM ZTB_QLSXPLAN
  LEFT JOIN ZTB_SX_RESULT ON (ZTB_SX_RESULT.PLAN_ID = ZTB_QLSXPLAN.PLAN_ID AND ZTB_SX_RESULT.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
  JOIN P400 ON (P400.PROD_REQUEST_NO = ZTB_QLSXPLAN.PROD_REQUEST_NO AND P400.CTR_CD = ZTB_QLSXPLAN.CTR_CD) 
  JOIN M100 ON (P400.G_CODE = M100.G_CODE AND P400.CTR_CD = M100.CTR_CD)
  LEFT JOIN LEATIMETB ON (LEATIMETB.PLAN_ID = ZTB_QLSXPLAN.PLAN_ID AND LEATIMETB.PLAN_FACTORY = ZTB_QLSXPLAN.PLAN_FACTORY AND LEATIMETB.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
  LEFT JOIN  BB ON (BB.PROD_REQUEST_NO = ZTB_QLSXPLAN.PROD_REQUEST_NO AND BB.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
  LEFT JOIN LOSSKT ON (LOSSKT.G_CODE = ZTB_QLSXPLAN.G_CODE AND LOSSKT.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
  LEFT JOIN TEMP_TB ON (TEMP_TB.CTR_CD = ZTB_QLSXPLAN.CTR_CD AND TEMP_TB.PLAN_ID = ZTB_QLSXPLAN.PLAN_ID)
  ${condition} AND ZTB_QLSXPLAN.CTR_CD='${DATA.CTR_CD}' ORDER BY ZTB_QLSXPLAN.PLAN_EQ ASC,  ZTB_QLSXPLAN.PLAN_ORDER ASC `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.getqlsxplan2_New = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = " WHERE 1=1 ";
  if (DATA.FACTORY !== "ALL") {
    condition += ` AND ZTB_QLSXPLAN.PLAN_FACTORY='${DATA.FACTORY}'`;
  }
  if (DATA.MACHINE !== "ALL") {
    condition += ` AND SUBSTRING(ZTB_QLSXPLAN.PLAN_EQ,1,2)='${DATA.MACHINE}'`;
  }
  condition += ` AND ZTB_QLSXPLAN.PLAN_DATE='${DATA.PLAN_DATE}'`;
  let setpdQuery = `WITH BB AS
(SELECT PVTB.PROD_REQUEST_NO, isnull(PVTB.[1],0) AS CD1, isnull(PVTB.[2],0) AS CD2,isnull(PVTB.[3],0) AS CD3,isnull(PVTB.[4],0) AS CD4, PVTB.CTR_CD FROM
(
SELECT ZTB_QLSXPLAN.PROD_REQUEST_NO, ZTB_QLSXPLAN.PROCESS_NUMBER, SUM(isnull(SX_RESULT,0)) AS KETQUASX, ZTB_QLSXPLAN.CTR_CD FROM ZTB_SX_RESULT LEFT JOIN ZTB_QLSXPLAN ON (ZTB_QLSXPLAN.PLAN_ID = ZTB_SX_RESULT.PLAN_ID AND ZTB_QLSXPLAN.CTR_CD = ZTB_SX_RESULT.CTR_CD) WHERE ZTB_QLSXPLAN.STEP=0 AND ZTB_QLSXPLAN.CTR_CD='${DATA.CTR_CD}' GROUP BY ZTB_QLSXPLAN.PROD_REQUEST_NO, ZTB_QLSXPLAN.PROCESS_NUMBER, ZTB_QLSXPLAN.CTR_CD
)
AS PV
PIVOT
(
SUM(PV.KETQUASX) FOR PV.PROCESS_NUMBER IN ([1],[2],[3],[4])
)
AS PVTB),
LOSSKT AS (
SELECT BB.G_CODE, SUM(BB.INSPECT_TOTAL_QTY) AS INSPECT_TOTAL_QTY, SUM(BB.TOTAL_NG) AS TOTAL_NG, BB.CTR_CD FROM
(
SELECT AA.G_CODE, AA.INSPECT_DATE,AA.INSPECT_TOTAL_QTY, AA.TOTAL_NG, COUNT(G_CODE) OVER(PARTITION BY G_CODE ORDER BY INSPECT_DATE DESC) AS CNT, AA.CTR_CD
FROM
(
SELECT  G_CODE,CAST(INSPECT_DATETIME AS date) AS INSPECT_DATE, SUM(INSPECT_TOTAL_QTY-ERR32) AS INSPECT_TOTAL_QTY, SUM(ERR1+ERR2+ERR3+ERR4+ERR5+ERR6+ERR7+ERR8+ERR9+ERR10+ERR11+ERR12+ERR13+ERR14+ERR15+ERR16+ERR17+ERR18+ERR19+ERR20+ERR21+ERR22+ERR23+ERR24+ERR25+ERR26+ERR27+ERR28+ERR29+ERR30+ERR31
) AS TOTAL_NG, CTR_CD FROM ZTBINSPECTNGTB
WHERE CTR_CD='${DATA.CTR_CD}'
GROUP BY G_CODE,CAST(INSPECT_DATETIME AS date), CTR_CD
) AS AA
) AS BB
WHERE BB.CNT <=10 AND BB.INSPECT_TOTAL_QTY<>0
GROUP BY BB.G_CODE, BB.CTR_CD
),
ZTB_PROD_PROCESS_TB2 AS (
SELECT CTR_CD,G_CODE,PROCESS_NUMBER,EQ_SERIES,SETTING_TIME,UPH,STEP,LOSS_SX,LOSS_SETTING,INS_DATE,INS_EMPL,UPD_DATE,UPD_EMPL,FACTORY,SUM(LOSS_SX) OVER (PARTITION BY G_CODE ORDER BY PROCESS_NUMBER ROWS BETWEEN 1 FOLLOWING AND UNBOUNDED FOLLOWING) AS Total_LOSS_SX,SUM(LOSS_SETTING) OVER (PARTITION BY G_CODE ORDER BY PROCESS_NUMBER ROWS BETWEEN 1 FOLLOWING AND UNBOUNDED FOLLOWING) AS Total_LOSS_SETTING FROM ZTB_PROD_PROCESS_TB
),
SLCTB AS
(SELECT P400.CTR_CD, P400.PROD_REQUEST_DATE, P400.PROD_REQUEST_QTY, P400.G_CODE,P400.PROD_REQUEST_NO,ZTB_PROD_PROCESS_TB2.PROCESS_NUMBER, CEILING(P400.PROD_REQUEST_QTY*(1+(isnull(ZTB_PROD_PROCESS_TB2.Total_LOSS_SX,0) + isnull(LOSSKT.TOTAL_NG*1.0/LOSSKT.INSPECT_TOTAL_QTY*100,0) )*1.0/100) + isnull(ZTB_PROD_PROCESS_TB2.Total_LOSS_SETTING,0)*1.0/M100.PD*1000*(M100.G_C*M100.G_C_R)) AS SLC  
FROM P400 
LEFT JOIN ZTB_PROD_PROCESS_TB2 ON P400.G_CODE = ZTB_PROD_PROCESS_TB2.G_CODE AND P400.CTR_CD = ZTB_PROD_PROCESS_TB2.CTR_CD
LEFT JOIN M100 ON M100.CTR_CD = P400.CTR_CD AND M100.G_CODE = P400.G_CODE
LEFT JOIN LOSSKT ON LOSSKT.CTR_CD = P400.CTR_CD AND LOSSKT.G_CODE = P400.G_CODE
),
SLC_PVTB AS
(
SELECT SLCTB.CTR_CD,SLCTB.PROD_REQUEST_NO, SLCTB.PROD_REQUEST_DATE, SLCTB.PROD_REQUEST_QTY, SLCTB.[1] AS SLC_CD1, SLCTB.[2] AS SLC_CD2, SLCTB.[3] AS SLC_CD3, SLCTB.[4] AS SLC_CD4 
FROM (
SELECT 
CTR_CD,
PROD_REQUEST_NO, 
PROD_REQUEST_DATE,
PROD_REQUEST_QTY,
PROCESS_NUMBER,
SLC
FROM 
SLCTB
) AS SourceTable
PIVOT (
MAX(SLC) FOR PROCESS_NUMBER IN ([1], [2], [3], [4], [5]) -- Add as many process numbers as you have
) AS SLCTB
)
SELECT M100.USE_YN, M100.PDBV, M100.PDBV_EMPL, M100.PDBV_DATE, ZTB_QLSXPLAN.IS_SETTING,ZTB_QLSXPLAN.REQ_DF ,ZTB_QLSXPLAN.XUATDAOFILM, ZTB_QLSXPLAN.EQ_STATUS, ZTB_QLSXPLAN.MAIN_MATERIAL, ZTB_QLSXPLAN.INT_TEM, ZTB_QLSXPLAN.CHOTBC, ZTB_QLSXPLAN.DKXL,ZTB_QLSXPLAN.NEXT_PLAN_ID, ZTB_QLSXPLAN.KQ_SX_TAM, ZTB_QLSXPLAN.KETQUASX, ZTB_QLSXPLAN.PROCESS_NUMBER, ZTB_QLSXPLAN.PLAN_ORDER, ZTB_QLSXPLAN.STEP, ZTB_QLSXPLAN.PLAN_ID,ZTB_QLSXPLAN.PLAN_DATE,ZTB_QLSXPLAN.PROD_REQUEST_NO,ZTB_QLSXPLAN.PLAN_QTY, ZTB_QLSXPLAN.OLD_PLAN_QTY, ZTB_QLSXPLAN.PLAN_EQ,ZTB_QLSXPLAN.PLAN_FACTORY,ZTB_QLSXPLAN.PLAN_LEADTIME,ZTB_QLSXPLAN.INS_EMPL,ZTB_QLSXPLAN.INS_DATE,ZTB_QLSXPLAN.UPD_EMPL,ZTB_QLSXPLAN.UPD_DATE, M100.G_CODE, M100.G_NAME, M100.PD, (M100.G_C*M100.G_C_R) AS CAVITY, M100.G_NAME_KD, SLC_PVTB.PROD_REQUEST_DATE, SLC_PVTB.PROD_REQUEST_QTY, isnull(BB.CD1,0) AS CD1, isnull(BB.CD2,0) AS CD2, isnull(BB.CD3,0) AS CD3,isnull(BB.CD4,0) AS CD4,
(isnull(SLC_PVTB.SLC_CD1,0)- isnull(BB.CD1,0)) AS TON_CD1,
(isnull(SLC_PVTB.SLC_CD2,0)- isnull(BB.CD2,0)) AS TON_CD2,
(isnull(SLC_PVTB.SLC_CD3,0)- isnull(BB.CD3,0)) AS TON_CD3,
(isnull(SLC_PVTB.SLC_CD4,0)- isnull(BB.CD4,0)) AS TON_CD4,
M100.NOTE, isnull(LOSSKT.TOTAL_NG*1.0/LOSSKT.INSPECT_TOTAL_QTY,0)*100 AS LOSS_KT, ZTB_SX_RESULT.SETTING_START_TIME, ZTB_SX_RESULT.MASS_START_TIME, ZTB_SX_RESULT.MASS_END_TIME,
(ZTB_QLSXPLAN.PLAN_QTY*1.0/ZTB_PROD_PROCESS_TB.UPH*60 + (CASE WHEN IS_SETTING = 'Y' THEN  ZTB_PROD_PROCESS_TB.SETTING_TIME ELSE 0 END)) AS AT_LEADTIME,
SUM((ZTB_QLSXPLAN.PLAN_QTY*1.0/ZTB_PROD_PROCESS_TB.UPH*60 + (CASE WHEN IS_SETTING = 'Y' THEN  ZTB_PROD_PROCESS_TB.SETTING_TIME ELSE 0 END))) OVER (PARTITION BY PLAN_EQ,PLAN_FACTORY ORDER BY PLAN_ORDER ASC) AS ACC_TIME,
isnull(SLC_PVTB.SLC_CD1,0) AS SLC_CD1, isnull(SLC_PVTB.SLC_CD2,0) AS SLC_CD2, isnull(SLC_PVTB.SLC_CD3,0) AS SLC_CD3, isnull(SLC_PVTB.SLC_CD4,0) AS SLC_CD4
FROM ZTB_QLSXPLAN
LEFT JOIN ZTB_SX_RESULT ON (ZTB_SX_RESULT.PLAN_ID = ZTB_QLSXPLAN.PLAN_ID AND ZTB_SX_RESULT.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
JOIN M100 ON (ZTB_QLSXPLAN.G_CODE = M100.G_CODE AND ZTB_QLSXPLAN.CTR_CD = M100.CTR_CD)
LEFT JOIN ZTB_PROD_PROCESS_TB ON (ZTB_PROD_PROCESS_TB.G_CODE = ZTB_QLSXPLAN.G_CODE AND ZTB_PROD_PROCESS_TB.FACTORY = ZTB_QLSXPLAN.PLAN_FACTORY AND ZTB_PROD_PROCESS_TB.CTR_CD = ZTB_QLSXPLAN.CTR_CD AND ZTB_PROD_PROCESS_TB.PROCESS_NUMBER = ZTB_QLSXPLAN.PROCESS_NUMBER)
LEFT JOIN  BB ON (BB.PROD_REQUEST_NO = ZTB_QLSXPLAN.PROD_REQUEST_NO AND BB.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
LEFT JOIN LOSSKT ON (LOSSKT.G_CODE = ZTB_QLSXPLAN.G_CODE AND LOSSKT.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
LEFT JOIN SLC_PVTB ON (SLC_PVTB.PROD_REQUEST_NO = ZTB_QLSXPLAN.PROD_REQUEST_NO AND SLC_PVTB.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
  ${condition} AND ZTB_QLSXPLAN.CTR_CD='${DATA.CTR_CD}' ORDER BY ZTB_QLSXPLAN.PLAN_EQ ASC,  ZTB_QLSXPLAN.PLAN_ORDER ASC `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.deleteMCODEExistIN_O302 = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `DELETE FROM ZTB_QLSXCHITHI
            WHERE ZTB_QLSXCHITHI.CTR_CD='${DATA.CTR_CD}' AND NOT EXISTS 
            (SELECT * FROM O302
            WHERE O302.CTR_CD='${DATA.CTR_CD}' AND O302.PLAN_ID = ZTB_QLSXCHITHI.PLAN_ID
            AND O302.M_CODE = ZTB_QLSXCHITHI.M_CODE)
            AND ZTB_QLSXCHITHI.PLAN_ID='${DATA.PLAN_ID}'`;
  //${moment().format('YYYY-MM-DD')}
  ////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.updateLIEUQL_SX_M140 = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `UPDATE M140 SET LIEUQL_SX=${DATA.LIEUQL_SX}, UPD_DATE =GETDATE() WHERE CTR_CD='${DATA.CTR_CD}' AND G_CODE='${DATA.G_CODE}' AND M_CODE='${DATA.M_CODE}'`;
  //${moment().format('YYYY-MM-DD')}
  ////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.deleteM_CODE_ZTB_QLSXCHITHI = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `DELETE FROM ZTB_QLSXCHITHI WHERE CTR_CD='${DATA.CTR_CD}' AND PLAN_ID='${DATA.PLAN_ID}' AND M_CODE NOT IN (${DATA.M_CODE_LIST})`;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.updateChiThi = async (req, res, DATA) => {
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let checkkq = "OK";
  let setpdQuery = `UPDATE ZTB_QLSXCHITHI SET LIEUQL_SX=${DATA.LIEUQL_SX}, M_MET_QTY ='${DATA.M_MET_QTY}', UPD_DATE=GETDATE(), UPD_EMPL='${EMPL_NO}' WHERE CTR_CD='${DATA.CTR_CD}' AND PLAN_ID='${DATA.PLAN_ID}' AND M_CODE='${DATA.M_CODE}'`;
  //${moment().format('YYYY-MM-DD')}
  ////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.insertChiThi = async (req, res, DATA) => {
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let checkkq = "OK";
  let setpdQuery = `INSERT INTO ZTB_QLSXCHITHI (CTR_CD, PLAN_ID, M_CODE, M_ROLL_QTY, M_MET_QTY, INS_EMPL, INS_DATE, UPD_EMPL, UPD_DATE, M_QTY, LIEUQL_SX) VALUES ('${DATA.CTR_CD}','${DATA.PLAN_ID}','${DATA.M_CODE}','${DATA.M_ROLL_QTY}','${DATA.M_MET_QTY}','${EMPL_NO}', GETDATE(),'${EMPL_NO}',GETDATE(),'${DATA.M_QTY}',${DATA.LIEUQL_SX})`;
  //${moment().format('YYYY-MM-DD')}
  ////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.traYCSXDataFull_QLSX_New = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
  WITH
  PLANTABLE AS 
  (SELECT DISTINCT CTR_CD, PROD_REQUEST_NO  FROM ZTB_QLSXPLAN),
  INSPECT_INPUT_TB AS 
  (
  SELECT CTR_CD,PROD_REQUEST_NO, SUM(INPUT_QTY_EA) AS LOT_TOTAL_INPUT_QTY_EA FROM ZTBINSPECTINPUTTB GROUP BY CTR_CD,PROD_REQUEST_NO
  ),
  INSPECT_OUTPUT_TB AS 
  (
  SELECT CTR_CD,PROD_REQUEST_NO, SUM(OUTPUT_QTY_EA) AS LOT_TOTAL_OUTPUT_QTY_EA FROM ZTBINSPECTOUTPUTTB WHERE SORTING ='N' GROUP BY CTR_CD,PROD_REQUEST_NO
  ),
  WH_TABLE AS 
  (SELECT CTR_CD, I660.PROD_REQUEST_NO, SUM(I660.IN_QTY) AS INPUT_QTY, SUM(CASE WHEN STATUS='N' AND I660.USE_YN ='Y' THEN I660.IN_QTY ELSE 0 END) AS STOCK,SUM(CASE WHEN STATUS='B' AND I660.USE_YN ='Y' THEN I660.IN_QTY ELSE 0 END) AS BLOCK_QTY, SUM(CASE WHEN I660.USE_YN <> 'Y' THEN I660.IN_QTY ELSE 0 END) AS OUTPUT_QTY FROM I660  GROUP BY CTR_CD,I660.PROD_REQUEST_NO),
  ZTBDLVR AS
  (SELECT CTR_CD,G_CODE, SUM(DELIVERY_QTY) AS DELIVERY_QTY FROM ZTBDelivery GROUP BY CTR_CD,G_CODE),
  POTB AS
  (
  SELECT CTR_CD,G_CODE, SUM(ZTBPOTable.PO_QTY) AS PO_QTY FROM ZTBPOTable GROUP BY CTR_CD,G_CODE
  ),
  PO_TON AS
  (
    SELECT POTB.CTR_CD,POTB.G_CODE, (POTB.PO_QTY- ZTBDLVR.DELIVERY_QTY) AS PO_BALANCE FROM POTB LEFT JOIN ZTBDLVR ON (POTB.G_CODE =ZTBDLVR.G_CODE AND POTB.CTR_CD =ZTBDLVR.CTR_CD )
  ),
  AA AS
  (
    SELECT
PVTB.CTR_CD,
      PVTB.PROD_REQUEST_NO,
      isnull(PVTB.[1], 0) AS CD1,
      isnull(PVTB.[2], 0) AS CD2,
      isnull(PVTB.[3], 0) AS CD3,
      isnull(PVTB.[4], 0) AS CD4
    FROM
      (
        SELECT
  ZTB_QLSXPLAN.CTR_CD,
          ZTB_QLSXPLAN.PROD_REQUEST_NO,
          ZTB_QLSXPLAN.PROCESS_NUMBER,
          SUM(isnull(SX_RESULT, 0)) AS KETQUASX
        FROM
          ZTB_SX_RESULT
          LEFT JOIN ZTB_QLSXPLAN ON (ZTB_QLSXPLAN.PLAN_ID = ZTB_SX_RESULT.PLAN_ID AND ZTB_QLSXPLAN.CTR_CD = ZTB_SX_RESULT.CTR_CD)
        WHERE
          ZTB_QLSXPLAN.STEP = 0
        GROUP BY
  ZTB_QLSXPLAN.CTR_CD,
          ZTB_QLSXPLAN.PROD_REQUEST_NO,
          ZTB_QLSXPLAN.PROCESS_NUMBER
      ) AS PV PIVOT (
        SUM(PV.KETQUASX) FOR PV.PROCESS_NUMBER IN ([1], [2], [3], [4])
      ) AS PVTB
  ),
LOSSKT AS (
SELECT BB.G_CODE, SUM(BB.INSPECT_TOTAL_QTY) AS INSPECT_TOTAL_QTY, SUM(BB.TOTAL_NG) AS TOTAL_NG, BB.CTR_CD FROM
(
SELECT AA.G_CODE, AA.INSPECT_DATE,AA.INSPECT_TOTAL_QTY, AA.TOTAL_NG, COUNT(G_CODE) OVER(PARTITION BY G_CODE ORDER BY INSPECT_DATE DESC) AS CNT, AA.CTR_CD
FROM
(
SELECT  G_CODE,CAST(INSPECT_DATETIME AS date) AS INSPECT_DATE, SUM(INSPECT_TOTAL_QTY-ERR32) AS INSPECT_TOTAL_QTY, SUM(ERR1+ERR2+ERR3+ERR4+ERR5+ERR6+ERR7+ERR8+ERR9+ERR10+ERR11+ERR12+ERR13+ERR14+ERR15+ERR16+ERR17+ERR18+ERR19+ERR20+ERR21+ERR22+ERR23+ERR24+ERR25+ERR26+ERR27+ERR28+ERR29+ERR30+ERR31
) AS TOTAL_NG, CTR_CD FROM ZTBINSPECTNGTB
WHERE CTR_CD='${DATA.CTR_CD}'
GROUP BY G_CODE,CAST(INSPECT_DATETIME AS date), CTR_CD
) AS AA
) AS BB
WHERE BB.CNT <=10 AND BB.INSPECT_TOTAL_QTY<>0
GROUP BY BB.G_CODE, BB.CTR_CD
),
ZTB_PROD_PROCESS_TB2 AS (
SELECT CTR_CD,G_CODE,PROCESS_NUMBER,EQ_SERIES,SETTING_TIME,UPH,STEP,LOSS_SX,LOSS_SETTING,INS_DATE,INS_EMPL,UPD_DATE,UPD_EMPL,FACTORY,SUM(LOSS_SX) OVER (PARTITION BY G_CODE ORDER BY PROCESS_NUMBER ROWS BETWEEN 1 FOLLOWING AND UNBOUNDED FOLLOWING) AS Total_LOSS_SX,SUM(LOSS_SETTING) OVER (PARTITION BY G_CODE ORDER BY PROCESS_NUMBER ROWS BETWEEN 1 FOLLOWING AND UNBOUNDED FOLLOWING) AS Total_LOSS_SETTING FROM ZTB_PROD_PROCESS_TB
),
SLCTB AS
(SELECT P400.CTR_CD, P400.PROD_REQUEST_DATE, P400.PROD_REQUEST_QTY, P400.G_CODE,P400.PROD_REQUEST_NO,ZTB_PROD_PROCESS_TB2.PROCESS_NUMBER, CEILING(P400.PROD_REQUEST_QTY*(1+(isnull(ZTB_PROD_PROCESS_TB2.Total_LOSS_SX,0) + isnull(LOSSKT.TOTAL_NG*1.0/LOSSKT.INSPECT_TOTAL_QTY*100,0) )*1.0/100) + isnull(ZTB_PROD_PROCESS_TB2.Total_LOSS_SETTING,0)*1.0/M100.PD*1000*(M100.G_C*M100.G_C_R)) AS SLC  
FROM P400 
LEFT JOIN ZTB_PROD_PROCESS_TB2 ON P400.G_CODE = ZTB_PROD_PROCESS_TB2.G_CODE AND P400.CTR_CD = ZTB_PROD_PROCESS_TB2.CTR_CD
LEFT JOIN M100 ON M100.CTR_CD = P400.CTR_CD AND M100.G_CODE = P400.G_CODE
LEFT JOIN LOSSKT ON LOSSKT.CTR_CD = P400.CTR_CD AND LOSSKT.G_CODE = P400.G_CODE
),
SLC_PVTB AS
(
SELECT SLCTB.CTR_CD,SLCTB.PROD_REQUEST_NO, SLCTB.PROD_REQUEST_DATE, SLCTB.PROD_REQUEST_QTY, SLCTB.[1] AS SLC_CD1, SLCTB.[2] AS SLC_CD2, SLCTB.[3] AS SLC_CD3, SLCTB.[4] AS SLC_CD4 
FROM (
SELECT 
CTR_CD,
PROD_REQUEST_NO, 
PROD_REQUEST_DATE,
PROD_REQUEST_QTY,
PROCESS_NUMBER,
SLC
FROM 
SLCTB
) AS SourceTable
PIVOT (
MAX(SLC) FOR PROCESS_NUMBER IN ([1], [2], [3], [4], [5]) -- Add as many process numbers as you have
) AS SLCTB
)
  SELECT 
  M100.FACTORY,
            M100.Setting1,
            M100.Setting2,
            M100.Step1,
            M100.Step2,
            M100.LOSS_SX1,
            M100.LOSS_SX2,
            M100.LOSS_SETTING1,
            M100.LOSS_SETTING2,
            M100.NOTE,
            M100.UPH1,
            M100.UPH2,
            M100.Step3,
            M100.Step4,
            M100.EQ3,
            M100.EQ4,
            M100.UPH3,
            M100.UPH4,
            M100.Setting3,
            M100.Setting4,
            M100.LOSS_SX3,
            M100.LOSS_SX4,
            M100.LOSS_SETTING3,
            M100.LOSS_SETTING4,
            P400.G_CODE,
            M100.PROD_TYPE,
            M100.PROD_MAIN_MATERIAL,
            M100.DESCR,
            M100.PDBV,
            M100.PDBV_EMPL,
            M100.PDBV_DATE,
            M100.G_NAME,
            M100.G_NAME_KD,
            M100.G_WIDTH,
            M100.G_LENGTH,
            M100.PROD_PRINT_TIMES,
            M100.G_C,
            M100.G_C_R,
            M010.EMPL_NAME,
            M010.EMPL_NO,
            M110.CUST_NAME_KD,
            M110.CUST_CD,
            P400.PROD_REQUEST_NO,
            P400.PROD_REQUEST_DATE,
            P400.DELIVERY_DT,
            P400.PL_HANG,
            P400.PROD_REQUEST_QTY,                  
           CASE WHEN (P400.YCSX_PENDING =0 OR isnull(INSPECT_OUTPUT_TB.LOT_TOTAL_OUTPUT_QTY_EA, 0) >= P400.PROD_REQUEST_QTY) THEN 0 ELSE 1 END AS YCSX_PENDING,
            P400.CODE_55 AS PHAN_LOAI,
            P400.REMK AS REMARK,         
            P400.PDUYET,
            P400.CODE_50 AS LOAIXH,
            M100.BANVE,
            M100.NO_INSPECTION,
            isnull(PO_TON.PO_BALANCE, 0) AS PO_BALANCE,
            M100.EQ1,
            M100.EQ2,
            isnull(AA.CD1, 0) AS CD1,
            isnull(AA.CD2, 0) AS CD2,
            isnull(AA.CD3, 0) AS CD3,
            isnull(AA.CD4, 0) AS CD4, 
            isnull(INSPECT_OUTPUT_TB.LOT_TOTAL_OUTPUT_QTY_EA, 0) AS LOT_TOTAL_OUTPUT_QTY_EA,
            PLANTABLE.PROD_REQUEST_NO AS DACHITHI, 
  (isnull(SLC_PVTB.SLC_CD1,0)- isnull(AA.CD1,0)) AS TON_CD1,
  (isnull(SLC_PVTB.SLC_CD2,0)- isnull(AA.CD2,0)) AS TON_CD2,
  (isnull(SLC_PVTB.SLC_CD3,0)- isnull(AA.CD3,0)) AS TON_CD3,
  (isnull(SLC_PVTB.SLC_CD4,0)- isnull(AA.CD4,0)) AS TON_CD4,
  isnull(SLC_PVTB.SLC_CD1,0) AS SLC_CD1, isnull(SLC_PVTB.SLC_CD2,0) AS SLC_CD2, isnull(SLC_PVTB.SLC_CD3,0) AS SLC_CD3, isnull(SLC_PVTB.SLC_CD4,0) AS SLC_CD4
  FROM P400
  LEFT JOIN M100 ON (M100.G_CODE =P400.G_CODE AND M100.CTR_CD =P400.CTR_CD)
  LEFT JOIN M010 ON (M010.EMPL_NO= P400.EMPL_NO AND M010.CTR_CD =P400.CTR_CD)
  LEFT JOIN M110 ON (M110.CUST_CD = P400.CUST_CD AND M110.CTR_CD =P400.CTR_CD)
  LEFT JOIN PO_TON ON (PO_TON.G_CODE = P400.G_CODE AND PO_TON.CTR_CD =P400.CTR_CD)
  LEFT JOIN AA ON (AA.PROD_REQUEST_NO = P400.PROD_REQUEST_NO AND AA.CTR_CD =P400.CTR_CD)         
  LEFT JOIN INSPECT_OUTPUT_TB ON (INSPECT_OUTPUT_TB.PROD_REQUEST_NO = P400.PROD_REQUEST_NO AND INSPECT_OUTPUT_TB.CTR_CD =P400.CTR_CD)
  LEFT JOIN PLANTABLE ON (PLANTABLE.PROD_REQUEST_NO = P400.PROD_REQUEST_NO AND PLANTABLE.CTR_CD =P400.CTR_CD)
LEFT JOIN LOSSKT ON (LOSSKT.G_CODE = P400.G_CODE AND LOSSKT.CTR_CD =P400.CTR_CD)
LEFT JOIN SLC_PVTB ON (SLC_PVTB.PROD_REQUEST_NO = P400.PROD_REQUEST_NO AND SLC_PVTB.CTR_CD = P400.CTR_CD)
 ${generate_condition_get_ycsx(
    DATA.alltime,
    DATA.start_date,
    DATA.end_date,
    DATA.cust_name,
    DATA.codeCMS,
    DATA.codeKD,
    DATA.prod_type,
    DATA.empl_name,
    DATA.phanloai,
    DATA.ycsx_pending,
    DATA.prod_request_no,
    DATA.material,
    DATA.inspect_inputcheck,
    DATA.phanloaihang,
    DATA.CTR_CD,
    DATA.material_yes
  )} ORDER BY P400.PROD_REQUEST_NO DESC`;
  checkkq = await queryDB(setpdQuery);
  console.log(setpdQuery);
  ////console.log(checkkq);
  res.send(checkkq);
};
exports.updateDKXLPLAN = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `UPDATE ZTB_QLSXPLAN SET DKXL='V' WHERE CTR_CD='${DATA.CTR_CD}' AND PLAN_ID='${DATA.PLAN_ID}'`;
  //${moment().format('YYYY-MM-DD')}
  ////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.updateXUATLIEUCHINH_PLAN = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = ` UPDATE ZTB_QLSXPLAN SET MAIN_MATERIAL='V' WHERE CTR_CD='${DATA.CTR_CD}' AND PLAN_ID='${DATA.PLAN_ID}'`;
  //${moment().format('YYYY-MM-DD')}
  ////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.update_XUAT_DAO_FILM_PLAN = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = ` UPDATE ZTB_QLSXPLAN SET XUATDAOFILM='V' WHERE CTR_CD='${DATA.CTR_CD}' AND PLAN_ID='${DATA.PLAN_ID}'`;
  //${moment().format('YYYY-MM-DD')}
  ////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.updateO301 = async (req, res, DATA) => {
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let checkkq = "OK";
  let setpdQuery = `UPDATE O301 SET OUT_PRE_QTY='${DATA.OUT_PRE_QTY}', UPD_DATE=GETDATE(), UPD_EMPL='${EMPL_NO}' WHERE CTR_CD='${DATA.CTR_CD}' AND PLAN_ID='${DATA.PLAN_ID}' AND M_CODE='${DATA.M_CODE}'`;
  //${moment().format('YYYY-MM-DD')}
  ////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.checkPLANID_O302 = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `SELECT TOP 1 * FROM O302 WHERE CTR_CD='${DATA.CTR_CD}' AND PLAN_ID='${DATA.PLAN_ID}'`;
  //${moment().format('YYYY-MM-DD')}
  ////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.neededSXQtyByYCSX = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
    WITH DMSXTB AS
    (
    SELECT G_CODE, PD, (G_C*G_C_R) AS CAVITY, isnull(LOSS_SX1,0) AS LOSS_SX1, isnull(LOSS_SX2,0) AS LOSS_SX2,isnull(LOSS_SX3,0) AS LOSS_SX3,isnull(LOSS_SX4,0) AS LOSS_SX4, isnull(LOSS_SETTING1,0) AS LOSS_SETTING1,isnull(LOSS_SETTING2,0) AS LOSS_SETTING2,isnull(LOSS_SETTING3,0) AS LOSS_SETTING3,isnull(LOSS_SETTING4,0) AS LOSS_SETTING4, CTR_CD FROM M100 WHERE G_CODE='${DATA.G_CODE}' AND CTR_CD='${DATA.CTR_CD}'
    ),
    LOSSKT AS (
    SELECT BB.G_CODE, BB.CTR_CD, SUM(BB.INSPECT_TOTAL_QTY) AS INSPECT_TOTAL_QTY, SUM(BB.TOTAL_NG) AS TOTAL_NG FROM 
    (
    SELECT AA.G_CODE, AA.CTR_CD, AA.INSPECT_DATE,AA.INSPECT_TOTAL_QTY, AA.TOTAL_NG, COUNT(G_CODE) OVER(PARTITION BY G_CODE, CTR_CD ORDER BY INSPECT_DATE DESC) AS CNT 
    FROM 
    (
    SELECT  G_CODE, CTR_CD, CAST(INSPECT_DATETIME AS date) AS INSPECT_DATE, SUM(INSPECT_TOTAL_QTY-ERR32) AS INSPECT_TOTAL_QTY, SUM(ERR1+ERR2+ERR3+ERR4+ERR5+ERR6+ERR7+ERR8+ERR9+ERR10+ERR11+ERR12+ERR13+ERR14+ERR15+ERR16+ERR17+ERR18+ERR19+ERR20+ERR21+ERR22+ERR23+ERR24+ERR25+ERR26+ERR27+ERR28+ERR29+ERR30+ERR31) AS TOTAL_NG FROM ZTBINSPECTNGTB
    WHERE CTR_CD='${DATA.CTR_CD}'
    GROUP BY G_CODE, CTR_CD, CAST(INSPECT_DATETIME AS date)
    ) AS AA
    ) AS BB
    WHERE BB.CNT <=10 AND BB.INSPECT_TOTAL_QTY >0
    GROUP BY BB.G_CODE, BB.CTR_CD
    )
    SELECT PROD_REQUEST_NO, P400.G_CODE, PD, CAVITY,LOSS_SX1,LOSS_SX2,LOSS_SX3,LOSS_SX4,LOSS_SETTING1,LOSS_SETTING2,LOSS_SETTING3,LOSS_SETTING4,LOSSKT.TOTAL_NG*1.0/LOSSKT.INSPECT_TOTAL_QTY AS LOSS_KT,
    P400.PROD_REQUEST_QTY, 
    (P400.PROD_REQUEST_QTY*(1+(LOSS_SX2+LOSS_SX3+LOSS_SX4)*1.0/100+isnull((LOSSKT.TOTAL_NG*1.0/LOSSKT.INSPECT_TOTAL_QTY),0)) + (LOSS_SETTING2+LOSS_SETTING3+LOSS_SETTING4)*1.0/PD*CAVITY*1000) AS SLC_CD1,
    (P400.PROD_REQUEST_QTY*(1+(LOSS_SX3+LOSS_SX4)*1.0/100+isnull((LOSSKT.TOTAL_NG*1.0/LOSSKT.INSPECT_TOTAL_QTY),0)) + (LOSS_SETTING3+LOSS_SETTING4)*1.0/PD*CAVITY*1000) AS SLC_CD2,
    (P400.PROD_REQUEST_QTY*(1+(LOSS_SX4)*1.0/100+isnull((LOSSKT.TOTAL_NG*1.0/LOSSKT.INSPECT_TOTAL_QTY),0)) + (LOSS_SETTING4)*1.0/PD*CAVITY*1000) AS SLC_CD3,
    (P400.PROD_REQUEST_QTY*(1+(0)*1.0/100+isnull((LOSSKT.TOTAL_NG*1.0/LOSSKT.INSPECT_TOTAL_QTY),0)) + (0)*1.0/PD*CAVITY*1000) AS SLC_CD4
    FROM P400
    LEFT JOIN DMSXTB ON DMSXTB.G_CODE = P400.G_CODE AND DMSXTB.CTR_CD = P400.CTR_CD
    LEFT JOIN LOSSKT ON LOSSKT.G_CODE = P400.G_CODE AND LOSSKT.CTR_CD = P400.CTR_CD
    WHERE DMSXTB.PD <> 0 AND PROD_REQUEST_NO='${DATA.PROD_REQUEST_NO}' AND P400.CTR_CD='${DATA.CTR_CD}'
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.getSystemDateTime = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `SELECT GETDATE() AS SYSTEM_DATETIME`;
  //////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  ////console.log(checkkq);
  res.send(checkkq);
};
exports.deleteDMYCSX = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
             DELETE FROM ZTB_DM_HISTORY WHERE CTR_CD='${DATA.CTR_CD}' AND PROD_REQUEST_NO='${DATA.PROD_REQUEST_NO}'
            `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.deleteDMYCSX2 = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
     DELETE FROM ZTB_DM_HISTORY2 WHERE CTR_CD='${DATA.CTR_CD}' AND PROD_REQUEST_NO='${DATA.PROD_REQUEST_NO}'
    `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.checkTonTaiXuatKhoSub = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `SELECT TOP 1 * FROM IN_KHO_SX_SUB WHERE CTR_CD='${DATA.CTR_CD}' AND PLAN_ID_SUDUNG='${DATA.PLAN_ID}' AND M_LOT_NO='${DATA.M_LOT_NO}'`;
  //${moment().format('YYYY-MM-DD')}
  console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.nhapkhosubao = async (req, res, DATA) => {
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let checkkq = "OK";
  let setpdQuery = `INSERT INTO IN_KHO_SX_SUB (CTR_CD,FACTORY,PHANLOAI,PLAN_ID_INPUT, PLAN_ID_SUDUNG, M_CODE,M_LOT_NO,ROLL_QTY,IN_QTY,TOTAL_IN_QTY,USE_YN,FSC, FSC_MCODE, FSC_GCODE,INS_DATE,INS_EMPL,UPD_DATE,UPD_EMPL) VALUES ('${DATA.CTR_CD}','${DATA.FACTORY}','${DATA.PHANLOAI}', ${DATA.PLAN_ID_INPUT !== null ? "'" + DATA.PLAN_ID_INPUT + "'" : null},${DATA.PLAN_ID_SUDUNG !== null ? "'" + DATA.PLAN_ID_SUDUNG + "'" : null}, '${DATA.M_CODE}','${DATA.M_LOT_NO}','${DATA.ROLL_QTY}','${DATA.IN_QTY}','${DATA.TOTAL_IN_QTY}','${DATA.USE_YN}', '${DATA.FSC}','${DATA.FSC_MCODE}','${DATA.FSC_GCODE}',GETDATE(), '${EMPL_NO}', GETDATE(),'${EMPL_NO}')`;
  //${moment().format('YYYY-MM-DD')}
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.tralichsutemlotsx = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = `WHERE P501.PLAN_ID is not null AND P501.M_LOT_NO <> '' AND P501.INS_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE} 23:59:59'`;
  if (DATA.G_NAME !== '') condition += ` AND M100.G_NAME LIKE '%${DATA.G_NAME}%'`;
  if (DATA.G_CODE !== '') condition += ` AND M100.G_CODE = '${DATA.G_CODE}'`;
  if (DATA.PROD_REQUEST_NO !== '') condition += ` AND ZTB_QLSXPLAN.PROD_REQUEST_NO = '${DATA.PROD_REQUEST_NO}'`;
  if (DATA.PROCESS_LOT_NO !== '') condition += ` AND P501.PROCESS_LOT_NO = '${DATA.PROCESS_LOT_NO}'`;
  let setpdQuery = `
 SELECT  P501.*, M100.G_CODE,M100.G_NAME,I222.LOTNCC, ZTB_QLSXPLAN.PROD_REQUEST_NO,M090.M_NAME, M090.WIDTH_CD, M010.EMPL_NAME, P500.EQUIPMENT_CD, P500.FACTORY,ZTB_QLSXPLAN.PLAN_QTY, TEMP_QTY * ZTB_SX_RESULT.PD * 1.0 /CAVITY/1000 AS TEMP_MET, P500.SETTING_MET, P500.PR_NG, P500.PR_NB FROM P501
LEFT JOIN ZTB_QLSXPLAN ON ZTB_QLSXPLAN.CTR_CD = P501.CTR_CD AND ZTB_QLSXPLAN.PLAN_ID = P501.PLAN_ID
LEFT JOIN M100 ON ZTB_QLSXPLAN.CTR_CD = M100.CTR_CD AND ZTB_QLSXPLAN.G_CODE = M100.G_CODE
LEFT JOIN P500 ON P500.CTR_CD = P501.CTR_CD AND P500.PROCESS_IN_DATE = P501.PROCESS_IN_DATE AND P500.PROCESS_IN_NO = P501.PROCESS_IN_NO AND P500.PROCESS_IN_SEQ = P501.PROCESS_IN_SEQ 
LEFT JOIN M010 ON M010.CTR_CD = P501.CTR_CD AND  M010.EMPL_NO= P501.INS_EMPL
LEFT JOIN I222 ON I222.CTR_CD = P501.CTR_CD AND I222.M_LOT_NO = P501.M_LOT_NO
LEFT JOIN M090 ON I222.CTR_CD = M090.CTR_CD AND I222.M_CODE = M090.M_CODE
LEFT JOIN ZTB_SX_RESULT ON ZTB_QLSXPLAN.CTR_CD = ZTB_SX_RESULT.CTR_CD AND ZTB_QLSXPLAN.PLAN_ID = ZTB_SX_RESULT.PLAN_ID 
  ${condition}          
  AND P501.CTR_CD='${DATA.CTR_CD}'
  ORDER BY P501.INS_DATE DESC
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.loadDMSX = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `SELECT G_CODE, EQ1, EQ2, EQ3, EQ4, Setting1, Setting2, Setting3, Setting4, UPH1, UPH2, UPH3, UPH4, Step1, Step2, Step3, Step4, LOSS_SX1, LOSS_SX2, LOSS_SX3, LOSS_SX4, LOSS_SETTING1, LOSS_SETTING2, LOSS_SETTING3, LOSS_SETTING4, FACTORY, NOTE, CTR_CD FROM M100 WHERE G_CODE='${DATA.G_CODE}' AND M100.CTR_CD='${DATA.CTR_CD}'`;
  console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.updateO301_OUT_CFM_QTY_FROM_O302 = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `MERGE INTO O301
  USING (
  SELECT PLAN_ID, M_CODE, CTR_CD, SUM(OUT_CFM_QTY) AS OUT_CFM_QTY FROM O302 WHERE PLAN_ID='${DATA.PLAN_ID}' AND CTR_CD='${DATA.CTR_CD}' GROUP BY PLAN_ID, M_CODE, CTR_CD
  ) AS SRC_TB
  ON (O301.PLAN_ID = SRC_TB.PLAN_ID AND O301.M_CODE = SRC_TB.M_CODE AND O301.CTR_CD = SRC_TB.CTR_CD)
  WHEN MATCHED THEN
  UPDATE
  SET O301.OUT_CFM_QTY = SRC_TB.OUT_CFM_QTY;`;
  console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.updateUSE_YN_I222_RETURN_NVL = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `UPDATE I222 SET USE_YN='X', UPD_DATE= GETDATE(), UPD_EMPL='${DATA.UPD_EMPL}' WHERE M_LOT_NO='${DATA.M_LOT_NO}' AND USE_YN <> 'X'
  UPDATE RETURN_NVL SET USE_YN='X',UPD_DATE= GETDATE(), UPD_EMPL='${DATA.UPD_EMPL}' WHERE CTR_CD='${DATA.CTR_CD}' AND M_LOT_NO='${DATA.M_LOT_NO}' AND USE_YN <> 'X'
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.addProdProcessDataQLSX = async (req, res, DATA) => {
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let checkkq = "OK";
  let setpdQuery = `
  INSERT INTO ZTB_PROD_PROCESS_TB (CTR_CD, G_CODE, PROCESS_NUMBER, EQ_SERIES,SETTING_TIME, UPH, STEP, LOSS_SX, LOSS_SETTING, FACTORY, INS_DATE, INS_EMPL, UPD_DATE, UPD_EMPL) VALUES ('${DATA.CTR_CD}', '${DATA.G_CODE}', ${DATA.PROCESS_NUMBER}, '${DATA.EQ_SERIES}', ${DATA.SETTING_TIME}, ${DATA.UPH}, ${DATA.STEP},${DATA.LOSS_SX}, ${DATA.LOSS_SETTING}, '${DATA.FACTORY}', GETDATE(), '${EMPL_NO}', GETDATE(), '${EMPL_NO}')
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.updateProdProcessDataQLSX = async (req, res, DATA) => {
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let checkkq = "OK";
  let setpdQuery = `
  UPDATE ZTB_PROD_PROCESS_TB SET EQ_SERIES='${DATA.EQ_SERIES}',SETTING_TIME=${DATA.SETTING_TIME}, UPH=${DATA.UPH}, STEP =${DATA.STEP}, LOSS_SX=${DATA.LOSS_SX}, LOSS_SETTING=${DATA.LOSS_SETTING}, UPD_DATE=GETDATE(), UPD_EMPL='${EMPL_NO}' WHERE G_CODE='${DATA.G_CODE}' AND CTR_CD='${DATA.CTR_CD}' AND PROCESS_NUMBER=${DATA.PROCESS_NUMBER}
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.checkProcessExist = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
  SELECT COUNT(*) AS COUNT_QTY FROM ZTB_PROD_PROCESS_TB WHERE G_CODE='${DATA.G_CODE}' AND PROCESS_NUMBER='${DATA.PROCESS_NUMBER}' AND CTR_CD='${DATA.CTR_CD}'
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.isM_LOT_NO_in_O302 = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
  SELECT * FROM O302 WHERE M_LOT_NO='${DATA.M_LOT_NO}' AND CTR_CD='${DATA.CTR_CD}' AND PLAN_ID='${DATA.PLAN_ID}'
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.check_G_NAME_2Ver_active = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
    SELECT  DISTINCT G_NAME_KD, REV_NO ,USE_YN FROM M100 WHERE G_NAME_KD IN (
SELECT G_NAME_KD FROM M100 WHERE G_CODE='${DATA.G_CODE}') AND USE_YN='Y' AND CTR_CD='${DATA.CTR_CD}'
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.getI221Lastest_IN_NO = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `SELECT MAX(IN_NO) AS MAX_IN_NO FROM I221 WHERE CTR_CD='${DATA.CTR_CD}' AND IN_DATE ='${moment().format("YYYYMMDD")}'`;
  console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.getI222Lastest_M_LOT_NO = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `SELECT isnull(MAX(M_LOT_NO),FORMAT(GETDATE(),'yyyyMMdd0000')) AS MAX_M_LOT_NO FROM I222 WHERE CTR_CD='${DATA.CTR_CD}' AND IN_DATE ='${moment().format("YYYYMMDD")}'`;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.insert_I221 = async (req, res, DATA) => {
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let checkkq = "OK";
  let setpdQuery = `INSERT I221 (CTR_CD, IN_DATE, IN_NO, IN_SEQ, CODE_03,M_CODE, IN_CFM_QTY, CODE_54, REMK, USE_YN, INS_DATE, INS_EMPL, FACTORY, CODE_50, INVOICE, CUST_CD, ROLL_QTY, EXP_DATE) VALUES ('${DATA.CTR_CD}','${moment().format("YYYYMMDD")}','${DATA.IN_NO}','${DATA.IN_SEQ}','03','${DATA.M_CODE}',${DATA.IN_CFM_QTY},'USD','${DATA.REMARK}','Y',GETDATE(),'${EMPL_NO}','${DATA.FACTORY}','${DATA.CODE_50}','${DATA.INVOICE_NO}','${DATA.CUST_CD}',${DATA.ROLL_QTY},'${DATA.EXP_DATE}')`;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.insert_I222 = async (req, res, DATA) => {
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let checkkq = "OK";
  let setpdQuery = `INSERT I222 (CTR_CD, IN_DATE, IN_NO, IN_SEQ, M_LOT_NO,LOC_CD, M_CODE, IN_CFM_QTY, WAHS_CD,  USE_YN, INS_DATE, INS_EMPL, FACTORY, CUST_CD, ROLL_QTY, PROD_YCSX_NO) VALUES ('${DATA.CTR_CD}','${moment().format("YYYYMMDD")}','${DATA.IN_NO}','${DATA.IN_SEQ}','${DATA.M_LOT_NO}', '${DATA.LOC_CD}','${DATA.M_CODE}',${DATA.IN_CFM_QTY},'${DATA.WAHS_CD}','Y',GETDATE(),'${EMPL_NO}','${DATA.FACTORY}','${DATA.CUST_CD}',${DATA.ROLL_QTY},'${DATA.PROD_REQUEST_NO}')`;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.loadBTPAuto2 = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
   WITH BANG_GOP AS (
    SELECT 
        P501.CTR_CD,
        P501.M_LOT_NO,
        P501.PROCESS_LOT_NO,
        FLOOR(((P501.TEMP_QTY * PD) / CAVITY) / 1000) AS REMAIN_QTY,
        P501.TEMP_QTY AS TEMP_QTY_EA,
        'SX_NEW' AS PHAN_LOAI,
        P501.USE_YN,
        ZTB_SX_RESULT.PD,
        ZTB_SX_RESULT.CAVITY
    FROM P501 
    LEFT JOIN ZTB_SX_RESULT 
        ON ZTB_SX_RESULT.PLAN_ID = P501.PLAN_ID 
        AND ZTB_SX_RESULT.CTR_CD = P501.CTR_CD
    WHERE P501.USE_YN = 'Y' 
        AND P501.LOT_STATUS IS NULL
    
    UNION ALL
    
    SELECT 
        ZTB_TON_BTP.CTR_CD,
        ZTB_TON_BTP.M_LOT_NO,
        ZTB_TON_BTP.PROCESS_LOT_NO,
        ZTB_TON_BTP.REMAIN_QTY,
        FLOOR(((ZTB_TON_BTP.REMAIN_QTY / PD) * CAVITY) * 1000) AS TEMP_QTY_EA,
        'TON_BTP' AS PHAN_LOAI,
        ZTB_TON_BTP.USE_YN,
        ZTB_SX_RESULT.PD,
        ZTB_SX_RESULT.CAVITY
    FROM ZTB_TON_BTP 
    LEFT JOIN ZTB_SX_RESULT 
        ON ZTB_SX_RESULT.PLAN_ID = ZTB_TON_BTP.PLAN_ID_INPUT
    LEFT JOIN ZTB_SX_EQ_STATUS 
        ON ZTB_SX_EQ_STATUS.EQ_NAME = ZTB_SX_RESULT.EQ_NAME 
        AND ZTB_SX_EQ_STATUS.FACTORY = ZTB_SX_RESULT.FACTORY 
        AND ZTB_SX_EQ_STATUS.CTR_CD = ZTB_SX_RESULT.CTR_CD
    WHERE ZTB_TON_BTP.USE_YN = 'Y'
)

SELECT 
    P501.INS_DATE,
    P501.FACTORY,
    P501.XUONG,
    P501.EQ_NAME,
    ZTB_QLSXPLAN.G_CODE,
    M100.G_NAME,
    M100.PROD_TYPE,
    CASE 
        WHEN M100.CODE_33 = '01' THEN 'EA'
        WHEN M100.CODE_33 = '02' THEN 'ROLL'
        WHEN M100.CODE_33 = '03' THEN 'SHEET'
        WHEN M100.CODE_33 = '04' THEN 'MET'
        WHEN M100.CODE_33 = '06' THEN 'PACK (BAG)'
        WHEN M100.CODE_33 = '99' THEN 'X'
    END AS UNIT,
    ZTB_QLSXPLAN.PROD_REQUEST_NO,
    P501.PLAN_ID,
    ZTB_QLSXPLAN.PROCESS_NUMBER,
    BANG_GOP.M_LOT_NO,
    BANG_GOP.PROCESS_LOT_NO,
    REMAIN_QTY AS REMAIN_QTY_M,
    BANG_GOP.TEMP_QTY_EA,
    CASE 
        WHEN TRANS_LOT_NO IS NOT NULL THEN ZTB_GIAONHAN_M_LOT.FACTORY 
        ELSE P501.FACTORY 
    END AS FINAL_FACTORY,
    CASE 
        WHEN TRANS_LOT_NO IS NOT NULL THEN ZTB_GIAONHAN_M_LOT.XUONG 
        ELSE P501.XUONG 
    END AS FINAL_XUONG,
    PHAN_LOAI,
    BANG_GOP.USE_YN,
    BANG_GOP.PD,
    BANG_GOP.CAVITY,
    ZTB_GIAONHAN_M_LOT.TRANS_LOT_NO,
	CASE WHEN P400.CODE_55 = '04' THEN 'SAMPLE' ELSE 'MASS' END AS BTP_TYPE
FROM BANG_GOP
LEFT JOIN P501 
    ON P501.PROCESS_LOT_NO = BANG_GOP.PROCESS_LOT_NO 
    AND P501.CTR_CD = BANG_GOP.CTR_CD
LEFT JOIN ZTB_QLSXPLAN 
    ON ZTB_QLSXPLAN.PLAN_ID = P501.PLAN_ID 
    AND ZTB_QLSXPLAN.CTR_CD = P501.CTR_CD
LEFT JOIN M100 
    ON M100.G_CODE = ZTB_QLSXPLAN.G_CODE 
    AND M100.CTR_CD = ZTB_QLSXPLAN.CTR_CD
LEFT JOIN ZTB_GIAONHAN_M_LOT 
    ON ZTB_GIAONHAN_M_LOT.PROCESS_LOT_NO = BANG_GOP.PROCESS_LOT_NO 
    AND ZTB_GIAONHAN_M_LOT.CTR_CD = BANG_GOP.CTR_CD
LEFT JOIN P400
	ON P400.CTR_CD = BANG_GOP.CTR_CD
	AND P400.PROD_REQUEST_NO = ZTB_QLSXPLAN.PROD_REQUEST_NO
  WHERE BANG_GOP.CTR_CD='${DATA.CTR_CD}';
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.loadBTPSummaryAuto2 = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
  WITH TONBTPTB AS
(SELECT P501.FACTORY,P501.XUONG,P501.EQ_NAME,ZTB_QLSXPLAN.G_CODE,M100.G_NAME,M100.PROD_TYPE, (CASE WHEN M100.CODE_33='01' THEN 'EA' WHEN M100.CODE_33= '02' THEN 'ROLL' WHEN M100.CODE_33= '03' THEN 'SHEET' WHEN M100.CODE_33= '04' THEN 'MET' WHEN M100.CODE_33= '06' THEN 'PACK (BAG)' WHEN M100.CODE_33= '99' THEN 'X' END) AS UNIT,ZTB_QLSXPLAN.PROD_REQUEST_NO,P501.PLAN_ID,ZTB_QLSXPLAN.PROCESS_NUMBER,BANG_GOP.M_LOT_NO,BANG_GOP.PROCESS_LOT_NO,REMAIN_QTY AS REMAIN_QTY_M,BANG_GOP.TEMP_QTY_EA,(CASE WHEN TRANS_LOT_NO is not null THEN ZTB_GIAONHAN_M_LOT.FACTORY  ELSE P501.FACTORY  END) AS FINAL_FACTORY, (CASE WHEN TRANS_LOT_NO is not null THEN ZTB_GIAONHAN_M_LOT.XUONG  ELSE P501.XUONG  END) AS FINAL_XUONG,PHAN_LOAI,BANG_GOP.USE_YN,BANG_GOP.PD,BANG_GOP.CAVITY,ZTB_GIAONHAN_M_LOT.TRANS_LOT_NO FROM ( SELECT P501.CTR_CD,       P501.M_LOT_NO,     P501.PROCESS_LOT_NO,     FLOOR(((P501.TEMP_QTY * PD) / CAVITY) / 1000) AS REMAIN_QTY,     P501.TEMP_QTY AS TEMP_QTY_EA,     'SX_NEW' AS PHAN_LOAI,     P501.USE_YN,     ZTB_SX_RESULT.PD,     ZTB_SX_RESULT.CAVITY FROM P501 LEFT JOIN ZTB_SX_RESULT ON (ZTB_SX_RESULT.PLAN_ID = P501.PLAN_ID AND ZTB_SX_RESULT.CTR_CD = P501.CTR_CD) WHERE P501.USE_YN = 'Y' AND P501.LOT_STATUS IS NULL UNION ALL SELECT      ZTB_TON_BTP.CTR_CD,  ZTB_TON_BTP.M_LOT_NO,     ZTB_TON_BTP.PROCESS_LOT_NO,     ZTB_TON_BTP.REMAIN_QTY,     FLOOR(((ZTB_TON_BTP.REMAIN_QTY / PD) * CAVITY) * 1000) AS TEMP_QTY_EA,     'TON_BTP' AS PHAN_LOAI,     ZTB_TON_BTP.USE_YN,     ZTB_SX_RESULT.PD,     ZTB_SX_RESULT.CAVITY FROM ZTB_TON_BTP LEFT JOIN ZTB_SX_RESULT ON (ZTB_SX_RESULT.PLAN_ID = ZTB_TON_BTP.PLAN_ID_INPUT) LEFT JOIN ZTB_SX_EQ_STATUS ON (ZTB_SX_EQ_STATUS.EQ_NAME = ZTB_SX_RESULT.EQ_NAME  AND ZTB_SX_EQ_STATUS.FACTORY = ZTB_SX_RESULT.FACTORY  AND ZTB_SX_EQ_STATUS.CTR_CD = ZTB_SX_RESULT.CTR_CD) WHERE ZTB_TON_BTP.USE_YN = 'Y' ) AS BANG_GOP LEFT JOIN P501 ON(P501.PROCESS_LOT_NO = BANG_GOP.PROCESS_LOT_NO AND P501.CTR_CD = BANG_GOP.CTR_CD ) LEFT JOIN ZTB_QLSXPLAN ON(ZTB_QLSXPLAN.PLAN_ID = P501.PLAN_ID AND ZTB_QLSXPLAN.CTR_CD = P501.CTR_CD ) LEFT JOIN M100 ON(M100.G_CODE = ZTB_QLSXPLAN.G_CODE AND M100.CTR_CD = ZTB_QLSXPLAN.CTR_CD ) LEFT JOIN ZTB_GIAONHAN_M_LOT ON(ZTB_GIAONHAN_M_LOT.PROCESS_LOT_NO = BANG_GOP.PROCESS_LOT_NO AND ZTB_GIAONHAN_M_LOT.CTR_CD = BANG_GOP.CTR_CD )
) 
SELECT  G_CODE, G_NAME, SUM(CASE WHEN FINAL_XUONG='A' THEN TONBTPTB.TEMP_QTY_EA ELSE 0 END) AS XA, SUM(CASE WHEN FINAL_XUONG='B' THEN TONBTPTB.TEMP_QTY_EA ELSE 0 END) AS XB,SUM(TONBTPTB.TEMP_QTY_EA) AS TOTAL_BTP  FROM TONBTPTB GROUP BY G_CODE, G_NAME     
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.updateKHSXDAIHAN = async (req, res, DATA) => {
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let checkkq = "OK";
  let setpdQuery = `          
  UPDATE ZTB_PROD_PLAN_TB SET
  D1=${DATA.D1},
  D2=${DATA.D2},
  D3=${DATA.D3},
  D4=${DATA.D4},
  D5=${DATA.D5},
  D6=${DATA.D6},
  D7=${DATA.D7},
  D8=${DATA.D8},
  D9=${DATA.D9},
  D10=${DATA.D10},
  D11=${DATA.D11},
  D12=${DATA.D12},
  D13=${DATA.D13},
  D14=${DATA.D14},
  D15=${DATA.D15},
  UPD_EMPL='${EMPL_NO}',
  UPD_DATE=GETDATE()
  WHERE PLAN_DATE='${DATA.PLAN_DATE}' AND G_CODE='${DATA.G_CODE}' AND PROCESS_NUMBER='${DATA.PROCESS_NUMBER}' AND CTR_CD='${DATA.CTR_CD}'
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.deleteNotExistKHSXDAIHAN = async (req, res, DATA) => {
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let checkkq = "OK";
  let setpdQuery = `
  UPDATE P501 SET REMARK='HUY TEM', USE_YN='X', UPD_EMPL='${EMPL_NO}', UPD_DATE=GETDATE() WHERE CTR_CD='${DATA.CTR_CD}' AND PROCESS_LOT_NO='${DATA.PROCESS_LOT_NO}'
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.cancelProductionLot = async (req, res, DATA) => {
  let EMPL_NO = req.payload_data["EMPL_NO"];
  //let checkkq = {tk_status: 'NG', tk_message: 'Tính năng tạm thời gián đoạn'};
  let setpdQuery = `
  UPDATE P501 SET REMARK='HUY TEM', USE_YN='X', UPD_EMPL='${EMPL_NO}', UPD_DATE=GETDATE() WHERE CTR_CD='${DATA.CTR_CD}' AND PROCESS_LOT_NO='${DATA.PROCESS_LOT_NO}'
  `;
  //console.log(setpdQuery);
  //checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.traDataPlanLossSX = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = ``
  if (DATA.FACTORY !== 'ALL') {
    condition += ` AND SUBSTRING(ZTB_QLSXPLAN.PLAN_EQ,1,2)='${DATA.FACTORY}'`
  }
  let setpdQuery = `
  WITH AA AS (
    SELECT PLAN_ID_SUDUNG,M090.M_NAME, SUM(isnull(TOTAL_IN_QTY, 0)) AS INPUT_QTY, IN_KHO_SX.CTR_CD
    FROM IN_KHO_SX
    LEFT JOIN M090 ON (M090.M_CODE = IN_KHO_SX.M_CODE AND M090.CTR_CD = IN_KHO_SX.CTR_CD)
    WHERE IN_KHO_SX.USE_YN = 'X' AND IN_KHO_SX.CTR_CD='${DATA.CTR_CD}'
    GROUP BY IN_KHO_SX.PLAN_ID_SUDUNG,M090.M_NAME,IN_KHO_SX.CTR_CD
    ),
BB AS (
    SELECT P500.PLAN_ID,M090.M_NAME,SUM(isnull(REMAIN_QTY, 0)) AS REMAIN_QTY,SUM(isnull(INPUT_QTY, 0))  AS INPUT_QTY, P500.CTR_CD
    FROM P500
    LEFT JOIN M090 ON (M090.M_CODE = P500.M_CODE AND M090.CTR_CD = P500.CTR_CD)
    GROUP BY PLAN_ID,M090.M_NAME,P500.CTR_CD),
WAREHOUSE_OUT AS (
    SELECT PLAN_ID_INPUT,M090.M_NAME,SUM(isnull(TOTAL_IN_QTY, 0)) AS WAREHOUSE_OUTPUT_QTY, IN_KHO_SX.CTR_CD
    FROM IN_KHO_SX
    LEFT JOIN M090 ON (M090.M_CODE = IN_KHO_SX.M_CODE AND M090.CTR_CD = IN_KHO_SX.CTR_CD)
    WHERE IN_KHO_SX.PHANLOAI = 'N' AND IN_KHO_SX.CTR_CD='${DATA.CTR_CD}'
    GROUP BY PLAN_ID_INPUT,M090.M_NAME,IN_KHO_SX.CTR_CD),
CC AS (
SELECT PLAN_ID_INPUT,M090.M_NAME,SUM(isnull(TOTAL_IN_QTY, 0)) AS RETURN_QTY, IN_KHO_SX.CTR_CD
    FROM IN_KHO_SX
    LEFT JOIN M090 ON (M090.M_CODE = IN_KHO_SX.M_CODE AND M090.CTR_CD = IN_KHO_SX.CTR_CD)
    WHERE IN_KHO_SX.REMARK = 'TRA_KHO' AND IN_KHO_SX.PLAN_ID_SUDUNG is null AND IN_KHO_SX.CTR_CD='${DATA.CTR_CD}'
    GROUP BY PLAN_ID_INPUT,M090.M_NAME,IN_KHO_SX.CTR_CD) ,
DD AS (
SELECT PLAN_ID_INPUT,M090.M_NAME,SUM(isnull(TOTAL_IN_QTY, 0)) AS NEXT_OUT_QTY, IN_KHO_SX.CTR_CD
FROM IN_KHO_SX
LEFT JOIN M090 ON (M090.M_CODE = IN_KHO_SX.M_CODE AND M090.CTR_CD = IN_KHO_SX.CTR_CD)
WHERE PLAN_ID_INPUT <> PLAN_ID_SUDUNG AND IN_KHO_SX.USE_YN = 'X' AND isnull(REMARK,'') <> 'TRA_KHO' AND IN_KHO_SX.CTR_CD='${DATA.CTR_CD}'
GROUP BY PLAN_ID_INPUT,M090.M_NAME,IN_KHO_SX.CTR_CD),
EE AS (
SELECT PLAN_ID_SUDUNG,M090.M_NAME,SUM(isnull(TOTAL_IN_QTY, 0)) AS NEXT_IN_QTY, IN_KHO_SX.CTR_CD
FROM IN_KHO_SX
LEFT JOIN M090 ON (M090.M_CODE = IN_KHO_SX.M_CODE AND M090.CTR_CD = IN_KHO_SX.CTR_CD)
WHERE PLAN_ID_INPUT <> PLAN_ID_SUDUNG AND IN_KHO_SX.CTR_CD='${DATA.CTR_CD}'
GROUP BY PLAN_ID_SUDUNG,M090.M_NAME,IN_KHO_SX.CTR_CD),
FF AS (
SELECT PLAN_ID_INPUT,M090.M_NAME,SUM(isnull(TOTAL_IN_QTY, 0)) AS TON_KHO_AO, IN_KHO_SX.CTR_CD
FROM IN_KHO_SX
LEFT JOIN M090 ON (M090.M_CODE = IN_KHO_SX.M_CODE AND M090.CTR_CD = IN_KHO_SX.CTR_CD)
WHERE IN_KHO_SX.USE_YN='Y' AND IN_KHO_SX.CTR_CD='${DATA.CTR_CD}'
GROUP BY PLAN_ID_INPUT,M090.M_NAME,IN_KHO_SX.CTR_CD),
GG AS (
SELECT PLAN_ID_INPUT,M090.M_NAME,SUM(isnull(TOTAL_IN_QTY, 0)) AS LOCK_QTY, IN_KHO_SX.CTR_CD
FROM IN_KHO_SX
LEFT JOIN M090 ON (M090.M_CODE = IN_KHO_SX.M_CODE AND M090.CTR_CD = IN_KHO_SX.CTR_CD)
WHERE IN_KHO_SX.USE_YN='O' AND IN_KHO_SX.CTR_CD='${DATA.CTR_CD}'
GROUP BY PLAN_ID_INPUT,M090.M_NAME,IN_KHO_SX.CTR_CD)
, INSPECT_INPUT_TABLE AS 
( SELECT 
      PLAN_ID, 
      SUM(
        CAST(INPUT_QTY_EA as float)
      ) AS INS_INPUT,
      CTR_CD
    FROM 
      ZTBINSPECTINPUTTB 
    WHERE CTR_CD='${DATA.CTR_CD}'
    GROUP BY 
      PLAN_ID, CTR_CD),
INSPECT_OUTPUT_TABLE AS 
(SELECT 
      PLAN_ID, 
      SUM(
        CAST(OUTPUT_QTY_EA as float)
      ) AS INS_OUTPUT,
      CTR_CD
    FROM 
      ZTBINSPECTOUTPUTTB 
    WHERE CTR_CD='${DATA.CTR_CD}'
    GROUP BY 
      PLAN_ID, CTR_CD),
  INSPECT_NK_TABLE AS
  ( SELECT 
      PLAN_ID, 
      SUM(
        CAST((INSPECT_TOTAL_QTY-ERR32) as float)
      ) AS INSPECT_TOTAL_QTY, 
      SUM(
        CAST(INSPECT_OK_QTY as float)
      ) AS INSPECT_OK_QTY, 
      SUM(
        CAST(
          (
            ERR4 + ERR5 + ERR6 + ERR7 + ERR8 + ERR9 + ERR10 + ERR11 + ERR12 + ERR13 + ERR14 + ERR15 + ERR16 + ERR17 + ERR18 + ERR19 + ERR20 + ERR21 + ERR22 + ERR23 + ERR24 + ERR25 + ERR26 + ERR27 + ERR28 + ERR29 + ERR30 + ERR31
          ) as float
        )
      ) AS INSPECT_TOTAL_NG , 
      SUM(ERR4+ERR5+ERR6+ERR7+ERR8+ERR9+ERR10+ERR11) AS INSPECT_MATERIAL_NG, SUM(ERR12+ERR13+ERR14+ERR15+ERR16+ERR17+ERR18+ERR19+ERR20+ERR21+ERR22+ERR23+ERR24+ERR25+ERR26+ERR27+ERR28+ERR29+ERR30+ERR31) AS INSPECT_PROCESS_NG, SUM(ERR32) AS SX_MARKING_QTY, SUM(ERR1) AS LOSS_THEM_TUI,SUM(ERR1+ ERR2+ERR3) AS INSPECT_LOSS_QTY,
      CTR_CD
    FROM 
      ZTBINSPECTNGTB 
    WHERE CTR_CD='${DATA.CTR_CD}'
    GROUP BY 
      PLAN_ID, CTR_CD),
PROCESS_TB AS
          (
          SELECT G_CODE,
          CASE WHEN EQ4 <> 'NA' AND EQ4 <> 'NO' AND EQ4 is not null AND EQ4 <> '' THEN 4 
          WHEN EQ3 <> 'NA' AND EQ3 <> 'NO' AND EQ3 is not null AND EQ3 <> ''  THEN 3
          WHEN EQ2 <> 'NA' AND EQ2 <> 'NO' AND EQ2 is not null AND EQ2 <> ''  THEN 2 
          ELSE 1 END AS MAX_PROCESS_NUMBER,
          CTR_CD
          FROM M100
          WHERE CTR_CD='${DATA.CTR_CD}'
),
QLSXPLANTB AS
(
SELECT 
  CASE WHEN P400.CODE_55 = '04' THEN 'SAMPLE' ELSE 'MASS' END AS PHAN_LOAI, 
  ZTB_QLSXPLAN.G_CODE, 
  ZTB_QLSXPLAN.PLAN_ID, 
  ZTB_QLSXPLAN.PLAN_DATE, 
  CONCAT(YEAR(ZTB_QLSXPLAN.PLAN_DATE) , '_',  MONTH(ZTB_QLSXPLAN.PLAN_DATE)) AS YW,
  ZTB_QLSXPLAN.PROD_REQUEST_NO, 
  M100.G_NAME, 
  M100.G_NAME_KD,
  isnull(
  CASE 
  WHEN ZTB_QLSXPLAN.PROCESS_NUMBER = 1 THEN (ZTB_QLSXPLAN.PLAN_QTY* ZTB_SX_RESULT.PD*1.0/ZTB_SX_RESULT.CAVITY/1000*(1+isnull(ZTB_DM_HISTORY.LOSS_SX1, M100.LOSS_SX1)/100) + isnull(ZTB_DM_HISTORY.LOSS_SETTING1,M100.LOSS_SETTING1) ) 
  WHEN ZTB_QLSXPLAN.PROCESS_NUMBER = 2 THEN (ZTB_QLSXPLAN.PLAN_QTY* ZTB_SX_RESULT.PD*1.0/ZTB_SX_RESULT.CAVITY/1000*(1+isnull(ZTB_DM_HISTORY.LOSS_SX2, M100.LOSS_SX2)/100) + isnull(ZTB_DM_HISTORY.LOSS_SETTING2,M100.LOSS_SETTING2))
  WHEN ZTB_QLSXPLAN.PROCESS_NUMBER = 3 THEN (ZTB_QLSXPLAN.PLAN_QTY* ZTB_SX_RESULT.PD*1.0/ZTB_SX_RESULT.CAVITY/1000*(1+isnull(ZTB_DM_HISTORY.LOSS_SX3, M100.LOSS_SX3)/100) + isnull(ZTB_DM_HISTORY.LOSS_SETTING3,M100.LOSS_SETTING3))
  WHEN ZTB_QLSXPLAN.PROCESS_NUMBER = 4 THEN (ZTB_QLSXPLAN.PLAN_QTY* ZTB_SX_RESULT.PD*1.0/ZTB_SX_RESULT.CAVITY/1000*(1+isnull(ZTB_DM_HISTORY.LOSS_SX4, M100.LOSS_SX4)/100) + isnull(ZTB_DM_HISTORY.LOSS_SETTING4,M100.LOSS_SETTING4))
  ELSE ZTB_QLSXPLAN.PLAN_QTY* ZTB_SX_RESULT.PD*1.0/ZTB_SX_RESULT.CAVITY/1000 END,0) AS PLAN_TARGET_MET
  ,
  ZTB_QLSXPLAN.PLAN_QTY, 
  ZTB_QLSXPLAN.PLAN_QTY* ZTB_SX_RESULT.PD*1.0/ZTB_SX_RESULT.CAVITY/1000 AS PLAN_ORG_MET,  
  M100.EQ1, 
  M100.EQ2, 
  ZTB_QLSXPLAN.PLAN_EQ, 
  ZTB_QLSXPLAN.PLAN_FACTORY, 
  ZTB_QLSXPLAN.PROCESS_NUMBER, 
  ZTB_QLSXPLAN.STEP, 
(isnull(BB.INPUT_QTY * 1.00000, isnull(AA.INPUT_QTY * 1.00000,0)) - isnull(BB.REMAIN_QTY, 0)) AS USED_QTY, 
isnull(ZTB_SX_RESULT.NG_MET,0) AS NG_MET, 
  isnull(ZTB_SX_RESULT.SETTING_MET,0) AS SETTING_MET,
  isnull(ZTB_SX_RESULT.SX_RESULT,0) AS SX_RESULT,
SUBSTRING(ZTB_SX_RESULT.EQ_NAME, 1, 2) AS MACHINE_NAME,
ZTB_QLSXPLAN.CTR_CD
FROM 
  ZTB_QLSXPLAN 
  LEFT JOIN AA ON (AA.PLAN_ID_SUDUNG= ZTB_QLSXPLAN.PLAN_ID AND AA.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
  LEFT JOIN BB ON (BB.PLAN_ID= ZTB_QLSXPLAN.PLAN_ID AND BB.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
  LEFT JOIN CC ON (CC.PLAN_ID_INPUT= ZTB_QLSXPLAN.PLAN_ID AND CC.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
  LEFT JOIN DD ON (DD.PLAN_ID_INPUT= ZTB_QLSXPLAN.PLAN_ID AND DD.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
  LEFT JOIN EE ON (EE.PLAN_ID_SUDUNG= ZTB_QLSXPLAN.PLAN_ID AND EE.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
  LEFT JOIN FF ON (FF.PLAN_ID_INPUT= ZTB_QLSXPLAN.PLAN_ID AND FF.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
  LEFT JOIN GG ON (GG.PLAN_ID_INPUT= ZTB_QLSXPLAN.PLAN_ID AND GG.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
  LEFT JOIN WAREHOUSE_OUT ON (WAREHOUSE_OUT.PLAN_ID_INPUT= ZTB_QLSXPLAN.PLAN_ID AND WAREHOUSE_OUT.CTR_CD = ZTB_QLSXPLAN.CTR_CD) 
  LEFT JOIN ZTB_SX_RESULT ON (ZTB_SX_RESULT.PLAN_ID = ZTB_QLSXPLAN.PLAN_ID AND ZTB_SX_RESULT.CTR_CD = ZTB_QLSXPLAN.CTR_CD) 
  LEFT JOIN  INSPECT_INPUT_TABLE ON(ZTB_QLSXPLAN.PLAN_ID = INSPECT_INPUT_TABLE.PLAN_ID AND INSPECT_INPUT_TABLE.CTR_CD = ZTB_QLSXPLAN.CTR_CD) 
  LEFT JOIN INSPECT_OUTPUT_TABLE ON (ZTB_QLSXPLAN.PLAN_ID = INSPECT_OUTPUT_TABLE.PLAN_ID AND INSPECT_OUTPUT_TABLE.CTR_CD = ZTB_QLSXPLAN.CTR_CD) 
  LEFT JOIN  INSPECT_NK_TABLE ON (ZTB_QLSXPLAN.PLAN_ID = INSPECT_NK_TABLE.PLAN_ID AND INSPECT_NK_TABLE.CTR_CD = ZTB_QLSXPLAN.CTR_CD) 
  LEFT JOIN M100 ON (M100.G_CODE = ZTB_QLSXPLAN.G_CODE AND M100.CTR_CD = ZTB_QLSXPLAN.CTR_CD) 
  LEFT JOIN PROCESS_TB ON (PROCESS_TB.G_CODE = ZTB_QLSXPLAN.G_CODE AND PROCESS_TB.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
  LEFT JOIN ZTB_SX_EFFICIENCY ON (ZTB_QLSXPLAN.PLAN_ID = ZTB_SX_EFFICIENCY.PLAN_ID AND ZTB_SX_EFFICIENCY.CTR_CD = ZTB_QLSXPLAN.CTR_CD) 
  LEFT JOIN P400 ON (P400.PROD_REQUEST_NO = ZTB_QLSXPLAN.PROD_REQUEST_NO AND P400.CTR_CD = ZTB_QLSXPLAN.CTR_CD) 
  LEFT JOIN ZTB_DM_HISTORY ON ZTB_QLSXPLAN.PROD_REQUEST_NO= ZTB_DM_HISTORY.PROD_REQUEST_NO AND ZTB_DM_HISTORY.CTR_CD = ZTB_QLSXPLAN.CTR_CD
  WHERE ZTB_QLSXPLAN.PLAN_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE}' AND ZTB_QLSXPLAN.PLAN_DATE > '2024-01-01' AND P400.CODE_55 <> '04' AND ZTB_QLSXPLAN.STEP = 0 AND ZTB_QLSXPLAN.PROCESS_NUMBER <> 0 AND ZTB_SX_RESULT.SX_RESULT is not null ${condition} AND ZTB_QLSXPLAN.CTR_CD='${DATA.CTR_CD}'
),
FNTB AS
(
SELECT QLSXPLANTB.*, (PLAN_TARGET_MET- PLAN_ORG_MET)/PLAN_ORG_MET AS PLAN_LOSS, (PLAN_TARGET_MET- PLAN_ORG_MET) AS PLAN_LOSS_MET, (NG_MET + SETTING_MET) AS ACTUAL_LOSS_MET, (NG_MET + SETTING_MET)/(USED_QTY) AS ACTUAL_LOSS FROM QLSXPLANTB WHERE USED_QTY <> 0 AND PLAN_ORG_MET <> 0
)
SELECT YW, SUM(PLAN_ORG_MET) AS PLAN_ORG_MET, SUM(PLAN_TARGET_MET) AS PLAN_INPUT_MET, SUM(PLAN_QTY) AS PLAN_QTY,SUM(SX_RESULT) AS SX_RESULT,SUM(USED_QTY) AS ACTUAL_INPUT_MET, SUM(PLAN_LOSS_MET) AS PLAN_LOSS_MET , SUM(ACTUAL_LOSS_MET) AS ACTUAL_LOSS_MET,SUM(PLAN_LOSS_MET)/SUM(USED_QTY) AS PLAN_LOSS_RATE,SUM(ACTUAL_LOSS_MET)/SUM(USED_QTY) AS ACTUAL_LOSS_RATE  FROM FNTB GROUP BY YW ORDER BY YW ASC`;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.datasxdailylosstrend = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
     WITH AA AS (
    SELECT PLAN_ID_SUDUNG, M090.M_NAME, SUM(isnull(TOTAL_IN_QTY, 0)) AS INPUT_QTY, IN_KHO_SX.CTR_CD
    FROM IN_KHO_SX
    LEFT JOIN M090 ON (M090.M_CODE = IN_KHO_SX.M_CODE AND M090.CTR_CD = IN_KHO_SX.CTR_CD)
    WHERE IN_KHO_SX.USE_YN = 'X' AND IN_KHO_SX.CTR_CD = '${DATA.CTR_CD}'
    GROUP BY IN_KHO_SX.PLAN_ID_SUDUNG, M090.M_NAME, IN_KHO_SX.CTR_CD
    ),
BB AS (
    SELECT P500.PLAN_ID, M090.M_NAME, SUM(isnull(REMAIN_QTY, 0)) AS REMAIN_QTY, SUM(isnull(INPUT_QTY, 0)) AS INPUT_QTY, P500.CTR_CD
    FROM P500
    LEFT JOIN M090 ON (M090.M_CODE = P500.M_CODE AND M090.CTR_CD = P500.CTR_CD)
    WHERE P500.CTR_CD = '${DATA.CTR_CD}'
    GROUP BY PLAN_ID, M090.M_NAME, P500.CTR_CD),
INSPECT_OUTPUT_TABLE AS 
(SELECT 
      PLAN_ID, 
      SUM(
        CAST(OUTPUT_QTY_EA as float)
      ) AS INS_OUTPUT,
      CTR_CD
    FROM 
      ZTBINSPECTOUTPUTTB 
    WHERE CTR_CD = '${DATA.CTR_CD}'
    GROUP BY 
      PLAN_ID, CTR_CD),
SXDATATB AS
(
SELECT
ZTB_QLSXPLAN.PLAN_DATE,
CASE WHEN ZTB_QLSXPLAN.PROCESS_NUMBER = 1 THEN
(isnull(BB.INPUT_QTY * 1.00000, isnull(AA.INPUT_QTY * 1.00000,0)) - isnull(BB.REMAIN_QTY, 0)) ELSE 0 END AS USED_QTY,
CASE WHEN ZTB_QLSXPLAN.PROCESS_NUMBER = 1 THEN ((isnull(BB.INPUT_QTY * 1.00000, isnull(AA.INPUT_QTY,0) * 1.00000) - isnull(BB.REMAIN_QTY, 0))*1.0)/ ZTB_SX_RESULT.PD * ZTB_SX_RESULT.CAVITY * 1000 ELSE 0 END AS ESTIMATED_QTY, 
  isnull(INSPECT_OUTPUT_TABLE.INS_OUTPUT,0) AS INS_OUTPUT
FROM 
  ZTB_QLSXPLAN 
  LEFT JOIN AA ON (AA.PLAN_ID_SUDUNG = ZTB_QLSXPLAN.PLAN_ID AND AA.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
  LEFT JOIN BB ON (BB.PLAN_ID = ZTB_QLSXPLAN.PLAN_ID AND BB.CTR_CD = ZTB_QLSXPLAN.CTR_CD)  
  LEFT JOIN ZTB_SX_RESULT ON (ZTB_SX_RESULT.PLAN_ID = ZTB_QLSXPLAN.PLAN_ID AND ZTB_SX_RESULT.CTR_CD = ZTB_QLSXPLAN.CTR_CD) 
  LEFT JOIN INSPECT_OUTPUT_TABLE ON (ZTB_QLSXPLAN.PLAN_ID = INSPECT_OUTPUT_TABLE.PLAN_ID AND ZTB_QLSXPLAN.CTR_CD = INSPECT_OUTPUT_TABLE.CTR_CD) 
  LEFT JOIN P400 ON (P400.PROD_REQUEST_NO = ZTB_QLSXPLAN.PROD_REQUEST_NO AND P400.CTR_CD = ZTB_QLSXPLAN.CTR_CD) 
  WHERE P400.CODE_55 <> '04' AND PLAN_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE}' AND ZTB_SX_RESULT.SX_DATE is not null AND ZTB_QLSXPLAN.CTR_CD = '${DATA.CTR_CD}'
)
SELECT PLAN_DATE AS INPUT_DATE, SUM(ESTIMATED_QTY) AS PURE_INPUT, SUM(INS_OUTPUT) AS PURE_OUTPUT FROM SXDATATB GROUP BY PLAN_DATE
ORDER BY PLAN_DATE ASC
    `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.datasxweeklylosstrend = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
     WITH AA AS (
SELECT PLAN_ID_SUDUNG, M090.M_NAME, SUM(isnull(TOTAL_IN_QTY, 0)) AS INPUT_QTY, IN_KHO_SX.CTR_CD
FROM IN_KHO_SX
LEFT JOIN M090 ON (M090.M_CODE = IN_KHO_SX.M_CODE AND M090.CTR_CD = IN_KHO_SX.CTR_CD)
WHERE IN_KHO_SX.USE_YN = 'X' AND IN_KHO_SX.CTR_CD = '${DATA.CTR_CD}'
GROUP BY IN_KHO_SX.PLAN_ID_SUDUNG, M090.M_NAME, IN_KHO_SX.CTR_CD
),
BB AS (
SELECT P500.PLAN_ID, M090.M_NAME, SUM(isnull(REMAIN_QTY, 0)) AS REMAIN_QTY, SUM(isnull(INPUT_QTY, 0)) AS INPUT_QTY, P500.CTR_CD
FROM P500
LEFT JOIN M090 ON (M090.M_CODE = P500.M_CODE AND M090.CTR_CD = P500.CTR_CD)
WHERE P500.CTR_CD = '${DATA.CTR_CD}'
GROUP BY PLAN_ID, M090.M_NAME, P500.CTR_CD),
INSPECT_OUTPUT_TABLE AS 
(SELECT 
PLAN_ID, 
SUM(
CAST(OUTPUT_QTY_EA as float)
) AS INS_OUTPUT,
CTR_CD
FROM 
ZTBINSPECTOUTPUTTB 
WHERE CTR_CD = '${DATA.CTR_CD}'
GROUP BY 
PLAN_ID, CTR_CD),
SXDATATB AS
(
SELECT
ZTB_QLSXPLAN.PLAN_DATE,
CASE WHEN ZTB_QLSXPLAN.PROCESS_NUMBER = 1 THEN
(isnull(BB.INPUT_QTY * 1.00000, isnull(AA.INPUT_QTY * 1.00000,0)) - isnull(BB.REMAIN_QTY, 0)) ELSE 0 END AS USED_QTY,
CASE WHEN ZTB_QLSXPLAN.PROCESS_NUMBER = 1 THEN ((isnull(BB.INPUT_QTY * 1.00000, isnull(AA.INPUT_QTY,0) * 1.00000) - isnull(BB.REMAIN_QTY, 0))*1.0)/ ZTB_SX_RESULT.PD * ZTB_SX_RESULT.CAVITY * 1000 ELSE 0 END AS ESTIMATED_QTY, 
isnull(INSPECT_OUTPUT_TABLE.INS_OUTPUT,0) AS INS_OUTPUT,
ZTB_QLSXPLAN.CTR_CD
FROM 
ZTB_QLSXPLAN 
LEFT JOIN AA ON (AA.PLAN_ID_SUDUNG = ZTB_QLSXPLAN.PLAN_ID AND AA.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
LEFT JOIN BB ON (BB.PLAN_ID = ZTB_QLSXPLAN.PLAN_ID AND BB.CTR_CD = ZTB_QLSXPLAN.CTR_CD)  
LEFT JOIN ZTB_SX_RESULT ON (ZTB_SX_RESULT.PLAN_ID = ZTB_QLSXPLAN.PLAN_ID AND ZTB_SX_RESULT.CTR_CD = ZTB_QLSXPLAN.CTR_CD) 
LEFT JOIN INSPECT_OUTPUT_TABLE ON (ZTB_QLSXPLAN.PLAN_ID = INSPECT_OUTPUT_TABLE.PLAN_ID AND ZTB_QLSXPLAN.CTR_CD = INSPECT_OUTPUT_TABLE.CTR_CD) 
LEFT JOIN P400 ON (P400.PROD_REQUEST_NO = ZTB_QLSXPLAN.PROD_REQUEST_NO AND P400.CTR_CD = ZTB_QLSXPLAN.CTR_CD) 
WHERE P400.CODE_55 <> '04' AND PLAN_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE}' AND ZTB_SX_RESULT.SX_DATE is not null AND ZTB_QLSXPLAN.CTR_CD = '${DATA.CTR_CD}'
)
SELECT YEAR(PLAN_DATE) AS INPUT_YEAR, DATEPART(WEEK, PLAN_DATE) AS INPUT_WEEK, CONCAT(YEAR(PLAN_DATE),'_',DATEPART(WEEK, PLAN_DATE)) AS INPUT_YW, SUM(ESTIMATED_QTY) AS PURE_INPUT, SUM(INS_OUTPUT) AS PURE_OUTPUT FROM SXDATATB 
GROUP BY YEAR(PLAN_DATE), DATEPART(WEEK, PLAN_DATE)
ORDER BY YEAR(PLAN_DATE) DESC, DATEPART(WEEK, PLAN_DATE) DESC
    `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.datasxmonthlylosstrend = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
     WITH AA AS (
SELECT PLAN_ID_SUDUNG, M090.M_NAME, SUM(isnull(TOTAL_IN_QTY, 0)) AS INPUT_QTY, IN_KHO_SX.CTR_CD
FROM IN_KHO_SX
LEFT JOIN M090 ON (M090.M_CODE = IN_KHO_SX.M_CODE AND M090.CTR_CD = IN_KHO_SX.CTR_CD)
WHERE IN_KHO_SX.USE_YN = 'X' AND IN_KHO_SX.CTR_CD = '${DATA.CTR_CD}'
GROUP BY IN_KHO_SX.PLAN_ID_SUDUNG, M090.M_NAME, IN_KHO_SX.CTR_CD
),
BB AS (
SELECT P500.PLAN_ID, M090.M_NAME, SUM(isnull(REMAIN_QTY, 0)) AS REMAIN_QTY, SUM(isnull(INPUT_QTY, 0)) AS INPUT_QTY, P500.CTR_CD
FROM P500
LEFT JOIN M090 ON (M090.M_CODE = P500.M_CODE AND M090.CTR_CD = P500.CTR_CD)
WHERE P500.CTR_CD = '${DATA.CTR_CD}'
GROUP BY PLAN_ID, M090.M_NAME, P500.CTR_CD),
INSPECT_OUTPUT_TABLE AS 
(SELECT 
PLAN_ID, 
SUM(
CAST(OUTPUT_QTY_EA as float)
) AS INS_OUTPUT,
CTR_CD
FROM 
ZTBINSPECTOUTPUTTB 
WHERE CTR_CD = '${DATA.CTR_CD}'
GROUP BY 
PLAN_ID, CTR_CD),
SXDATATB AS
(
SELECT
ZTB_QLSXPLAN.PLAN_DATE,
CASE WHEN ZTB_QLSXPLAN.PROCESS_NUMBER = 1 THEN
(isnull(BB.INPUT_QTY * 1.00000, isnull(AA.INPUT_QTY * 1.00000,0)) - isnull(BB.REMAIN_QTY, 0)) ELSE 0 END AS USED_QTY,
CASE WHEN ZTB_QLSXPLAN.PROCESS_NUMBER = 1 THEN ((isnull(BB.INPUT_QTY * 1.00000, isnull(AA.INPUT_QTY,0) * 1.00000) - isnull(BB.REMAIN_QTY, 0))*1.0)/ ZTB_SX_RESULT.PD * ZTB_SX_RESULT.CAVITY * 1000 ELSE 0 END AS ESTIMATED_QTY, 
isnull(INSPECT_OUTPUT_TABLE.INS_OUTPUT,0) AS INS_OUTPUT,
ZTB_QLSXPLAN.CTR_CD
FROM 
ZTB_QLSXPLAN 
LEFT JOIN AA ON (AA.PLAN_ID_SUDUNG = ZTB_QLSXPLAN.PLAN_ID AND AA.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
LEFT JOIN BB ON (BB.PLAN_ID = ZTB_QLSXPLAN.PLAN_ID AND BB.CTR_CD = ZTB_QLSXPLAN.CTR_CD)  
LEFT JOIN ZTB_SX_RESULT ON (ZTB_SX_RESULT.PLAN_ID = ZTB_QLSXPLAN.PLAN_ID AND ZTB_SX_RESULT.CTR_CD = ZTB_QLSXPLAN.CTR_CD) 
LEFT JOIN INSPECT_OUTPUT_TABLE ON (ZTB_QLSXPLAN.PLAN_ID = INSPECT_OUTPUT_TABLE.PLAN_ID AND ZTB_QLSXPLAN.CTR_CD = INSPECT_OUTPUT_TABLE.CTR_CD) 
LEFT JOIN P400 ON (P400.PROD_REQUEST_NO = ZTB_QLSXPLAN.PROD_REQUEST_NO AND P400.CTR_CD = ZTB_QLSXPLAN.CTR_CD) 
WHERE P400.CODE_55 <> '04' AND PLAN_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE}' AND ZTB_SX_RESULT.SX_DATE is not null AND ZTB_QLSXPLAN.CTR_CD = '${DATA.CTR_CD}'
)
SELECT YEAR(PLAN_DATE) AS INPUT_YEAR, MONTH(PLAN_DATE) AS INPUT_MONTH, CONCAT(YEAR(PLAN_DATE),'_',MONTH(PLAN_DATE)) AS INPUT_YM, SUM(ESTIMATED_QTY) AS PURE_INPUT, SUM(INS_OUTPUT) AS PURE_OUTPUT FROM SXDATATB 
GROUP BY YEAR(PLAN_DATE), MONTH(PLAN_DATE)
ORDER BY YEAR(PLAN_DATE) DESC, MONTH(PLAN_DATE) DESC
    `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.datasxyearlylosstrend = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
     WITH AA AS (
SELECT PLAN_ID_SUDUNG, M090.M_NAME, SUM(isnull(TOTAL_IN_QTY, 0)) AS INPUT_QTY, IN_KHO_SX.CTR_CD
FROM IN_KHO_SX
LEFT JOIN M090 ON (M090.M_CODE = IN_KHO_SX.M_CODE)
WHERE IN_KHO_SX.USE_YN = 'X' AND IN_KHO_SX.CTR_CD = '${DATA.CTR_CD}'
GROUP BY IN_KHO_SX.PLAN_ID_SUDUNG, M090.M_NAME, IN_KHO_SX.CTR_CD
),
BB AS (
SELECT P500.PLAN_ID, M090.M_NAME, SUM(isnull(REMAIN_QTY, 0)) AS REMAIN_QTY, SUM(isnull(INPUT_QTY, 0)) AS INPUT_QTY, P500.CTR_CD
FROM P500
LEFT JOIN M090 ON (M090.M_CODE = P500.M_CODE)
WHERE P500.CTR_CD = '${DATA.CTR_CD}'
GROUP BY PLAN_ID, M090.M_NAME, P500.CTR_CD),
INSPECT_OUTPUT_TABLE AS 
(SELECT 
PLAN_ID, 
SUM(
CAST(OUTPUT_QTY_EA as float)
) AS INS_OUTPUT,
CTR_CD
FROM 
ZTBINSPECTOUTPUTTB 
WHERE CTR_CD = '${DATA.CTR_CD}'
GROUP BY 
PLAN_ID, CTR_CD),
SXDATATB AS
(
SELECT
ZTB_QLSXPLAN.PLAN_DATE,
CASE WHEN ZTB_QLSXPLAN.PROCESS_NUMBER = 1 THEN
(isnull(BB.INPUT_QTY * 1.00000, isnull(AA.INPUT_QTY * 1.00000,0)) - isnull(BB.REMAIN_QTY, 0)) ELSE 0 END AS USED_QTY,
CASE WHEN ZTB_QLSXPLAN.PROCESS_NUMBER = 1 THEN ((isnull(BB.INPUT_QTY * 1.00000, isnull(AA.INPUT_QTY,0) * 1.00000) - isnull(BB.REMAIN_QTY, 0))*1.0)/ ZTB_SX_RESULT.PD * ZTB_SX_RESULT.CAVITY * 1000 ELSE 0 END AS ESTIMATED_QTY, 
isnull(INSPECT_OUTPUT_TABLE.INS_OUTPUT,0) AS INS_OUTPUT,
ZTB_QLSXPLAN.CTR_CD
FROM 
ZTB_QLSXPLAN 
LEFT JOIN AA ON (AA.PLAN_ID_SUDUNG = ZTB_QLSXPLAN.PLAN_ID AND AA.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
LEFT JOIN BB ON (BB.PLAN_ID = ZTB_QLSXPLAN.PLAN_ID AND BB.CTR_CD = ZTB_QLSXPLAN.CTR_CD)  
LEFT JOIN ZTB_SX_RESULT ON (ZTB_SX_RESULT.PLAN_ID = ZTB_QLSXPLAN.PLAN_ID AND ZTB_SX_RESULT.CTR_CD = ZTB_QLSXPLAN.CTR_CD) 
LEFT JOIN INSPECT_OUTPUT_TABLE ON (ZTB_QLSXPLAN.PLAN_ID = INSPECT_OUTPUT_TABLE.PLAN_ID AND ZTB_QLSXPLAN.CTR_CD = INSPECT_OUTPUT_TABLE.CTR_CD) 
LEFT JOIN P400 ON (P400.PROD_REQUEST_NO = ZTB_QLSXPLAN.PROD_REQUEST_NO AND P400.CTR_CD = ZTB_QLSXPLAN.CTR_CD) 
WHERE P400.CODE_55 <> '04' AND PLAN_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE}' AND ZTB_SX_RESULT.SX_DATE is not null AND ZTB_QLSXPLAN.CTR_CD = '${DATA.CTR_CD}'
)
SELECT YEAR(PLAN_DATE) AS INPUT_YEAR, SUM(ESTIMATED_QTY) AS PURE_INPUT, SUM(INS_OUTPUT) AS PURE_OUTPUT FROM SXDATATB 
GROUP BY YEAR(PLAN_DATE)
ORDER BY YEAR(PLAN_DATE) DESC
    `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  console.log(checkkq);
  res.send(checkkq);
};
exports.dailyEQEffTrending = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
   WITH AA AS
(
SELECT
ZTB_SX_RESULT.SX_DATE,   
DATEDIFF(minute, SETTING_START_TIME, MASS_END_TIME) as TOTAL_TIME,(DATEDIFF(minute, MASS_START_TIME, MASS_END_TIME)) AS RUN_TIME_SX, 
DATEDIFF(minute, SETTING_START_TIME, MASS_START_TIME) as SETTING_TIME,(isnull(LAY_DO, 0) + isnull(MAY_HONG, 0) + isnull(DAO_NG, 0) + isnull(CHO_BTP, 0) + isnull(CHO_LIEU, 0) + isnull(HET_LIEU, 0) + isnull(LIEU_NG, 0) + isnull(CAN_HANG, 0) + isnull(HOP_FL, 0) + isnull(CHO_QC, 0) + isnull(CHOT_BAOCAO, 0) + isnull(CHUYEN_CODE, 0) + isnull(KHAC, 0)) AS TOTAL_LOSS_TIME,
ZTB_SX_RESULT.CTR_CD     
FROM 
ZTB_SX_RESULT 
LEFT JOIN ZTB_SX_EFFICIENCY ON (
ZTB_SX_RESULT.PLAN_ID = ZTB_SX_EFFICIENCY.PLAN_ID 
AND ZTB_SX_RESULT.WORK_SHIFT = ZTB_SX_EFFICIENCY.WORK_SHIFT
AND ZTB_SX_RESULT.CTR_CD = ZTB_SX_EFFICIENCY.CTR_CD
)
LEFT JOIN ZTB_QLSXPLAN ON (
ZTB_SX_RESULT.PLAN_ID = ZTB_QLSXPLAN.PLAN_ID
AND ZTB_SX_RESULT.CTR_CD = ZTB_QLSXPLAN.CTR_CD
) 
LEFT JOIN M100 ON (
M100.G_CODE = ZTB_QLSXPLAN.G_CODE
AND ZTB_SX_RESULT.CTR_CD = M100.CTR_CD
) 
LEFT JOIN P400 ON (ZTB_QLSXPLAN.PROD_REQUEST_NO = P400.PROD_REQUEST_NO
AND ZTB_SX_RESULT.CTR_CD = P400.CTR_CD)
WHERE P400.CODE_55 <> '04' AND ZTB_SX_RESULT.MASS_END_TIME is not null  AND ZTB_SX_RESULT.MASS_START_TIME is not null  AND ZTB_SX_RESULT.SETTING_START_TIME is not null
AND ZTB_SX_RESULT.CTR_CD='${DATA.CTR_CD}'
)
SELECT 
AA.SX_DATE,
74880 AS ALVB_TIME,
SUM(AA.TOTAL_TIME) AS TOTAL_TIME, 
SUM(AA.RUN_TIME_SX) AS RUN_TIME_SX, 
CASE WHEN SUM(AA.RUN_TIME_SX) - SUM(AA.TOTAL_LOSS_TIME) > =0 THEN SUM(AA.RUN_TIME_SX) - SUM(AA.TOTAL_LOSS_TIME) ELSE 0  END AS PURE_RUN_TIME,
SUM(AA.SETTING_TIME) AS SETTING_TIME, 
SUM(AA.TOTAL_LOSS_TIME) AS LOSS_TIME, 
CAST(SUM(AA.RUN_TIME_SX) as float)/ CAST(SUM(AA.TOTAL_TIME) as float) AS HIEU_SUAT_TIME, 
CAST(SUM(AA.SETTING_TIME) as float)/ CAST(SUM(AA.TOTAL_TIME) as float) AS SETTING_TIME_RATE, 
CAST(SUM(AA.TOTAL_LOSS_TIME) as float)/ CAST(SUM(AA.TOTAL_TIME) as float) AS LOSS_TIME_RATE,
AA.CTR_CD
FROM AA
WHERE AA.SX_DATE is not null AND AA.SX_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE}'
AND AA.CTR_CD='${DATA.CTR_CD}'
GROUP BY 
AA.SX_DATE,
AA.CTR_CD
ORDER BY 
AA.SX_DATE DESC
    `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.weeklyEQEffTrending = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
   WITH AA AS
(
SELECT
ZTB_SX_RESULT.SX_DATE,   
DATEDIFF(minute, SETTING_START_TIME, MASS_END_TIME) as TOTAL_TIME,(DATEDIFF(minute, MASS_START_TIME, MASS_END_TIME)) AS RUN_TIME_SX, 
DATEDIFF(minute, SETTING_START_TIME, MASS_START_TIME) as SETTING_TIME,(isnull(LAY_DO, 0) + isnull(MAY_HONG, 0) + isnull(DAO_NG, 0) + isnull(CHO_BTP, 0) + isnull(CHO_LIEU, 0) + isnull(HET_LIEU, 0) + isnull(LIEU_NG, 0) + isnull(CAN_HANG, 0) + isnull(HOP_FL, 0) + isnull(CHO_QC, 0) + isnull(CHOT_BAOCAO, 0) + isnull(CHUYEN_CODE, 0) + isnull(KHAC, 0)) AS TOTAL_LOSS_TIME,
ZTB_SX_RESULT.CTR_CD     
FROM 
ZTB_SX_RESULT 
LEFT JOIN ZTB_SX_EFFICIENCY ON (
ZTB_SX_RESULT.PLAN_ID = ZTB_SX_EFFICIENCY.PLAN_ID 
AND ZTB_SX_RESULT.WORK_SHIFT = ZTB_SX_EFFICIENCY.WORK_SHIFT
AND ZTB_SX_RESULT.CTR_CD = ZTB_SX_EFFICIENCY.CTR_CD
)
LEFT JOIN ZTB_QLSXPLAN ON (
ZTB_SX_RESULT.PLAN_ID = ZTB_QLSXPLAN.PLAN_ID
AND ZTB_SX_RESULT.CTR_CD = ZTB_QLSXPLAN.CTR_CD
) 
LEFT JOIN M100 ON (
M100.G_CODE = ZTB_QLSXPLAN.G_CODE
AND ZTB_SX_RESULT.CTR_CD = M100.CTR_CD
) 
LEFT JOIN P400 ON (ZTB_QLSXPLAN.PROD_REQUEST_NO = P400.PROD_REQUEST_NO
AND ZTB_SX_RESULT.CTR_CD = P400.CTR_CD)
WHERE P400.CODE_55 <> '04' AND ZTB_SX_RESULT.MASS_END_TIME is not null  AND ZTB_SX_RESULT.MASS_START_TIME is not null  AND ZTB_SX_RESULT.SETTING_START_TIME is not null
AND ZTB_SX_RESULT.CTR_CD='${DATA.CTR_CD}'
)
SELECT 
YEAR(AA.SX_DATE) AS SX_YEAR,
449280 AS ALVB_TIME,
DATEPART(WEEK, AA.SX_DATE) AS SX_WEEK,
CONCAT(YEAR(AA.SX_DATE),'_',DATEPART(WEEK, AA.SX_DATE)) AS SX_YW,
SUM(AA.TOTAL_TIME) AS TOTAL_TIME, 
CASE WHEN SUM(AA.RUN_TIME_SX) - SUM(AA.TOTAL_LOSS_TIME) > =0 THEN SUM(AA.RUN_TIME_SX) - SUM(AA.TOTAL_LOSS_TIME) ELSE 0  END AS PURE_RUN_TIME,
SUM(AA.RUN_TIME_SX) AS RUN_TIME_SX, 
SUM(AA.SETTING_TIME) AS SETTING_TIME, 
SUM(AA.TOTAL_LOSS_TIME) AS LOSS_TIME, 
CAST(SUM(AA.RUN_TIME_SX) as float)/ CAST(SUM(AA.TOTAL_TIME) as float) AS HIEU_SUAT_TIME, 
CAST(SUM(AA.SETTING_TIME) as float)/ CAST(SUM(AA.TOTAL_TIME) as float) AS SETTING_TIME_RATE, 
CAST(SUM(AA.TOTAL_LOSS_TIME) as float)/ CAST(SUM(AA.TOTAL_TIME) as float) AS LOSS_TIME_RATE,
AA.CTR_CD
FROM AA
WHERE AA.SX_DATE is not null AND AA.SX_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE}'
AND AA.CTR_CD='${DATA.CTR_CD}'
GROUP BY 
YEAR(AA.SX_DATE), DATEPART(WEEK, AA.SX_DATE), AA.CTR_CD
ORDER BY 
YEAR(AA.SX_DATE) DESC, DATEPART(WEEK, AA.SX_DATE) DESC
    `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.monthlyEQEffTrending = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
   WITH AA AS
(
SELECT
ZTB_SX_RESULT.SX_DATE,   
DATEDIFF(minute, SETTING_START_TIME, MASS_END_TIME) as TOTAL_TIME,(DATEDIFF(minute, MASS_START_TIME, MASS_END_TIME)) AS RUN_TIME_SX, 
DATEDIFF(minute, SETTING_START_TIME, MASS_START_TIME) as SETTING_TIME,(isnull(LAY_DO, 0) + isnull(MAY_HONG, 0) + isnull(DAO_NG, 0) + isnull(CHO_BTP, 0) + isnull(CHO_LIEU, 0) + isnull(HET_LIEU, 0) + isnull(LIEU_NG, 0) + isnull(CAN_HANG, 0) + isnull(HOP_FL, 0) + isnull(CHO_QC, 0) + isnull(CHOT_BAOCAO, 0) + isnull(CHUYEN_CODE, 0) + isnull(KHAC, 0)) AS TOTAL_LOSS_TIME,
ZTB_SX_RESULT.CTR_CD     
FROM 
ZTB_SX_RESULT 
LEFT JOIN ZTB_SX_EFFICIENCY ON (
ZTB_SX_RESULT.PLAN_ID = ZTB_SX_EFFICIENCY.PLAN_ID 
AND ZTB_SX_RESULT.WORK_SHIFT = ZTB_SX_EFFICIENCY.WORK_SHIFT
AND ZTB_SX_RESULT.CTR_CD = ZTB_SX_EFFICIENCY.CTR_CD
)
LEFT JOIN ZTB_QLSXPLAN ON (
ZTB_SX_RESULT.PLAN_ID = ZTB_QLSXPLAN.PLAN_ID
AND ZTB_SX_RESULT.CTR_CD = ZTB_QLSXPLAN.CTR_CD
) 
LEFT JOIN M100 ON (
M100.G_CODE = ZTB_QLSXPLAN.G_CODE
AND ZTB_SX_RESULT.CTR_CD = M100.CTR_CD
) 
LEFT JOIN P400 ON (ZTB_QLSXPLAN.PROD_REQUEST_NO = P400.PROD_REQUEST_NO
AND ZTB_SX_RESULT.CTR_CD = P400.CTR_CD)
WHERE P400.CODE_55 <> '04' AND ZTB_SX_RESULT.MASS_END_TIME is not null  AND ZTB_SX_RESULT.MASS_START_TIME is not null  AND ZTB_SX_RESULT.SETTING_START_TIME is not null
AND ZTB_SX_RESULT.CTR_CD='${DATA.CTR_CD}'
)
SELECT 
YEAR(AA.SX_DATE) AS SX_YEAR,
MONTH(AA.SX_DATE) AS SX_MONTH,
CONCAT(YEAR(AA.SX_DATE),'_',MONTH(AA.SX_DATE)) AS SX_YM,
1797120 AS ALVB_TIME,
SUM(AA.TOTAL_TIME) AS TOTAL_TIME, 
CASE WHEN SUM(AA.RUN_TIME_SX) - SUM(AA.TOTAL_LOSS_TIME) > =0 THEN SUM(AA.RUN_TIME_SX) - SUM(AA.TOTAL_LOSS_TIME) ELSE 0  END AS PURE_RUN_TIME,
SUM(AA.RUN_TIME_SX) AS RUN_TIME_SX, 
SUM(AA.SETTING_TIME) AS SETTING_TIME, 
SUM(AA.TOTAL_LOSS_TIME) AS LOSS_TIME, 
CAST(SUM(AA.RUN_TIME_SX) as float)/ CAST(SUM(AA.TOTAL_TIME) as float) AS HIEU_SUAT_TIME, 
CAST(SUM(AA.SETTING_TIME) as float)/ CAST(SUM(AA.TOTAL_TIME) as float) AS SETTING_TIME_RATE, 
CAST(SUM(AA.TOTAL_LOSS_TIME) as float)/ CAST(SUM(AA.TOTAL_TIME) as float) AS LOSS_TIME_RATE,
AA.CTR_CD
FROM AA
WHERE AA.SX_DATE is not null AND AA.SX_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE}'
AND AA.CTR_CD='${DATA.CTR_CD}'
GROUP BY 
YEAR(AA.SX_DATE),MONTH(AA.SX_DATE),AA.CTR_CD
ORDER BY 
YEAR(AA.SX_DATE) DESC, MONTH(AA.SX_DATE) DESC
    `;
  ////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.yearlyEQEffTrending = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
   WITH AA AS
(
SELECT
ZTB_SX_RESULT.SX_DATE,   
DATEDIFF(minute, SETTING_START_TIME, MASS_END_TIME) as TOTAL_TIME,(DATEDIFF(minute, MASS_START_TIME, MASS_END_TIME)) AS RUN_TIME_SX, 
DATEDIFF(minute, SETTING_START_TIME, MASS_START_TIME) as SETTING_TIME,(isnull(LAY_DO, 0) + isnull(MAY_HONG, 0) + isnull(DAO_NG, 0) + isnull(CHO_BTP, 0) + isnull(CHO_LIEU, 0) + isnull(HET_LIEU, 0) + isnull(LIEU_NG, 0) + isnull(CAN_HANG, 0) + isnull(HOP_FL, 0) + isnull(CHO_QC, 0) + isnull(CHOT_BAOCAO, 0) + isnull(CHUYEN_CODE, 0) + isnull(KHAC, 0)) AS TOTAL_LOSS_TIME,
ZTB_SX_RESULT.CTR_CD     
FROM 
ZTB_SX_RESULT 
LEFT JOIN ZTB_SX_EFFICIENCY ON (
ZTB_SX_RESULT.PLAN_ID = ZTB_SX_EFFICIENCY.PLAN_ID 
AND ZTB_SX_RESULT.WORK_SHIFT = ZTB_SX_EFFICIENCY.WORK_SHIFT
AND ZTB_SX_RESULT.CTR_CD = ZTB_SX_EFFICIENCY.CTR_CD
)
LEFT JOIN ZTB_QLSXPLAN ON (
ZTB_SX_RESULT.PLAN_ID = ZTB_QLSXPLAN.PLAN_ID
AND ZTB_SX_RESULT.CTR_CD = ZTB_QLSXPLAN.CTR_CD
) 
LEFT JOIN M100 ON (
M100.G_CODE = ZTB_QLSXPLAN.G_CODE
AND ZTB_SX_RESULT.CTR_CD = M100.CTR_CD
) 
LEFT JOIN P400 ON (ZTB_QLSXPLAN.PROD_REQUEST_NO = P400.PROD_REQUEST_NO
AND ZTB_SX_RESULT.CTR_CD = P400.CTR_CD)
WHERE P400.CODE_55 <> '04' AND ZTB_SX_RESULT.MASS_END_TIME is not null  AND ZTB_SX_RESULT.MASS_START_TIME is not null  AND ZTB_SX_RESULT.SETTING_START_TIME is not null
AND ZTB_SX_RESULT.CTR_CD='${DATA.CTR_CD}'
)
SELECT 
YEAR(AA.SX_DATE) AS SX_YEAR,
21565440 AS ALVB_TIME,
SUM(AA.TOTAL_TIME) AS TOTAL_TIME, 
CASE WHEN SUM(AA.RUN_TIME_SX) - SUM(AA.TOTAL_LOSS_TIME) > =0 THEN SUM(AA.RUN_TIME_SX) - SUM(AA.TOTAL_LOSS_TIME) ELSE 0  END AS PURE_RUN_TIME,
SUM(AA.RUN_TIME_SX) AS RUN_TIME_SX, 
SUM(AA.SETTING_TIME) AS SETTING_TIME, 
SUM(AA.TOTAL_LOSS_TIME) AS LOSS_TIME, 
CAST(SUM(AA.RUN_TIME_SX) as float)/ CAST(SUM(AA.TOTAL_TIME) as float) AS HIEU_SUAT_TIME, 
CAST(SUM(AA.SETTING_TIME) as float)/ CAST(SUM(AA.TOTAL_TIME) as float) AS SETTING_TIME_RATE, 
CAST(SUM(AA.TOTAL_LOSS_TIME) as float)/ CAST(SUM(AA.TOTAL_TIME) as float) AS LOSS_TIME_RATE,
AA.CTR_CD
FROM AA
WHERE AA.SX_DATE is not null AND AA.SX_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE}'
AND AA.CTR_CD='${DATA.CTR_CD}'
GROUP BY 
YEAR(AA.SX_DATE), AA.CTR_CD
ORDER BY 
YEAR(AA.SX_DATE) DESC
    `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.sxdailyachivementtrending = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
   SELECT  ZTB_SX_RESULT.SX_DATE, SUM(ZTB_SX_RESULT.SX_RESULT) AS SX_RESULT, SUM(ZTB_QLSXPLAN.PLAN_QTY) AS PLAN_QTY, ZTB_SX_RESULT.CTR_CD  
  FROM ZTB_SX_RESULT LEFT JOIN ZTB_QLSXPLAN ON (ZTB_SX_RESULT.PLAN_ID = ZTB_QLSXPLAN.PLAN_ID AND ZTB_SX_RESULT.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
  WHERE ZTB_SX_RESULT.SX_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE}'
    AND ZTB_SX_RESULT.CTR_CD = '${DATA.CTR_CD}'
  GROUP BY ZTB_SX_RESULT.SX_DATE, ZTB_SX_RESULT.CTR_CD
  ORDER BY SX_DATE ASC             
    `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.sxweeklyachivementtrending = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
   SELECT  YEAR(ZTB_SX_RESULT.SX_DATE) AS SX_YEAR, DATEPART(WEEK,ZTB_SX_RESULT.SX_DATE) AS SX_WEEK, CONCAT(YEAR(ZTB_SX_RESULT.SX_DATE),'_', DATEPART(WEEK,ZTB_SX_RESULT.SX_DATE)) AS SX_YW, SUM(ZTB_SX_RESULT.SX_RESULT) AS SX_RESULT, SUM(ZTB_QLSXPLAN.PLAN_QTY) AS PLAN_QTY, ZTB_SX_RESULT.CTR_CD  
FROM ZTB_SX_RESULT LEFT JOIN ZTB_QLSXPLAN ON (ZTB_SX_RESULT.PLAN_ID = ZTB_QLSXPLAN.PLAN_ID AND ZTB_SX_RESULT.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
WHERE ZTB_SX_RESULT.SX_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE}'
AND ZTB_SX_RESULT.CTR_CD = '${DATA.CTR_CD}'
GROUP BY YEAR(ZTB_SX_RESULT.SX_DATE), DATEPART(WEEK,ZTB_SX_RESULT.SX_DATE), ZTB_SX_RESULT.CTR_CD
ORDER BY YEAR(ZTB_SX_RESULT.SX_DATE) DESC, DATEPART(WEEK,ZTB_SX_RESULT.SX_DATE) DESC         
    `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.sxmonthlyachivementtrending = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
   SELECT  YEAR(ZTB_SX_RESULT.SX_DATE) AS SX_YEAR, MONTH(ZTB_SX_RESULT.SX_DATE) AS SX_MONTH, CONCAT(YEAR(ZTB_SX_RESULT.SX_DATE),'_', MONTH(ZTB_SX_RESULT.SX_DATE)) AS SX_YM, SUM(ZTB_SX_RESULT.SX_RESULT) AS SX_RESULT, SUM(ZTB_QLSXPLAN.PLAN_QTY) AS PLAN_QTY, ZTB_SX_RESULT.CTR_CD  
FROM ZTB_SX_RESULT LEFT JOIN ZTB_QLSXPLAN ON (ZTB_SX_RESULT.PLAN_ID = ZTB_QLSXPLAN.PLAN_ID AND ZTB_SX_RESULT.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
WHERE ZTB_SX_RESULT.SX_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE}'
AND ZTB_SX_RESULT.CTR_CD = '${DATA.CTR_CD}'
GROUP BY YEAR(ZTB_SX_RESULT.SX_DATE), MONTH(ZTB_SX_RESULT.SX_DATE), ZTB_SX_RESULT.CTR_CD
ORDER BY YEAR(ZTB_SX_RESULT.SX_DATE) DESC, MONTH(ZTB_SX_RESULT.SX_DATE) DESC      
    `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.sxyearlyachivementtrending = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
   SELECT  YEAR(ZTB_SX_RESULT.SX_DATE) AS SX_YEAR, SUM(CAST(ZTB_SX_RESULT.SX_RESULT AS float)) AS SX_RESULT, SUM(CAST(ZTB_QLSXPLAN.PLAN_QTY AS float)) AS PLAN_QTY, ZTB_SX_RESULT.CTR_CD  
FROM ZTB_SX_RESULT LEFT JOIN ZTB_QLSXPLAN ON (ZTB_SX_RESULT.PLAN_ID = ZTB_QLSXPLAN.PLAN_ID AND ZTB_SX_RESULT.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
WHERE ZTB_SX_RESULT.SX_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE}'
AND ZTB_SX_RESULT.CTR_CD = '${DATA.CTR_CD}'
GROUP BY YEAR(ZTB_SX_RESULT.SX_DATE), ZTB_SX_RESULT.CTR_CD
ORDER BY YEAR(ZTB_SX_RESULT.SX_DATE) DESC     
    `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.sxLossTimeByReason = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
    WITH LOSS_TIME_TB AS
    (
    SELECT SUM(isnull(LAY_DO, 0)) AS LAY_DO , SUM(isnull(MAY_HONG, 0)) AS MAY_HONG , SUM(isnull(DAO_NG, 0)) AS DAO_NG , SUM(isnull(CHO_BTP, 0)) AS CHO_BTP , SUM(isnull(CHO_LIEU, 0)) AS CHO_LIEU , SUM(isnull(HET_LIEU, 0)) AS HET_LIEU , SUM(isnull(LIEU_NG, 0)) AS LIEU_NG , SUM(isnull(CAN_HANG, 0)) AS CAN_HANG , SUM(isnull(HOP_FL, 0)) AS HOP_FL , SUM(isnull(CHO_QC, 0)) AS CHO_QC , SUM(isnull(CHOT_BAOCAO, 0)) AS CHOT_BAOCAO , SUM(isnull(CHUYEN_CODE, 0)) AS CHUYEN_CODE , SUM(isnull(KHAC, 0)) AS KHAC, SUM((isnull(LAY_DO, 0) + isnull(MAY_HONG, 0) + isnull(DAO_NG, 0) + isnull(CHO_BTP, 0) + isnull(CHO_LIEU, 0) + isnull(HET_LIEU, 0) + isnull(LIEU_NG, 0) + isnull(CAN_HANG, 0) + isnull(HOP_FL, 0) + isnull(CHO_QC, 0) + isnull(CHOT_BAOCAO, 0) + isnull(CHUYEN_CODE, 0) + isnull(KHAC, 0))) AS TOTAL_LOSS_TIME, ZTB_SX_EFFICIENCY.CTR_CD FROM ZTB_SX_EFFICIENCY
    LEFT JOIN ZTB_SX_RESULT ON (ZTB_SX_RESULT.PLAN_ID = ZTB_SX_EFFICIENCY.PLAN_ID AND ZTB_SX_RESULT.WORK_SHIFT = ZTB_SX_EFFICIENCY.WORK_SHIFT AND ZTB_SX_RESULT.CTR_CD = ZTB_SX_EFFICIENCY.CTR_CD)
    WHERE ZTB_SX_RESULT.SX_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE}'
    AND ZTB_SX_EFFICIENCY.CTR_CD='${DATA.CTR_CD}'
    GROUP BY ZTB_SX_EFFICIENCY.CTR_CD
    )
    SELECT unpvt.REASON, unpvt.LOSS_TIME, unpvt.TOTAL_LOSS_TIME, unpvt.LOSS_TIME*1.0/ unpvt.TOTAL_LOSS_TIME AS RATE, unpvt.CTR_CD FROM 
    (
    SELECT * FROM LOSS_TIME_TB
    ) AS s
    UNPIVOT
    (
    LOSS_TIME FOR [REASON] IN ([LAY_DO],[MAY_HONG],[DAO_NG],[CHO_LIEU],[HET_LIEU],[LIEU_NG],[HOP_FL],[CHO_QC],[CHOT_BAOCAO],[CHUYEN_CODE],[CAN_HANG],[CHO_BTP],[KHAC])
    ) as unpvt
    WHERE unpvt.CTR_CD='${DATA.CTR_CD}'
    ORDER BY unpvt.LOSS_TIME DESC
      `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.sxLossTimeByEmpl = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
    WITH LOSS_TIME_TB AS
      (
      SELECT M010.EMPL_NAME, SUM((isnull(LAY_DO, 0) + isnull(MAY_HONG, 0) + isnull(DAO_NG, 0) + isnull(CHO_BTP, 0) + isnull(CHO_LIEU, 0) + isnull(HET_LIEU, 0) + isnull(LIEU_NG, 0) + isnull(CAN_HANG, 0) + isnull(HOP_FL, 0) + isnull(CHO_QC, 0) + isnull(CHOT_BAOCAO, 0) + isnull(CHUYEN_CODE, 0) + isnull(KHAC, 0))) AS TOTAL_LOSS_TIME, ZTB_SX_EFFICIENCY.CTR_CD FROM ZTB_SX_EFFICIENCY
      LEFT JOIN ZTB_SX_RESULT ON (ZTB_SX_RESULT.PLAN_ID= ZTB_SX_EFFICIENCY.PLAN_ID AND ZTB_SX_RESULT.WORK_SHIFT= ZTB_SX_EFFICIENCY.WORK_SHIFT AND ZTB_SX_RESULT.CTR_CD = ZTB_SX_EFFICIENCY.CTR_CD)
      LEFT JOIN M010 ON M010.EMPL_NO = ZTB_SX_RESULT.INS_EMPL AND M010.CTR_CD = ZTB_SX_RESULT.CTR_CD
      WHERE ZTB_SX_RESULT.SX_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE}' AND ZTB_SX_RESULT.INS_EMPL is not null AND ZTB_SX_EFFICIENCY.CTR_CD='${DATA.CTR_CD}'
      GROUP BY M010.EMPL_NAME, ZTB_SX_EFFICIENCY.CTR_CD
      )
      SELECT * FROM LOSS_TIME_TB
      WHERE CTR_CD='${DATA.CTR_CD}'
      ORDER BY TOTAL_LOSS_TIME DESC
      `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.loadBaoCaoTheoRoll = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = ` WHERE P500.INS_DATE > '2023-12-01 00:00:00' AND P500.M_LOT_NO <> '' AND P500.INS_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE} 23:59:59' AND (P500.INPUT_QTY- isnull(P500.REMAIN_QTY,0)) <> 0`
  if (DATA.MACHINE !== 'ALL') {
    condition += ` AND SUBSTRING(P500.EQUIPMENT_CD,1,2)='${DATA.MACHINE}'`
  }
  if (DATA.FACTORY !== 'ALL')
    condition += ` AND ZTB_QLSXPLAN.PLAN_FACTORY='${DATA.FACTORY}'`
  let setpdQuery = `
  WITH P501_A AS
  (
  SELECT P501.M_LOT_NO, P501.PLAN_ID, P501.CTR_CD, SUM(P501.TEMP_QTY) AS TEMP_QTY FROM P501 WHERE P501.INS_DATE > '2023-11-30 20:00:00' AND TEMP_QTY is not null AND P501.CTR_CD='${DATA.CTR_CD}'  AND (P501.REMARK <> 'HUY TEM' OR P501.REMARK is null)  GROUP BY P501.M_LOT_NO, P501.PLAN_ID, P501.CTR_CD
  ),
  INSP_INPUT_TB AS 
  (
  SELECT PLAN_ID, M_LOT_NO, CTR_CD, CAST(SUM(INPUT_QTY_EA) as bigint) AS INSP_INPUT FROM ZTBINSPECTINPUTTB
  WHERE M_LOT_NO is not null AND M_LOT_NO <> '' AND CTR_CD='${DATA.CTR_CD}'
  GROUP BY PLAN_ID, M_LOT_NO, CTR_CD
  ),
  INSP_NK_TB AS
  (
    SELECT PLAN_ID, M_LOT_NO, CTR_CD, SUM(INSPECT_TOTAL_QTY) AS INSPECT_TOTAL_QTY, SUM(INSPECT_OK_QTY) AS INSPECT_OK_QTY, MAX(INSPECT_FINISH_TIME) AS INSPECT_COMPLETED_DATE,  SUM(ERR4+ ERR5+ ERR6+ ERR7 +ERR8 +ERR9 +ERR10+ERR11) AS MATERIAL_NG, SUM(ERR12+ERR13+ERR14+ERR15+ERR16+ERR17+ERR18+ERR19+ERR20+ERR21+ERR22+ERR23+ERR24+ERR25+ERR26+ERR27+ERR28+ERR29+ERR30+ERR31) AS PROCESS_NG, SUM(ERR4+ERR5+ERR6+ERR7+ERR8+ERR9+ERR10+ERR11+ERR12+ERR13+ERR14+ERR15+ERR16+ERR17+ERR18+ERR19+ERR20+ERR21+ERR22+ERR23+ERR24+ERR25+ERR26+ERR27+ERR28+ERR29+ERR30+ERR31) AS TOTAL_NG FROM ZTBINSPECTNGTB  WHERE M_LOT_NO is not null AND PLAN_ID is not null AND PLAN_ID <> '' AND M_LOT_NO <>'' AND CTR_CD='${DATA.CTR_CD}' GROUP BY PLAN_ID, M_LOT_NO, CTR_CD
  ),
  PROCESS_TB AS
  (
  SELECT G_CODE, CTR_CD,
  CASE WHEN EQ4 <> 'NA' AND EQ4 <> 'NO' AND EQ4 is not null AND EQ4 <> '' THEN 4 
  WHEN EQ3 <> 'NA' AND EQ3 <> 'NO' AND EQ3 is not null AND EQ3 <> ''  THEN 3
  WHEN EQ2 <> 'NA' AND EQ2 <> 'NO' AND EQ2 is not null AND EQ2 <> ''  THEN 2 
  ELSE 1 END AS MAX_PROCESS_NUMBER
  FROM M100 WHERE CTR_CD='${DATA.CTR_CD}'
  ),
  OUTKHO AS (
  SELECT PLAN_ID, M_LOT_NO, CTR_CD, SUM(OUT_CFM_QTY) AS OUT_CFM_QTY  FROM O302 WHERE PLAN_ID is not null AND CTR_CD='${DATA.CTR_CD}' GROUP BY PLAN_ID, M_LOT_NO, CTR_CD
  )
  SELECT  CASE WHEN P400.CODE_55 ='04' THEN 'SAMPLE' ELSE 'MASS' END AS PHANLOAI,
  CAST(P500.INS_DATE as date) AS INPUT_DATE, ZTB_QLSXPLAN.IS_SETTING, P500.EQUIPMENT_CD,  P500.PROD_REQUEST_NO, ZTB_QLSXPLAN.PLAN_ID, ZTB_QLSXPLAN.PLAN_QTY, ZTB_SX_RESULT.SX_RESULT,
  CASE WHEN ZTB_QLSXPLAN.PLAN_QTY = 0 THEN 0 ELSE ZTB_SX_RESULT.SX_RESULT*1.0/ZTB_QLSXPLAN.PLAN_QTY END AS ACHIVEMENT_RATE,
  M100.PROD_MODEL, M100.G_NAME_KD, M090.M_NAME, M090.WIDTH_CD, isnull(OUTKHO.OUT_CFM_QTY,0) AS WH_OUT, P500.M_LOT_NO, P500.INPUT_QTY, isnull(P500.REMAIN_QTY,0) AS REMAIN_QTY,
  (P500.INPUT_QTY- isnull(P500.REMAIN_QTY,0)) AS USED_QTY,   
  (P500.INPUT_QTY- isnull(P500.REMAIN_QTY,0))*1000.0/ZTB_SX_RESULT.PD * ZTB_SX_RESULT.CAVITY AS USED_EA,  
  ZTB_SX_RESULT.RPM, 
  P500.SETTING_MET,
  P500.SETTING_MET*1000.0/ZTB_SX_RESULT.PD * ZTB_SX_RESULT.CAVITY AS SETTING_EA,
  P500.PR_NG, 
  P500.PR_NG*1000.0/ZTB_SX_RESULT.PD * ZTB_SX_RESULT.CAVITY AS SX_NG_EA, 
  (P500.INPUT_QTY - isnull(P500.REMAIN_QTY,0) -isnull(P500.SETTING_MET,0)- isnull(P500.PR_NG,0)) AS OK_MET_AUTO,  
  (isnull(P501_A.TEMP_QTY,0) * ZTB_SX_RESULT.PD /ZTB_SX_RESULT.CAVITY/1000) AS OK_MET_TT,
  isnull(P500.SETTING_MET,0)*1.0/ (P500.INPUT_QTY - isnull(P500.REMAIN_QTY,0)) AS LOSS_ST,  
  isnull(P500.PR_NG,0)*1.0/ (P500.INPUT_QTY - isnull(P500.REMAIN_QTY,0)) AS LOSS_SX, 
  (isnull(P500.PR_NG,0) +isnull(P500.SETTING_MET,0) )*1.0/ (P500.INPUT_QTY - isnull(P500.REMAIN_QTY,0)) AS LOSS_TT,
  1-isnull(INSP_NK_TB.INSPECT_OK_QTY,0)*1.0 * ZTB_SX_RESULT.PD/ZTB_SX_RESULT.CAVITY/(P500.INPUT_QTY - isnull(P500.REMAIN_QTY,0))/1000 AS LOSS_TT_KT,
  isnull(P501_A.TEMP_QTY,0) AS OK_EA,
  CASE WHEN PROCESS_TB.MAX_PROCESS_NUMBER = P500.PR_NB THEN isnull(P501_A.TEMP_QTY,0) ELSE 0 END AS OUTPUT_EA ,
  isnull(INSP_INPUT_TB.INSP_INPUT,0) AS INSPECT_INPUT,
  isnull(INSP_NK_TB.INSPECT_TOTAL_QTY,0) AS INSPECT_TT_QTY,
  isnull(INSP_NK_TB.INSPECT_OK_QTY,0) AS INSPECT_OK_QTY,
  isnull(INSP_NK_TB.MATERIAL_NG,0) AS MATERIAL_NG,
  isnull(INSP_NK_TB.PROCESS_NG,0) AS PROCESS_NG,
  isnull(INSP_NK_TB.TOTAL_NG,0) AS TOTAL_NG,
  isnull(INSP_NK_TB.INSPECT_OK_QTY,0)*1.0 * ZTB_SX_RESULT.PD /ZTB_SX_RESULT.CAVITY* M090.WIDTH_CD*1.0/1000000  AS INSPECT_OK_SQM,
  P500.REMARK, ZTB_SX_RESULT.PD, ZTB_SX_RESULT.CAVITY, ZTB_QLSXPLAN.STEP, ZTB_QLSXPLAN.PROCESS_NUMBER AS PR_NB, PROCESS_TB.MAX_PROCESS_NUMBER, CASE WHEN PROCESS_TB.MAX_PROCESS_NUMBER = P500.PR_NB THEN 1 ELSE 0 END AS LAST_PROCESS,
  (P500.INPUT_QTY- isnull(P500.REMAIN_QTY,0)) * M090.WIDTH_CD*1.0/1000 AS USED_SQM, 
  (isnull(P500.PR_NG,0) +isnull(P500.SETTING_MET,0)) * M090.WIDTH_CD*1.0/1000 AS LOSS_SQM ,
  ((P500.INPUT_QTY - isnull(P500.REMAIN_QTY,0))- (isnull(INSP_NK_TB.INSPECT_OK_QTY,0)*1.0 * ZTB_SX_RESULT.PD /ZTB_SX_RESULT.CAVITY/1000)) *  M090.WIDTH_CD*1.0/1000 AS TT_LOSS_SQM,
  CASE WHEN P500.PR_NB=1 THEN (P500.INPUT_QTY- isnull(P500.REMAIN_QTY,0)) ELSE 0 END AS PURE_INPUT,
CASE WHEN PROCESS_TB.MAX_PROCESS_NUMBER = P500.PR_NB THEN (isnull(INSP_NK_TB.INSPECT_OK_QTY,0)*1.0 * ZTB_SX_RESULT.PD /ZTB_SX_RESULT.CAVITY/1000) ELSE 0 END AS PURE_OUTPUT, 
INSP_NK_TB.INSPECT_COMPLETED_DATE
  FROM P500
  LEFT JOIN ZTB_SX_RESULT ON (P500.PLAN_ID = ZTB_SX_RESULT.PLAN_ID AND P500.CTR_CD = ZTB_SX_RESULT.CTR_CD)
  LEFT JOIN ZTB_QLSXPLAN ON (ZTB_QLSXPLAN.PLAN_ID = P500.PLAN_ID AND ZTB_QLSXPLAN.CTR_CD = P500.CTR_CD)
  LEFT JOIN P501_A ON (P501_A.PLAN_ID = P500.PLAN_ID AND P501_A.M_LOT_NO = P500.M_LOT_NO AND P501_A.CTR_CD = P500.CTR_CD)
  LEFT JOIN INSP_INPUT_TB ON  (INSP_INPUT_TB.PLAN_ID = P500.PLAN_ID AND INSP_INPUT_TB.M_LOT_NO = P500.M_LOT_NO AND INSP_INPUT_TB.CTR_CD = P500.CTR_CD)
  LEFT JOIN INSP_NK_TB ON (INSP_NK_TB.PLAN_ID = P500.PLAN_ID AND INSP_NK_TB.M_LOT_NO = P500.M_LOT_NO AND INSP_NK_TB.CTR_CD = P500.CTR_CD)
  LEFT JOIN M100 ON (P500.G_CODE = M100.G_CODE AND P500.CTR_CD = M100.CTR_CD)
  LEFT JOIN PROCESS_TB ON (PROCESS_TB.G_CODE = P500.G_CODE AND PROCESS_TB.CTR_CD = P500.CTR_CD)
  LEFT JOIN M090 ON (M090.M_CODE = P500.M_CODE AND M090.CTR_CD = P500.CTR_CD)
  LEFT JOIN OUTKHO ON (OUTKHO.PLAN_ID = P500.PLAN_ID  AND OUTKHO.M_LOT_NO = P500.M_LOT_NO AND OUTKHO.CTR_CD = P500.CTR_CD)
  LEFT JOIN P400 ON (P400.PROD_REQUEST_NO = P500.PROD_REQUEST_NO AND P400.CTR_CD = P500.CTR_CD)
  ${condition}
  AND P500.CTR_CD='${DATA.CTR_CD}'
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.trasxlosstrendingdata = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = `WHERE  P500.INS_DATE > '2023-12-01 00:00:00' AND P500.M_LOT_NO <> '' AND  P500.INS_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE} 23:59:59'`;
  if (DATA.FACTORY !== 'ALL') condition += ` AND P500.FACTORY LIKE '%${DATA.FACTORY}%'`;
  if (DATA.MACHINE !== 'ALL') condition += ` AND SUBSTRING(P500.EQUIPMENT_CD,1,2) = '${DATA.MACHINE}'`;
  let setpdQuery = `
    WITH P501_A AS
    (
    SELECT P501.CTR_CD, P501.M_LOT_NO, P501.PLAN_ID, SUM(P501.TEMP_QTY) AS TEMP_QTY FROM P501 WHERE P501.INS_DATE > '2023-12-01' AND TEMP_QTY is not null AND P501.CTR_CD='${DATA.CTR_CD}' GROUP BY P501.CTR_CD, P501.M_LOT_NO, P501.PLAN_ID
    ),
    INSP_INPUT_TB AS 
    (
    SELECT CTR_CD, PLAN_ID, M_LOT_NO, CAST(SUM(INPUT_QTY_EA) as bigint) AS INSP_INPUT FROM ZTBINSPECTINPUTTB
    WHERE M_LOT_NO is not null AND M_LOT_NO <> '' AND CTR_CD='${DATA.CTR_CD}'
    GROUP BY CTR_CD, PLAN_ID, M_LOT_NO
    ),
    INSP_NK_TB AS
    (
    SELECT CTR_CD, PLAN_ID, M_LOT_NO, SUM(INSPECT_TOTAL_QTY) AS INSPECT_TOTAL_QTY FROM ZTBINSPECTNGTB WHERE M_LOT_NO is not null AND PLAN_ID is not null AND PLAN_ID <> '' AND M_LOT_NO <>'' AND CTR_CD='${DATA.CTR_CD}' GROUP BY CTR_CD, PLAN_ID, M_LOT_NO
    ),
    PROCESS_TB AS
    (
    SELECT CTR_CD, G_CODE,
    CASE WHEN EQ4 <> 'NA' AND EQ4 <> 'NO' AND EQ4 is not null AND EQ4 <> '' THEN 4 
    WHEN EQ3 <> 'NA' AND EQ3 <> 'NO' AND EQ3 is not null AND EQ3 <> ''  THEN 3
    WHEN EQ2 <> 'NA' AND EQ2 <> 'NO' AND EQ2 is not null AND EQ2 <> ''  THEN 2 
    ELSE 1 END AS MAX_PROCESS_NUMBER
    FROM M100 WHERE CTR_CD='${DATA.CTR_CD}'
    ),
    DATA_ROLL AS
    (
    SELECT  CAST(P500.INS_DATE as date) AS INPUT_DATE, ZTB_QLSXPLAN.IS_SETTING, P500.EQUIPMENT_CD,  P500.PROD_REQUEST_NO, ZTB_QLSXPLAN.PLAN_ID,  ZTB_QLSXPLAN.PLAN_QTY,  M100.PROD_MODEL, M100.G_NAME_KD, M090.M_NAME, M090.WIDTH_CD, P500.M_LOT_NO, P500.INPUT_QTY, isnull(P500.REMAIN_QTY,0) AS REMAIN_QTY,(P500.INPUT_QTY- isnull(P500.REMAIN_QTY,0)) AS USED_QTY,   ZTB_SX_RESULT.RPM, P500.SETTING_MET, P500.PR_NG, (P500.INPUT_QTY - isnull(P500.REMAIN_QTY,0) -isnull(P500.SETTING_MET,0)- isnull(P500.PR_NG,0)) AS OK_MET_AUTO,  (isnull(P501_A.TEMP_QTY,0) * ZTB_SX_RESULT.PD /ZTB_SX_RESULT.CAVITY/1000) AS OK_MET_TT ,isnull(P500.SETTING_MET,0)*1.0/ (P500.INPUT_QTY - isnull(P500.REMAIN_QTY,0)) *100 AS LOSS_ST,  isnull(P500.PR_NG,0)*1.0/ (P500.INPUT_QTY - isnull(P500.REMAIN_QTY,0)) *100 AS LOSS_SX,
    isnull(P501_A.TEMP_QTY,0) AS OK_EA, 
    CASE WHEN PROCESS_TB.MAX_PROCESS_NUMBER = P500.PR_NB THEN isnull(P501_A.TEMP_QTY,0) ELSE 0 END AS OUTPUT_EA ,
    isnull(INSP_INPUT_TB.INSP_INPUT,0) AS INSPECT_INPUT,
    isnull(INSP_NK_TB.INSPECT_TOTAL_QTY,0) AS INSPECT_TT_QTY,
    P500.REMARK, ZTB_SX_RESULT.PD, ZTB_SX_RESULT.CAVITY, ZTB_QLSXPLAN.STEP, P500.PR_NB, PROCESS_TB.MAX_PROCESS_NUMBER, CASE WHEN PROCESS_TB.MAX_PROCESS_NUMBER = P500.PR_NB THEN 1 ELSE 0 END AS LAST_PROCESS  FROM P500
    LEFT JOIN ZTB_SX_RESULT ON (P500.PLAN_ID = ZTB_SX_RESULT.PLAN_ID AND P500.CTR_CD = ZTB_SX_RESULT.CTR_CD)
    LEFT JOIN ZTB_QLSXPLAN ON (ZTB_QLSXPLAN.PLAN_ID = P500.PLAN_ID AND ZTB_QLSXPLAN.CTR_CD = P500.CTR_CD)
    LEFT JOIN P501_A ON (P501_A.PLAN_ID = P500.PLAN_ID AND P501_A.M_LOT_NO = P500.M_LOT_NO AND P501_A.CTR_CD = P500.CTR_CD)
    LEFT JOIN INSP_INPUT_TB ON  (INSP_INPUT_TB.PLAN_ID = P500.PLAN_ID AND INSP_INPUT_TB.M_LOT_NO = P500.M_LOT_NO AND INSP_INPUT_TB.CTR_CD = P500.CTR_CD)
    LEFT JOIN INSP_NK_TB ON (INSP_NK_TB.PLAN_ID = P500.PLAN_ID AND INSP_NK_TB.M_LOT_NO = P500.M_LOT_NO AND INSP_NK_TB.CTR_CD = P500.CTR_CD)
    LEFT JOIN M100 ON (P500.G_CODE = M100.G_CODE AND P500.CTR_CD = M100.CTR_CD)
    LEFT JOIN PROCESS_TB ON (PROCESS_TB.G_CODE = P500.G_CODE AND PROCESS_TB.CTR_CD = P500.CTR_CD)
    LEFT JOIN M090 ON (M090.M_CODE = P500.M_CODE AND M090.CTR_CD = P500.CTR_CD)
    ${condition}            
    AND P500.CTR_CD='${DATA.CTR_CD}'
    )
    SELECT DATA_ROLL.INPUT_DATE,SUM(DATA_ROLL.USED_QTY) AS USED_QTY, SUM(DATA_ROLL.SETTING_MET) AS SETTING_MET, SUM(DATA_ROLL.PR_NG) AS PR_NG, 1.0*SUM(DATA_ROLL.SETTING_MET)/SUM(DATA_ROLL.USED_QTY)*100 AS LOSS_ST, 1.0*SUM(DATA_ROLL.PR_NG)/SUM(DATA_ROLL.USED_QTY)*100 AS LOSS_SX, SUM(DATA_ROLL.OUTPUT_EA) AS OUTPUT_EA, SUM(DATA_ROLL.INSPECT_INPUT) AS INSPECT_INPUT, SUM(DATA_ROLL.INSPECT_TT_QTY) AS INSPECT_TT_QTY,  
    CASE WHEN SUM(DATA_ROLL.OUTPUT_EA) <>0 THEN 
    100-1.0*SUM(DATA_ROLL.INSPECT_INPUT)/SUM(DATA_ROLL.OUTPUT_EA)*100  ELSE 0 END AS RATE1, 
    CASE WHEN SUM(DATA_ROLL.OUTPUT_EA) <>0 THEN 
    100-1.0*SUM(DATA_ROLL.INSPECT_TT_QTY)/SUM(DATA_ROLL.OUTPUT_EA)*100 ELSE 0 END AS RATE2 
    FROM DATA_ROLL GROUP BY DATA_ROLL.INPUT_DATE
    ORDER BY DATA_ROLL.INPUT_DATE ASC
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.dailysxlosstrend = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = ` WHERE P500.INS_DATE > '2023-12-01 00:00:00' AND P500.M_LOT_NO <> '' AND P500.INS_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE} 23:59:59' AND (P500.INPUT_QTY- isnull(P500.REMAIN_QTY,0)) <> 0`
  if (DATA.MACHINE !== 'ALL') {
    condition += ` AND SUBSTRING(P500.EQUIPMENT_CD,1,2)='${DATA.MACHINE}'`
  }
  if (DATA.FACTORY !== 'ALL')
    condition += ` AND ZTB_QLSXPLAN.PLAN_FACTORY='${DATA.FACTORY}'`
  let setpdQuery = `
  WITH P501_A AS
  (
  SELECT P501.M_LOT_NO, P501.PLAN_ID, SUM(P501.TEMP_QTY) AS TEMP_QTY, P501.CTR_CD FROM P501 WHERE P501.INS_DATE > '2023-11-30 20:00:00' AND TEMP_QTY is not null AND P501.CTR_CD='${DATA.CTR_CD}' GROUP BY P501.M_LOT_NO, P501.PLAN_ID, P501.CTR_CD
  ),          
  INSP_NK_TB AS
  (
  SELECT PLAN_ID, M_LOT_NO, SUM(INSPECT_TOTAL_QTY) AS INSPECT_TOTAL_QTY, SUM(INSPECT_OK_QTY) AS INSPECT_OK_QTY, CTR_CD FROM ZTBINSPECTNGTB WHERE M_LOT_NO is not null AND PLAN_ID is not null AND PLAN_ID <> '' AND M_LOT_NO <>'' AND CTR_CD='${DATA.CTR_CD}' GROUP BY PLAN_ID, M_LOT_NO, CTR_CD
  ),
  PROCESS_TB AS
  (
  SELECT G_CODE,
  CASE WHEN EQ4 <> 'NA' AND EQ4 <> 'NO' AND EQ4 is not null AND EQ4 <> '' THEN 4 
  WHEN EQ3 <> 'NA' AND EQ3 <> 'NO' AND EQ3 is not null AND EQ3 <> ''  THEN 3
  WHEN EQ2 <> 'NA' AND EQ2 <> 'NO' AND EQ2 is not null AND EQ2 <> ''  THEN 2 
  ELSE 1 END AS MAX_PROCESS_NUMBER,
  CTR_CD
  FROM M100
  WHERE CTR_CD='${DATA.CTR_CD}'
  ),
  ROLL_TB AS
  (
  SELECT CAST(P500.INS_DATE as date) AS INPUT_DATE, CASE WHEN P500.PR_NB=1 THEN (P500.INPUT_QTY- isnull(P500.REMAIN_QTY,0)) ELSE 0 END AS PURE_INPUT, CASE WHEN PROCESS_TB.MAX_PROCESS_NUMBER = P500.PR_NB THEN (isnull(INSP_NK_TB.INSPECT_OK_QTY,0)*1.0 * M100.PD /(M100.G_C * M100.G_C_R)/1000) ELSE 0 END AS PURE_OUTPUT
  FROM P500
  LEFT JOIN ZTB_SX_RESULT ON (P500.PLAN_ID = ZTB_SX_RESULT.PLAN_ID AND P500.CTR_CD = ZTB_SX_RESULT.CTR_CD) 
  LEFT JOIN P501_A ON (P501_A.PLAN_ID = P500.PLAN_ID AND P501_A.M_LOT_NO = P500.M_LOT_NO AND P501_A.CTR_CD = P500.CTR_CD)  
  LEFT JOIN INSP_NK_TB ON (INSP_NK_TB.PLAN_ID = P500.PLAN_ID AND INSP_NK_TB.M_LOT_NO = P500.M_LOT_NO AND INSP_NK_TB.CTR_CD = P500.CTR_CD)
  LEFT JOIN M100 ON (P500.G_CODE = M100.G_CODE AND P500.CTR_CD = M100.CTR_CD)
  LEFT JOIN PROCESS_TB ON (PROCESS_TB.G_CODE = P500.G_CODE AND PROCESS_TB.CTR_CD = P500.CTR_CD)        
  ${condition} AND P500.CTR_CD='${DATA.CTR_CD}'
  )
  SELECT INPUT_DATE, SUM(PURE_INPUT) AS PURE_INPUT, SUM(PURE_OUTPUT) AS PURE_OUTPUT FROM ROLL_TB GROUP BY INPUT_DATE
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.weeklysxlosstrend = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = ` WHERE P500.INS_DATE > '2023-12-01 00:00:00' AND P500.M_LOT_NO <> '' AND P500.INS_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE} 23:59:59' AND (P500.INPUT_QTY- isnull(P500.REMAIN_QTY,0)) <> 0`
  if (DATA.MACHINE !== 'ALL') {
    condition += ` AND SUBSTRING(P500.EQUIPMENT_CD,1,2)='${DATA.MACHINE}'`
  }
  if (DATA.FACTORY !== 'ALL')
    condition += ` AND ZTB_QLSXPLAN.PLAN_FACTORY='${DATA.FACTORY}'`
  let setpdQuery = `
  WITH P501_A AS
  (
  SELECT P501.M_LOT_NO, P501.PLAN_ID, SUM(P501.TEMP_QTY) AS TEMP_QTY, P501.CTR_CD FROM P501 WHERE P501.INS_DATE > '2023-11-30 20:00:00' AND TEMP_QTY is not null AND P501.CTR_CD='${DATA.CTR_CD}' GROUP BY P501.M_LOT_NO, P501.PLAN_ID, P501.CTR_CD
  ),          
  INSP_NK_TB AS
  (
  SELECT PLAN_ID, M_LOT_NO, SUM(INSPECT_TOTAL_QTY) AS INSPECT_TOTAL_QTY, SUM(INSPECT_OK_QTY) AS INSPECT_OK_QTY, CTR_CD FROM ZTBINSPECTNGTB WHERE M_LOT_NO is not null AND PLAN_ID is not null AND PLAN_ID <> '' AND M_LOT_NO <>'' AND CTR_CD='${DATA.CTR_CD}' GROUP BY PLAN_ID, M_LOT_NO, CTR_CD
  ),
  PROCESS_TB AS
  (
  SELECT G_CODE,
  CASE WHEN EQ4 <> 'NA' AND EQ4 <> 'NO' AND EQ4 is not null AND EQ4 <> '' THEN 4 
  WHEN EQ3 <> 'NA' AND EQ3 <> 'NO' AND EQ3 is not null AND EQ3 <> ''  THEN 3
  WHEN EQ2 <> 'NA' AND EQ2 <> 'NO' AND EQ2 is not null AND EQ2 <> ''  THEN 2 
  ELSE 1 END AS MAX_PROCESS_NUMBER,
  CTR_CD
  FROM M100
  WHERE CTR_CD='${DATA.CTR_CD}'
  ),
  ROLL_TB AS
  (
  SELECT CAST(P500.INS_DATE as date) AS INPUT_DATE, CASE WHEN P500.PR_NB=1 THEN (P500.INPUT_QTY- isnull(P500.REMAIN_QTY,0)) ELSE 0 END AS PURE_INPUT, CASE WHEN PROCESS_TB.MAX_PROCESS_NUMBER = P500.PR_NB THEN (isnull(INSP_NK_TB.INSPECT_OK_QTY,0)*1.0 * M100.PD /(M100.G_C * M100.G_C_R)/1000) ELSE 0 END AS PURE_OUTPUT
  FROM P500
  LEFT JOIN ZTB_SX_RESULT ON (P500.PLAN_ID = ZTB_SX_RESULT.PLAN_ID AND P500.CTR_CD = ZTB_SX_RESULT.CTR_CD) 
  LEFT JOIN P501_A ON (P501_A.PLAN_ID = P500.PLAN_ID AND P501_A.M_LOT_NO = P500.M_LOT_NO AND P501_A.CTR_CD = P500.CTR_CD)  
  LEFT JOIN INSP_NK_TB ON (INSP_NK_TB.PLAN_ID = P500.PLAN_ID AND INSP_NK_TB.M_LOT_NO = P500.M_LOT_NO AND INSP_NK_TB.CTR_CD = P500.CTR_CD)
  LEFT JOIN M100 ON (P500.G_CODE = M100.G_CODE AND P500.CTR_CD = M100.CTR_CD)
  LEFT JOIN PROCESS_TB ON (PROCESS_TB.G_CODE = P500.G_CODE AND PROCESS_TB.CTR_CD = P500.CTR_CD)        
  ${condition} AND P500.CTR_CD='${DATA.CTR_CD}'
  )
  SELECT YEAR(INPUT_DATE) AS INPUT_YEAR,DATEPART(WEEK,INPUT_DATE) AS INPUT_WEEK, CONCAT(YEAR(INPUT_DATE),'_',DATEPART(WEEK,INPUT_DATE)) AS INPUT_YW,  SUM(PURE_INPUT) AS PURE_INPUT, SUM(PURE_OUTPUT) AS PURE_OUTPUT FROM ROLL_TB 
  GROUP BY YEAR(INPUT_DATE),DATEPART(WEEK,INPUT_DATE),CONCAT(YEAR(INPUT_DATE),'_',DATEPART(WEEK,INPUT_DATE))
  ORDER BY YEAR(INPUT_DATE) DESC, DATEPART(WEEK,INPUT_DATE) DESC
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.monthlysxlosstrend = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = ` WHERE P500.INS_DATE > '2023-12-01 00:00:00' AND P500.M_LOT_NO <> '' AND P500.INS_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE} 23:59:59' AND (P500.INPUT_QTY- isnull(P500.REMAIN_QTY,0)) <> 0`
  if (DATA.MACHINE !== 'ALL') {
    condition += ` AND SUBSTRING(P500.EQUIPMENT_CD,1,2)='${DATA.MACHINE}'`
  }
  if (DATA.FACTORY !== 'ALL')
    condition += ` AND ZTB_QLSXPLAN.PLAN_FACTORY='${DATA.FACTORY}'`
  let setpdQuery = `
  WITH P501_A AS
  (
  SELECT P501.M_LOT_NO, P501.PLAN_ID, SUM(P501.TEMP_QTY) AS TEMP_QTY, P501.CTR_CD FROM P501 WHERE P501.INS_DATE > '2023-11-30 20:00:00' AND TEMP_QTY is not null AND P501.CTR_CD='${DATA.CTR_CD}' GROUP BY P501.M_LOT_NO, P501.PLAN_ID, P501.CTR_CD
  ),          
  INSP_NK_TB AS
  (
  SELECT PLAN_ID, M_LOT_NO, SUM(INSPECT_TOTAL_QTY) AS INSPECT_TOTAL_QTY, SUM(INSPECT_OK_QTY) AS INSPECT_OK_QTY, CTR_CD FROM ZTBINSPECTNGTB WHERE M_LOT_NO is not null AND PLAN_ID is not null AND PLAN_ID <> '' AND M_LOT_NO <>'' AND CTR_CD='${DATA.CTR_CD}' GROUP BY PLAN_ID, M_LOT_NO, CTR_CD
  ),
  PROCESS_TB AS
  (
  SELECT G_CODE,
  CASE WHEN EQ4 <> 'NA' AND EQ4 <> 'NO' AND EQ4 is not null AND EQ4 <> '' THEN 4 
  WHEN EQ3 <> 'NA' AND EQ3 <> 'NO' AND EQ3 is not null AND EQ3 <> ''  THEN 3
  WHEN EQ2 <> 'NA' AND EQ2 <> 'NO' AND EQ2 is not null AND EQ2 <> ''  THEN 2 
  ELSE 1 END AS MAX_PROCESS_NUMBER,
  CTR_CD
  FROM M100
  WHERE CTR_CD='${DATA.CTR_CD}'
  ),
  ROLL_TB AS
  (
  SELECT CAST(P500.INS_DATE as date) AS INPUT_DATE, CASE WHEN P500.PR_NB=1 THEN (P500.INPUT_QTY- isnull(P500.REMAIN_QTY,0)) ELSE 0 END AS PURE_INPUT, CASE WHEN PROCESS_TB.MAX_PROCESS_NUMBER = P500.PR_NB THEN (isnull(INSP_NK_TB.INSPECT_OK_QTY,0)*1.0 * M100.PD /(M100.G_C * M100.G_C_R)/1000) ELSE 0 END AS PURE_OUTPUT
  FROM P500
  LEFT JOIN ZTB_SX_RESULT ON (P500.PLAN_ID = ZTB_SX_RESULT.PLAN_ID AND P500.CTR_CD = ZTB_SX_RESULT.CTR_CD) 
  LEFT JOIN P501_A ON (P501_A.PLAN_ID = P500.PLAN_ID AND P501_A.M_LOT_NO = P500.M_LOT_NO AND P501_A.CTR_CD = P500.CTR_CD)  
  LEFT JOIN INSP_NK_TB ON (INSP_NK_TB.PLAN_ID = P500.PLAN_ID AND INSP_NK_TB.M_LOT_NO = P500.M_LOT_NO AND INSP_NK_TB.CTR_CD = P500.CTR_CD)
  LEFT JOIN M100 ON (P500.G_CODE = M100.G_CODE AND P500.CTR_CD = M100.CTR_CD)
  LEFT JOIN PROCESS_TB ON (PROCESS_TB.G_CODE = P500.G_CODE AND PROCESS_TB.CTR_CD = P500.CTR_CD)        
  ${condition} AND P500.CTR_CD='${DATA.CTR_CD}'
  )
  SELECT YEAR(INPUT_DATE) AS INPUT_YEAR,DATEPART(MONTH,INPUT_DATE) AS INPUT_WEEK, CONCAT(YEAR(INPUT_DATE),'_',DATEPART(MONTH,INPUT_DATE)) AS INPUT_YM,  SUM(PURE_INPUT) AS PURE_INPUT, SUM(PURE_OUTPUT) AS PURE_OUTPUT FROM ROLL_TB 
  GROUP BY YEAR(INPUT_DATE),DATEPART(MONTH,INPUT_DATE),CONCAT(YEAR(INPUT_DATE),'_',DATEPART(MONTH,INPUT_DATE))
  ORDER BY YEAR(INPUT_DATE) DESC, DATEPART(MONTH,INPUT_DATE) DESC
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.yearlysxlosstrend = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = ` WHERE P500.INS_DATE > '2023-12-01 00:00:00' AND P500.M_LOT_NO <> '' AND (P500.INPUT_QTY- isnull(P500.REMAIN_QTY,0)) <> 0`
  if (DATA.MACHINE !== 'ALL') {
    condition += ` AND SUBSTRING(P500.EQUIPMENT_CD,1,2)='${DATA.MACHINE}'`
  }
  if (DATA.FACTORY !== 'ALL')
    condition += ` AND ZTB_QLSXPLAN.PLAN_FACTORY='${DATA.FACTORY}'`
  let setpdQuery = `
  WITH P501_A AS
  (
  SELECT P501.M_LOT_NO, P501.PLAN_ID, SUM(P501.TEMP_QTY) AS TEMP_QTY, P501.CTR_CD FROM P501 WHERE P501.INS_DATE > '2023-11-30 20:00:00' AND TEMP_QTY is not null AND P501.CTR_CD='${DATA.CTR_CD}' GROUP BY P501.M_LOT_NO, P501.PLAN_ID, P501.CTR_CD
  ),          
  INSP_NK_TB AS
  (
  SELECT PLAN_ID, M_LOT_NO, SUM(INSPECT_TOTAL_QTY) AS INSPECT_TOTAL_QTY, SUM(INSPECT_OK_QTY) AS INSPECT_OK_QTY, CTR_CD FROM ZTBINSPECTNGTB WHERE M_LOT_NO is not null AND PLAN_ID is not null AND PLAN_ID <> '' AND M_LOT_NO <>'' AND CTR_CD='${DATA.CTR_CD}' GROUP BY PLAN_ID, M_LOT_NO, CTR_CD
  ),
  PROCESS_TB AS
  (
  SELECT G_CODE,
  CASE WHEN EQ4 <> 'NA' AND EQ4 <> 'NO' AND EQ4 is not null AND EQ4 <> '' THEN 4 
  WHEN EQ3 <> 'NA' AND EQ3 <> 'NO' AND EQ3 is not null AND EQ3 <> ''  THEN 3
  WHEN EQ2 <> 'NA' AND EQ2 <> 'NO' AND EQ2 is not null AND EQ2 <> ''  THEN 2 
  ELSE 1 END AS MAX_PROCESS_NUMBER,
  CTR_CD
  FROM M100
  WHERE CTR_CD='${DATA.CTR_CD}'
  ),
  ROLL_TB AS
  (
  SELECT CAST(P500.INS_DATE as date) AS INPUT_DATE, CASE WHEN P500.PR_NB=1 THEN (P500.INPUT_QTY- isnull(P500.REMAIN_QTY,0)) ELSE 0 END AS PURE_INPUT, CASE WHEN PROCESS_TB.MAX_PROCESS_NUMBER = P500.PR_NB THEN (isnull(INSP_NK_TB.INSPECT_OK_QTY,0)*1.0 * M100.PD /(M100.G_C * M100.G_C_R)/1000) ELSE 0 END AS PURE_OUTPUT
  FROM P500
  LEFT JOIN ZTB_SX_RESULT ON (P500.PLAN_ID = ZTB_SX_RESULT.PLAN_ID AND P500.CTR_CD = ZTB_SX_RESULT.CTR_CD) 
  LEFT JOIN P501_A ON (P501_A.PLAN_ID = P500.PLAN_ID AND P501_A.M_LOT_NO = P500.M_LOT_NO AND P501_A.CTR_CD = P500.CTR_CD)  
  LEFT JOIN INSP_NK_TB ON (INSP_NK_TB.PLAN_ID = P500.PLAN_ID AND INSP_NK_TB.M_LOT_NO = P500.M_LOT_NO AND INSP_NK_TB.CTR_CD = P500.CTR_CD)
  LEFT JOIN M100 ON (P500.G_CODE = M100.G_CODE AND P500.CTR_CD = M100.CTR_CD)
  LEFT JOIN PROCESS_TB ON (PROCESS_TB.G_CODE = P500.G_CODE AND PROCESS_TB.CTR_CD = P500.CTR_CD)
  ${condition} AND P500.CTR_CD='${DATA.CTR_CD}'
  )
  SELECT YEAR(INPUT_DATE) AS INPUT_YEAR, SUM(PURE_INPUT) AS PURE_INPUT, SUM(PURE_OUTPUT) AS PURE_OUTPUT FROM ROLL_TB 
  GROUP BY YEAR(INPUT_DATE)
  ORDER BY YEAR(INPUT_DATE) DESC
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.loadquanlydaofilm = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = `WHERE 1=1 `;
  if (DATA.ALLTIME !== true) {
    condition += ` AND ZTB_QL_KNIFE_FILM.INS_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE} 23:59:59'`
  }
  if (DATA.G_CODE !== '') {
    condition += ` AND M100.G_CODE ='${DATA.G_CODE}'`
  }
  if (DATA.G_NAME !== '') {
    condition += ` AND M100.G_NAME LIKE '%${DATA.G_NAME}%'`
  }
  if (DATA.FACTORY !== 'All') {
    condition += ` AND ZTB_QL_KNIFE_FILM.FACTORY_NAME = '${DATA.FACTORY}'`
  }
  if (DATA.KNIFE_TYPE !== 'All') {
    condition += ` AND ZTB_QL_KNIFE_FILM.KNIFE_TYPE = '${DATA.KNIFE_TYPE}'`
  }
  let setpdQuery = `SELECT ZTB_QL_KNIFE_FILM.*, M100.G_NAME, M100.G_NAME_KD, M100.PROD_TYPE, M100.REV_NO, M110.CUST_NAME_KD AS VENDOR FROM ZTB_QL_KNIFE_FILM
LEFT JOIN M100 ON M100.G_CODE = ZTB_QL_KNIFE_FILM.G_CODE AND M100.CTR_CD = ZTB_QL_KNIFE_FILM.CTR_CD
LEFT JOIN M110 ON M110.CUST_CD = ZTB_QL_KNIFE_FILM.CUST_CD AND M110.CTR_CD = ZTB_QL_KNIFE_FILM.CTR_CD
${condition}
AND ZTB_QL_KNIFE_FILM.CTR_CD = '${DATA.CTR_CD}'
ORDER BY KNIFE_FILM_ID DESC`;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.lichsuxuatdaofilm = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = `WHERE 1=1 `;
  if (DATA.ALLTIME !== true) {
    condition += ` AND OUT_KNIFE_FILM.INS_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE} 23:59:59'`
  }
  if (DATA.G_CODE !== '') {
    condition += ` AND ZTB_QLSXPLAN.G_CODE ='${DATA.G_CODE}'`
  }
  if (DATA.G_NAME !== '') {
    condition += ` AND M100.G_NAME LIKE '%${DATA.G_NAME}%'`
  }
  if (DATA.PLAN_ID !== '') {
    condition += ` AND ZTB_QLSXPLAN.PLAN_ID = '${DATA.PLAN_ID}'`
  }
  if (DATA.FACTORY !== 'All') {
    condition += ` AND ZTB_QLSXPLAN.PLAN_FACTORY = '${DATA.FACTORY}'`
  }
  let setpdQuery = `SELECT OUT_KNIFE_FILM.*, M100.G_NAME, M100.G_NAME_KD, ZTB_SX_RESULT.INS_EMPL AS SX_EMPL_NO, ZTB_QLSXPLAN.PLAN_DATE, ZTB_SX_RESULT.SX_DATE, OUT_KNIFE_FILM.CTR_CD FROM OUT_KNIFE_FILM
  LEFT JOIN ZTB_QLSXPLAN ON ZTB_QLSXPLAN.PLAN_ID=OUT_KNIFE_FILM.PLAN_ID AND ZTB_QLSXPLAN.CTR_CD=OUT_KNIFE_FILM.CTR_CD
  LEFT JOIN ZTB_SX_RESULT ON ZTB_SX_RESULT.PLAN_ID=OUT_KNIFE_FILM.PLAN_ID AND ZTB_SX_RESULT.CTR_CD=OUT_KNIFE_FILM.CTR_CD
  LEFT JOIN M100 ON M100.G_CODE = ZTB_QLSXPLAN.G_CODE AND M100.CTR_CD = ZTB_QLSXPLAN.CTR_CD
  ${condition}
  AND OUT_KNIFE_FILM.CTR_CD='${DATA.CTR_CD}'
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.machinecounting2 = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = ` WHERE EQ_ACTIVE ='OK'  `;
  if (DATA.FACTORY !== "ALL") {
    condition += ` AND FACTORY='${DATA.FACTORY}'`;
  }
  if (DATA.EQ_NAME !== "ALL") {
    condition += ` AND SUBSTRING(EQ_NAME,1,2)='${DATA.EQ_NAME}'`;
  }
  let setpdQuery = `SELECT FACTORY, SUBSTRING(EQ_NAME,1,2) AS EQ_NAME, COUNT(SUBSTRING(EQ_NAME,1,2)) AS EQ_QTY FROM ZTB_SX_EQ_STATUS  ${condition}  AND CTR_CD='${DATA.CTR_CD}' GROUP BY FACTORY, SUBSTRING(EQ_NAME,1,2)  ORDER BY FACTORY ASC, EQ_NAME ASC`;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.dailysxdata = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = ` WHERE SX_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE}'  `;
  if (DATA.FACTORY !== "ALL")
    condition += ` AND ZTB_SX_RESULT.FACTORY='${DATA.FACTORY}'`;
  if (DATA.MACHINE !== "ALL")
    condition += ` AND SUBSTRING(ZTB_SX_RESULT.EQ_NAME,1,2)='${DATA.MACHINE}'`;
  let setpdQuery = ``;
  if (DATA.MACHINE !== "ALL") {
    setpdQuery = `SELECT  ZTB_SX_RESULT.SX_DATE, SUBSTRING(ZTB_SX_RESULT.EQ_NAME,1,2) AS MACHINE_NAME, SUM(ZTB_SX_RESULT.SX_RESULT) AS SX_RESULT, SUM(ZTB_QLSXPLAN.PLAN_QTY) AS PLAN_QTY  FROM ZTB_SX_RESULT LEFT JOIN ZTB_QLSXPLAN ON (ZTB_SX_RESULT.PLAN_ID = ZTB_QLSXPLAN.PLAN_ID AND ZTB_SX_RESULT.CTR_CD = ZTB_QLSXPLAN.CTR_CD) ${condition} AND ZTB_SX_RESULT.CTR_CD='${DATA.CTR_CD}' GROUP BY ZTB_SX_RESULT.SX_DATE, SUBSTRING(ZTB_SX_RESULT.EQ_NAME,1,2)  ORDER BY SX_DATE ASC`;
  } else {
    setpdQuery = `SELECT  ZTB_SX_RESULT.SX_DATE, SUM(ZTB_SX_RESULT.SX_RESULT) AS SX_RESULT, SUM(ZTB_QLSXPLAN.PLAN_QTY) AS PLAN_QTY  FROM ZTB_SX_RESULT LEFT JOIN ZTB_QLSXPLAN ON (ZTB_SX_RESULT.PLAN_ID = ZTB_QLSXPLAN.PLAN_ID AND ZTB_SX_RESULT.CTR_CD = ZTB_QLSXPLAN.CTR_CD) ${condition} AND ZTB_SX_RESULT.CTR_CD='${DATA.CTR_CD}' GROUP BY ZTB_SX_RESULT.SX_DATE ORDER BY SX_DATE ASC`;
  }
  console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.sxweeklytrenddata = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = `WHERE SX_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE}'`;
  if (DATA.FACTORY !== "ALL")
    condition += ` AND ZTB_SX_RESULT.FACTORY='${DATA.FACTORY}'`;
  if (DATA.MACHINE !== "ALL")
    condition += ` AND SUBSTRING(ZTB_SX_RESULT.EQ_NAME,1,2)='${DATA.MACHINE}'`;
  let setpdQuery = `SELECT AA.SX_WEEK, SUM(AA.SX_RESULT) AS SX_RESULT, SUM(AA.PLAN_QTY) AS PLAN_QTY FROM 
  (SELECT DATEPART(YEAR, ZTB_SX_RESULT.SX_DATE) AS SX_YEAR, DATEPART(ISO_WEEK,DATEADD(DAY,+2,ZTB_SX_RESULT.SX_DATE)) AS SX_WEEK, ZTB_SX_RESULT.SX_DATE, SUBSTRING(ZTB_SX_RESULT.EQ_NAME,1,2) AS MACHINE_NAME, ZTB_SX_RESULT.SX_RESULT, ZTB_QLSXPLAN.PLAN_QTY, ZTB_SX_RESULT.CTR_CD  FROM ZTB_SX_RESULT LEFT JOIN ZTB_QLSXPLAN ON (ZTB_SX_RESULT.PLAN_ID= ZTB_QLSXPLAN.PLAN_ID AND ZTB_SX_RESULT.CTR_CD = ZTB_QLSXPLAN.CTR_CD) ${condition} AND ZTB_SX_RESULT.CTR_CD='${DATA.CTR_CD}') AS AA
  GROUP BY  AA.SX_WEEK
  ORDER BY AA.SX_WEEK ASC`;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.sxmonthlytrenddata = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = `WHERE SX_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE}'`;
  if (DATA.FACTORY !== "ALL")
    condition += ` AND ZTB_SX_RESULT.FACTORY='${DATA.FACTORY}'`;
  if (DATA.MACHINE !== "ALL")
    condition += ` AND SUBSTRING(ZTB_SX_RESULT.EQ_NAME,1,2)='${DATA.MACHINE}'`;
  let setpdQuery = `SELECT AA.SX_MONTH, SUM(AA.SX_RESULT) AS SX_RESULT, SUM(AA.PLAN_QTY) AS PLAN_QTY FROM 
  (SELECT DATEPART(MONTH, ZTB_SX_RESULT.SX_DATE) AS SX_MONTH, DATEPART(ISO_WEEK,DATEADD(DAY,+2,ZTB_SX_RESULT.SX_DATE)) AS SX_WEEK, ZTB_SX_RESULT.SX_DATE, SUBSTRING(ZTB_SX_RESULT.EQ_NAME,1,2) AS MACHINE_NAME, ZTB_SX_RESULT.SX_RESULT, ZTB_QLSXPLAN.PLAN_QTY, ZTB_SX_RESULT.CTR_CD  FROM ZTB_SX_RESULT LEFT JOIN ZTB_QLSXPLAN ON (ZTB_SX_RESULT.PLAN_ID= ZTB_QLSXPLAN.PLAN_ID AND ZTB_SX_RESULT.CTR_CD = ZTB_QLSXPLAN.CTR_CD)${condition} AND ZTB_SX_RESULT.CTR_CD='${DATA.CTR_CD}') AS AA
  GROUP BY  AA.SX_MONTH
  ORDER BY AA.SX_MONTH ASC`;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.machineTimeEfficiency = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = `WHERE 
    AA.SX_DATE BETWEEN '${DATA.FROM_DATE}' 
    AND '${DATA.TO_DATE}' AND AA.PLAN_FACTORY is not null `;
  if (DATA.FACTORY !== "ALL")
    condition += ` AND AA.PLAN_FACTORY='${DATA.FACTORY}' `;
  if (DATA.MACHINE !== "ALL")
    condition += ` AND SUBSTRING(AA.PLAN_EQ,1,2)='${DATA.MACHINE}'`;
  let setpdQuery = `SELECT 
    AA.PLAN_FACTORY, 
    SUBSTRING(AA.PLAN_EQ, 0, 3) AS MACHINE, 
    SUM(AA.TOTAL_TIME) AS TOTAL_TIME, 
    SUM(AA.RUN_TIME_SX) AS RUN_TIME_SX, 
    SUM(AA.SETTING_TIME) AS SETTING_TIME, 
    SUM(AA.TOTAL_LOSS_TIME) AS LOSS_TIME, 
    CAST(
      SUM(AA.RUN_TIME_SX) as float
    )/ CAST(
      SUM(AA.TOTAL_TIME) as float
    ) AS HIEU_SUAT_TIME, 
    CAST(
      SUM(AA.SETTING_TIME) as float
    )/ CAST(
      SUM(AA.TOTAL_TIME) as float
    ) AS SETTING_TIME_RATE, 
    CAST(
      SUM(AA.TOTAL_LOSS_TIME) as float
    )/ CAST(
      SUM(AA.TOTAL_TIME) as float
    ) AS LOSS_TIME_RATE 
  FROM 
    (
      SELECT               
        ZTB_QLSXPLAN.PLAN_EQ, 
        ZTB_SX_RESULT.PLAN_ID, 
        ZTB_SX_RESULT.SX_DATE, 
        ZTB_QLSXPLAN.PLAN_FACTORY, 
        M100.G_NAME, 
        ZTB_SX_RESULT.WORK_SHIFT, 
        ZTB_SX_RESULT.INS_EMPL, 
        M010.EMPL_NAME, 
        ZTB_QLSXPLAN.PLAN_QTY, 
        ZTB_QLSXPLAN.KETQUASX,
        DATEDIFF(
          minute, SETTING_START_TIME, MASS_END_TIME
        ) as TOTAL_TIME, 	 
        (
          DATEDIFF(
            minute, MASS_START_TIME, MASS_END_TIME
          ) 
        ) AS RUN_TIME_SX, 
        DATEDIFF(
          minute, SETTING_START_TIME, MASS_START_TIME
        ) as SETTING_TIME, 
        (
          isnull(LAY_DO, 0) + isnull(MAY_HONG, 0) + isnull(DAO_NG, 0) + isnull(CHO_BTP, 0) + isnull(CHO_LIEU, 0) + isnull(HET_LIEU, 0) + isnull(LIEU_NG, 0) + isnull(CAN_HANG, 0) + isnull(HOP_FL, 0) + isnull(CHO_QC, 0) + isnull(CHOT_BAOCAO, 0) + isnull(CHUYEN_CODE, 0) + isnull(KHAC, 0)
        ) AS TOTAL_LOSS_TIME,
        ZTB_SX_RESULT.CTR_CD     
      FROM 
        ZTB_SX_RESULT 
        LEFT JOIN ZTB_SX_EFFICIENCY ON (
          ZTB_SX_RESULT.PLAN_ID = ZTB_SX_EFFICIENCY.PLAN_ID 
          AND ZTB_SX_RESULT.WORK_SHIFT = ZTB_SX_EFFICIENCY.WORK_SHIFT
          AND ZTB_SX_RESULT.CTR_CD = ZTB_SX_EFFICIENCY.CTR_CD
        ) 
        LEFT JOIN M010 ON (
          M010.EMPL_NO = ZTB_SX_RESULT.INS_EMPL
          AND M010.CTR_CD = ZTB_SX_RESULT.CTR_CD
        ) 
        LEFT JOIN ZTB_QLSXPLAN ON (
          ZTB_SX_RESULT.PLAN_ID = ZTB_QLSXPLAN.PLAN_ID
          AND ZTB_SX_RESULT.CTR_CD = ZTB_QLSXPLAN.CTR_CD
        ) 
        LEFT JOIN M100 ON (
          M100.G_CODE = ZTB_QLSXPLAN.G_CODE
          AND M100.CTR_CD = ZTB_QLSXPLAN.CTR_CD
        ) 
      LEFT JOIN P400 ON (
        ZTB_QLSXPLAN.PROD_REQUEST_NO = P400.PROD_REQUEST_NO
        AND ZTB_QLSXPLAN.CTR_CD = P400.CTR_CD
      )
      WHERE 
        MASS_END_TIME is not null AND ((ZTB_QLSXPLAN.PROCESS_NUMBER =1  AND M100.UPH1<>0 AND M100.UPH1 is not null) OR (ZTB_QLSXPLAN.PROCESS_NUMBER =2  AND M100.UPH2<>0 AND M100.UPH2 is not null)) AND P400.CODE_55 <> '04'
    ) AS AA 
  ${condition}
  AND AA.CTR_CD='${DATA.CTR_CD}'
  GROUP BY 
    AA.PLAN_FACTORY, 
    SUBSTRING(AA.PLAN_EQ, 0, 3) 
  ORDER BY 
    AA.PLAN_FACTORY ASC, 
    MACHINE DESC`;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.sxachivementdata = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = ` WHERE SX_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE}' `;
  if (DATA.FACTORY !== "ALL")
    condition += ` AND ZTB_SX_RESULT.FACTORY = '${DATA.FACTORY}'`;
  let setpdQuery = `SELECT MACHINE_NAME, SUM(PLAN_QTY) AS PLAN_QTY, 
  SUM(AA.M_OUTPUT) AS WH_OUTPUT,
  SUM(SX_RESULT) AS SX_RESULT_TOTAL, 
            SUM(CASE WHEN  AA.STEP=0 THEN SX_RESULT ELSE 0 END) AS RESULT_STEP_FINAL,
            SUM(CASE WHEN AA.VAOKIEM='KVK' AND AA.STEP=0 THEN SX_RESULT ELSE 0 END) AS RESULT_TO_NEXT_PROCESS,
            SUM(CASE WHEN AA.VAOKIEM='VK' AND AA.STEP=0 THEN SX_RESULT ELSE 0 END) AS RESULT_TO_INSPECTION,
            SUM(INS_INPUT) AS INS_INPUT,  SUM(INSPECT_TOTAL_QTY) AS INSPECT_TOTAL_QTY, SUM(INSPECT_OK_QTY) AS INSPECT_OK_QTY, SUM(INSPECT_NG_QTY) AS INSPECT_NG_QTY, SUM(INS_OUTPUT) AS INS_OUTPUT FROM (
           SELECT  ZTB_SX_RESULT.PLAN_ID, ZTB_SX_RESULT.SX_DATE, ZTB_QLSXPLAN.STEP, M100.EQ1, M100.EQ2,  SUBSTRING(ZTB_SX_RESULT.EQ_NAME,1,2) AS MACHINE_NAME, CASE WHEN M100.EQ2 NOT IN ('FR','SR','DC','ED')  THEN 'VK' ELSE CASE WHEN SUBSTRING(ZTB_SX_RESULT.EQ_NAME,1,2) = M100.EQ2 THEN 'VK' ELSE 'KVK' END END AS VAOKIEM,ZTB_QLSXPLAN.PLAN_QTY,
            isnull(ZTB_SX_RESULT.SX_RESULT,0) AS SX_RESULT,  
            isnull(INSPECT_INPUT_TABLE.INS_INPUT,0) AS INS_INPUT,  
             isnull(INSPECT_NK_TABLE.INSPECT_TOTAL_QTY,0) AS INSPECT_TOTAL_QTY, isnull(INSPECT_NK_TABLE.INSPECT_OK_QTY,0) AS INSPECT_OK_QTY, isnull(INSPECT_NK_TABLE.INSPECT_NG_QTY,0) AS INSPECT_NG_QTY,
            isnull(INSPECT_OUTPUT_TABLE.INS_OUTPUT,0) AS INS_OUTPUT ,
        SD_LIEU.WAREHOUSE_OUTPUT_QTY,
        SD_LIEU.WAREHOUSE_OUTPUT_QTY/ZTB_SX_RESULT.PD*ZTB_SX_RESULT.CAVITY*1000 AS M_OUTPUTSX,
        SD_LIEU.WAREHOUSE_OUTPUT_QTY/M100.PD*(M100.G_C*M100.G_C_R)*1000 AS M_OUTPUT
        FROM ZTB_SX_RESULT LEFT JOIN ZTB_QLSXPLAN ON (ZTB_SX_RESULT.PLAN_ID= ZTB_QLSXPLAN.PLAN_ID AND ZTB_SX_RESULT.CTR_CD = ZTB_QLSXPLAN.CTR_CD) 
            LEFT JOIN M100 ON (M100.G_CODE = ZTB_SX_RESULT.G_CODE AND M100.CTR_CD = ZTB_SX_RESULT.CTR_CD)
                LEFT JOIN
                (SELECT PLAN_ID, CTR_CD, SUM(CAST(INPUT_QTY_EA as float)) AS INS_INPUT FROM ZTBINSPECTINPUTTB GROUP BY PLAN_ID, CTR_CD) AS INSPECT_INPUT_TABLE ON(ZTB_SX_RESULT.PLAN_ID = INSPECT_INPUT_TABLE.PLAN_ID AND ZTB_SX_RESULT.CTR_CD = INSPECT_INPUT_TABLE.CTR_CD)
                LEFT JOIN
                (SELECT PLAN_ID, CTR_CD, SUM(CAST(OUTPUT_QTY_EA as float)) AS INS_OUTPUT FROM ZTBINSPECTOUTPUTTB GROUP BY PLAN_ID, CTR_CD) AS INSPECT_OUTPUT_TABLE ON (ZTB_SX_RESULT.PLAN_ID = INSPECT_OUTPUT_TABLE.PLAN_ID AND ZTB_SX_RESULT.CTR_CD = INSPECT_OUTPUT_TABLE.CTR_CD)
              LEFT JOIN
                          (SELECT PLAN_ID, CTR_CD, SUM(CAST(INSPECT_TOTAL_QTY  as float)) AS INSPECT_TOTAL_QTY,  SUM(CAST(INSPECT_OK_QTY  as float)) AS INSPECT_OK_QTY, SUM(CAST((ERR4+ERR5+ERR6+ERR7+ERR8+ERR9+ERR10+ERR11+ERR12+ERR13+ERR14+ERR15+ERR16+ERR17+ERR18+ERR19+ERR20+ERR21+ERR22+ERR23+ERR24+ERR25+ERR26+ERR27+ERR28+ERR29+ERR30+ERR31
            )  as float)) AS INSPECT_NG_QTY FROM ZTBINSPECTNGTB GROUP BY PLAN_ID, CTR_CD) AS INSPECT_NK_TABLE ON (ZTB_SX_RESULT.PLAN_ID = INSPECT_NK_TABLE.PLAN_ID AND ZTB_SX_RESULT.CTR_CD = INSPECT_NK_TABLE.CTR_CD)
        LEFT JOIN (
             SELECT isnull(isnull(WAREHOUSE_OUT.PLAN_ID_INPUT,AA.PLAN_ID_SUDUNG),BB.PLAN_ID) AS PLAN_ID_OUTPUT, isnull(isnull(WAREHOUSE_OUT.M_NAME,AA.M_NAME),BB.M_NAME) AS M_NAME, AA.INPUT_QTY AS TOTAL_OUT_QTY, BB.REMAIN_QTY, (AA.INPUT_QTY - BB.REMAIN_QTY) AS USED_QTY, WAREHOUSE_OUT.WAREHOUSE_OUTPUT_QTY, isnull(isnull(WAREHOUSE_OUT.CTR_CD,AA.CTR_CD),BB.CTR_CD) AS CTR_CD
        FROM
          (SELECT PLAN_ID_SUDUNG, M090.M_NAME, SUM(TOTAL_IN_QTY) AS INPUT_QTY, IN_KHO_SX.CTR_CD  FROM IN_KHO_SX LEFT JOIN M090 ON (M090.M_CODE = IN_KHO_SX.M_CODE AND M090.CTR_CD = IN_KHO_SX.CTR_CD)  WHERE IN_KHO_SX.USE_YN='X' GROUP BY IN_KHO_SX.PLAN_ID_SUDUNG, M090.M_NAME, IN_KHO_SX.CTR_CD) AS AA
          FULL OUTER JOIN
          (SELECT P500.PLAN_ID, M090.M_NAME, SUM(REMAIN_QTY) AS REMAIN_QTY, P500.CTR_CD FROM P500  LEFT JOIN M090 ON (M090.M_CODE = P500.M_CODE AND M090.CTR_CD = P500.CTR_CD) GROUP BY PLAN_ID,M090.M_NAME, P500.CTR_CD) AS BB
          ON(AA.PLAN_ID_SUDUNG = BB.PLAN_ID AND AA.M_NAME = BB.M_NAME AND AA.CTR_CD = BB.CTR_CD)		
          FULL OUTER JOIN(SELECT PLAN_ID_INPUT, M090.M_NAME, SUM(TOTAL_IN_QTY) AS WAREHOUSE_OUTPUT_QTY, IN_KHO_SX.CTR_CD  FROM IN_KHO_SX LEFT JOIN M090 ON (M090.M_CODE = IN_KHO_SX.M_CODE AND M090.CTR_CD = IN_KHO_SX.CTR_CD) WHERE IN_KHO_SX.PHANLOAI='N' GROUP BY PLAN_ID_INPUT, M090.M_NAME, IN_KHO_SX.CTR_CD)  AS WAREHOUSE_OUT
          ON(AA.PLAN_ID_SUDUNG = WAREHOUSE_OUT.PLAN_ID_INPUT AND AA.M_NAME = WAREHOUSE_OUT.M_NAME AND AA.CTR_CD = WAREHOUSE_OUT.CTR_CD)	
        ) AS SD_LIEU ON (SD_LIEU.PLAN_ID_OUTPUT = ZTB_SX_RESULT.PLAN_ID AND SD_LIEU.CTR_CD = ZTB_SX_RESULT.CTR_CD)
  ${condition} AND ZTB_SX_RESULT.CTR_CD='${DATA.CTR_CD}'
  ) AS AA
  GROUP BY AA.MACHINE_NAME
  ORDER BY AA.MACHINE_NAME ASC`;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.tinhhinhchotbaocaosx = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `SELECT ZTB_SX_RESULT.SX_DATE, COUNT(ZTB_SX_RESULT.PLAN_ID) AS TOTAL, COUNT(CASE WHEN ZTB_SX_RESULT.MASS_END_TIME is not null THEN 1 ELSE null END) AS DA_CHOT, COUNT(CASE WHEN ZTB_SX_RESULT.MASS_END_TIME is  null THEN 1 ELSE null END) AS CHUA_CHOT,  COUNT(CASE WHEN ZTB_SX_EFFICIENCY.PLAN_ID is not null THEN 1 ELSE null END) AS DA_NHAP_HIEUSUAT, COUNT(CASE WHEN ZTB_SX_EFFICIENCY.PLAN_ID is  null THEN 1 ELSE null END) AS CHUA_NHAP_HIEUSUAT    FROM ZTB_SX_RESULT LEFT JOIN ZTB_SX_EFFICIENCY ON (ZTB_SX_RESULT.CTR_CD = ZTB_SX_EFFICIENCY.CTR_CD AND ZTB_SX_RESULT.PLAN_ID = ZTB_SX_EFFICIENCY.PLAN_ID AND ZTB_SX_RESULT.WORK_SHIFT = ZTB_SX_EFFICIENCY.WORK_SHIFT) 
            WHERE ZTB_SX_RESULT.FACTORY='${DATA.FACTORY}' AND ZTB_SX_RESULT.CTR_CD='${DATA.CTR_CD}'
            GROUP BY ZTB_SX_RESULT.SX_DATE ORDER BY ZTB_SX_RESULT.SX_DATE DESC `;
  //${moment().format('YYYY-MM-DD')}
  ////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.materialLotStatus = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = `  WHERE O302.PLAN_ID is not null AND O302.LIEUQL_SX = 1`;
  if (DATA.ALLTIME === false) {
    condition += ` AND O302.INS_DATE BETWEEN ''${DATA.FROM_DATE}'' AND ''${DATA.TO_DATE} 23:59:59'' `;
  }
  if (DATA.PROD_REQUEST_NO !== "") {
    condition += ` AND ZTB_QLSXPLAN.PROD_REQUEST_NO= ''${DATA.PROD_REQUEST_NO}''`;
  }
  if (DATA.PLAN_ID !== "") {
    condition += ` AND O302.PLAN_ID = ''${DATA.PLAN_ID}''`;
  }
  if (DATA.M_CODE !== "") {
    condition += ` AND O302.M_CODE =''${DATA.M_CODE}''`;
  }
  if (DATA.M_NAME !== "") {
    condition += ` AND M090.M_NAME LIKE ''%${DATA.M_NAME}%''`;
  }
  if (DATA.G_CODE !== "") {
    condition += ` AND M100.G_CODE = ''${DATA.G_CODE}''`;
  }
  if (DATA.G_NAME !== "") {
    condition += ` AND M100.G_NAME LIKE ''%${DATA.G_NAME}%''`;
  }
  if (DATA.FACTORY !== "ALL") {
    condition += ` AND O302.FACTORY = ''${DATA.FACTORY}''`;
  }
  if (DATA.PLAN_EQ !== "ALL") {
    condition += ` AND SUBSTRING(ZTB_QLSXPLAN.PLAN_EQ,1,2) = ''${DATA.PLAN_EQ}''`;
  }
  if (DATA.CUST_NAME_KD !== "") {
    condition += ` AND M110.CUST_NAME_KD LIKE ''%${DATA.CUST_NAME_KD}%''`
  }
  let setpdQuery = `
  DECLARE @eq_string varchar(max) = '';
  DECLARE @eq_temp_string varchar(max) = '';
  DECLARE @vao_eq varchar(max) = '';
  DECLARE @temp_qty varchar(max) = '';
  DECLARE @temp_met varchar(max) = '';
  DECLARE @tempTable TABLE (ResultValue nvarchar(max)) DECLARE @i INT = 0;
  DECLARE @eq_series varchar(2)
  INSERT INTO
    @tempTable
  SELECT
    DISTINCT SUBSTRING(EQ_NAME, 1, 2) AS EQ_SERIES
  FROM
    ZTB_SX_EQ_STATUS DECLARE ghepcursor CURSOR FOR (
      SELECT
        *
      FROM
        @tempTable
    ) OPEN ghepcursor;
  FETCH NEXT
  FROM
    ghepcursor INTO @eq_series;
  WHILE @@FETCH_STATUS = 0 BEGIN
  SET
    @eq_temp_string = @eq_temp_string + 'isnull([' + @eq_series + '],0) AS ' + @eq_series + '_EA, '
  SET
    @eq_string = @eq_string + '[' + @eq_series + '],'
  SET
    @vao_eq = @vao_eq + 'CASE WHEN P500_EQ.' + @eq_series + ' is not null THEN ''Y'' ELSE ''N'' END AS VAO_' + @eq_series + ', '
  SET
    @temp_qty = @temp_qty + 'P501_QTY.' + @eq_series + '_EA, '
  SET
    @temp_met = @temp_met + 'P501_QTY.' + @eq_series + '_EA * M100.PD/(M100.G_C * M100.G_C_R)/1000 AS ' + @eq_series + '_RESULT, ' FETCH NEXT
  FROM
    ghepcursor INTO @eq_series;
  END CLOSE ghepcursor;
  DEALLOCATE ghepcursor;
  SET
    @temp_met = SUBSTRING(@temp_met, 1, LEN(@temp_met) -1)
  SET
    @temp_qty = SUBSTRING(@temp_qty, 1, LEN(@temp_qty) -1)
  SET
    @vao_eq = SUBSTRING(@vao_eq, 1, LEN(@vao_eq) -1)
  SET
    @eq_string = SUBSTRING(@eq_string, 1, LEN(@eq_string) -1)
  SET
    @eq_temp_string = SUBSTRING(@eq_temp_string, 1, LEN(@eq_temp_string) -1) PRINT(@eq_string) PRINT(@eq_temp_string) PRINT(@vao_eq) PRINT(@temp_qty) PRINT(@temp_met) DECLARE @query varchar(max) DECLARE @query2 varchar(max)
  SELECT
    @query = 'SELECT PVTB.M_LOT_NO, ' + @eq_string + ' FROM 
  (
  SELECT DISTINCT M_LOT_NO, SUBSTRING(EQUIPMENT_CD,1,2) AS EQ_SERIES, CTR_CD FROM P500 
  JOIN (SELECT DISTINCT SUBSTRING(EQ_NAME,1,2) AS EQ_SERIES from ZTB_SX_EQ_STATUS) AS EQ_TABLE ON (EQ_TABLE.EQ_SERIES =  SUBSTRING(P500.EQUIPMENT_CD,1,2)) WHERE P500.PLAN_ID is not null AND P500.CTR_CD=''${DATA.CTR_CD}''
  ) AS BANGNGUON
  PIVOT
  (
    MIN(BANGNGUON.EQ_SERIES)
    FOR BANGNGUON.EQ_SERIES IN (' + @eq_string + ')
  ) AS PVTB
  SELECT PVTB.M_LOT_NO, ' + @eq_temp_string + '  FROM 
  (
  SELECT  P501.M_LOT_NO, SUBSTRING(P500.EQUIPMENT_CD,1,2) AS EQ_SERIES,SUM(isnull(P501.TEMP_QTY,0)) AS TEMP_QTY, P501.CTR_CD FROM P501 LEFT JOIN P500 ON (P500.PROCESS_IN_DATE = P501.PROCESS_IN_DATE AND P500.PROCESS_IN_NO = P501.PROCESS_IN_NO AND P500.PROCESS_IN_SEQ = P501.PROCESS_IN_SEQ AND P500.CTR_CD = P501.CTR_CD) 
  WHERE P501.PLAN_ID is not null AND P501.CTR_CD=''${DATA.CTR_CD}''
  GROUP BY  P501.M_LOT_NO, SUBSTRING(P500.EQUIPMENT_CD,1,2), P501.CTR_CD
  ) AS BANGNGUON
  PIVOT
  (
    SUM(BANGNGUON.TEMP_QTY)
    FOR BANGNGUON.EQ_SERIES IN (' + @eq_string + ')
  ) AS PVTB
  '
  SELECT
    @query2 = '
  SELECT O302.INS_DATE,  P500_PLAN.SX_DATE AS FIRST_INPUT_DATE, O302.M_LOT_NO, O302.M_CODE, M090.M_NAME, M090.WIDTH_CD, CASE WHEN O302.M_LOT_NO is not null THEN ''Y'' ELSE ''N'' END AS XUAT_KHO, 
                      CASE WHEN P500_PLAN.M_LOT_NO is not null THEN ''Y'' ELSE ''N'' END AS VAO_SX,
                      ' + @vao_eq + ', 
                      CASE WHEN RETURN_LIEU.M_LOT_NO is not null AND  GIAONHAN.M_LOT_NO is not null THEN ''R''  WHEN RETURN_LIEU.M_LOT_NO is  null AND  GIAONHAN.M_LOT_NO is not null THEN ''Y''  ELSE ''N'' END AS CONFIRM_GIAONHAN,
                      CASE WHEN RETURNNVL.M_LOT_NO is not null THEN ''Y'' ELSE ''N'' END AS RETURN_KHO,
                      CASE WHEN IQC_TB.M_LOT_NO is not null THEN ''Y'' ELSE ''N'' END AS RETURN_IQC,
                      CASE WHEN ZTBINSPECTINPUTTB_A.M_LOT_NO is not null THEN ''Y'' ELSE ''N'' END AS VAO_KIEM,
                      CASE WHEN NHATKY.M_LOT_NO is not null THEN ''Y'' ELSE ''N'' END AS NHATKY_KT, 
                      CASE WHEN ZTBINSPECTOUTPUTTB_A.M_LOT_NO is not null THEN ''Y'' ELSE ''N'' END AS RA_KIEM,
                      O302.ROLL_QTY, O302.OUT_CFM_QTY, (O302.ROLL_QTY * O302.OUT_CFM_QTY) AS TOTAL_OUT_QTY, 
                      ' + @temp_met + ',
                      isnull(NHATKY.INSPECT_TOTAL_QTY,0)* M100.PD/(M100.G_C * M100.G_C_R)/1000 AS INSPECT_TOTAL_QTY, 
                      isnull(NHATKY.INSPECT_OK_QTY,0)* M100.PD/(M100.G_C * M100.G_C_R)/1000 AS INSPECT_OK_QTY,
                      isnull(ZTBINSPECTOUTPUTTB_A.INS_OUTPUT_EA,0)* M100.PD/(M100.G_C * M100.G_C_R)/1000 AS INS_OUT, 
                      M100.PD, M100.G_C * M100.G_C_R AS CAVITY, 
                      (O302.ROLL_QTY * O302.OUT_CFM_QTY)/ M100.PD * (M100.G_C * M100.G_C_R)*1000 AS TOTAL_OUT_EA,
                      ' + @temp_qty + ',                  
            isnull(NHATKY.INSPECT_TOTAL_QTY,0) AS INSPECT_TOTAL_EA, 
            isnull(NHATKY.INSPECT_OK_QTY,0) AS INSPECT_OK_EA, 
            isnull(ZTBINSPECTOUTPUTTB_A.INS_OUTPUT_EA,0) AS INS_OUTPUT_EA,
                      1-isnull(NHATKY.INSPECT_OK_QTY,0)* M100.PD/(M100.G_C * M100.G_C_R)/1000 /(O302.ROLL_QTY * O302.OUT_CFM_QTY) AS ROLL_LOSS_KT,
                      1-isnull(ZTBINSPECTOUTPUTTB_A.INS_OUTPUT_EA,0)* M100.PD/(M100.G_C * M100.G_C_R)/1000 /(O302.ROLL_QTY * O302.OUT_CFM_QTY) AS ROLL_LOSS, M100.EQ1, M100.EQ2, M100.EQ3, M100.EQ4,
            ZTB_QLSXPLAN.PROD_REQUEST_NO, O302.PLAN_ID, M100.G_CODE, M100.G_NAME, O302.FACTORY, M110.CUST_NAME_KD, CASE WHEN P400.CODE_55 =''04'' THEN ''SAMPLE'' ELSE ''MASS'' END AS PHAN_LOAI,
            ZTB_QLSXPLAN.PLAN_EQ, O302.INS_RECEPTION
                       FROM O302 
                      LEFT JOIN (SELECT DISTINCT M_LOT_NO, CTR_CD FROM IN_KHO_SX WHERE PHANLOAI=''N'') AS IN_KHO_SX_A ON (IN_KHO_SX_A.M_LOT_NO = O302.M_LOT_NO AND IN_KHO_SX_A.CTR_CD = O302.CTR_CD)
                      LEFT JOIN (
            SELECT PVTB.M_LOT_NO, ' + @eq_string + ', PVTB.CTR_CD FROM 
              (
              SELECT DISTINCT M_LOT_NO, SUBSTRING(EQUIPMENT_CD,1,2) AS EQ_SERIES, CTR_CD FROM P500 
              JOIN (SELECT DISTINCT SUBSTRING(EQ_NAME,1,2) AS EQ_SERIES from ZTB_SX_EQ_STATUS) AS EQ_TABLE ON (EQ_TABLE.EQ_SERIES =  SUBSTRING(P500.EQUIPMENT_CD,1,2)) WHERE P500.PLAN_ID is not null
              ) AS BANGNGUON
              PIVOT
              (
                MIN(BANGNGUON.EQ_SERIES)
                FOR BANGNGUON.EQ_SERIES IN (' + @eq_string + ')
              ) AS PVTB
            ) AS P500_EQ ON (P500_EQ.M_LOT_NO = O302.M_LOT_NO AND P500_EQ.CTR_CD = O302.CTR_CD)
                      LEFT JOIN (SELECT CTR_CD, M_LOT_NO, MIN(INS_DATE) AS SX_DATE FROM P500 WHERE M_LOT_NO <> '''' AND PLAN_ID is not null GROUP BY CTR_CD, M_LOT_NO) AS P500_PLAN ON (P500_PLAN.CTR_CD = O302.CTR_CD AND P500_PLAN.M_LOT_NO = O302.M_LOT_NO)
                      LEFT JOIN (SELECT DISTINCT CTR_CD, M_LOT_NO FROM ZTB_SX_NG_MATERIAL WHERE M_LOT_NO <> '''' AND PLAN_ID_SUDUNG is not null) AS IQC_TB ON (IQC_TB.CTR_CD = O302.CTR_CD AND IQC_TB.M_LOT_NO = O302.M_LOT_NO)
                      LEFT JOIN (SELECT DISTINCT CTR_CD, M_LOT_NO FROM RETURN_NVL WHERE M_LOT_NO <> '''' AND PLAN_ID is not null AND UPD_EMPL is not null) AS RETURNNVL ON  (RETURNNVL.CTR_CD= O302.CTR_CD AND RETURNNVL.M_LOT_NO= O302.M_LOT_NO)
                      LEFT JOIN (SELECT DISTINCT M_LOT_NO, CTR_CD FROM ZTB_GIAONHAN_M_LOT WHERE CONFIRM=''OK'' AND PHANLOAI=''N'' ) AS GIAONHAN ON (O302.M_LOT_NO = GIAONHAN.M_LOT_NO AND O302.CTR_CD = GIAONHAN.CTR_CD)
                      LEFT JOIN (SELECT DISTINCT M_LOT_NO, CTR_CD FROM ZTB_GIAONHAN_M_LOT WHERE CONFIRM=''OK'' AND PHANLOAI=''R'' ) AS RETURN_LIEU ON (O302.M_LOT_NO = RETURN_LIEU.M_LOT_NO AND O302.CTR_CD = RETURN_LIEU.CTR_CD)
                      LEFT JOIN (SELECT DISTINCT P501.M_LOT_NO, P501.CTR_CD FROM ZTBINSPECTINPUTTB LEFT JOIN P501 ON (P501.PROCESS_LOT_NO = ZTBINSPECTINPUTTB.PROCESS_LOT_NO AND P501.CTR_CD = ZTBINSPECTINPUTTB.CTR_CD) WHERE ZTBINSPECTINPUTTB.PLAN_ID is not null) AS ZTBINSPECTINPUTTB_A ON (O302.M_LOT_NO = ZTBINSPECTINPUTTB_A.M_LOT_NO AND O302.CTR_CD = ZTBINSPECTINPUTTB_A.CTR_CD)
                      LEFT JOIN (SELECT  P501.M_LOT_NO, SUM(ZTBINSPECTNGTB.INSPECT_TOTAL_QTY) AS INSPECT_TOTAL_QTY, SUM(ZTBINSPECTNGTB.INSPECT_OK_QTY) AS INSPECT_OK_QTY, P501.CTR_CD  FROM ZTBINSPECTNGTB LEFT JOIN P501 ON (P501.PROCESS_LOT_NO = ZTBINSPECTNGTB.PROCESS_LOT_NO AND P501.CTR_CD = ZTBINSPECTNGTB.CTR_CD) WHERE ZTBINSPECTNGTB.PLAN_ID is not null GROUP BY P501.M_LOT_NO, P501.CTR_CD) AS NHATKY ON(NHATKY.M_LOT_NO = O302.M_LOT_NO AND NHATKY.CTR_CD = O302.CTR_CD)
                      LEFT JOIN (SELECT  P501.M_LOT_NO, SUM(ZTBINSPECTOUTPUTTB.OUTPUT_QTY_EA) AS INS_OUTPUT_EA, P501.CTR_CD FROM ZTBINSPECTOUTPUTTB LEFT JOIN P501 ON (P501.PROCESS_LOT_NO = ZTBINSPECTOUTPUTTB.PROCESS_LOT_NO AND P501.CTR_CD = ZTBINSPECTOUTPUTTB.CTR_CD) WHERE ZTBINSPECTOUTPUTTB.PLAN_ID is not null GROUP BY P501.M_LOT_NO, P501.CTR_CD) AS ZTBINSPECTOUTPUTTB_A ON (O302.M_LOT_NO = ZTBINSPECTOUTPUTTB_A.M_LOT_NO AND O302.CTR_CD = ZTBINSPECTOUTPUTTB_A.CTR_CD)
                      LEFT JOIN 
            (
              SELECT PVTB.M_LOT_NO, ' + @eq_temp_string + ', PVTB.CTR_CD  FROM 
              (
              SELECT  P501.M_LOT_NO, SUBSTRING(P500.EQUIPMENT_CD,1,2) AS EQ_SERIES,SUM(isnull(P501.TEMP_QTY,0)) AS TEMP_QTY, P501.CTR_CD FROM P501 LEFT JOIN P500 ON (P500.PROCESS_IN_DATE = P501.PROCESS_IN_DATE AND P500.PROCESS_IN_NO = P501.PROCESS_IN_NO AND P500.PROCESS_IN_SEQ = P501.PROCESS_IN_SEQ AND P500.CTR_CD = P501.CTR_CD) 
              WHERE P501.PLAN_ID is not null
              GROUP BY  P501.M_LOT_NO, SUBSTRING(P500.EQUIPMENT_CD,1,2), P501.CTR_CD
              ) AS BANGNGUON
              PIVOT
              (
                SUM(BANGNGUON.TEMP_QTY)
                FOR BANGNGUON.EQ_SERIES IN (' + @eq_string + ')
              ) AS PVTB
            ) AS P501_QTY ON (P501_QTY.M_LOT_NO = O302.M_LOT_NO AND P501_QTY.CTR_CD = O302.CTR_CD)
                      LEFT JOIN M090 ON (M090.M_CODE= O302.M_CODE AND M090.CTR_CD = O302.CTR_CD)
                      LEFT JOIN ZTB_QLSXPLAN ON (O302.PLAN_ID = ZTB_QLSXPLAN.PLAN_ID AND O302.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
                      LEFT JOIN M100 ON (ZTB_QLSXPLAN.G_CODE = M100.G_CODE AND ZTB_QLSXPLAN.CTR_CD = M100.CTR_CD)
                      LEFT JOIN P400 ON (P400.PROD_REQUEST_NO=ZTB_QLSXPLAN.PROD_REQUEST_NO AND P400.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
                      LEFT JOIN M110 ON (M110.CUST_CD = P400.CUST_CD AND M110.CTR_CD = P400.CTR_CD)
                      ${condition} AND O302.CTR_CD=''${DATA.CTR_CD}''
                      ORDER BY O302.INS_DATE DESC'
    EXECUTE(@query2)
            `;
  //${moment().format('YYYY-MM-DD')}
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};

exports.checkRollLieuBienMat = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
  WITH P500_M_LOT AS
  (
  SELECT DISTINCT CTR_CD, M_LOT_NO FROM P500 WHERE M_LOT_NO <> '' AND PLAN_ID is not null
  ),
  RETURN_M_LOT AS
  (
  SELECT DISTINCT CTR_CD, M_LOT_NO FROM RETURN_NVL WHERE M_LOT_NO <> '' AND PLAN_ID is not null AND UPD_EMPL is not null
  ),
  IQC_M_LOT AS
  (
  SELECT DISTINCT CTR_CD, M_LOT_NO FROM ZTB_SX_NG_MATERIAL WHERE M_LOT_NO <> '' AND PLAN_ID_SUDUNG is not null
  ),
  TINHINH_TB AS
  (
  SELECT O302.INS_DATE,YEAR(O302.INS_DATE) AS YEAR_NUM,  DATEPART(WEEK,O302.INS_DATE) AS WEEK_NUM, CONCAT(YEAR(O302.INS_DATE),'_', DATEPART(WEEK,O302.INS_DATE)) AS YEAR_WEEK,O302.M_LOT_NO, P500_M_LOT.M_LOT_NO AS P500,RETURN_M_LOT.M_LOT_NO AS RETURN_NVL,IQC_M_LOT.M_LOT_NO AS RETURN_IQC, CASE WHEN P400.CODE_55 = '04' THEN 'SAMPLE' ELSE 'MASS' END AS PHAN_LOAI  
  FROM O302 
  LEFT JOIN P500_M_LOT ON P500_M_LOT.CTR_CD = O302.CTR_CD AND P500_M_LOT.M_LOT_NO = O302.M_LOT_NO
  LEFT JOIN RETURN_M_LOT ON RETURN_M_LOT.CTR_CD = O302.CTR_CD AND RETURN_M_LOT.M_LOT_NO = O302.M_LOT_NO
  LEFT JOIN IQC_M_LOT ON IQC_M_LOT.CTR_CD = O302.CTR_CD AND IQC_M_LOT.M_LOT_NO = O302.M_LOT_NO
  LEFT JOIN ZTB_QLSXPLAN ON ZTB_QLSXPLAN.CTR_CD = O302.CTR_CD AND ZTB_QLSXPLAN.PLAN_ID = O302.PLAN_ID
  LEFT JOIN P400 ON P400.CTR_CD = ZTB_QLSXPLAN.CTR_CD AND P400.PROD_REQUEST_NO = ZTB_QLSXPLAN.PROD_REQUEST_NO
  WHERE P500_M_LOT.M_LOT_NO is null AND RETURN_M_LOT.M_LOT_NO is null AND IQC_M_LOT.M_LOT_NO is null AND O302.INS_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE} 23:59:59' AND O302.PLAN_ID is not null AND O302.LIEUQL_SX = 1 AND O302.CTR_CD='002'
  )
  SELECT YEAR_NUM, WEEK_NUM, YEAR_WEEK, COUNT(M_LOT_NO) AS TOTAL_ROLL, COUNT(CASE WHEN PHAN_LOAI='MASS' THEN 1 ELSE null END) AS MASS_ROLL, COUNT(CASE WHEN PHAN_LOAI='SAMPLE' THEN 1 ELSE null END) AS SAMPLE_ROLL FROM TINHINH_TB GROUP BY YEAR_NUM, WEEK_NUM, YEAR_WEEK ORDER BY YEAR_NUM ASC, WEEK_NUM ASC
  `;
  //${moment().format('YYYY-MM-DD')}
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.checkRollLieuBienMatDaily = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
 WITH P500_M_LOT AS
  (
  SELECT DISTINCT CTR_CD, M_LOT_NO FROM P500 WHERE M_LOT_NO <> '' AND PLAN_ID is not null
  ),
  RETURN_M_LOT AS
  (
  SELECT DISTINCT CTR_CD, M_LOT_NO FROM RETURN_NVL WHERE M_LOT_NO <> '' AND PLAN_ID is not null AND UPD_EMPL is not null
  ),
  IQC_M_LOT AS
  (
  SELECT DISTINCT CTR_CD, M_LOT_NO FROM ZTB_SX_NG_MATERIAL WHERE M_LOT_NO <> '' AND PLAN_ID_SUDUNG is not null
  ),
  TINHINH_TB AS
  (
  SELECT  CAST(O302.INS_DATE as date) AS OUT_DATE, O302.INS_DATE,YEAR(O302.INS_DATE) AS YEAR_NUM,  DATEPART(WEEK,O302.INS_DATE) AS WEEK_NUM, CONCAT(YEAR(O302.INS_DATE),'_', DATEPART(WEEK,O302.INS_DATE)) AS YEAR_WEEK,O302.M_LOT_NO, P500_M_LOT.M_LOT_NO AS P500,RETURN_M_LOT.M_LOT_NO AS RETURN_NVL,IQC_M_LOT.M_LOT_NO AS RETURN_IQC, CASE WHEN P400.CODE_55 = '04' THEN 'SAMPLE' ELSE 'MASS' END AS PHAN_LOAI  
  FROM O302 
  LEFT JOIN P500_M_LOT ON P500_M_LOT.CTR_CD = O302.CTR_CD AND P500_M_LOT.M_LOT_NO = O302.M_LOT_NO
  LEFT JOIN RETURN_M_LOT ON RETURN_M_LOT.CTR_CD = O302.CTR_CD AND RETURN_M_LOT.M_LOT_NO = O302.M_LOT_NO
  LEFT JOIN IQC_M_LOT ON IQC_M_LOT.CTR_CD = O302.CTR_CD AND IQC_M_LOT.M_LOT_NO = O302.M_LOT_NO
  LEFT JOIN ZTB_QLSXPLAN ON ZTB_QLSXPLAN.CTR_CD = O302.CTR_CD AND ZTB_QLSXPLAN.PLAN_ID = O302.PLAN_ID
  LEFT JOIN P400 ON P400.CTR_CD = ZTB_QLSXPLAN.CTR_CD AND P400.PROD_REQUEST_NO = ZTB_QLSXPLAN.PROD_REQUEST_NO
  WHERE P500_M_LOT.M_LOT_NO is null AND RETURN_M_LOT.M_LOT_NO is null AND IQC_M_LOT.M_LOT_NO is null AND O302.INS_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE} 23:59:59'  AND O302.PLAN_ID is not null AND O302.LIEUQL_SX = 1 AND O302.CTR_CD='002'
  )
  SELECT OUT_DATE,  COUNT(M_LOT_NO) AS TOTAL_ROLL, COUNT(CASE WHEN PHAN_LOAI='MASS' THEN 1 ELSE null END) AS MASS_ROLL, COUNT(CASE WHEN PHAN_LOAI='SAMPLE' THEN 1 ELSE null END) AS SAMPLE_ROLL FROM TINHINH_TB GROUP BY OUT_DATE  ORDER BY OUT_DATE ASC
  `;
  //${moment().format('YYYY-MM-DD')}
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.checkM_CODE_PLAN_ID_Exist = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `SELECT * FROM ZTB_QLSXCHITHI WHERE CTR_CD='${DATA.CTR_CD}' AND PLAN_ID='${DATA.PLAN_ID}' AND M_CODE='${DATA.M_CODE}'`;
  //${moment().format('YYYY-MM-DD')}
  ////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.loadFullRollData = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = `  WHERE PL_ML_TB.CTR_CD = '${DATA.CTR_CD}'`;
  if (DATA.ALL_TIME === false) {
    condition += ` AND ZTB_QLSXPLAN.PLAN_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE}' `;
  }
  if (DATA.PROD_REQUEST_NO !== "") {
    condition += ` AND ZTB_QLSXPLAN.PROD_REQUEST_NO= '${DATA.PROD_REQUEST_NO}'`;  
  }
  if (DATA.PLAN_ID !== "") {
    condition += ` AND PL_ML_TB.PLAN_ID = '${DATA.PLAN_ID}'`;
  }
  if (DATA.M_CODE !== "") {
    condition += ` AND M090.M_CODE ='${DATA.M_CODE}'`;  
  }
  if (DATA.M_NAME !== "") {
    condition += ` AND M090.M_NAME LIKE '%${DATA.M_NAME}%'`;
  }
  if (DATA.G_CODE !== "") {
    condition += ` AND M100.G_CODE = '${DATA.G_CODE}'`;
  }
  if (DATA.G_NAME !== "") {
    condition += ` AND M100.G_NAME LIKE '%${DATA.G_NAME}%'`;
  }
  if (DATA.FACTORY !== "ALL") { 
    condition += ` AND ZTB_QLSXPLAN.PLAN_FACTORY = '${DATA.FACTORY}'`;
  }
  if (DATA.MACHINE !== "ALL") {
    condition += ` AND SUBSTRING(ZTB_QLSXPLAN.PLAN_EQ,1,2) = '${DATA.MACHINE}'`;
  }
  if (DATA.CUST_NAME_KD !== "") { 
    condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`
  } 
  








  let setpdQuery = `
  WITH BANG_GOP AS (
      SELECT 
          P501.CTR_CD,
          P501.M_LOT_NO,
          P501.PROCESS_LOT_NO,
          FLOOR(((P501.TEMP_QTY * PD) / CAVITY) / 1000) AS REMAIN_QTY,
          P501.TEMP_QTY AS TEMP_QTY_EA,
          'SX_NEW' AS PHAN_LOAI,
          P501.USE_YN,
          ZTB_SX_RESULT.PD,
          ZTB_SX_RESULT.CAVITY
      FROM P501 
      LEFT JOIN ZTB_SX_RESULT 
          ON ZTB_SX_RESULT.PLAN_ID = P501.PLAN_ID 
          AND ZTB_SX_RESULT.CTR_CD = P501.CTR_CD
      WHERE P501.USE_YN = 'Y' 
          AND P501.LOT_STATUS IS NULL
      
      UNION ALL
      
      SELECT 
          ZTB_TON_BTP.CTR_CD,
          ZTB_TON_BTP.M_LOT_NO,
          ZTB_TON_BTP.PROCESS_LOT_NO,
          ZTB_TON_BTP.REMAIN_QTY,
          FLOOR(((ZTB_TON_BTP.REMAIN_QTY / PD) * CAVITY) * 1000) AS TEMP_QTY_EA,
          'TON_BTP' AS PHAN_LOAI,
          ZTB_TON_BTP.USE_YN,
          ZTB_SX_RESULT.PD,
          ZTB_SX_RESULT.CAVITY
      FROM ZTB_TON_BTP 
      LEFT JOIN ZTB_SX_RESULT 
          ON ZTB_SX_RESULT.PLAN_ID = ZTB_TON_BTP.PLAN_ID_INPUT
      LEFT JOIN ZTB_SX_EQ_STATUS 
          ON ZTB_SX_EQ_STATUS.EQ_NAME = ZTB_SX_RESULT.EQ_NAME 
          AND ZTB_SX_EQ_STATUS.FACTORY = ZTB_SX_RESULT.FACTORY 
          AND ZTB_SX_EQ_STATUS.CTR_CD = ZTB_SX_RESULT.CTR_CD
      WHERE ZTB_TON_BTP.USE_YN = 'Y'
  )
  ,PL_ML_TB AS
  (
  SELECT DISTINCT CTR_CD,PLAN_ID, M_LOT_NO FROM O302 WHERE LIEUQL_SX  =1  
  UNION
  SELECT DISTINCT CTR_CD,PLAN_ID, M_LOT_NO FROM P500 WHERE PLAN_ID is not null AND M_LOT_NO <> ''
  ),
  O302_A AS
  (
  SELECT CTR_CD,PLAN_ID, M_LOT_NO, SUM(OUT_CFM_QTY) AS OUT_KHO_QTY FROM O302 WHERE LIEUQL_SX  =1  GROUP BY CTR_CD,PLAN_ID, M_LOT_NO
  ),
  P500_PL_ML AS 
  (
  SELECT CTR_CD, PLAN_ID, M_LOT_NO, SUM(isnull(INPUT_QTY,0)) AS INPUT_QTY, SUM(isnull(REMAIN_QTY,0)) AS REMAIN_QTY,(SUM(isnull(INPUT_QTY,0))-SUM(isnull(REMAIN_QTY,0))) AS USED_QTY, SUM(isnull(SETTING_MET,0)) AS SETTING_MET, SUM(isnull(PR_NG,0)) AS PR_NG   FROM P500 WHERE PLAN_ID is not null AND M_LOT_NO <> '' GROUP BY CTR_CD, PLAN_ID, M_LOT_NO
  ),
  RETURN_PL_ML AS
  (
  SELECT CTR_CD, LAST_PLAN_ID AS PLAN_ID, M_LOT_NO, SUM(isnull(RETURN_QTY,0)) AS RETURN_QTY FROM RETURN_NVL WHERE LAST_PLAN_ID is not null  AND R_LIEUQL_SX = 1  AND UPD_DATE is not null GROUP BY CTR_CD, LAST_PLAN_ID, M_LOT_NO
  ),
  IQC_TB AS
  (
  SELECT CTR_CD, PLAN_ID_SUDUNG AS PLAN_ID, M_LOT_NO, SUM(isnull(TOTAL_IN_QTY,0)) AS RETURN_IQC_QTY  FROM ZTB_SX_NG_MATERIAL WHERE LIEUQL_SX  = 1 GROUP BY CTR_CD, PLAN_ID_SUDUNG, M_LOT_NO
  ),
  INSPECT_NK_TB AS
  (
    SELECT CTR_CD,PLAN_ID, M_LOT_NO, SUM(INSPECT_TOTAL_QTY-ERR32) AS INSPECT_TOTAL_QTY, SUM(INSPECT_OK_QTY) AS INSPECT_OK_QTY FROM ZTBINSPECTNGTB WHERE PLAN_ID is not null AND M_LOT_NO is not null AND M_LOT_NO <> '' AND PLAN_ID <> '' GROUP BY CTR_CD,PLAN_ID, M_LOT_NO
  ),
  INSPECT_INPUT_TB AS
  (
    SELECT CTR_CD, PLAN_ID, M_LOT_NO, SUM(INPUT_QTY_EA) AS INS_INPUT FROM ZTBINSPECTINPUTTB WHERE PLAN_ID is not null AND M_LOT_NO is not null AND M_LOT_NO <> '' AND PLAN_ID <> '' GROUP BY CTR_CD, PLAN_ID, M_LOT_NO
  ),
   INSPECT_OUTPUT_TB AS
  (
    SELECT ZTBINSPECTOUTPUTTB.CTR_CD, ZTBINSPECTOUTPUTTB.PLAN_ID, P501.M_LOT_NO, SUM(isnull(OUTPUT_QTY_EA,0)) AS OUTPUT_QTY_EA  FROM ZTBINSPECTOUTPUTTB 
    LEFT JOIN P501 ON P501.CTR_CD = ZTBINSPECTOUTPUTTB.CTR_CD AND P501.PROCESS_LOT_NO = ZTBINSPECTOUTPUTTB.PROCESS_LOT_NO
    WHERE ZTBINSPECTOUTPUTTB.PLAN_ID is not null AND P501.M_LOT_NO <> ''
    GROUP BY ZTBINSPECTOUTPUTTB.CTR_CD, ZTBINSPECTOUTPUTTB.PLAN_ID, P501.M_LOT_NO
  ),
  TON_BTP AS
  (
    SELECT BANG_GOP.CTR_CD, BANG_GOP.M_LOT_NO, P501.PLAN_ID, SUM(BANG_GOP.REMAIN_QTY) AS BTP_REMAIN_QTY,SUM(BANG_GOP.TEMP_QTY_EA) AS BTP_REMAIN_EA  FROM BANG_GOP
    LEFT JOIN P501 ON BANG_GOP.CTR_CD = P501.CTR_CD AND  BANG_GOP.M_LOT_NO = P501.PROCESS_LOT_NO
    GROUP BY BANG_GOP.CTR_CD, BANG_GOP.M_LOT_NO, P501.PLAN_ID		
  ),
  TON_KIEM_TB AS
  (
    SELECT CTR_CD, PLAN_ID, M_LOT_NO, SUM(INPUT_QTY_EA) AS INSPECT_BALANCE_QTY FROM ZTBINSPECTINPUTTB WHERE INSPECT_YN='Y' AND P400_YN='Y' AND PLAN_ID is not null GROUP BY CTR_CD, PLAN_ID, M_LOT_NO
  ),
  TON_KHO_SX AS
  (
  SELECT PLAN_ID_INPUT AS PLAN_ID,M_LOT_NO,SUM(isnull(TOTAL_IN_QTY, 0)) AS TON_KHO_AO, IN_KHO_SX.CTR_CD
  FROM IN_KHO_SX
  WHERE IN_KHO_SX.USE_YN='Y'
  GROUP BY IN_KHO_SX.CTR_CD, PLAN_ID_INPUT,M_LOT_NO
  ),
  LOCK_SX AS
  (
  SELECT PLAN_ID_INPUT AS PLAN_ID,M_LOT_NO,SUM(isnull(TOTAL_IN_QTY, 0)) AS LOCK_QTY, IN_KHO_SX.CTR_CD
  FROM IN_KHO_SX
  WHERE IN_KHO_SX.USE_YN='O'
  GROUP BY IN_KHO_SX.CTR_CD, PLAN_ID_INPUT,M_LOT_NO
  ),
  IQC_OUT_TB AS 
  (
  SELECT ZTB_SX_NG_MATERIAL.CTR_CD,OUT_PLAN_ID AS PLAN_ID, M_LOT_NO, SUM(TOTAL_IN_QTY) AS IQC_IN   
  FROM ZTB_SX_NG_MATERIAL 
  WHERE LIEUQL_SX = 1 AND OUT_PLAN_ID is not null
  GROUP BY ZTB_SX_NG_MATERIAL.CTR_CD,OUT_PLAN_ID, M_LOT_NO
  ),
  P501_TB AS
  (
    SELECT CTR_CD, PLAN_ID, M_LOT_NO, SUM(TEMP_QTY) AS TEMP_QTY FROM P501 WHERE PLAN_ID is not null AND PLAN_ID <> '' AND M_LOT_NO is not null AND M_LOT_NO <> '' AND (REMARK <> 'HUY TEM' OR REMARK is null) GROUP BY CTR_CD, PLAN_ID, M_LOT_NO
  )
  SELECT PL_ML_TB.PLAN_ID, PL_ML_TB.M_LOT_NO, 
  isnull(IQC_OUT_TB.IQC_IN,0) AS IQC_IN, 
  isnull(O302_A.OUT_KHO_QTY,0) AS OUT_KHO_QTY,
  isnull(LOCK_SX.LOCK_QTY,0) AS LOCK_QTY, 
  isnull(P500_PL_ML.INPUT_QTY,0) AS INPUT_QTY, 
  isnull(P500_PL_ML.USED_QTY,0) AS USED_QTY, 
  isnull(P500_PL_ML.REMAIN_QTY,0) AS REMAIN_QTY,
  isnull(P500_PL_ML.SETTING_MET,0) AS SETTING_MET, 
  isnull(P500_PL_ML.INPUT_QTY,0) - isnull(P500_PL_ML.SETTING_MET,0) - (isnull(isnull(P501_TB.TEMP_QTY,0)*ZTB_SX_RESULT.PD*1.0/CAVITY/1000,0)) AS PR_NG,
  isnull(isnull(P501_TB.TEMP_QTY,0)*ZTB_SX_RESULT.PD*1.0/CAVITY/1000,0) AS RESULT_MET,  
  isnull(TON_BTP.BTP_REMAIN_QTY,0) AS BTP_REMAIN_QTY,
  isnull(TON_KHO_SX.TON_KHO_AO,0) AS TON_KHO_SX,  
  isnull(RETURN_PL_ML.RETURN_QTY,0) AS RETURN_KHO_QTY, 
  isnull(IQC_TB.RETURN_IQC_QTY,0) AS RETURN_IQC_QTY, 
  isnull(ZTB_SX_RESULT.PD,0) AS PD, 
  isnull(ZTB_SX_RESULT.CAVITY,0) AS CAVITY, 
  isnull(isnull(INSPECT_INPUT_TB.INS_INPUT,0)*ZTB_SX_RESULT.PD*1.0/CAVITY/1000,0) AS INS_INPUT_MET, 
  isnull(isnull(TON_KIEM_TB.INSPECT_BALANCE_QTY,0)*ZTB_SX_RESULT.PD*1.0/CAVITY/1000,0) AS TON_KIEM_MET, 
  isnull(isnull(INSPECT_NK_TB.INSPECT_TOTAL_QTY,0)*ZTB_SX_RESULT.PD*1.0/CAVITY/1000,0) AS INSPECT_TOTAL_MET, 
  isnull(isnull(INSPECT_NK_TB.INSPECT_OK_QTY,0)*ZTB_SX_RESULT.PD*1.0/CAVITY/1000,0) AS INSPECT_OK_MET, 
  isnull(isnull(INSPECT_OUTPUT_TB.OUTPUT_QTY_EA,0)*ZTB_SX_RESULT.PD*1.0/CAVITY/1000,0) AS INSPECT_OUTPUT_MET, 

  isnull(isnull(IQC_OUT_TB.IQC_IN,0)*1.0/ZTB_SX_RESULT.PD*CAVITY*1000,0) AS IQC_IN_EA, 
  isnull(isnull(O302_A.OUT_KHO_QTY,0)*1.0/ZTB_SX_RESULT.PD*CAVITY*1000,0) AS OUT_KHO_EA, 
  isnull(isnull(LOCK_SX.LOCK_QTY,0)*1.0/ZTB_SX_RESULT.PD*CAVITY*1000,0) AS LOCK_EA, 
  isnull(isnull(P500_PL_ML.INPUT_QTY,0)*1.0/ZTB_SX_RESULT.PD*CAVITY*1000,0) AS INPUT_EA, 
  isnull(isnull(P500_PL_ML.USED_QTY,0)*1.0/ZTB_SX_RESULT.PD*CAVITY*1000,0) AS USED_EA, 
  isnull(isnull(P500_PL_ML.REMAIN_QTY,0)*1.0/ZTB_SX_RESULT.PD*CAVITY*1000,0) AS REMAIN_EA, 
  isnull(isnull(P500_PL_ML.SETTING_MET,0)*1.0/ZTB_SX_RESULT.PD*CAVITY*1000,0) AS SETTING_EA, 
  isnull(isnull(P500_PL_ML.INPUT_QTY,0)*1.0/ZTB_SX_RESULT.PD*CAVITY*1000,0) - isnull(isnull(P500_PL_ML.SETTING_MET,0)*1.0/ZTB_SX_RESULT.PD*CAVITY*1000,0) - isnull(P501_TB.TEMP_QTY,0) AS PR_NG_EA,
  isnull(P501_TB.TEMP_QTY,0) AS RESULT_EA,
  isnull(TON_BTP.BTP_REMAIN_EA,0) AS BTP_REMAIN_EA,
  isnull(isnull(TON_KHO_SX.TON_KHO_AO,0)*1.0/ZTB_SX_RESULT.PD*CAVITY*1000,0) AS TON_KHO_SX_EA, 
  isnull(isnull(RETURN_PL_ML.RETURN_QTY,0)*1.0/ZTB_SX_RESULT.PD*CAVITY*1000,0) AS RETURN_EA, 
  isnull(isnull(IQC_TB.RETURN_IQC_QTY,0)*1.0/ZTB_SX_RESULT.PD*CAVITY*1000,0) AS RETURN_IQC_EA, 
  isnull(INSPECT_INPUT_TB.INS_INPUT,0) AS INS_INPUT_EA,
  isnull(TON_KIEM_TB.INSPECT_BALANCE_QTY,0) AS TON_KIEM_EA,
  isnull(INSPECT_NK_TB.INSPECT_TOTAL_QTY,0) AS INSPECT_TOTAL_EA,
  isnull(INSPECT_NK_TB.INSPECT_OK_QTY,0) AS INSPECT_OK_EA,
  isnull(INSPECT_OUTPUT_TB.OUTPUT_QTY_EA,0) AS INSPECT_OUTPUT_EA,


  isnull(IQC_OUT_TB.IQC_IN,0)*1.0*M090.WIDTH_CD/1000 AS IQC_IN_M2, 
  isnull(O302_A.OUT_KHO_QTY,0)*1.0*M090.WIDTH_CD/1000 AS OUT_KHO_M2,
  isnull(LOCK_SX.LOCK_QTY,0)*1.0*M090.WIDTH_CD/1000 AS LOCK_M2, 
  isnull(P500_PL_ML.INPUT_QTY,0)*1.0*M090.WIDTH_CD/1000 AS INPUT_M2, 
  isnull(P500_PL_ML.USED_QTY,0)*1.0*M090.WIDTH_CD/1000 AS USED_M2, 
  isnull(P500_PL_ML.REMAIN_QTY,0)*1.0*M090.WIDTH_CD/1000 AS REMAIN_M2,
  isnull(P500_PL_ML.SETTING_MET,0)*1.0*M090.WIDTH_CD/1000 AS SETTING_M2, 
(isnull(P500_PL_ML.INPUT_QTY,0) - isnull(P500_PL_ML.SETTING_MET,0) - (isnull(isnull(P501_TB.TEMP_QTY,0)*ZTB_SX_RESULT.PD*1.0/CAVITY/1000,0)))*1.0*M090.WIDTH_CD/1000 AS PR_NG_M2,
  isnull(isnull(P501_TB.TEMP_QTY,0)*ZTB_SX_RESULT.PD*1.0/CAVITY/1000,0)*1.0*M090.WIDTH_CD/1000 AS RESULT_M2,  
  isnull(TON_BTP.BTP_REMAIN_QTY,0)*1.0*M090.WIDTH_CD/1000 AS BTP_REMAIN_M2,
  isnull(TON_KHO_SX.TON_KHO_AO,0)*1.0*M090.WIDTH_CD/1000 AS TON_KHO_SX_M2,  
  isnull(RETURN_PL_ML.RETURN_QTY,0)*1.0*M090.WIDTH_CD/1000 AS RETURN_KHO_M2, 
  isnull(IQC_TB.RETURN_IQC_QTY,0)*1.0*M090.WIDTH_CD/1000 AS RETURN_IQC_M2,
  isnull(isnull(INSPECT_INPUT_TB.INS_INPUT,0)*ZTB_SX_RESULT.PD*1.0/CAVITY/1000,0)*1.0*M090.WIDTH_CD/1000 AS INS_INPUT_M2, 
  isnull(isnull(TON_KIEM_TB.INSPECT_BALANCE_QTY,0)*ZTB_SX_RESULT.PD*1.0/CAVITY/1000,0)*1.0*M090.WIDTH_CD/1000 AS TON_KIEM_M2, 
  isnull(isnull(INSPECT_NK_TB.INSPECT_TOTAL_QTY,0)*ZTB_SX_RESULT.PD*1.0/CAVITY/1000,0)*1.0*M090.WIDTH_CD/1000 AS INSPECT_TOTAL_M2, 
  isnull(isnull(INSPECT_NK_TB.INSPECT_OK_QTY,0)*ZTB_SX_RESULT.PD*1.0/CAVITY/1000,0)*1.0*M090.WIDTH_CD/1000 AS INSPECT_OK_M2, 
  isnull(isnull(INSPECT_OUTPUT_TB.OUTPUT_QTY_EA,0)*ZTB_SX_RESULT.PD*1.0/CAVITY/1000,0)*1.0*M090.WIDTH_CD/1000 AS INSPECT_OUTPUT_M2,



  ZTB_QLSXPLAN.PROCESS_NUMBER, ZTB_QLSXPLAN.STEP, ZTB_QLSXPLAN.PLAN_DATE, M100.G_NAME_KD, M100.PROD_MAIN_MATERIAL,M090.WIDTH_CD, ZTB_QLSXPLAN.PROD_REQUEST_NO,
  CASE WHEN P400.CODE_55 = '04' THEN 'SAMPLE' ELSE 'MASS' END AS PHAN_LOAI
  FROM PL_ML_TB
  LEFT JOIN O302_A ON O302_A.CTR_CD = PL_ML_TB.CTR_CD AND  O302_A.PLAN_ID = PL_ML_TB.PLAN_ID AND O302_A.M_LOT_NO = PL_ML_TB.M_LOT_NO
  LEFT JOIN P500_PL_ML ON P500_PL_ML.CTR_CD = PL_ML_TB.CTR_CD AND  P500_PL_ML.PLAN_ID = PL_ML_TB.PLAN_ID AND P500_PL_ML.M_LOT_NO = PL_ML_TB.M_LOT_NO
  LEFT JOIN RETURN_PL_ML ON PL_ML_TB.CTR_CD = RETURN_PL_ML.CTR_CD AND  PL_ML_TB.PLAN_ID = RETURN_PL_ML.PLAN_ID AND PL_ML_TB.M_LOT_NO = RETURN_PL_ML.M_LOT_NO
  LEFT JOIN IQC_TB ON PL_ML_TB.CTR_CD = IQC_TB.CTR_CD AND  PL_ML_TB.PLAN_ID = IQC_TB.PLAN_ID AND PL_ML_TB.M_LOT_NO = IQC_TB.M_LOT_NO
  LEFT JOIN INSPECT_INPUT_TB ON PL_ML_TB.CTR_CD = INSPECT_INPUT_TB.CTR_CD AND  PL_ML_TB.PLAN_ID = INSPECT_INPUT_TB.PLAN_ID AND PL_ML_TB.M_LOT_NO = INSPECT_INPUT_TB.M_LOT_NO
  LEFT JOIN INSPECT_NK_TB ON PL_ML_TB.CTR_CD = INSPECT_NK_TB.CTR_CD AND  PL_ML_TB.PLAN_ID = INSPECT_NK_TB.PLAN_ID AND PL_ML_TB.M_LOT_NO = INSPECT_NK_TB.M_LOT_NO
  LEFT JOIN INSPECT_OUTPUT_TB ON PL_ML_TB.CTR_CD = INSPECT_OUTPUT_TB.CTR_CD AND  PL_ML_TB.PLAN_ID = INSPECT_OUTPUT_TB.PLAN_ID AND PL_ML_TB.M_LOT_NO = INSPECT_OUTPUT_TB.M_LOT_NO
  LEFT JOIN TON_KHO_SX ON PL_ML_TB.CTR_CD = TON_KHO_SX.CTR_CD AND  PL_ML_TB.PLAN_ID = TON_KHO_SX.PLAN_ID AND PL_ML_TB.M_LOT_NO = TON_KHO_SX.M_LOT_NO
  LEFT JOIN LOCK_SX ON PL_ML_TB.CTR_CD = LOCK_SX.CTR_CD AND  PL_ML_TB.PLAN_ID = LOCK_SX.PLAN_ID AND PL_ML_TB.M_LOT_NO = LOCK_SX.M_LOT_NO
  LEFT JOIN IQC_OUT_TB ON PL_ML_TB.CTR_CD = IQC_OUT_TB.CTR_CD AND  PL_ML_TB.PLAN_ID = IQC_OUT_TB.PLAN_ID AND PL_ML_TB.M_LOT_NO = IQC_OUT_TB.M_LOT_NO
  LEFT JOIN P501_TB ON PL_ML_TB.CTR_CD = P501_TB.CTR_CD AND  PL_ML_TB.PLAN_ID = P501_TB.PLAN_ID AND PL_ML_TB.M_LOT_NO = P501_TB.M_LOT_NO
  LEFT JOIN TON_BTP ON PL_ML_TB.CTR_CD = TON_BTP.CTR_CD AND  PL_ML_TB.PLAN_ID = TON_BTP.PLAN_ID AND PL_ML_TB.M_LOT_NO = TON_BTP.M_LOT_NO
  LEFT JOIN TON_KIEM_TB ON PL_ML_TB.CTR_CD = TON_KIEM_TB.CTR_CD AND  PL_ML_TB.PLAN_ID = TON_KIEM_TB.PLAN_ID AND PL_ML_TB.M_LOT_NO = TON_KIEM_TB.M_LOT_NO
  LEFT JOIN ZTB_SX_RESULT ON PL_ML_TB.CTR_CD = ZTB_SX_RESULT.CTR_CD AND PL_ML_TB.PLAN_ID = ZTB_SX_RESULT.PLAN_ID
  LEFT JOIN ZTB_QLSXPLAN ON PL_ML_TB.CTR_CD = ZTB_QLSXPLAN.CTR_CD AND PL_ML_TB.PLAN_ID = ZTB_QLSXPLAN.PLAN_ID
  LEFT JOIN P400 ON P400.CTR_CD = ZTB_QLSXPLAN.CTR_CD AND P400.PROD_REQUEST_NO = ZTB_QLSXPLAN.PROD_REQUEST_NO
  LEFT JOIN M100 ON ZTB_QLSXPLAN.CTR_CD = M100.CTR_CD AND ZTB_QLSXPLAN.G_CODE = M100.G_CODE
  LEFT JOIN I222 ON I222.CTR_CD = PL_ML_TB.CTR_CD AND I222.M_LOT_NO = PL_ML_TB.M_LOT_NO
  LEFT JOIN M090 ON M090.CTR_CD = I222.CTR_CD AND M090.M_CODE = I222.M_CODE
  ${condition} 
  `;
  //${moment().format('YYYY-MM-DD')}
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};

exports.tinhluongP3 = async (req, res, DATA) => {
  console.log("vao tinhluongP3", DATA);
  let checkkq = "OK";
  let condition = `  AND ZTB_QLSXPLAN.CTR_CD = '${DATA.CTR_CD}'`;
  if (DATA.ALL_TIME === false) {
    condition += ` AND ZTB_QLSXPLAN.PLAN_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE}' `;
  }
  if (DATA.PROD_REQUEST_NO !== "") {
    condition += ` AND ZTB_QLSXPLAN.PROD_REQUEST_NO= '${DATA.PROD_REQUEST_NO}'`;
  }
  if (DATA.PLAN_ID !== "") {
    condition += ` AND ZTB_QLSXPLAN.PLAN_ID = '${DATA.PLAN_ID}'`;
  }
  if (DATA.M_CODE !== "") {
    condition += ` AND P500A.M_CODE ='${DATA.M_CODE}'`;
  }
  if (DATA.M_NAME !== "") {
    condition += ` AND M090.M_NAME LIKE '%${DATA.M_NAME}%'`;
  }
  if (DATA.G_CODE !== "") {
    condition += ` AND M100.G_CODE = '${DATA.G_CODE}'`;
  }
  if (DATA.G_NAME !== "") {
    condition += ` AND M100.G_NAME LIKE '%${DATA.G_NAME}%'`;
  }
  if (DATA.FACTORY !== "ALL") {
    condition += ` AND ZTB_QLSXPLAN.PLAN_FACTORY = '${DATA.FACTORY}'`;
  }
  if (DATA.MACHINE !== "ALL") {
    condition += ` AND SUBSTRING(ZTB_QLSXPLAN.PLAN_EQ,1,2) = '${DATA.MACHINE}'`;
  }
  if (DATA.CUST_NAME_KD !== "") {
    condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`;
  }
  let setpdQuery = `  

  WITH P500A AS
  (
    SELECT P500.CTR_CD, P500.PLAN_ID, M_CODE, SUM(isnull(INPUT_QTY,0)) AS INPUT_QTY, SUM(isnull(REMAIN_QTY,0)) AS REMAIN_QTY, SUM(isnull(INPUT_QTY,0)-isnull(REMAIN_QTY,0)) AS USED_QTY, SUM(isnull(PR_NG,0)) AS PR_NG, SUM(isnull(SETTING_MET,0)) AS SETTING_MET, SUM(isnull(P501.TEMP_QTY ,0)) AS OK_EA, MAX(isnull(P500.M_PRICE,0)) AS M_PRICE
    FROM P500 
    LEFT JOIN P501 ON (P500.CTR_CD = P501.CTR_CD AND P500.PROCESS_IN_DATE = P501.PROCESS_IN_DATE AND P500.PROCESS_IN_NO = P501.PROCESS_IN_NO AND P500.PROCESS_IN_SEQ = P501.PROCESS_IN_SEQ)
    WHERE P500.PLAN_ID is not null AND P500.M_LOT_NO <> '' AND (P501.REMARK <> 'HUY TEM' OR P501.REMARK is null) GROUP BY P500.CTR_CD, P500.PLAN_ID, M_CODE
  ),
  OUTFILMTB AS
  (
  SELECT CTR_CD,PLAN_ID, COUNT(KNIFE_FILM_NO) AS FILM_OUT_TIMES  FROM OUT_KNIFE_FILM WHERE LOAIBANGIAO_PDP = 'F' GROUP BY  CTR_CD,PLAN_ID, QTY_KNIFE_FILM
  )
  ,
  P3_1 AS
  (
  SELECT 
  ZTB_QLSXPLAN.PLAN_ID, ZTB_QLSXPLAN.PLAN_DATE,ZTB_QLSXPLAN.PLAN_QTY, ZTB_SX_RESULT.SX_DATE, ZTB_QLSXPLAN.PLAN_EQ, ZTB_SX_RESULT.EQ_NAME, ZTB_SX_RESULT.INS_EMPL, CONCAT(ZTBEMPLINFO.MIDLAST_NAME,' ', ZTBEMPLINFO.FIRST_NAME) AS FULL_NAME,  ZTB_QLSXPLAN.PROD_REQUEST_NO,ZTB_QLSXPLAN.G_CODE,M100.G_NAME, M100.G_NAME_KD, M100.DESCR, P500A.M_CODE, M090.M_NAME, M090.WIDTH_CD, P500A.M_PRICE, P500A.USED_QTY, P500A.PR_NG, P500A.SETTING_MET, isnull(P500A.OK_EA*ZTB_SX_RESULT.PD*1.0/ZTB_SX_RESULT.CAVITY,0)/1000 AS OK_MET, P500A.OK_EA,
  isnull(CASE 
  WHEN ZTB_QLSXPLAN.PROCESS_NUMBER = 1 THEN ZTB_DM_HISTORY.LOSS_SETTING1 
  WHEN ZTB_QLSXPLAN.PROCESS_NUMBER = 2 THEN ZTB_DM_HISTORY.LOSS_SETTING2 
  WHEN ZTB_QLSXPLAN.PROCESS_NUMBER = 3 THEN ZTB_DM_HISTORY.LOSS_SETTING3 
  WHEN ZTB_QLSXPLAN.PROCESS_NUMBER = 4 THEN ZTB_DM_HISTORY.LOSS_SETTING4
  ELSE 0
  END,0) AS DM_SETTING,
  isnull(CASE 
  WHEN ZTB_QLSXPLAN.PROCESS_NUMBER = 1 THEN ZTB_DM_HISTORY.LOSS_SX1 
  WHEN ZTB_QLSXPLAN.PROCESS_NUMBER = 2 THEN ZTB_DM_HISTORY.LOSS_SX2 
  WHEN ZTB_QLSXPLAN.PROCESS_NUMBER = 3 THEN ZTB_DM_HISTORY.LOSS_SX3 
  WHEN ZTB_QLSXPLAN.PROCESS_NUMBER = 4 THEN ZTB_DM_HISTORY.LOSS_SX4
  ELSE 0
  END,0) AS DM_LOSS_SX,
  M100.PD,
  CASE 
  WHEN SUBSTRING(ZTB_SX_RESULT.EQ_NAME,1,2) = 'LT' THEN 1.7
  WHEN SUBSTRING(ZTB_SX_RESULT.EQ_NAME,1,2) = 'FL' THEN 1.5
  WHEN SUBSTRING(ZTB_SX_RESULT.EQ_NAME,1,2) = 'TR' THEN 1.6
  ELSE 0 END AS DON_GIA_IN,
  M100.PROD_PRINT_TIMES,
  isnull(OUTFILMTB.FILM_OUT_TIMES,0) AS FILM_OUT_TIMES
  FROM ZTB_QLSXPLAN
  LEFT JOIN OUTFILMTB ON OUTFILMTB.CTR_CD = ZTB_QLSXPLAN.CTR_CD  AND OUTFILMTB.PLAN_ID = ZTB_QLSXPLAN.PLAN_ID
  LEFT JOIN P500A ON P500A.CTR_CD = ZTB_QLSXPLAN.CTR_CD AND P500A.PLAN_ID = ZTB_QLSXPLAN.PLAN_ID
  LEFT JOIN M090 ON M090.CTR_CD = P500A.CTR_CD AND M090.M_CODE = P500A.M_CODE
  LEFT JOIN ZTB_SX_RESULT ON ZTB_SX_RESULT.CTR_CD = ZTB_QLSXPLAN.CTR_CD AND ZTB_SX_RESULT.PLAN_ID = ZTB_QLSXPLAN.PLAN_ID
  LEFT JOIN ZTBEMPLINFO ON ZTBEMPLINFO.CTR_CD = ZTB_SX_RESULT.CTR_CD AND ZTBEMPLINFO.EMPL_NO = ZTB_SX_RESULT.INS_EMPL 
  LEFT JOIN M100 ON M100.CTR_CD = ZTB_QLSXPLAN.CTR_CD AND M100.G_CODE = ZTB_QLSXPLAN.G_CODE
  LEFT JOIN P400 ON P400.CTR_CD = ZTB_QLSXPLAN.CTR_CD AND P400.PROD_REQUEST_NO = ZTB_QLSXPLAN.PROD_REQUEST_NO
  LEFT JOIN M110 ON M110.CTR_CD = P400.CTR_CD AND M110.CUST_CD = P400.CUST_CD
  LEFT JOIN ZTB_DM_HISTORY ON ZTB_DM_HISTORY.CTR_CD = ZTB_QLSXPLAN.CTR_CD AND  ZTB_DM_HISTORY.PROD_REQUEST_NO = ZTB_QLSXPLAN.PROD_REQUEST_NO
  WHERE ZTB_SX_RESULT.PLAN_ID is not null AND P400.PL_HANG='TT' AND P400.CODE_55 <> '04' AND ZTB_QLSXPLAN.STEP = 0 AND ZTB_SX_RESULT.MASS_END_TIME is not null AND ZTB_QLSXPLAN.PLAN_DATE > '2024-01-01' AND P500A.M_CODE is not null ${condition}
  )
  SELECT P3_1.*, (DM_SETTING - SETTING_MET) AS THUA_THIEU_MET, (DM_SETTING - SETTING_MET)*WIDTH_CD*1.0/1000 AS THUA_THIEU_M2, ((DM_SETTING - SETTING_MET)*WIDTH_CD*1.0/1000)* M_PRICE*0.3 AS THUA_THIEU_AMOUNT, OK_MET*PD*DON_GIA_IN*1.0/1000 AS PRINT_QTY_AMOUNT, isnull(FILM_OUT_TIMES,0)*PROD_PRINT_TIMES * 5000 AS  OUT_FILM_AMOUNT,(((DM_SETTING - SETTING_MET)*WIDTH_CD*1.0/1000)* M_PRICE*0.3 + OK_MET*PD*DON_GIA_IN*1.0/1000 + isnull(FILM_OUT_TIMES,0)*PROD_PRINT_TIMES * 5000) AS TOTAL_P3_AMOUNT   FROM P3_1
  
  `;
  //${moment().format('YYYY-MM-DD')}
  console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.update_M_PRICE_P500 = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
  UPDATE P500
  SET P500.M_PRICE = isnull(ZTB_MATERIAL_TB.CMSPRICE,0)
  FROM P500 JOIN M090 ON P500.M_CODE = M090.M_CODE AND P500.CTR_CD = M090.CTR_CD
  JOIN ZTB_MATERIAL_TB ON M090.M_NAME = ZTB_MATERIAL_TB.M_NAME AND M090.CTR_CD = ZTB_MATERIAL_TB.CTR_CD
  WHERE P500.M_LOT_NO <> '' AND P500.PLAN_ID is not null AND (P500.M_PRICE = 0 OR P500.M_PRICE is null);`;
  //${moment().format('YYYY-MM-DD')}
  ////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.checkProcessLotNoInfo = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `SELECT P501.*, CAST(P501.TEMP_QTY * ZTB_SX_RESULT.PD * 1.0 /ZTB_SX_RESULT.CAVITY/1000 AS int) AS BTP_MET FROM P501 LEFT JOIN ZTB_SX_RESULT ON ZTB_SX_RESULT.PLAN_ID = P501.PLAN_ID WHERE PROCESS_LOT_NO = '${DATA.PROCESS_LOT_NO}' AND P501.CTR_CD = '${DATA.CTR_CD}'`;
  //${moment().format('YYYY-MM-DD')}
  ////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.common = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `SELECT * FROM ZTB_QLSXCHITHI WHERE CTR_CD='${DATA.CTR_CD}' AND PLAN_ID='${DATA.PLAN_ID}' AND M_CODE='${DATA.M_CODE}'`;
  //${moment().format('YYYY-MM-DD')}
  ////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.common = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `SELECT * FROM ZTB_QLSXCHITHI WHERE CTR_CD='${DATA.CTR_CD}' AND PLAN_ID='${DATA.PLAN_ID}' AND M_CODE='${DATA.M_CODE}'`;
  //${moment().format('YYYY-MM-DD')}
  ////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.common = async (req, res, DATA) => {
};