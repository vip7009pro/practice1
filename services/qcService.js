const { queryDB, queryDB_New, queryDB_New2 } = require("../config/database");
const {
  generate_condition_get_dtc_data,
  generate_condition_get_inspection_ng_data,
  generate_condition_get_inspection_output,
  generate_condition_get_inspection_input,
  generate_condition_get_inspection_inoutycsx,
  generate_condition_pqc3,
  generate_condition_pqc1,
} = require("../utils/sqlUtils");
const moment = require("moment");
exports.updatenndscs = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
    UPDATE CS_CONFIRM_TABLE SET NG_NHAN=N'${DATA.NG_NHAN}', DOI_SACH=N'${DATA.DOI_SACH}' WHERE CTR_CD='${DATA.CTR_CD}' AND CONFIRM_ID=${DATA.CONFIRM_ID}
    `;
  console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.updateCSImageStatus = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
    UPDATE CS_CONFIRM_TABLE SET LINK='Y' WHERE CTR_CD='${DATA.CTR_CD}' AND CONFIRM_ID=${DATA.CONFIRM_ID}
    `;
  console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.updateCSDoiSachVNStatus = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
    UPDATE CS_CONFIRM_TABLE SET DS_VN='Y' WHERE CTR_CD='${DATA.CTR_CD}' AND CONFIRM_ID=${DATA.CONFIRM_ID}
    `;
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.updateCSDoiSachKRStatus = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
    UPDATE CS_CONFIRM_TABLE SET DS_KR='Y' WHERE CTR_CD='${DATA.CTR_CD}' AND  CONFIRM_ID=${DATA.CONFIRM_ID}
    `;
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.tracsconfirm = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = `WHERE CS_CONFIRM_TABLE.CONFIRM_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE}'`;
  if (DATA.G_NAME !== "")
    condition += ` AND M100.G_NAME LIKE '%${DATA.G_NAME}%'`;
  if (DATA.G_CODE !== "") condition += ` AND M100.G_CODE = '${DATA.G_CODE}'`;
  if (DATA.PROD_REQUEST_NO !== "")
    condition += ` AND CS_CONFIRM_TABLE.PROD_REQUEST_NO = '${DATA.PROD_REQUEST_NO}'`;
  if (DATA.CUST_NAME_KD !== "")
    condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`;
  let setpdQuery = ` 
  SELECT CONCAT(datepart(YEAR,CS_CONFIRM_TABLE.CONFIRM_DATE),'_',datepart(ISO_WEEK,DATEADD(day,1,CS_CONFIRM_TABLE.CONFIRM_DATE))) AS YEAR_WEEK,CS_CONFIRM_TABLE.CONFIRM_ID,CS_CONFIRM_TABLE.CONFIRM_DATE,CS_CONFIRM_TABLE.CONTACT_ID,CS_CONFIRM_TABLE.CS_EMPL_NO,M010.EMPL_NAME,CS_CONFIRM_TABLE.G_CODE,M100.G_NAME,M100.G_NAME_KD,CS_CONFIRM_TABLE.PROD_REQUEST_NO,CS_CONFIRM_TABLE.CUST_CD,M110.CUST_NAME_KD,CS_CONFIRM_TABLE.CONTENT,CS_CONFIRM_TABLE.INSPECT_QTY,CS_CONFIRM_TABLE.NG_QTY,CS_CONFIRM_TABLE.REPLACE_RATE,CS_CONFIRM_TABLE.REDUCE_QTY,CS_CONFIRM_TABLE.FACTOR,CS_CONFIRM_TABLE.RESULT,CS_CONFIRM_TABLE.CONFIRM_STATUS,CS_CONFIRM_TABLE.REMARK,CS_CONFIRM_TABLE.INS_DATETIME,CS_CONFIRM_TABLE.PHANLOAI,CS_CONFIRM_TABLE.LINK,M100.PROD_TYPE,M100.PROD_MODEL,M100.PROD_PROJECT,M100.PROD_LAST_PRICE, (M100.PROD_LAST_PRICE*CS_CONFIRM_TABLE.REDUCE_QTY) AS REDUCE_AMOUNT, DS_VN, DS_KR, NG_NHAN, DOI_SACH
  FROM CS_CONFIRM_TABLE
  LEFT JOIN M010 ON (M010.EMPL_NO = CS_CONFIRM_TABLE.CS_EMPL_NO AND M010.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)
  LEFT JOIN M100 ON (M100.G_CODE = CS_CONFIRM_TABLE.G_CODE AND M100.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)
  LEFT JOIN M110 ON (M110.CUST_CD = CS_CONFIRM_TABLE.CUST_CD AND M110.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)
  ${condition} AND CS_CONFIRM_TABLE.CTR_CD='${DATA.CTR_CD}'
  ORDER BY CONFIRM_DATE DESC `;
  //${moment().format('YYYY-MM-DD')}
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.tracsrma = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = `WHERE CS_RMA_TABLE.RETURN_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE}'`;
  if (DATA.G_NAME !== "")
    condition += ` AND M100.G_NAME LIKE '%${DATA.G_NAME}%'`;
  if (DATA.G_CODE !== "") condition += ` AND M100.G_CODE = '${DATA.G_CODE}'`;
  if (DATA.PROD_REQUEST_NO !== "")
    condition += ` AND CS_RMA_TABLE.PROD_REQUEST_NO = '${DATA.PROD_REQUEST_NO}'`;
  if (DATA.CUST_NAME_KD !== "")
    condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`;
  let setpdQuery = ` 
  SELECT CS_RMA_TABLE.RMA_ID,CS_RMA_TABLE.CONFIRM_ID,M100.G_NAME_KD, CS_RMA_TABLE.RETURN_DATE,CS_RMA_TABLE.PROD_REQUEST_NO,CS_RMA_TABLE.G_CODE,CS_RMA_TABLE.RMA_TYPE,CS_RMA_TABLE.RMA_EMPL_NO,CS_RMA_TABLE.INS_DATETIME,CS_RMA_TABLE.FACTORY,CS_RMA_TABLE.RETURN_QTY,isnull(SORTING_TB.SORTING_OK_QTY,0) AS SORTING_OK_QTY,isnull(CS_RMA_TABLE.RETURN_QTY-SORTING_TB.SORTING_OK_QTY,0) AS SORTING_NG_QTY,isnull(DELIV_TB.RMA_DELIVERY_QTY,0) AS RMA_DELIVERY_QTY,
  M100.PROD_LAST_PRICE, (M100.PROD_LAST_PRICE*CS_RMA_TABLE.RETURN_QTY) AS RETURN_AMOUNT,
  (M100.PROD_LAST_PRICE*isnull(SORTING_TB.SORTING_OK_QTY,0)) AS SORTING_OK_AMOUNT,
  (M100.PROD_LAST_PRICE*isnull(CS_RMA_TABLE.RETURN_QTY-SORTING_TB.SORTING_OK_QTY,0)) AS SORTING_NG_AMOUNT,
  M100.G_NAME,M100.PROD_TYPE,M100.PROD_MODEL,CS_CONFIRM_TABLE.CONFIRM_DATE,CS_CONFIRM_TABLE.CS_EMPL_NO,CS_CONFIRM_TABLE.CONTENT,CS_CONFIRM_TABLE.INSPECT_QTY,CS_CONFIRM_TABLE.NG_QTY,CS_CONFIRM_TABLE.REPLACE_RATE,CS_CONFIRM_TABLE.REDUCE_QTY,CS_CONFIRM_TABLE.FACTOR,CS_CONFIRM_TABLE.RESULT,CS_CONFIRM_TABLE.CONFIRM_STATUS,CS_CONFIRM_TABLE.REMARK,CS_CONFIRM_TABLE.PHANLOAI,CS_CONFIRM_TABLE.LINK,M110.CUST_NAME_KD
  FROM CS_RMA_TABLE
  LEFT JOIN (SELECT RMA_ID, CTR_CD, SUM(SORTING_OK_QTY) AS SORTING_OK_QTY FROM CS_SORTING_TABLE GROUP BY RMA_ID, CTR_CD) AS SORTING_TB ON (CS_RMA_TABLE.RMA_ID=SORTING_TB.RMA_ID AND CS_RMA_TABLE.CTR_CD=SORTING_TB.CTR_CD)
  LEFT JOIN (SELECT RMA_ID, CTR_CD, SUM(RMA_DELIVERY_QTY) AS RMA_DELIVERY_QTY FROM CS_RMA_DELIVERY GROUP BY RMA_ID, CTR_CD) AS DELIV_TB ON (CS_RMA_TABLE.RMA_ID=DELIV_TB.RMA_ID AND CS_RMA_TABLE.CTR_CD=DELIV_TB.CTR_CD)
  LEFT JOIN M100 ON (M100.G_CODE = CS_RMA_TABLE.G_CODE AND M100.CTR_CD = CS_RMA_TABLE.CTR_CD)
  LEFT JOIN CS_CONFIRM_TABLE ON (CS_RMA_TABLE.CONFIRM_ID = CS_CONFIRM_TABLE.CONFIRM_ID AND CS_RMA_TABLE.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)
  LEFT JOIN M110 ON (M110.CUST_CD = CS_CONFIRM_TABLE.CUST_CD AND M110.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)
  ${condition} AND CS_RMA_TABLE.CTR_CD='${DATA.CTR_CD}'
  ORDER BY CS_RMA_TABLE.RMA_ID DESC
   `;
  //${moment().format('YYYY-MM-DD')}
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.tracsCNDB = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = `WHERE CS_SPECIAL_APPROVE_TABLE.SA_REQUEST_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE}'`;
  if (DATA.G_NAME !== "")
    condition += ` AND M100.G_NAME LIKE '%${DATA.G_NAME}%'`;
  if (DATA.G_CODE !== "") condition += ` AND M100.G_CODE = '${DATA.G_CODE}'`;
  if (DATA.PROD_REQUEST_NO !== "")
    condition += ` AND CS_SPECIAL_APPROVE_TABLE.PROD_REQUEST_NO = '${DATA.PROD_REQUEST_NO}'`;
  if (DATA.CUST_NAME_KD !== "")
    condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`;
  let setpdQuery = ` 
  SELECT CS_SPECIAL_APPROVE_TABLE.SA_ID, CS_SPECIAL_APPROVE_TABLE.SA_REQUEST_DATE, CS_SPECIAL_APPROVE_TABLE.CONTACT_ID, CS_SPECIAL_APPROVE_TABLE.CS_EMPL_NO,CS_SPECIAL_APPROVE_TABLE.G_CODE,M100.G_NAME, M110.CUST_NAME_KD, CS_SPECIAL_APPROVE_TABLE.PROD_REQUEST_NO, CS_SPECIAL_APPROVE_TABLE.REQUEST_DATETIME, CS_SPECIAL_APPROVE_TABLE.CONTENT, CS_SPECIAL_APPROVE_TABLE.SA_QTY, CS_SPECIAL_APPROVE_TABLE.RESULT, CS_SPECIAL_APPROVE_TABLE.SA_STATUS, CS_SPECIAL_APPROVE_TABLE.SA_REMARK, CS_SPECIAL_APPROVE_TABLE.INS_DATETIME, SA_CUST_CD 
  FROM CS_SPECIAL_APPROVE_TABLE
  LEFT JOIN M100 ON (M100.G_CODE = CS_SPECIAL_APPROVE_TABLE.G_CODE AND M100.CTR_CD = CS_SPECIAL_APPROVE_TABLE.CTR_CD)
  LEFT JOIN M110 ON (M110.CUST_CD = CS_SPECIAL_APPROVE_TABLE.SA_CUST_CD AND M110.CTR_CD = CS_SPECIAL_APPROVE_TABLE.CTR_CD)
  ${condition} AND CS_SPECIAL_APPROVE_TABLE.CTR_CD='${DATA.CTR_CD}'
  ORDER BY CS_SPECIAL_APPROVE_TABLE.SA_ID DESC
   `;
  //${moment().format('YYYY-MM-DD')}
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.tracsTAXI = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = `WHERE CS_TAXI_TABLE.TAXI_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE}'`;
  if (DATA.CUST_NAME_KD !== "")
    condition += ` AND M110_A.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`;
  let setpdQuery = ` 
  SELECT CS_TAXI_TABLE.TAXI_ID, CS_TAXI_TABLE.CONFIRM_ID, CS_TAXI_TABLE.SA_ID, CS_TAXI_TABLE.CHIEU, CS_TAXI_TABLE.CONG_VIEC, CS_TAXI_TABLE.TAXI_DATE, CS_TAXI_TABLE.TAXI_SHIFT, CS_TAXI_TABLE.CS_EMPL_NO, M110.CUST_NAME_KD AS DIEM_DI, M110_A.CUST_NAME_KD AS DIEM_DEN, CS_TAXI_TABLE.TAXI_AMOUNT, CS_TAXI_TABLE.TRANSPORTATION, CS_TAXI_TABLE.TAXI_REMARK,CS_TAXI_TABLE.INS_DATETIME  FROM CS_TAXI_TABLE
  LEFT JOIN M110 ON M110.CUST_CD = CS_TAXI_TABLE.DEPARTURE AND M110.CTR_CD = CS_TAXI_TABLE.CTR_CD
  LEFT JOIN (SELECT * FROM M110) AS M110_A ON M110_A.CUST_CD = CS_TAXI_TABLE.ARRIVAL AND M110_A.CTR_CD = CS_TAXI_TABLE.CTR_CD
  ${condition} AND CS_TAXI_TABLE.CTR_CD='${DATA.CTR_CD}'
  ORDER BY CS_TAXI_TABLE.TAXI_ID DESC
   `;
  //${moment().format('YYYY-MM-DD')}
  console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.csdailyconfirmdata = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = `WHERE PHANLOAI <>'' AND CS_CONFIRM_TABLE.CONFIRM_DATE BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE} 23:59:59' `;
  if (DATA.codeArray.length === 1) {
    condition += ` AND CS_CONFIRM_TABLE.G_CODE='${DATA.codeArray[0]}'`;
  } else if (DATA.codeArray.length > 1) {
    let codeString = ``;
    let codeArStr = DATA.codeArray.map((ele, index) => `'${ele}'`).join(",");
    condition += ` AND CS_CONFIRM_TABLE.G_CODE IN (${codeArStr})`;
  }
  if (DATA.CUST_NAME_KD !== "") {
    condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`;
  }
  let setpdQuery = `
    WITH CS_DATA AS
    (
    SELECT CONCAT(datepart(YEAR,CS_CONFIRM_TABLE.CONFIRM_DATE),'_',datepart(ISO_WEEK,DATEADD(day,1,CS_CONFIRM_TABLE.CONFIRM_DATE))) AS YEAR_WEEK,CS_CONFIRM_TABLE.CONFIRM_ID,CS_CONFIRM_TABLE.CONFIRM_DATE,CS_CONFIRM_TABLE.CONTACT_ID,CS_CONFIRM_TABLE.CS_EMPL_NO,M010.EMPL_NAME,CS_CONFIRM_TABLE.G_CODE,M100.G_NAME,M100.G_NAME_KD,CS_CONFIRM_TABLE.PROD_REQUEST_NO,CS_CONFIRM_TABLE.CUST_CD,M110.CUST_NAME_KD,CS_CONFIRM_TABLE.CONTENT,CS_CONFIRM_TABLE.INSPECT_QTY,CS_CONFIRM_TABLE.NG_QTY,CS_CONFIRM_TABLE.REPLACE_RATE,CS_CONFIRM_TABLE.REDUCE_QTY,CS_CONFIRM_TABLE.FACTOR,CS_CONFIRM_TABLE.RESULT,CS_CONFIRM_TABLE.CONFIRM_STATUS,CS_CONFIRM_TABLE.REMARK,CS_CONFIRM_TABLE.INS_DATETIME,CS_CONFIRM_TABLE.PHANLOAI,CS_CONFIRM_TABLE.LINK,M100.PROD_TYPE,M100.PROD_MODEL,M100.PROD_PROJECT,M100.PROD_LAST_PRICE, (M100.PROD_LAST_PRICE*CS_CONFIRM_TABLE.REDUCE_QTY) AS REDUCE_AMOUNT, CS_CONFIRM_TABLE.CTR_CD
              FROM CS_CONFIRM_TABLE
              LEFT JOIN M010 ON (M010.EMPL_NO = CS_CONFIRM_TABLE.CS_EMPL_NO AND M010.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)
              LEFT JOIN M100 ON (M100.G_CODE = CS_CONFIRM_TABLE.G_CODE AND M100.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)
              LEFT JOIN M110 ON (M110.CUST_CD = CS_CONFIRM_TABLE.CUST_CD AND M110.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)		
              ${condition} AND CS_CONFIRM_TABLE.CTR_CD='${DATA.CTR_CD}'
    )
    SELECT * FROM
    (SELECT CONFIRM_DATE, FACTOR, CONFIRM_ID AS CF_ID FROM CS_DATA) as src
    PIVOT
    (
      COUNT(CF_ID) FOR FACTOR IN ([C],[K])
    )as pvtb
    ORDER BY CONFIRM_DATE DESC
    `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.csweeklyconfirmdata = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = `WHERE PHANLOAI <>'' AND  CS_CONFIRM_TABLE.CONFIRM_DATE BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE} 23:59:59' `;
  if (DATA.codeArray.length === 1) {
    condition += ` AND CS_CONFIRM_TABLE.G_CODE='${DATA.codeArray[0]}'`;
  } else if (DATA.codeArray.length > 1) {
    let codeString = ``;
    let codeArStr = DATA.codeArray.map((ele, index) => `'${ele}'`).join(",");
    condition += ` AND CS_CONFIRM_TABLE.G_CODE IN (${codeArStr})`;
  }
  if (DATA.CUST_NAME_KD !== "") {
    condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`;
  }
  let setpdQuery = `
    WITH CS_DATA AS
    (
    SELECT CONCAT(datepart(YEAR,CS_CONFIRM_TABLE.CONFIRM_DATE),'_',datepart(ISO_WEEK,DATEADD(day,1,CS_CONFIRM_TABLE.CONFIRM_DATE))) AS YEAR_WEEK,CS_CONFIRM_TABLE.CONFIRM_ID,CS_CONFIRM_TABLE.CONFIRM_DATE,CS_CONFIRM_TABLE.CONTACT_ID,CS_CONFIRM_TABLE.CS_EMPL_NO,M010.EMPL_NAME,CS_CONFIRM_TABLE.G_CODE,M100.G_NAME,M100.G_NAME_KD,CS_CONFIRM_TABLE.PROD_REQUEST_NO,CS_CONFIRM_TABLE.CUST_CD,M110.CUST_NAME_KD,CS_CONFIRM_TABLE.CONTENT,CS_CONFIRM_TABLE.INSPECT_QTY,CS_CONFIRM_TABLE.NG_QTY,CS_CONFIRM_TABLE.REPLACE_RATE,CS_CONFIRM_TABLE.REDUCE_QTY,CS_CONFIRM_TABLE.FACTOR,CS_CONFIRM_TABLE.RESULT,CS_CONFIRM_TABLE.CONFIRM_STATUS,CS_CONFIRM_TABLE.REMARK,CS_CONFIRM_TABLE.INS_DATETIME,CS_CONFIRM_TABLE.PHANLOAI,CS_CONFIRM_TABLE.LINK,M100.PROD_TYPE,M100.PROD_MODEL,M100.PROD_PROJECT,M100.PROD_LAST_PRICE, (M100.PROD_LAST_PRICE*CS_CONFIRM_TABLE.REDUCE_QTY) AS REDUCE_AMOUNT, CS_CONFIRM_TABLE.CTR_CD
              FROM CS_CONFIRM_TABLE
              LEFT JOIN M010 ON (M010.EMPL_NO = CS_CONFIRM_TABLE.CS_EMPL_NO AND M010.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)
              LEFT JOIN M100 ON (M100.G_CODE = CS_CONFIRM_TABLE.G_CODE AND M100.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)
              LEFT JOIN M110 ON (M110.CUST_CD = CS_CONFIRM_TABLE.CUST_CD AND M110.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)
              ${condition} AND CS_CONFIRM_TABLE.CTR_CD='${DATA.CTR_CD}'
    )
    SELECT pvtb.CONFIRM_YW, pvtb.[C] AS C, pvtb.[K] AS K FROM
    (SELECT CONCAT(YEAR(CONFIRM_DATE),'_', DATEPART(ISO_WEEK, CONFIRM_DATE)) AS CONFIRM_YW, YEAR(CONFIRM_DATE) AS CONFIRM_YEAR,DATEPART(ISO_WEEK, CONFIRM_DATE) AS CONFIRM_WEEK, FACTOR, CONFIRM_ID AS CF_ID FROM CS_DATA) as src
    PIVOT
    (
      COUNT(CF_ID) FOR FACTOR IN ([C],[K])
    )as pvtb
    ORDER BY pvtb.CONFIRM_YEAR DESC, pvtb.CONFIRM_WEEK DESC
    `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.csmonthlyconfirmdata = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = `WHERE PHANLOAI <>'' AND  CS_CONFIRM_TABLE.CONFIRM_DATE BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE} 23:59:59' `;
  if (DATA.codeArray.length === 1) {
    condition += ` AND CS_CONFIRM_TABLE.G_CODE='${DATA.codeArray[0]}'`;
  } else if (DATA.codeArray.length > 1) {
    let codeString = ``;
    let codeArStr = DATA.codeArray.map((ele, index) => `'${ele}'`).join(",");
    condition += ` AND CS_CONFIRM_TABLE.G_CODE IN (${codeArStr})`;
  }
  if (DATA.CUST_NAME_KD !== "") {
    condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`;
  }
  let setpdQuery = `
    WITH CS_DATA AS
    (
    SELECT CONCAT(datepart(YEAR,CS_CONFIRM_TABLE.CONFIRM_DATE),'_',datepart(ISO_WEEK,DATEADD(day,1,CS_CONFIRM_TABLE.CONFIRM_DATE))) AS YEAR_WEEK,CS_CONFIRM_TABLE.CONFIRM_ID,CS_CONFIRM_TABLE.CONFIRM_DATE,CS_CONFIRM_TABLE.CONTACT_ID,CS_CONFIRM_TABLE.CS_EMPL_NO,M010.EMPL_NAME,CS_CONFIRM_TABLE.G_CODE,M100.G_NAME,M100.G_NAME_KD,CS_CONFIRM_TABLE.PROD_REQUEST_NO,CS_CONFIRM_TABLE.CUST_CD,M110.CUST_NAME_KD,CS_CONFIRM_TABLE.CONTENT,CS_CONFIRM_TABLE.INSPECT_QTY,CS_CONFIRM_TABLE.NG_QTY,CS_CONFIRM_TABLE.REPLACE_RATE,CS_CONFIRM_TABLE.REDUCE_QTY,CS_CONFIRM_TABLE.FACTOR,CS_CONFIRM_TABLE.RESULT,CS_CONFIRM_TABLE.CONFIRM_STATUS,CS_CONFIRM_TABLE.REMARK,CS_CONFIRM_TABLE.INS_DATETIME,CS_CONFIRM_TABLE.PHANLOAI,CS_CONFIRM_TABLE.LINK,M100.PROD_TYPE,M100.PROD_MODEL,M100.PROD_PROJECT,M100.PROD_LAST_PRICE, (M100.PROD_LAST_PRICE*CS_CONFIRM_TABLE.REDUCE_QTY) AS REDUCE_AMOUNT, CS_CONFIRM_TABLE.CTR_CD
              FROM CS_CONFIRM_TABLE
              LEFT JOIN M010 ON (M010.EMPL_NO = CS_CONFIRM_TABLE.CS_EMPL_NO AND M010.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)
              LEFT JOIN M100 ON (M100.G_CODE = CS_CONFIRM_TABLE.G_CODE AND M100.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)
              LEFT JOIN M110 ON (M110.CUST_CD = CS_CONFIRM_TABLE.CUST_CD AND M110.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)
              ${condition} AND CS_CONFIRM_TABLE.CTR_CD='${DATA.CTR_CD}'
    )
    SELECT pvtb.CONFIRM_YM, pvtb.[C] AS C, pvtb.[K] AS K FROM
    (SELECT CONCAT(YEAR(CONFIRM_DATE),'_', DATEPART(MONTH, CONFIRM_DATE)) AS CONFIRM_YM, YEAR(CONFIRM_DATE) AS CONFIRM_YEAR,DATEPART(MONTH, CONFIRM_DATE) AS CONFIRM_MONTH, FACTOR, CONFIRM_ID AS CF_ID, CTR_CD FROM CS_DATA) as src
    PIVOT
    (
      COUNT(CF_ID) FOR FACTOR IN ([C],[K])
    )as pvtb
    ORDER BY pvtb.CONFIRM_YEAR DESC, pvtb.CONFIRM_MONTH DESC
    `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.csyearlyconfirmdata = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = `WHERE PHANLOAI <>'' AND  CS_CONFIRM_TABLE.CONFIRM_DATE BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE} 23:59:59' `;
  if (DATA.codeArray.length === 1) {
    condition += ` AND CS_CONFIRM_TABLE.G_CODE='${DATA.codeArray[0]}'`;
  } else if (DATA.codeArray.length > 1) {
    let codeString = ``;
    let codeArStr = DATA.codeArray.map((ele, index) => `'${ele}'`).join(",");
    condition += ` AND CS_CONFIRM_TABLE.G_CODE IN (${codeArStr})`;
  }
  if (DATA.CUST_NAME_KD !== "") {
    condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`;
  }
  let setpdQuery = `
    WITH CS_DATA AS
    (
    SELECT CONCAT(datepart(YEAR,CS_CONFIRM_TABLE.CONFIRM_DATE),'_',datepart(ISO_WEEK,DATEADD(day,1,CS_CONFIRM_TABLE.CONFIRM_DATE))) AS YEAR_WEEK,CS_CONFIRM_TABLE.CONFIRM_ID,CS_CONFIRM_TABLE.CONFIRM_DATE,CS_CONFIRM_TABLE.CONTACT_ID,CS_CONFIRM_TABLE.CS_EMPL_NO,M010.EMPL_NAME,CS_CONFIRM_TABLE.G_CODE,M100.G_NAME,M100.G_NAME_KD,CS_CONFIRM_TABLE.PROD_REQUEST_NO,CS_CONFIRM_TABLE.CUST_CD,M110.CUST_NAME_KD,CS_CONFIRM_TABLE.CONTENT,CS_CONFIRM_TABLE.INSPECT_QTY,CS_CONFIRM_TABLE.NG_QTY,CS_CONFIRM_TABLE.REPLACE_RATE,CS_CONFIRM_TABLE.REDUCE_QTY,CS_CONFIRM_TABLE.FACTOR,CS_CONFIRM_TABLE.RESULT,CS_CONFIRM_TABLE.CONFIRM_STATUS,CS_CONFIRM_TABLE.REMARK,CS_CONFIRM_TABLE.INS_DATETIME,CS_CONFIRM_TABLE.PHANLOAI,CS_CONFIRM_TABLE.LINK,M100.PROD_TYPE,M100.PROD_MODEL,M100.PROD_PROJECT,M100.PROD_LAST_PRICE, (M100.PROD_LAST_PRICE*CS_CONFIRM_TABLE.REDUCE_QTY) AS REDUCE_AMOUNT, CS_CONFIRM_TABLE.CTR_CD
              FROM CS_CONFIRM_TABLE
              LEFT JOIN M010 ON (M010.EMPL_NO = CS_CONFIRM_TABLE.CS_EMPL_NO AND M010.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)
              LEFT JOIN M100 ON (M100.G_CODE = CS_CONFIRM_TABLE.G_CODE AND M100.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)
              LEFT JOIN M110 ON (M110.CUST_CD = CS_CONFIRM_TABLE.CUST_CD AND M110.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)
              ${condition} AND CS_CONFIRM_TABLE.CTR_CD='${DATA.CTR_CD}'
    )
    SELECT pvtb.CONFIRM_YEAR, pvtb.[C] AS C, pvtb.[K] AS K FROM
    (SELECT  YEAR(CONFIRM_DATE) AS CONFIRM_YEAR, FACTOR, CONFIRM_ID AS CF_ID, CTR_CD FROM CS_DATA) as src
    PIVOT
    (
      COUNT(CF_ID) FOR FACTOR IN ([C],[K])
    )as pvtb
    ORDER BY pvtb.CONFIRM_YEAR DESC
    `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.csConfirmDataByCustomer = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = `WHERE PHANLOAI <>'' AND  CS_CONFIRM_TABLE.CONFIRM_DATE BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE} 23:59:59' `;
  if (DATA.codeArray.length === 1) {
    condition += ` AND CS_CONFIRM_TABLE.G_CODE='${DATA.codeArray[0]}'`;
  } else if (DATA.codeArray.length > 1) {
    let codeString = ``;
    let codeArStr = DATA.codeArray.map((ele, index) => `'${ele}'`).join(",");
    condition += ` AND CS_CONFIRM_TABLE.G_CODE IN (${codeArStr})`;
  }
  if (DATA.CUST_NAME_KD !== "") {
    condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`;
  }
  let setpdQuery = `
    WITH CS_DATA AS
    (
    SELECT CONCAT(datepart(YEAR,CS_CONFIRM_TABLE.CONFIRM_DATE),'_',datepart(ISO_WEEK,DATEADD(day,1,CS_CONFIRM_TABLE.CONFIRM_DATE))) AS YEAR_WEEK,CS_CONFIRM_TABLE.CONFIRM_ID,CS_CONFIRM_TABLE.CONFIRM_DATE,CS_CONFIRM_TABLE.CONTACT_ID,CS_CONFIRM_TABLE.CS_EMPL_NO,M010.EMPL_NAME,CS_CONFIRM_TABLE.G_CODE,M100.G_NAME,M100.G_NAME_KD,CS_CONFIRM_TABLE.PROD_REQUEST_NO,CS_CONFIRM_TABLE.CUST_CD,M110.CUST_NAME_KD,CS_CONFIRM_TABLE.CONTENT,CS_CONFIRM_TABLE.INSPECT_QTY,CS_CONFIRM_TABLE.NG_QTY,CS_CONFIRM_TABLE.REPLACE_RATE,CS_CONFIRM_TABLE.REDUCE_QTY,CS_CONFIRM_TABLE.FACTOR,CS_CONFIRM_TABLE.RESULT,CS_CONFIRM_TABLE.CONFIRM_STATUS,CS_CONFIRM_TABLE.REMARK,CS_CONFIRM_TABLE.INS_DATETIME,CS_CONFIRM_TABLE.PHANLOAI,CS_CONFIRM_TABLE.LINK,M100.PROD_TYPE,M100.PROD_MODEL,M100.PROD_PROJECT,M100.PROD_LAST_PRICE, (M100.PROD_LAST_PRICE*CS_CONFIRM_TABLE.REDUCE_QTY) AS REDUCE_AMOUNT, CS_CONFIRM_TABLE.CTR_CD
              FROM CS_CONFIRM_TABLE
              LEFT JOIN M010 ON (M010.EMPL_NO = CS_CONFIRM_TABLE.CS_EMPL_NO AND M010.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)
              LEFT JOIN M100 ON (M100.G_CODE = CS_CONFIRM_TABLE.G_CODE AND M100.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)
              LEFT JOIN M110 ON (M110.CUST_CD = CS_CONFIRM_TABLE.CUST_CD AND M110.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)
          ${condition} AND CS_CONFIRM_TABLE.CTR_CD='${DATA.CTR_CD}'
    )
    SELECT CUST_NAME_KD, COUNT(CONFIRM_ID) AS  TOTAL FROM CS_DATA GROUP BY CUST_NAME_KD
    ORDER BY  COUNT(CONFIRM_ID) DESC
    `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.csConfirmDataByPIC = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = `WHERE PHANLOAI <>'' AND  CS_CONFIRM_TABLE.CONFIRM_DATE BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE} 23:59:59' `;
  if (DATA.codeArray.length === 1) {
    condition += ` AND CS_CONFIRM_TABLE.G_CODE='${DATA.codeArray[0]}'`;
  } else if (DATA.codeArray.length > 1) {
    let codeString = ``;
    let codeArStr = DATA.codeArray.map((ele, index) => `'${ele}'`).join(",");
    condition += ` AND CS_CONFIRM_TABLE.G_CODE IN (${codeArStr})`;
  }
  if (DATA.CUST_NAME_KD !== "") {
    condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`;
  }
  let setpdQuery = `
    WITH CS_DATA AS
    (
    SELECT CONCAT(datepart(YEAR,CS_CONFIRM_TABLE.CONFIRM_DATE),'_',datepart(ISO_WEEK,DATEADD(day,1,CS_CONFIRM_TABLE.CONFIRM_DATE))) AS YEAR_WEEK,CS_CONFIRM_TABLE.CONFIRM_ID,CS_CONFIRM_TABLE.CONFIRM_DATE,CS_CONFIRM_TABLE.CONTACT_ID,CS_CONFIRM_TABLE.CS_EMPL_NO,M010.EMPL_NAME,CS_CONFIRM_TABLE.G_CODE,M100.G_NAME,M100.G_NAME_KD,CS_CONFIRM_TABLE.PROD_REQUEST_NO,CS_CONFIRM_TABLE.CUST_CD,M110.CUST_NAME_KD,CS_CONFIRM_TABLE.CONTENT,CS_CONFIRM_TABLE.INSPECT_QTY,CS_CONFIRM_TABLE.NG_QTY,CS_CONFIRM_TABLE.REPLACE_RATE,CS_CONFIRM_TABLE.REDUCE_QTY,CS_CONFIRM_TABLE.FACTOR,CS_CONFIRM_TABLE.RESULT,CS_CONFIRM_TABLE.CONFIRM_STATUS,CS_CONFIRM_TABLE.REMARK,CS_CONFIRM_TABLE.INS_DATETIME,CS_CONFIRM_TABLE.PHANLOAI,CS_CONFIRM_TABLE.LINK,M100.PROD_TYPE,M100.PROD_MODEL,M100.PROD_PROJECT,M100.PROD_LAST_PRICE, (M100.PROD_LAST_PRICE*CS_CONFIRM_TABLE.REDUCE_QTY) AS REDUCE_AMOUNT, CS_CONFIRM_TABLE.CTR_CD
              FROM CS_CONFIRM_TABLE
              LEFT JOIN M010 ON (M010.EMPL_NO = CS_CONFIRM_TABLE.CS_EMPL_NO AND M010.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)
              LEFT JOIN M100 ON (M100.G_CODE = CS_CONFIRM_TABLE.G_CODE AND M100.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)
              LEFT JOIN M110 ON (M110.CUST_CD = CS_CONFIRM_TABLE.CUST_CD AND M110.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)
          ${condition} AND CS_CONFIRM_TABLE.CTR_CD='${DATA.CTR_CD}'
    )
    SELECT EMPL_NAME, COUNT(CONFIRM_ID) AS  TOTAL FROM CS_DATA GROUP BY EMPL_NAME
    ORDER BY  COUNT(CONFIRM_ID) DESC
    `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.csdailyreduceamount = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = `WHERE PHANLOAI <>'' AND  CS_CONFIRM_TABLE.CONFIRM_DATE BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE} 23:59:59' `;
  if (DATA.codeArray.length === 1) {
    condition += ` AND CS_CONFIRM_TABLE.G_CODE='${DATA.codeArray[0]}'`;
  } else if (DATA.codeArray.length > 1) {
    let codeString = ``;
    let codeArStr = DATA.codeArray.map((ele, index) => `'${ele}'`).join(",");
    condition += ` AND CS_CONFIRM_TABLE.G_CODE IN (${codeArStr})`;
  }
  let condition2 = ` WHERE RESULT = 'OK' AND  CS_SPECIAL_APPROVE_TABLE.SA_REQUEST_DATE BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE} 23:59:59' `;
  if (DATA.codeArray.length === 1) {
    condition2 += ` AND CS_SPECIAL_APPROVE_TABLE.G_CODE='${DATA.codeArray[0]}'`;
  } else if (DATA.codeArray.length > 1) {
    let codeString = ``;
    let codeArStr = DATA.codeArray.map((ele, index) => `'${ele}'`).join(",");
    condition2 += ` AND CS_SPECIAL_APPROVE_TABLE.G_CODE IN (${codeArStr})`;
  }
  if (DATA.CUST_NAME_KD !== "") {
    condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`;
  }
  let setpdQuery = `
    WITH CS_DATA AS
    (
    SELECT CS_CONFIRM_TABLE.CONFIRM_ID,CS_CONFIRM_TABLE.CONFIRM_DATE,CS_CONFIRM_TABLE.CONTACT_ID,CS_CONFIRM_TABLE.CS_EMPL_NO,M010.EMPL_NAME,CS_CONFIRM_TABLE.G_CODE,M100.G_NAME,M100.G_NAME_KD,CS_CONFIRM_TABLE.PROD_REQUEST_NO,CS_CONFIRM_TABLE.CUST_CD,M110.CUST_NAME_KD,CS_CONFIRM_TABLE.CONTENT,CS_CONFIRM_TABLE.INSPECT_QTY,CS_CONFIRM_TABLE.NG_QTY,CS_CONFIRM_TABLE.REPLACE_RATE,CS_CONFIRM_TABLE.REDUCE_QTY,CS_CONFIRM_TABLE.FACTOR,CS_CONFIRM_TABLE.RESULT,CS_CONFIRM_TABLE.CONFIRM_STATUS,CS_CONFIRM_TABLE.REMARK,CS_CONFIRM_TABLE.INS_DATETIME,CS_CONFIRM_TABLE.PHANLOAI,CS_CONFIRM_TABLE.LINK,M100.PROD_TYPE,M100.PROD_MODEL,M100.PROD_PROJECT,M100.PROD_LAST_PRICE, (M100.PROD_LAST_PRICE*CS_CONFIRM_TABLE.REDUCE_QTY) AS REDUCE_AMOUNT, CS_CONFIRM_TABLE.CTR_CD
              FROM CS_CONFIRM_TABLE
              LEFT JOIN M010 ON (M010.EMPL_NO = CS_CONFIRM_TABLE.CS_EMPL_NO AND M010.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)
              LEFT JOIN M100 ON (M100.G_CODE = CS_CONFIRM_TABLE.G_CODE AND M100.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)
              LEFT JOIN M110 ON (M110.CUST_CD = CS_CONFIRM_TABLE.CUST_CD AND M110.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)
          ${condition} AND CS_CONFIRM_TABLE.CTR_CD='${DATA.CTR_CD}'
    ),
    SA_DATA AS (
    SELECT CS_SPECIAL_APPROVE_TABLE.SA_ID, CS_SPECIAL_APPROVE_TABLE.SA_REQUEST_DATE, CS_SPECIAL_APPROVE_TABLE.CONTACT_ID, CS_SPECIAL_APPROVE_TABLE.CS_EMPL_NO,CS_SPECIAL_APPROVE_TABLE.G_CODE,M100.G_NAME, M110.CUST_NAME_KD, CS_SPECIAL_APPROVE_TABLE.PROD_REQUEST_NO, CS_SPECIAL_APPROVE_TABLE.REQUEST_DATETIME, CS_SPECIAL_APPROVE_TABLE.CONTENT, CS_SPECIAL_APPROVE_TABLE.SA_QTY, (CS_SPECIAL_APPROVE_TABLE.SA_QTY * M100.PROD_LAST_PRICE) AS SA_AMOUNT, CS_SPECIAL_APPROVE_TABLE.RESULT, CS_SPECIAL_APPROVE_TABLE.SA_STATUS, CS_SPECIAL_APPROVE_TABLE.SA_REMARK, CS_SPECIAL_APPROVE_TABLE.INS_DATETIME, SA_CUST_CD, CS_SPECIAL_APPROVE_TABLE.CTR_CD
              FROM CS_SPECIAL_APPROVE_TABLE
              LEFT JOIN M100 ON (M100.G_CODE = CS_SPECIAL_APPROVE_TABLE.G_CODE AND M100.CTR_CD = CS_SPECIAL_APPROVE_TABLE.CTR_CD)
              LEFT JOIN M110 ON (M110.CUST_CD = CS_SPECIAL_APPROVE_TABLE.SA_CUST_CD AND M110.CTR_CD = CS_SPECIAL_APPROVE_TABLE.CTR_CD)
         ${condition2} AND CS_SPECIAL_APPROVE_TABLE.CTR_CD='${DATA.CTR_CD}'
    ),
    REDUCE_TB AS
    (
    SELECT CONFIRM_DATE, SUM(REDUCE_AMOUNT) AS REDUCE_AMOUNT FROM CS_DATA GROUP BY CONFIRM_DATE
    ),
    SA_TB AS
    (
      SELECT SA_REQUEST_DATE, SUM(SA_AMOUNT) AS SA_AMOUNT FROM SA_DATA GROUP BY SA_REQUEST_DATE
    )
    SELECT DATETABLE.DATE_COLUMN AS CONFIRM_DATE, (isnull(REDUCE_TB.REDUCE_AMOUNT,0) + isnull(SA_TB.SA_AMOUNT,0)) AS REDUCE_AMOUNT FROM DATETABLE
    LEFT JOIN REDUCE_TB ON (DATETABLE.DATE_COLUMN = REDUCE_TB.CONFIRM_DATE)
    LEFT JOIN SA_TB ON (SA_TB.SA_REQUEST_DATE = DATETABLE.DATE_COLUMN)
    WHERE DATETABLE.DATE_COLUMN BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE} 23:59:59'
    ORDER BY DATETABLE.DATE_COLUMN DESC
    `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.csweeklyreduceamount = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = `WHERE PHANLOAI <>'' AND  CS_CONFIRM_TABLE.CONFIRM_DATE BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE} 23:59:59' `;
  if (DATA.codeArray.length === 1) {
    condition += ` AND CS_CONFIRM_TABLE.G_CODE='${DATA.codeArray[0]}'`;
  } else if (DATA.codeArray.length > 1) {
    let codeString = ``;
    let codeArStr = DATA.codeArray.map((ele, index) => `'${ele}'`).join(",");
    condition += ` AND CS_CONFIRM_TABLE.G_CODE IN (${codeArStr})`;
  }
  let condition2 = ` WHERE RESULT = 'OK' AND  CS_SPECIAL_APPROVE_TABLE.SA_REQUEST_DATE BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE} 23:59:59' `;
  if (DATA.codeArray.length === 1) {
    condition2 += ` AND CS_SPECIAL_APPROVE_TABLE.G_CODE='${DATA.codeArray[0]}'`;
  } else if (DATA.codeArray.length > 1) {
    let codeString = ``;
    let codeArStr = DATA.codeArray.map((ele, index) => `'${ele}'`).join(",");
    condition2 += ` AND CS_SPECIAL_APPROVE_TABLE.G_CODE IN (${codeArStr})`;
  }
  if (DATA.CUST_NAME_KD !== "") {
    condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`;
  }
  let setpdQuery = `
    WITH CS_DATA AS
    (
    SELECT CS_CONFIRM_TABLE.CONFIRM_ID,CS_CONFIRM_TABLE.CONFIRM_DATE,CS_CONFIRM_TABLE.CONTACT_ID,CS_CONFIRM_TABLE.CS_EMPL_NO,M010.EMPL_NAME,CS_CONFIRM_TABLE.G_CODE,M100.G_NAME,M100.G_NAME_KD,CS_CONFIRM_TABLE.PROD_REQUEST_NO,CS_CONFIRM_TABLE.CUST_CD,M110.CUST_NAME_KD,CS_CONFIRM_TABLE.CONTENT,CS_CONFIRM_TABLE.INSPECT_QTY,CS_CONFIRM_TABLE.NG_QTY,CS_CONFIRM_TABLE.REPLACE_RATE,CS_CONFIRM_TABLE.REDUCE_QTY,CS_CONFIRM_TABLE.FACTOR,CS_CONFIRM_TABLE.RESULT,CS_CONFIRM_TABLE.CONFIRM_STATUS,CS_CONFIRM_TABLE.REMARK,CS_CONFIRM_TABLE.INS_DATETIME,CS_CONFIRM_TABLE.PHANLOAI,CS_CONFIRM_TABLE.LINK,M100.PROD_TYPE,M100.PROD_MODEL,M100.PROD_PROJECT,M100.PROD_LAST_PRICE, (M100.PROD_LAST_PRICE*CS_CONFIRM_TABLE.REDUCE_QTY) AS REDUCE_AMOUNT, CS_CONFIRM_TABLE.CTR_CD
              FROM CS_CONFIRM_TABLE
              LEFT JOIN M010 ON (M010.EMPL_NO = CS_CONFIRM_TABLE.CS_EMPL_NO AND M010.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)
              LEFT JOIN M100 ON (M100.G_CODE = CS_CONFIRM_TABLE.G_CODE AND M100.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)
              LEFT JOIN M110 ON (M110.CUST_CD = CS_CONFIRM_TABLE.CUST_CD AND M110.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)
          ${condition} AND CS_CONFIRM_TABLE.CTR_CD='${DATA.CTR_CD}'
    ),
    SA_DATA AS (
    SELECT CS_SPECIAL_APPROVE_TABLE.SA_ID, CS_SPECIAL_APPROVE_TABLE.SA_REQUEST_DATE, CS_SPECIAL_APPROVE_TABLE.CONTACT_ID, CS_SPECIAL_APPROVE_TABLE.CS_EMPL_NO,CS_SPECIAL_APPROVE_TABLE.G_CODE,M100.G_NAME, M110.CUST_NAME_KD, CS_SPECIAL_APPROVE_TABLE.PROD_REQUEST_NO, CS_SPECIAL_APPROVE_TABLE.REQUEST_DATETIME, CS_SPECIAL_APPROVE_TABLE.CONTENT, CS_SPECIAL_APPROVE_TABLE.SA_QTY, (CS_SPECIAL_APPROVE_TABLE.SA_QTY * M100.PROD_LAST_PRICE) AS SA_AMOUNT, CS_SPECIAL_APPROVE_TABLE.RESULT, CS_SPECIAL_APPROVE_TABLE.SA_STATUS, CS_SPECIAL_APPROVE_TABLE.SA_REMARK, CS_SPECIAL_APPROVE_TABLE.INS_DATETIME, SA_CUST_CD, CS_SPECIAL_APPROVE_TABLE.CTR_CD
              FROM CS_SPECIAL_APPROVE_TABLE
              LEFT JOIN M100 ON (M100.G_CODE = CS_SPECIAL_APPROVE_TABLE.G_CODE AND M100.CTR_CD = CS_SPECIAL_APPROVE_TABLE.CTR_CD)
              LEFT JOIN M110 ON (M110.CUST_CD = CS_SPECIAL_APPROVE_TABLE.SA_CUST_CD AND M110.CTR_CD = CS_SPECIAL_APPROVE_TABLE.CTR_CD)
         ${condition2} AND CS_SPECIAL_APPROVE_TABLE.CTR_CD='${DATA.CTR_CD}'
    ),
    REDUCE_TB AS
    (
    SELECT CONFIRM_DATE, SUM(REDUCE_AMOUNT) AS REDUCE_AMOUNT FROM CS_DATA GROUP BY CONFIRM_DATE
    ),
    SA_TB AS
    (
      SELECT SA_REQUEST_DATE, SUM(SA_AMOUNT) AS SA_AMOUNT FROM SA_DATA GROUP BY SA_REQUEST_DATE
    )
    SELECT YEAR(DATETABLE.DATE_COLUMN) AS CONFIRM_YEAR, DATEPART(ISO_WEEK, DATETABLE.DATE_COLUMN) AS CONFIRM_WEEK, CONCAT(YEAR(DATETABLE.DATE_COLUMN),'_', DATEPART(ISO_WEEK, DATETABLE.DATE_COLUMN)) AS CONFIRM_YW, SUM(isnull(REDUCE_TB.REDUCE_AMOUNT,0) + isnull(SA_TB.SA_AMOUNT,0)) AS REDUCE_AMOUNT 
    FROM DATETABLE
    LEFT JOIN REDUCE_TB ON (DATETABLE.DATE_COLUMN = REDUCE_TB.CONFIRM_DATE)
    LEFT JOIN SA_TB ON (SA_TB.SA_REQUEST_DATE = DATETABLE.DATE_COLUMN)
    WHERE DATETABLE.DATE_COLUMN BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE} 23:59:59' AND DATETABLE.CTR_CD='${DATA.CTR_CD}'      
    GROUP BY CONCAT(YEAR(DATETABLE.DATE_COLUMN),'_', DATEPART(ISO_WEEK, DATETABLE.DATE_COLUMN)), YEAR(DATETABLE.DATE_COLUMN), DATEPART(ISO_WEEK, DATETABLE.DATE_COLUMN)
    ORDER BY YEAR(DATETABLE.DATE_COLUMN) DESC, DATEPART(ISO_WEEK, DATETABLE.DATE_COLUMN) DESC
    `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.csmonthlyreduceamount = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = `WHERE PHANLOAI <>'' AND  CS_CONFIRM_TABLE.CONFIRM_DATE BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE} 23:59:59' `;
  if (DATA.codeArray.length === 1) {
    condition += ` AND CS_CONFIRM_TABLE.G_CODE='${DATA.codeArray[0]}'`;
  } else if (DATA.codeArray.length > 1) {
    let codeString = ``;
    let codeArStr = DATA.codeArray.map((ele, index) => `'${ele}'`).join(",");
    condition += ` AND CS_CONFIRM_TABLE.G_CODE IN (${codeArStr})`;
  }
  let condition2 = ` WHERE RESULT = 'OK' AND  CS_SPECIAL_APPROVE_TABLE.SA_REQUEST_DATE BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE} 23:59:59' `;
  if (DATA.codeArray.length === 1) {
    condition2 += ` AND CS_SPECIAL_APPROVE_TABLE.G_CODE='${DATA.codeArray[0]}'`;
  } else if (DATA.codeArray.length > 1) {
    let codeString = ``;
    let codeArStr = DATA.codeArray.map((ele, index) => `'${ele}'`).join(",");
    condition2 += ` AND CS_SPECIAL_APPROVE_TABLE.G_CODE IN (${codeArStr})`;
  }
  if (DATA.CUST_NAME_KD !== "") {
    condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`;
  }
  let setpdQuery = `
    WITH CS_DATA AS
    (
    SELECT CS_CONFIRM_TABLE.CONFIRM_ID,CS_CONFIRM_TABLE.CONFIRM_DATE,CS_CONFIRM_TABLE.CONTACT_ID,CS_CONFIRM_TABLE.CS_EMPL_NO,M010.EMPL_NAME,CS_CONFIRM_TABLE.G_CODE,M100.G_NAME,M100.G_NAME_KD,CS_CONFIRM_TABLE.PROD_REQUEST_NO,CS_CONFIRM_TABLE.CUST_CD,M110.CUST_NAME_KD,CS_CONFIRM_TABLE.CONTENT,CS_CONFIRM_TABLE.INSPECT_QTY,CS_CONFIRM_TABLE.NG_QTY,CS_CONFIRM_TABLE.REPLACE_RATE,CS_CONFIRM_TABLE.REDUCE_QTY,CS_CONFIRM_TABLE.FACTOR,CS_CONFIRM_TABLE.RESULT,CS_CONFIRM_TABLE.CONFIRM_STATUS,CS_CONFIRM_TABLE.REMARK,CS_CONFIRM_TABLE.INS_DATETIME,CS_CONFIRM_TABLE.PHANLOAI,CS_CONFIRM_TABLE.LINK,M100.PROD_TYPE,M100.PROD_MODEL,M100.PROD_PROJECT,M100.PROD_LAST_PRICE, (M100.PROD_LAST_PRICE*CS_CONFIRM_TABLE.REDUCE_QTY) AS REDUCE_AMOUNT, CS_CONFIRM_TABLE.CTR_CD
              FROM CS_CONFIRM_TABLE
              LEFT JOIN M010 ON (M010.EMPL_NO = CS_CONFIRM_TABLE.CS_EMPL_NO AND M010.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)
              LEFT JOIN M100 ON (M100.G_CODE = CS_CONFIRM_TABLE.G_CODE AND M100.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)
              LEFT JOIN M110 ON (M110.CUST_CD = CS_CONFIRM_TABLE.CUST_CD AND M110.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)
          ${condition}
    ),
    SA_DATA AS (
    SELECT CS_SPECIAL_APPROVE_TABLE.SA_ID, CS_SPECIAL_APPROVE_TABLE.SA_REQUEST_DATE, CS_SPECIAL_APPROVE_TABLE.CONTACT_ID, CS_SPECIAL_APPROVE_TABLE.CS_EMPL_NO,CS_SPECIAL_APPROVE_TABLE.G_CODE,M100.G_NAME, M110.CUST_NAME_KD, CS_SPECIAL_APPROVE_TABLE.PROD_REQUEST_NO, CS_SPECIAL_APPROVE_TABLE.REQUEST_DATETIME, CS_SPECIAL_APPROVE_TABLE.CONTENT, CS_SPECIAL_APPROVE_TABLE.SA_QTY, (CS_SPECIAL_APPROVE_TABLE.SA_QTY * M100.PROD_LAST_PRICE) AS SA_AMOUNT, CS_SPECIAL_APPROVE_TABLE.RESULT, CS_SPECIAL_APPROVE_TABLE.SA_STATUS, CS_SPECIAL_APPROVE_TABLE.SA_REMARK, CS_SPECIAL_APPROVE_TABLE.INS_DATETIME, SA_CUST_CD, CS_SPECIAL_APPROVE_TABLE.CTR_CD
              FROM CS_SPECIAL_APPROVE_TABLE
              LEFT JOIN M100 ON (M100.G_CODE = CS_SPECIAL_APPROVE_TABLE.G_CODE AND M100.CTR_CD = CS_SPECIAL_APPROVE_TABLE.CTR_CD)
              LEFT JOIN M110 ON (M110.CUST_CD = CS_SPECIAL_APPROVE_TABLE.SA_CUST_CD AND M110.CTR_CD = CS_SPECIAL_APPROVE_TABLE.CTR_CD)
         ${condition2}
    ),
    REDUCE_TB AS
    (
    SELECT CONFIRM_DATE, SUM(REDUCE_AMOUNT) AS REDUCE_AMOUNT, CTR_CD FROM CS_DATA GROUP BY CONFIRM_DATE, CTR_CD
    ),
    SA_TB AS
    (
      SELECT SA_REQUEST_DATE, SUM(SA_AMOUNT) AS SA_AMOUNT, CTR_CD FROM SA_DATA GROUP BY SA_REQUEST_DATE, CTR_CD
    )
    SELECT YEAR(DATETABLE.DATE_COLUMN) AS CONFIRM_YEAR, MONTH(DATETABLE.DATE_COLUMN) AS CONFIRM_MONTH, CONCAT(YEAR(DATETABLE.DATE_COLUMN),'_', MONTH(DATETABLE.DATE_COLUMN)) AS CONFIRM_YM, SUM(isnull(REDUCE_TB.REDUCE_AMOUNT,0) + isnull(SA_TB.SA_AMOUNT,0)) AS REDUCE_AMOUNT 
    FROM DATETABLE
    LEFT JOIN REDUCE_TB ON (DATETABLE.DATE_COLUMN = REDUCE_TB.CONFIRM_DATE AND DATETABLE.CTR_CD = REDUCE_TB.CTR_CD)
    LEFT JOIN SA_TB ON (SA_TB.SA_REQUEST_DATE = DATETABLE.DATE_COLUMN AND DATETABLE.CTR_CD = SA_TB.CTR_CD)
    WHERE DATETABLE.DATE_COLUMN BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE} 23:59:59' AND DATETABLE.CTR_CD='${DATA.CTR_CD}'      
    GROUP BY CONCAT(YEAR(DATETABLE.DATE_COLUMN),'_', MONTH(DATETABLE.DATE_COLUMN)), YEAR(DATETABLE.DATE_COLUMN), MONTH(DATETABLE.DATE_COLUMN)
    ORDER BY YEAR(DATETABLE.DATE_COLUMN) DESC, MONTH(DATETABLE.DATE_COLUMN) DESC
    `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.csyearlyreduceamount = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = `WHERE PHANLOAI <>'' AND  CS_CONFIRM_TABLE.CONFIRM_DATE BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE} 23:59:59' `;
  if (DATA.codeArray.length === 1) {
    condition += ` AND CS_CONFIRM_TABLE.G_CODE='${DATA.codeArray[0]}'`;
  } else if (DATA.codeArray.length > 1) {
    let codeString = ``;
    let codeArStr = DATA.codeArray.map((ele, index) => `'${ele}'`).join(",");
    condition += ` AND CS_CONFIRM_TABLE.G_CODE IN (${codeArStr})`;
  }
  let condition2 = ` WHERE RESULT = 'OK' AND  CS_SPECIAL_APPROVE_TABLE.SA_REQUEST_DATE BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE} 23:59:59' `;
  if (DATA.codeArray.length === 1) {
    condition2 += ` AND CS_SPECIAL_APPROVE_TABLE.G_CODE='${DATA.codeArray[0]}'`;
  } else if (DATA.codeArray.length > 1) {
    let codeString = ``;
    let codeArStr = DATA.codeArray.map((ele, index) => `'${ele}'`).join(",");
    condition2 += ` AND CS_SPECIAL_APPROVE_TABLE.G_CODE IN (${codeArStr})`;
  }
  if (DATA.CUST_NAME_KD !== "") {
    condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`;
  }
  let setpdQuery = `
    WITH CS_DATA AS
    (
    SELECT CS_CONFIRM_TABLE.CONFIRM_ID,CS_CONFIRM_TABLE.CONFIRM_DATE,CS_CONFIRM_TABLE.CONTACT_ID,CS_CONFIRM_TABLE.CS_EMPL_NO,M010.EMPL_NAME,CS_CONFIRM_TABLE.G_CODE,M100.G_NAME,M100.G_NAME_KD,CS_CONFIRM_TABLE.PROD_REQUEST_NO,CS_CONFIRM_TABLE.CUST_CD,M110.CUST_NAME_KD,CS_CONFIRM_TABLE.CONTENT,CS_CONFIRM_TABLE.INSPECT_QTY,CS_CONFIRM_TABLE.NG_QTY,CS_CONFIRM_TABLE.REPLACE_RATE,CS_CONFIRM_TABLE.REDUCE_QTY,CS_CONFIRM_TABLE.FACTOR,CS_CONFIRM_TABLE.RESULT,CS_CONFIRM_TABLE.CONFIRM_STATUS,CS_CONFIRM_TABLE.REMARK,CS_CONFIRM_TABLE.INS_DATETIME,CS_CONFIRM_TABLE.PHANLOAI,CS_CONFIRM_TABLE.LINK,M100.PROD_TYPE,M100.PROD_MODEL,M100.PROD_PROJECT,M100.PROD_LAST_PRICE, (M100.PROD_LAST_PRICE*CS_CONFIRM_TABLE.REDUCE_QTY) AS REDUCE_AMOUNT, CS_CONFIRM_TABLE.CTR_CD
              FROM CS_CONFIRM_TABLE
              LEFT JOIN M010 ON (M010.EMPL_NO = CS_CONFIRM_TABLE.CS_EMPL_NO AND M010.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)
              LEFT JOIN M100 ON (M100.G_CODE = CS_CONFIRM_TABLE.G_CODE AND M100.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)
              LEFT JOIN M110 ON (M110.CUST_CD = CS_CONFIRM_TABLE.CUST_CD AND M110.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)
          ${condition}
    ),
    SA_DATA AS (
    SELECT CS_SPECIAL_APPROVE_TABLE.SA_ID, CS_SPECIAL_APPROVE_TABLE.SA_REQUEST_DATE, CS_SPECIAL_APPROVE_TABLE.CONTACT_ID, CS_SPECIAL_APPROVE_TABLE.CS_EMPL_NO,CS_SPECIAL_APPROVE_TABLE.G_CODE,M100.G_NAME, M110.CUST_NAME_KD, CS_SPECIAL_APPROVE_TABLE.PROD_REQUEST_NO, CS_SPECIAL_APPROVE_TABLE.REQUEST_DATETIME, CS_SPECIAL_APPROVE_TABLE.CONTENT, CS_SPECIAL_APPROVE_TABLE.SA_QTY, (CS_SPECIAL_APPROVE_TABLE.SA_QTY * M100.PROD_LAST_PRICE) AS SA_AMOUNT, CS_SPECIAL_APPROVE_TABLE.RESULT, CS_SPECIAL_APPROVE_TABLE.SA_STATUS, CS_SPECIAL_APPROVE_TABLE.SA_REMARK, CS_SPECIAL_APPROVE_TABLE.INS_DATETIME, SA_CUST_CD, CS_SPECIAL_APPROVE_TABLE.CTR_CD
              FROM CS_SPECIAL_APPROVE_TABLE
              LEFT JOIN M100 ON (M100.G_CODE = CS_SPECIAL_APPROVE_TABLE.G_CODE AND M100.CTR_CD = CS_SPECIAL_APPROVE_TABLE.CTR_CD)
              LEFT JOIN M110 ON (M110.CUST_CD = CS_SPECIAL_APPROVE_TABLE.SA_CUST_CD AND M110.CTR_CD = CS_SPECIAL_APPROVE_TABLE.CTR_CD)
         ${condition2}
    ),
    REDUCE_TB AS
    (
    SELECT CONFIRM_DATE, SUM(REDUCE_AMOUNT) AS REDUCE_AMOUNT, CTR_CD FROM CS_DATA GROUP BY CONFIRM_DATE, CTR_CD
    ),
    SA_TB AS
    (
      SELECT SA_REQUEST_DATE, SUM(SA_AMOUNT) AS SA_AMOUNT, CTR_CD FROM SA_DATA GROUP BY SA_REQUEST_DATE, CTR_CD
    )
    SELECT YEAR(DATETABLE.DATE_COLUMN) AS CONFIRM_YEAR, SUM(isnull(REDUCE_TB.REDUCE_AMOUNT,0) + isnull(SA_TB.SA_AMOUNT,0)) AS REDUCE_AMOUNT 
    FROM DATETABLE
    LEFT JOIN REDUCE_TB ON (DATETABLE.DATE_COLUMN = REDUCE_TB.CONFIRM_DATE AND DATETABLE.CTR_CD = REDUCE_TB.CTR_CD)
    LEFT JOIN SA_TB ON (SA_TB.SA_REQUEST_DATE = DATETABLE.DATE_COLUMN AND DATETABLE.CTR_CD = SA_TB.CTR_CD)
    WHERE DATETABLE.DATE_COLUMN BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE} 23:59:59' AND DATETABLE.CTR_CD='${DATA.CTR_CD}'
    GROUP BY YEAR(DATETABLE.DATE_COLUMN)
    ORDER BY YEAR(DATETABLE.DATE_COLUMN) DESC
    `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.csdailyRMAAmount = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = `WHERE CS_RMA_TABLE.RETURN_DATE BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE} 23:59:59' `;
  if (DATA.codeArray.length === 1) {
    condition += ` AND CS_RMA_TABLE.G_CODE='${DATA.codeArray[0]}'`;
  } else if (DATA.codeArray.length > 1) {
    let codeString = ``;
    let codeArStr = DATA.codeArray.map((ele, index) => `'${ele}'`).join(",");
    condition += ` AND CS_RMA_TABLE.G_CODE IN (${codeArStr})`;
  }
  if (DATA.CUST_NAME_KD !== "") {
    condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`;
  }
  let setpdQuery = `
    WITH RMA_DATA AS
    (
    SELECT CS_RMA_TABLE.RMA_ID,CS_RMA_TABLE.CONFIRM_ID,M100.G_NAME_KD, CS_RMA_TABLE.RETURN_DATE,CS_RMA_TABLE.PROD_REQUEST_NO,CS_RMA_TABLE.G_CODE,CS_RMA_TABLE.RMA_TYPE,CS_RMA_TABLE.RMA_EMPL_NO,CS_RMA_TABLE.INS_DATETIME,CS_RMA_TABLE.FACTORY,CS_RMA_TABLE.RETURN_QTY,isnull(SORTING_TB.SORTING_OK_QTY,0) AS SORTING_OK_QTY,isnull(CS_RMA_TABLE.RETURN_QTY-SORTING_TB.SORTING_OK_QTY,0) AS SORTING_NG_QTY,isnull(DELIV_TB.RMA_DELIVERY_QTY,0) AS RMA_DELIVERY_QTY,
    isnull(DELIV_TB.RMA_DELIVERY_QTY,0)-isnull(SORTING_TB.SORTING_OK_QTY,0) AS RMA_QTY,
              M100.PROD_LAST_PRICE, (M100.PROD_LAST_PRICE*CS_RMA_TABLE.RETURN_QTY) AS RETURN_AMOUNT,
              (M100.PROD_LAST_PRICE*isnull(SORTING_TB.SORTING_OK_QTY,0)) AS SORTING_OK_AMOUNT,
              (M100.PROD_LAST_PRICE*isnull(CS_RMA_TABLE.RETURN_QTY-SORTING_TB.SORTING_OK_QTY,0)) AS SORTING_NG_AMOUNT,
          (isnull(DELIV_TB.RMA_DELIVERY_QTY,0)-isnull(SORTING_TB.SORTING_OK_QTY,0)) * M100.PROD_LAST_PRICE AS RMA_AMOUNT,          M100.G_NAME,M100.PROD_TYPE,M100.PROD_MODEL,CS_CONFIRM_TABLE.CONFIRM_DATE,CS_CONFIRM_TABLE.CS_EMPL_NO,CS_CONFIRM_TABLE.CONTENT,CS_CONFIRM_TABLE.INSPECT_QTY,CS_CONFIRM_TABLE.NG_QTY,CS_CONFIRM_TABLE.REPLACE_RATE,CS_CONFIRM_TABLE.REDUCE_QTY,CS_CONFIRM_TABLE.FACTOR,CS_CONFIRM_TABLE.RESULT,CS_CONFIRM_TABLE.CONFIRM_STATUS,CS_CONFIRM_TABLE.REMARK,CS_CONFIRM_TABLE.PHANLOAI,CS_CONFIRM_TABLE.LINK,M110.CUST_NAME_KD, CS_RMA_TABLE.CTR_CD
              FROM CS_RMA_TABLE
              LEFT JOIN (SELECT RMA_ID, SUM(SORTING_OK_QTY) AS SORTING_OK_QTY, CTR_CD FROM CS_SORTING_TABLE GROUP BY RMA_ID, CTR_CD) AS SORTING_TB ON (CS_RMA_TABLE.RMA_ID=SORTING_TB.RMA_ID AND CS_RMA_TABLE.CTR_CD=SORTING_TB.CTR_CD)
              LEFT JOIN (SELECT RMA_ID, SUM(RMA_DELIVERY_QTY) AS RMA_DELIVERY_QTY, CTR_CD FROM CS_RMA_DELIVERY GROUP BY RMA_ID, CTR_CD) AS DELIV_TB ON (CS_RMA_TABLE.RMA_ID=DELIV_TB.RMA_ID AND CS_RMA_TABLE.CTR_CD=DELIV_TB.CTR_CD)
              LEFT JOIN M100 ON (M100.G_CODE = CS_RMA_TABLE.G_CODE AND M100.CTR_CD = CS_RMA_TABLE.CTR_CD)
              LEFT JOIN CS_CONFIRM_TABLE ON (CS_RMA_TABLE.CONFIRM_ID = CS_CONFIRM_TABLE.CONFIRM_ID AND CS_RMA_TABLE.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)
              LEFT JOIN M110 ON (M110.CUST_CD = CS_CONFIRM_TABLE.CUST_CD AND M110.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)
              ${condition} AND CS_RMA_TABLE.CTR_CD='${DATA.CTR_CD}'
    ),
    RMA_PVTB AS
    (
    SELECT pvtb.RETURN_DATE AS RT_DATE, CASE WHEN isnull(pvtb.HT,0) < 0 THEN  0 ELSE isnull(pvtb.HT,0) END AS HT, CASE WHEN isnull(pvtb.CD,0) < 0 THEN  0 ELSE isnull(pvtb.CD,0) END AS CD, CASE WHEN isnull(pvtb.MD,0) < 0 THEN  0 ELSE isnull(pvtb.MD,0) END AS MD, CTR_CD
    FROM 
    (SELECT RETURN_DATE, RMA_TYPE, RMA_AMOUNT, CTR_CD FROM RMA_DATA) AS src
    PIVOT 
    (
      SUM(RMA_AMOUNT) FOR RMA_TYPE IN ([HT],[CD],[MD])
    ) as pvtb
    ) 
    SELECT * FROM RMA_PVTB
    WHERE CTR_CD='${DATA.CTR_CD}'
    ORDER BY RT_DATE DESC
    `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.csweeklyRMAAmount = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = `WHERE CS_RMA_TABLE.RETURN_DATE BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE} 23:59:59' `;
  if (DATA.codeArray.length === 1) {
    condition += ` AND CS_RMA_TABLE.G_CODE='${DATA.codeArray[0]}'`;
  } else if (DATA.codeArray.length > 1) {
    let codeString = ``;
    let codeArStr = DATA.codeArray.map((ele, index) => `'${ele}'`).join(",");
    condition += ` AND CS_RMA_TABLE.G_CODE IN (${codeArStr})`;
  }
  if (DATA.CUST_NAME_KD !== "") {
    condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`;
  }
  let setpdQuery = `
    WITH RMA_DATA AS
    (
    SELECT CS_RMA_TABLE.RMA_ID,CS_RMA_TABLE.CONFIRM_ID,M100.G_NAME_KD, CS_RMA_TABLE.RETURN_DATE,CS_RMA_TABLE.PROD_REQUEST_NO,CS_RMA_TABLE.G_CODE,CS_RMA_TABLE.RMA_TYPE,CS_RMA_TABLE.RMA_EMPL_NO,CS_RMA_TABLE.INS_DATETIME,CS_RMA_TABLE.FACTORY,CS_RMA_TABLE.RETURN_QTY,isnull(SORTING_TB.SORTING_OK_QTY,0) AS SORTING_OK_QTY,isnull(CS_RMA_TABLE.RETURN_QTY-SORTING_TB.SORTING_OK_QTY,0) AS SORTING_NG_QTY,isnull(DELIV_TB.RMA_DELIVERY_QTY,0) AS RMA_DELIVERY_QTY,
    isnull(DELIV_TB.RMA_DELIVERY_QTY,0)-isnull(SORTING_TB.SORTING_OK_QTY,0) AS RMA_QTY,
              M100.PROD_LAST_PRICE, (M100.PROD_LAST_PRICE*CS_RMA_TABLE.RETURN_QTY) AS RETURN_AMOUNT,
              (M100.PROD_LAST_PRICE*isnull(SORTING_TB.SORTING_OK_QTY,0)) AS SORTING_OK_AMOUNT,
              (M100.PROD_LAST_PRICE*isnull(CS_RMA_TABLE.RETURN_QTY-SORTING_TB.SORTING_OK_QTY,0)) AS SORTING_NG_AMOUNT,
          (isnull(DELIV_TB.RMA_DELIVERY_QTY,0)-isnull(SORTING_TB.SORTING_OK_QTY,0)) * M100.PROD_LAST_PRICE AS RMA_AMOUNT,          M100.G_NAME,M100.PROD_TYPE,M100.PROD_MODEL,CS_CONFIRM_TABLE.CONFIRM_DATE,CS_CONFIRM_TABLE.CS_EMPL_NO,CS_CONFIRM_TABLE.CONTENT,CS_CONFIRM_TABLE.INSPECT_QTY,CS_CONFIRM_TABLE.NG_QTY,CS_CONFIRM_TABLE.REPLACE_RATE,CS_CONFIRM_TABLE.REDUCE_QTY,CS_CONFIRM_TABLE.FACTOR,CS_CONFIRM_TABLE.RESULT,CS_CONFIRM_TABLE.CONFIRM_STATUS,CS_CONFIRM_TABLE.REMARK,CS_CONFIRM_TABLE.PHANLOAI,CS_CONFIRM_TABLE.LINK,M110.CUST_NAME_KD, CS_RMA_TABLE.CTR_CD
              FROM CS_RMA_TABLE
              LEFT JOIN (SELECT RMA_ID, SUM(SORTING_OK_QTY) AS SORTING_OK_QTY, CTR_CD FROM CS_SORTING_TABLE GROUP BY RMA_ID, CTR_CD) AS SORTING_TB ON (CS_RMA_TABLE.RMA_ID=SORTING_TB.RMA_ID AND CS_RMA_TABLE.CTR_CD=SORTING_TB.CTR_CD)
              LEFT JOIN (SELECT RMA_ID, SUM(RMA_DELIVERY_QTY) AS RMA_DELIVERY_QTY, CTR_CD FROM CS_RMA_DELIVERY GROUP BY RMA_ID, CTR_CD) AS DELIV_TB ON (CS_RMA_TABLE.RMA_ID=DELIV_TB.RMA_ID AND CS_RMA_TABLE.CTR_CD=DELIV_TB.CTR_CD)
              LEFT JOIN M100 ON (M100.G_CODE = CS_RMA_TABLE.G_CODE AND M100.CTR_CD = CS_RMA_TABLE.CTR_CD)
              LEFT JOIN CS_CONFIRM_TABLE ON (CS_RMA_TABLE.CONFIRM_ID = CS_CONFIRM_TABLE.CONFIRM_ID AND CS_RMA_TABLE.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)
              LEFT JOIN M110 ON (M110.CUST_CD = CS_CONFIRM_TABLE.CUST_CD AND M110.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)
              ${condition} AND CS_RMA_TABLE.CTR_CD='${DATA.CTR_CD}'
    ),
    RMA_PVTB AS
    (
    SELECT pvtb.RETURN_DATE AS RT_DATE, CASE WHEN isnull(pvtb.HT,0) < 0 THEN  0 ELSE isnull(pvtb.HT,0) END AS HT, CASE WHEN isnull(pvtb.CD,0) < 0 THEN  0 ELSE isnull(pvtb.CD,0) END AS CD, CASE WHEN isnull(pvtb.MD,0) < 0 THEN  0 ELSE isnull(pvtb.MD,0) END AS MD, CTR_CD
    FROM 
    (SELECT RETURN_DATE, RMA_TYPE, RMA_AMOUNT, CTR_CD FROM RMA_DATA) AS src
    PIVOT 
    (
      SUM(RMA_AMOUNT) FOR RMA_TYPE IN ([HT],[CD],[MD])
    ) as pvtb
    ) 
    SELECT CONCAT(YEAR(RT_DATE), '_',DATEPART(ISO_WEEK, RT_DATE)) AS RT_YW, YEAR(RT_DATE) AS RT_YEAR, DATEPART(ISO_WEEK, RT_DATE) AS RT_WEEK, SUM(HT) AS HT, SUM(MD) AS MD, SUM(CD) AS CD FROM RMA_PVTB
    WHERE CTR_CD='${DATA.CTR_CD}'
    GROUP BY YEAR(RT_DATE), DATEPART(ISO_WEEK, RT_DATE)
    ORDER BY YEAR(RT_DATE) DESC, DATEPART(ISO_WEEK, RT_DATE) DESC
    `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.csmonthlyRMAAmount = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = `WHERE CS_RMA_TABLE.RETURN_DATE BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE} 23:59:59' `;
  if (DATA.codeArray.length === 1) {
    condition += ` AND CS_RMA_TABLE.G_CODE='${DATA.codeArray[0]}'`;
  } else if (DATA.codeArray.length > 1) {
    let codeString = ``;
    let codeArStr = DATA.codeArray.map((ele, index) => `'${ele}'`).join(",");
    condition += ` AND CS_RMA_TABLE.G_CODE IN (${codeArStr})`;
  }
  if (DATA.CUST_NAME_KD !== "") {
    condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`;
  }
  let setpdQuery = `
    WITH RMA_DATA AS
    (
    SELECT CS_RMA_TABLE.RMA_ID,CS_RMA_TABLE.CONFIRM_ID,M100.G_NAME_KD, CS_RMA_TABLE.RETURN_DATE,CS_RMA_TABLE.PROD_REQUEST_NO,CS_RMA_TABLE.G_CODE,CS_RMA_TABLE.RMA_TYPE,CS_RMA_TABLE.RMA_EMPL_NO,CS_RMA_TABLE.INS_DATETIME,CS_RMA_TABLE.FACTORY,CS_RMA_TABLE.RETURN_QTY,isnull(SORTING_TB.SORTING_OK_QTY,0) AS SORTING_OK_QTY,isnull(CS_RMA_TABLE.RETURN_QTY-SORTING_TB.SORTING_OK_QTY,0) AS SORTING_NG_QTY,isnull(DELIV_TB.RMA_DELIVERY_QTY,0) AS RMA_DELIVERY_QTY,
    isnull(DELIV_TB.RMA_DELIVERY_QTY,0)-isnull(SORTING_TB.SORTING_OK_QTY,0) AS RMA_QTY,
              M100.PROD_LAST_PRICE, (M100.PROD_LAST_PRICE*CS_RMA_TABLE.RETURN_QTY) AS RETURN_AMOUNT,
              (M100.PROD_LAST_PRICE*isnull(SORTING_TB.SORTING_OK_QTY,0)) AS SORTING_OK_AMOUNT,
              (M100.PROD_LAST_PRICE*isnull(CS_RMA_TABLE.RETURN_QTY-SORTING_TB.SORTING_OK_QTY,0)) AS SORTING_NG_AMOUNT,
          (isnull(DELIV_TB.RMA_DELIVERY_QTY,0)-isnull(SORTING_TB.SORTING_OK_QTY,0)) * M100.PROD_LAST_PRICE AS RMA_AMOUNT,          M100.G_NAME,M100.PROD_TYPE,M100.PROD_MODEL,CS_CONFIRM_TABLE.CONFIRM_DATE,CS_CONFIRM_TABLE.CS_EMPL_NO,CS_CONFIRM_TABLE.CONTENT,CS_CONFIRM_TABLE.INSPECT_QTY,CS_CONFIRM_TABLE.NG_QTY,CS_CONFIRM_TABLE.REPLACE_RATE,CS_CONFIRM_TABLE.REDUCE_QTY,CS_CONFIRM_TABLE.FACTOR,CS_CONFIRM_TABLE.RESULT,CS_CONFIRM_TABLE.CONFIRM_STATUS,CS_CONFIRM_TABLE.REMARK,CS_CONFIRM_TABLE.PHANLOAI,CS_CONFIRM_TABLE.LINK,M110.CUST_NAME_KD, CS_RMA_TABLE.CTR_CD
              FROM CS_RMA_TABLE
              LEFT JOIN (SELECT RMA_ID, SUM(SORTING_OK_QTY) AS SORTING_OK_QTY, CTR_CD FROM CS_SORTING_TABLE GROUP BY RMA_ID, CTR_CD) AS SORTING_TB ON (CS_RMA_TABLE.RMA_ID=SORTING_TB.RMA_ID AND CS_RMA_TABLE.CTR_CD=SORTING_TB.CTR_CD)
              LEFT JOIN (SELECT RMA_ID, SUM(RMA_DELIVERY_QTY) AS RMA_DELIVERY_QTY, CTR_CD FROM CS_RMA_DELIVERY GROUP BY RMA_ID, CTR_CD) AS DELIV_TB ON (CS_RMA_TABLE.RMA_ID=DELIV_TB.RMA_ID AND CS_RMA_TABLE.CTR_CD=DELIV_TB.CTR_CD)
              LEFT JOIN M100 ON (M100.G_CODE = CS_RMA_TABLE.G_CODE AND M100.CTR_CD = CS_RMA_TABLE.CTR_CD)
              LEFT JOIN CS_CONFIRM_TABLE ON (CS_RMA_TABLE.CONFIRM_ID = CS_CONFIRM_TABLE.CONFIRM_ID AND CS_RMA_TABLE.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)
              LEFT JOIN M110 ON (M110.CUST_CD = CS_CONFIRM_TABLE.CUST_CD AND M110.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)
              ${condition} AND CS_RMA_TABLE.CTR_CD='${DATA.CTR_CD}'
    ),
    RMA_PVTB AS
    (
    SELECT pvtb.RETURN_DATE AS RT_DATE, CASE WHEN isnull(pvtb.HT,0) < 0 THEN  0 ELSE isnull(pvtb.HT,0) END AS HT, CASE WHEN isnull(pvtb.CD,0) < 0 THEN  0 ELSE isnull(pvtb.CD,0) END AS CD, CASE WHEN isnull(pvtb.MD,0) < 0 THEN  0 ELSE isnull(pvtb.MD,0) END AS MD, CTR_CD
    FROM 
    (SELECT RETURN_DATE, RMA_TYPE, RMA_AMOUNT, CTR_CD FROM RMA_DATA) AS src
    PIVOT 
    (
      SUM(RMA_AMOUNT) FOR RMA_TYPE IN ([HT],[CD],[MD])
    ) as pvtb
    ) 
    SELECT CONCAT(YEAR(RT_DATE), '_',MONTH(RT_DATE)) AS RT_YM, YEAR(RT_DATE) AS RT_YEAR, MONTH(RT_DATE) AS RT_MONTH, SUM(HT) AS HT, SUM(MD) AS MD, SUM(CD) AS CD FROM RMA_PVTB
    WHERE CTR_CD='${DATA.CTR_CD}'
    GROUP BY YEAR(RT_DATE), MONTH(RT_DATE)
    ORDER BY YEAR(RT_DATE) DESC, MONTH(RT_DATE) DESC
    `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.csyearlyRMAAmount = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = `WHERE CS_RMA_TABLE.RETURN_DATE BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE} 23:59:59' `;
  if (DATA.codeArray.length === 1) {
    condition += ` AND CS_RMA_TABLE.G_CODE='${DATA.codeArray[0]}'`;
  } else if (DATA.codeArray.length > 1) {
    let codeString = ``;
    let codeArStr = DATA.codeArray.map((ele, index) => `'${ele}'`).join(",");
    condition += ` AND CS_RMA_TABLE.G_CODE IN (${codeArStr})`;
  }
  if (DATA.CUST_NAME_KD !== "") {
    condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`;
  }
  let setpdQuery = `
    WITH RMA_DATA AS
    (
    SELECT CS_RMA_TABLE.RMA_ID,CS_RMA_TABLE.CONFIRM_ID,M100.G_NAME_KD, CS_RMA_TABLE.RETURN_DATE,CS_RMA_TABLE.PROD_REQUEST_NO,CS_RMA_TABLE.G_CODE,CS_RMA_TABLE.RMA_TYPE,CS_RMA_TABLE.RMA_EMPL_NO,CS_RMA_TABLE.INS_DATETIME,CS_RMA_TABLE.FACTORY,CS_RMA_TABLE.RETURN_QTY,isnull(SORTING_TB.SORTING_OK_QTY,0) AS SORTING_OK_QTY,isnull(CS_RMA_TABLE.RETURN_QTY-SORTING_TB.SORTING_OK_QTY,0) AS SORTING_NG_QTY,isnull(DELIV_TB.RMA_DELIVERY_QTY,0) AS RMA_DELIVERY_QTY,
    isnull(DELIV_TB.RMA_DELIVERY_QTY,0)-isnull(SORTING_TB.SORTING_OK_QTY,0) AS RMA_QTY,
              M100.PROD_LAST_PRICE, (M100.PROD_LAST_PRICE*CS_RMA_TABLE.RETURN_QTY) AS RETURN_AMOUNT,
              (M100.PROD_LAST_PRICE*isnull(SORTING_TB.SORTING_OK_QTY,0)) AS SORTING_OK_AMOUNT,
              (M100.PROD_LAST_PRICE*isnull(CS_RMA_TABLE.RETURN_QTY-SORTING_TB.SORTING_OK_QTY,0)) AS SORTING_NG_AMOUNT,
          (isnull(DELIV_TB.RMA_DELIVERY_QTY,0)-isnull(SORTING_TB.SORTING_OK_QTY,0)) * M100.PROD_LAST_PRICE AS RMA_AMOUNT,          M100.G_NAME,M100.PROD_TYPE,M100.PROD_MODEL,CS_CONFIRM_TABLE.CONFIRM_DATE,CS_CONFIRM_TABLE.CS_EMPL_NO,CS_CONFIRM_TABLE.CONTENT,CS_CONFIRM_TABLE.INSPECT_QTY,CS_CONFIRM_TABLE.NG_QTY,CS_CONFIRM_TABLE.REPLACE_RATE,CS_CONFIRM_TABLE.REDUCE_QTY,CS_CONFIRM_TABLE.FACTOR,CS_CONFIRM_TABLE.RESULT,CS_CONFIRM_TABLE.CONFIRM_STATUS,CS_CONFIRM_TABLE.REMARK,CS_CONFIRM_TABLE.PHANLOAI,CS_CONFIRM_TABLE.LINK,M110.CUST_NAME_KD, CS_RMA_TABLE.CTR_CD
              FROM CS_RMA_TABLE
              LEFT JOIN (SELECT RMA_ID, SUM(SORTING_OK_QTY) AS SORTING_OK_QTY, CTR_CD FROM CS_SORTING_TABLE GROUP BY RMA_ID, CTR_CD) AS SORTING_TB ON (CS_RMA_TABLE.RMA_ID=SORTING_TB.RMA_ID AND CS_RMA_TABLE.CTR_CD=SORTING_TB.CTR_CD)
              LEFT JOIN (SELECT RMA_ID, SUM(RMA_DELIVERY_QTY) AS RMA_DELIVERY_QTY, CTR_CD FROM CS_RMA_DELIVERY GROUP BY RMA_ID, CTR_CD) AS DELIV_TB ON (CS_RMA_TABLE.RMA_ID=DELIV_TB.RMA_ID AND CS_RMA_TABLE.CTR_CD=DELIV_TB.CTR_CD)
              LEFT JOIN M100 ON (M100.G_CODE = CS_RMA_TABLE.G_CODE AND M100.CTR_CD = CS_RMA_TABLE.CTR_CD)
              LEFT JOIN CS_CONFIRM_TABLE ON (CS_RMA_TABLE.CONFIRM_ID = CS_CONFIRM_TABLE.CONFIRM_ID AND CS_RMA_TABLE.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)
              LEFT JOIN M110 ON (M110.CUST_CD = CS_CONFIRM_TABLE.CUST_CD AND M110.CTR_CD = CS_CONFIRM_TABLE.CTR_CD)
              ${condition} AND CS_RMA_TABLE.CTR_CD='${DATA.CTR_CD}'
    ),
    RMA_PVTB AS
    (
    SELECT pvtb.RETURN_DATE AS RT_DATE, CASE WHEN isnull(pvtb.HT,0) < 0 THEN  0 ELSE isnull(pvtb.HT,0) END AS HT, CASE WHEN isnull(pvtb.CD,0) < 0 THEN  0 ELSE isnull(pvtb.CD,0) END AS CD, CASE WHEN isnull(pvtb.MD,0) < 0 THEN  0 ELSE isnull(pvtb.MD,0) END AS MD, CTR_CD
    FROM 
    (SELECT RETURN_DATE, RMA_TYPE, RMA_AMOUNT, CTR_CD FROM RMA_DATA) AS src
    PIVOT 
    (
      SUM(RMA_AMOUNT) FOR RMA_TYPE IN ([HT],[CD],[MD])
    ) as pvtb
    ) 
    SELECT YEAR(RT_DATE) AS RT_YEAR, SUM(HT) AS HT, SUM(MD) AS MD, SUM(CD) AS CD FROM RMA_PVTB
    WHERE CTR_CD='${DATA.CTR_CD}'
    GROUP BY YEAR(RT_DATE)
    ORDER BY YEAR(RT_DATE) DESC
    `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.csdailyTaxiAmount = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
    WITH TAXI_DATA  AS
    (
    SELECT CS_TAXI_TABLE.TAXI_ID, CS_TAXI_TABLE.CONFIRM_ID, CS_TAXI_TABLE.SA_ID, CS_TAXI_TABLE.CHIEU, CS_TAXI_TABLE.CONG_VIEC, CS_TAXI_TABLE.TAXI_DATE, CS_TAXI_TABLE.TAXI_SHIFT, CS_TAXI_TABLE.CS_EMPL_NO, M110.CUST_NAME_KD AS DIEM_DI, M110_A.CUST_NAME_KD AS DIEM_DEN, CS_TAXI_TABLE.TAXI_AMOUNT, CS_TAXI_TABLE.TRANSPORTATION, CS_TAXI_TABLE.TAXI_REMARK, CS_TAXI_TABLE.INS_DATETIME, CS_TAXI_TABLE.CTR_CD  FROM CS_TAXI_TABLE
    LEFT JOIN M110 ON M110.CUST_CD = CS_TAXI_TABLE.DEPARTURE AND M110.CTR_CD = CS_TAXI_TABLE.CTR_CD
    LEFT JOIN (SELECT * FROM  M110) AS M110_A ON M110_A.CUST_CD = CS_TAXI_TABLE.ARRIVAL AND M110_A.CTR_CD = CS_TAXI_TABLE.CTR_CD
    )
    SELECT DATETABLE.DATE_COLUMN AS TAXI_DATE, SUM(isnull(TAXI_DATA.TAXI_AMOUNT,0))*1.0/23100 AS TAXI_AMOUNT  FROM DATETABLE 
    LEFT JOIN TAXI_DATA ON DATETABLE.DATE_COLUMN = TAXI_DATA.TAXI_DATE
    WHERE  DATETABLE.DATE_COLUMN BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE} 23:59:59'
      AND DATETABLE.CTR_CD='${DATA.CTR_CD}'
    GROUP BY DATETABLE.DATE_COLUMN
    ORDER BY DATETABLE.DATE_COLUMN DESC
    `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.csmonthlyTaxiAmount = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
    WITH TAXI_DATA  AS
    (
    SELECT CS_TAXI_TABLE.TAXI_ID, CS_TAXI_TABLE.CONFIRM_ID, CS_TAXI_TABLE.SA_ID, CS_TAXI_TABLE.CHIEU, CS_TAXI_TABLE.CONG_VIEC, CS_TAXI_TABLE.TAXI_DATE, CS_TAXI_TABLE.TAXI_SHIFT, CS_TAXI_TABLE.CS_EMPL_NO, M110.CUST_NAME_KD AS DIEM_DI, M110_A.CUST_NAME_KD AS DIEM_DEN, CS_TAXI_TABLE.TAXI_AMOUNT, CS_TAXI_TABLE.TRANSPORTATION, CS_TAXI_TABLE.TAXI_REMARK,CS_TAXI_TABLE.INS_DATETIME, CS_TAXI_TABLE.CTR_CD  FROM CS_TAXI_TABLE
              LEFT JOIN M110 ON M110.CUST_CD = CS_TAXI_TABLE.DEPARTURE AND M110.CTR_CD = CS_TAXI_TABLE.CTR_CD
              LEFT JOIN (SELECT * FROM  M110) AS M110_A ON M110_A.CUST_CD = CS_TAXI_TABLE.ARRIVAL AND M110_A.CTR_CD = CS_TAXI_TABLE.CTR_CD
    )
    SELECT CONCAT(YEAR(DATETABLE.DATE_COLUMN),'_', MONTH(DATETABLE.DATE_COLUMN)) AS TAXI_YM, YEAR(DATETABLE.DATE_COLUMN) AS TAXI_YEAR,MONTH(DATETABLE.DATE_COLUMN) AS TAXI_MONTH,   SUM(isnull(TAXI_DATA.TAXI_AMOUNT,0))*1.0/23100 AS TAXI_AMOUNT  FROM DATETABLE 
    LEFT JOIN TAXI_DATA ON DATETABLE.DATE_COLUMN = TAXI_DATA.TAXI_DATE AND DATETABLE.CTR_CD = TAXI_DATA.CTR_CD
    WHERE  DATETABLE.DATE_COLUMN BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE} 23:59:59'
      AND DATETABLE.CTR_CD='${DATA.CTR_CD}'
    GROUP BY CONCAT(YEAR(DATETABLE.DATE_COLUMN),'_', MONTH(DATETABLE.DATE_COLUMN)), YEAR(DATETABLE.DATE_COLUMN) ,MONTH(DATETABLE.DATE_COLUMN)
    ORDER BY YEAR(DATETABLE.DATE_COLUMN) DESC, MONTH(DATETABLE.DATE_COLUMN) DESC
    `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.csweeklyTaxiAmount = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
    WITH TAXI_DATA  AS
    (
    SELECT CS_TAXI_TABLE.TAXI_ID, CS_TAXI_TABLE.CONFIRM_ID, CS_TAXI_TABLE.SA_ID, CS_TAXI_TABLE.CHIEU, CS_TAXI_TABLE.CONG_VIEC, CS_TAXI_TABLE.TAXI_DATE, CS_TAXI_TABLE.TAXI_SHIFT, CS_TAXI_TABLE.CS_EMPL_NO, M110.CUST_NAME_KD AS DIEM_DI, M110_A.CUST_NAME_KD AS DIEM_DEN, CS_TAXI_TABLE.TAXI_AMOUNT, CS_TAXI_TABLE.TRANSPORTATION, CS_TAXI_TABLE.TAXI_REMARK, CS_TAXI_TABLE.INS_DATETIME, CS_TAXI_TABLE.CTR_CD  FROM CS_TAXI_TABLE
              LEFT JOIN M110 ON M110.CUST_CD = CS_TAXI_TABLE.DEPARTURE AND M110.CTR_CD = CS_TAXI_TABLE.CTR_CD
              LEFT JOIN (SELECT * FROM  M110) AS M110_A ON M110_A.CUST_CD = CS_TAXI_TABLE.ARRIVAL AND M110_A.CTR_CD = CS_TAXI_TABLE.CTR_CD
    )
    SELECT CONCAT(YEAR(DATETABLE.DATE_COLUMN),'_', DATEPART(ISO_WEEK, DATETABLE.DATE_COLUMN)) AS TAXI_YW, YEAR(DATETABLE.DATE_COLUMN) AS TAXI_YEAR,DATEPART(ISO_WEEK, DATETABLE.DATE_COLUMN) AS TAXI_WEEK,   SUM(isnull(TAXI_DATA.TAXI_AMOUNT,0))*1.0/23100 AS TAXI_AMOUNT  FROM DATETABLE 
    LEFT JOIN TAXI_DATA ON DATETABLE.DATE_COLUMN = TAXI_DATA.TAXI_DATE AND DATETABLE.CTR_CD = TAXI_DATA.CTR_CD
    WHERE  DATETABLE.DATE_COLUMN BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE} 23:59:59'
      AND DATETABLE.CTR_CD='${DATA.CTR_CD}'
    GROUP BY CONCAT(YEAR(DATETABLE.DATE_COLUMN),'_', DATEPART(ISO_WEEK, DATETABLE.DATE_COLUMN)), YEAR(DATETABLE.DATE_COLUMN) ,DATEPART(ISO_WEEK, DATETABLE.DATE_COLUMN)
    ORDER BY YEAR(DATETABLE.DATE_COLUMN) DESC ,DATEPART(ISO_WEEK, DATETABLE.DATE_COLUMN) DESC
    `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.csyearlyTaxiAmount = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
    WITH TAXI_DATA  AS
    (
    SELECT CS_TAXI_TABLE.TAXI_ID, CS_TAXI_TABLE.CONFIRM_ID, CS_TAXI_TABLE.SA_ID, CS_TAXI_TABLE.CHIEU, CS_TAXI_TABLE.CONG_VIEC, CS_TAXI_TABLE.TAXI_DATE, CS_TAXI_TABLE.TAXI_SHIFT, CS_TAXI_TABLE.CS_EMPL_NO, M110.CUST_NAME_KD AS DIEM_DI, M110_A.CUST_NAME_KD AS DIEM_DEN, CS_TAXI_TABLE.TAXI_AMOUNT, CS_TAXI_TABLE.TRANSPORTATION, CS_TAXI_TABLE.TAXI_REMARK,CS_TAXI_TABLE.INS_DATETIME, CS_TAXI_TABLE.CTR_CD  FROM CS_TAXI_TABLE
              LEFT JOIN M110 ON M110.CUST_CD = CS_TAXI_TABLE.DEPARTURE AND M110.CTR_CD = CS_TAXI_TABLE.CTR_CD
              LEFT JOIN (SELECT * FROM  M110) AS M110_A ON M110_A.CUST_CD = CS_TAXI_TABLE.ARRIVAL AND M110_A.CTR_CD = CS_TAXI_TABLE.CTR_CD
    )
    SELECT YEAR(DATETABLE.DATE_COLUMN) AS TAXI_YEAR, SUM(isnull(TAXI_DATA.TAXI_AMOUNT,0))*1.0/23100 AS TAXI_AMOUNT  FROM DATETABLE 
    LEFT JOIN TAXI_DATA ON DATETABLE.DATE_COLUMN = TAXI_DATA.TAXI_DATE AND DATETABLE.CTR_CD = TAXI_DATA.CTR_CD
    WHERE  DATETABLE.DATE_COLUMN BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE} 23:59:59'
      AND DATETABLE.CTR_CD='${DATA.CTR_CD}'
    GROUP BY YEAR(DATETABLE.DATE_COLUMN)
    ORDER BY YEAR(DATETABLE.DATE_COLUMN) DESC
    `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.getMaterialList = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = ` SELECT M090.M_CODE, M090.M_NAME, M090.WIDTH_CD FROM M090 WHERE CTR_CD='${DATA.CTR_CD}' AND USE_YN='Y'`;
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.checkSpecDTC = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = ` WHERE 1=1 `;
  if (DATA.checkNVL === false) {
    condition += ` AND ZTB_REL_SPECTTABLE.G_CODE='${DATA.G_CODE}' `;
  } else {
    condition += ` AND ZTB_REL_SPECTTABLE.M_CODE='${DATA.M_CODE}' `;
  }
  if (DATA.TEST_NAME !== "0") {
    condition += ` AND ZTB_REL_TESTPOINT.TEST_CODE = ${DATA.TEST_NAME} `;
  }
  let setpdQuery = `SELECT  M110.CUST_NAME_KD, M100.G_CODE, M100.G_NAME,  M090.M_CODE, M090.M_NAME, M090.WIDTH_CD, ZTB_REL_TESTTABLE.TEST_CODE,ZTB_REL_TESTTABLE.TEST_NAME,ZTB_REL_TESTPOINT.POINT_CODE, ZTB_REL_TESTPOINT.POINT_NAME, ZTB_REL_SPECTTABLE.PRI,ZTB_REL_SPECTTABLE.CENTER_VALUE, ZTB_REL_SPECTTABLE.LOWER_TOR, ZTB_REL_SPECTTABLE.UPPER_TOR, ZTB_REL_SPECTTABLE.BARCODE_CONTENT, ZTB_REL_SPECTTABLE.REMARK, M090.TDS, M100.BANVE 
  FROM ZTB_REL_TESTPOINT 
  LEFT JOIN ZTB_REL_TESTTABLE ON (ZTB_REL_TESTTABLE.TEST_CODE = ZTB_REL_TESTPOINT.TEST_CODE AND ZTB_REL_TESTTABLE.CTR_CD = ZTB_REL_TESTPOINT.CTR_CD) 
  LEFT JOIN ZTB_REL_SPECTTABLE ON (ZTB_REL_SPECTTABLE.TEST_CODE = ZTB_REL_TESTPOINT.TEST_CODE AND ZTB_REL_SPECTTABLE.POINT_CODE = ZTB_REL_TESTPOINT.POINT_CODE AND ZTB_REL_SPECTTABLE.CTR_CD = ZTB_REL_TESTPOINT.CTR_CD) 
  LEFT JOIN M100 ON (M100.G_CODE = ZTB_REL_SPECTTABLE.G_CODE AND M100.CTR_CD = ZTB_REL_SPECTTABLE.CTR_CD) 
  LEFT JOIN M090 ON (M090.M_CODE = ZTB_REL_SPECTTABLE.M_CODE AND M090.CTR_CD = ZTB_REL_SPECTTABLE.CTR_CD) 
  LEFT JOIN M110 ON (M110.CUST_CD = M100.CUST_CD AND M110.CTR_CD = M100.CTR_CD) 
  ${condition} AND ZTB_REL_TESTPOINT.CTR_CD='${DATA.CTR_CD}'`;
  //${moment().format('YYYY-MM-DD')}
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.checkSpecDTC2 = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `SELECT  ZTB_REL_TESTTABLE.TEST_CODE,ZTB_REL_TESTTABLE.TEST_NAME,ZTB_REL_TESTPOINT.POINT_CODE, ZTB_REL_TESTPOINT.POINT_NAME
            FROM ZTB_REL_TESTPOINT 
            LEFT JOIN ZTB_REL_TESTTABLE ON (ZTB_REL_TESTTABLE.TEST_CODE = ZTB_REL_TESTPOINT.TEST_CODE AND ZTB_REL_TESTTABLE.CTR_CD = ZTB_REL_TESTPOINT.CTR_CD)
            WHERE ZTB_REL_TESTPOINT.TEST_CODE = ${DATA.TEST_NAME} AND ZTB_REL_TESTPOINT.CTR_CD='${DATA.CTR_CD}'`;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.insertSpecDTC = async (req, res, DATA) => {
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let checkkq = "OK";
  let setpdQuery = `INSERT INTO ZTB_REL_SPECTTABLE (CTR_CD,G_CODE,TEST_CODE,POINT_CODE,PRI,CENTER_VALUE,UPPER_TOR,LOWER_TOR,BARCODE_CONTENT,REMARK,INS_EMPL_NO,INS_DATE,M_CODE) VALUES ('${DATA.CTR_CD}','${DATA.G_CODE}', '${DATA.TEST_CODE}', '${DATA.POINT_CODE}', '${DATA.PRI}','${DATA.CENTER_VALUE}','${DATA.UPPER_TOR}','${DATA.LOWER_TOR}','${DATA.BARCODE_CONTENT}','${DATA.REMARK}','${EMPL_NO}',GETDATE(),'${DATA.M_CODE}')`;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.updateSpecDTC = async (req, res, DATA) => {
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let checkkq = "OK";
  let setpdQuery = `UPDATE ZTB_REL_SPECTTABLE SET  PRI= '${DATA.PRI}', CENTER_VALUE ='${DATA.CENTER_VALUE}',UPPER_TOR = '${DATA.UPPER_TOR}', LOWER_TOR= '${DATA.LOWER_TOR}', BARCODE_CONTENT= '${DATA.BARCODE_CONTENT}',REMARK = N'${DATA.REMARK}',UPD_EMPL_NO='${EMPL_NO}', UPD_DATE= GETDATE(),M_CODE='${DATA.M_CODE}' WHERE CTR_CD='${DATA.CTR_CD}' AND G_CODE= '${DATA.G_CODE}' AND M_CODE='${DATA.M_CODE}' AND TEST_CODE=${DATA.TEST_CODE} AND POINT_CODE=${DATA.POINT_CODE}`;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.checkAddedSpec = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `SELECT ZTB_REL_TESTTABLE.TEST_CODE, ZTB_REL_TESTTABLE.TEST_NAME, AA.TEST_CODE AS CHECKADDED 
  FROM ZTB_REL_TESTTABLE 
  LEFT JOIN (
    SELECT DISTINCT TEST_CODE, CTR_CD 
    FROM ZTB_REL_SPECTTABLE 
    WHERE M_CODE='${DATA.M_CODE}' AND G_CODE='${DATA.G_CODE}' AND CTR_CD='${DATA.CTR_CD}'
  ) AS AA ON (AA.TEST_CODE = ZTB_REL_TESTTABLE.TEST_CODE AND AA.CTR_CD = ZTB_REL_TESTTABLE.CTR_CD)
  WHERE ZTB_REL_TESTTABLE.CTR_CD='${DATA.CTR_CD}'`;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.loadrecentRegisteredDTCData = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `SELECT TOP 200 ZTB_REL_REQUESTTABLE.DTC_ID, (CASE ZTBEMPLINFO.FACTORY_CODE WHEN 1 THEN 'NM1' WHEN 2 THEN 'NM2' END) AS FACTORY, ZTB_REL_REQUESTTABLE.TEST_FINISH_TIME, ZTB_REL_REQUESTTABLE.TEST_EMPL_NO, ZTB_REL_REQUESTTABLE.G_CODE, ZTB_REL_REQUESTTABLE.PROD_REQUEST_NO, M100.G_NAME, ZTB_REL_TESTTABLE.TEST_NAME, ZTB_REL_TESTTYPE.TEST_TYPE_NAME, ZTBWORKPOSITION.WORK_POSITION_NAME, ZTB_REL_REQUESTTABLE.REQUEST_DATETIME, ZTB_REL_REQUESTTABLE.REQUEST_EMPL_NO, M090.M_NAME, M090.WIDTH_CD AS SIZE, ZTB_REL_REQUESTTABLE.REMARK, NHAP_NVL.LOTCMS FROM 
                    ZTB_REL_REQUESTTABLE
                   LEFT JOIN M100 ON(M100.G_CODE = ZTB_REL_REQUESTTABLE.G_CODE AND M100.CTR_CD = ZTB_REL_REQUESTTABLE.CTR_CD) 
                   LEFT JOIN M090 ON (M090.M_CODE = ZTB_REL_REQUESTTABLE.M_CODE AND M090.CTR_CD = ZTB_REL_REQUESTTABLE.CTR_CD)
                   LEFT JOIN ZTB_REL_TESTTABLE ON (ZTB_REL_TESTTABLE.TEST_CODE = ZTB_REL_REQUESTTABLE.TEST_CODE AND ZTB_REL_TESTTABLE.CTR_CD = ZTB_REL_REQUESTTABLE.CTR_CD) 
                   LEFT JOIN ZTB_REL_TESTTYPE ON (ZTB_REL_TESTTYPE.TEST_TYPE_CODE = ZTB_REL_REQUESTTABLE.TEST_TYPE_CODE AND ZTB_REL_TESTTYPE.CTR_CD = ZTB_REL_REQUESTTABLE.CTR_CD) 
                   LEFT JOIN ZTBEMPLINFO ON (ZTBEMPLINFO.EMPL_NO = ZTB_REL_REQUESTTABLE.REQUEST_EMPL_NO AND ZTBEMPLINFO.CTR_CD = ZTB_REL_REQUESTTABLE.CTR_CD) 
                   LEFT JOIN ZTBWORKPOSITION ON (ZTBWORKPOSITION.WORK_POSITION_CODE = ZTBEMPLINFO.WORK_POSITION_CODE AND ZTBWORKPOSITION.CTR_CD = ZTB_REL_REQUESTTABLE.CTR_CD) 
                   LEFT JOIN NHAP_NVL ON(NHAP_NVL.LOTNCC = ZTB_REL_REQUESTTABLE.REMARK AND NHAP_NVL.SIZE = M090.WIDTH_CD AND NHAP_NVL.CTR_CD = ZTB_REL_REQUESTTABLE.CTR_CD) 
                   WHERE ZTB_REL_REQUESTTABLE.CTR_CD='${DATA.CTR_CD}'
                   ORDER BY ZTB_REL_REQUESTTABLE.DTC_ID DESC, ZTB_REL_TESTTABLE.TEST_NAME DESC`;
  ///console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.getLastDTCID = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = ` SELECT MAX(DTC_ID) AS LAST_DCT_ID FROM ZTB_REL_REQUESTTABLE WHERE CTR_CD='${DATA.CTR_CD}'`;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.checkLabelID2 = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `SELECT ZTBLOTPRINTHISTORYTB.LABEL_ID2, ZTBLOTPRINTHISTORYTB.G_CODE, M100.G_NAME, P400.PROD_REQUEST_NO, P400.PROD_REQUEST_DATE 
                    FROM ZTBLOTPRINTHISTORYTB 
                    LEFT JOIN P400 ON (P400.PROD_REQUEST_NO = ZTBLOTPRINTHISTORYTB.PROD_REQUEST_NO AND P400.CTR_CD = ZTBLOTPRINTHISTORYTB.CTR_CD) 
                    LEFT JOIN M100 ON (M100.G_CODE = ZTBLOTPRINTHISTORYTB.G_CODE AND M100.CTR_CD = ZTBLOTPRINTHISTORYTB.CTR_CD) 
                    WHERE ZTBLOTPRINTHISTORYTB.CTR_CD='${DATA.CTR_CD}' AND LABEL_ID2='${DATA.LABEL_ID2}'`;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.registerDTCTest = async (req, res, DATA) => {
  let checkkq = "OK";
  let WORK_POSITION_CODE = req.payload_data["WORK_POSITION_CODE"];
  let setpdQuery = ` INSERT INTO ZTB_REL_REQUESTTABLE (CTR_CD,DTC_ID,TEST_CODE,TEST_TYPE_CODE,REQUEST_DEPT_CODE,PROD_REQUEST_NO,PROD_REQUEST_DATE,REQUEST_EMPL_NO,REQUEST_DATETIME,REMARK,G_CODE,M_CODE,M_LOT_NO, WORK_POSITION_CODE) VALUES ('${DATA.CTR_CD}',${DATA.DTC_ID}, ${DATA.TEST_CODE},  ${DATA.TEST_TYPE_CODE},  ${DATA.REQUEST_DEPT_CODE}, '${DATA.PROD_REQUEST_NO}', '${DATA.PROD_REQUEST_DATE}', '${DATA.REQUEST_EMPL_NO}',GETDATE(),'${DATA.REMARK}','${DATA.G_CODE}','${DATA.M_CODE}','${DATA.M_LOT_NO}', '${WORK_POSITION_CODE}')`;
  console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.getinputdtcspec = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = ` SELECT  ZTB_REL_REQUESTTABLE.DTC_ID, ZTB_REL_REQUESTTABLE.G_CODE, M100.G_NAME, M090.M_NAME, ZTB_REL_REQUESTTABLE.M_CODE, ZTB_REL_TESTTABLE.TEST_NAME, ZTB_REL_TESTTABLE.TEST_CODE,ZTB_REL_TESTPOINT.POINT_NAME,ZTB_REL_TESTPOINT.POINT_CODE, ZTB_REL_SPECTTABLE.CENTER_VALUE , ZTB_REL_SPECTTABLE.UPPER_TOR,LOWER_TOR ,  null AS RESULT , ZTB_REL_SPECTTABLE.REMARK, ZTB_REL_REQUESTTABLE.CTR_CD  FROM 
            ZTB_REL_REQUESTTABLE
           LEFT JOIN M100 ON(M100.G_CODE = ZTB_REL_REQUESTTABLE.G_CODE AND M100.CTR_CD = ZTB_REL_REQUESTTABLE.CTR_CD) 
           LEFT JOIN M090 ON (M090.M_CODE = ZTB_REL_REQUESTTABLE.M_CODE AND M090.CTR_CD = ZTB_REL_REQUESTTABLE.CTR_CD) 
           LEFT JOIN ZTB_REL_SPECTTABLE ON (  ZTB_REL_SPECTTABLE.G_CODE = ZTB_REL_REQUESTTABLE.G_CODE AND ZTB_REL_SPECTTABLE.TEST_CODE = ZTB_REL_REQUESTTABLE.TEST_CODE AND ZTB_REL_SPECTTABLE.M_CODE = ZTB_REL_REQUESTTABLE.M_CODE AND ZTB_REL_SPECTTABLE.CTR_CD = ZTB_REL_REQUESTTABLE.CTR_CD)
           LEFT JOIN ZTB_REL_TESTPOINT ON(ZTB_REL_SPECTTABLE.TEST_CODE = ZTB_REL_TESTPOINT.TEST_CODE AND ZTB_REL_SPECTTABLE.POINT_CODE = ZTB_REL_TESTPOINT.POINT_CODE AND ZTB_REL_TESTPOINT.CTR_CD = ZTB_REL_REQUESTTABLE.CTR_CD)
           LEFT JOIN ZTB_REL_TESTTABLE ON (ZTB_REL_TESTTABLE.TEST_CODE = ZTB_REL_REQUESTTABLE.TEST_CODE AND ZTB_REL_TESTTABLE.CTR_CD = ZTB_REL_REQUESTTABLE.CTR_CD)  
           WHERE ZTB_REL_REQUESTTABLE.DTC_ID=${DATA.DTC_ID} AND ZTB_REL_REQUESTTABLE.TEST_CODE=${DATA.TEST_CODE} AND ZTB_REL_REQUESTTABLE.CTR_CD='${DATA.CTR_CD}'
           ORDER BY ZTB_REL_REQUESTTABLE.DTC_ID DESC, ZTB_REL_TESTTABLE.TEST_NAME DESC`;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.checkRegisterdDTCTEST = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `SELECT ZTB_REL_TESTTABLE.TEST_CODE, ZTB_REL_TESTTABLE.TEST_NAME, AA.TEST_CODE AS CHECKADDED 
  FROM ZTB_REL_TESTTABLE 
  LEFT JOIN (
    SELECT DISTINCT TEST_CODE, CTR_CD 
    FROM ZTB_REL_REQUESTTABLE 
    WHERE DTC_ID=${DATA.DTC_ID} AND CTR_CD='${DATA.CTR_CD}'
  ) AS AA ON (AA.TEST_CODE = ZTB_REL_TESTTABLE.TEST_CODE AND AA.CTR_CD = ZTB_REL_TESTTABLE.CTR_CD)
  WHERE ZTB_REL_TESTTABLE.CTR_CD='${DATA.CTR_CD}'`;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.insert_dtc_result = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = ` INSERT INTO ZTB_REL_RESULT (CTR_CD,DTC_ID,G_CODE,TEST_CODE,POINT_CODE,SAMPLE_NO,RESULT,REMARK,M_CODE) VALUES ('${DATA.CTR_CD}',${DATA.DTC_ID}, '${DATA.G_CODE}',${DATA.TEST_CODE},${DATA.POINT_CODE}, ${DATA.SAMPLE_NO}, ${DATA.RESULT}, '${DATA.REMARK}', '${DATA.M_CODE}')`;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.updateDTC_TEST_EMPL = async (req, res, DATA) => {
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let checkkq = "OK";
  let setpdQuery = ` UPDATE ZTB_REL_REQUESTTABLE SET TEST_EMPL_NO='${EMPL_NO}', TEST_FINISH_TIME=GETDATE()  WHERE CTR_CD='${DATA.CTR_CD}' AND DTC_ID=${DATA.DTC_ID} AND TEST_CODE=${DATA.TEST_CODE}`;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.loadXbarData = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = ` WHERE ZTB_REL_RESULT.TEST_CODE = ${DATA.TEST_CODE} `;
  if (DATA.G_CODE !== "")
    condition += ` AND ZTB_REL_REQUESTTABLE.G_CODE ='${DATA.G_CODE}'`;
  if (DATA.G_NAME !== "")
    condition += ` AND M100.G_NAME LIKE '%${DATA.G_NAME}%'`;
  if (DATA.TEST_CODE === 1)
    condition += ` AND ZTB_REL_RESULT.POINT_CODE =${DATA.POINT_CODE}`;
  if (DATA.M_NAME !== "") condition += ` AND M090.M_NAME ='${DATA.M_NAME}'`;
  let setpdQuery = `WITH DTCTB AS (
  SELECT  ZTB_REL_SPECTTABLE.BARCODE_CONTENT, ZTB_REL_RESULT.DTC_ID, (CASE ZTBEMPLINFO.FACTORY_CODE WHEN 1 THEN 'NM1' WHEN 2 THEN 'NM2' END) AS FACTORY , ZTB_REL_REQUESTTABLE.TEST_FINISH_TIME, ZTB_REL_REQUESTTABLE.TEST_EMPL_NO, ZTB_REL_RESULT.G_CODE, ZTB_REL_REQUESTTABLE.PROD_REQUEST_NO, M100.G_NAME, ZTB_REL_TESTTABLE.TEST_NAME, ZTB_REL_SPECTTABLE.POINT_CODE, ZTB_REL_SPECTTABLE.CENTER_VALUE , ZTB_REL_SPECTTABLE.UPPER_TOR,LOWER_TOR , ZTB_REL_RESULT.RESULT, ZTB_REL_SPECTTABLE.REMARK , ZTB_REL_TESTTYPE.TEST_TYPE_NAME,ZTBWORKPOSITION.WORK_POSITION_NAME , ZTB_REL_RESULT.SAMPLE_NO, ZTB_REL_REQUESTTABLE.REQUEST_DATETIME , ZTB_REL_REQUESTTABLE.REQUEST_EMPL_NO ,ZTB_REL_RESULT.M_CODE ,M090.M_NAME , M090.WIDTH_CD AS SIZE, NHAP_NVL.LOTCMS , ZTB_REL_RESULT.TEST_CODE,M090.TDS, M090.TDS_EMPL ,TDS_UPD_DATE, ZTB_REL_RESULT.CTR_CD FROM ZTB_REL_RESULT LEFT JOIN M100 ON(M100.G_CODE = ZTB_REL_RESULT.G_CODE AND M100.CTR_CD = ZTB_REL_RESULT.CTR_CD) LEFT JOIN M090 ON (M090.M_CODE = ZTB_REL_RESULT.M_CODE AND M090.CTR_CD = ZTB_REL_RESULT.CTR_CD) LEFT JOIN ZTB_REL_SPECTTABLE ON (  ZTB_REL_SPECTTABLE.G_CODE = ZTB_REL_RESULT.G_CODE AND ZTB_REL_SPECTTABLE.TEST_CODE = ZTB_REL_RESULT.TEST_CODE AND ZTB_REL_SPECTTABLE.POINT_CODE = ZTB_REL_RESULT.POINT_CODE AND ZTB_REL_SPECTTABLE.M_CODE = ZTB_REL_RESULT.M_CODE AND ZTB_REL_SPECTTABLE.CTR_CD = ZTB_REL_RESULT.CTR_CD)  LEFT JOIN ZTB_REL_REQUESTTABLE ON (ZTB_REL_REQUESTTABLE.DTC_ID = ZTB_REL_RESULT.DTC_ID AND ZTB_REL_REQUESTTABLE.TEST_CODE = ZTB_REL_RESULT.TEST_CODE AND ZTB_REL_REQUESTTABLE.CTR_CD = ZTB_REL_RESULT.CTR_CD)  LEFT JOIN ZTB_REL_TESTTABLE ON (ZTB_REL_TESTTABLE.TEST_CODE = ZTB_REL_RESULT.TEST_CODE AND ZTB_REL_TESTTABLE.CTR_CD = ZTB_REL_RESULT.CTR_CD) LEFT JOIN ZTB_REL_TESTTYPE ON (ZTB_REL_TESTTYPE.TEST_TYPE_CODE = ZTB_REL_REQUESTTABLE.TEST_TYPE_CODE AND ZTB_REL_TESTTYPE.CTR_CD = ZTB_REL_REQUESTTABLE.CTR_CD) LEFT JOIN ZTBEMPLINFO ON (ZTBEMPLINFO.EMPL_NO = ZTB_REL_REQUESTTABLE.REQUEST_EMPL_NO AND ZTBEMPLINFO.CTR_CD = ZTB_REL_REQUESTTABLE.CTR_CD) LEFT JOIN ZTBWORKPOSITION ON (ZTBWORKPOSITION.WORK_POSITION_CODE = ZTBEMPLINFO.WORK_POSITION_CODE AND ZTBWORKPOSITION.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN NHAP_NVL ON(NHAP_NVL.LOTNCC = ZTB_REL_REQUESTTABLE.REMARK AND NHAP_NVL.SIZE = M090.WIDTH_CD AND NHAP_NVL.CTR_CD = ZTB_REL_REQUESTTABLE.CTR_CD)
    ${condition}
    AND ZTB_REL_RESULT.CTR_CD='${DATA.CTR_CD}'
  ),
  CTE AS (
      SELECT 
          DTC_ID,
          CENTER_VALUE,
          (UPPER_TOR + CENTER_VALUE) AS UPPER_VALUE,
          (CENTER_VALUE-LOWER_TOR ) AS LOWER_VALUE,
      RESULT,      
          ROW_NUMBER() OVER (ORDER BY DTC_ID) AS RowNum,
          CTR_CD
      FROM 
          DTCTB
  ),
  GroupedData AS (
      SELECT 
          (RowNum - 1) / 5 + 1 AS GRP_ID,
          CENTER_VALUE,
          LOWER_VALUE,
          UPPER_VALUE,
      MIN(RESULT) AS MIN_VALUE,
      MAX(RESULT) AS MAX_VALUE,
      (MAX(RESULT)-MIN(RESULT)) AS R_VALUE,
          AVG(RESULT) AS AVG_VALUE,
          CTR_CD
      FROM 
          CTE
      GROUP BY 
          (RowNum - 1) / 5 + 1, 
          CENTER_VALUE,
          LOWER_VALUE,
          UPPER_VALUE,
          CTR_CD
  )
  SELECT * FROM GroupedData WHERE CTR_CD='${DATA.CTR_CD}' ORDER BY GRP_ID ASC`;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.loadCPKTrend = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = ` WHERE ZTB_REL_RESULT.TEST_CODE = ${DATA.TEST_CODE} `;
  if (DATA.G_CODE !== "")
    condition += ` AND ZTB_REL_REQUESTTABLE.G_CODE ='${DATA.G_CODE}'`;
  if (DATA.G_NAME !== "")
    condition += ` AND M100.G_NAME LIKE '%${DATA.G_NAME}%'`;
  if (DATA.TEST_CODE === 1)
    condition += ` AND ZTB_REL_RESULT.POINT_CODE =${DATA.POINT_CODE}`;
  if (DATA.M_NAME !== "") condition += ` AND M090.M_NAME ='${DATA.M_NAME}'`;
  let setpdQuery = `WITH DTCTB AS (
  SELECT  ZTB_REL_SPECTTABLE.BARCODE_CONTENT, ZTB_REL_RESULT.DTC_ID, (CASE ZTBEMPLINFO.FACTORY_CODE WHEN 1 THEN 'NM1' WHEN 2 THEN 'NM2' END) AS FACTORY , ZTB_REL_REQUESTTABLE.TEST_FINISH_TIME, ZTB_REL_REQUESTTABLE.TEST_EMPL_NO, ZTB_REL_RESULT.G_CODE, ZTB_REL_REQUESTTABLE.PROD_REQUEST_NO, M100.G_NAME, ZTB_REL_TESTTABLE.TEST_NAME, ZTB_REL_SPECTTABLE.POINT_CODE, ZTB_REL_SPECTTABLE.CENTER_VALUE , ZTB_REL_SPECTTABLE.UPPER_TOR,LOWER_TOR , ZTB_REL_RESULT.RESULT, ZTB_REL_SPECTTABLE.REMARK , ZTB_REL_TESTTYPE.TEST_TYPE_NAME,ZTBWORKPOSITION.WORK_POSITION_NAME , ZTB_REL_RESULT.SAMPLE_NO, ZTB_REL_REQUESTTABLE.REQUEST_DATETIME , ZTB_REL_REQUESTTABLE.REQUEST_EMPL_NO ,ZTB_REL_RESULT.M_CODE ,M090.M_NAME , M090.WIDTH_CD AS SIZE, NHAP_NVL.LOTCMS , ZTB_REL_RESULT.TEST_CODE,M090.TDS, M090.TDS_EMPL ,TDS_UPD_DATE, ZTB_REL_RESULT.CTR_CD FROM ZTB_REL_RESULT LEFT JOIN M100 ON(M100.G_CODE = ZTB_REL_RESULT.G_CODE AND M100.CTR_CD = ZTB_REL_RESULT.CTR_CD) LEFT JOIN M090 ON (M090.M_CODE = ZTB_REL_RESULT.M_CODE AND M090.CTR_CD = ZTB_REL_RESULT.CTR_CD) LEFT JOIN ZTB_REL_SPECTTABLE ON (  ZTB_REL_SPECTTABLE.G_CODE = ZTB_REL_RESULT.G_CODE AND ZTB_REL_SPECTTABLE.TEST_CODE = ZTB_REL_RESULT.TEST_CODE AND ZTB_REL_SPECTTABLE.POINT_CODE = ZTB_REL_RESULT.POINT_CODE AND ZTB_REL_SPECTTABLE.M_CODE = ZTB_REL_RESULT.M_CODE AND ZTB_REL_SPECTTABLE.CTR_CD = ZTB_REL_RESULT.CTR_CD)  LEFT JOIN ZTB_REL_REQUESTTABLE ON (ZTB_REL_REQUESTTABLE.DTC_ID = ZTB_REL_RESULT.DTC_ID AND ZTB_REL_REQUESTTABLE.TEST_CODE = ZTB_REL_RESULT.TEST_CODE AND ZTB_REL_REQUESTTABLE.CTR_CD = ZTB_REL_RESULT.CTR_CD)  LEFT JOIN ZTB_REL_TESTTABLE ON (ZTB_REL_TESTTABLE.TEST_CODE = ZTB_REL_RESULT.TEST_CODE AND ZTB_REL_TESTTABLE.CTR_CD = ZTB_REL_RESULT.CTR_CD) LEFT JOIN ZTB_REL_TESTTYPE ON (ZTB_REL_TESTTYPE.TEST_TYPE_CODE = ZTB_REL_REQUESTTABLE.TEST_TYPE_CODE AND ZTB_REL_TESTTYPE.CTR_CD = ZTB_REL_REQUESTTABLE.CTR_CD) LEFT JOIN ZTBEMPLINFO ON (ZTBEMPLINFO.EMPL_NO = ZTB_REL_REQUESTTABLE.REQUEST_EMPL_NO AND ZTBEMPLINFO.CTR_CD = ZTB_REL_REQUESTTABLE.CTR_CD) LEFT JOIN ZTBWORKPOSITION ON (ZTBWORKPOSITION.WORK_POSITION_CODE = ZTBEMPLINFO.WORK_POSITION_CODE AND ZTBWORKPOSITION.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN NHAP_NVL ON(NHAP_NVL.LOTNCC = ZTB_REL_REQUESTTABLE.REMARK AND NHAP_NVL.SIZE = M090.WIDTH_CD AND NHAP_NVL.CTR_CD = ZTB_REL_REQUESTTABLE.CTR_CD)
  ${condition} AND ZTB_REL_RESULT.CTR_CD='${DATA.CTR_CD}'
  ),
  CTE AS (
      SELECT 
          DTC_ID,
          CENTER_VALUE,
          (UPPER_TOR + CENTER_VALUE) AS UPPER_VALUE,
          (CENTER_VALUE-LOWER_TOR ) AS LOWER_VALUE,
      RESULT,      
          ROW_NUMBER() OVER (ORDER BY DTC_ID) AS RowNum,
          CTR_CD
      FROM 
          DTCTB
  ),
  GroupedData AS (
      SELECT 
          (RowNum - 1) / 25 + 1 AS GRP_ID,
          CENTER_VALUE,
          LOWER_VALUE,
          UPPER_VALUE,
          AVG(RESULT) AS AVG_VALUE,
          STDEV(RESULT) AS STD_DEV_VALUE,
          CTR_CD
      FROM 
          CTE
      GROUP BY 
          (RowNum - 1) / 25 + 1, 
          CENTER_VALUE,
          LOWER_VALUE,
          UPPER_VALUE,
          CTR_CD
  )
  SELECT 
      GRP_ID,
      CENTER_VALUE,
      LOWER_VALUE,
      UPPER_VALUE,
      AVG_VALUE,
      STD_DEV_VALUE,
      (UPPER_VALUE - AVG_VALUE) / (6 * STD_DEV_VALUE) AS CPU,
      (AVG_VALUE - LOWER_VALUE) / (6 * STD_DEV_VALUE) AS CPL,
      LEAST((UPPER_VALUE - AVG_VALUE) / (6 * STD_DEV_VALUE), 
            (AVG_VALUE - LOWER_VALUE) / (6 * STD_DEV_VALUE)) AS CPK,
      CTR_CD
  FROM 
      GroupedData
    WHERE STD_DEV_VALUE <> 0 AND CTR_CD='${DATA.CTR_CD}'
  ORDER BY 
      GRP_ID;`;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.loadHistogram = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = ` WHERE ZTB_REL_RESULT.TEST_CODE = ${DATA.TEST_CODE} `;
  if (DATA.G_CODE !== "")
    condition += ` AND ZTB_REL_REQUESTTABLE.G_CODE ='${DATA.G_CODE}'`;
  if (DATA.G_NAME !== "")
    condition += ` AND M100.G_NAME LIKE '%${DATA.G_NAME}%'`;
  if (DATA.TEST_CODE === 1)
    condition += ` AND ZTB_REL_RESULT.POINT_CODE =${DATA.POINT_CODE}`;
  if (DATA.M_NAME !== "") condition += ` AND M090.M_NAME ='${DATA.M_NAME}'`;
  let setpdQuery = `WITH DTCTB AS (
  SELECT  ZTB_REL_SPECTTABLE.BARCODE_CONTENT, ZTB_REL_RESULT.DTC_ID, (CASE ZTBEMPLINFO.FACTORY_CODE WHEN 1 THEN 'NM1' WHEN 2 THEN 'NM2' END) AS FACTORY , ZTB_REL_REQUESTTABLE.TEST_FINISH_TIME, ZTB_REL_REQUESTTABLE.TEST_EMPL_NO, ZTB_REL_RESULT.G_CODE, ZTB_REL_REQUESTTABLE.PROD_REQUEST_NO, M100.G_NAME, ZTB_REL_TESTTABLE.TEST_NAME, ZTB_REL_SPECTTABLE.POINT_CODE, ZTB_REL_SPECTTABLE.CENTER_VALUE , ZTB_REL_SPECTTABLE.UPPER_TOR,LOWER_TOR , ZTB_REL_RESULT.RESULT, ZTB_REL_SPECTTABLE.REMARK , ZTB_REL_TESTTYPE.TEST_TYPE_NAME,ZTBWORKPOSITION.WORK_POSITION_NAME , ZTB_REL_RESULT.SAMPLE_NO, ZTB_REL_REQUESTTABLE.REQUEST_DATETIME , ZTB_REL_REQUESTTABLE.REQUEST_EMPL_NO ,ZTB_REL_RESULT.M_CODE ,M090.M_NAME , M090.WIDTH_CD AS SIZE, NHAP_NVL.LOTCMS , ZTB_REL_RESULT.TEST_CODE,M090.TDS, M090.TDS_EMPL ,TDS_UPD_DATE, ZTB_REL_RESULT.CTR_CD FROM ZTB_REL_RESULT LEFT JOIN M100 ON(M100.G_CODE = ZTB_REL_RESULT.G_CODE AND M100.CTR_CD = ZTB_REL_RESULT.CTR_CD) LEFT JOIN M090 ON (M090.M_CODE = ZTB_REL_RESULT.M_CODE AND M090.CTR_CD = ZTB_REL_RESULT.CTR_CD) LEFT JOIN ZTB_REL_SPECTTABLE ON (  ZTB_REL_SPECTTABLE.G_CODE = ZTB_REL_RESULT.G_CODE AND ZTB_REL_SPECTTABLE.TEST_CODE = ZTB_REL_RESULT.TEST_CODE AND ZTB_REL_SPECTTABLE.POINT_CODE = ZTB_REL_RESULT.POINT_CODE AND ZTB_REL_SPECTTABLE.M_CODE = ZTB_REL_RESULT.M_CODE AND ZTB_REL_SPECTTABLE.CTR_CD = ZTB_REL_RESULT.CTR_CD)  LEFT JOIN ZTB_REL_REQUESTTABLE ON (ZTB_REL_REQUESTTABLE.DTC_ID = ZTB_REL_RESULT.DTC_ID AND ZTB_REL_REQUESTTABLE.TEST_CODE = ZTB_REL_RESULT.TEST_CODE AND ZTB_REL_REQUESTTABLE.CTR_CD = ZTB_REL_RESULT.CTR_CD)  LEFT JOIN ZTB_REL_TESTTABLE ON (ZTB_REL_TESTTABLE.TEST_CODE = ZTB_REL_RESULT.TEST_CODE AND ZTB_REL_TESTTABLE.CTR_CD = ZTB_REL_RESULT.CTR_CD) LEFT JOIN ZTB_REL_TESTTYPE ON (ZTB_REL_TESTTYPE.TEST_TYPE_CODE = ZTB_REL_REQUESTTABLE.TEST_TYPE_CODE AND ZTB_REL_TESTTYPE.CTR_CD = ZTB_REL_REQUESTTABLE.CTR_CD) LEFT JOIN ZTBEMPLINFO ON (ZTBEMPLINFO.EMPL_NO = ZTB_REL_REQUESTTABLE.REQUEST_EMPL_NO AND ZTBEMPLINFO.CTR_CD = ZTB_REL_REQUESTTABLE.CTR_CD) LEFT JOIN ZTBWORKPOSITION ON (ZTBWORKPOSITION.WORK_POSITION_CODE = ZTBEMPLINFO.WORK_POSITION_CODE AND ZTBWORKPOSITION.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN NHAP_NVL ON(NHAP_NVL.LOTNCC = ZTB_REL_REQUESTTABLE.REMARK AND NHAP_NVL.SIZE = M090.WIDTH_CD AND NHAP_NVL.CTR_CD = ZTB_REL_REQUESTTABLE.CTR_CD)
  ${condition} AND ZTB_REL_RESULT.CTR_CD='${DATA.CTR_CD}'
  )
  SELECT RESULT, COUNT(RESULT) AS CNT FROM DTCTB GROUP BY RESULT ORDER BY RESULT  ASC`;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.dtcdata = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `  SELECT ZTB_REL_SPECTTABLE.BARCODE_CONTENT, ZTB_REL_RESULT.DTC_ID, (CASE ZTBEMPLINFO.FACTORY_CODE WHEN 1 THEN 'NM1' WHEN 2 THEN 'NM2' END) AS FACTORY , ZTB_REL_REQUESTTABLE.TEST_FINISH_TIME, ZTB_REL_REQUESTTABLE.TEST_EMPL_NO, ZTB_REL_RESULT.G_CODE, ZTB_REL_REQUESTTABLE.PROD_REQUEST_NO, M100.G_NAME, ZTB_REL_TESTTABLE.TEST_NAME, ZTB_REL_SPECTTABLE.POINT_CODE, ZTB_REL_SPECTTABLE.CENTER_VALUE , ZTB_REL_SPECTTABLE.UPPER_TOR,LOWER_TOR , ZTB_REL_RESULT.RESULT, ZTB_REL_SPECTTABLE.REMARK ,ZTB_REL_RESULT.REMARK, ZTB_REL_SPECTTABLE.REMARK , ZTB_REL_TESTTYPE.TEST_TYPE_NAME,ZTBWORKPOSITION.WORK_POSITION_NAME , ZTB_REL_RESULT.SAMPLE_NO, ZTB_REL_REQUESTTABLE.REQUEST_DATETIME , ZTB_REL_REQUESTTABLE.REQUEST_EMPL_NO ,ZTB_REL_RESULT.M_CODE ,M090.M_NAME , M090.WIDTH_CD AS SIZE, ZTB_REL_REQUESTTABLE.REMARK, ZTB_REL_RESULT.TEST_CODE,M090.TDS, M090.TDS_EMPL ,TDS_UPD_DATE, SUBSTRING(ZTB_REL_REQUESTTABLE.M_LOT_NO,1,8) AS LOTCMS, ZTB_REL_TESTPOINT.POINT_NAME FROM ZTB_REL_RESULT 
  LEFT JOIN M100 ON(M100.G_CODE = ZTB_REL_RESULT.G_CODE AND M100.CTR_CD = ZTB_REL_RESULT.CTR_CD) 
  LEFT JOIN M090 ON (M090.M_CODE = ZTB_REL_RESULT.M_CODE AND M090.CTR_CD = ZTB_REL_RESULT.CTR_CD) 
  LEFT JOIN ZTB_REL_SPECTTABLE ON (  ZTB_REL_SPECTTABLE.G_CODE = ZTB_REL_RESULT.G_CODE AND ZTB_REL_SPECTTABLE.TEST_CODE = ZTB_REL_RESULT.TEST_CODE AND ZTB_REL_SPECTTABLE.POINT_CODE = ZTB_REL_RESULT.POINT_CODE AND ZTB_REL_SPECTTABLE.M_CODE = ZTB_REL_RESULT.M_CODE AND ZTB_REL_SPECTTABLE.CTR_CD = ZTB_REL_RESULT.CTR_CD)  
  LEFT JOIN ZTB_REL_REQUESTTABLE ON (ZTB_REL_REQUESTTABLE.DTC_ID = ZTB_REL_RESULT.DTC_ID AND ZTB_REL_REQUESTTABLE.TEST_CODE = ZTB_REL_RESULT.TEST_CODE AND ZTB_REL_REQUESTTABLE.CTR_CD = ZTB_REL_RESULT.CTR_CD)  
  LEFT JOIN ZTB_REL_TESTTABLE ON (ZTB_REL_TESTTABLE.TEST_CODE = ZTB_REL_RESULT.TEST_CODE AND ZTB_REL_TESTTABLE.CTR_CD = ZTB_REL_RESULT.CTR_CD) 
   LEFT JOIN ZTB_REL_TESTPOINT ON ( ZTB_REL_SPECTTABLE.TEST_CODE = ZTB_REL_TESTPOINT.TEST_CODE AND ZTB_REL_SPECTTABLE.POINT_CODE = ZTB_REL_TESTPOINT.POINT_CODE AND ZTB_REL_SPECTTABLE.CTR_CD = ZTB_REL_TESTPOINT.CTR_CD)  
  LEFT JOIN ZTB_REL_TESTTYPE ON (ZTB_REL_TESTTYPE.TEST_TYPE_CODE = ZTB_REL_REQUESTTABLE.TEST_TYPE_CODE AND ZTB_REL_TESTTYPE.CTR_CD = ZTB_REL_REQUESTTABLE.CTR_CD) 
  LEFT JOIN ZTBEMPLINFO ON (ZTBEMPLINFO.EMPL_NO = ZTB_REL_REQUESTTABLE.REQUEST_EMPL_NO AND ZTBEMPLINFO.CTR_CD = ZTB_REL_REQUESTTABLE.CTR_CD) 
  LEFT JOIN ZTBWORKPOSITION ON (ZTBWORKPOSITION.WORK_POSITION_CODE = ZTBEMPLINFO.WORK_POSITION_CODE AND ZTBWORKPOSITION.CTR_CD = ZTBEMPLINFO.CTR_CD) 

  ${generate_condition_get_dtc_data(
    DATA.ALLTIME,
    DATA.FROM_DATE,
    DATA.TO_DATE,
    DATA.G_CODE,
    DATA.G_NAME,
    DATA.PROD_REQUEST_NO,
    DATA.M_NAME,
    DATA.M_CODE,
    DATA.TEST_NAME,
    DATA.TEST_TYPE,
    DATA.ID,
    DATA.CTR_CD
  )} ORDER BY TEST_FINISH_TIME DESC`;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.dtcspec = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = " WHERE 1=1 ";
  if (DATA.G_CODE !== "") {
    condition += ` AND M100.G_CODE='${DATA.G_CODE}'`;
  }
  if (DATA.M_CODE !== "") {
    condition += ` AND M090.M_CODE='${DATA.M_CODE}'`;
  }
  if (DATA.G_NAME !== "") {
    condition += ` AND M100.G_NAME LIKE '%${DATA.G_NAME}%'`;
  }
  if (DATA.M_NAME !== "") {
    condition += ` AND M090.M_NAME LIKE '%${DATA.M_NAME}%'`;
  }
  if (DATA.TEST_NAME !== "0") {
    condition += ` AND ZTB_REL_TESTTABLE.TEST_CODE = '${DATA.TEST_NAME}'`;
  }
  let setpdQuery = ` SELECT M090.TDS, M100.BANVE, M110.CUST_NAME_KD, ZTB_REL_SPECTTABLE.G_CODE, M100.G_NAME, ZTB_REL_TESTTABLE.TEST_NAME, ZTB_REL_TESTPOINT.POINT_NAME, ZTB_REL_SPECTTABLE.PRI, ZTB_REL_SPECTTABLE.CENTER_VALUE, ZTB_REL_SPECTTABLE.UPPER_TOR, ZTB_REL_SPECTTABLE.LOWER_TOR, (ZTB_REL_SPECTTABLE.CENTER_VALUE-ZTB_REL_SPECTTABLE.LOWER_TOR) AS MIN_SPEC, (ZTB_REL_SPECTTABLE.CENTER_VALUE+ZTB_REL_SPECTTABLE.UPPER_TOR) AS MAX_SPEC, ZTB_REL_SPECTTABLE.BARCODE_CONTENT, ZTB_REL_SPECTTABLE.REMARK, M090.M_NAME, M090.WIDTH_CD,ZTB_REL_SPECTTABLE.M_CODE FROM ZTB_REL_SPECTTABLE LEFT JOIN ZTB_REL_TESTTABLE ON (ZTB_REL_TESTTABLE.TEST_CODE = ZTB_REL_SPECTTABLE.TEST_CODE AND ZTB_REL_TESTTABLE.CTR_CD = ZTB_REL_SPECTTABLE.CTR_CD) LEFT JOIN ZTB_REL_TESTPOINT ON (ZTB_REL_TESTPOINT.POINT_CODE = ZTB_REL_SPECTTABLE.POINT_CODE AND ZTB_REL_SPECTTABLE.TEST_CODE = ZTB_REL_TESTPOINT.TEST_CODE AND ZTB_REL_TESTPOINT.CTR_CD = ZTB_REL_SPECTTABLE.CTR_CD) LEFT JOIN M100 ON (M100.G_CODE = ZTB_REL_SPECTTABLE.G_CODE AND M100.CTR_CD = ZTB_REL_SPECTTABLE.CTR_CD) LEFT JOIN M090 ON (M090.M_CODE = ZTB_REL_SPECTTABLE.M_CODE AND M090.CTR_CD = ZTB_REL_SPECTTABLE.CTR_CD) LEFT JOIN M110 ON (M110.CUST_CD = M100.CUST_CD AND M110.CTR_CD = M100.CTR_CD) ${condition} AND ZTB_REL_SPECTTABLE.CTR_CD='${DATA.CTR_CD}'`;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.getpatrolheader = async (req, res, DATA) => {
  let checkkq = "OK";
  let today = moment().format("YYYY-MM-DD");
  let condition = ``;
  if (DATA.NG_TYPE !== "ALL")
    condition += ` AND ERROR_TABLE.ERR_TYPE='${DATA.NG_TYPE}'`;
  let setpdQuery = `
          WITH INSPECTION_DATA_DOC1 AS
          (
          SELECT CAST(ZTBINSPECTNGTB.INSPECT_START_TIME as date) AS INSPECT_DATE, DATEPART(year, ZTBINSPECTNGTB.INSPECT_START_TIME) AS YEAR_NUM, DATEPART(ISO_WEEK, ZTBINSPECTNGTB.INSPECT_START_TIME) AS WEEK_NUM,
          (ZTBINSPECTNGTB.INSPECT_TOTAL_QTY-ERR32) AS INSPECT_TOTAL_QTY, M100.G_CODE, M100.G_NAME_KD, ZTBINSPECTNGTB.INSPECT_OK_QTY, ZTBINSPECTNGTB2.NG_QTY, (ZTBINSPECTNGTB2.NG_QTY * M100.PROD_LAST_PRICE)  AS NG_AMOUNT, ZTBINSPECTNGTB2.ERR_CODE, ZTBINSPECTNGTB.CTR_CD
          FROM ZTBINSPECTNGTB2
          LEFT JOIN ZTBINSPECTNGTB ON (ZTBINSPECTNGTB2.INSPECT_ID = ZTBINSPECTNGTB.INSPECT_ID AND ZTBINSPECTNGTB2.CTR_CD = ZTBINSPECTNGTB.CTR_CD)
          LEFT JOIN M100 ON (M100.G_CODE = ZTBINSPECTNGTB.G_CODE AND M100.CTR_CD = ZTBINSPECTNGTB.CTR_CD)
      WHERE CAST(ZTBINSPECTNGTB.INSPECT_START_TIME as date) BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE}'
          AND ZTBINSPECTNGTB.CTR_CD='${DATA.CTR_CD}'
          ),
          INSPECTION_DATA_DOC AS
        (
        SELECT ZTBINSPECTNGTB.G_CODE, CAST(ZTBINSPECTNGTB.INSPECT_START_TIME as date) AS INSPECT_DATE, DATEPART(year, ZTBINSPECTNGTB.INSPECT_START_TIME) AS YEAR_NUM, DATEPART(ISO_WEEK, ZTBINSPECTNGTB.INSPECT_START_TIME) AS WEEK_NUM,
        (ZTBINSPECTNGTB.INSPECT_TOTAL_QTY-ERR32) AS INSPECT_TOTAL_QTY, ZTBINSPECTNGTB.INSPECT_OK_QTY, ZTBINSPECTNGTB2.NG_QTY, (ZTBINSPECTNGTB2.NG_QTY * M100.PROD_LAST_PRICE)  AS NG_AMOUNT, ZTBINSPECTNGTB2.ERR_CODE, ZTBINSPECTNGTB.CTR_CD
        FROM ZTBINSPECTNGTB2
        LEFT JOIN ZTBINSPECTNGTB ON (ZTBINSPECTNGTB2.INSPECT_ID = ZTBINSPECTNGTB.INSPECT_ID AND ZTBINSPECTNGTB2.CTR_CD = ZTBINSPECTNGTB.CTR_CD)
        LEFT JOIN M100 ON (M100.G_CODE = ZTBINSPECTNGTB.G_CODE AND M100.CTR_CD = ZTBINSPECTNGTB.CTR_CD)
    WHERE CAST(ZTBINSPECTNGTB.INSPECT_START_TIME as date) BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE}'
        AND ZTBINSPECTNGTB.CTR_CD='${DATA.CTR_CD}'
        ),
        ERRBYGCODE AS
        (
        SELECT INSPECTION_DATA_DOC.G_CODE, ERROR_TABLE.ERR_CODE, ERROR_TABLE.ERR_NAME_VN, ERROR_TABLE.ERR_NAME_KR, SUM(CAST(INSPECTION_DATA_DOC.NG_QTY as bigint)) AS NG_QTY, SUM(NG_AMOUNT) AS NG_AMOUNT, INSPECTION_DATA_DOC.CTR_CD FROM INSPECTION_DATA_DOC
        LEFT JOIN ERROR_TABLE ON (ERROR_TABLE.ERR_CODE = INSPECTION_DATA_DOC.ERR_CODE AND ERROR_TABLE.CTR_CD = INSPECTION_DATA_DOC.CTR_CD)
        WHERE INSPECT_DATE  BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE}'  ${condition}
        AND INSPECTION_DATA_DOC.CTR_CD='${DATA.CTR_CD}'
        GROUP BY INSPECTION_DATA_DOC.G_CODE, ERROR_TABLE.ERR_CODE, ERROR_TABLE.ERR_NAME_VN, ERROR_TABLE.ERR_NAME_KR, INSPECTION_DATA_DOC.CTR_CD
        ),
        FINALTB AS
        (
        SELECT G_CODE, ERR_CODE, ERR_NAME_VN, ERR_NAME_KR, NG_QTY, NG_AMOUNT, COUNT(G_CODE) OVER (PARTITION BY G_CODE ORDER BY NG_AMOUNT DESC,ERR_CODE ASC) AS STT, CTR_CD FROM ERRBYGCODE
        ),
        FINAL2TB AS
        (
        SELECT * FROM FINALTB where STT <=3
        ),
        FINALPVTB AS
        (
        SELECT pvtb.G_CODE, isnull(pvtb.[1],'') AS WORST1, isnull(pvtb.[2],'') AS WORST2, isnull(pvtb.[3],'') AS WORST3, pvtb.CTR_CD FROM
        (SELECT G_CODE, ERR_NAME_VN, STT, CTR_CD FROM FINAL2TB) AS SRC
        PIVOT
        (
          MAX(SRC.ERR_NAME_VN) FOR STT IN ([1],[2],[3])
        )
        as pvtb),
        FCOSTTB as
        (
                SELECT INSPECTION_DATA_DOC1.G_CODE, INSPECTION_DATA_DOC1.G_NAME_KD, SUM(NG_AMOUNT) AS NG_AMOUNT,  SUM(CAST(INSPECTION_DATA_DOC1.INSPECT_TOTAL_QTY as bigint)) AS INSPECT_TOTAL_QTY, SUM(CAST(INSPECTION_DATA_DOC1.NG_QTY as bigint)) AS NG_QTY, INSPECTION_DATA_DOC1.CTR_CD
            FROM INSPECTION_DATA_DOC1
                LEFT JOIN ERROR_TABLE ON (ERROR_TABLE.ERR_CODE = INSPECTION_DATA_DOC1.ERR_CODE AND ERROR_TABLE.CTR_CD = INSPECTION_DATA_DOC1.CTR_CD)
            LEFT JOIN FINALPVTB ON (FINALPVTB.G_CODE = INSPECTION_DATA_DOC1.G_CODE AND FINALPVTB.CTR_CD = INSPECTION_DATA_DOC1.CTR_CD)
                WHERE INSPECT_DATE  BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE}' ${condition} AND INSPECTION_DATA_DOC1.NG_AMOUNT <> 0
                AND INSPECTION_DATA_DOC1.CTR_CD='${DATA.CTR_CD}'
                GROUP BY INSPECTION_DATA_DOC1.G_CODE, INSPECTION_DATA_DOC1.G_NAME_KD, INSPECTION_DATA_DOC1.CTR_CD
        )
        SELECT TOP 3 * FROM FCOSTTB LEFT JOIN FINALPVTB ON (FCOSTTB.G_CODE = FINALPVTB.G_CODE AND FCOSTTB.CTR_CD = FINALPVTB.CTR_CD) WHERE FCOSTTB.CTR_CD='${DATA.CTR_CD}' ORDER  BY FCOSTTB.NG_AMOUNT DESC
          `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.getInspectionWorstTable = async (req, res, DATA) => {
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let JOB_NAME = req.payload_data["JOB_NAME"];
  let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
  let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
  let checkkq = "OK";
  let condition = ``;
  if (DATA.WORSTBY === "AMOUNT")
    condition = `ORDER BY SUM(CAST(INSPECTION_DATA_DOC.NG_AMOUNT as bigint)) DESC`;
  if (DATA.WORSTBY === "QTY")
    condition = `ORDER BY SUM(CAST(INSPECTION_DATA_DOC.NG_QTY as bigint)) DESC`;
  let condition2 = ``;
  if (DATA.NG_TYPE !== "ALL") {
    condition2 += ` AND ERROR_TABLE.ERR_TYPE ='${DATA.NG_TYPE}'`;
  } else {
    condition2 += ` AND (ERROR_TABLE.ERR_TYPE ='M' OR ERROR_TABLE.ERR_TYPE='P')`;
  }
  let condition3 = `WHERE 1=1 `;
  if (DATA.codeArray.length === 1) {
    condition3 += ` AND ZTBINSPECTNGTB.G_CODE='${DATA.codeArray[0]}'`;
  } else if (DATA.codeArray.length > 1) {
    let codeString = ``;
    let codeArStr = DATA.codeArray.map((ele, index) => `'${ele}'`).join(",");
    condition3 += ` AND ZTBINSPECTNGTB.G_CODE IN (${codeArStr})`;
  }
  if (DATA.CUST_NAME_KD !== "") {
    condition3 += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`;
  }
  let setpdQuery = `
  WITH INSPECTION_DATA_DOC AS
  (
  SELECT CAST(ZTBINSPECTNGTB.INSPECT_START_TIME as date) AS INSPECT_DATE, DATEPART(year, ZTBINSPECTNGTB.INSPECT_START_TIME) AS YEAR_NUM, DATEPART(ISO_WEEK, ZTBINSPECTNGTB.INSPECT_START_TIME) AS WEEK_NUM,
  ZTBINSPECTNGTB.INSPECT_TOTAL_QTY, ZTBINSPECTNGTB.INSPECT_OK_QTY, ZTBINSPECTNGTB2.NG_QTY, (ZTBINSPECTNGTB2.NG_QTY * M100.PROD_LAST_PRICE)  AS NG_AMOUNT, ZTBINSPECTNGTB2.ERR_CODE, ZTBINSPECTNGTB.CTR_CD
  FROM ZTBINSPECTNGTB2
  LEFT JOIN ZTBINSPECTNGTB ON (ZTBINSPECTNGTB2.INSPECT_ID = ZTBINSPECTNGTB.INSPECT_ID AND ZTBINSPECTNGTB2.CTR_CD = ZTBINSPECTNGTB.CTR_CD)
  LEFT JOIN M100 ON (M100.G_CODE = ZTBINSPECTNGTB.G_CODE AND M100.CTR_CD = ZTBINSPECTNGTB.CTR_CD)
  LEFT JOIN P400 ON (P400.PROD_REQUEST_NO = ZTBINSPECTNGTB.PROD_REQUEST_NO AND P400.CTR_CD = ZTBINSPECTNGTB.CTR_CD)
  LEFT JOIN M110 ON (M110.CUST_CD = P400.CUST_CD AND M110.CTR_CD = P400.CTR_CD)
  ${condition3}
  )
  SELECT ERROR_TABLE.ERR_CODE, ERROR_TABLE.ERR_NAME_VN, ERROR_TABLE.ERR_NAME_KR, SUM(CAST(INSPECTION_DATA_DOC.NG_QTY as bigint)) AS NG_QTY, SUM(NG_AMOUNT) AS NG_AMOUNT FROM INSPECTION_DATA_DOC 
  LEFT JOIN ERROR_TABLE ON (ERROR_TABLE.ERR_CODE = INSPECTION_DATA_DOC.ERR_CODE AND ERROR_TABLE.CTR_CD = INSPECTION_DATA_DOC.CTR_CD)
  WHERE INSPECTION_DATA_DOC.CTR_CD='${DATA.CTR_CD}' AND INSPECT_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE}' ${condition2}
  GROUP BY ERROR_TABLE.ERR_CODE, ERROR_TABLE.ERR_NAME_VN, ERROR_TABLE.ERR_NAME_KR
  ${condition}`;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.inspect_daily_ppm = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = ` WHERE INSPECT_START_TIME BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE} 23:59:59' AND ZTBINSPECTNGTB.INSPECT_TOTAL_QTY <>0`;
  if (DATA.FACTORY !== "ALL") {
    condition += ` AND ZTBINSPECTNGTB.FACTORY='${DATA.FACTORY}'`;
  }
  if (DATA.codeArray.length === 1) {
    condition += ` AND ZTBINSPECTNGTB.G_CODE='${DATA.codeArray[0]}'`;
  } else if (DATA.codeArray.length > 1) {
    let codeString = ``;
    let codeArStr = DATA.codeArray.map((ele, index) => `'${ele}'`).join(",");
    condition += ` AND ZTBINSPECTNGTB.G_CODE IN (${codeArStr})`;
  }
  if (DATA.CUST_NAME_KD !== "") {
    //join customer name from string splitted by  comma  example: SEV, SEVT, SAMSUNG NETWORK to 'SEV','SEVT','SAMSUNG NETWORK'
    let custNameAr = DATA.CUST_NAME_KD.split(",")
      .map((item) => `'${item.trim()}'`)
      .join(",");
    condition += ` AND M110.CUST_NAME_KD IN (${custNameAr})`;
  }
  let setpdQuery = `SELECT CAST(INSPECT_START_TIME as date) AS INSPECT_DATE, SUM(INSPECT_TOTAL_QTY) AS INSPECT_TOTAL_QTY, SUM(ERR4+ ERR5+ ERR6+ ERR7 +ERR8 +ERR9 +ERR10+ERR11) AS MATERIAL_NG, SUM(ERR12+ERR13+ERR14+ERR15+ERR16+ERR17+ERR18+ERR19+ERR20+ERR21+ERR22+ERR23+ERR24+ERR25+ERR26+ERR27+ERR28+ERR29+ERR30+ERR31) AS PROCESS_NG, SUM(ERR4+ERR5+ERR6+ERR7+ERR8+ERR9+ERR10+ERR11+ERR12+ERR13+ERR14+ERR15+ERR16+ERR17+ERR18+ERR19+ERR20+ERR21+ERR22+ERR23+ERR24+ERR25+ERR26+ERR27+ERR28+ERR29+ERR30+ERR31) AS TOTAL_NG, CAST(SUM(ERR4+ERR5+ERR6+ERR7+ERR8+ERR9+ERR10+ERR11+ERR12+ERR13+ERR14+ERR15+ERR16+ERR17+ERR18+ERR19+ERR20+ERR21+ERR22+ERR23+ERR24+ERR25+ERR26+ERR27+ERR28+ERR29+ERR30+ERR31) as float)/CAST(SUM(INSPECT_TOTAL_QTY-ERR32) as float)*1000000 AS TOTAL_PPM, CAST(SUM(ERR4+ ERR5+ ERR6+ ERR7 +ERR8 +ERR9 +ERR10+ERR11) as float)/CAST(SUM(INSPECT_TOTAL_QTY-ERR32) as float)*1000000 AS MATERIAL_PPM, CAST(SUM(ERR12+ERR13+ERR14+ERR15+ERR16+ERR17+ERR18+ERR19+ERR20+ERR21+ERR22+ERR23+ERR24+ERR25+ERR26+ERR27+ERR28+ERR29+ERR30+ERR31) as float)/CAST(SUM(INSPECT_TOTAL_QTY-ERR32) as float)*1000000 AS PROCESS_PPM  FROM 
  ZTBINSPECTNGTB 
  LEFT JOIN P400 ON P400.PROD_REQUEST_NO = ZTBINSPECTNGTB.PROD_REQUEST_NO AND P400.CTR_CD = ZTBINSPECTNGTB.CTR_CD
  LEFT JOIN M110 ON M110.CUST_CD = P400.CUST_CD AND M110.CTR_CD = P400.CTR_CD
            ${condition} AND ZTBINSPECTNGTB.CTR_CD='${DATA.CTR_CD}'
            GROUP BY CAST(INSPECT_START_TIME as date) 
            ORDER BY CAST(INSPECT_START_TIME as date) DESC`;
  //${moment().format('YYYY-MM-DD')}
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.inspect_weekly_ppm = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = ` WHERE INSPECT_START_TIME BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE} 23:59:59' AND ZTBINSPECTNGTB.INSPECT_TOTAL_QTY <>0`;
  if (DATA.FACTORY !== "ALL") {
    condition += ` AND ZTBINSPECTNGTB.FACTORY='${DATA.FACTORY}'`;
  }
  if (DATA.codeArray.length === 1) {
    condition += ` AND ZTBINSPECTNGTB.G_CODE='${DATA.codeArray[0]}'`;
  } else if (DATA.codeArray.length > 1) {
    let codeString = ``;
    let codeArStr = DATA.codeArray.map((ele, index) => `'${ele}'`).join(",");
    condition += ` AND ZTBINSPECTNGTB.G_CODE IN (${codeArStr})`;
  }
  if (DATA.CUST_NAME_KD !== "") {
    //join customer name from string splitted by  comma  example: SEV, SEVT, SAMSUNG NETWORK to 'SEV','SEVT','SAMSUNG NETWORK'
    let custNameAr = DATA.CUST_NAME_KD.split(",")
      .map((item) => `'${item.trim()}'`)
      .join(",");
    condition += ` AND M110.CUST_NAME_KD IN (${custNameAr})`;
  }
  let setpdQuery = `SELECT CONCAT(YEAR(INSPECT_START_TIME),'_',  DATEPART(iso_week, DATEADD(DAY, 2, INSPECT_START_TIME))) AS YEAR_WEEK, YEAR(INSPECT_START_TIME) AS YEAR_NUM,  DATEPART(iso_week, DATEADD(DAY, 2, INSPECT_START_TIME)) AS WEEK_NUM, SUM(INSPECT_TOTAL_QTY) AS INSPECT_TOTAL_QTY, SUM(ERR4+ ERR5+ ERR6+ ERR7 +ERR8 +ERR9 +ERR10+ERR11) AS MATERIAL_NG, SUM(ERR12+ERR13+ERR14+ERR15+ERR16+ERR17+ERR18+ERR19+ERR20+ERR21+ERR22+ERR23+ERR24+ERR25+ERR26+ERR27+ERR28+ERR29+ERR30+ERR31) AS PROCESS_NG, SUM(ERR4+ERR5+ERR6+ERR7+ERR8+ERR9+ERR10+ERR11+ERR12+ERR13+ERR14+ERR15+ERR16+ERR17+ERR18+ERR19+ERR20+ERR21+ERR22+ERR23+ERR24+ERR25+ERR26+ERR27+ERR28+ERR29+ERR30+ERR31) AS TOTAL_NG, CAST(SUM(ERR4+ERR5+ERR6+ERR7+ERR8+ERR9+ERR10+ERR11+ERR12+ERR13+ERR14+ERR15+ERR16+ERR17+ERR18+ERR19+ERR20+ERR21+ERR22+ERR23+ERR24+ERR25+ERR26+ERR27+ERR28+ERR29+ERR30+ERR31) as float)/CAST(SUM(INSPECT_TOTAL_QTY-ERR32) as float)*1000000 AS TOTAL_PPM, CAST(SUM(ERR4+ ERR5+ ERR6+ ERR7 +ERR8 +ERR9 +ERR10+ERR11) as float)/CAST(SUM(INSPECT_TOTAL_QTY-ERR32) as float)*1000000 AS MATERIAL_PPM, CAST(SUM(ERR12+ERR13+ERR14+ERR15+ERR16+ERR17+ERR18+ERR19+ERR20+ERR21+ERR22+ERR23+ERR24+ERR25+ERR26+ERR27+ERR28+ERR29+ERR30+ERR31) as float)/CAST(SUM(INSPECT_TOTAL_QTY-ERR32) as float)*1000000 AS PROCESS_PPM  FROM ZTBINSPECTNGTB 
  LEFT JOIN P400 ON P400.PROD_REQUEST_NO = ZTBINSPECTNGTB.PROD_REQUEST_NO AND P400.CTR_CD = ZTBINSPECTNGTB.CTR_CD
            LEFT JOIN M110 ON M110.CUST_CD = P400.CUST_CD AND M110.CTR_CD = P400.CTR_CD
            ${condition} AND ZTBINSPECTNGTB.CTR_CD='${DATA.CTR_CD}'
            GROUP BY YEAR(INSPECT_START_TIME), DATEPART(iso_week, DATEADD(DAY, 2, INSPECT_START_TIME))
            ORDER BY YEAR(INSPECT_START_TIME) DESC, DATEPART(iso_week, DATEADD(DAY, 2, INSPECT_START_TIME))  DESC`;
  //${moment().format('YYYY-MM-DD')}
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.inspect_monthly_ppm = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = ` WHERE INSPECT_START_TIME BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE} 23:59:59' AND ZTBINSPECTNGTB.INSPECT_TOTAL_QTY <>0`;
  if (DATA.FACTORY !== "ALL") {
    condition += ` AND ZTBINSPECTNGTB.FACTORY='${DATA.FACTORY}'`;
  }
  if (DATA.codeArray.length === 1) {
    condition += ` AND ZTBINSPECTNGTB.G_CODE='${DATA.codeArray[0]}'`;
  } else if (DATA.codeArray.length > 1) {
    let codeString = ``;
    let codeArStr = DATA.codeArray.map((ele, index) => `'${ele}'`).join(",");
    condition += ` AND ZTBINSPECTNGTB.G_CODE IN (${codeArStr})`;
  }
  if (DATA.CUST_NAME_KD !== "") {
    //join customer name from string splitted by  comma  example: SEV, SEVT, SAMSUNG NETWORK to 'SEV','SEVT','SAMSUNG NETWORK'
    let custNameAr = DATA.CUST_NAME_KD.split(",")
      .map((item) => `'${item.trim()}'`)
      .join(",");
    condition += ` AND M110.CUST_NAME_KD IN (${custNameAr})`;
  }
  let setpdQuery = `SELECT CONCAT(YEAR(INSPECT_START_TIME),'_', MONTH(INSPECT_START_TIME)) AS YEAR_MONTH, YEAR(INSPECT_START_TIME) AS YEAR_NUM, MONTH(INSPECT_START_TIME) AS MONTH_NUM, SUM(INSPECT_TOTAL_QTY) AS INSPECT_TOTAL_QTY, SUM(ERR4+ ERR5+ ERR6+ ERR7 +ERR8 +ERR9 +ERR10+ERR11) AS MATERIAL_NG, SUM(ERR12+ERR13+ERR14+ERR15+ERR16+ERR17+ERR18+ERR19+ERR20+ERR21+ERR22+ERR23+ERR24+ERR25+ERR26+ERR27+ERR28+ERR29+ERR30+ERR31) AS PROCESS_NG, SUM(ERR4+ERR5+ERR6+ERR7+ERR8+ERR9+ERR10+ERR11+ERR12+ERR13+ERR14+ERR15+ERR16+ERR17+ERR18+ERR19+ERR20+ERR21+ERR22+ERR23+ERR24+ERR25+ERR26+ERR27+ERR28+ERR29+ERR30+ERR31) AS TOTAL_NG, CAST(SUM(ERR4+ERR5+ERR6+ERR7+ERR8+ERR9+ERR10+ERR11+ERR12+ERR13+ERR14+ERR15+ERR16+ERR17+ERR18+ERR19+ERR20+ERR21+ERR22+ERR23+ERR24+ERR25+ERR26+ERR27+ERR28+ERR29+ERR30+ERR31) as float)/CAST(SUM(INSPECT_TOTAL_QTY-ERR32) as float)*1000000 AS TOTAL_PPM, CAST(SUM(ERR4+ ERR5+ ERR6+ ERR7 +ERR8 +ERR9 +ERR10+ERR11) as float)/CAST(SUM(INSPECT_TOTAL_QTY-ERR32) as float)*1000000 AS MATERIAL_PPM, CAST(SUM(ERR12+ERR13+ERR14+ERR15+ERR16+ERR17+ERR18+ERR19+ERR20+ERR21+ERR22+ERR23+ERR24+ERR25+ERR26+ERR27+ERR28+ERR29+ERR30+ERR31) as float)/CAST(SUM(INSPECT_TOTAL_QTY-ERR32) as float)*1000000 AS PROCESS_PPM  FROM ZTBINSPECTNGTB 
  LEFT JOIN P400 ON P400.PROD_REQUEST_NO = ZTBINSPECTNGTB.PROD_REQUEST_NO AND P400.CTR_CD = ZTBINSPECTNGTB.CTR_CD
            LEFT JOIN M110 ON M110.CUST_CD = P400.CUST_CD AND M110.CTR_CD = P400.CTR_CD
           ${condition} AND ZTBINSPECTNGTB.CTR_CD='${DATA.CTR_CD}'
            GROUP BY YEAR(INSPECT_START_TIME), MONTH(INSPECT_START_TIME)
            ORDER BY YEAR(INSPECT_START_TIME) DESC, MONTH(INSPECT_START_TIME) DESC`;
  //${moment().format('YYYY-MM-DD')}
  ////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.inspect_yearly_ppm = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = ` WHERE INSPECT_START_TIME BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE} 23:59:59' AND ZTBINSPECTNGTB.INSPECT_TOTAL_QTY <>0`;
  if (DATA.FACTORY !== "ALL") {
    condition += ` AND ZTBINSPECTNGTB.FACTORY='${DATA.FACTORY}'`;
  }
  if (DATA.codeArray.length === 1) {
    condition += ` AND ZTBINSPECTNGTB.G_CODE='${DATA.codeArray[0]}'`;
  } else if (DATA.codeArray.length > 1) {
    let codeString = ``;
    let codeArStr = DATA.codeArray.map((ele, index) => `'${ele}'`).join(",");
    condition += `
     AND ZTBINSPECTNGTB.G_CODE IN (${codeArStr})`;
  }
  if (DATA.CUST_NAME_KD !== "") {
    //join customer name from string splitted by  comma  example: SEV, SEVT, SAMSUNG NETWORK to 'SEV','SEVT','SAMSUNG NETWORK'
    let custNameAr = DATA.CUST_NAME_KD.split(",")
      .map((item) => `'${item.trim()}'`)
      .join(",");
    condition += ` AND M110.CUST_NAME_KD IN (${custNameAr})`;
  }
  let setpdQuery = `SELECT YEAR(INSPECT_START_TIME) AS YEAR_NUM,  SUM(INSPECT_TOTAL_QTY) AS INSPECT_TOTAL_QTY, SUM(ERR4+ ERR5+ ERR6+ ERR7 +ERR8 +ERR9 +ERR10+ERR11) AS MATERIAL_NG, SUM(ERR12+ERR13+ERR14+ERR15+ERR16+ERR17+ERR18+ERR19+ERR20+ERR21+ERR22+ERR23+ERR24+ERR25+ERR26+ERR27+ERR28+ERR29+ERR30+ERR31) AS PROCESS_NG, SUM(ERR4+ERR5+ERR6+ERR7+ERR8+ERR9+ERR10+ERR11+ERR12+ERR13+ERR14+ERR15+ERR16+ERR17+ERR18+ERR19+ERR20+ERR21+ERR22+ERR23+ERR24+ERR25+ERR26+ERR27+ERR28+ERR29+ERR30+ERR31) AS TOTAL_NG, CAST(SUM(ERR4+ERR5+ERR6+ERR7+ERR8+ERR9+ERR10+ERR11+ERR12+ERR13+ERR14+ERR15+ERR16+ERR17+ERR18+ERR19+ERR20+ERR21+ERR22+ERR23+ERR24+ERR25+ERR26+ERR27+ERR28+ERR29+ERR30+ERR31) as float)/CAST(SUM(INSPECT_TOTAL_QTY-ERR32) as float)*1000000 AS TOTAL_PPM, CAST(SUM(ERR4+ ERR5+ ERR6+ ERR7 +ERR8 +ERR9 +ERR10+ERR11) as float)/CAST(SUM(INSPECT_TOTAL_QTY-ERR32) as float)*1000000 AS MATERIAL_PPM, CAST(SUM(ERR12+ERR13+ERR14+ERR15+ERR16+ERR17+ERR18+ERR19+ERR20+ERR21+ERR22+ERR23+ERR24+ERR25+ERR26+ERR27+ERR28+ERR29+ERR30+ERR31) as float)/CAST(SUM(INSPECT_TOTAL_QTY-ERR32) as float)*1000000 AS PROCESS_PPM  FROM ZTBINSPECTNGTB 
  LEFT JOIN P400 ON P400.PROD_REQUEST_NO = ZTBINSPECTNGTB.PROD_REQUEST_NO AND P400.CTR_CD = ZTBINSPECTNGTB.CTR_CD
  LEFT JOIN M110 ON M110.CUST_CD = P400.CUST_CD AND M110.CTR_CD = P400.CTR_CD
           ${condition} AND ZTBINSPECTNGTB.CTR_CD='${DATA.CTR_CD}'
            GROUP BY YEAR(INSPECT_START_TIME)
            ORDER BY YEAR(INSPECT_START_TIME) ASC`;
  //${moment().format('YYYY-MM-DD')}
  ////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.inspect_daily_ppm_oqc = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = ` WHERE INSPECT_START_TIME BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE} 23:59:59' AND ZTBINSPECTNGTB.INSPECT_TOTAL_QTY <>0`;
  if (DATA.FACTORY !== "ALL") {
    condition += ` AND ZTBINSPECTNGTB.FACTORY='${DATA.FACTORY}'`;
  }
  if (DATA.codeArray.length === 1) {
    condition += ` AND ZTBINSPECTNGTB.G_CODE='${DATA.codeArray[0]}'`;
  } else if (DATA.codeArray.length > 1) {
    let codeString = ``;
    let codeArStr = DATA.codeArray.map((ele, index) => `'${ele}'`).join(",");
    condition += ` AND ZTBINSPECTNGTB.G_CODE IN (${codeArStr})`;
  }
  if (DATA.CUST_NAME_KD !== "") {
    //join customer name from string splitted by  comma  example: SEV, SEVT, SAMSUNG NETWORK to 'SEV','SEVT','SAMSUNG NETWORK'
    let custNameAr = DATA.CUST_NAME_KD.split(",")
      .map((item) => `'${item.trim()}'`)
      .join(",");
    condition += ` AND M110.CUST_NAME_KD IN (${custNameAr})`;
  }
  let setpdQuery = `-- daily ppm OQC
DECLARE @FROM_DATE date;
DECLARE @TO_DATE date;
DECLARE @KPI_NAME varchar(100);
DECLARE @CTR_CD  varchar(3);

SET @FROM_DATE = '${DATA.FROM_DATE}';
SET @TO_DATE = '${DATA.TO_DATE}';
SET @KPI_NAME = 'NGRateKT';
SET @CTR_CD ='${DATA.CTR_CD}';



WITH DateRange AS (
    -- Lấy các ngày từ DATETABLE trong khoảng FROM_DATE đến TO_DATE
    SELECT 
        DATE_COLUMN AS KPI_DATE
    FROM DATETABLE
    WHERE DATE_COLUMN BETWEEN CAST(@FROM_DATE AS DATE) AND CAST(@TO_DATE AS DATE)
),
WorkingDays AS (
    -- Tính số ngày làm việc (trừ Chủ Nhật) cho toàn bộ tháng
    SELECT 
        YEAR(DATE_COLUMN) AS KPI_YEAR,
        MONTH(DATE_COLUMN) AS KPI_MONTH,
        COUNT(*) AS WORKING_DAYS
    FROM DATETABLE
    WHERE  DATE_COLUMN BETWEEN 
        DATEADD(month, DATEDIFF(month, 0, CAST(@FROM_DATE AS DATE)), 0) 
        AND EOMONTH(CAST(@TO_DATE AS DATE))
    GROUP BY YEAR(DATE_COLUMN), MONTH(DATE_COLUMN)
),
KPI_TB AS
(
SELECT 
    d.KPI_DATE,
    CASE        
        WHEN k.VALUE_TYPE = 'Number' THEN 
            ISNULL(k.KPI_VALUE / NULLIF(w.WORKING_DAYS, 0), 0)
        WHEN k.VALUE_TYPE = 'Percentage' THEN 
            ISNULL(k.KPI_VALUE, 0)
        ELSE 0
    END AS KPI_VALUE
FROM DateRange d
LEFT JOIN ZTB_KPI_TB k 
    ON k.KPI_YEAR = YEAR(d.KPI_DATE)
    AND k.KPI_MONTH = MONTH(d.KPI_DATE)
LEFT JOIN WorkingDays w
    ON w.KPI_YEAR = YEAR(d.KPI_DATE)
    AND w.KPI_MONTH = MONTH(d.KPI_DATE)
WHERE  k.KPI_NAME= @KPI_NAME
),
DATETB AS
(
SELECT * FROM DATETABLE WHERE DATE_COLUMN BETWEEN @FROM_DATE  AND @TO_DATE
),
INSPECTTB AS
(
SELECT CAST(INSPECT_START_TIME as date) AS INSPECT_DATE, SUM(INSPECT_TOTAL_QTY) AS INSPECT_TOTAL_QTY, SUM(ERR1+ ERR2 + ERR3 + ERR32+ERR4+ ERR5+ ERR6+ ERR7 +ERR8 +ERR9 +ERR10+ERR11) AS MATERIAL_NG, SUM(ERR12+ERR13+ERR14+ERR15+ERR16+ERR17+ERR18+ERR19+ERR20+ERR21+ERR22+ERR23+ERR24+ERR25+ERR26+ERR27+ERR28+ERR29+ERR30+ERR31) AS PROCESS_NG, SUM(ERR1+ ERR2 + ERR3 + ERR32+ERR4+ERR5+ERR6+ERR7+ERR8+ERR9+ERR10+ERR11+ERR12+ERR13+ERR14+ERR15+ERR16+ERR17+ERR18+ERR19+ERR20+ERR21+ERR22+ERR23+ERR24+ERR25+ERR26+ERR27+ERR28+ERR29+ERR30+ERR31) AS TOTAL_NG, CAST(SUM(ERR1+ERR2+ERR3+ERR32+ERR4+ERR5+ERR6+ERR7+ERR8+ERR9+ERR10+ERR11+ERR12+ERR13+ERR14+ERR15+ERR16+ERR17+ERR18+ERR19+ERR20+ERR21+ERR22+ERR23+ERR24+ERR25+ERR26+ERR27+ERR28+ERR29+ERR30+ERR31) as float)/CAST(SUM(INSPECT_TOTAL_QTY) as float)*1000000 AS TOTAL_PPM, CAST(SUM(ERR1+ ERR2 + ERR3 + ERR32+ERR4+ ERR5+ ERR6+ ERR7 +ERR8 +ERR9 +ERR10+ERR11) as float)/CAST(SUM(INSPECT_TOTAL_QTY) as float)*1000000 AS MATERIAL_PPM, CAST(SUM(ERR12+ERR13+ERR14+ERR15+ERR16+ERR17+ERR18+ERR19+ERR20+ERR21+ERR22+ERR23+ERR24+ERR25+ERR26+ERR27+ERR28+ERR29+ERR30+ERR31) as float)/CAST(SUM(INSPECT_TOTAL_QTY) as float)*1000000 AS PROCESS_PPM  FROM 
  ZTBINSPECTNGTB 
  LEFT JOIN P400 ON P400.PROD_REQUEST_NO = ZTBINSPECTNGTB.PROD_REQUEST_NO AND P400.CTR_CD = ZTBINSPECTNGTB.CTR_CD
  LEFT JOIN M110 ON M110.CUST_CD = P400.CUST_CD AND M110.CTR_CD = P400.CTR_CD
           ${condition} AND ZTBINSPECTNGTB.CTR_CD='${DATA.CTR_CD}'
            GROUP BY CAST(INSPECT_START_TIME as date)            
)

SELECT DATETB.DATE_COLUMN AS INSPECT_DATE, isnull(INSPECTTB.INSPECT_TOTAL_QTY,0) AS INSPECT_TOTAL_QTY, isnull(INSPECTTB.TOTAL_NG,0) AS TOTAL_NG, isnull(INSPECTTB.TOTAL_PPM,0) AS TOTAL_PPM, isnull(INSPECTTB.MATERIAL_NG,0) AS MATERIAL_NG, isnull(INSPECTTB.MATERIAL_PPM,0) AS MATERIAL_PPM, isnull(INSPECTTB.PROCESS_NG,0) AS PROCESS_NG, isnull(INSPECTTB.PROCESS_PPM,0) AS PROCESS_PPM, KPI_TB.KPI_VALUE*10000 AS KPI_VALUE 
FROM DATETB
LEFT JOIN INSPECTTB ON INSPECTTB.INSPECT_DATE = DATETB.DATE_COLUMN
LEFT JOIN KPI_TB ON DATETB.DATE_COLUMN = KPI_TB.KPI_DATE
ORDER BY DATETB.DATE_COLUMN DESC`;
  //${moment().format('YYYY-MM-DD')}
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.inspect_weekly_ppm_oqc = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = ` WHERE INSPECT_START_TIME BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE} 23:59:59' AND ZTBINSPECTNGTB.INSPECT_TOTAL_QTY <>0`;
  if (DATA.FACTORY !== "ALL") {
    condition += ` AND ZTBINSPECTNGTB.FACTORY='${DATA.FACTORY}'`;
  }
  if (DATA.codeArray.length === 1) {
    condition += ` AND ZTBINSPECTNGTB.G_CODE='${DATA.codeArray[0]}'`;
  } else if (DATA.codeArray.length > 1) {
    let codeString = ``;
    let codeArStr = DATA.codeArray.map((ele, index) => `'${ele}'`).join(",");
    condition += ` AND ZTBINSPECTNGTB.G_CODE IN (${codeArStr})`;
  }
  //condition += ` AND M110.CUST_NAME_KD IN('SEV','SEVT','SAMSUNG NETWORK')`
  if (DATA.CUST_NAME_KD !== "") {
    //join customer name from string splitted by  comma  example: SEV, SEVT, SAMSUNG NETWORK to 'SEV','SEVT','SAMSUNG NETWORK'
    let custNameAr = DATA.CUST_NAME_KD.split(",")
      .map((item) => `'${item.trim()}'`)
      .join(",");
    condition += ` AND M110.CUST_NAME_KD IN (${custNameAr})`;
  }
  let setpdQuery = `-- weekly ppm OQC
DECLARE @FROM_DATE date;
DECLARE @TO_DATE date;
DECLARE @KPI_NAME varchar(100);
DECLARE @CTR_CD  varchar(3);

SET @FROM_DATE = '${DATA.FROM_DATE}';
SET @TO_DATE = '${DATA.TO_DATE}';
SET @KPI_NAME = 'NGRateKT';
SET @CTR_CD ='${DATA.CTR_CD}';



WITH DateRange AS (
    -- Lấy các ngày từ DATETABLE trong khoảng FROM_DATE đến TO_DATE
    SELECT 
        DATE_COLUMN AS KPI_DATE
    FROM DATETABLE
    WHERE DATE_COLUMN BETWEEN CAST(@FROM_DATE AS DATE) AND CAST(@TO_DATE AS DATE)
),
WorkingDays AS (
    -- Tính số ngày làm việc (trừ Chủ Nhật) cho toàn bộ tháng
    SELECT 
        YEAR(DATE_COLUMN) AS KPI_YEAR,
        MONTH(DATE_COLUMN) AS KPI_MONTH,
        COUNT(*) AS WORKING_DAYS
    FROM DATETABLE
    WHERE  DATE_COLUMN BETWEEN 
        DATEADD(month, DATEDIFF(month, 0, CAST(@FROM_DATE AS DATE)), 0) 
        AND EOMONTH(CAST(@TO_DATE AS DATE))
    GROUP BY YEAR(DATE_COLUMN), MONTH(DATE_COLUMN)
),
KPI_TB AS
(
SELECT 
    d.KPI_DATE,
    CASE        
        WHEN k.VALUE_TYPE = 'Number' THEN 
            ISNULL(k.KPI_VALUE / NULLIF(w.WORKING_DAYS, 0), 0)
        WHEN k.VALUE_TYPE = 'Percentage' THEN 
            ISNULL(k.KPI_VALUE, 0)
        ELSE 0
    END AS KPI_VALUE
FROM DateRange d
LEFT JOIN ZTB_KPI_TB k 
    ON k.KPI_YEAR = YEAR(d.KPI_DATE)
    AND k.KPI_MONTH = MONTH(d.KPI_DATE)
LEFT JOIN WorkingDays w
    ON w.KPI_YEAR = YEAR(d.KPI_DATE)
    AND w.KPI_MONTH = MONTH(d.KPI_DATE)
WHERE  k.KPI_NAME= @KPI_NAME
),
DATETB AS
(
SELECT * FROM DATETABLE WHERE DATE_COLUMN BETWEEN @FROM_DATE  AND @TO_DATE
),
INSPECTTB AS
(
SELECT CAST(INSPECT_START_TIME as date) AS INSPECT_DATE, SUM(INSPECT_TOTAL_QTY) AS INSPECT_TOTAL_QTY, SUM(ERR1+ ERR2 + ERR3 + ERR32+ERR4+ ERR5+ ERR6+ ERR7 +ERR8 +ERR9 +ERR10+ERR11) AS MATERIAL_NG, SUM(ERR12+ERR13+ERR14+ERR15+ERR16+ERR17+ERR18+ERR19+ERR20+ERR21+ERR22+ERR23+ERR24+ERR25+ERR26+ERR27+ERR28+ERR29+ERR30+ERR31) AS PROCESS_NG, SUM(ERR1+ ERR2 + ERR3 + ERR32+ERR4+ERR5+ERR6+ERR7+ERR8+ERR9+ERR10+ERR11+ERR12+ERR13+ERR14+ERR15+ERR16+ERR17+ERR18+ERR19+ERR20+ERR21+ERR22+ERR23+ERR24+ERR25+ERR26+ERR27+ERR28+ERR29+ERR30+ERR31) AS TOTAL_NG FROM 
  ZTBINSPECTNGTB 
  LEFT JOIN P400 ON P400.PROD_REQUEST_NO = ZTBINSPECTNGTB.PROD_REQUEST_NO AND P400.CTR_CD = ZTBINSPECTNGTB.CTR_CD
  LEFT JOIN M110 ON M110.CUST_CD = P400.CUST_CD AND M110.CTR_CD = P400.CTR_CD
           ${condition} AND ZTBINSPECTNGTB.CTR_CD='${DATA.CTR_CD}'
            GROUP BY CAST(INSPECT_START_TIME as date)            
)

SELECT  CONCAT(YEAR(DATETB.DATE_COLUMN),'_',  DATEPART(iso_week, DATEADD(DAY, 2, DATETB.DATE_COLUMN))) AS YEAR_WEEK, YEAR(DATETB.DATE_COLUMN) AS YEAR_NUM,  DATEPART(iso_week, DATEADD(DAY, 2, DATETB.DATE_COLUMN)) AS WEEK_NUM, 
SUM(isnull(INSPECTTB.INSPECT_TOTAL_QTY,0)) AS INSPECT_TOTAL_QTY, 
SUM(isnull(INSPECTTB.TOTAL_NG,0)) AS TOTAL_NG, 
SUM(isnull(INSPECTTB.MATERIAL_NG,0)) AS MATERIAL_NG, 
SUM(isnull(INSPECTTB.PROCESS_NG,0)) AS PROCESS_NG,
SUM(CAST(isnull(INSPECTTB.TOTAL_NG,0) AS float))*1000000.0/SUM(CAST(isnull(INSPECTTB.INSPECT_TOTAL_QTY,0) AS float)) AS TOTAL_PPM,
SUM(CAST(isnull(INSPECTTB.MATERIAL_NG,0) AS float))*1000000.0/SUM(CAST(isnull(INSPECTTB.INSPECT_TOTAL_QTY,0) AS float)) AS MATERIAL_PPM,
SUM(CAST(isnull(INSPECTTB.PROCESS_NG,0) AS float))*1000000.0/SUM(CAST(isnull(INSPECTTB.INSPECT_TOTAL_QTY,0) AS float)) AS PROCESS_PPM,
AVG(isnull(KPI_TB.KPI_VALUE,0))*10000 AS KPI_VALUE 
FROM DATETB
LEFT JOIN INSPECTTB ON INSPECTTB.INSPECT_DATE = DATETB.DATE_COLUMN
LEFT JOIN KPI_TB ON DATETB.DATE_COLUMN = KPI_TB.KPI_DATE
GROUP BY YEAR(DATETB.DATE_COLUMN),DATEPART(iso_week, DATEADD(DAY, 2, DATETB.DATE_COLUMN))
HAVING SUM(CAST(isnull(INSPECTTB.INSPECT_TOTAL_QTY,0) AS float)) <> 0
ORDER BY YEAR(DATETB.DATE_COLUMN) DESC,DATEPART(iso_week, DATEADD(DAY, 2, DATETB.DATE_COLUMN)) DESC`;
  //${moment().format('YYYY-MM-DD')}
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.inspect_monthly_ppm_oqc = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = ` WHERE INSPECT_START_TIME BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE} 23:59:59' AND ZTBINSPECTNGTB.INSPECT_TOTAL_QTY <>0`;
  if (DATA.FACTORY !== "ALL") {
    condition += ` AND ZTBINSPECTNGTB.FACTORY='${DATA.FACTORY}'`;
  }
  if (DATA.codeArray.length === 1) {
    condition += ` AND ZTBINSPECTNGTB.G_CODE='${DATA.codeArray[0]}'`;
  } else if (DATA.codeArray.length > 1) {
    let codeString = ``;
    let codeArStr = DATA.codeArray.map((ele, index) => `'${ele}'`).join(",");
    condition += ` AND ZTBINSPECTNGTB.G_CODE IN (${codeArStr})`;
  }
  if (DATA.CUST_NAME_KD !== "") {
    //join customer name from string splitted by  comma  example: SEV, SEVT, SAMSUNG NETWORK to 'SEV','SEVT','SAMSUNG NETWORK'
    let custNameAr = DATA.CUST_NAME_KD.split(",")
      .map((item) => `'${item.trim()}'`)
      .join(",");
    condition += ` AND M110.CUST_NAME_KD IN (${custNameAr})`;
  }
  let setpdQuery = `-- monthly ppm OQC
DECLARE @FROM_DATE date;
DECLARE @TO_DATE date;
DECLARE @KPI_NAME varchar(100);
DECLARE @CTR_CD  varchar(3);

SET @FROM_DATE = '${DATA.FROM_DATE}';
SET @TO_DATE = '${DATA.TO_DATE}';
SET @KPI_NAME = 'NGRateKT';
SET @CTR_CD ='${DATA.CTR_CD}';



WITH DateRange AS (
    -- Lấy các ngày từ DATETABLE trong khoảng FROM_DATE đến TO_DATE
    SELECT 
        DATE_COLUMN AS KPI_DATE
    FROM DATETABLE
    WHERE DATE_COLUMN BETWEEN CAST(@FROM_DATE AS DATE) AND CAST(@TO_DATE AS DATE)
),
WorkingDays AS (
    -- Tính số ngày làm việc (trừ Chủ Nhật) cho toàn bộ tháng
    SELECT 
        YEAR(DATE_COLUMN) AS KPI_YEAR,
        MONTH(DATE_COLUMN) AS KPI_MONTH,
        COUNT(*) AS WORKING_DAYS
    FROM DATETABLE
    WHERE  DATE_COLUMN BETWEEN 
        DATEADD(month, DATEDIFF(month, 0, CAST(@FROM_DATE AS DATE)), 0) 
        AND EOMONTH(CAST(@TO_DATE AS DATE))
    GROUP BY YEAR(DATE_COLUMN), MONTH(DATE_COLUMN)
),
KPI_TB AS
(
SELECT 
    d.KPI_DATE,
    CASE        
        WHEN k.VALUE_TYPE = 'Number' THEN 
            ISNULL(k.KPI_VALUE / NULLIF(w.WORKING_DAYS, 0), 0)
        WHEN k.VALUE_TYPE = 'Percentage' THEN 
            ISNULL(k.KPI_VALUE, 0)
        ELSE 0
    END AS KPI_VALUE
FROM DateRange d
LEFT JOIN ZTB_KPI_TB k 
    ON k.KPI_YEAR = YEAR(d.KPI_DATE)
    AND k.KPI_MONTH = MONTH(d.KPI_DATE)
LEFT JOIN WorkingDays w
    ON w.KPI_YEAR = YEAR(d.KPI_DATE)
    AND w.KPI_MONTH = MONTH(d.KPI_DATE)
WHERE  k.KPI_NAME= @KPI_NAME
),
DATETB AS
(
SELECT * FROM DATETABLE WHERE DATE_COLUMN BETWEEN @FROM_DATE  AND @TO_DATE
),
INSPECTTB AS
(
SELECT CAST(INSPECT_START_TIME as date) AS INSPECT_DATE, SUM(INSPECT_TOTAL_QTY) AS INSPECT_TOTAL_QTY, SUM(ERR1+ ERR2 + ERR3 + ERR32+ERR4+ ERR5+ ERR6+ ERR7 +ERR8 +ERR9 +ERR10+ERR11) AS MATERIAL_NG, SUM(ERR12+ERR13+ERR14+ERR15+ERR16+ERR17+ERR18+ERR19+ERR20+ERR21+ERR22+ERR23+ERR24+ERR25+ERR26+ERR27+ERR28+ERR29+ERR30+ERR31) AS PROCESS_NG, SUM(ERR1+ ERR2 + ERR3 + ERR32+ERR4+ERR5+ERR6+ERR7+ERR8+ERR9+ERR10+ERR11+ERR12+ERR13+ERR14+ERR15+ERR16+ERR17+ERR18+ERR19+ERR20+ERR21+ERR22+ERR23+ERR24+ERR25+ERR26+ERR27+ERR28+ERR29+ERR30+ERR31) AS TOTAL_NG FROM 
  ZTBINSPECTNGTB 
  LEFT JOIN P400 ON P400.PROD_REQUEST_NO = ZTBINSPECTNGTB.PROD_REQUEST_NO AND P400.CTR_CD = ZTBINSPECTNGTB.CTR_CD
  LEFT JOIN M110 ON M110.CUST_CD = P400.CUST_CD AND M110.CTR_CD = P400.CTR_CD
           ${condition} AND ZTBINSPECTNGTB.CTR_CD='${DATA.CTR_CD}'
            GROUP BY CAST(INSPECT_START_TIME as date)            
)

SELECT  CONCAT(YEAR(DATETB.DATE_COLUMN),'_', MONTH(DATETB.DATE_COLUMN)) AS YEAR_MONTH, YEAR(DATETB.DATE_COLUMN) AS YEAR_NUM, MONTH(DATETB.DATE_COLUMN) AS MONTH_NUM, 
SUM(isnull(INSPECTTB.INSPECT_TOTAL_QTY,0)) AS INSPECT_TOTAL_QTY, 
SUM(isnull(INSPECTTB.TOTAL_NG,0)) AS TOTAL_NG, 
SUM(isnull(INSPECTTB.MATERIAL_NG,0)) AS MATERIAL_NG, 
SUM(isnull(INSPECTTB.PROCESS_NG,0)) AS PROCESS_NG,
SUM(CAST(isnull(INSPECTTB.TOTAL_NG,0) AS float))*1000000.0/SUM(CAST(isnull(INSPECTTB.INSPECT_TOTAL_QTY,0) AS float)) AS TOTAL_PPM,
SUM(CAST(isnull(INSPECTTB.MATERIAL_NG,0) AS float))*1000000.0/SUM(CAST(isnull(INSPECTTB.INSPECT_TOTAL_QTY,0) AS float)) AS MATERIAL_PPM,
SUM(CAST(isnull(INSPECTTB.PROCESS_NG,0) AS float))*1000000.0/SUM(CAST(isnull(INSPECTTB.INSPECT_TOTAL_QTY,0) AS float)) AS PROCESS_PPM,
AVG(isnull(KPI_TB.KPI_VALUE,0))*10000 AS KPI_VALUE 
FROM DATETB
LEFT JOIN INSPECTTB ON INSPECTTB.INSPECT_DATE = DATETB.DATE_COLUMN
LEFT JOIN KPI_TB ON DATETB.DATE_COLUMN = KPI_TB.KPI_DATE
GROUP BY YEAR(DATETB.DATE_COLUMN),MONTH(DATETB.DATE_COLUMN)
HAVING SUM(CAST(isnull(INSPECTTB.INSPECT_TOTAL_QTY,0) AS float)) <> 0
ORDER BY YEAR(DATETB.DATE_COLUMN) DESC,MONTH(DATETB.DATE_COLUMN) DESC`;
  //${moment().format('YYYY-MM-DD')}
  ////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.inspect_yearly_ppm_oqc = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = ` WHERE INSPECT_START_TIME BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE} 23:59:59' AND ZTBINSPECTNGTB.INSPECT_TOTAL_QTY <>0`;
  if (DATA.FACTORY !== "ALL") {
    condition += ` AND ZTBINSPECTNGTB.FACTORY='${DATA.FACTORY}'`;
  }
  if (DATA.codeArray.length === 1) {
    condition += ` AND ZTBINSPECTNGTB.G_CODE='${DATA.codeArray[0]}'`;
  } else if (DATA.codeArray.length > 1) {
    let codeString = ``;
    let codeArStr = DATA.codeArray.map((ele, index) => `'${ele}'`).join(",");
    condition += `
     AND ZTBINSPECTNGTB.G_CODE IN (${codeArStr})`;
  }
  if (DATA.CUST_NAME_KD !== "") {
    //join customer name from string splitted by  comma  example: SEV, SEVT, SAMSUNG NETWORK to 'SEV','SEVT','SAMSUNG NETWORK'
    let custNameAr = DATA.CUST_NAME_KD.split(",")
      .map((item) => `'${item.trim()}'`)
      .join(",");
    condition += ` AND M110.CUST_NAME_KD IN (${custNameAr})`;
  }
  let setpdQuery = `-- yearly ppm OQC
DECLARE @FROM_DATE date;
DECLARE @TO_DATE date;
DECLARE @KPI_NAME varchar(100);
DECLARE @CTR_CD  varchar(3);

SET @FROM_DATE = '${DATA.FROM_DATE}';
SET @TO_DATE = '${DATA.TO_DATE}';
SET @KPI_NAME = 'NGRateKT';
SET @CTR_CD ='${DATA.CTR_CD}';



WITH DateRange AS (
    -- Lấy các ngày từ DATETABLE trong khoảng FROM_DATE đến TO_DATE
    SELECT 
        DATE_COLUMN AS KPI_DATE
    FROM DATETABLE
    WHERE DATE_COLUMN BETWEEN CAST(@FROM_DATE AS DATE) AND CAST(@TO_DATE AS DATE)
),
WorkingDays AS (
    -- Tính số ngày làm việc (trừ Chủ Nhật) cho toàn bộ tháng
    SELECT 
        YEAR(DATE_COLUMN) AS KPI_YEAR,
        MONTH(DATE_COLUMN) AS KPI_MONTH,
        COUNT(*) AS WORKING_DAYS
    FROM DATETABLE
    WHERE  DATE_COLUMN BETWEEN 
        DATEADD(month, DATEDIFF(month, 0, CAST(@FROM_DATE AS DATE)), 0) 
        AND EOMONTH(CAST(@TO_DATE AS DATE))
    GROUP BY YEAR(DATE_COLUMN), MONTH(DATE_COLUMN)
),
KPI_TB AS
(
SELECT 
    d.KPI_DATE,
    CASE        
        WHEN k.VALUE_TYPE = 'Number' THEN 
            ISNULL(k.KPI_VALUE / NULLIF(w.WORKING_DAYS, 0), 0)
        WHEN k.VALUE_TYPE = 'Percentage' THEN 
            ISNULL(k.KPI_VALUE, 0)
        ELSE 0
    END AS KPI_VALUE
FROM DateRange d
LEFT JOIN ZTB_KPI_TB k 
    ON k.KPI_YEAR = YEAR(d.KPI_DATE)
    AND k.KPI_MONTH = MONTH(d.KPI_DATE)
LEFT JOIN WorkingDays w
    ON w.KPI_YEAR = YEAR(d.KPI_DATE)
    AND w.KPI_MONTH = MONTH(d.KPI_DATE)
WHERE  k.KPI_NAME= @KPI_NAME
),
DATETB AS
(
SELECT * FROM DATETABLE WHERE DATE_COLUMN BETWEEN @FROM_DATE  AND @TO_DATE
),
INSPECTTB AS
(
SELECT CAST(INSPECT_START_TIME as date) AS INSPECT_DATE, SUM(INSPECT_TOTAL_QTY) AS INSPECT_TOTAL_QTY, SUM(ERR1+ ERR2 + ERR3 + ERR32+ERR4+ ERR5+ ERR6+ ERR7 +ERR8 +ERR9 +ERR10+ERR11) AS MATERIAL_NG, SUM(ERR12+ERR13+ERR14+ERR15+ERR16+ERR17+ERR18+ERR19+ERR20+ERR21+ERR22+ERR23+ERR24+ERR25+ERR26+ERR27+ERR28+ERR29+ERR30+ERR31) AS PROCESS_NG, SUM(ERR1+ ERR2 + ERR3 + ERR32+ERR4+ERR5+ERR6+ERR7+ERR8+ERR9+ERR10+ERR11+ERR12+ERR13+ERR14+ERR15+ERR16+ERR17+ERR18+ERR19+ERR20+ERR21+ERR22+ERR23+ERR24+ERR25+ERR26+ERR27+ERR28+ERR29+ERR30+ERR31) AS TOTAL_NG FROM 
  ZTBINSPECTNGTB 
  LEFT JOIN P400 ON P400.PROD_REQUEST_NO = ZTBINSPECTNGTB.PROD_REQUEST_NO AND P400.CTR_CD = ZTBINSPECTNGTB.CTR_CD
  LEFT JOIN M110 ON M110.CUST_CD = P400.CUST_CD AND M110.CTR_CD = P400.CTR_CD
            ${condition} AND ZTBINSPECTNGTB.CTR_CD='${DATA.CTR_CD}'
            GROUP BY CAST(INSPECT_START_TIME as date)            
)

SELECT  YEAR(DATETB.DATE_COLUMN) AS YEAR_NUM, 
SUM(isnull(INSPECTTB.INSPECT_TOTAL_QTY,0)) AS INSPECT_TOTAL_QTY, 
SUM(isnull(INSPECTTB.TOTAL_NG,0)) AS TOTAL_NG, 
SUM(isnull(INSPECTTB.MATERIAL_NG,0)) AS MATERIAL_NG, 
SUM(isnull(INSPECTTB.PROCESS_NG,0)) AS PROCESS_NG,
SUM(CAST(isnull(INSPECTTB.TOTAL_NG,0) AS float))*1000000.0/SUM(CAST(isnull(INSPECTTB.INSPECT_TOTAL_QTY,0) AS float)) AS TOTAL_PPM,
SUM(CAST(isnull(INSPECTTB.MATERIAL_NG,0) AS float))*1000000.0/SUM(CAST(isnull(INSPECTTB.INSPECT_TOTAL_QTY,0) AS float)) AS MATERIAL_PPM,
SUM(CAST(isnull(INSPECTTB.PROCESS_NG,0) AS float))*1000000.0/SUM(CAST(isnull(INSPECTTB.INSPECT_TOTAL_QTY,0) AS float)) AS PROCESS_PPM,
AVG(isnull(KPI_TB.KPI_VALUE,0))*10000 AS KPI_VALUE 
FROM DATETB
LEFT JOIN INSPECTTB ON INSPECTTB.INSPECT_DATE = DATETB.DATE_COLUMN
LEFT JOIN KPI_TB ON DATETB.DATE_COLUMN = KPI_TB.KPI_DATE
GROUP BY YEAR(DATETB.DATE_COLUMN)
HAVING SUM(CAST(isnull(INSPECTTB.INSPECT_TOTAL_QTY,0) AS float)) <> 0
ORDER BY YEAR(DATETB.DATE_COLUMN) DESC`;
  //${moment().format('YYYY-MM-DD')}
  console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.getInspectionSummary = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = ``;
  if (DATA.codeArray.length === 1) {
    condition += ` AND ZTBINSPECTNGTB.G_CODE='${DATA.codeArray[0]}'`;
  } else if (DATA.codeArray.length > 1) {
    let codeString = ``;
    let codeArStr = DATA.codeArray.map((ele, index) => `'${ele}'`).join(",");
    condition += ` AND ZTBINSPECTNGTB.G_CODE IN (${codeArStr})`;
  }
  if (DATA.CUST_NAME_KD !== "") {
    condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`;
  }
  let setpdQuery = `
  SELECT SUM(CAST((INSPECT_TOTAL_QTY -ERR32)as bigint)) AS ISP_TT_QTY, SUM(CAST(INSPECT_OK_QTY as bigint)) AS INSP_OK_QTY , SUM(CAST(ERR4 AS bigint)+CAST(ERR5 AS bigint)+CAST(ERR6 AS bigint)+CAST(ERR7 AS bigint)+CAST(ERR8 AS bigint)+CAST(ERR9 AS bigint)+CAST(ERR10 AS bigint)+CAST(ERR11 AS bigint)) AS M_NG_QTY, SUM(CAST(ERR12 AS bigint)+CAST(ERR13 AS bigint)+CAST(ERR14 AS bigint)+CAST(ERR15 AS bigint)+CAST(ERR16 AS bigint)+CAST(ERR17 AS bigint)+CAST(ERR18 AS bigint)+CAST(ERR19 AS bigint)+CAST(ERR20 AS bigint)+CAST(ERR21 AS bigint)+CAST(ERR22 AS bigint)+CAST(ERR23 AS bigint)+CAST(ERR24 AS bigint)+CAST(ERR25 AS bigint)+CAST(ERR26 AS bigint)+CAST(ERR27 AS bigint)+CAST(ERR28 AS bigint)+CAST(ERR29 AS bigint)+CAST(ERR30 AS bigint)+CAST(ERR31 AS bigint)) AS P_NG_QTY, 
  SUM(isnull(M100.PROD_LAST_PRICE,0) * CAST((INSPECT_TOTAL_QTY -ERR32)as bigint)) AS ISP_TT_AMOUNT,
  SUM(isnull(M100.PROD_LAST_PRICE,0) * CAST(INSPECT_OK_QTY as bigint)) AS INSP_OK_AMOUNT,
  SUM(isnull(M100.PROD_LAST_PRICE,0) * (CAST(ERR4 AS bigint)+CAST(ERR5 AS bigint)+CAST(ERR6 AS bigint)+CAST(ERR7 AS bigint)+CAST(ERR8 AS bigint)+CAST(ERR9 AS bigint)+CAST(ERR10 AS bigint)+CAST(ERR11 AS bigint))) AS M_NG_AMOUNT,
  SUM(isnull(M100.PROD_LAST_PRICE,0) * (CAST(ERR12 AS bigint)+CAST(ERR13 AS bigint)+CAST(ERR14 AS bigint)+CAST(ERR15 AS bigint)+CAST(ERR16 AS bigint)+CAST(ERR17 AS bigint)+CAST(ERR18 AS bigint)+CAST(ERR19 AS bigint)+CAST(ERR20 AS bigint)+CAST(ERR21 AS bigint)+CAST(ERR22 AS bigint)+CAST(ERR23 AS bigint)+CAST(ERR24 AS bigint)+CAST(ERR25 AS bigint)+CAST(ERR26 AS bigint)+CAST(ERR27 AS bigint)+CAST(ERR28 AS bigint)+CAST(ERR29 AS bigint)+CAST(ERR30 AS bigint)+CAST(ERR31 AS bigint))) AS P_NG_AMOUNT
            FROM ZTBINSPECTNGTB
        LEFT JOIN M100 ON M100.G_CODE = ZTBINSPECTNGTB.G_CODE AND M100.CTR_CD = ZTBINSPECTNGTB.CTR_CD
        LEFT JOIN P400 ON P400.PROD_REQUEST_NO = ZTBINSPECTNGTB.PROD_REQUEST_NO AND P400.CTR_CD = ZTBINSPECTNGTB.CTR_CD
            LEFT JOIN M110 ON M110.CUST_CD = P400.CUST_CD AND M110.CTR_CD = P400.CTR_CD
  WHERE ZTBINSPECTNGTB.CTR_CD='${DATA.CTR_CD}' AND INSPECT_START_TIME  BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE} 23:59:59' ${condition}
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.dailyFcost = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = ``;
  if (DATA.codeArray.length === 1) {
    condition += ` AND ZTBINSPECTNGTB.G_CODE='${DATA.codeArray[0]}'`;
  } else if (DATA.codeArray.length > 1) {
    let codeString = ``;
    let codeArStr = DATA.codeArray.map((ele, index) => `'${ele}'`).join(",");
    condition += ` AND ZTBINSPECTNGTB.G_CODE IN (${codeArStr})`;
  }
  if (DATA.CUST_NAME_KD !== "") {
    condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`;
  }
  let setpdQuery = `
  DECLARE @FROM_DATE date;
DECLARE @TO_DATE date;
DECLARE @KPI_NAME varchar(100);
DECLARE @CTR_CD  varchar(3);

SET @FROM_DATE = '${DATA.FROM_DATE}';
SET @TO_DATE = '${DATA.TO_DATE}';
SET @KPI_NAME = 'NGRateKT';
SET @CTR_CD ='${DATA.CTR_CD}';



WITH DateRange AS (
    -- Lấy các ngày từ DATETABLE trong khoảng FROM_DATE đến TO_DATE
    SELECT 
        DATE_COLUMN AS KPI_DATE
    FROM DATETABLE
    WHERE DATE_COLUMN BETWEEN CAST(@FROM_DATE AS DATE) AND CAST(@TO_DATE AS DATE)
),
WorkingDays AS (
    -- Tính số ngày làm việc (trừ Chủ Nhật) cho toàn bộ tháng
    SELECT 
        YEAR(DATE_COLUMN) AS KPI_YEAR,
        MONTH(DATE_COLUMN) AS KPI_MONTH,
        COUNT(*) AS WORKING_DAYS
    FROM DATETABLE
    WHERE  DATE_COLUMN BETWEEN 
        DATEADD(month, DATEDIFF(month, 0, CAST(@FROM_DATE AS DATE)), 0) 
        AND EOMONTH(CAST(@TO_DATE AS DATE))
    GROUP BY YEAR(DATE_COLUMN), MONTH(DATE_COLUMN)
),
KPI_TB AS
(
SELECT 
    d.KPI_DATE,
    CASE        
        WHEN k.VALUE_TYPE = 'Number' THEN 
            ISNULL(k.KPI_VALUE / NULLIF(w.WORKING_DAYS, 0), 0)
        WHEN k.VALUE_TYPE = 'Percentage' THEN 
            ISNULL(k.KPI_VALUE, 0)
        ELSE 0
    END AS KPI_VALUE
FROM DateRange d
LEFT JOIN ZTB_KPI_TB k 
    ON k.KPI_YEAR = YEAR(d.KPI_DATE)
    AND k.KPI_MONTH = MONTH(d.KPI_DATE)
LEFT JOIN WorkingDays w
    ON w.KPI_YEAR = YEAR(d.KPI_DATE)
    AND w.KPI_MONTH = MONTH(d.KPI_DATE)
WHERE  k.KPI_NAME= @KPI_NAME
),
DATETB AS
(
SELECT * FROM DATETABLE WHERE DATE_COLUMN BETWEEN @FROM_DATE  AND @TO_DATE
),
INSPECTTB AS
(
SELECT CAST(ZTBINSPECTNGTB.INSPECT_START_TIME AS DATE) AS INSPECT_DATE, SUM(CAST(INSPECT_TOTAL_QTY as bigint)) AS ISP_TT_QTY, SUM(CAST(INSPECT_OK_QTY as bigint)) AS INSP_OK_QTY , SUM(CAST(ERR4 AS bigint)+CAST(ERR5 AS bigint)+CAST(ERR6 AS bigint)+CAST(ERR7 AS bigint)+CAST(ERR8 AS bigint)+CAST(ERR9 AS bigint)+CAST(ERR10 AS bigint)+CAST(ERR11 AS bigint)) AS M_NG_QTY, SUM(CAST(ERR12 AS bigint)+CAST(ERR13 AS bigint)+CAST(ERR14 AS bigint)+CAST(ERR15 AS bigint)+CAST(ERR16 AS bigint)+CAST(ERR17 AS bigint)+CAST(ERR18 AS bigint)+CAST(ERR19 AS bigint)+CAST(ERR20 AS bigint)+CAST(ERR21 AS bigint)+CAST(ERR22 AS bigint)+CAST(ERR23 AS bigint)+CAST(ERR24 AS bigint)+CAST(ERR25 AS bigint)+CAST(ERR26 AS bigint)+CAST(ERR27 AS bigint)+CAST(ERR28 AS bigint)+CAST(ERR29 AS bigint)+CAST(ERR30 AS bigint)+CAST(ERR31 AS bigint)) AS P_NG_QTY, 
  SUM(isnull(M100.PROD_LAST_PRICE,0) * CAST(INSPECT_TOTAL_QTY as bigint)) AS ISP_TT_AMOUNT,
  SUM(isnull(M100.PROD_LAST_PRICE,0) * CAST(INSPECT_OK_QTY as bigint)) AS INSP_OK_AMOUNT,
  SUM(isnull(M100.PROD_LAST_PRICE,0) * (CAST(ERR4 AS bigint)+CAST(ERR5 AS bigint)+CAST(ERR6 AS bigint)+CAST(ERR7 AS bigint)+CAST(ERR8 AS bigint)+CAST(ERR9 AS bigint)+CAST(ERR10 AS bigint)+CAST(ERR11 AS bigint))) AS M_NG_AMOUNT,
  SUM(isnull(M100.PROD_LAST_PRICE,0) * (CAST(ERR12 AS bigint)+CAST(ERR13 AS bigint)+CAST(ERR14 AS bigint)+CAST(ERR15 AS bigint)+CAST(ERR16 AS bigint)+CAST(ERR17 AS bigint)+CAST(ERR18 AS bigint)+CAST(ERR19 AS bigint)+CAST(ERR20 AS bigint)+CAST(ERR21 AS bigint)+CAST(ERR22 AS bigint)+CAST(ERR23 AS bigint)+CAST(ERR24 AS bigint)+CAST(ERR25 AS bigint)+CAST(ERR26 AS bigint)+CAST(ERR27 AS bigint)+CAST(ERR28 AS bigint)+CAST(ERR29 AS bigint)+CAST(ERR30 AS bigint)+CAST(ERR31 AS bigint))) AS P_NG_AMOUNT,
  ZTBINSPECTNGTB.CTR_CD FROM ZTBINSPECTNGTB 
        LEFT JOIN M100 ON M100.G_CODE = ZTBINSPECTNGTB.G_CODE AND M100.CTR_CD = ZTBINSPECTNGTB.CTR_CD
        LEFT JOIN P400 ON P400.PROD_REQUEST_NO = ZTBINSPECTNGTB.PROD_REQUEST_NO AND P400.CTR_CD = ZTBINSPECTNGTB.CTR_CD
            LEFT JOIN M110 ON M110.CUST_CD = P400.CUST_CD AND M110.CTR_CD = P400.CTR_CD
  WHERE INSPECT_START_TIME  BETWEEN @FROM_DATE AND  CAST(CONCAT(@TO_DATE,' 23:59:59') AS datetime) AND ZTBINSPECTNGTB.CTR_CD= @CTR_CD ${condition}
  GROUP BY CAST(ZTBINSPECTNGTB.INSPECT_START_TIME AS DATE), ZTBINSPECTNGTB.CTR_CD
)

SELECT DATETB.DATE_COLUMN AS INSPECT_DATE, isnull(INSPECTTB.ISP_TT_QTY,0) AS ISP_TT_QTY, isnull(INSP_OK_QTY,0) AS INSP_OK_QTY, isnull(M_NG_QTY,0) AS M_NG_QTY, isnull(P_NG_QTY,0) AS P_NG_QTY, isnull(ISP_TT_AMOUNT,0) AS ISP_TT_AMOUNT, isnull(INSP_OK_AMOUNT,0) AS INSP_OK_AMOUNT, isnull(M_NG_AMOUNT,0) AS M_NG_AMOUNT, isnull(P_NG_AMOUNT,0) AS P_NG_AMOUNT, KPI_TB.KPI_VALUE 
FROM DATETB 
LEFT JOIN INSPECTTB ON INSPECTTB.INSPECT_DATE = DATETB.DATE_COLUMN
LEFT JOIN KPI_TB ON DATETB.DATE_COLUMN = KPI_TB.KPI_DATE
ORDER BY DATETB.DATE_COLUMN DESC
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.weeklyFcost = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = ``;
  if (DATA.codeArray.length === 1) {
    condition += ` AND ZTBINSPECTNGTB.G_CODE='${DATA.codeArray[0]}'`;
  } else if (DATA.codeArray.length > 1) {
    let codeString = ``;
    let codeArStr = DATA.codeArray.map((ele, index) => `'${ele}'`).join(",");
    condition += ` AND ZTBINSPECTNGTB.G_CODE IN (${codeArStr})`;
  }
  if (DATA.CUST_NAME_KD !== "") {
    condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`;
  }
  let setpdQuery = `
  DECLARE @FROM_DATE date;
DECLARE @TO_DATE date;
DECLARE @KPI_NAME varchar(100);
DECLARE @CTR_CD  varchar(3);

SET @FROM_DATE = '${DATA.FROM_DATE}';
SET @TO_DATE = '${DATA.TO_DATE}';
SET @KPI_NAME = 'NGRateKT';
SET @CTR_CD ='${DATA.CTR_CD}';



WITH DateRange AS (
    -- Lấy các ngày từ DATETABLE trong khoảng FROM_DATE đến TO_DATE
    SELECT 
        DATE_COLUMN AS KPI_DATE
    FROM DATETABLE
    WHERE DATE_COLUMN BETWEEN CAST(@FROM_DATE AS DATE) AND CAST(@TO_DATE AS DATE)
),
WorkingDays AS (
    -- Tính số ngày làm việc (trừ Chủ Nhật) cho toàn bộ tháng
    SELECT 
        YEAR(DATE_COLUMN) AS KPI_YEAR,
        MONTH(DATE_COLUMN) AS KPI_MONTH,
        COUNT(*) AS WORKING_DAYS
    FROM DATETABLE
    WHERE  DATE_COLUMN BETWEEN 
        DATEADD(month, DATEDIFF(month, 0, CAST(@FROM_DATE AS DATE)), 0) 
        AND EOMONTH(CAST(@TO_DATE AS DATE))
    GROUP BY YEAR(DATE_COLUMN), MONTH(DATE_COLUMN)
),
KPI_TB AS
(
SELECT 
    d.KPI_DATE,
    CASE        
        WHEN k.VALUE_TYPE = 'Number' THEN 
            ISNULL(k.KPI_VALUE / NULLIF(w.WORKING_DAYS, 0), 0)
        WHEN k.VALUE_TYPE = 'Percentage' THEN 
            ISNULL(k.KPI_VALUE, 0)
        ELSE 0
    END AS KPI_VALUE
FROM DateRange d
LEFT JOIN ZTB_KPI_TB k 
    ON k.KPI_YEAR = YEAR(d.KPI_DATE)
    AND k.KPI_MONTH = MONTH(d.KPI_DATE)
LEFT JOIN WorkingDays w
    ON w.KPI_YEAR = YEAR(d.KPI_DATE)
    AND w.KPI_MONTH = MONTH(d.KPI_DATE)
WHERE  k.KPI_NAME= @KPI_NAME
),
DATETB AS
(
SELECT * FROM DATETABLE WHERE DATE_COLUMN BETWEEN @FROM_DATE  AND @TO_DATE
),
INSPECTTB AS
(
SELECT CAST(ZTBINSPECTNGTB.INSPECT_START_TIME AS DATE) AS INSPECT_DATE, SUM(CAST(INSPECT_TOTAL_QTY as bigint)) AS ISP_TT_QTY, SUM(CAST(INSPECT_OK_QTY as bigint)) AS INSP_OK_QTY , SUM(CAST(ERR4 AS bigint)+CAST(ERR5 AS bigint)+CAST(ERR6 AS bigint)+CAST(ERR7 AS bigint)+CAST(ERR8 AS bigint)+CAST(ERR9 AS bigint)+CAST(ERR10 AS bigint)+CAST(ERR11 AS bigint)) AS M_NG_QTY, SUM(CAST(ERR12 AS bigint)+CAST(ERR13 AS bigint)+CAST(ERR14 AS bigint)+CAST(ERR15 AS bigint)+CAST(ERR16 AS bigint)+CAST(ERR17 AS bigint)+CAST(ERR18 AS bigint)+CAST(ERR19 AS bigint)+CAST(ERR20 AS bigint)+CAST(ERR21 AS bigint)+CAST(ERR22 AS bigint)+CAST(ERR23 AS bigint)+CAST(ERR24 AS bigint)+CAST(ERR25 AS bigint)+CAST(ERR26 AS bigint)+CAST(ERR27 AS bigint)+CAST(ERR28 AS bigint)+CAST(ERR29 AS bigint)+CAST(ERR30 AS bigint)+CAST(ERR31 AS bigint)) AS P_NG_QTY, 
  SUM(isnull(M100.PROD_LAST_PRICE,0) * CAST(INSPECT_TOTAL_QTY as bigint)) AS ISP_TT_AMOUNT,
  SUM(isnull(M100.PROD_LAST_PRICE,0) * CAST(INSPECT_OK_QTY as bigint)) AS INSP_OK_AMOUNT,
  SUM(isnull(M100.PROD_LAST_PRICE,0) * (CAST(ERR4 AS bigint)+CAST(ERR5 AS bigint)+CAST(ERR6 AS bigint)+CAST(ERR7 AS bigint)+CAST(ERR8 AS bigint)+CAST(ERR9 AS bigint)+CAST(ERR10 AS bigint)+CAST(ERR11 AS bigint))) AS M_NG_AMOUNT,
  SUM(isnull(M100.PROD_LAST_PRICE,0) * (CAST(ERR12 AS bigint)+CAST(ERR13 AS bigint)+CAST(ERR14 AS bigint)+CAST(ERR15 AS bigint)+CAST(ERR16 AS bigint)+CAST(ERR17 AS bigint)+CAST(ERR18 AS bigint)+CAST(ERR19 AS bigint)+CAST(ERR20 AS bigint)+CAST(ERR21 AS bigint)+CAST(ERR22 AS bigint)+CAST(ERR23 AS bigint)+CAST(ERR24 AS bigint)+CAST(ERR25 AS bigint)+CAST(ERR26 AS bigint)+CAST(ERR27 AS bigint)+CAST(ERR28 AS bigint)+CAST(ERR29 AS bigint)+CAST(ERR30 AS bigint)+CAST(ERR31 AS bigint))) AS P_NG_AMOUNT,
  ZTBINSPECTNGTB.CTR_CD FROM ZTBINSPECTNGTB 
        LEFT JOIN M100 ON M100.G_CODE = ZTBINSPECTNGTB.G_CODE AND M100.CTR_CD = ZTBINSPECTNGTB.CTR_CD
        LEFT JOIN P400 ON P400.PROD_REQUEST_NO = ZTBINSPECTNGTB.PROD_REQUEST_NO AND P400.CTR_CD = ZTBINSPECTNGTB.CTR_CD
            LEFT JOIN M110 ON M110.CUST_CD = P400.CUST_CD AND M110.CTR_CD = P400.CTR_CD
  WHERE INSPECT_START_TIME  BETWEEN @FROM_DATE AND  CAST(CONCAT(@TO_DATE,' 23:59:59') AS datetime) AND ZTBINSPECTNGTB.CTR_CD= @CTR_CD ${condition}
  GROUP BY CAST(ZTBINSPECTNGTB.INSPECT_START_TIME AS DATE), ZTBINSPECTNGTB.CTR_CD
)
SELECT CONCAT(YEAR(DATETB.DATE_COLUMN),'_',DATEPART(ISO_WEEK,DATETB.DATE_COLUMN)) AS INSPECT_YW, YEAR(DATETB.DATE_COLUMN) AS INSPECT_YEAR,DATEPART(ISO_WEEK,DATETB.DATE_COLUMN) AS INSPECT_WEEK, SUM(isnull(INSPECTTB.ISP_TT_QTY,0)) AS ISP_TT_QTY, SUM(isnull(INSP_OK_QTY,0)) AS INSP_OK_QTY, SUM(isnull(M_NG_QTY,0)) AS M_NG_QTY, SUM(isnull(P_NG_QTY,0)) AS P_NG_QTY, SUM(isnull(ISP_TT_AMOUNT,0)) AS ISP_TT_AMOUNT, SUM(isnull(INSP_OK_AMOUNT,0)) AS INSP_OK_AMOUNT, SUM(isnull(M_NG_AMOUNT,0)) AS M_NG_AMOUNT, SUM(isnull(P_NG_AMOUNT,0)) AS P_NG_AMOUNT, AVG(KPI_TB.KPI_VALUE) AS KPI_VALUE 
FROM DATETB
LEFT JOIN INSPECTTB ON INSPECTTB.INSPECT_DATE = DATETB.DATE_COLUMN
LEFT JOIN KPI_TB ON DATETB.DATE_COLUMN = KPI_TB.KPI_DATE
GROUP BY YEAR(DATETB.DATE_COLUMN),DATEPART(ISO_WEEK,DATETB.DATE_COLUMN)
ORDER BY YEAR(DATETB.DATE_COLUMN) DESC,DATEPART(ISO_WEEK,DATETB.DATE_COLUMN) DESC
  `;
  console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.monthlyFcost = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = ``;
  if (DATA.codeArray.length === 1) {
    condition += ` AND ZTBINSPECTNGTB.G_CODE='${DATA.codeArray[0]}'`;
  } else if (DATA.codeArray.length > 1) {
    let codeString = ``;
    let codeArStr = DATA.codeArray.map((ele, index) => `'${ele}'`).join(",");
    condition += ` AND ZTBINSPECTNGTB.G_CODE IN (${codeArStr})`;
  }
  if (DATA.CUST_NAME_KD !== "") {
    condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`;
  }
  let setpdQuery = `
-- monthly Fcost
DECLARE @FROM_DATE date;
DECLARE @TO_DATE date;
DECLARE @KPI_NAME varchar(100);
DECLARE @CTR_CD  varchar(3);

SET @FROM_DATE = '${DATA.FROM_DATE}';
SET @TO_DATE = '${DATA.TO_DATE}';
SET @KPI_NAME = 'NGRateKT';
SET @CTR_CD ='${DATA.CTR_CD}';



WITH DateRange AS (
    -- Lấy các ngày từ DATETABLE trong khoảng FROM_DATE đến TO_DATE
    SELECT 
        DATE_COLUMN AS KPI_DATE
    FROM DATETABLE
    WHERE DATE_COLUMN BETWEEN CAST(@FROM_DATE AS DATE) AND CAST(@TO_DATE AS DATE)
),
WorkingDays AS (
    -- Tính số ngày làm việc (trừ Chủ Nhật) cho toàn bộ tháng
    SELECT 
        YEAR(DATE_COLUMN) AS KPI_YEAR,
        MONTH(DATE_COLUMN) AS KPI_MONTH,
        COUNT(*) AS WORKING_DAYS
    FROM DATETABLE
    WHERE  DATE_COLUMN BETWEEN 
        DATEADD(month, DATEDIFF(month, 0, CAST(@FROM_DATE AS DATE)), 0) 
        AND EOMONTH(CAST(@TO_DATE AS DATE))
    GROUP BY YEAR(DATE_COLUMN), MONTH(DATE_COLUMN)
),
KPI_TB AS
(
SELECT 
    d.KPI_DATE,
    CASE        
        WHEN k.VALUE_TYPE = 'Number' THEN 
            ISNULL(k.KPI_VALUE / NULLIF(w.WORKING_DAYS, 0), 0)
        WHEN k.VALUE_TYPE = 'Percentage' THEN 
            ISNULL(k.KPI_VALUE, 0)
        ELSE 0
    END AS KPI_VALUE
FROM DateRange d
LEFT JOIN ZTB_KPI_TB k 
    ON k.KPI_YEAR = YEAR(d.KPI_DATE)
    AND k.KPI_MONTH = MONTH(d.KPI_DATE)
LEFT JOIN WorkingDays w
    ON w.KPI_YEAR = YEAR(d.KPI_DATE)
    AND w.KPI_MONTH = MONTH(d.KPI_DATE)
WHERE  k.KPI_NAME= @KPI_NAME
),
DATETB AS
(
SELECT * FROM DATETABLE WHERE DATE_COLUMN BETWEEN @FROM_DATE  AND @TO_DATE
),
INSPECTTB AS
(
SELECT CAST(ZTBINSPECTNGTB.INSPECT_START_TIME AS DATE) AS INSPECT_DATE, SUM(CAST(INSPECT_TOTAL_QTY as bigint)) AS ISP_TT_QTY, SUM(CAST(INSPECT_OK_QTY as bigint)) AS INSP_OK_QTY , SUM(CAST(ERR4 AS bigint)+CAST(ERR5 AS bigint)+CAST(ERR6 AS bigint)+CAST(ERR7 AS bigint)+CAST(ERR8 AS bigint)+CAST(ERR9 AS bigint)+CAST(ERR10 AS bigint)+CAST(ERR11 AS bigint)) AS M_NG_QTY, SUM(CAST(ERR12 AS bigint)+CAST(ERR13 AS bigint)+CAST(ERR14 AS bigint)+CAST(ERR15 AS bigint)+CAST(ERR16 AS bigint)+CAST(ERR17 AS bigint)+CAST(ERR18 AS bigint)+CAST(ERR19 AS bigint)+CAST(ERR20 AS bigint)+CAST(ERR21 AS bigint)+CAST(ERR22 AS bigint)+CAST(ERR23 AS bigint)+CAST(ERR24 AS bigint)+CAST(ERR25 AS bigint)+CAST(ERR26 AS bigint)+CAST(ERR27 AS bigint)+CAST(ERR28 AS bigint)+CAST(ERR29 AS bigint)+CAST(ERR30 AS bigint)+CAST(ERR31 AS bigint)) AS P_NG_QTY, 
  SUM(isnull(M100.PROD_LAST_PRICE,0) * CAST(INSPECT_TOTAL_QTY as bigint)) AS ISP_TT_AMOUNT,
  SUM(isnull(M100.PROD_LAST_PRICE,0) * CAST(INSPECT_OK_QTY as bigint)) AS INSP_OK_AMOUNT,
  SUM(isnull(M100.PROD_LAST_PRICE,0) * (CAST(ERR4 AS bigint)+CAST(ERR5 AS bigint)+CAST(ERR6 AS bigint)+CAST(ERR7 AS bigint)+CAST(ERR8 AS bigint)+CAST(ERR9 AS bigint)+CAST(ERR10 AS bigint)+CAST(ERR11 AS bigint))) AS M_NG_AMOUNT,
  SUM(isnull(M100.PROD_LAST_PRICE,0) * (CAST(ERR12 AS bigint)+CAST(ERR13 AS bigint)+CAST(ERR14 AS bigint)+CAST(ERR15 AS bigint)+CAST(ERR16 AS bigint)+CAST(ERR17 AS bigint)+CAST(ERR18 AS bigint)+CAST(ERR19 AS bigint)+CAST(ERR20 AS bigint)+CAST(ERR21 AS bigint)+CAST(ERR22 AS bigint)+CAST(ERR23 AS bigint)+CAST(ERR24 AS bigint)+CAST(ERR25 AS bigint)+CAST(ERR26 AS bigint)+CAST(ERR27 AS bigint)+CAST(ERR28 AS bigint)+CAST(ERR29 AS bigint)+CAST(ERR30 AS bigint)+CAST(ERR31 AS bigint))) AS P_NG_AMOUNT,
  ZTBINSPECTNGTB.CTR_CD FROM ZTBINSPECTNGTB 
        LEFT JOIN M100 ON M100.G_CODE = ZTBINSPECTNGTB.G_CODE AND M100.CTR_CD = ZTBINSPECTNGTB.CTR_CD
        LEFT JOIN P400 ON P400.PROD_REQUEST_NO = ZTBINSPECTNGTB.PROD_REQUEST_NO AND P400.CTR_CD = ZTBINSPECTNGTB.CTR_CD
            LEFT JOIN M110 ON M110.CUST_CD = P400.CUST_CD AND M110.CTR_CD = P400.CTR_CD
  WHERE INSPECT_START_TIME  BETWEEN @FROM_DATE AND  CAST(CONCAT(@TO_DATE,' 23:59:59') AS datetime) AND ZTBINSPECTNGTB.CTR_CD= @CTR_CD ${condition}
  GROUP BY CAST(ZTBINSPECTNGTB.INSPECT_START_TIME AS DATE), ZTBINSPECTNGTB.CTR_CD
)
SELECT CONCAT(YEAR(DATETB.DATE_COLUMN),'_',MONTH(DATETB.DATE_COLUMN)) AS INSPECT_YM, YEAR(DATETB.DATE_COLUMN) AS INSPECT_YEAR,MONTH(DATETB.DATE_COLUMN) AS INSPECT_MONTH, SUM(isnull(INSPECTTB.ISP_TT_QTY,0)) AS ISP_TT_QTY, SUM(isnull(INSP_OK_QTY,0)) AS INSP_OK_QTY, SUM(isnull(M_NG_QTY,0)) AS M_NG_QTY, SUM(isnull(P_NG_QTY,0)) AS P_NG_QTY, SUM(isnull(ISP_TT_AMOUNT,0)) AS ISP_TT_AMOUNT, SUM(isnull(INSP_OK_AMOUNT,0)) AS INSP_OK_AMOUNT, SUM(isnull(M_NG_AMOUNT,0)) AS M_NG_AMOUNT, SUM(isnull(P_NG_AMOUNT,0)) AS P_NG_AMOUNT, AVG(KPI_TB.KPI_VALUE) AS KPI_VALUE 
FROM DATETB
LEFT JOIN INSPECTTB ON INSPECTTB.INSPECT_DATE = DATETB.DATE_COLUMN
LEFT JOIN KPI_TB ON DATETB.DATE_COLUMN = KPI_TB.KPI_DATE
GROUP BY YEAR(DATETB.DATE_COLUMN),MONTH(DATETB.DATE_COLUMN)
ORDER BY YEAR(DATETB.DATE_COLUMN) DESC ,MONTH(DATETB.DATE_COLUMN) DESC
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.annuallyFcost = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = ``;
  if (DATA.codeArray.length === 1) {
    condition += ` AND ZTBINSPECTNGTB.G_CODE='${DATA.codeArray[0]}'`;
  } else if (DATA.codeArray.length > 1) {
    let codeString = ``;
    let codeArStr = DATA.codeArray.map((ele, index) => `'${ele}'`).join(",");
    condition += ` AND ZTBINSPECTNGTB.G_CODE IN (${codeArStr})`;
  }
  if (DATA.CUST_NAME_KD !== "") {
    condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`;
  }
  let setpdQuery = `
  -- yearly Fcost
DECLARE @FROM_DATE date;
DECLARE @TO_DATE date;
DECLARE @KPI_NAME varchar(100);
DECLARE @CTR_CD  varchar(3);

SET @FROM_DATE = '${DATA.FROM_DATE}';
SET @TO_DATE = '${DATA.TO_DATE}';
SET @KPI_NAME = 'NGRateKT';
SET @CTR_CD ='${DATA.CTR_CD}';



WITH DateRange AS (
    -- Lấy các ngày từ DATETABLE trong khoảng FROM_DATE đến TO_DATE
    SELECT 
        DATE_COLUMN AS KPI_DATE
    FROM DATETABLE
    WHERE DATE_COLUMN BETWEEN CAST(@FROM_DATE AS DATE) AND CAST(@TO_DATE AS DATE)
),
WorkingDays AS (
    -- Tính số ngày làm việc (trừ Chủ Nhật) cho toàn bộ tháng
    SELECT 
        YEAR(DATE_COLUMN) AS KPI_YEAR,
        MONTH(DATE_COLUMN) AS KPI_MONTH,
        COUNT(*) AS WORKING_DAYS
    FROM DATETABLE
    WHERE  DATE_COLUMN BETWEEN 
        DATEADD(month, DATEDIFF(month, 0, CAST(@FROM_DATE AS DATE)), 0) 
        AND EOMONTH(CAST(@TO_DATE AS DATE))
    GROUP BY YEAR(DATE_COLUMN), MONTH(DATE_COLUMN)
),
KPI_TB AS
(
SELECT 
    d.KPI_DATE,
    CASE        
        WHEN k.VALUE_TYPE = 'Number' THEN 
            ISNULL(k.KPI_VALUE / NULLIF(w.WORKING_DAYS, 0), 0)
        WHEN k.VALUE_TYPE = 'Percentage' THEN 
            ISNULL(k.KPI_VALUE, 0)
        ELSE 0
    END AS KPI_VALUE
FROM DateRange d
LEFT JOIN ZTB_KPI_TB k 
    ON k.KPI_YEAR = YEAR(d.KPI_DATE)
    AND k.KPI_MONTH = MONTH(d.KPI_DATE)
LEFT JOIN WorkingDays w
    ON w.KPI_YEAR = YEAR(d.KPI_DATE)
    AND w.KPI_MONTH = MONTH(d.KPI_DATE)
WHERE  k.KPI_NAME= @KPI_NAME
),
DATETB AS
(
SELECT * FROM DATETABLE WHERE DATE_COLUMN BETWEEN @FROM_DATE  AND @TO_DATE
),
INSPECTTB AS
(
SELECT CAST(ZTBINSPECTNGTB.INSPECT_START_TIME AS DATE) AS INSPECT_DATE, SUM(CAST(INSPECT_TOTAL_QTY as bigint)) AS ISP_TT_QTY, SUM(CAST(INSPECT_OK_QTY as bigint)) AS INSP_OK_QTY , SUM(CAST(ERR4 AS bigint)+CAST(ERR5 AS bigint)+CAST(ERR6 AS bigint)+CAST(ERR7 AS bigint)+CAST(ERR8 AS bigint)+CAST(ERR9 AS bigint)+CAST(ERR10 AS bigint)+CAST(ERR11 AS bigint)) AS M_NG_QTY, SUM(CAST(ERR12 AS bigint)+CAST(ERR13 AS bigint)+CAST(ERR14 AS bigint)+CAST(ERR15 AS bigint)+CAST(ERR16 AS bigint)+CAST(ERR17 AS bigint)+CAST(ERR18 AS bigint)+CAST(ERR19 AS bigint)+CAST(ERR20 AS bigint)+CAST(ERR21 AS bigint)+CAST(ERR22 AS bigint)+CAST(ERR23 AS bigint)+CAST(ERR24 AS bigint)+CAST(ERR25 AS bigint)+CAST(ERR26 AS bigint)+CAST(ERR27 AS bigint)+CAST(ERR28 AS bigint)+CAST(ERR29 AS bigint)+CAST(ERR30 AS bigint)+CAST(ERR31 AS bigint)) AS P_NG_QTY, 
  SUM(isnull(M100.PROD_LAST_PRICE,0) * CAST(INSPECT_TOTAL_QTY as bigint)) AS ISP_TT_AMOUNT,
  SUM(isnull(M100.PROD_LAST_PRICE,0) * CAST(INSPECT_OK_QTY as bigint)) AS INSP_OK_AMOUNT,
  SUM(isnull(M100.PROD_LAST_PRICE,0) * (CAST(ERR4 AS bigint)+CAST(ERR5 AS bigint)+CAST(ERR6 AS bigint)+CAST(ERR7 AS bigint)+CAST(ERR8 AS bigint)+CAST(ERR9 AS bigint)+CAST(ERR10 AS bigint)+CAST(ERR11 AS bigint))) AS M_NG_AMOUNT,
  SUM(isnull(M100.PROD_LAST_PRICE,0) * (CAST(ERR12 AS bigint)+CAST(ERR13 AS bigint)+CAST(ERR14 AS bigint)+CAST(ERR15 AS bigint)+CAST(ERR16 AS bigint)+CAST(ERR17 AS bigint)+CAST(ERR18 AS bigint)+CAST(ERR19 AS bigint)+CAST(ERR20 AS bigint)+CAST(ERR21 AS bigint)+CAST(ERR22 AS bigint)+CAST(ERR23 AS bigint)+CAST(ERR24 AS bigint)+CAST(ERR25 AS bigint)+CAST(ERR26 AS bigint)+CAST(ERR27 AS bigint)+CAST(ERR28 AS bigint)+CAST(ERR29 AS bigint)+CAST(ERR30 AS bigint)+CAST(ERR31 AS bigint))) AS P_NG_AMOUNT,
  ZTBINSPECTNGTB.CTR_CD FROM ZTBINSPECTNGTB 
        LEFT JOIN M100 ON M100.G_CODE = ZTBINSPECTNGTB.G_CODE AND M100.CTR_CD = ZTBINSPECTNGTB.CTR_CD
        LEFT JOIN P400 ON P400.PROD_REQUEST_NO = ZTBINSPECTNGTB.PROD_REQUEST_NO AND P400.CTR_CD = ZTBINSPECTNGTB.CTR_CD
            LEFT JOIN M110 ON M110.CUST_CD = P400.CUST_CD AND M110.CTR_CD = P400.CTR_CD
  WHERE INSPECT_START_TIME  BETWEEN @FROM_DATE AND  CAST(CONCAT(@TO_DATE,' 23:59:59') AS datetime) AND ZTBINSPECTNGTB.CTR_CD= @CTR_CD ${condition}
  GROUP BY CAST(ZTBINSPECTNGTB.INSPECT_START_TIME AS DATE), ZTBINSPECTNGTB.CTR_CD
)
SELECT  YEAR(DATETB.DATE_COLUMN) AS INSPECT_YEAR, SUM(isnull(INSPECTTB.ISP_TT_QTY,0)) AS ISP_TT_QTY, SUM(isnull(INSP_OK_QTY,0)) AS INSP_OK_QTY, SUM(isnull(M_NG_QTY,0)) AS M_NG_QTY, SUM(isnull(P_NG_QTY,0)) AS P_NG_QTY, SUM(isnull(ISP_TT_AMOUNT,0)) AS ISP_TT_AMOUNT, SUM(isnull(INSP_OK_AMOUNT,0)) AS INSP_OK_AMOUNT, SUM(isnull(M_NG_AMOUNT,0)) AS M_NG_AMOUNT, SUM(isnull(P_NG_AMOUNT,0)) AS P_NG_AMOUNT, AVG(KPI_TB.KPI_VALUE) AS KPI_VALUE 
FROM DATETB
LEFT JOIN INSPECTTB ON INSPECTTB.INSPECT_DATE = DATETB.DATE_COLUMN
LEFT JOIN KPI_TB ON DATETB.DATE_COLUMN = KPI_TB.KPI_DATE
GROUP BY YEAR(DATETB.DATE_COLUMN)
ORDER BY YEAR(DATETB.DATE_COLUMN) DESC
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.dailyDefectTrending = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = `WHERE ZTBINSPECTNGTB.INSPECT_DATETIME BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE} 23:59:59' `;
  if (DATA.codeArray.length === 1) {
    condition += ` AND ZTBINSPECTNGTB.G_CODE='${DATA.codeArray[0]}'`;
  } else if (DATA.codeArray.length > 1) {
    let codeString = ``;
    let codeArStr = DATA.codeArray.map((ele, index) => `'${ele}'`).join(",");
    condition += ` AND ZTBINSPECTNGTB.G_CODE IN (${codeArStr})`;
  }
  if (DATA.CUST_NAME_KD !== "") {
    condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`;
  }
  let setpdQuery = `
  SELECT CAST(INSPECT_DATETIME AS date) AS INSPECT_DATE, SUM(INSPECT_TOTAL_QTY) AS INSPECT_TOTAL_QTY , SUM(INSPECT_OK_QTY) AS INSPECT_OK_QTY , SUM(ERR4+ERR5+ERR6+ERR7+ERR8+ERR9+ERR10+ERR11+ERR12+ERR13+ERR14+ERR15+ERR16+ERR17+ERR18+ERR19+ERR20+ERR21+ERR22+ERR23+ERR24+ERR25+ERR26+ERR27+ERR28+ERR29+ERR30+ERR31) AS INSPECT_NG_QTY,
  SUM(ERR1) *1000000.0/ SUM(INSPECT_TOTAL_QTY-ERR32) AS ERR1,SUM(ERR2) *1000000.0/ SUM(INSPECT_TOTAL_QTY-ERR32) AS ERR2,SUM(ERR3) *1000000.0/ SUM(INSPECT_TOTAL_QTY-ERR32) AS ERR3,SUM(ERR4) *1000000.0/ SUM(INSPECT_TOTAL_QTY-ERR32) AS ERR4,SUM(ERR5) *1000000.0/ SUM(INSPECT_TOTAL_QTY-ERR32) AS ERR5,SUM(ERR6) *1000000.0/ SUM(INSPECT_TOTAL_QTY-ERR32) AS ERR6,SUM(ERR7) *1000000.0/ SUM(INSPECT_TOTAL_QTY-ERR32) AS ERR7,SUM(ERR8) *1000000.0/ SUM(INSPECT_TOTAL_QTY-ERR32) AS ERR8,SUM(ERR9) *1000000.0/ SUM(INSPECT_TOTAL_QTY-ERR32) AS ERR9,SUM(ERR10) *1000000.0/ SUM(INSPECT_TOTAL_QTY-ERR32) AS ERR10,SUM(ERR11) *1000000.0/ SUM(INSPECT_TOTAL_QTY-ERR32) AS ERR11,SUM(ERR12) *1000000.0/ SUM(INSPECT_TOTAL_QTY-ERR32) AS ERR12,SUM(ERR13) *1000000.0/ SUM(INSPECT_TOTAL_QTY-ERR32) AS ERR13,SUM(ERR14) *1000000.0/ SUM(INSPECT_TOTAL_QTY-ERR32) AS ERR14,SUM(ERR15) *1000000.0/ SUM(INSPECT_TOTAL_QTY-ERR32) AS ERR15,SUM(ERR16) *1000000.0/ SUM(INSPECT_TOTAL_QTY-ERR32) AS ERR16,SUM(ERR17) *1000000.0/ SUM(INSPECT_TOTAL_QTY-ERR32) AS ERR17,SUM(ERR18) *1000000.0/ SUM(INSPECT_TOTAL_QTY-ERR32) AS ERR18,SUM(ERR19) *1000000.0/ SUM(INSPECT_TOTAL_QTY-ERR32) AS ERR19,SUM(ERR20) *1000000.0/ SUM(INSPECT_TOTAL_QTY-ERR32) AS ERR20,SUM(ERR21) *1000000.0/ SUM(INSPECT_TOTAL_QTY-ERR32) AS ERR21,SUM(ERR22) *1000000.0/ SUM(INSPECT_TOTAL_QTY-ERR32) AS ERR22,SUM(ERR23) *1000000.0/ SUM(INSPECT_TOTAL_QTY-ERR32) AS ERR23,SUM(ERR24) *1000000.0/ SUM(INSPECT_TOTAL_QTY-ERR32) AS ERR24,SUM(ERR25) *1000000.0/ SUM(INSPECT_TOTAL_QTY-ERR32) AS ERR25,SUM(ERR26) *1000000.0/ SUM(INSPECT_TOTAL_QTY-ERR32) AS ERR26,SUM(ERR27) *1000000.0/ SUM(INSPECT_TOTAL_QTY-ERR32) AS ERR27,SUM(ERR28) *1000000.0/ SUM(INSPECT_TOTAL_QTY-ERR32) AS ERR28,SUM(ERR29) *1000000.0/ SUM(INSPECT_TOTAL_QTY-ERR32) AS ERR29,SUM(ERR30) *1000000.0/ SUM(INSPECT_TOTAL_QTY-ERR32) AS ERR30,SUM(ERR31) *1000000.0/ SUM(INSPECT_TOTAL_QTY-ERR32) AS ERR31,SUM(ERR32) *1000000.0/ SUM(INSPECT_TOTAL_QTY-ERR32) AS ERR32
  FROM ZTBINSPECTNGTB 
  LEFT JOIN P400 ON P400.PROD_REQUEST_NO = ZTBINSPECTNGTB.PROD_REQUEST_NO AND P400.CTR_CD = ZTBINSPECTNGTB.CTR_CD
  LEFT JOIN M110 ON M110.CUST_CD = P400.CUST_CD AND M110.CTR_CD = P400.CTR_CD
  ${condition}
  AND ZTBINSPECTNGTB.CTR_CD='${DATA.CTR_CD}'
  GROUP BY CAST(INSPECT_DATETIME AS date)
  ORDER BY CAST(INSPECT_DATETIME AS date) DESC
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.get_inspection = async (req, res, DATA) => {
  let kqua;
  let query = "";
  switch (DATA.OPTIONS) {
    case "Nhập Kiểm (LOT)":
      query = `SELECT ZTBINSPECTINPUTTB.INSPECT_INPUT_ID,M110.CUST_NAME_KD, M010.EMPL_NAME,ZTBINSPECTINPUTTB.G_CODE,M100.G_NAME,M100.PROD_TYPE,M100.G_NAME_KD,ZTBINSPECTINPUTTB.PROD_REQUEST_NO,P400.PROD_REQUEST_DATE,P400.PROD_REQUEST_QTY,ZTBINSPECTINPUTTB.PROCESS_LOT_NO,P501_A.M_LOT_NO,I222.LOTNCC,  P501_A.INS_DATE AS PROD_DATETIME, ZTBINSPECTINPUTTB.INPUT_DATETIME,ZTBINSPECTINPUTTB.INPUT_QTY_EA,ZTBINSPECTINPUTTB.INPUT_QTY_KG,ZTBINSPECTINPUTTB.REMARK,ZTBINSPECTINPUTTB.CNDB_ENCODES,P400.EMPL_NO AS PIC_KD
              FROM ZTBINSPECTINPUTTB
              LEFT JOIN P400 ON (P400.PROD_REQUEST_NO = ZTBINSPECTINPUTTB.PROD_REQUEST_NO AND P400.CTR_CD = ZTBINSPECTINPUTTB.CTR_CD)
              LEFT JOIN M010 ON (M010.EMPL_NO = P400.EMPL_NO AND M010.CTR_CD = P400.CTR_CD)                   
              LEFT JOIN (SELECT * FROM P501 WHERE INS_DATE>'2021-07-01') AS P501_A ON (P501_A.PROCESS_LOT_NO = ZTBINSPECTINPUTTB.PROCESS_LOT_NO AND P501_A.CTR_CD = ZTBINSPECTINPUTTB.CTR_CD)
              LEFT JOIN M100 ON (M100.G_CODE = ZTBINSPECTINPUTTB.G_CODE AND M100.CTR_CD = ZTBINSPECTINPUTTB.CTR_CD)
              LEFT JOIN M110 ON (M110.CUST_CD = P400.CUST_CD AND M110.CTR_CD = P400.CTR_CD)
              LEFT JOIN I222 ON P501_A.M_LOT_NO = I222.M_LOT_NO AND  P501_A.CTR_CD = I222.CTR_CD
                ${generate_condition_get_inspection_input(
                  DATA.ALLTIME,
                  DATA.FROM_DATE,
                  DATA.TO_DATE,
                  DATA.CUST_NAME,
                  DATA.G_CODE,
                  DATA.G_NAME,
                  DATA.PROD_TYPE,
                  DATA.EMPL_NAME,
                  DATA.PROD_REQUEST_NO,
                  DATA.CTR_CD
                )}
                            ORDER BY ZTBINSPECTINPUTTB.INSPECT_INPUT_ID DESC`;
      //console.log(query);
      kqua = await queryDB(query);
      ////console.log(kqua);
      res.send(kqua);
      break;
    case "Xuất Kiểm (LOT)":
      query = `SELECT ZTBINSPECTOUTPUTTB.STATUS, ZTBINSPECTOUTPUTTB.INSPECT_OUTPUT_ID,M110.CUST_NAME_KD, M010.EMPL_NAME,ZTBINSPECTOUTPUTTB.G_CODE,M100.G_NAME,M100.PROD_TYPE,M100.G_NAME_KD,ZTBINSPECTOUTPUTTB.PROD_REQUEST_NO,P400.PROD_REQUEST_DATE,P400.PROD_REQUEST_QTY,ZTBINSPECTOUTPUTTB.PROCESS_LOT_NO,P501_A.INS_DATE AS PROD_DATETIME, ZTBINSPECTOUTPUTTB.OUTPUT_DATETIME,ZTBINSPECTOUTPUTTB.OUTPUT_QTY_EA,ZTBINSPECTOUTPUTTB.REMARK,P400.EMPL_NO AS PIC_KD,CASE 
              WHEN (DATEPART(HOUR,OUTPUT_DATETIME) >=8 AND DATEPART(HOUR,OUTPUT_DATETIME) <20) THEN 'CA NGAY'
              ELSE 'CA DEM' END AS CA_LAM_VIEC,
              CASE 
              WHEN DATEPART(HOUR,OUTPUT_DATETIME) < 8  THEN CONVERT(date,DATEADD(DAY,-1,OUTPUT_DATETIME))
              ELSE CONVERT(date,OUTPUT_DATETIME) END  AS NGAY_LAM_VIEC, P501_A.M_LOT_NO, I222.LOTNCC
              FROM ZTBINSPECTOUTPUTTB
              LEFT JOIN P400 ON (P400.PROD_REQUEST_NO = ZTBINSPECTOUTPUTTB.PROD_REQUEST_NO AND P400.CTR_CD = ZTBINSPECTOUTPUTTB.CTR_CD)
              LEFT JOIN M010 ON (M010.EMPL_NO = P400.EMPL_NO AND M010.CTR_CD = P400.CTR_CD)                    
              LEFT JOIN (SELECT * FROM P501 WHERE INS_DATE>'2021-07-01') AS P501_A ON (P501_A.PROCESS_LOT_NO = ZTBINSPECTOUTPUTTB.PROCESS_LOT_NO AND P501_A.CTR_CD = ZTBINSPECTOUTPUTTB.CTR_CD)
              LEFT JOIN M100 ON (M100.G_CODE = ZTBINSPECTOUTPUTTB.G_CODE AND M100.CTR_CD = ZTBINSPECTOUTPUTTB.CTR_CD)
              LEFT JOIN M110 ON (M110.CUST_CD = P400.CUST_CD AND M110.CTR_CD = P400.CTR_CD)
              LEFT JOIN I222 ON P501_A.M_LOT_NO = I222.M_LOT_NO AND P501_A.CTR_CD = I222.CTR_CD
              ${generate_condition_get_inspection_output(
                DATA.ALLTIME,
                DATA.FROM_DATE,
                DATA.TO_DATE,
                DATA.CUST_NAME,
                DATA.G_CODE,
                DATA.G_NAME,
                DATA.PROD_TYPE,
                DATA.EMPL_NAME,
                DATA.PROD_REQUEST_NO,
                DATA.CTR_CD
              )} ORDER BY ZTBINSPECTOUTPUTTB.INSPECT_OUTPUT_ID DESC`;
      //console.log(query);
      kqua = await queryDB(query);
      ////console.log(kqua);
      res.send(kqua);
      break;
    case "Nhập Xuất Kiểm (YCSX)":
      query = `  SELECT M010.EMPL_NAME AS PIC_KD,M110.CUST_NAME_KD, M100.G_CODE, M100.G_NAME, M100.G_NAME_KD, INPUTTB.PROD_REQUEST_NO, P400.PROD_REQUEST_DATE, P400.PROD_REQUEST_QTY, INPUTTB.INPUT_QTY AS LOT_TOTAL_INPUT_QTY_EA, isnull(OUTPUTTB.OUTPUT_QTY,0) AS LOT_TOTAL_OUTPUT_QTY_EA, isnull(INSPECTTABLE.DA_KIEM_TRA,0) AS DA_KIEM_TRA, isnull(INSPECTTABLE.OK_QTY,0) AS OK_QTY, isnull(INSPECTTABLE.LOSS_NG_QTY,0) AS LOSS_NG_QTY, (isnull(INPUTTB.INPUT_QTY,0) -  isnull(INSPECTTABLE.DA_KIEM_TRA,0)) AS INSPECT_BALANCE FROM 
            (SELECT CTR_CD,PROD_REQUEST_NO, SUM(INPUT_QTY_EA) AS INPUT_QTY FROM ZTBINSPECTINPUTTB  GROUP BY CTR_CD,PROD_REQUEST_NO) AS INPUTTB
            LEFT JOIN (SELECT CTR_CD,PROD_REQUEST_NO, SUM(OUTPUT_QTY_EA) AS OUTPUT_QTY FROM ZTBINSPECTOUTPUTTB  GROUP BY CTR_CD,PROD_REQUEST_NO) AS OUTPUTTB
            ON (INPUTTB.CTR_CD = OUTPUTTB.CTR_CD AND INPUTTB.PROD_REQUEST_NO = OUTPUTTB.PROD_REQUEST_NO)
            LEFT JOIN (SELECT CTR_CD,PROD_REQUEST_NO, SUM(INSPECT_TOTAL_QTY) AS DA_KIEM_TRA,SUM(INSPECT_OK_QTY) AS OK_QTY,SUM(INSPECT_TOTAL_QTY- INSPECT_OK_QTY) AS LOSS_NG_QTY FROM ZTBINSPECTNGTB GROUP BY CTR_CD,PROD_REQUEST_NO) AS INSPECTTABLE ON (INPUTTB.PROD_REQUEST_NO = INSPECTTABLE.PROD_REQUEST_NO AND INPUTTB.CTR_CD = INSPECTTABLE.CTR_CD)
            LEFT JOIN P400 ON (P400.PROD_REQUEST_NO = INPUTTB.PROD_REQUEST_NO AND P400.CTR_CD = INPUTTB.CTR_CD)
            LEFT JOIN M100 ON (P400.G_CODE = M100.G_CODE AND P400.CTR_CD = M100.CTR_CD)
            LEFT JOIN M010 ON (M010.EMPL_NO = P400.EMPL_NO AND M010.CTR_CD = P400.CTR_CD)
            LEFT JOIN M110 ON (M110.CUST_CD = P400.CUST_CD AND M110.CTR_CD = P400.CTR_CD) 
                             ${generate_condition_get_inspection_inoutycsx(
                               DATA.CUST_NAME,
                               DATA.G_CODE,
                               DATA.G_NAME,
                               DATA.PROD_TYPE,
                               DATA.EMPL_NAME,
                               DATA.PROD_REQUEST_NO,
                               DATA.CTR_CD
                             )} ORDER BY P400.PROD_REQUEST_DATE DESC`;
      //console.log(query);
      kqua = await queryDB(query);
      ////console.log(kqua);
      res.send(kqua);
      break;
    case "Nhật Ký Kiểm Tra":
      query = `SELECT ZTBINSPECTNGTB.INSPECT_ID, CONCAT(datepart(YEAR,INSPECT_START_TIME),'_',datepart(ISO_WEEK,DATEADD(day,2,INSPECT_START_TIME))) AS YEAR_WEEK, M110.CUST_NAME_KD,ZTBINSPECTNGTB.PROD_REQUEST_NO,M100.G_NAME_KD,M100.G_NAME,ZTBINSPECTNGTB.G_CODE,M100.PROD_TYPE,ZTBINSPECTNGTB.M_LOT_NO,I222.LOTNCC, isnull(M090.M_NAME,'NO_INFO') as M_NAME,isnull(M090.WIDTH_CD,0) as WIDTH_CD,ZTBINSPECTNGTB.EMPL_NO AS INSPECTOR,ZTBINSPECTNGTB.LINEQC_PIC AS LINEQC,ZTBINSPECTNGTB.PROD_PIC,M100.CODE_33 AS UNIT ,ZTBINSPECTNGTB.PROCESS_LOT_NO,ZTBINSPECTNGTB.PROCESS_IN_DATE,ZTBINSPECTNGTB.INSPECT_DATETIME, ZTBINSPECTNGTB.INSPECT_START_TIME,ZTBINSPECTNGTB.INSPECT_FINISH_TIME,ZTBINSPECTNGTB.FACTORY,ZTBINSPECTNGTB.LINEQC_PIC,ZTBINSPECTNGTB.MACHINE_NO,(ZTBINSPECTNGTB.INSPECT_TOTAL_QTY - ZTBINSPECTNGTB.ERR32) AS INSPECT_TOTAL_QTY,ZTBINSPECTNGTB.INSPECT_OK_QTY,CAST(INSPECT_TOTAL_QTY AS float)/(CAST(DATEDIFF(MINUTE, ZTBINSPECTNGTB.INSPECT_START_TIME,ZTBINSPECTNGTB.INSPECT_FINISH_TIME) AS float) / CAST(60 as float) )  AS INSPECT_SPEED,(ERR1+ERR2+ERR3) AS INSPECT_TOTAL_LOSS_QTY, (ERR4+ERR5+ERR6+ERR7+ERR8+ERR9+ERR10+ERR11+ERR12+ERR13+ERR14+ERR15+ERR16+ERR17+ERR18+ERR19+ERR20+ERR21+ERR22+ERR23+ERR24+ERR25+ERR26+ERR27+ERR28+ERR29+ERR30+ERR31) AS INSPECT_TOTAL_NG_QTY, (ERR4+ERR5+ERR6+ERR7+ERR8+ERR9+ERR10+ERR11) AS MATERIAL_NG_QTY, (ERR12+ERR13+ERR14+ERR15+ERR16+ERR17+ERR18+ERR19+ERR20+ERR21+ERR22+ERR23+ERR24+ERR25+ERR26+ERR27+ERR28+ERR29+ERR30+ERR31) AS PROCESS_NG_QTY,M100.PROD_LAST_PRICE AS PROD_PRICE,ZTBINSPECTNGTB.ERR1,ZTBINSPECTNGTB.ERR2,ZTBINSPECTNGTB.ERR3,ZTBINSPECTNGTB.ERR4,ZTBINSPECTNGTB.ERR5,ZTBINSPECTNGTB.ERR6,ZTBINSPECTNGTB.ERR7,ZTBINSPECTNGTB.ERR8,ZTBINSPECTNGTB.ERR9,ZTBINSPECTNGTB.ERR10,ZTBINSPECTNGTB.ERR11,ZTBINSPECTNGTB.ERR12,ZTBINSPECTNGTB.ERR13,ZTBINSPECTNGTB.ERR14,ZTBINSPECTNGTB.ERR15,ZTBINSPECTNGTB.ERR16,ZTBINSPECTNGTB.ERR17,ZTBINSPECTNGTB.ERR18,ZTBINSPECTNGTB.ERR19,ZTBINSPECTNGTB.ERR20,ZTBINSPECTNGTB.ERR21,ZTBINSPECTNGTB.ERR22,ZTBINSPECTNGTB.ERR23,ZTBINSPECTNGTB.ERR24,ZTBINSPECTNGTB.ERR25,ZTBINSPECTNGTB.ERR26,ZTBINSPECTNGTB.ERR27,ZTBINSPECTNGTB.ERR28,ZTBINSPECTNGTB.ERR29,ZTBINSPECTNGTB.ERR30,ZTBINSPECTNGTB.ERR31,ZTBINSPECTNGTB.ERR32, isnull(ZTBINSPECTNGTB.CNDB_ENCODES,'') AS CNDB_ENCODES  FROM ZTBINSPECTNGTB  
              LEFT JOIN M110 ON (ZTBINSPECTNGTB.CUST_CD = M110.CUST_CD AND ZTBINSPECTNGTB.CTR_CD = M110.CTR_CD)  
              LEFT JOIN M100 ON (ZTBINSPECTNGTB.G_CODE = M100.G_CODE AND ZTBINSPECTNGTB.CTR_CD = M100.CTR_CD) 
              LEFT JOIN M090 ON(ZTBINSPECTNGTB.M_CODE = M090.M_CODE AND ZTBINSPECTNGTB.CTR_CD = M090.CTR_CD)
              LEFT JOIN I222 ON(I222.M_LOT_NO = ZTBINSPECTNGTB.M_LOT_NO AND I222.CTR_CD = ZTBINSPECTNGTB.CTR_CD)      
                             ${generate_condition_get_inspection_ng_data(
                               DATA.ALLTIME,
                               DATA.FROM_DATE,
                               DATA.TO_DATE,
                               DATA.CUST_NAME,
                               DATA.G_CODE,
                               DATA.G_NAME,
                               DATA.PROD_TYPE,
                               DATA.EMPL_NAME,
                               DATA.PROD_REQUEST_NO,
                               DATA.CTR_CD
                             )} ORDER BY INSPECT_ID DESC`;
      //console.log(query);
      kqua = await queryDB(query);
      ////console.log(kqua);
      res.send(kqua);
      break;
  }
};
exports.loadChoKiemGop_NEW = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `WITH OLD_CHO_KIEM AS
(
SELECT ZTB_WAIT_INSPECT.CTR_CD, ZTB_WAIT_INSPECT.G_CODE, M100.G_NAME, M100.G_NAME_KD, SUM(INSPECT_BALANCE_QTY) AS INSPECT_BALANCE_QTY, SUM(WAIT_CS_QTY) AS WAIT_CS_QTY, SUM(WAIT_SORTING_RMA) AS WAIT_SORTING_RMA,  SUM(INSPECT_BALANCE_QTY+ WAIT_CS_QTY+ WAIT_SORTING_RMA) AS TOTAL_WAIT FROM ZTB_WAIT_INSPECT JOIN M100 ON ( M100.G_CODE = ZTB_WAIT_INSPECT.G_CODE AND M100.CTR_CD = ZTB_WAIT_INSPECT.CTR_CD) 
  WHERE ZTB_WAIT_INSPECT.UPDATE_DATE = '${DATA.TO_DATE}'  AND ZTB_WAIT_INSPECT.CALAMVIEC='DEM' AND ZTB_WAIT_INSPECT.CTR_CD='${DATA.CTR_CD}'
  GROUP BY ZTB_WAIT_INSPECT.CTR_CD,ZTB_WAIT_INSPECT.G_CODE, M100.G_NAME, M100.G_NAME_KD
),
NEW_CHO_KIEM AS 
(
SELECT CTR_CD, G_CODE, SUM(INPUT_QTY_EA) AS INSPECT_BALANCE_QTY FROM ZTBINSPECTINPUTTB WHERE INSPECT_YN='Y' AND P400_YN='Y' GROUP BY CTR_CD, G_CODE
),
TKTB AS
(
SELECT M100.CTR_CD, M100.G_CODE, M100.G_NAME, M100.G_NAME_KD, isnull(NEW_CHO_KIEM.INSPECT_BALANCE_QTY,0) AS INSPECT_BALANCE_QTY, isnull(OLD_CHO_KIEM.WAIT_CS_QTY,0) AS WAIT_CS_QTY,isnull(OLD_CHO_KIEM.WAIT_SORTING_RMA,0) AS WAIT_SORTING_RMA, (isnull(NEW_CHO_KIEM.INSPECT_BALANCE_QTY,0) + isnull(OLD_CHO_KIEM.WAIT_CS_QTY,0) + isnull(OLD_CHO_KIEM.WAIT_SORTING_RMA,0)) AS TOTAL_WAIT  FROM M100 
LEFT JOIN OLD_CHO_KIEM ON (OLD_CHO_KIEM.CTR_CD = M100.CTR_CD AND OLD_CHO_KIEM.G_CODE = M100.G_CODE)
LEFT JOIN NEW_CHO_KIEM ON (NEW_CHO_KIEM.CTR_CD = M100.CTR_CD AND NEW_CHO_KIEM.G_CODE = M100.G_CODE)
) 
SELECT * FROM TKTB WHERE TOTAL_WAIT > 0 AND CTR_CD='${DATA.CTR_CD}'`;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.loadInspectionPatrol = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
  SELECT ZTBINSPECTION_PATROL.INS_PATROL_ID, ZTBINSPECTION_PATROL.PROD_REQUEST_NO, ZTBINSPECTION_PATROL.PLAN_ID, ZTBINSPECTION_PATROL.PROCESS_LOT_NO, ZTBINSPECTION_PATROL.G_CODE, ZTBINSPECTION_PATROL.ERR_CODE, ZTBINSPECTION_PATROL.INSPECT_QTY, ZTBINSPECTION_PATROL.DEFECT_QTY, ZTBINSPECTION_PATROL.DEFECT_PHENOMENON, ZTBINSPECTION_PATROL.LINEQC_PIC, ZTBINSPECTION_PATROL.INSP_PIC, ZTBINSPECTION_PATROL.PROD_PIC, ZTBINSPECTION_PATROL.INS_DATE, ZTBINSPECTION_PATROL.PHANLOAI, ZTBINSPECTION_PATROL.REMARK, ZTBINSPECTION_PATROL.OCCURR_TIME, ZTBINSPECTION_PATROL.LABEL_ID, ZTBINSPECTION_PATROL.EQUIPMENT_CD, ZTBINSPECTION_PATROL.CUST_CD, ZTBINSPECTION_PATROL.FACTORY, ZTBINSPECTION_PATROL.CTR_CD, M100.G_NAME, M100.G_NAME_KD, M110.CUST_NAME_KD FROM ZTBINSPECTION_PATROL
  LEFT JOIN M100 ON M100.G_CODE = ZTBINSPECTION_PATROL.G_CODE AND M100.CTR_CD = ZTBINSPECTION_PATROL.CTR_CD
  LEFT JOIN M110 ON M110.CUST_CD = ZTBINSPECTION_PATROL.CUST_CD AND M110.CTR_CD = ZTBINSPECTION_PATROL.CTR_CD
  WHERE ZTBINSPECTION_PATROL.CTR_CD='${DATA.CTR_CD}'
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.resetStatus = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery1 = `
  UPDATE ZTBLOTPRINTHISTORYTB SET INS_STATUS='E' WHERE INS_STATUS <> 'E' AND TABLE_NO='${DATA.EQ_NAME}' AND CTR_CD='${DATA.CTR_CD}'
  `;
  let setpdQuery2 = `
  UPDATE ZTB_INS_STATUS SET EQ_STATUS='STOP', EMPL_COUNT=0 WHERE EQ_NAME='${DATA.EQ_NAME}' AND EQ_STATUS='START' AND CTR_CD='${DATA.CTR_CD}'
  `;
  checkkq = await queryDB(setpdQuery1);
  checkkq = await queryDB(setpdQuery2);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.getIns_Status = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = ` SELECT ZTB_INS_STATUS.KHUVUC, ZTB_INS_STATUS.FACTORY,ZTB_INS_STATUS.EQ_NAME,ZTB_INS_STATUS.EMPL_COUNT,ZTB_INS_STATUS.EQ_STATUS,ZTB_INS_STATUS.CURR_PLAN_ID,ZTB_INS_STATUS.CURR_G_CODE,ZTB_INS_STATUS.REMARK,ZTB_INS_STATUS.INS_EMPL,ZTB_INS_STATUS.INS_DATE,ZTB_INS_STATUS.UPD_EMPL,ZTB_INS_STATUS.UPD_DATE, M100.G_NAME_KD, M100.G_NAME FROM ZTB_INS_STATUS LEFT JOIN M100 ON (M100.G_CODE = ZTB_INS_STATUS.CURR_G_CODE AND M100.CTR_CD = ZTB_INS_STATUS.CTR_CD) WHERE ZTB_INS_STATUS.CTR_CD='${DATA.CTR_CD}' ORDER BY ZTB_INS_STATUS.EQ_NAME ASC`;
  //${moment().format('YYYY-MM-DD')}
  ////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.updateQCPASS_FAILING = async (req, res, DATA) => {
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let checkkq = "OK";
  let updateProcessStatus = ``;

  if(DATA.VALUE === "Y"){
    updateProcessStatus = `, PROCESS_STATUS='C', PROCESS_EMPL='${EMPL_NO}', PROCESS_DATE=GETDATE() `;
  }
  let setpdQuery = `UPDATE ZTB_SX_NG_MATERIAL SET QC_PASS='${DATA.VALUE}', QC_PASS_DATE=GETDATE(), QC_PASS_EMPL='${EMPL_NO}' ${updateProcessStatus} WHERE CTR_CD='${DATA.CTR_CD}' AND ZTB_SX_NG_MATERIAL.FAIL_ID=${DATA.FAIL_ID}`;
  console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.updateCLOSE_FAILING = async (req, res, DATA) => {
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let checkkq = "OK";
  let setpdQuery = `UPDATE ZTB_SX_NG_MATERIAL SET PROCESS_STATUS='${DATA.VALUE}', PROCESS_DATE=GETDATE(), PROCESS_EMPL='${EMPL_NO}' WHERE CTR_CD='${DATA.CTR_CD}' AND ZTB_SX_NG_MATERIAL.FAIL_ID=${DATA.FAIL_ID}`;
  console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.updateIQCConfirm_FAILING = async (req, res, DATA) => {
  //console.log(DATA);
  let checkkq = "OK";
  let setpdQuery = `
  UPDATE ZTB_SX_NG_MATERIAL SET IN2_EMPL='${DATA.IN2_EMPL.toUpperCase()}', UPD_EMPL='${DATA.IN2_EMPL.toUpperCase()}', UPD_DATE= GETDATE() WHERE CTR_CD='${
    DATA.CTR_CD
  }' AND FAIL_ID=${DATA.FAIL_ID} 
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.loadQCFailData = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = ``;
  if (DATA.ONLY_PENDING === true) {
    condition = ` AND ZTB_SX_NG_MATERIAL.PROCESS_STATUS='P'`;
  }
  let setpdQuery = ` SELECT ZTB_SX_NG_MATERIAL.PROCESS_STATUS, ZTB_SX_NG_MATERIAL.PROCESS_EMPL, ZTB_SX_NG_MATERIAL.PROCESS_DATE,ZTB_SX_NG_MATERIAL.PROCESS_LOT_NO, ZTB_SX_NG_MATERIAL.CTR_CD, ZTB_SX_NG_MATERIAL.FAIL_ID, ZTB_SX_NG_MATERIAL.FACTORY,ZTB_SX_NG_MATERIAL.PLAN_ID_SUDUNG,M100.G_NAME,M100.G_CODE, ZTB_SX_NG_MATERIAL.LIEUQL_SX,ZTB_SX_NG_MATERIAL.M_CODE,ZTB_SX_NG_MATERIAL.M_LOT_NO,ZTB_SX_NG_MATERIAL.VENDOR_LOT, 
            M090.M_NAME, M090.WIDTH_CD, ZTB_SX_NG_MATERIAL.ROLL_QTY,ZTB_SX_NG_MATERIAL.IN_QTY,ZTB_SX_NG_MATERIAL.TOTAL_IN_QTY,ZTB_SX_NG_MATERIAL.USE_YN,ZTB_SX_NG_MATERIAL.PQC3_ID, ZTBPQC3TABLE.DEFECT_PHENOMENON, ZTB_SX_NG_MATERIAL.DEFECT_PHENOMENON AS SX_DEFECT, ZTB_SX_NG_MATERIAL.OUT_DATE,ZTB_SX_NG_MATERIAL.INS_EMPL,ZTB_SX_NG_MATERIAL.INS_DATE,ZTB_SX_NG_MATERIAL.UPD_EMPL,ZTB_SX_NG_MATERIAL.UPD_DATE,ZTB_SX_NG_MATERIAL.PHANLOAI,ZTB_SX_NG_MATERIAL.QC_PASS,ZTB_SX_NG_MATERIAL.QC_PASS_DATE,ZTB_SX_NG_MATERIAL.QC_PASS_EMPL,ZTB_SX_NG_MATERIAL.REMARK, IN1_EMPL, IN2_EMPL, OUT1_EMPL, OUT2_EMPL, IN_CUST_CD, OUT_CUST_CD, OUT_PLAN_ID, REMARK_OUT, M110.CUST_NAME_KD AS IN_CUST_NAME, M110_A.CUST_NAME_KD AS OUT_CUST_NAME,  ZTB_SX_NG_MATERIAL.NCR_ID, M110_B.CUST_NAME_KD AS MAKER
             FROM ZTB_SX_NG_MATERIAL
            LEFT JOIN ZTB_QLSXPLAN ON (ZTB_SX_NG_MATERIAL.PLAN_ID_SUDUNG = ZTB_QLSXPLAN.PLAN_ID AND ZTB_SX_NG_MATERIAL.CTR_CD = ZTB_QLSXPLAN.CTR_CD)
            LEFT JOIN M100 ON (ZTB_QLSXPLAN.G_CODE = M100.G_CODE AND ZTB_QLSXPLAN.CTR_CD = M100.CTR_CD)
            LEFT JOIN M090 ON (M090.M_CODE = ZTB_SX_NG_MATERIAL.M_CODE AND M090.CTR_CD = ZTB_SX_NG_MATERIAL.CTR_CD)
            LEFT JOIN M110 ON (M110.CUST_CD = ZTB_SX_NG_MATERIAL.IN_CUST_CD AND M110.CTR_CD = ZTB_SX_NG_MATERIAL.CTR_CD)
            LEFT JOIN ZTB_MATERIAL_TB ON (ZTB_MATERIAL_TB.CTR_CD = M090.CTR_CD AND ZTB_MATERIAL_TB.M_NAME = M090.M_NAME) 
            LEFT JOIN M110 M110_B ON (M110_B.CUST_CD = ZTB_MATERIAL_TB.CUST_CD AND M110_B.CTR_CD = ZTB_MATERIAL_TB.CTR_CD)
            LEFT JOIN (SELECT CTR_CD, CUST_CD, CUST_NAME_KD FROM M110) AS M110_A ON (M110_A.CUST_CD = ZTB_SX_NG_MATERIAL.OUT_CUST_CD AND M110_A.CTR_CD = ZTB_SX_NG_MATERIAL.CTR_CD)
            LEFT JOIN ZTBPQC3TABLE ON (ZTB_SX_NG_MATERIAL.PQC3_ID = ZTBPQC3TABLE.PQC3_ID AND ZTB_SX_NG_MATERIAL.CTR_CD = ZTBPQC3TABLE.CTR_CD) 
            WHERE ZTB_SX_NG_MATERIAL.CTR_CD='${DATA.CTR_CD}' ${condition}
            ORDER BY ZTB_SX_NG_MATERIAL.INS_DATE DESC
            `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.checkPQC3_IDfromPLAN_ID = async (req, res, DATA) => {
  let kqua;
  let query = `SELECT DISTINCT P501.PLAN_ID, ZTBPQC3TABLE.PQC3_ID,  ZTBPQC3TABLE.DEFECT_PHENOMENON FROM P501 LEFT JOIN ZTBPQC3TABLE ON (P501.PROCESS_LOT_NO = ZTBPQC3TABLE.PROCESS_LOT_NO) WHERE P501.PLAN_ID='${DATA.PLAN_ID}' AND P501.CTR_CD='${DATA.CTR_CD}' AND ZTBPQC3TABLE.PQC3_ID is not null`;
  ////console.log(query);
  kqua = await queryDB(query);
  res.send(kqua);
};
exports.insertFailingData = async (req, res, DATA) => {
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let checkkq = "OK";
  let setpdQuery = `INSERT INTO ZTB_SX_NG_MATERIAL (CTR_CD,FACTORY,PLAN_ID_SUDUNG,LIEUQL_SX,M_CODE,M_LOT_NO,VENDOR_LOT,ROLL_QTY,IN_QTY,TOTAL_IN_QTY,USE_YN,PQC3_ID,OUT_DATE,INS_EMPL,INS_DATE,PHANLOAI,QC_PASS,REMARK, IN1_EMPL, IN2_EMPL, IN_CUST_CD, DEFECT_PHENOMENON, PROCESS_LOT_NO ) VALUES ('${DATA.CTR_CD}','${DATA.FACTORY}','${DATA.PLAN_ID_SUDUNG}','${DATA.LIEUQL_SX}','${DATA.M_CODE}','${DATA.M_LOT_NO}','${DATA.VENDOR_LOT}','${DATA.ROLL_QTY}','${DATA.IN_QTY}','${DATA.TOTAL_IN_QTY}','Y','${DATA.PQC3_ID}','${DATA.OUT_DATE}','${EMPL_NO}',GETDATE(),'${DATA.PHANLOAI}','N',N'${DATA.REMARK}','${DATA.IN1_EMPL}','${DATA.IN2_EMPL}','${DATA.IN_CUST_CD}',N'${DATA.DEFECT_PHENOMENON}','${DATA.PROCESS_LOT_NO}')`;
  console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  console.log(checkkq);
  res.send(checkkq);
};
exports.updateQCFailTableData = async (req, res, DATA) => {
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let checkkq = "OK";
  let setpdQuery = `UPDATE  ZTB_SX_NG_MATERIAL SET OUT1_EMPL='${DATA.OUT1_EMPL}', OUT2_EMPL='${DATA.OUT2_EMPL}', OUT_CUST_CD='${DATA.OUT_CUST_CD}', OUT_PLAN_ID='${DATA.OUT_PLAN_ID}',REMARK_OUT='${DATA.REMARK_OUT}', QC_PASS ='Y', QC_PASS_EMPL ='${EMPL_NO}', QC_PASS_DATE = GETDATE(),USE_YN='N' WHERE CTR_CD='${DATA.CTR_CD}' AND FAIL_ID=${DATA.FAIL_ID}`;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  console.log(checkkq);
  res.send(checkkq);
};
exports.updateQCPASS_HOLDING = async (req, res, DATA) => {
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let checkkq = "OK";
  let updateProcessStatus = ``;

  if(DATA.VALUE === "Y"){
    updateProcessStatus = `, PROCESS_STATUS='C', PROCESS_EMPL='${EMPL_NO}', PROCESS_DATE=GETDATE() `;
  }
  let setpdQuery = `UPDATE HOLDING_TB SET QC_PASS='${DATA.VALUE}', QC_PASS_DATE=GETDATE(), QC_PASS_EMPL='${EMPL_NO}', USE_YN='${DATA.USE_YN === 'X' ? 'X' :DATA.VALUE === 'Y' ? 'T' : 'B'}' ${updateProcessStatus} WHERE CTR_CD='${DATA.CTR_CD}' AND HOLDING_TB.HOLD_ID=${DATA.ID} AND M_LOT_NO='${DATA.M_LOT_NO}'`;
  console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.updateMaterialHoldingReason = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `UPDATE HOLDING_TB SET REASON = N'${DATA.REASON}' WHERE CTR_CD='${DATA.CTR_CD}' AND HOLD_ID=${DATA.HOLD_ID}`;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.traholdingmaterial = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = ` WHERE 1=1  `;
  if (DATA.ALLTIME === false) {
    condition += ` AND HOLDING_TB.INS_DATE BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE} 23:59:59'`;
  }
  if (DATA.M_CODE !== "") {
    condition += ` AND HOLDING_TB.M_CODE = '${DATA.M_CODE}' `;
  }
  if (DATA.M_NAME !== "") {
    condition += ` AND M090.M_NAME LIKE '%${DATA.M_NAME}%' `;
  }
  if (DATA.M_LOT_NO !== "") {
    condition += ` AND HOLDING_TB.M_LOT_NO = '${DATA.M_LOT_NO}' `;
  }
  if (DATA.M_STATUS !== "ALL") {
    condition += ` AND HOLDING_TB.QC_PASS = '${DATA.M_STATUS}' `;
  }
  let setpdQuery = ` SELECT HOLDING_TB.HOLD_ID, HOLDING_TB.REASON, HOLDING_TB.ID, HOLDING_TB.HOLDING_MONTH, HOLDING_TB.FACTORY, HOLDING_TB.WAHS_CD, HOLDING_TB.LOC_CD, HOLDING_TB.M_LOT_NO, HOLDING_TB.M_CODE, M090.M_NAME, M090.WIDTH_CD, HOLDING_TB.HOLDING_ROLL_QTY,HOLDING_TB.HOLDING_QTY, ( HOLDING_TB.HOLDING_ROLL_QTY*HOLDING_TB.HOLDING_QTY) AS HOLDING_TOTAL_QTY, HOLDING_TB.HOLDING_IN_DATE, HOLDING_TB.HOLDING_OUT_DATE, HOLDING_TB.VENDOR_LOT, HOLDING_TB.USE_YN, HOLDING_TB.INS_DATE, HOLDING_TB.INS_EMPL, HOLDING_TB.UPD_DATE, HOLDING_TB.UPD_EMPL, HOLDING_TB.QC_PASS, HOLDING_TB.QC_PASS_DATE, HOLDING_TB.QC_PASS_EMPL, HOLDING_TB.NCR_ID, HOLDING_TB.CTR_CD, HOLDING_TB.PROCESS_STATUS, HOLDING_TB.PROCESS_EMPL, HOLDING_TB.PROCESS_DATE FROM HOLDING_TB 
            LEFT JOIN M090 ON (M090.M_CODE = HOLDING_TB.M_CODE AND M090.CTR_CD = HOLDING_TB.CTR_CD) ${condition} AND HOLDING_TB.CTR_CD='${DATA.CTR_CD}' ORDER BY HOLDING_TB.INS_DATE DESC`;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.updateQCPASSI222 = async (req, res, DATA) => {
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let checkkq = "OK";
  let update_USE_YN = "";
  if (DATA.VALUE === "N") {
    update_USE_YN = `, USE_YN='B'`;
  }
  let setpdQuery = `UPDATE  I222  SET QC_PASS= '${DATA.VALUE}', QC_PASS_EMPL='${EMPL_NO}', QC_PASS_DATE = GETDATE() ${update_USE_YN} WHERE CTR_CD='${DATA.CTR_CD}' AND M_CODE ='${DATA.M_CODE}' AND SUBSTRING(M_LOT_NO,1,6) = '${DATA.LOT_CMS}'`;
  console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.updateQCPASSI222_M_LOT_NO = async (req, res, DATA) => {
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let checkkq = "OK";
  let update_USE_YN = "";
  if (DATA.VALUE === "N") {
    update_USE_YN = `, USE_YN='B'`;
  }
  let setpdQuery = `UPDATE  I222  SET QC_PASS= '${DATA.VALUE}', QC_PASS_EMPL='${EMPL_NO}', QC_PASS_DATE = GETDATE(), USE_YN='${DATA.USE_YN === 'X' ? 'X' :DATA.VALUE === 'Y' ? 'T' : 'B'}' WHERE CTR_CD='${DATA.CTR_CD}' AND M_LOT_NO = '${DATA.M_LOT_NO}'`;
  console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.updateIQC1Table = async (req, res, DATA) => {
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let checkkq = "OK";
  let setpdQuery = `UPDATE  IQC1_TABLE  SET TOTAL_RESULT= '${DATA.VALUE}', UPD_EMPL='${EMPL_NO}', UPD_DATE = GETDATE(), REMARK=N'${DATA.REMARK}' WHERE CTR_CD='${DATA.CTR_CD}' AND IQC1_ID=${DATA.IQC1_ID}`;
  ////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.loadIQC1table = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = `WHERE IQCTB.INS_DATE BETWEEN ''${DATA.FROM_DATE}'' AND ''${DATA.TO_DATE} 23:59:59'' `;
  if (DATA.M_CODE !== "") condition += ` AND IQCTB.M_CODE =''${DATA.M_CODE}'' `;
  if (DATA.LOTNCC !== "") condition += ` AND IQCTB.LOTNCC =''${DATA.LOTNCC}'' `;
  if (DATA.M_NAME !== "")
    condition += ` AND IQCTB.M_NAME LIKE ''%${DATA.M_NAME}%'' `;
  if (DATA.VENDOR_NAME !== "")
    condition += ` AND IQCTB.CUST_NAME_KD LIKE ''%${DATA.VENDOR_NAME}%'' `;
  let setpdQuery = `
  DECLARE @str1 nvarchar(max), @str2 nvarchar(max), @str3 nvarchar(max)
SET @str1  =(   SELECT '(' + STRING_AGG('[' + TEST_NAME + ']', ',') + ')' AS ConcatenatedString
FROM ZTB_REL_TESTTABLE WHERE CTR_CD='${DATA.CTR_CD}');
SET @str2 =(SELECT STRING_AGG('isnull(PVTB.[' + TEST_NAME + '], -1) AS KQ_' + REPLACE(TEST_NAME, ' ', '_'), ',') AS ConcatenatedString
FROM ZTB_REL_TESTTABLE WHERE CTR_CD='${DATA.CTR_CD}');
SET @str3 = (SELECT STRING_AGG('XX.KQ_' + UPPER(REPLACE(TEST_NAME, ' ', '_')), ', ') AS ConcatenatedString
FROM ZTB_REL_TESTTABLE WHERE CTR_CD='${DATA.CTR_CD}');
declare @query nvarchar(max) 
select 
@query = N'
WITH INPUT_LENGTH_TB AS
(
SELECT CTR_CD, M_CODE, SUBSTRING(M_LOT_NO,1,6) AS LOTCMS, SUM(IN_CFM_QTY* ROLL_QTY) AS TOTAL_CFM_QTY, SUM(ROLL_QTY) AS TOTAL_ROLL FROM I222 WHERE I222.CTR_CD=''${DATA.CTR_CD}''
   GROUP BY CTR_CD, M_CODE, SUBSTRING(M_LOT_NO,1,6)
),
ZTB_MATERIAL_TB2 AS
(
SELECT DISTINCT CUST_CD, M_NAME, CTR_CD, M_THICKNESS FROM ZTB_MATERIAL_TB WHERE USE_YN = ''Y''
),
IQCTB AS
(
SELECT  IQC1_TABLE.IQC1_ID, IQC1_TABLE.M_CODE, M090.M_NAME, M090.WIDTH_CD, IQC1_TABLE.M_LOT_NO, IQC1_TABLE.LOT_CMS,IQC1_TABLE.LOT_VENDOR AS LOT_VENDOR_IQC, I222.LOTNCC, IQC1_TABLE.CUST_CD, M110.CUST_NAME_KD, I222.EXP_DATE, INPUT_LENGTH_TB.TOTAL_CFM_QTY AS INPUT_LENGTH, INPUT_LENGTH_TB.TOTAL_ROLL, IQC1_TABLE.NQ_CHECK_ROLL,IQC1_TABLE.IQC_TEST_RESULT,IQC1_TABLE.DTC_RESULT, IQC1_TABLE.CHECKSHEET, IQC1_TABLE.DTC_ID, IQC1_TABLE.TEST_EMPL, IQC1_TABLE.TOTAL_RESULT,'+@str3 +'
, 
IQC1_TABLE.INS_DATE, IQC1_TABLE.INS_EMPL, IQC1_TABLE.UPD_DATE, IQC1_TABLE.UPD_EMPL, IQC1_TABLE.REMARK, ZTB_MATERIAL_TB2.M_THICKNESS, IQC1_TABLE.THICKNESS, IQC1_TABLE.M_WIDTH FROM IQC1_TABLE 
LEFT JOIN 
  (SELECT PVTB.DTC_ID, '+@str2+'
   FROM 
  (					
SELECT AA.DTC_ID, AA.TEST_NAME,
CASE WHEN SUM(CASE WHEN AA.JUDGEMENT = ''NG'' THEN 1 ELSE 0 END) >0 THEN 0 
ELSE CASE WHEN SUM(CASE WHEN AA.JUDGEMENT = ''PD'' THEN 1 ELSE 0 END) >0 THEN 2  ELSE 1 END END AS FINAL_JUDGEMENT  
FROM
  (SELECT  ZTB_REL_REQUESTTABLE.DTC_ID,  ZTB_REL_TESTTABLE.TEST_NAME, ZTB_REL_TESTPOINT.POINT_CODE, ZTB_REL_SPECTTABLE.CENTER_VALUE , ZTB_REL_SPECTTABLE.UPPER_TOR,ZTB_REL_SPECTTABLE.LOWER_TOR , ZTB_REL_RESULT.RESULT, 
CASE WHEN ZTB_REL_RESULT.RESULT is null THEN ''PD'' ELSE
CASE WHEN (ZTB_REL_SPECTTABLE.CENTER_VALUE + ZTB_REL_SPECTTABLE.UPPER_TOR >= ZTB_REL_RESULT.RESULT AND ZTB_REL_SPECTTABLE.CENTER_VALUE - ZTB_REL_SPECTTABLE.LOWER_TOR <= ZTB_REL_RESULT.RESULT) THEN ''OK'' ELSE ''NG'' END END
AS JUDGEMENT
  FROM  ZTB_REL_REQUESTTABLE
  LEFT JOIN ZTB_REL_RESULT ON (ZTB_REL_REQUESTTABLE.DTC_ID = ZTB_REL_RESULT.DTC_ID AND ZTB_REL_REQUESTTABLE.TEST_CODE = ZTB_REL_RESULT.TEST_CODE AND ZTB_REL_REQUESTTABLE.CTR_CD = ZTB_REL_RESULT.CTR_CD)  
  LEFT JOIN ZTB_REL_SPECTTABLE ON (  ZTB_REL_SPECTTABLE.G_CODE = ZTB_REL_REQUESTTABLE.G_CODE AND ZTB_REL_SPECTTABLE.TEST_CODE = ZTB_REL_REQUESTTABLE.TEST_CODE AND ZTB_REL_SPECTTABLE.POINT_CODE = ZTB_REL_RESULT.POINT_CODE AND ZTB_REL_SPECTTABLE.M_CODE = ZTB_REL_REQUESTTABLE.M_CODE AND ZTB_REL_SPECTTABLE.CTR_CD = ZTB_REL_REQUESTTABLE.CTR_CD)
  LEFT JOIN ZTB_REL_TESTPOINT ON(ZTB_REL_SPECTTABLE.TEST_CODE = ZTB_REL_TESTPOINT.TEST_CODE AND ZTB_REL_SPECTTABLE.POINT_CODE = ZTB_REL_TESTPOINT.POINT_CODE AND ZTB_REL_SPECTTABLE.CTR_CD = ZTB_REL_TESTPOINT.CTR_CD)
  LEFT JOIN ZTB_REL_TESTTABLE ON (ZTB_REL_TESTTABLE.TEST_CODE = ZTB_REL_REQUESTTABLE.TEST_CODE AND ZTB_REL_TESTTABLE.CTR_CD = ZTB_REL_REQUESTTABLE.CTR_CD)
  WHERE ZTB_REL_REQUESTTABLE.CTR_CD=''${DATA.CTR_CD}''  AND ZTB_REL_REQUESTTABLE.REQUEST_DATETIME > ''2025-05-01'') AS AA GROUP BY AA.DTC_ID, AA.TEST_NAME
) AS BANGNGUON
  PIVOT 
  (SUM (BANGNGUON.FINAL_JUDGEMENT) 
      FOR BANGNGUON.TEST_NAME IN '+@str1+'
  )
  AS PVTB) AS XX
  ON (XX.DTC_ID = IQC1_TABLE.DTC_ID)
  LEFT JOIN M110 ON (M110.CUST_CD = IQC1_TABLE.CUST_CD AND M110.CTR_CD = IQC1_TABLE.CTR_CD)
LEFT JOIN I222 ON (I222.M_LOT_NO = IQC1_TABLE.M_LOT_NO AND I222.CTR_CD = IQC1_TABLE.CTR_CD)
LEFT JOIN INPUT_LENGTH_TB ON (INPUT_LENGTH_TB.CTR_CD = IQC1_TABLE.CTR_CD AND INPUT_LENGTH_TB.M_CODE = IQC1_TABLE.M_CODE AND INPUT_LENGTH_TB.LOTCMS = IQC1_TABLE.LOT_CMS)
  LEFT JOIN M090 ON (IQC1_TABLE.M_CODE = M090.M_CODE AND IQC1_TABLE.CTR_CD = M090.CTR_CD)
  LEFT JOIN ZTB_MATERIAL_TB2 ON (ZTB_MATERIAL_TB2.CTR_CD = M090.CTR_CD AND ZTB_MATERIAL_TB2.M_NAME = M090.M_NAME)
)
  SELECT * FROM IQCTB
  ${condition}
  ORDER BY IQCTB.IQC1_ID DESC
'
execute(@query)
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.insertIQC1table = async (req, res, DATA) => {
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let checkkq = "OK";
  let LOT_VENDOR = DATA.LOT_VENDOR;
  if(LOT_VENDOR.indexOf("SLITTING") > -1){
    LOT_VENDOR= LOT_VENDOR.substring(29,LOT_VENDOR.length);    
  }
  let setpdQuery = `INSERT INTO IQC1_TABLE (CTR_CD,M_CODE,M_LOT_NO,LOT_CMS,LOT_VENDOR,CUST_CD,EXP_DATE,INPUT_LENGTH,TOTAL_ROLL,NQ_CHECK_ROLL,DTC_ID,TEST_EMPL,INS_DATE,INS_EMPL,REMARK, TOTAL_RESULT, IQC_TEST_RESULT) VALUES ('${DATA.CTR_CD}','${DATA.M_CODE}','${DATA.M_LOT_NO}','${DATA.LOT_CMS}','${LOT_VENDOR}','${DATA.CUST_CD}','${DATA.EXP_DATE}','${DATA.INPUT_LENGTH}','${DATA.TOTAL_ROLL}','${DATA.NQ_CHECK_ROLL}','${DATA.DTC_ID}','${DATA.TEST_EMPL}',GETDATE(),'${EMPL_NO}','${DATA.REMARK}','PD','PD')`;
  console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.update_ncr_image = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `UPDATE ZTB_IQC_NCRTB SET DEFECT_IMAGE='${DATA.imagevalue}' WHERE CTR_CD='${DATA.CTR_CD}' AND NCR_ID=${DATA.NCR_ID}
    `;
  ////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.loadNCRData = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `SELECT ZTB_IQC_NCRTB.*, M110.CUST_NAME_KD AS VENDOR, I222.M_CODE, M090.WIDTH_CD FROM ZTB_IQC_NCRTB 
    LEFT JOIN M110 ON M110.CUST_CD = ZTB_IQC_NCRTB.CUST_CD AND M110.CTR_CD = ZTB_IQC_NCRTB.CTR_CD
    LEFT JOIN I222 ON I222.M_LOT_NO = ZTB_IQC_NCRTB.CMS_LOT AND I222.CTR_CD = ZTB_IQC_NCRTB.CTR_CD
    LEFT JOIN M090 ON M090.M_CODE = I222.M_CODE AND M090.CTR_CD = I222.CTR_CD
    WHERE ZTB_IQC_NCRTB.CTR_CD='${DATA.CTR_CD}'
    `;
  ////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.loadHoldingMaterialByNCR_ID = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `SELECT NCR_ID,VENDOR_LOT, HOLDING_TB.M_CODE, M_NAME, WIDTH_CD,SUM(HOLDING_ROLL_QTY) AS TOTAL_HOLDING_ROLL, SUM(HOLDING_ROLL_QTY * HOLDING_QTY) AS TOTAL_HOLDING_M, SUM(HOLDING_ROLL_QTY * HOLDING_QTY*WIDTH_CD/1000) AS TOTAL_HOLDING_SQM, 'HOLDING' AS TYPE FROM HOLDING_TB 
  LEFT JOIN M090 ON M090.M_CODE= HOLDING_TB.M_CODE AND M090.CTR_CD = HOLDING_TB.CTR_CD
  WHERE NCR_ID=${DATA.NCR_ID} AND HOLDING_TB.CTR_CD='${DATA.CTR_CD}'
  GROUP BY NCR_ID,VENDOR_LOT, HOLDING_TB.M_CODE, M_NAME, WIDTH_CD
  UNION
  SELECT NCR_ID, VENDOR_LOT, ZTB_SX_NG_MATERIAL.M_CODE,M_NAME, WIDTH_CD, SUM(ROLL_QTY) AS TOTAL_HOLDING_ROLL, SUM(TOTAL_IN_QTY) AS TOTAL_HOLDING_M, SUM(TOTAL_IN_QTY*WIDTH_CD/1000) AS TOTAL_HOLDING_SQM, 'FAILING' AS TYPE FROM ZTB_SX_NG_MATERIAL
  LEFT JOIN M090 ON M090.M_CODE= ZTB_SX_NG_MATERIAL.M_CODE AND M090.CTR_CD= ZTB_SX_NG_MATERIAL.CTR_CD
  WHERE NCR_ID=${DATA.NCR_ID} AND ZTB_SX_NG_MATERIAL.CTR_CD='${DATA.CTR_CD}'
  GROUP BY NCR_ID,VENDOR_LOT, ZTB_SX_NG_MATERIAL.M_CODE, M_NAME, WIDTH_CD`;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.insertNCRData = async (req, res, DATA) => {
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let checkkq = "OK";
  let setpdQuery = `INSERT INTO ZTB_IQC_NCRTB (CTR_CD,FACTORY,NCR_NO,NCR_DATE,RESPONSE_REQ_DATE,CUST_CD,M_NAME,CMS_LOT,VENDOR_LOT,DEFECT_TITLE,DEFECT_DETAIL,REMARK,INS_DATE,INS_EMPL) VALUES ('${DATA.CTR_CD}','${DATA.FACTORY}','${DATA.NCR_NO}','${DATA.NCR_DATE}','${DATA.RESPONSE_REQ_DATE}','${DATA.CUST_CD}','${DATA.M_NAME}','${DATA.CMS_LOT}','${DATA.VENDOR_LOT}',N'${DATA.DEFECT_TITLE}',N'${DATA.DEFECT_DETAIL}',N'${DATA.REMARK}',GETDATE(),'${EMPL_NO}')`;
  ////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.selectCustomerAndVendorList = async (req, res, DATA) => {
  let kqua;
  let query = `SELECT DISTINCT CUST_CD , CUST_NAME_KD  FROM M110 WHERE CTR_CD='${DATA.CTR_CD}' ORDER BY CUST_NAME_KD ASC`;
  kqua = await queryDB(query);
  ////console.log(kqua);
  res.send(kqua);
};
exports.checklastAuditID = async (req, res, DATA) => {
  //console.log(DATA);
  let checkkq = "OK";
  let setpdQuery = `
  SELECT MAX(AUDIT_ID) AS MAX_AUDIT_ID FROM AUDIT_INFO_TABLE WHERE  CTR_CD='${DATA.CTR_CD}'
  `;
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.insertCheckSheetData = async (req, res, DATA) => {
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let checkkq = "OK";
  let setpdQuery = `
  INSERT INTO AUDIT_DETAIL_TABLE (CTR_CD, AUDIT_ID, MAIN_ITEM_NO, MAIN_ITEM_CONTENT, SUB_ITEM_NO, SUB_ITEM_CONTENT,LEVEL_CAT, DETAIL_VN, DETAIL_KR, DETAIL_EN, MAX_SCORE, DEPARTMENT, INS_DATE, INS_EMPL) VALUES ('${DATA.CTR_CD}',${DATA.AUDIT_ID},${DATA.MAIN_ITEM_NO},N'${DATA.MAIN_ITEM_CONTENT}',${DATA.SUB_ITEM_NO},N'${DATA.SUB_ITEM_CONTENT}',N'${DATA.LEVEL_CAT}',N'${DATA.DETAIL_VN}',N'${DATA.DETAIL_KR}',N'${DATA.DETAIL_EN}',${DATA.MAX_SCORE},N'${DATA.DEPARTMENT}',GETDATE(),'${EMPL_NO}')
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.checkAuditNamebyCustomer = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
  SELECT * FROM AUDIT_INFO_TABLE WHERE  CTR_CD='${DATA.CTR_CD}' AND AUDIT_NAME =N'${DATA.AUDIT_NAME}' AND CUST_CD='${DATA.CUST_CD}'
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.insertNewAuditInfo = async (req, res, DATA) => {
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let checkkq = "OK";
  let setpdQuery = `
  INSERT INTO AUDIT_INFO_TABLE (CTR_CD, AUDIT_NAME, CUST_CD, PASS_SCORE, INS_DATE, INS_EMPL) VALUES ('${DATA.CTR_CD}',N'${DATA.AUDIT_NAME}', '${DATA.CUST_CD}', ${DATA.PASS_SCORE},GETDATE(), '${EMPL_NO}')
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.auditlistcheck = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
  SELECT  AUDIT_INFO_TABLE.AUDIT_ID, AUDIT_INFO_TABLE.AUDIT_NAME, M110.CUST_NAME_KD, AUDIT_INFO_TABLE.PASS_SCORE FROM  
  AUDIT_INFO_TABLE LEFT OUTER JOIN M110 ON M110.CUST_CD = AUDIT_INFO_TABLE.CUST_CD AND M110.CTR_CD = AUDIT_INFO_TABLE.CTR_CD
  WHERE AUDIT_INFO_TABLE.CTR_CD='${DATA.CTR_CD}'
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.loadAuditResultList = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
  SELECT        AUDIT_RESULT_TABLE.AUDIT_RESULT_ID, AUDIT_INFO_TABLE.AUDIT_ID, AUDIT_INFO_TABLE.AUDIT_NAME, AUDIT_RESULT_TABLE.AUDIT_DATE, AUDIT_RESULT_TABLE.REMARK, AUDIT_INFO_TABLE.INS_DATE,
   AUDIT_INFO_TABLE.INS_EMPL, AUDIT_INFO_TABLE.UPD_DATE, AUDIT_INFO_TABLE.UPD_EMPL
FROM            AUDIT_RESULT_TABLE  LEFT JOIN
   AUDIT_INFO_TABLE ON AUDIT_INFO_TABLE.AUDIT_ID = AUDIT_RESULT_TABLE.AUDIT_ID AND AUDIT_INFO_TABLE.CTR_CD = AUDIT_RESULT_TABLE.CTR_CD
   WHERE AUDIT_RESULT_TABLE.AUDIT_ID=${DATA.AUDIT_ID} AND AUDIT_RESULT_TABLE.CTR_CD='${DATA.CTR_CD}'
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.loadAuditResultCheckList = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
  SELECT AUDIT_RESULT_DETAIL.AUDIT_RESULT_DETAIL_ID, AUDIT_RESULT_DETAIL.AUDIT_RESULT_ID, AUDIT_DETAIL_TABLE.AUDIT_DETAIL_ID, AUDIT_DETAIL_TABLE.AUDIT_ID, AUDIT_INFO_TABLE.AUDIT_NAME, AUDIT_DETAIL_TABLE.MAIN_ITEM_NO, AUDIT_DETAIL_TABLE.MAIN_ITEM_CONTENT, 
  AUDIT_DETAIL_TABLE.SUB_ITEM_NO, AUDIT_DETAIL_TABLE.SUB_ITEM_CONTENT, AUDIT_DETAIL_TABLE.LEVEL_CAT, AUDIT_DETAIL_TABLE.DETAIL_VN, AUDIT_DETAIL_TABLE.DETAIL_KR, 
  AUDIT_DETAIL_TABLE.DETAIL_EN, AUDIT_DETAIL_TABLE.MAX_SCORE,  AUDIT_RESULT_DETAIL.AUDIT_SCORE,AUDIT_RESULT_DETAIL.AUDIT_EVIDENT,AUDIT_RESULT_DETAIL.REMARK, AUDIT_DETAIL_TABLE.DEPARTMENT,
  AUDIT_DETAIL_TABLE.INS_DATE, AUDIT_DETAIL_TABLE.INS_EMPL, AUDIT_DETAIL_TABLE.UPD_DATE, AUDIT_DETAIL_TABLE.UPD_EMPL
  FROM AUDIT_DETAIL_TABLE 
  LEFT JOIN AUDIT_INFO_TABLE ON  AUDIT_DETAIL_TABLE.AUDIT_ID = AUDIT_INFO_TABLE.AUDIT_ID AND AUDIT_DETAIL_TABLE.CTR_CD = AUDIT_INFO_TABLE.CTR_CD
  LEFT JOIN AUDIT_RESULT_DETAIL ON  AUDIT_DETAIL_TABLE.AUDIT_ID = AUDIT_RESULT_DETAIL.AUDIT_ID AND AUDIT_DETAIL_TABLE.MAIN_ITEM_NO = AUDIT_RESULT_DETAIL.MAIN_ITEM_NO AND AUDIT_DETAIL_TABLE.SUB_ITEM_NO = AUDIT_RESULT_DETAIL.SUB_ITEM_NO AND AUDIT_DETAIL_TABLE.CTR_CD = AUDIT_RESULT_DETAIL.CTR_CD
  WHERE AUDIT_RESULT_DETAIL.AUDIT_RESULT_ID = ${DATA.AUDIT_RESULT_ID} AND AUDIT_DETAIL_TABLE.CTR_CD='${DATA.CTR_CD}'
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.checkAuditResultCheckListExist = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
  SELECT TOP 1 AUDIT_RESULT_DETAIL.AUDIT_RESULT_ID FROM AUDIT_RESULT_DETAIL  WHERE CTR_CD='${DATA.CTR_CD}' AND AUDIT_RESULT_DETAIL.AUDIT_RESULT_ID = ${DATA.AUDIT_RESULT_ID}
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.insertResultIDtoCheckList = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
  INSERT INTO AUDIT_RESULT_DETAIL 
  (CTR_CD,AUDIT_RESULT_ID, AUDIT_ID, MAIN_ITEM_NO, SUB_ITEM_NO, INS_DATE,INS_EMPL)
  SELECT '${DATA.CTR_CD}' AS CTR_CD,${DATA.AUDIT_RESULT_ID} AS AUDIT_RESULT_ID,  AUDIT_ID, MAIN_ITEM_NO,SUB_ITEM_NO, GETDATE() AS INS_DATE, 'NHU1903' AS INS_EMPL FROM AUDIT_DETAIL_TABLE
  WHERE AUDIT_ID=${DATA.AUDIT_ID}          
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.createNewAudit = async (req, res, DATA) => {
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let checkkq = "OK";
  let setpdQuery = `
  INSERT INTO AUDIT_RESULT_TABLE (CTR_CD, AUDIT_ID, AUDIT_NAME, AUDIT_DATE, REMARK, INS_DATE, INS_EMPL) VALUES ('${
    DATA.CTR_CD
  }',${DATA.AUDIT_ID},'${DATA.AUDIT_NAME}','${moment().format(
    "YYYY-MM-DD"
  )}','',GETDATE(),'${EMPL_NO}')
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.updateEvident = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
  UPDATE AUDIT_RESULT_DETAIL SET AUDIT_EVIDENT=N'${DATA.AUDIT_EVIDENT}' WHERE CTR_CD='${DATA.CTR_CD}' AND AUDIT_RESULT_DETAIL_ID=${DATA.AUDIT_RESULT_DETAIL_ID}
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.resetEvident = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
  UPDATE AUDIT_RESULT_DETAIL SET AUDIT_EVIDENT=null WHERE  CTR_CD='${DATA.CTR_CD}' AND AUDIT_RESULT_DETAIL_ID=${DATA.AUDIT_RESULT_DETAIL_ID}
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.updatechecksheetResultRow = async (req, res, DATA) => {
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let checkkq = "OK";
  let setpdQuery = `
  UPDATE AUDIT_RESULT_DETAIL SET REMARK=N'${DATA.REMARK}',AUDIT_SCORE=${DATA.AUDIT_SCORE}, UPD_DATE=GETDATE(), UPD_EMPL='${EMPL_NO}' WHERE CTR_CD='${DATA.CTR_CD}' AND  AUDIT_RESULT_DETAIL_ID=${DATA.AUDIT_RESULT_DETAIL_ID}
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.loadRNRchitiet = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = `WHERE  SUBDEPTNAME is not null  `;
  if (DATA.ALLTIME === false) {
    condition += ` AND ZTB_RNR_TEST.TEST_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE}'`;
  }
  if (DATA.EMPL_NAME !== "") {
    condition += ` AND CONCAT(ZTBEMPLINFO.MIDLAST_NAME,' ',ZTBEMPLINFO.FIRST_NAME) LIKE N'%${DATA.EMPL_NAME}%'`;
  }
  if (DATA.FACTORY !== "ALL") {
    condition += ` AND CASE WHEN ZTBEMPLINFO.FACTORY_CODE=1 THEN 'NM1' ELSE 'NM2' END='${DATA.FACTORY}'`;
  }
  if (DATA.TEST_TYPE !== "ALL") {
    condition += ` AND ZTB_RNR_TEST.TEST_TYPE='${DATA.TEST_TYPE}'`;
  }
  if (DATA.TEST_ID !== "") {
    condition += ` AND ZTB_RNR_TEST.TEST_ID='${DATA.TEST_ID}'`;
  }
  let setpdQuery = `
    SELECT ZTB_RNR_TEST.TEST_DATE, ZTB_RNR_TEST.TEST_ID, ZTB_RNR_TEST.TEST_NO, ZTB_RNR_TEST.TEST_TYPE, CASE WHEN ZTBEMPLINFO.FACTORY_CODE=1 THEN 'NM1' ELSE 'NM2' END AS FACTORY, CONCAT(ZTBEMPLINFO.MIDLAST_NAME,' ',ZTBEMPLINFO.FIRST_NAME) AS FULL_NAME, ZTBSUBDEPARTMENT.SUBDEPTNAME, ZTB_RNR_TEST.TEST_EMPL_NO, 
    ZTB_RNR_TEST.UPD_DATE, ZTB_RNR_TEST.UPD_EMPL, ZTB_RNR_TEST.TEST_NUMBER, ZTB_RNR_RESULT.TEST_NUMBER2, ZTB_RNR_RESULT.RESULT_OK_NG, ZTB_RNR_RESULT.RESULT_DETAIL, ZTB_RNR_TEST.TEST_RESULT1, ZTB_RNR_TEST.TEST_REUST2, CASE WHEN TEST_RESULT1 <> ZTB_RNR_RESULT.RESULT_OK_NG AND SUBSTRING(RESULT_DETAIL,1,2) ='NG' THEN 1 ELSE 0 END AS MIX1, CASE WHEN TEST_REUST2 <> ZTB_RNR_RESULT.RESULT_OK_NG AND SUBSTRING(RESULT_DETAIL,1,2) ='NG' THEN 1 ELSE 0 END AS MIX2,  CASE WHEN TEST_RESULT1 <> ZTB_RNR_RESULT.RESULT_OK_NG AND SUBSTRING(RESULT_DETAIL,1,2) ='OK' THEN 1 ELSE 0 END AS BAT_NHAM1,  CASE WHEN TEST_RESULT1 <> ZTB_RNR_RESULT.RESULT_OK_NG AND SUBSTRING(RESULT_DETAIL,1,2) ='NG' THEN 1 ELSE 0 END AS BO_SOT1,CASE WHEN TEST_REUST2 <> ZTB_RNR_RESULT.RESULT_OK_NG AND SUBSTRING(RESULT_DETAIL,1,2) ='OK' THEN 1 ELSE 0 END AS BAT_NHAM2, CASE WHEN TEST_REUST2 <> ZTB_RNR_RESULT.RESULT_OK_NG AND SUBSTRING(RESULT_DETAIL,1,2) ='NG' THEN 1 ELSE 0 END AS BO_SOT2, ZTB_RNR_TEST.CTR_CD
    FROM 
    ZTB_RNR_TEST LEFT JOIN
    ZTB_RNR_RESULT ON ZTB_RNR_RESULT.TEST_ID = ZTB_RNR_TEST.TEST_ID AND ZTB_RNR_RESULT.TEST_NUMBER = ZTB_RNR_TEST.TEST_NUMBER AND ZTB_RNR_RESULT.TEST_NO = ZTB_RNR_TEST.TEST_NO AND ZTB_RNR_RESULT.CTR_CD = ZTB_RNR_TEST.CTR_CD
    LEFT JOIN ZTBEMPLINFO ON ZTB_RNR_TEST.TEST_EMPL_NO = ZTBEMPLINFO.EMPL_NO AND ZTB_RNR_TEST.CTR_CD = ZTBEMPLINFO.CTR_CD
    LEFT JOIN ZTBWORKPOSITION ON ZTBEMPLINFO.WORK_POSITION_CODE = ZTBWORKPOSITION.WORK_POSITION_CODE AND ZTBEMPLINFO.CTR_CD = ZTBWORKPOSITION.CTR_CD
    LEFT JOIN ZTBSUBDEPARTMENT ON ZTBWORKPOSITION.SUBDEPTCODE = ZTBSUBDEPARTMENT.SUBDEPTCODE AND ZTBWORKPOSITION.CTR_CD = ZTBSUBDEPARTMENT.CTR_CD
    ${condition}
    AND ZTB_RNR_TEST.CTR_CD='${DATA.CTR_CD}'
    ORDER BY ZTB_RNR_TEST.TEST_ID DESC, ZTB_RNR_TEST.TEST_EMPL_NO DESC,  ZTB_RNR_TEST.TEST_NUMBER ASC
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.RnRtheonhanvien = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = `WHERE SUBDEPTNAME is not null  `;
  if (DATA.ALLTIME === false) {
    condition += ` AND ZTB_RNR_TEST.TEST_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE}'`;
  }
  if (DATA.EMPL_NAME !== "") {
    condition += ` AND CONCAT(ZTBEMPLINFO.MIDLAST_NAME,' ',ZTBEMPLINFO.FIRST_NAME) LIKE N'%${DATA.EMPL_NAME}%'`;
  }
  if (DATA.FACTORY !== "ALL") {
    condition += ` AND CASE WHEN ZTBEMPLINFO.FACTORY_CODE=1 THEN 'NM1' ELSE 'NM2' END='${DATA.FACTORY}'`;
  }
  if (DATA.TEST_TYPE !== "ALL") {
    condition += ` AND ZTB_RNR_TEST.TEST_TYPE='${DATA.TEST_TYPE}'`;
  }
  if (DATA.TEST_ID !== "") {
    condition += ` AND ZTB_RNR_TEST.TEST_ID='${DATA.TEST_ID}'`;
  }
  let setpdQuery = `
  WITH RNR_DATA AS
  (
  SELECT ZTB_RNR_TEST.TEST_DATE, ZTB_RNR_TEST.TEST_ID, ZTB_RNR_TEST.TEST_NO, ZTB_RNR_TEST.TEST_TYPE, CASE WHEN ZTBEMPLINFO.FACTORY_CODE=1 THEN 'NM1' ELSE 'NM2' END AS FACTORY, CONCAT(ZTBEMPLINFO.MIDLAST_NAME,' ',ZTBEMPLINFO.FIRST_NAME) AS FULL_NAME, ZTBSUBDEPARTMENT.SUBDEPTNAME, ZTB_RNR_TEST.TEST_EMPL_NO, 
  ZTB_RNR_TEST.UPD_DATE, ZTB_RNR_TEST.UPD_EMPL, ZTB_RNR_TEST.TEST_NUMBER, ZTB_RNR_RESULT.TEST_NUMBER2, ZTB_RNR_RESULT.RESULT_OK_NG, ZTB_RNR_RESULT.RESULT_DETAIL, ZTB_RNR_TEST.TEST_RESULT1, ZTB_RNR_TEST.TEST_REUST2, CASE WHEN TEST_RESULT1 <> ZTB_RNR_RESULT.RESULT_OK_NG AND SUBSTRING(RESULT_DETAIL,1,2) ='NG' THEN 1 ELSE 0 END AS MIX1, CASE WHEN TEST_REUST2 <> ZTB_RNR_RESULT.RESULT_OK_NG AND SUBSTRING(RESULT_DETAIL,1,2) ='NG' THEN 1 ELSE 0 END AS MIX2,  CASE WHEN TEST_RESULT1 <> ZTB_RNR_RESULT.RESULT_OK_NG AND SUBSTRING(RESULT_DETAIL,1,2) ='OK' THEN 1 ELSE 0 END AS BAT_NHAM1,  CASE WHEN TEST_RESULT1 <> ZTB_RNR_RESULT.RESULT_OK_NG AND SUBSTRING(RESULT_DETAIL,1,2) ='NG' THEN 1 ELSE 0 END AS BO_SOT1,CASE WHEN TEST_REUST2 <> ZTB_RNR_RESULT.RESULT_OK_NG AND SUBSTRING(RESULT_DETAIL,1,2) ='OK' THEN 1 ELSE 0 END AS BAT_NHAM2, CASE WHEN TEST_REUST2 <> ZTB_RNR_RESULT.RESULT_OK_NG AND SUBSTRING(RESULT_DETAIL,1,2) ='NG' THEN 1 ELSE 0 END AS BO_SOT2, ZTB_RNR_TEST.CTR_CD
  FROM 
  ZTB_RNR_TEST LEFT JOIN
  ZTB_RNR_RESULT ON ZTB_RNR_RESULT.TEST_ID = ZTB_RNR_TEST.TEST_ID AND ZTB_RNR_RESULT.TEST_NUMBER = ZTB_RNR_TEST.TEST_NUMBER AND ZTB_RNR_RESULT.TEST_NO = ZTB_RNR_TEST.TEST_NO AND ZTB_RNR_RESULT.CTR_CD = ZTB_RNR_TEST.CTR_CD
  LEFT JOIN ZTBEMPLINFO ON ZTB_RNR_TEST.TEST_EMPL_NO = ZTBEMPLINFO.EMPL_NO AND ZTB_RNR_TEST.CTR_CD = ZTBEMPLINFO.CTR_CD
  LEFT JOIN ZTBWORKPOSITION ON ZTBEMPLINFO.WORK_POSITION_CODE = ZTBWORKPOSITION.WORK_POSITION_CODE AND ZTBEMPLINFO.CTR_CD = ZTBWORKPOSITION.CTR_CD
  LEFT JOIN ZTBSUBDEPARTMENT ON ZTBWORKPOSITION.SUBDEPTCODE = ZTBSUBDEPARTMENT.SUBDEPTCODE AND ZTBWORKPOSITION.CTR_CD = ZTBSUBDEPARTMENT.CTR_CD
  ${condition}
  AND ZTB_RNR_TEST.CTR_CD='${DATA.CTR_CD}'
  )
  SELECT FULL_NAME, SUBDEPTNAME, TEST_ID, TEST_TYPE, TEST_NO, SUM(CASE WHEN TEST_RESULT1 = RESULT_OK_NG THEN 1 ELSE 0 END) AS COUNT1, SUM(CASE WHEN TEST_REUST2 = RESULT_OK_NG THEN 1 ELSE 0 END) AS COUNT2, CASE WHEN TEST_TYPE='G_RNR' THEN 20 WHEN TEST_TYPE='Test_CC' THEN 30 ELSE 10 END AS SO_CAU, SUM(CASE WHEN TEST_RESULT1 = RESULT_OK_NG THEN 1 ELSE 0 END)*1.0/(CASE WHEN TEST_TYPE='G_RNR' THEN 20 WHEN TEST_TYPE='Test_CC' THEN 30 ELSE 10 END)*100 AS SCORE1,SUM(CASE WHEN TEST_REUST2 = RESULT_OK_NG THEN 1 ELSE 0 END)*1.0/(CASE WHEN TEST_TYPE='G_RNR' THEN 20 WHEN TEST_TYPE='Test_CC' THEN 30 ELSE 10 END)*100 AS SCORE2, SUM(MIX1) AS MIX1, SUM(MIX2) AS MIX2, SUM(BAT_NHAM1) AS BAT_NHAM1, SUM(BAT_NHAM2) AS BAT_NHAM2, SUM(BO_SOT1) AS BO_SOT1, SUM(BO_SOT2) AS BO_SOT2, CTR_CD
  FROM RNR_DATA
  WHERE CTR_CD='${DATA.CTR_CD}'
  GROUP BY FULL_NAME, SUBDEPTNAME, TEST_ID,TEST_TYPE, TEST_NO, CTR_CD
  ORDER BY  FULL_NAME ASC,TEST_ID DESC, TEST_NO ASC 
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.traOQCData = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = `WHERE DELIVERY_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE}'`;
  if (DATA.G_NAME !== "")
    condition += ` AND M100.G_NAME LIKE '%${DATA.G_NAME}%'`;
  if (DATA.G_CODE !== "") condition += ` AND M100.G_CODE = '${DATA.G_CODE}'`;
  if (DATA.PROD_REQUEST_NO !== "")
    condition += ` AND P400.PROD_REQUEST_NO = '${DATA.PROD_REQUEST_NO}'`;
  if (DATA.CUST_NAME_KD !== "")
    condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`;
  let setpdQuery = `
  SELECT OQC_ID, DELIVERY_DATE, SHIFT_CODE, ZTBFACTORY.FACTORY_NAME, CONCAT(ZTBEMPLINFO.MIDLAST_NAME,' ', ZTBEMPLINFO.FIRST_NAME)AS FULL_NAME, M110.CUST_NAME_KD, ZTB_OQC_TB.PROD_REQUEST_NO, ZTB_OQC_TB.PROCESS_LOT_NO, P501_A.M_LOT_NO, I222.LOTNCC, ZTB_OQC_TB.LABEL_ID,　ZTB_OQC_TB.PROD_REQUEST_DATE, P400.PROD_REQUEST_QTY, M100.G_CODE, M100.G_NAME, M100.G_NAME_KD, ZTB_OQC_TB.DELIVERY_QTY, ZTB_OQC_TB.SAMPLE_QTY, ZTB_OQC_TB.SAMPLE_NG_QTY,M100.PROD_LAST_PRICE, (M100.PROD_LAST_PRICE* ZTB_OQC_TB.DELIVERY_QTY) AS DELIVERY_AMOUNT, (M100.PROD_LAST_PRICE* ZTB_OQC_TB.SAMPLE_NG_QTY) AS SAMPLE_NG_AMOUNT, ZTB_OQC_TB.REMARK, COUNT(M100.G_CODE) OVER(PARTITION BY M100.G_CODE ORDER BY OQC_ID ASC) AS RUNNING_COUNT
  FROM 
  ZTB_OQC_TB 
  LEFT JOIN P400 ON (P400.PROD_REQUEST_DATE = ZTB_OQC_TB.PROD_REQUEST_DATE AND P400.PROD_REQUEST_NO = ZTB_OQC_TB.PROD_REQUEST_NO AND P400.CTR_CD = ZTB_OQC_TB.CTR_CD) 
  LEFT JOIN M100 ON (M100.G_CODE = P400.G_CODE AND M100.CTR_CD = P400.CTR_CD) 
  LEFT JOIN M110 ON (M110.CUST_CD = ZTB_OQC_TB.CUST_CD AND M110.CTR_CD = ZTB_OQC_TB.CTR_CD) 
  LEFT JOIN ZTBEMPLINFO ON (ZTB_OQC_TB.EMPL_NO = ZTBEMPLINFO.EMPL_NO AND ZTB_OQC_TB.CTR_CD = ZTBEMPLINFO.CTR_CD) 
  LEFT JOIN ZTBFACTORY ON (ZTBEMPLINFO.FACTORY_CODE = ZTBFACTORY.FACTORY_CODE AND ZTBEMPLINFO.CTR_CD = ZTBFACTORY.CTR_CD)
  LEFT JOIN (SELECT PROCESS_LOT_NO, M_LOT_NO, CTR_CD FROM P501) AS P501_A ON (ZTB_OQC_TB.PROCESS_LOT_NO = P501_A.PROCESS_LOT_NO AND ZTB_OQC_TB.CTR_CD = P501_A.CTR_CD)
  LEFT JOIN I222 ON (I222.M_LOT_NO = P501_A.M_LOT_NO AND I222.CTR_CD = P501_A.CTR_CD)
    ${condition}
    AND ZTB_OQC_TB.CTR_CD='${DATA.CTR_CD}'
    ORDER BY ZTB_OQC_TB.OQC_ID DESC
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.ngbyCustomerOQC = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = `WHERE DELIVERY_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE}'`;
  if (DATA.CUST_NAME_KD !== "")
    condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`;
  let setpdQuery = `
   WITH OQC_TB AS
  (
  SELECT OQC_ID, DELIVERY_DATE, SHIFT_CODE,  M110.CUST_NAME_KD, ZTB_OQC_TB.PROD_REQUEST_NO, ZTB_OQC_TB.PROCESS_LOT_NO, ZTB_OQC_TB.LABEL_ID,　ZTB_OQC_TB.PROD_REQUEST_DATE, P400.PROD_REQUEST_QTY, M100.G_CODE, M100.G_NAME, M100.G_NAME_KD, ZTB_OQC_TB.DELIVERY_QTY, ZTB_OQC_TB.SAMPLE_QTY, ZTB_OQC_TB.SAMPLE_NG_QTY,M100.PROD_LAST_PRICE, (M100.PROD_LAST_PRICE* ZTB_OQC_TB.DELIVERY_QTY) AS DELIVERY_AMOUNT, (M100.PROD_LAST_PRICE* ZTB_OQC_TB.SAMPLE_NG_QTY) AS SAMPLE_NG_AMOUNT, ZTB_OQC_TB.REMARK, COUNT(M100.G_CODE) OVER(PARTITION BY M100.G_CODE ORDER BY OQC_ID ASC) AS RUNNING_COUNT, ZTB_OQC_TB.CTR_CD
  FROM
  ZTB_OQC_TB
  LEFT JOIN P400 ON (P400.PROD_REQUEST_DATE = ZTB_OQC_TB.PROD_REQUEST_DATE AND P400.PROD_REQUEST_NO = ZTB_OQC_TB.PROD_REQUEST_NO AND P400.CTR_CD = ZTB_OQC_TB.CTR_CD)
  LEFT JOIN M100 ON (M100.G_CODE = P400.G_CODE AND M100.CTR_CD = P400.CTR_CD)
  LEFT JOIN M110 ON (M110.CUST_CD = ZTB_OQC_TB.CUST_CD AND M110.CTR_CD = ZTB_OQC_TB.CTR_CD)
  ${condition}
  AND ZTB_OQC_TB.CTR_CD='${DATA.CTR_CD}'
  ),
   OQCCUSTOMERTB AS 
  (
      SELECT CUST_NAME_KD, SUM(CASE WHEN SAMPLE_NG_QTY > 0 THEN 1 ELSE 0 END) AS NG_LOT, CTR_CD FROM OQC_TB  GROUP BY CUST_NAME_KD, CTR_CD
  ) 
  SELECT * FROM OQCCUSTOMERTB WHERE NG_LOT >0  ORDER BY NG_LOT DESC
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.ngbyProTypeOQC = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = `WHERE DELIVERY_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE}'`;
  if (DATA.CUST_NAME_KD !== "")
    condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`;
  let setpdQuery = `
    WITH OQC_TB AS
    (
    SELECT OQC_ID, DELIVERY_DATE, SHIFT_CODE, M110.CUST_NAME_KD, ZTB_OQC_TB.PROD_REQUEST_NO, ZTB_OQC_TB.PROCESS_LOT_NO, ZTB_OQC_TB.LABEL_ID, M100.PROD_TYPE, ZTB_OQC_TB.PROD_REQUEST_DATE, P400.PROD_REQUEST_QTY, M100.G_CODE, M100.G_NAME, M100.G_NAME_KD, ZTB_OQC_TB.DELIVERY_QTY, ZTB_OQC_TB.SAMPLE_QTY, ZTB_OQC_TB.SAMPLE_NG_QTY, M100.PROD_LAST_PRICE, (M100.PROD_LAST_PRICE* ZTB_OQC_TB.DELIVERY_QTY) AS DELIVERY_AMOUNT, (M100.PROD_LAST_PRICE* ZTB_OQC_TB.SAMPLE_NG_QTY) AS SAMPLE_NG_AMOUNT, ZTB_OQC_TB.REMARK, COUNT(M100.G_CODE) OVER(PARTITION BY M100.G_CODE ORDER BY OQC_ID ASC) AS RUNNING_COUNT, ZTB_OQC_TB.CTR_CD
    FROM 
    ZTB_OQC_TB 
    LEFT JOIN P400 ON (P400.PROD_REQUEST_DATE = ZTB_OQC_TB.PROD_REQUEST_DATE AND P400.PROD_REQUEST_NO = ZTB_OQC_TB.PROD_REQUEST_NO AND P400.CTR_CD = ZTB_OQC_TB.CTR_CD) 
    LEFT JOIN M100 ON (M100.G_CODE = P400.G_CODE AND M100.CTR_CD = P400.CTR_CD) 
    LEFT JOIN M110 ON (M110.CUST_CD = ZTB_OQC_TB.CUST_CD AND M110.CTR_CD = ZTB_OQC_TB.CTR_CD)  
    ${condition}    
    AND ZTB_OQC_TB.CTR_CD='${DATA.CTR_CD}'
    ),
    OQCPRODTYPETB AS 
    (
    SELECT PROD_TYPE, SUM(CASE WHEN SAMPLE_NG_QTY > 0 THEN 1 ELSE 0 END) AS NG_LOT, CTR_CD FROM OQC_TB GROUP BY PROD_TYPE, CTR_CD
    ) 
    SELECT * FROM OQCPRODTYPETB WHERE NG_LOT >0 ORDER BY NG_LOT DESC
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.dailyOQCTrendingData = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = `WHERE DELIVERY_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE}'`;
  if (DATA.CUST_NAME_KD !== "")
    condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`;
  let setpdQuery = `
   WITH OQC_TB AS
  (
  SELECT OQC_ID, DELIVERY_DATE, SHIFT_CODE, M110.CUST_NAME_KD, ZTB_OQC_TB.PROD_REQUEST_NO, ZTB_OQC_TB.PROCESS_LOT_NO, ZTB_OQC_TB.LABEL_ID, ZTB_OQC_TB.PROD_REQUEST_DATE, P400.PROD_REQUEST_QTY, M100.G_CODE, M100.G_NAME, M100.G_NAME_KD, ZTB_OQC_TB.DELIVERY_QTY, ZTB_OQC_TB.SAMPLE_QTY, ZTB_OQC_TB.SAMPLE_NG_QTY, M100.PROD_LAST_PRICE, (M100.PROD_LAST_PRICE* ZTB_OQC_TB.DELIVERY_QTY) AS DELIVERY_AMOUNT, (M100.PROD_LAST_PRICE* ZTB_OQC_TB.SAMPLE_NG_QTY) AS SAMPLE_NG_AMOUNT, ZTB_OQC_TB.REMARK, COUNT(M100.G_CODE) OVER(PARTITION BY M100.G_CODE ORDER BY OQC_ID ASC) AS RUNNING_COUNT, ZTB_OQC_TB.CTR_CD
  FROM 
  ZTB_OQC_TB 
  LEFT JOIN P400 ON (P400.PROD_REQUEST_DATE = ZTB_OQC_TB.PROD_REQUEST_DATE AND P400.PROD_REQUEST_NO = ZTB_OQC_TB.PROD_REQUEST_NO AND P400.CTR_CD = ZTB_OQC_TB.CTR_CD) 
  LEFT JOIN M100 ON (M100.G_CODE = P400.G_CODE AND M100.CTR_CD = P400.CTR_CD) 
  LEFT JOIN M110 ON (M110.CUST_CD = ZTB_OQC_TB.CUST_CD AND M110.CTR_CD = ZTB_OQC_TB.CTR_CD)
  ${condition}
  AND ZTB_OQC_TB.CTR_CD='${DATA.CTR_CD}'
  )
  SELECT DELIVERY_DATE, COUNT(OQC_ID) AS TOTAL_LOT, SUM(CASE WHEN SAMPLE_NG_QTY > 0 THEN 1 ELSE 0 END) AS NG_LOT FROM OQC_TB GROUP BY DELIVERY_DATE
  ORDER BY DELIVERY_DATE DESC
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.weeklyOQCTrendingData = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = `WHERE DELIVERY_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE}'`;
  if (DATA.CUST_NAME_KD !== "")
    condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`;
  let setpdQuery = `
  WITH OQC_TB AS
  (
  SELECT OQC_ID, DELIVERY_DATE, YEAR(DELIVERY_DATE) AS DELIVERY_YEAR, DATEPART(WEEK, DELIVERY_DATE) AS DELIVERY_WEEK, SHIFT_CODE,  M110.CUST_NAME_KD, ZTB_OQC_TB.PROD_REQUEST_NO, ZTB_OQC_TB.PROCESS_LOT_NO, ZTB_OQC_TB.LABEL_ID,　ZTB_OQC_TB.PROD_REQUEST_DATE, P400.PROD_REQUEST_QTY, M100.G_CODE, M100.G_NAME, M100.G_NAME_KD, ZTB_OQC_TB.DELIVERY_QTY, ZTB_OQC_TB.SAMPLE_QTY, ZTB_OQC_TB.SAMPLE_NG_QTY,M100.PROD_LAST_PRICE, (M100.PROD_LAST_PRICE* ZTB_OQC_TB.DELIVERY_QTY) AS DELIVERY_AMOUNT, (M100.PROD_LAST_PRICE* ZTB_OQC_TB.SAMPLE_NG_QTY) AS SAMPLE_NG_AMOUNT, ZTB_OQC_TB.REMARK, COUNT(M100.G_CODE) OVER(PARTITION BY M100.G_CODE ORDER BY OQC_ID ASC) AS RUNNING_COUNT, ZTB_OQC_TB.CTR_CD
  FROM 
  ZTB_OQC_TB 
  LEFT JOIN P400 ON (P400.PROD_REQUEST_DATE = ZTB_OQC_TB.PROD_REQUEST_DATE AND P400.PROD_REQUEST_NO = ZTB_OQC_TB.PROD_REQUEST_NO AND P400.CTR_CD = ZTB_OQC_TB.CTR_CD) 
  LEFT JOIN M100 ON (M100.G_CODE = P400.G_CODE AND M100.CTR_CD = P400.CTR_CD) 
  LEFT JOIN M110 ON (M110.CUST_CD = ZTB_OQC_TB.CUST_CD AND M110.CTR_CD = ZTB_OQC_TB.CTR_CD)
  ${condition}
  AND ZTB_OQC_TB.CTR_CD='${DATA.CTR_CD}'
  )
  SELECT DELIVERY_YEAR, DELIVERY_WEEK, CONCAT( DELIVERY_YEAR,'_', DELIVERY_WEEK) AS DELIVERY_YW,COUNT(OQC_ID) AS TOTAL_LOT, SUM(CASE WHEN SAMPLE_NG_QTY > 0 THEN 1 ELSE 0 END) AS NG_LOT FROM OQC_TB GROUP BY DELIVERY_YEAR, DELIVERY_WEEK ORDER BY DELIVERY_YEAR DESC, DELIVERY_WEEK DESC
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.monthlyOQCTrendingData = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = `WHERE DELIVERY_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE}'`;
  if (DATA.CUST_NAME_KD !== "")
    condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`;
  let setpdQuery = `
  WITH OQC_TB AS
  (
  SELECT OQC_ID, DELIVERY_DATE, YEAR(DELIVERY_DATE) AS DELIVERY_YEAR, MONTH(DELIVERY_DATE) AS DELIVERY_MONTH, SHIFT_CODE,  M110.CUST_NAME_KD, ZTB_OQC_TB.PROD_REQUEST_NO, ZTB_OQC_TB.PROCESS_LOT_NO, ZTB_OQC_TB.LABEL_ID, ZTB_OQC_TB.PROD_REQUEST_DATE, P400.PROD_REQUEST_QTY, M100.G_CODE, M100.G_NAME, M100.G_NAME_KD, ZTB_OQC_TB.DELIVERY_QTY, ZTB_OQC_TB.SAMPLE_QTY, ZTB_OQC_TB.SAMPLE_NG_QTY,M100.PROD_LAST_PRICE, (M100.PROD_LAST_PRICE* ZTB_OQC_TB.DELIVERY_QTY) AS DELIVERY_AMOUNT, (M100.PROD_LAST_PRICE* ZTB_OQC_TB.SAMPLE_NG_QTY) AS SAMPLE_NG_AMOUNT, ZTB_OQC_TB.REMARK, COUNT(M100.G_CODE) OVER(PARTITION BY M100.G_CODE ORDER BY OQC_ID ASC) AS RUNNING_COUNT, ZTB_OQC_TB.CTR_CD
  FROM 
  ZTB_OQC_TB 
  LEFT JOIN P400 ON (P400.PROD_REQUEST_DATE = ZTB_OQC_TB.PROD_REQUEST_DATE AND P400.PROD_REQUEST_NO = ZTB_OQC_TB.PROD_REQUEST_NO AND P400.CTR_CD = ZTB_OQC_TB.CTR_CD) 
  LEFT JOIN M100 ON (M100.G_CODE = P400.G_CODE AND M100.CTR_CD = P400.CTR_CD) 
  LEFT JOIN M110 ON (M110.CUST_CD = ZTB_OQC_TB.CUST_CD AND M110.CTR_CD = ZTB_OQC_TB.CTR_CD)
  ${condition}
  AND ZTB_OQC_TB.CTR_CD='${DATA.CTR_CD}'
  )
  SELECT DELIVERY_YEAR, DELIVERY_MONTH, CONCAT( DELIVERY_YEAR,'_', DELIVERY_MONTH) AS DELIVERY_YM,COUNT(OQC_ID) AS TOTAL_LOT, SUM(CASE WHEN SAMPLE_NG_QTY > 0 THEN 1 ELSE 0 END) AS NG_LOT FROM OQC_TB GROUP BY DELIVERY_YEAR, DELIVERY_MONTH ORDER BY DELIVERY_YEAR DESC, DELIVERY_MONTH DESC
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.yearlyOQCTrendingData = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = `WHERE DELIVERY_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE}'`;
  if (DATA.CUST_NAME_KD !== "")
    condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`;
  let setpdQuery = `
  WITH OQC_TB AS
  (
  SELECT OQC_ID, DELIVERY_DATE, YEAR(DELIVERY_DATE) AS DELIVERY_YEAR, MONTH(DELIVERY_DATE) AS DELIVERY_MONTH, SHIFT_CODE,  M110.CUST_NAME_KD, ZTB_OQC_TB.PROD_REQUEST_NO, ZTB_OQC_TB.PROCESS_LOT_NO, ZTB_OQC_TB.LABEL_ID,　ZTB_OQC_TB.PROD_REQUEST_DATE, P400.PROD_REQUEST_QTY, M100.G_CODE, M100.G_NAME, M100.G_NAME_KD, ZTB_OQC_TB.DELIVERY_QTY, ZTB_OQC_TB.SAMPLE_QTY, ZTB_OQC_TB.SAMPLE_NG_QTY,M100.PROD_LAST_PRICE, (M100.PROD_LAST_PRICE* ZTB_OQC_TB.DELIVERY_QTY) AS DELIVERY_AMOUNT, (M100.PROD_LAST_PRICE* ZTB_OQC_TB.SAMPLE_NG_QTY) AS SAMPLE_NG_AMOUNT, ZTB_OQC_TB.REMARK, COUNT(M100.G_CODE) OVER(PARTITION BY M100.G_CODE ORDER BY OQC_ID ASC) AS RUNNING_COUNT, ZTB_OQC_TB.CTR_CD
  FROM 
  ZTB_OQC_TB 
  LEFT JOIN P400 ON (P400.PROD_REQUEST_DATE = ZTB_OQC_TB.PROD_REQUEST_DATE AND P400.PROD_REQUEST_NO = ZTB_OQC_TB.PROD_REQUEST_NO AND P400.CTR_CD = ZTB_OQC_TB.CTR_CD) 
  LEFT JOIN M100 ON (M100.G_CODE = P400.G_CODE AND M100.CTR_CD = P400.CTR_CD) 
  LEFT JOIN M110 ON (M110.CUST_CD = ZTB_OQC_TB.CUST_CD AND M110.CTR_CD = ZTB_OQC_TB.CTR_CD)
  ${condition}
  AND ZTB_OQC_TB.CTR_CD='${DATA.CTR_CD}'
  )
  SELECT DELIVERY_YEAR, COUNT(OQC_ID) AS TOTAL_LOT, SUM(CASE WHEN SAMPLE_NG_QTY > 0 THEN 1 ELSE 0 END) AS NG_LOT FROM OQC_TB GROUP BY DELIVERY_YEAR ORDER BY DELIVERY_YEAR DESC
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.checkktdtc = async (req, res, DATA) => {
  let kqua;
  let query = `SELECT * FROM (SELECT  P501.CTR_CD,P500.M_CODE, SUBSTRING(P501.M_LOT_NO,0,7) AS LOT_TO, M090.WIDTH_CD FROM P501 JOIN P500 ON (P501.PROCESS_IN_DATE =P500.PROCESS_IN_DATE AND P501.PROCESS_IN_NO =P500.PROCESS_IN_NO AND P501.PROCESS_IN_SEQ =P500.PROCESS_IN_SEQ AND P501.CTR_CD =P500.CTR_CD) JOIN M090 ON  (M090.M_CODE = P500.M_CODE AND M090.CTR_CD = P500.CTR_CD) WHERE P501.CTR_CD='${DATA.CTR_CD}' AND P501.PROCESS_LOT_NO='${DATA.PROCESS_LOT_NO}') AS AA JOIN (SELECT CTR_CD,TRANGTHAI, M_CODE, SIZE, LOTCMS FROM NHAP_NVL WHERE CTR_CD='${DATA.CTR_CD}') AS BB ON (AA.LOT_TO = BB.LOTCMS AND AA.M_CODE =  BB.M_CODE AND AA.WIDTH_CD = BB.SIZE AND AA.CTR_CD = BB.CTR_CD) WHERE AA.CTR_CD='${DATA.CTR_CD}'`;
  ////console.log(query);
  kqua = await queryDB(query);
  res.send(kqua);
};
exports.checkPlanIdChecksheet = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
  SELECT * FROM  ZTBPQC1TABLE WHERE CTR_CD='${DATA.CTR_CD}' AND PLAN_ID='${DATA.PLAN_ID}' 
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.insert_pqc1 = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `INSERT INTO ZTBPQC1TABLE (CTR_CD,PROCESS_LOT_NO,LINEQC_PIC,PROD_PIC,PROD_LEADER,STEPS,CAVITY,SETTING_OK_TIME,FACTORY,REMARK,INS_DATE,REMARK2,PROD_REQUEST_NO,G_CODE,PLAN_ID,PROCESS_NUMBER,LINE_NO) VALUES('${DATA.CTR_CD}','${DATA.PROCESS_LOT_NO}','${DATA.LINEQC_PIC}','${DATA.PROD_PIC}','${DATA.PROD_LEADER}','${DATA.STEPS}','${DATA.CAVITY}','${DATA.SETTING_OK_TIME}','${DATA.FACTORY}','${DATA.REMARK}',GETDATE(),'${DATA.REMARK}','${DATA.PROD_REQUEST_NO}','${DATA.G_CODE}','${DATA.PLAN_ID}','${DATA.PROCESS_NUMBER}','${DATA.LINE_NO}')`;
  console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.update_checksheet_image_status = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
          UPDATE  ZTBPQC1TABLE SET IMG_${DATA.STT}= 'Y' WHERE CTR_CD='${DATA.CTR_CD}' AND PLAN_ID='${DATA.PLAN_ID}' 
          `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.pqcdailyppm = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = `WHERE ZTBPQC1TABLE.SETTING_OK_TIME BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE} 23:59:59' `;
  if (DATA.codeArray.length === 1) {
    condition += ` AND ZTBPQC1TABLE.G_CODE='${DATA.codeArray[0]}'`;
  } else if (DATA.codeArray.length > 1) {
    let codeString = ``;
    let codeArStr = DATA.codeArray.map((ele, index) => `'${ele}'`).join(",");
    condition += ` AND ZTBPQC1TABLE.G_CODE IN (${codeArStr})`;
  }
  if (DATA.CUST_NAME_KD !== "") {
    condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`;
  }
  let setpdQuery = `
  WITH PQC_DATA AS
  (
    SELECT CONCAT(YEAR(ZTBPQC1TABLE.SETTING_OK_TIME),'_', DATEPART(ISO_WEEK, ZTBPQC1TABLE.SETTING_OK_TIME)) AS SETTING_YW, CONCAT(YEAR(ZTBPQC1TABLE.SETTING_OK_TIME),'_', MONTH(ZTBPQC1TABLE.SETTING_OK_TIME)) AS SETTING_YM, CAST(ZTBPQC1TABLE.SETTING_OK_TIME as date)  AS SETTING_DATE, YEAR(ZTBPQC1TABLE.SETTING_OK_TIME) AS SETTING_YEAR, MONTH(ZTBPQC1TABLE.SETTING_OK_TIME) AS SETTING_MONTH, DATEPART(ISO_WEEK, ZTBPQC1TABLE.SETTING_OK_TIME) AS SETTING_WEEK,   ZTBPQC1TABLE.PQC1_ID, PQC3_ID, isnull(M100.PROD_LAST_PRICE,0) * isnull(ZTBPQC1TABLE.INSPECT_SAMPLE_QTY,0) AS INSPECT_AMOUNT, ZTBPQC1TABLE.CTR_CD FROM ZTBPQC1TABLE 
    LEFT JOIN ZTBPQC3TABLE ON (ZTBPQC1TABLE.PQC1_ID = ZTBPQC3TABLE.PQC1_ID AND ZTBPQC1TABLE.CTR_CD = ZTBPQC3TABLE.CTR_CD)
    LEFT JOIN M100 ON M100.G_CODE = ZTBPQC1TABLE.G_CODE AND M100.CTR_CD = ZTBPQC1TABLE.CTR_CD
    LEFT JOIN M110 ON M110.CUST_CD = M100.CUST_CD AND M110.CTR_CD = M100.CTR_CD
  ${condition} AND ZTBPQC1TABLE.CTR_CD='${DATA.CTR_CD}'
  )
  SELECT SETTING_DATE, COUNT(PQC1_ID) AS TOTAL_LOT, COUNT(PQC3_ID) AS NG_LOT,COUNT(PQC3_ID)*1.0/COUNT(PQC1_ID) AS NG_RATE,  SUM(INSPECT_AMOUNT) AS  INSPECT_AMOUNT FROM PQC_DATA 
  GROUP BY SETTING_DATE 
  ORDER BY SETTING_DATE DESC
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.pqcweeklyppm = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = `WHERE ZTBPQC1TABLE.SETTING_OK_TIME BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE} 23:59:59' `;
  if (DATA.codeArray.length === 1) {
    condition += ` AND ZTBPQC1TABLE.G_CODE='${DATA.codeArray[0]}'`;
  } else if (DATA.codeArray.length > 1) {
    let codeString = ``;
    let codeArStr = DATA.codeArray.map((ele, index) => `'${ele}'`).join(",");
    condition += ` AND ZTBPQC1TABLE.G_CODE IN (${codeArStr})`;
  }
  if (DATA.CUST_NAME_KD !== "") {
    condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`;
  }
  let setpdQuery = `
  WITH PQC_DATA AS
  (
    SELECT CONCAT(YEAR(ZTBPQC1TABLE.SETTING_OK_TIME),'_', DATEPART(ISO_WEEK, ZTBPQC1TABLE.SETTING_OK_TIME)) AS SETTING_YW, CONCAT(YEAR(ZTBPQC1TABLE.SETTING_OK_TIME),'_', MONTH(ZTBPQC1TABLE.SETTING_OK_TIME)) AS SETTING_YM, CAST(ZTBPQC1TABLE.SETTING_OK_TIME as date)  AS SETTING_DATE, YEAR(ZTBPQC1TABLE.SETTING_OK_TIME) AS SETTING_YEAR, MONTH(ZTBPQC1TABLE.SETTING_OK_TIME) AS SETTING_MONTH, DATEPART(ISO_WEEK, ZTBPQC1TABLE.SETTING_OK_TIME) AS SETTING_WEEK,   ZTBPQC1TABLE.PQC1_ID, PQC3_ID, isnull(M100.PROD_LAST_PRICE,0) * isnull(ZTBPQC1TABLE.INSPECT_SAMPLE_QTY,0) AS INSPECT_AMOUNT, ZTBPQC1TABLE.CTR_CD FROM ZTBPQC1TABLE 
    LEFT JOIN ZTBPQC3TABLE ON (ZTBPQC1TABLE.PQC1_ID = ZTBPQC3TABLE.PQC1_ID AND ZTBPQC1TABLE.CTR_CD = ZTBPQC3TABLE.CTR_CD)
    LEFT JOIN M100 ON M100.G_CODE = ZTBPQC1TABLE.G_CODE AND M100.CTR_CD = ZTBPQC1TABLE.CTR_CD
    LEFT JOIN M110 ON M110.CUST_CD = M100.CUST_CD AND M110.CTR_CD = M100.CTR_CD
  ${condition} AND ZTBPQC1TABLE.CTR_CD='${DATA.CTR_CD}'
  )
  SELECT CONCAT(SETTING_YEAR, '_', SETTING_WEEK) AS SETTING_YW, SETTING_YEAR, SETTING_WEEK, COUNT(PQC1_ID) AS TOTAL_LOT, COUNT(PQC3_ID) AS NG_LOT, COUNT(PQC3_ID)*1.0/COUNT(PQC1_ID) AS NG_RATE, SUM(INSPECT_AMOUNT) AS  INSPECT_AMOUNT FROM PQC_DATA GROUP BY SETTING_YEAR, SETTING_WEEK 
  ORDER BY SETTING_YEAR DESC, SETTING_WEEK DESC
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.pqcmonthlyppm = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = `WHERE ZTBPQC1TABLE.SETTING_OK_TIME BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE} 23:59:59' `;
  if (DATA.codeArray.length === 1) {
    condition += ` AND ZTBPQC1TABLE.G_CODE='${DATA.codeArray[0]}'`;
  } else if (DATA.codeArray.length > 1) {
    let codeString = ``;
    let codeArStr = DATA.codeArray.map((ele, index) => `'${ele}'`).join(",");
    condition += ` AND ZTBPQC1TABLE.G_CODE IN (${codeArStr})`;
  }
  if (DATA.CUST_NAME_KD !== "") {
    condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`;
  }
  let setpdQuery = `
  WITH PQC_DATA AS
  (
  SELECT CONCAT(YEAR(ZTBPQC1TABLE.SETTING_OK_TIME),'_', DATEPART(ISO_WEEK, ZTBPQC1TABLE.SETTING_OK_TIME)) AS SETTING_YW, CONCAT(YEAR(ZTBPQC1TABLE.SETTING_OK_TIME),'_', MONTH(ZTBPQC1TABLE.SETTING_OK_TIME)) AS SETTING_YM, CAST(ZTBPQC1TABLE.SETTING_OK_TIME as date)  AS SETTING_DATE, YEAR(ZTBPQC1TABLE.SETTING_OK_TIME) AS SETTING_YEAR, MONTH(ZTBPQC1TABLE.SETTING_OK_TIME) AS SETTING_MONTH, DATEPART(ISO_WEEK, ZTBPQC1TABLE.SETTING_OK_TIME) AS SETTING_WEEK,   ZTBPQC1TABLE.PQC1_ID, PQC3_ID, isnull(M100.PROD_LAST_PRICE,0) * isnull(ZTBPQC1TABLE.INSPECT_SAMPLE_QTY,0) AS INSPECT_AMOUNT, ZTBPQC1TABLE.CTR_CD FROM ZTBPQC1TABLE 
  LEFT JOIN ZTBPQC3TABLE ON (ZTBPQC1TABLE.PQC1_ID = ZTBPQC3TABLE.PQC1_ID AND ZTBPQC1TABLE.CTR_CD = ZTBPQC3TABLE.CTR_CD)
  LEFT JOIN M100 ON M100.G_CODE = ZTBPQC1TABLE.G_CODE AND M100.CTR_CD = ZTBPQC1TABLE.CTR_CD
  LEFT JOIN M110 ON M110.CUST_CD = M100.CUST_CD AND M110.CTR_CD = M100.CTR_CD
  ${condition} AND ZTBPQC1TABLE.CTR_CD='${DATA.CTR_CD}'
  )
  SELECT CONCAT(SETTING_YEAR, '_', SETTING_MONTH) AS SETTING_YM, SETTING_YEAR, SETTING_MONTH, COUNT(PQC1_ID) AS TOTAL_LOT, COUNT(PQC3_ID) AS NG_LOT, COUNT(PQC3_ID)*1.0/COUNT(PQC1_ID) AS NG_RATE, SUM(INSPECT_AMOUNT) AS  INSPECT_AMOUNT FROM PQC_DATA GROUP BY SETTING_YEAR, SETTING_MONTH
  ORDER BY SETTING_YEAR DESC, SETTING_MONTH DESC
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.pqcyearlyppm = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = `WHERE ZTBPQC1TABLE.SETTING_OK_TIME BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE} 23:59:59' `;
  if (DATA.codeArray.length === 1) {
    condition += ` AND ZTBPQC1TABLE.G_CODE='${DATA.codeArray[0]}'`;
  } else if (DATA.codeArray.length > 1) {
    let codeString = ``;
    let codeArStr = DATA.codeArray.map((ele, index) => `'${ele}'`).join(",");
    condition += ` AND ZTBPQC1TABLE.G_CODE IN (${codeArStr})`;
  }
  if (DATA.CUST_NAME_KD !== "") {
    condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`;
  }
  let setpdQuery = `
  WITH PQC_DATA AS
  (
  SELECT CONCAT(YEAR(ZTBPQC1TABLE.SETTING_OK_TIME),'_', DATEPART(ISO_WEEK, ZTBPQC1TABLE.SETTING_OK_TIME)) AS SETTING_YW, CONCAT(YEAR(ZTBPQC1TABLE.SETTING_OK_TIME),'_', MONTH(ZTBPQC1TABLE.SETTING_OK_TIME)) AS SETTING_YM, CAST(ZTBPQC1TABLE.SETTING_OK_TIME as date)  AS SETTING_DATE, YEAR(ZTBPQC1TABLE.SETTING_OK_TIME) AS SETTING_YEAR, MONTH(ZTBPQC1TABLE.SETTING_OK_TIME) AS SETTING_MONTH, DATEPART(ISO_WEEK, ZTBPQC1TABLE.SETTING_OK_TIME) AS SETTING_WEEK,   ZTBPQC1TABLE.PQC1_ID, PQC3_ID, isnull(M100.PROD_LAST_PRICE,0) * isnull(ZTBPQC1TABLE.INSPECT_SAMPLE_QTY,0) AS INSPECT_AMOUNT, ZTBPQC1TABLE.CTR_CD FROM ZTBPQC1TABLE 
  LEFT JOIN ZTBPQC3TABLE ON (ZTBPQC1TABLE.PQC1_ID = ZTBPQC3TABLE.PQC1_ID AND ZTBPQC1TABLE.CTR_CD = ZTBPQC3TABLE.CTR_CD)
  LEFT JOIN M100 ON M100.G_CODE = ZTBPQC1TABLE.G_CODE AND M100.CTR_CD = ZTBPQC1TABLE.CTR_CD
  LEFT JOIN M110 ON M110.CUST_CD = M100.CUST_CD AND M110.CTR_CD = M100.CTR_CD
  ${condition} AND ZTBPQC1TABLE.CTR_CD='${DATA.CTR_CD}'
  )
  SELECT SETTING_YEAR,  COUNT(PQC1_ID) AS TOTAL_LOT, COUNT(PQC3_ID) AS NG_LOT, COUNT(PQC3_ID)*1.0/COUNT(PQC1_ID) AS NG_RATE, SUM(INSPECT_AMOUNT) AS  INSPECT_AMOUNT FROM PQC_DATA GROUP BY SETTING_YEAR
  ORDER BY SETTING_YEAR DESC
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.getPQCSummary = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = `WHERE 1=1 `;
  if (DATA.codeArray.length === 1) {
    condition += ` AND ZTBINSPECTNGTB.G_CODE='${DATA.codeArray[0]}'`;
  } else if (DATA.codeArray.length > 1) {
    let codeString = ``;
    let codeArStr = DATA.codeArray.map((ele, index) => `'${ele}'`).join(",");
    condition += ` AND ZTBINSPECTNGTB.G_CODE IN (${codeArStr})`;
  }
  if (DATA.CUST_NAME_KD !== "") {
    condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`;
  }
  let setpdQuery = `
  WITH PQC_DATA AS
  (
  SELECT CONCAT(YEAR(ZTBPQC1TABLE.SETTING_OK_TIME),'_', DATEPART(ISO_WEEK, ZTBPQC1TABLE.SETTING_OK_TIME)) AS SETTING_YW, CONCAT(YEAR(ZTBPQC1TABLE.SETTING_OK_TIME),'_', MONTH(ZTBPQC1TABLE.SETTING_OK_TIME)) AS SETTING_YM, CAST(ZTBPQC1TABLE.SETTING_OK_TIME as date)  AS SETTING_DATE, YEAR(ZTBPQC1TABLE.SETTING_OK_TIME) AS SETTING_YEAR, MONTH(ZTBPQC1TABLE.SETTING_OK_TIME) AS SETTING_MONTH, DATEPART(ISO_WEEK, ZTBPQC1TABLE.SETTING_OK_TIME) AS SETTING_WEEK,   ZTBPQC1TABLE.PQC1_ID, PQC3_ID, isnull(M100.PROD_LAST_PRICE,0) * isnull(ZTBPQC1TABLE.INSPECT_SAMPLE_QTY,0) AS INSPECT_AMOUNT, ZTBPQC1TABLE.CTR_CD FROM ZTBPQC1TABLE 
  LEFT JOIN ZTBPQC3TABLE ON (ZTBPQC1TABLE.PQC1_ID = ZTBPQC3TABLE.PQC1_ID AND ZTBPQC1TABLE.CTR_CD = ZTBPQC3TABLE.CTR_CD)
  LEFT JOIN M100 ON M100.G_CODE = ZTBPQC1TABLE.G_CODE AND M100.CTR_CD = ZTBPQC1TABLE.CTR_CD
  LEFT JOIN M110 ON M110.CUST_CD = M100.CUST_CD AND M110.CTR_CD = M100.CTR_CD
  ${condition}
  )
  SELECT COUNT(PQC1_ID) AS TOTAL_LOT, COUNT(PQC3_ID) AS NG_LOT,COUNT(PQC3_ID)*1.0/COUNT(PQC1_ID) AS NG_RATE, SUM(INSPECT_AMOUNT) AS  INSPECT_AMOUNT FROM PQC_DATA
  WHERE PQC_DATA.SETTING_DATE  BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE}' AND PQC_DATA.CTR_CD='${DATA.CTR_CD}'
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.dailyPQCDefectTrending = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = `WHERE ERR_CODE is not null AND OCCURR_TIME BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE} 23:59:59' `;
  if (DATA.codeArray.length === 1) {
    condition += ` AND ZTBPQC3TABLE.G_CODE='${DATA.codeArray[0]}'`;
  } else if (DATA.codeArray.length > 1) {
    let codeString = ``;
    let codeArStr = DATA.codeArray.map((ele, index) => `'${ele}'`).join(",");
    condition += ` AND ZTBPQC3TABLE.G_CODE IN (${codeArStr})`;
  }
  if (DATA.CUST_NAME_KD !== "") {
    condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`;
  }
  let setpdQuery = `
  WITH PQC3_DATA AS
  (
  SELECT CAST(OCCURR_TIME AS date) AS OCCURR_TIME, ERR_CODE, SUM(INSPECT_QTY) AS INSPECT_QTY, SUM(DEFECT_QTY) AS DEFECT_QTY, SUM(DEFECT_QTY)*1.0/ SUM(INSPECT_QTY) AS NG_RATE FROM ZTBPQC3TABLE 
  LEFT JOIN P400 ON P400.PROD_REQUEST_NO = ZTBPQC3TABLE.PROD_REQUEST_NO AND P400.CTR_CD = ZTBPQC3TABLE.CTR_CD
  LEFT JOIN M110 ON M110.CUST_CD = P400.CUST_CD AND M110.CTR_CD = P400.CTR_CD
  ${condition}
  AND ZTBPQC3TABLE.CTR_CD='${DATA.CTR_CD}'
  GROUP BY CAST(OCCURR_TIME AS date), ERR_CODE
  )
  SELECT INSPECT_DATE,isnull([ERR1],0) AS ERR1,isnull([ERR2],0) AS ERR2,isnull([ERR3],0) AS ERR3,isnull([ERR4],0) AS ERR4,isnull([ERR5],0) AS ERR5,isnull([ERR6],0) AS ERR6,isnull([ERR7],0) AS ERR7,isnull([ERR8],0) AS ERR8,isnull([ERR9],0) AS ERR9,isnull([ERR10],0) AS ERR10,isnull([ERR11],0) AS ERR11,isnull([ERR12],0) AS ERR12,isnull([ERR13],0) AS ERR13,isnull([ERR14],0) AS ERR14,isnull([ERR15],0) AS ERR15,isnull([ERR16],0) AS ERR16,isnull([ERR17],0) AS ERR17,isnull([ERR18],0) AS ERR18,isnull([ERR19],0) AS ERR19,isnull([ERR20],0) AS ERR20,isnull([ERR21],0) AS ERR21,isnull([ERR22],0) AS ERR22,isnull([ERR23],0) AS ERR23,isnull([ERR24],0) AS ERR24,isnull([ERR25],0) AS ERR25,isnull([ERR26],0) AS ERR26,isnull([ERR27],0) AS ERR27,isnull([ERR28],0) AS ERR28,isnull([ERR29],0) AS ERR29,isnull([ERR30],0) AS ERR30,isnull([ERR31],0) AS ERR31,isnull([ERR32],0) AS ERR32
FROM 
  (SELECT OCCURR_TIME AS INSPECT_DATE,ERR_CODE, NG_RATE FROM PQC3_DATA) AS src
  PIVOT
  ( SUM(NG_RATE)
    FOR ERR_CODE IN ([ERR1],[ERR2],[ERR3],[ERR4],[ERR5],[ERR6],[ERR7],[ERR8],[ERR9],[ERR10],[ERR11],[ERR12],[ERR13],[ERR14],[ERR15],[ERR16],[ERR17],[ERR18],[ERR19],[ERR20],[ERR21],[ERR22],[ERR23],[ERR24],[ERR25],[ERR26],[ERR27],[ERR28],[ERR29],[ERR30],[ERR31],[ERR32])
  ) as pvtb
  ORDER BY pvtb.INSPECT_DATE DESC
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.trapqc3data = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `SELECT M110.CUST_NAME_KD,M100.DESCR, CONCAT(datepart(YEAR,ZTBPQC3TABLE.OCCURR_TIME),'_',datepart(ISO_WEEK,DATEADD(day,2,ZTBPQC3TABLE.OCCURR_TIME))) AS YEAR_WEEK,ZTBPQC3TABLE.PQC3_ID,ZTBPQC3TABLE.PQC1_ID,ZTBPQC1TABLE.FACTORY,ZTBPQC3TABLE.PROD_REQUEST_NO,P400.PROD_REQUEST_DATE,ZTBPQC3TABLE.PROCESS_LOT_NO,ZTBPQC3TABLE.G_CODE,M100.G_NAME,M100.G_NAME_KD,M100.PROD_LAST_PRICE,ZTBPQC3TABLE.LINEQC_PIC,ZTBPQC1TABLE.PROD_PIC,ZTBPQC1TABLE.PROD_LEADER,ZTBPQC1TABLE.LINE_NO,ZTBPQC3TABLE.OCCURR_TIME,ZTBPQC3TABLE.INSPECT_QTY,ZTBPQC3TABLE.DEFECT_QTY,(ZTBPQC3TABLE.DEFECT_QTY *M100.PROD_LAST_PRICE ) AS DEFECT_AMOUNT,ZTBPQC3TABLE.DEFECT_PHENOMENON,ZTBPQC3TABLE.DEFECT_IMAGE_LINK,ZTBPQC3TABLE.REMARK,ZTBPQC3TABLE.WORST5,ZTBPQC3TABLE.WORST5_MONTH, ZTBPQC3TABLE.ERR_CODE, ZTBPQC3TABLE.NG_NHAN, ZTBPQC3TABLE.DOI_SACH, ZTBPQC3TABLE.STATUS
                FROM ZTBPQC3TABLE 
               LEFT JOIN ZTBPQC1TABLE ON (ZTBPQC3TABLE.PQC1_ID = ZTBPQC1TABLE.PQC1_ID AND ZTBPQC3TABLE.CTR_CD = ZTBPQC1TABLE.CTR_CD)
               LEFT JOIN M100 ON (M100.G_CODE = ZTBPQC3TABLE.G_CODE AND M100.CTR_CD = ZTBPQC3TABLE.CTR_CD)
               LEFT JOIN P400 ON (P400.PROD_REQUEST_NO = ZTBPQC3TABLE.PROD_REQUEST_NO AND P400.CTR_CD = ZTBPQC3TABLE.CTR_CD)
               LEFT JOIN M110 ON (M110.CUST_CD = P400.CUST_CD AND M110.CTR_CD = P400.CTR_CD)
               ${generate_condition_pqc3(
                 DATA.ALLTIME,
                 DATA.FROM_DATE,
                 DATA.TO_DATE,
                 DATA.CUST_NAME,
                 DATA.G_CODE,
                 DATA.G_NAME,
                 DATA.PROD_REQUEST_NO,
                 DATA.PROCESS_LOT_NO,
                 DATA.ID,
                 DATA.FACTORY,
                 DATA.CTR_CD
               )} 
               ORDER BY ZTBPQC3TABLE.PQC3_ID DESC`;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.trapqc1data = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `SELECT  M110.CUST_NAME_KD,M100.DESCR, ZTBPQC1TABLE.FACTORY, ZTBPQC1TABLE.PQC1_ID,ZTBPQC1TABLE.PLAN_ID, ZTBPQC1TABLE.SETTING_OK_TIME,ZTBPQC1TABLE.INSPECT_SAMPLE_QTY, CONCAT(datepart(YEAR,ZTBPQC1TABLE.SETTING_OK_TIME),'_',datepart(ISO_WEEK,DATEADD(day,2,ZTBPQC1TABLE.SETTING_OK_TIME))) AS YEAR_WEEK,ZTBPQC1TABLE.PROCESS_LOT_NO,M100.G_NAME,M100.G_NAME_KD,ZTBPQC1TABLE.LINEQC_PIC AS LINEQC_PIC,ZTBPQC1TABLE.PROD_PIC,ZTBPQC1TABLE.PROD_LEADER,ZTBPQC1TABLE.LINE_NO,ZTBPQC1TABLE.STEPS,ZTBPQC1TABLE.CAVITY,M100.PROD_LAST_PRICE,(M100.PROD_LAST_PRICE*ZTBPQC1TABLE.INSPECT_SAMPLE_QTY) AS SAMPLE_AMOUNT, ZTBPQC1TABLE.CNDB_ENCODES, ZTBPQC1TABLE.REMARK,ZTBPQC1TABLE.INS_DATE,ZTBPQC1TABLE.UPD_DATE, ZTBPQC3TABLE.PQC3_ID, ZTBPQC3TABLE.OCCURR_TIME, ZTBPQC3TABLE.INSPECT_QTY, ZTBPQC3TABLE.DEFECT_QTY, ZTBPQC3TABLE.DEFECT_PHENOMENON,  ZTBPQC1TABLE.PROD_REQUEST_NO,P400.PROD_REQUEST_QTY,P400.PROD_REQUEST_DATE, ZTBPQC1TABLE.IMG_1,ZTBPQC1TABLE.IMG_2,ZTBPQC1TABLE.IMG_3
                FROM
               ZTBPQC1TABLE
               LEFT JOIN P400 ON (P400.PROD_REQUEST_NO = ZTBPQC1TABLE.PROD_REQUEST_NO AND P400.CTR_CD = ZTBPQC1TABLE.CTR_CD)
               LEFT JOIN M100 ON (M100.G_CODE = ZTBPQC1TABLE.G_CODE AND M100.CTR_CD = ZTBPQC1TABLE.CTR_CD)
               LEFT JOIN M110 ON (M110.CUST_CD = P400.CUST_CD AND M110.CTR_CD = P400.CTR_CD)
               LEFT JOIN  ZTBPQC3TABLE  ON (ZTBPQC1TABLE.PQC1_ID= ZTBPQC3TABLE.PQC1_ID AND ZTBPQC1TABLE.CTR_CD= ZTBPQC3TABLE.CTR_CD)
               ${generate_condition_pqc1(
                 DATA.ALLTIME,
                 DATA.FROM_DATE,
                 DATA.TO_DATE,
                 DATA.CUST_NAME,
                 DATA.G_CODE,
                 DATA.G_NAME,
                 DATA.PROD_REQUEST_NO,
                 DATA.PROCESS_LOT_NO,
                 DATA.ID,
                 DATA.FACTORY,
                 DATA.CTR_CD
               )} 
               ORDER BY ZTBPQC1TABLE.PQC1_ID DESC`;
  console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.updatepqc1sampleqty = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `UPDATE ZTBPQC1TABLE SET INSPECT_SAMPLE_QTY=${DATA.INSPECT_SAMPLE_QTY} WHERE CTR_CD='${DATA.CTR_CD}' AND PQC1_ID=${DATA.PQC1_ID}`;
  console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.loadErrTable = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `SELECT * FROM ERROR_TABLE WHERE CTR_CD='${DATA.CTR_CD}'`;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.insert_pqc3 = async (req, res, DATA) => {
  let currenttime = moment().format("YYYY-MM-DD HH:mm:ss");
  let checkkq = "OK";
  let setpdQuery = `INSERT INTO ZTBPQC3TABLE (CTR_CD, PROCESS_LOT_NO, LINEQC_PIC, OCCURR_TIME, INSPECT_QTY, DEFECT_QTY, DEFECT_PHENOMENON, DEFECT_IMAGE_LINK, REMARK, INS_DATE, UPD_DATE, PQC1_ID, ERR_CODE, PROD_REQUEST_NO, G_CODE) VALUES('${DATA.CTR_CD}','${DATA.PROCESS_LOT_NO}','${DATA.LINEQC_PIC}','${DATA.OCCURR_TIME}',${DATA.INSPECT_QTY},${DATA.DEFECT_QTY},N'${DATA.DEFECT_PHENOMENON}','${DATA.DEFECT_IMAGE_LINK}',N'${DATA.REMARK}','${currenttime}','${currenttime}',${DATA.PQC1_ID},'${DATA.ERR_CODE}','${DATA.PROD_REQUEST_NO}','${DATA.G_CODE}')`;
  console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.getlastestPQC3_ID = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `SELECT MAX(PQC3_ID) AS PQC3_ID FROM ZTBPQC3TABLE WHERE CTR_CD='${DATA.CTR_CD}'`;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.traCNDB = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = ` SELECT Z_CNDBTABLE.CNDB_DATE,Z_CNDBTABLE.CNDB_NO,Z_CNDBTABLE.CNDB_ENCODE,Z_CNDBTABLE.M_NAME,Z_CNDBTABLE.DEFECT_NAME,Z_CNDBTABLE.DEFECT_CONTENT,Z_CNDBTABLE.REG_EMPL_NO,Z_CNDBTABLE.REMARK,Z_CNDBTABLE.M_NAME2,Z_CNDBTABLE.INS_DATE,Z_CNDBTABLE.APPROVAL_STATUS,Z_CNDBTABLE.APPROVAL_EMPL,Z_CNDBTABLE.APPROVAL_DATE,Z_SPECIAL_PRODUCT.G_CODE,Z_SPECIAL_PRODUCT.G_NAME,Z_SPECIAL_PRODUCT.CNDB_QTY 
                FROM Z_CNDBTABLE 
                LEFT JOIN Z_SPECIAL_PRODUCT ON (Z_SPECIAL_PRODUCT.CNDB_ENCODE = Z_CNDBTABLE.CNDB_ENCODE AND Z_SPECIAL_PRODUCT.CTR_CD = Z_CNDBTABLE.CTR_CD)
                WHERE Z_CNDBTABLE.CTR_CD='${DATA.CTR_CD}'
                ORDER BY CNDB_DATE DESC `;
  ////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.tradaofilm = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = `WHERE 1=1 `;
  if (DATA.ALLTIME !== true) {
    condition += ` AND NGAYBANGIAO BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE}'`;
  }
  if (DATA.G_CODE !== "") {
    condition += ` AND KNIFE_FILM.G_CODE ='${DATA.G_CODE}'`;
  }
  if (DATA.G_NAME !== "") {
    condition += ` AND M100.G_NAME LIKE '%${DATA.G_NAME}%'`;
  }
  if (DATA.FACTORY !== "All") {
    condition += ` AND KNIFE_FILM.FACTORY_NAME = '${DATA.FACTORY}'`;
  }
  let setpdQuery = `
    SELECT KNIFE_FILM_ID,FACTORY_NAME,NGAYBANGIAO,KNIFE_FILM.G_CODE, M100.G_NAME, LOAIBANGIAO_PDP,LOAIPHATHANH,SOLUONG,SOLUONGOHP,LYDOBANGIAO,PQC_EMPL_NO,RND_EMPL_NO,SX_EMPL_NO,MA_DAO, CFM_GIAONHAN, CFM_INS_EMPL, CFM_DATE, KNIFE_FILM_STATUS, KNIFE_FILM.G_WIDTH, KNIFE_FILM.G_LENGTH,  M110.CUST_NAME_KD AS VENDOR, KNIFE_FILM.TOTAL_PRESS, REMARK 
    FROM KNIFE_FILM
    LEFT JOIN M100 ON (M100.G_CODE = KNIFE_FILM.G_CODE AND M100.CTR_CD = KNIFE_FILM.CTR_CD)
    LEFT JOIN M110 ON (M110.CUST_CD = KNIFE_FILM.CUST_CD AND M110.CTR_CD = KNIFE_FILM.CTR_CD)
    ${condition}
    AND KNIFE_FILM.CTR_CD='${DATA.CTR_CD}'
    ORDER BY KNIFE_FILM_ID DESC
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.updatenndspqc = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
    UPDATE ZTBPQC3TABLE SET NG_NHAN=N'${DATA.NG_NHAN}', DOI_SACH=N'${DATA.DOI_SACH}' WHERE CTR_CD='${DATA.CTR_CD}' AND  PQC3_ID=${DATA.PQC3_ID}
    `;
  console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.loadDtcTestList = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
  SELECT * FROM ZTB_REL_TESTTABLE WHERE CTR_CD='${DATA.CTR_CD}'
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.addTestItem = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = "";
  if (DATA.TEST_CODE === -1) {
    setpdQuery = `INSERT INTO ZTB_REL_TESTTABLE (CTR_CD, TEST_NAME) VALUES ('${DATA.CTR_CD}',N'${DATA.TEST_NAME}')`;
  } else {
    setpdQuery = `
    INSERT INTO ZTB_REL_TESTTABLE (CTR_CD, TEST_CODE, TEST_NAME) VALUES ('${DATA.CTR_CD}','${DATA.TEST_CODE}',N'${DATA.TEST_NAME}')
  `;
  }
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.addTestPoint = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `INSERT INTO ZTB_REL_TESTPOINT (CTR_CD, TEST_CODE, POINT_CODE, POINT_NAME) VALUES ('${DATA.CTR_CD}','${DATA.TEST_CODE}','${DATA.POINT_CODE}',N'${DATA.POINT_NAME}')`;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.loadDtcTestPointList = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
 SELECT ZTB_REL_TESTTABLE.TEST_CODE, ZTB_REL_TESTTABLE.TEST_NAME, ZTB_REL_TESTPOINT.POINT_CODE, ZTB_REL_TESTPOINT.POINT_NAME FROM ZTB_REL_TESTPOINT
LEFT JOIN ZTB_REL_TESTTABLE ON ZTB_REL_TESTPOINT.TEST_CODE = ZTB_REL_TESTTABLE.TEST_CODE AND ZTB_REL_TESTPOINT.CTR_CD = ZTB_REL_TESTTABLE.CTR_CD
WHERE ZTB_REL_TESTTABLE.TEST_CODE = ${DATA.TEST_CODE} AND ZTB_REL_TESTPOINT.CTR_CD = '${DATA.CTR_CD}'
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.khkt_a_dung = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
DECLARE @TODAY_PLAN_DATE VARCHAR(10) = '${DATA.FROM_DATE}'; DECLARE @YESTERDAY_DATE VARCHAR(10);   DECLARE @NEXT_DAY_DATE VARCHAR(10);  SET @YESTERDAY_DATE = CONVERT(VARCHAR(10), DATEADD(DAY, -1, CONVERT(DATE, @TODAY_PLAN_DATE)), 120);   SET @NEXT_DAY_DATE = CONVERT(VARCHAR(10), DATEADD(DAY, 1, CONVERT(DATE, @TODAY_PLAN_DATE)), 120);   SELECT * FROM( SELECT   ZTB_G_CODE_PLAN_TB.PLAN_DATE,M100.FACTORY,ZTB_G_CODE_PLAN_TB.G_CODE, M100.G_NAME,ISNULL(ROUND(M100.INSPECT_SPEED, 0), 1) AS INSPECT_SPEED,INIT_INSP_STOCK AS INS_STOCK_14H, M100.PROD_TYPE, (CASE WHEN M100.CODE_33='01' THEN 'EA' WHEN M100.CODE_33='02' THEN 'ROLL' WHEN M100.CODE_33='03' THEN 'SHEET' WHEN M100.CODE_33='04' THEN 'MET' WHEN M100.CODE_33='06' THEN 'PACK (BAG)' WHEN M100.CODE_33='99' THEN 'X' END) AS UNIT  ,ZTB_G_CODE_PLAN_TB.INIT_WH_STOCK , (CASE  WHEN CAST(FINAL_INPUT AS DATE) < @TODAY_PLAN_DATE THEN N'Nhập trước'  ELSE N'Nhập sau' END) AS PL_TG ,M100.TONKIEM_QTY, isnull(ZTBINSPECTOUTPUTTB_A.OUTPUT_QTY_EA,0) - isnull(D1,0) AS KQ_D1 , (CASE WHEN isnull(ZTBINSPECTOUTPUTTB_A.OUTPUT_QTY_EA,0) - isnull(D1,0) > = '0'  THEN 'OK' ELSE 'NG' END) AS KQ_OK , (CASE WHEN TONKIEM_QTY ='0'  THEN 'NO' ELSE 'YES'   END) AS INS_STOCK , (CASE WHEN  isnull(M100.TONKIEM_QTY,0) - isnull(D1,0) > '0'  THEN N'Thừa' WHEN  isnull(M100.TONKIEM_QTY,0) - isnull(D1,0)  ='0'  THEN N'Đủ' ELSE N'Thiếu'   END) AS TON_THUA  ,D1_YESTD,D2_YESTD,OUTPUT_YESTD, isnull(ZTBINSPECTOUTPUTTB_A.OUTPUT_QTY_EA,0) AS OUTPUT_QTY_EA,D1,D2,D3,D4,D5,D6 ,ROUND(     (ISNULL(D1, 0) / ISNULL(M100.INSPECT_SPEED, 1)) + (ISNULL(D2, 0) / ISNULL(M100.INSPECT_SPEED, 1)),  2) AS D1D2_H 	,ROUND(ISNULL(D1, 0) / ISNULL(M100.INSPECT_SPEED,  (CASE WHEN  D1 = '0'  THEN 1 ELSE ISNULL(D1, 0)  END) ), 2) AS D1_H  		,ROUND(ISNULL(D2, 0) / ISNULL(M100.INSPECT_SPEED,  (CASE WHEN  D2 = '0'  THEN 1 ELSE ISNULL(D2, 0)  END) ), 2) AS D2_H  		,ROUND(ISNULL(D3, 0) / ISNULL(M100.INSPECT_SPEED,  (CASE WHEN  D3 = '0'  THEN 1 ELSE ISNULL(D3, 0)  END) ), 2) AS D3_H  		,ROUND(ISNULL(D4, 0) / ISNULL(M100.INSPECT_SPEED,  (CASE WHEN  D4 = '0'  THEN 1 ELSE ISNULL(D4, 0)  END) ), 2) AS D4_H  		,ROUND(ISNULL(D5, 0) / ISNULL(M100.INSPECT_SPEED,  (CASE WHEN  D5 = '0'  THEN 1 ELSE ISNULL(D5, 0)  END) ), 2) AS D5_H  		,ROUND(ISNULL(D6, 0) / ISNULL(M100.INSPECT_SPEED,  (CASE WHEN  D6 = '0'  THEN 1 ELSE ISNULL(D6, 0)  END) ), 2) AS D6_H  	,FINAL_INPUT	, isnull(ZTBINSPECTINPUTTB_A.INPUT_EA_14_18H,0) AS INPUT_14_18H, isnull(ZTBINSPECTINPUTTB_A.INPUT_EA_18_2H,0) AS INPUT_18_2H, isnull(ZTBINSPECTINPUTTB_A.INPUT_EA_2_6H,0) AS INPUT_2_6H, isnull(ZTBINSPECTINPUTTB_A.INPUT_EA_6_10H,0)AS INPUT_6_10H , M100.BTP_QTY   , isnull(ZTBINSPECTINPUTTB_YESTD.INPUT_EA_14_18H,0) AS INPUT_14_18H_YESTD, isnull(ZTBINSPECTINPUTTB_YESTD.INPUT_EA_18_2H,0) AS INPUT_18_2H_YESTD, isnull(ZTBINSPECTINPUTTB_YESTD.INPUT_EA_2_6H,0) AS INPUT_2_6H_YESTD, isnull(ZTBINSPECTINPUTTB_YESTD.INPUT_EA_6_10H,0)AS INPUT_6_10H_YESTD, isnull(ZTBINSPECTINPUTTB_YESTD.INPUT_EA_10_14H,0)AS INPUT_10_14H_YESTD  ,isnull(ZTBINSPECTINPUTTB_YESTD.TOTAL_INPUT_SAU_14H,0) AS TOTAL_INPUT_SAU_14H_YESTD,isnull(ZTBINSPECTINPUTTB_A.TOTAL_INPUT_SAU_14H,0) AS TOTAL_INPUT_SAU_14H FROM ZTB_G_CODE_PLAN_TB LEFT JOIN (SELECT G_CODE,SUM(CASE WHEN INPUT_DATETIME BETWEEN @YESTERDAY_DATE +' 14:00:00.000' AND @TODAY_PLAN_DATE +' 14:00:00.000' THEN INPUT_QTY_EA ELSE 0 END) AS TOTAL_INPUT_SAU_14H, SUM(CASE WHEN INPUT_DATETIME BETWEEN @YESTERDAY_DATE +' 14:00:00.000' AND @YESTERDAY_DATE +' 18:00:00.000' THEN INPUT_QTY_EA ELSE 0  END) AS INPUT_EA_14_18H , SUM(CASE WHEN INPUT_DATETIME BETWEEN @YESTERDAY_DATE +' 18:00:00.000' AND @TODAY_PLAN_DATE +' 02:00:00.000' THEN INPUT_QTY_EA ELSE 0  END) AS INPUT_EA_18_2H  , SUM(CASE WHEN INPUT_DATETIME BETWEEN @TODAY_PLAN_DATE +' 2:00:00.000' AND @TODAY_PLAN_DATE +' 06:00:00.000' THEN INPUT_QTY_EA ELSE 0  END) AS INPUT_EA_2_6H , SUM(CASE WHEN INPUT_DATETIME BETWEEN @TODAY_PLAN_DATE +' 06:00:00.000' AND @TODAY_PLAN_DATE +' 10:00:00.000' THEN INPUT_QTY_EA ELSE 0  END) AS INPUT_EA_6_10H , SUM(CASE WHEN INPUT_DATETIME BETWEEN @TODAY_PLAN_DATE +' 10:00:00.000' AND @TODAY_PLAN_DATE +' 14:00:00.000' THEN INPUT_QTY_EA ELSE 0  END) AS INPUT_EA_10_14H FROM ZTBINSPECTINPUTTB GROUP BY  G_CODE) AS ZTBINSPECTINPUTTB_YESTD ON(ZTBINSPECTINPUTTB_YESTD.G_CODE = ZTB_G_CODE_PLAN_TB.G_CODE)  LEFT JOIN (SELECT G_CODE,SUM(CASE WHEN INPUT_DATETIME BETWEEN @TODAY_PLAN_DATE +' 14:00:00.000' AND @NEXT_DAY_DATE +' 14:00:00.000' THEN INPUT_QTY_EA ELSE 0 END) AS TOTAL_INPUT_SAU_14H, SUM(CASE WHEN INPUT_DATETIME BETWEEN @TODAY_PLAN_DATE +' 14:00:00.000' AND @TODAY_PLAN_DATE +' 18:00:00.000' THEN INPUT_QTY_EA ELSE 0  END) AS INPUT_EA_14_18H , SUM(CASE WHEN INPUT_DATETIME BETWEEN @TODAY_PLAN_DATE +' 18:00:00.000' AND @NEXT_DAY_DATE +' 02:00:00.000' THEN INPUT_QTY_EA ELSE 0  END) AS INPUT_EA_18_2H, SUM(CASE WHEN INPUT_DATETIME BETWEEN @NEXT_DAY_DATE +' 2:00:00.000' AND @NEXT_DAY_DATE +' 06:00:00.000' THEN INPUT_QTY_EA ELSE 0  END) AS INPUT_EA_2_6H , SUM(CASE WHEN INPUT_DATETIME BETWEEN @NEXT_DAY_DATE +' 06:00:00.000' AND @NEXT_DAY_DATE +' 10:00:00.000' THEN INPUT_QTY_EA ELSE 0  END) AS INPUT_EA_6_10H  FROM ZTBINSPECTINPUTTB GROUP BY  G_CODE) AS ZTBINSPECTINPUTTB_A ON(ZTBINSPECTINPUTTB_A.G_CODE = ZTB_G_CODE_PLAN_TB.G_CODE)  LEFT JOIN (SELECT G_CODE,SUM(OUTPUT_QTY_EA) AS OUTPUT_QTY_EA FROM ZTBINSPECTOUTPUTTB WHERE ZTBINSPECTOUTPUTTB.OUTPUT_DATETIME BETWEEN @TODAY_PLAN_DATE +' 14:00:00.000'  AND @NEXT_DAY_DATE +' 14:00:00.000'  GROUP BY  ZTBINSPECTOUTPUTTB.G_CODE) AS ZTBINSPECTOUTPUTTB_A ON(ZTBINSPECTOUTPUTTB_A.G_CODE = ZTB_G_CODE_PLAN_TB.G_CODE)  LEFT JOIN (SELECT G_CODE,SUM(OUTPUT_QTY_EA) AS OUTPUT_YESTD FROM ZTBINSPECTOUTPUTTB WHERE ZTBINSPECTOUTPUTTB.OUTPUT_DATETIME BETWEEN @YESTERDAY_DATE +' 14:00:00.000'  AND @TODAY_PLAN_DATE +' 14:00:00.000'  GROUP BY  ZTBINSPECTOUTPUTTB.G_CODE) AS ZTBINSPECTOUTPUTTB_yesterday ON(ZTBINSPECTOUTPUTTB_yesterday.G_CODE = ZTB_G_CODE_PLAN_TB.G_CODE)  LEFT JOIN (SELECT G_CODE, D1 AS D1_YESTD, D2 AS D2_YESTD FROM ZTB_G_CODE_PLAN_TB WHERE ZTB_G_CODE_PLAN_TB.PLAN_DATE =@YESTERDAY_DATE ) AS G_CODE_PLAN_TB_yesterday ON (G_CODE_PLAN_TB_yesterday.G_CODE = ZTB_G_CODE_PLAN_TB.G_CODE) LEFT JOIN (SELECT G_CODE, MAX(INPUT_DATETIME) AS FINAL_INPUT FROM ZTBINSPECTINPUTTB GROUP BY  G_CODE) AS ZTBINSPECTINPUTTB_XYZ ON(ZTBINSPECTINPUTTB_XYZ.G_CODE = ZTB_G_CODE_PLAN_TB.G_CODE)  LEFT JOIN M100 ON(M100.G_CODE = ZTB_G_CODE_PLAN_TB.G_CODE)  WHERE ZTB_G_CODE_PLAN_TB.PLAN_DATE = @TODAY_PLAN_DATE  ) AS ZTB_G_CODE_PLAN_TB_B  ORDER BY   UNIT DESC,FINAL_INPUT DESC, INPUT_14_18H_YESTD ASC,INPUT_18_2H_YESTD ASC ,INPUT_2_6H_YESTD ASC ,INPUT_6_10H_YESTD ASC ,INPUT_10_14H_YESTD ASC , KQ_OK ASC 
  `;
  // console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.temlotktraHistory = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
 SELECT M100.G_NAME, M100.G_NAME_KD, M100.DESCR, M100.PROD_TYPE, M100.PROD_MAIN_MATERIAL,ZTBLOTPRINTHISTORYTB.* FROM ZTBLOTPRINTHISTORYTB
LEFT JOIN M100 ON M100.CTR_CD = ZTBLOTPRINTHISTORYTB.CTR_CD AND M100.G_CODE = ZTBLOTPRINTHISTORYTB.G_CODE 
WHERE LOT_PRINT_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE} 23:59:59'
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.updateNCRIDForFailing = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `UPDATE ZTB_SX_NG_MATERIAL SET NCR_ID=${DATA.NCR_ID} WHERE CTR_CD='${DATA.CTR_CD}' AND FAIL_ID=${DATA.FAIL_ID}`;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.getInspectionWorstByCode = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = ``;
  if (DATA.WORSTBY === "AMOUNT")
    condition = `ORDER BY SUM(CAST(INSPECTION_DATA_DOC.NG_AMOUNT as bigint)) DESC`;
  if (DATA.WORSTBY === "QTY")
    condition = `ORDER BY SUM(CAST(INSPECTION_DATA_DOC.NG_QTY as bigint)) DESC`;
  let condition2 = ``;
  if (DATA.NG_TYPE !== "ALL") {
    condition2 += ` AND ERROR_TABLE.ERR_TYPE ='${DATA.NG_TYPE}'`;
  } else {
    condition2 += ` AND (ERROR_TABLE.ERR_TYPE ='M' OR ERROR_TABLE.ERR_TYPE='P') `;
  }
  let condition3 = ``;
  if (DATA.codeArray.length === 1) {
    condition3 += ` AND INSPECTION_DATA_DOC.G_CODE='${DATA.codeArray[0]}'`;
  } else if (DATA.codeArray.length > 1) {
    let codeString = ``;
    let codeArStr = DATA.codeArray.map((ele, index) => `'${ele}'`).join(",");
    condition3 += ` AND INSPECTION_DATA_DOC.G_CODE IN (${codeArStr})`;
  }
  let condition4 = `WHERE ZTBINSPECTNGTB2.ERR_CODE='${DATA.ERR_CODE}' `;
  if (DATA.CUST_NAME_KD !== "") {
    condition4 += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`;
  }
  let setpdQuery = `
  WITH INSPECTION_DATA_DOC AS
  (
  SELECT CAST(ZTBINSPECTNGTB.INSPECT_START_TIME as date) AS INSPECT_DATE, DATEPART(year, ZTBINSPECTNGTB.INSPECT_START_TIME) AS YEAR_NUM, DATEPART(ISO_WEEK, ZTBINSPECTNGTB.INSPECT_START_TIME) AS WEEK_NUM,
  ZTBINSPECTNGTB.INSPECT_TOTAL_QTY, M100.G_CODE, M100.G_NAME_KD, ZTBINSPECTNGTB.INSPECT_OK_QTY, ZTBINSPECTNGTB2.NG_QTY, (ZTBINSPECTNGTB2.NG_QTY * M100.PROD_LAST_PRICE)  AS NG_AMOUNT, ZTBINSPECTNGTB2.ERR_CODE, ZTBINSPECTNGTB.CTR_CD
  FROM ZTBINSPECTNGTB2
  LEFT JOIN ZTBINSPECTNGTB ON (ZTBINSPECTNGTB2.INSPECT_ID = ZTBINSPECTNGTB.INSPECT_ID AND ZTBINSPECTNGTB2.CTR_CD = ZTBINSPECTNGTB.CTR_CD)
  LEFT JOIN M100 ON (M100.G_CODE = ZTBINSPECTNGTB.G_CODE AND M100.CTR_CD = ZTBINSPECTNGTB.CTR_CD)
  LEFT JOIN P400 ON (P400.PROD_REQUEST_NO = ZTBINSPECTNGTB.PROD_REQUEST_NO AND P400.CTR_CD = ZTBINSPECTNGTB.CTR_CD)
  LEFT JOIN M110 ON (M110.CUST_CD = P400.CUST_CD AND M110.CTR_CD = P400.CTR_CD)
  ${condition4}          
  )
  SELECT INSPECTION_DATA_DOC.G_CODE, INSPECTION_DATA_DOC.G_NAME_KD,SUM(CAST(INSPECTION_DATA_DOC.INSPECT_TOTAL_QTY as bigint)) AS INSPECT_TOTAL_QTY, SUM(CAST(INSPECTION_DATA_DOC.NG_QTY as bigint)) AS NG_QTY, SUM(NG_AMOUNT) AS NG_AMOUNT FROM INSPECTION_DATA_DOC 
  LEFT JOIN ERROR_TABLE ON (ERROR_TABLE.ERR_CODE = INSPECTION_DATA_DOC.ERR_CODE AND ERROR_TABLE.CTR_CD = INSPECTION_DATA_DOC.CTR_CD)
  WHERE INSPECTION_DATA_DOC.CTR_CD='${DATA.CTR_CD}' AND INSPECT_DATE  BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE}' ${condition2} AND INSPECTION_DATA_DOC.NG_AMOUNT <> 0 ${condition3}
  GROUP BY INSPECTION_DATA_DOC.G_CODE, INSPECTION_DATA_DOC.G_NAME_KD
  ${condition}`;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.updateNCRIDForHolding = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `UPDATE HOLDING_TB SET NCR_ID=${DATA.NCR_ID} WHERE CTR_CD='${DATA.CTR_CD}' AND HOLD_ID=${DATA.HOLD_ID}`;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.trainspectionpatrol = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
    SELECT TOP 3
    ZTBINSPECTION_PATROL.INS_PATROL_ID,
      ZTBINSPECTION_PATROL.PROD_REQUEST_NO,
      ZTBINSPECTION_PATROL.PLAN_ID,
      ZTBINSPECTION_PATROL.PROCESS_LOT_NO,
      ZTBINSPECTION_PATROL.G_CODE,
      ZTBINSPECTION_PATROL.ERR_CODE,
      ZTBINSPECTION_PATROL.INSPECT_QTY,
      ZTBINSPECTION_PATROL.DEFECT_QTY,
      ZTBINSPECTION_PATROL.DEFECT_PHENOMENON,
      ZTBINSPECTION_PATROL.DEFECT_IMAGE_LINK,
      ZTBINSPECTION_PATROL.LINEQC_PIC,
      ZTBINSPECTION_PATROL.PROD_PIC,
      ZTBINSPECTION_PATROL.INSP_PIC,
      ZTBINSPECTION_PATROL.INS_DATE,
      ZTBINSPECTION_PATROL.INS_EMPL,
      ZTBINSPECTION_PATROL.UPD_DATE,
      ZTBINSPECTION_PATROL.UPD_EMPL,
      ZTBINSPECTION_PATROL.PHANLOAI,
      ZTBINSPECTION_PATROL.REMARK,
      ZTBINSPECTION_PATROL.FACTORY,
      M100.G_NAME_KD,
      M110.CUST_NAME_KD,
      ZTBINSPECTION_PATROL.EQUIPMENT_CD,
      ZTBINSPECTION_PATROL.OCCURR_TIME,
      ZTBINSPECTION_PATROL.CTR_CD
    FROM ZTBINSPECTION_PATROL 
    LEFT JOIN M100 ON M100.G_CODE = ZTBINSPECTION_PATROL.G_CODE AND M100.CTR_CD = ZTBINSPECTION_PATROL.CTR_CD
    LEFT JOIN M110 ON M110.CUST_CD = ZTBINSPECTION_PATROL.CUST_CD AND M110.CTR_CD = ZTBINSPECTION_PATROL.CTR_CD
    WHERE ZTBINSPECTION_PATROL.INS_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE} 23:59:59'
      AND ZTBINSPECTION_PATROL.CTR_CD='${DATA.CTR_CD}'
    ORDER BY ZTBINSPECTION_PATROL.OCCURR_TIME DESC        
    `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.copyXRFSpec = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
  INSERT INTO ZTB_REL_SPECTTABLE
SELECT CTR_CD, '${DATA.G_CODE}' AS G_CODE, 3, POINT_CODE, PRI, CENTER_VALUE, UPPER_TOR, LOWER_TOR, BARCODE_CONTENT, REMARK, INS_EMPL_NO, UPD_EMPL_NO, INS_DATE,UPD_DATE, '${DATA.M_CODE}' AS M_CODE FROM ZTB_REL_SPECTTABLE WHERE G_CODE='7C03925A' AND M_CODE='B0000035' AND TEST_CODE = 3 AND CTR_CD='${DATA.CTR_CD}'
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.copyXRFSpecSDI = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
  INSERT INTO ZTB_REL_SPECTTABLE
SELECT CTR_CD, '${DATA.G_CODE}' AS G_CODE, 3, POINT_CODE, PRI, CENTER_VALUE, UPPER_TOR, LOWER_TOR, BARCODE_CONTENT, REMARK, INS_EMPL_NO, UPD_EMPL_NO, INS_DATE,UPD_DATE, '${DATA.M_CODE}' AS M_CODE FROM ZTB_REL_SPECTTABLE WHERE G_CODE='7B09266A' AND M_CODE='B0000035' AND TEST_CODE = 3 AND CTR_CD='${DATA.CTR_CD}'
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.loadDocuments = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = ``;
  if (DATA.CAT_ID !== 0) {
    condition += ` AND ZTB_ALL_DOC_TB.CAT_ID='${DATA.CAT_ID}'`;
  }
  if (DATA.DOC_CAT_ID !== 0) {
    condition += ` AND ZTB_ALL_DOC_TB.DOC_CAT_ID='${DATA.DOC_CAT_ID}'`;
  }
  if (DATA.DOC_ID !== 0) {
    condition += ` AND ZTB_ALL_DOC_TB.DOC_ID='${DATA.DOC_ID}'`;
  }
  if (DATA.DOC_NAME !== "") {
    condition += ` AND ZTB_ALL_DOC_TB.DOC_NAME LIKE '%${DATA.DOC_NAME}%'`;
  }
  let setpdQuery = `
SELECT ZTB_ALL_FILE_TB.FILE_ID, ZTB_ALL_FILE_TB.REG_DATE, ZTB_ALL_FILE_TB.EXP_DATE, ZTB_ALL_FILE_TB.FORMAT_X,  ZTB_ALL_DOC_TB.DOC_ID, ZTB_ALL_DOC_TB.CAT_ID, ZTB_DOC_CATEGORY1_TB.CAT_NAME,ZTB_DOC_CATEGORY2_TB.DOC_CAT_NAME,   ZTB_ALL_DOC_TB.DOC_CAT_ID, ZTB_ALL_DOC_TB.DOC_NAME, ZTB_ALL_DOC_TB.HSD_YN, ZTB_ALL_DOC_TB.USE_YN, ZTB_ALL_FILE_TB.INS_DATE, ZTB_ALL_FILE_TB.INS_EMPL 
FROM ZTB_ALL_FILE_TB
LEFT JOIN ZTB_ALL_DOC_TB  ON ZTB_ALL_DOC_TB.CTR_CD = ZTB_ALL_FILE_TB.CTR_CD AND ZTB_ALL_DOC_TB.DOC_ID = ZTB_ALL_FILE_TB.DOC_ID  AND ZTB_ALL_DOC_TB.DOC_CAT_ID = ZTB_ALL_FILE_TB.DOC_CAT_ID  AND ZTB_ALL_DOC_TB.CAT_ID = ZTB_ALL_FILE_TB.CAT_ID
LEFT JOIN ZTB_DOC_CATEGORY1_TB ON ZTB_ALL_DOC_TB.CTR_CD = ZTB_DOC_CATEGORY1_TB.CTR_CD AND ZTB_ALL_DOC_TB.CAT_ID = ZTB_DOC_CATEGORY1_TB.CAT_ID
LEFT JOIN ZTB_DOC_CATEGORY2_TB ON ZTB_ALL_DOC_TB.CTR_CD = ZTB_DOC_CATEGORY2_TB.CTR_CD AND ZTB_ALL_DOC_TB.DOC_CAT_ID = ZTB_DOC_CATEGORY2_TB.DOC_CAT_ID
WHERE ZTB_ALL_DOC_TB.CTR_CD='${DATA.CTR_CD}' ${condition}
ORDER BY ZTB_ALL_DOC_TB.INS_DATE DESC
  `;
  console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};

exports.loadDocCategory1 = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
SELECT * FROM ZTB_DOC_CATEGORY1_TB ORDER BY CAT_ID ASC
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.loadDocCategory2 = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
SELECT * FROM ZTB_DOC_CATEGORY2_TB ORDER BY DOC_CAT_ID ASC
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.checkLastFileID = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
SELECT MAX(FILE_ID) AS FILE_ID FROM  ZTB_ALL_FILE_TB
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.insertFileData = async (req, res, DATA) => {
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let checkkq = "OK";
  let setpdQuery = `
INSERT INTO ZTB_ALL_FILE_TB (CTR_CD, DOC_ID, DOC_CAT_ID, CAT_ID, REG_DATE, EXP_DATE, FORMAT_X, INS_EMPL, INS_DATE) VALUES ('${DATA.CTR_CD}',${DATA.DOC_ID},${DATA.DOC_CAT_ID},${DATA.CAT_ID},'${DATA.REG_DATE}','${DATA.EXP_DATE}','${DATA.FORMAT_X}','${EMPL_NO}',GETDATE())
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.loadDocList = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
SELECT * FROM  ZTB_ALL_DOC_TB ORDER BY CAT_ID ASC, DOC_CAT_ID ASC, DOC_ID ASC
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.lichSuTestM_CODE = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
SELECT DISTINCT TEST_CODE FROM ZTB_REL_REQUESTTABLE WHERE M_CODE='${DATA.M_CODE}' AND CTR_CD='${DATA.CTR_CD}'
  `;
  console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.lichSuTestG_CODE = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
SELECT DISTINCT TEST_CODE FROM ZTB_REL_REQUESTTABLE WHERE G_CODE='${DATA.G_CODE}' AND CTR_CD='${DATA.CTR_CD}'
  `;
  console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.checkDTC_M_LOT_NO_TEST_CODE_REG = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
SELECT * FROM ZTB_REL_REQUESTTABLE WHERE M_LOT_NO='${DATA.M_LOT_NO}' AND TEST_CODE=${DATA.TEST_CODE} AND CTR_CD='${DATA.CTR_CD}'
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.checkDTC_ID_FROM_M_LOT_NO = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
SELECT DISTINCT DTC_ID FROM ZTB_REL_REQUESTTABLE WHERE M_LOT_NO='${DATA.M_LOT_NO}' AND CTR_CD='${DATA.CTR_CD}'
  `;
  console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.updateIncomingData_web = async (req, res, DATA) => {
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let checkkq = "OK";
  let setpdQuery = `UPDATE IQC1_TABLE SET TOTAL_RESULT= '${DATA.TOTAL_RESULT}',NQ_CHECK_ROLL= ${DATA.NQ_CHECK_ROLL}, IQC_TEST_RESULT='${DATA.IQC_TEST_RESULT}',DTC_RESULT='${DATA.DTC_RESULT}', UPD_EMPL='${EMPL_NO}', UPD_DATE = GETDATE(), REMARK=N'${DATA.REMARK}' WHERE CTR_CD='${DATA.CTR_CD}' AND IQC1_ID=${DATA.IQC1_ID}`;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.updateIncomingChecksheet = async (req, res, DATA) => {
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let checkkq = "OK";
  let setpdQuery = `UPDATE IQC1_TABLE SET CHECKSHEET ='${DATA.CHECKSHEET}' WHERE CTR_CD='${DATA.CTR_CD}' AND IQC1_ID=${DATA.IQC1_ID}`;
  console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.updateIncomingData = async (req, res, DATA) => {
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let checkkq = "OK";
  let setpdQuery = `UPDATE IQC1_TABLE SET TOTAL_RESULT= '${DATA.TOTAL_RESULT}',NQ_CHECK_ROLL= ${DATA.NQ_CHECK_ROLL}, IQC_TEST_RESULT='${DATA.IQC_TEST_RESULT}', DTC_RESULT='${DATA.DTC_RESULT}', UPD_EMPL='${EMPL_NO}', UPD_DATE = GETDATE(), REMARK=N'${DATA.REMARK}'  WHERE CTR_CD='${DATA.CTR_CD}' AND IQC1_ID=${DATA.IQC1_ID}`;
  console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.checkM_THICKNESS = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
SELECT * FROM ZTB_MATERIAL_TB WHERE CTR_CD='${DATA.CTR_CD}' AND M_NAME='${DATA.M_NAME}'
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.updateMThickness = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
UPDATE ZTB_MATERIAL_TB SET M_THICKNESS=${DATA.M_THICKNESS}, M_THICKNESS_UPPER=${DATA.M_THICKNESS_UPPER},M_THICKNESS_LOWER=${DATA.M_THICKNESS_LOWER}  WHERE CTR_CD='${DATA.CTR_CD}' AND M_NAME='${DATA.M_NAME}'
  `;
  console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.getidDTCfromlotNVL = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
SELECT * FROM ZTB_REL_REQUESTTABLE WHERE M_LOT_NO='${DATA.M_LOT_NO}' AND CTR_CD='${DATA.CTR_CD}'
  `;
  console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.checkM_NAME_IQC = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
  SELECT IQC1_TABLE.*, M090.M_NAME, M090.WIDTH_CD  FROM IQC1_TABLE
  LEFT JOIN M090 ON M090.CTR_CD = IQC1_TABLE.CTR_CD AND M090.M_CODE = IQC1_TABLE.M_CODE 
  WHERE M_LOT_NO='${DATA.M_LOT_NO}' AND IQC1_TABLE.CTR_CD='${DATA.CTR_CD}'
  `;
  console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.common = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
SELECT * FROM ZTB_DOC_CATEGORY2_TB
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.loadIQC1Table_Mobile = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
SELECT IQC1_TABLE.*, M090.M_NAME, M090.WIDTH_CD, IQC1_TABLE.LOT_VENDOR AS LOT_VENDOR_IQC  FROM IQC1_TABLE
LEFT JOIN M090 ON M090.CTR_CD = IQC1_TABLE.CTR_CD AND M090.M_CODE = IQC1_TABLE.M_CODE 
WHERE IQC1_TABLE.CTR_CD='${DATA.CTR_CD}'
ORDER BY IQC1_TABLE.IQC1_ID DESC
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.loadBlockingData = async (req, res, DATA) => {
  let checkkq = "OK";

  const filters = [
    {
      placeholder: "{{CTR_CD}}",
      clause: "AND BANGGOP.CTR_CD = @CTR_CD",
      paramName: "CTR_CD", 
    },
    {
      placeholder: "{{LOT_VENDOR}}",
      clause: "AND I222.LOTNCC = @LOT_VENDOR",
      paramName: "LOT_VENDOR",    
      skipValues: ['']  
    },
    {
      placeholder: "{{M_LOT_NO}}",
      clause: "AND BANGGOP.M_LOT_NO = @M_LOT_NO",
      paramName: "M_LOT_NO",    
      skipValues: ['']  
    },
    {
      placeholder: "{{DEFECT}}",
      clause: "AND BANGGOP.DEFECT LIKE @DEFECT",
      paramName: "DEFECT",
      like: "both",
      skipValues: ['']
    },
    {
      placeholder: "{{NCR_ID}}",
      clause: "AND BANGGOP.NCR_ID = @NCR_ID",
      paramName: "NCR_ID",    
      skipValues: ['0',null,0]  
    },
    {
      placeholder: "{{PLSP}}",
      clause: "AND BANGGOP.PLSP = @PLSP",
      paramName: "PLSP", 
      skipValues: ['ALL']     
    },
    {
      placeholder: "{{ONLY_PENDING}}",
      clause: "AND PROCESS_STATUS = 'P'",
      paramName: "ONLY_PENDING",    
      skipValues: [false]  
    }
  ]
  let baseQuery = `
   WITH FAILINGTB AS
    (
    SELECT CTR_CD, NCR_ID, 'PROCESS' AS PHAN_LOAI, 'FAILING' AS PL_BLOCK, FAIL_ID AS BLOCK_ID, PLAN_ID_SUDUNG AS PLAN_ID, M_CODE, M_LOT_NO, PROCESS_LOT_NO,ROLL_QTY AS BLOCK_ROLL_QTY, TOTAL_IN_QTY AS BLOCK_TOTAL_QTY, USE_YN, DEFECT_PHENOMENON AS DEFECT, PROCESS_STATUS, PROCESS_EMPL,  FACTORY, INS_DATE, INS_EMPL, UPD_DATE, UPD_EMPL, QC_PASS, QC_PASS_DATE, QC_PASS_EMPL, PHANLOAI AS PLSP  FROM ZTB_SX_NG_MATERIAL
    ),
    HOLDINGTB AS
    (
    SELECT CTR_CD, NCR_ID, 'INCOMING' AS PHAN_LOAI, 'HOLDING' AS PL_BLOCK, HOLD_ID AS BLOCK_ID, null AS PLAN_ID, M_CODE, M_LOT_NO, null AS PROCESS_LOT_NO, HOLDING_ROLL_QTY AS BLOCK_ROLL_QTY, HOLDING_QTY AS BLOCK_TOTAL_QTY, USE_YN, REASON AS DEFECT, PROCESS_STATUS, PROCESS_EMPL, FACTORY, INS_DATE, INS_EMPL, UPD_DATE, UPD_EMPL, QC_PASS, QC_PASS_DATE, QC_PASS_EMPL, 'NVL' AS PLSP  FROM HOLDING_TB 
    ),
    BANGGOP AS
    (
    SELECT * FROM FAILINGTB 
    UNION ALL
    SELECT * FROM HOLDINGTB
    )
    SELECT BANGGOP.FACTORY,BANGGOP.BLOCK_ID, BANGGOP.PHAN_LOAI, M110.CUST_NAME_KD AS SUPPLIER,M110_2.CUST_NAME_KD AS MAKER, BANGGOP.M_CODE, M090.M_NAME, M090.WIDTH_CD,BANGGOP.M_LOT_NO, I222.LOTNCC AS LOT_VENDOR,BLOCK_ROLL_QTY,BLOCK_TOTAL_QTY,DEFECT,
    BANGGOP.QC_PASS, BANGGOP.QC_PASS_DATE, BANGGOP.QC_PASS_EMPL,
    PL_BLOCK, 
    (CASE WHEN PROCESS_STATUS ='C' THEN 'CLOSED' WHEN PROCESS_STATUS ='P' THEN 'PENDING'  END) AS STATUS, PROCESS_EMPL, PLSP
    , BANGGOP.USE_YN , NCR_ID , BANGGOP.INS_DATE, BANGGOP.INS_EMPL , BANGGOP.UPD_DATE, BANGGOP.UPD_EMPL
    , BANGGOP.PLAN_ID, BANGGOP.PROCESS_LOT_NO
    FROM BANGGOP
    LEFT JOIN I222 ON I222.CTR_CD = BANGGOP.CTR_CD AND I222.M_LOT_NO = BANGGOP.M_LOT_NO
    LEFT JOIN M090 ON M090.CTR_CD = BANGGOP.CTR_CD AND M090.M_CODE = BANGGOP.M_CODE
    LEFT JOIN M110 ON M110.CTR_CD = I222.CTR_CD AND M110.CUST_CD = I222.CUST_CD
    LEFT JOIN ZTB_MATERIAL_TB ON M090.CTR_CD = ZTB_MATERIAL_TB.CTR_CD AND M090.M_NAME = ZTB_MATERIAL_TB.M_NAME
    LEFT JOIN M110 M110_2 ON M110_2.CUST_CD= ZTB_MATERIAL_TB.CUST_CD
    WHERE 1=1 {{CTR_CD}} {{LOT_VENDOR}} {{M_LOT_NO}} {{DEFECT}} {{NCR_ID}} {{PLSP}} {{ONLY_PENDING}}
    ORDER BY PL_BLOCK ASC
  `;
  //console.log(baseQuery);
  let params = {
    CTR_CD: DATA.CTR_CD,
    LOT_VENDOR: DATA.LOT_VENDOR,
    M_LOT_NO: DATA.M_LOT_NO,
    DEFECT: DATA.DEFECT,
    NCR_ID: DATA.NCR_ID,
    PLSP: DATA.PLSP,
    ONLY_PENDING: DATA.ONLY_PENDING
  }
  checkkq = await queryDB_New2(baseQuery, params, filters);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.loadBlockingData1 = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = `WHERE 1=1`;
  if (DATA.ONLY_PENDING === true) {
    condition += ` AND PROCESS_STATUS = 'P'`;
  }
  if (DATA.LOT_VENDOR !== "") {
    condition += ` AND I222.LOTNCC = @LOT_VENDOR`;
  }
  if (DATA.M_LOT_NO !== "") {
    condition += ` AND BANGGOP.M_LOT_NO = @M_LOT_NO`;
  }
  if (DATA.DEFECT !== "") {
    condition += ` AND BANGGOP.DEFECT LIKE @DEFECT`;
  }
  if (DATA.NCR_ID !== 0 && DATA.NCR_ID !== null) {
    condition += ` AND BANGGOP.NCR_ID = @NCR_ID`;
  }
  if (DATA.PLSP !== "ALL") {
    condition += ` AND BANGGOP.PLSP = @PLSP`;
  }

  let setpdQuery = `
   WITH FAILINGTB AS
    (
    SELECT CTR_CD, NCR_ID, 'PROCESS' AS PHAN_LOAI, 'FAILING' AS PL_BLOCK, FAIL_ID AS BLOCK_ID, PLAN_ID_SUDUNG AS PLAN_ID, M_CODE, M_LOT_NO, PROCESS_LOT_NO,ROLL_QTY AS BLOCK_ROLL_QTY, TOTAL_IN_QTY AS BLOCK_TOTAL_QTY, USE_YN, DEFECT_PHENOMENON AS DEFECT, PROCESS_STATUS, PROCESS_EMPL,  FACTORY, INS_DATE, INS_EMPL, UPD_DATE, UPD_EMPL, QC_PASS, QC_PASS_DATE, QC_PASS_EMPL, PHANLOAI AS PLSP  FROM ZTB_SX_NG_MATERIAL
    ),
    HOLDINGTB AS
    (
    SELECT CTR_CD, NCR_ID, 'INCOMING' AS PHAN_LOAI, 'HOLDING' AS PL_BLOCK, HOLD_ID AS BLOCK_ID, null AS PLAN_ID, M_CODE, M_LOT_NO, null AS PROCESS_LOT_NO, HOLDING_ROLL_QTY AS BLOCK_ROLL_QTY, HOLDING_QTY AS BLOCK_TOTAL_QTY, USE_YN, REASON AS DEFECT, PROCESS_STATUS, PROCESS_EMPL, FACTORY, INS_DATE, INS_EMPL, UPD_DATE, UPD_EMPL, QC_PASS, QC_PASS_DATE, QC_PASS_EMPL, 'NVL' AS PLSP  FROM HOLDING_TB 
    ),
    BANGGOP AS
    (
    SELECT * FROM FAILINGTB 
    UNION ALL
    SELECT * FROM HOLDINGTB
    )
    SELECT BANGGOP.FACTORY,BANGGOP.BLOCK_ID, BANGGOP.PHAN_LOAI, M110.CUST_NAME_KD AS SUPPLIER,M110_2.CUST_NAME_KD AS MAKER, BANGGOP.M_CODE, M090.M_NAME, M090.WIDTH_CD,BANGGOP.M_LOT_NO, I222.LOTNCC AS LOT_VENDOR,BLOCK_ROLL_QTY,BLOCK_TOTAL_QTY,DEFECT,
    BANGGOP.QC_PASS, BANGGOP.QC_PASS_DATE, BANGGOP.QC_PASS_EMPL,
    PL_BLOCK, 
    (CASE WHEN PROCESS_STATUS ='C' THEN 'CLOSED' WHEN PROCESS_STATUS ='P' THEN 'PENDING'  END) AS STATUS, PROCESS_EMPL, PLSP
    , BANGGOP.USE_YN , NCR_ID , BANGGOP.INS_DATE, BANGGOP.INS_EMPL , BANGGOP.UPD_DATE, BANGGOP.UPD_EMPL
    , BANGGOP.PLAN_ID, BANGGOP.PROCESS_LOT_NO
    FROM BANGGOP
    LEFT JOIN I222 ON I222.CTR_CD = BANGGOP.CTR_CD AND I222.M_LOT_NO = BANGGOP.M_LOT_NO
    LEFT JOIN M090 ON M090.CTR_CD = BANGGOP.CTR_CD AND M090.M_CODE = BANGGOP.M_CODE
    LEFT JOIN M110 ON M110.CTR_CD = I222.CTR_CD AND M110.CUST_CD = I222.CUST_CD
    LEFT JOIN ZTB_MATERIAL_TB ON M090.CTR_CD = ZTB_MATERIAL_TB.CTR_CD AND M090.M_NAME = ZTB_MATERIAL_TB.M_NAME
    LEFT JOIN M110 M110_2 ON M110_2.CUST_CD= ZTB_MATERIAL_TB.CUST_CD
    ${condition}
    ORDER BY PL_BLOCK ASC
  `;
  //console.log(setpdQuery);
  let params = {
    CTR_CD: DATA.CTR_CD,
    LOT_VENDOR: DATA.LOT_VENDOR,
    M_LOT_NO: DATA.M_LOT_NO,
    DEFECT: '%' + DATA.DEFECT + '%',
    NCR_ID: DATA.NCR_ID,
    PLSP: DATA.PLSP,
  }
  checkkq = await queryDB_New(setpdQuery, params);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.loadBlockingData2 = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = `WHERE 1=1`;
  if (DATA.ONLY_PENDING === true) {
    condition += ` AND PROCESS_STATUS = 'P'`;
  }
  if (DATA.LOT_VENDOR !== "") {
    condition += ` AND I222.LOTNCC = '${DATA.LOT_VENDOR}'`;
  }
  if (DATA.M_LOT_NO !== "") {
    condition += ` AND BANGGOP.M_LOT_NO = '${DATA.M_LOT_NO}'`;
  }
  if (DATA.DEFECT !== "") {
    condition += ` AND BANGGOP.DEFECT LIKE N'%${DATA.DEFECT}%'`;
  }
  if (DATA.NCR_ID !== 0) {
    condition += ` AND BANGGOP.NCR_ID = ${DATA.NCR_ID}`;
  }
  if (DATA.PLSP !== "ALL") {
    condition += ` AND BANGGOP.PLSP = '${DATA.PLSP}'`;
  }

  let setpdQuery = `
   WITH FAILINGTB AS
    (
    SELECT CTR_CD, NCR_ID, 'PROCESS' AS PHAN_LOAI, 'FAILING' AS PL_BLOCK, FAIL_ID AS BLOCK_ID, PLAN_ID_SUDUNG AS PLAN_ID, M_CODE, M_LOT_NO, PROCESS_LOT_NO,ROLL_QTY AS BLOCK_ROLL_QTY, TOTAL_IN_QTY AS BLOCK_TOTAL_QTY, USE_YN, DEFECT_PHENOMENON AS DEFECT, PROCESS_STATUS, PROCESS_EMPL,  FACTORY, INS_DATE, INS_EMPL, UPD_DATE, UPD_EMPL, QC_PASS, QC_PASS_DATE, QC_PASS_EMPL, PHANLOAI AS PLSP  FROM ZTB_SX_NG_MATERIAL
    ),
    HOLDINGTB AS
    (
    SELECT CTR_CD, NCR_ID, 'INCOMING' AS PHAN_LOAI, 'HOLDING' AS PL_BLOCK, HOLD_ID AS BLOCK_ID, null AS PLAN_ID, M_CODE, M_LOT_NO, null AS PROCESS_LOT_NO, HOLDING_ROLL_QTY AS BLOCK_ROLL_QTY, HOLDING_QTY AS BLOCK_TOTAL_QTY, USE_YN, REASON AS DEFECT, PROCESS_STATUS, PROCESS_EMPL, FACTORY, INS_DATE, INS_EMPL, UPD_DATE, UPD_EMPL, QC_PASS, QC_PASS_DATE, QC_PASS_EMPL, 'NVL' AS PLSP  FROM HOLDING_TB 
    ),
    BANGGOP AS
    (
    SELECT * FROM FAILINGTB 
    UNION ALL
    SELECT * FROM HOLDINGTB
    )
    SELECT BANGGOP.FACTORY,BANGGOP.BLOCK_ID, BANGGOP.PHAN_LOAI, M110.CUST_NAME_KD AS SUPPLIER,M110_2.CUST_NAME_KD AS MAKER, BANGGOP.M_CODE, M090.M_NAME, M090.WIDTH_CD,BANGGOP.M_LOT_NO, I222.LOTNCC AS LOT_VENDOR,BLOCK_ROLL_QTY,BLOCK_TOTAL_QTY,DEFECT,
    BANGGOP.QC_PASS, BANGGOP.QC_PASS_DATE, BANGGOP.QC_PASS_EMPL,
    PL_BLOCK, 
    (CASE WHEN PROCESS_STATUS ='C' THEN 'CLOSED' WHEN PROCESS_STATUS ='P' THEN 'PENDING'  END) AS STATUS, PROCESS_EMPL, PLSP
    , BANGGOP.USE_YN , NCR_ID , BANGGOP.INS_DATE, BANGGOP.INS_EMPL , BANGGOP.UPD_DATE, BANGGOP.UPD_EMPL
    , BANGGOP.PLAN_ID, BANGGOP.PROCESS_LOT_NO
    FROM BANGGOP
    LEFT JOIN I222 ON I222.CTR_CD = BANGGOP.CTR_CD AND I222.M_LOT_NO = BANGGOP.M_LOT_NO
    LEFT JOIN M090 ON M090.CTR_CD = BANGGOP.CTR_CD AND M090.M_CODE = BANGGOP.M_CODE
    LEFT JOIN M110 ON M110.CTR_CD = I222.CTR_CD AND M110.CUST_CD = I222.CUST_CD
    LEFT JOIN ZTB_MATERIAL_TB ON M090.CTR_CD = ZTB_MATERIAL_TB.CTR_CD AND M090.M_NAME = ZTB_MATERIAL_TB.M_NAME
    LEFT JOIN M110 M110_2 ON M110_2.CUST_CD= ZTB_MATERIAL_TB.CUST_CD
    ${condition}
    ORDER BY PL_BLOCK ASC
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.updateCLOSE_HOLDING = async (req, res, DATA) => {
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let checkkq = "OK";
  let setpdQuery = `UPDATE HOLDING_TB SET PROCESS_STATUS='${DATA.VALUE}', PROCESS_DATE=GETDATE(), PROCESS_EMPL='${EMPL_NO}' WHERE CTR_CD='${DATA.CTR_CD}' AND HOLD_ID=${DATA.HOLD_ID}`;
  console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.insertHoldingFromI222 = async (req, res, DATA) => {
  let checkkq = "OK";
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let setpdQuery = `
  INSERT INTO HOLDING_TB
  SELECT '${DATA.CTR_CD}' AS CTR_CD, FORMAT(GETDATE(),'yyyyMM') AS HOLDING_MONTH,${DATA.ID} AS ID, FACTORY,WAHS_CD, LOC_CD, M_LOT_NO, M_CODE, ROLL_QTY AS HOLDING_ROLL_QTY, (ROLL_QTY*IN_CFM_QTY) AS HOLDING_QTY,FORMAT(GETDATE(),'yyyyMMdd') AS HOLDING_IN_DATE, null AS HOLDING_OUT_DATE, LOTNCC AS VENDOR_LOT, USE_YN, GETDATE() AS INS_DATE, '${EMPL_NO}' AS INS_EMPL, GETDATE() AS UPD_DATE, '${EMPL_NO}' AS UPD_EMPL, 'P' AS QC_PASS, null AS QC_PASS_DATE, null AS QC_PASS_EMPL, N'${DATA.REASON}' AS REASON, null AS NCR_ID, 'P' AS PROCESS_STATUS, null AS PROCESS_EMPL, null AS PROCESS_DATE  FROM I222 WHERE CTR_CD='${DATA.CTR_CD}' AND M_CODE ='${DATA.M_CODE}' AND SUBSTRING(M_LOT_NO,1,6) = '${DATA.M_LOT_NO}' AND USE_YN <> 'X' AND NOT EXISTS (SELECT 1 FROM HOLDING_TB  WHERE HOLDING_TB.M_LOT_NO = I222.M_LOT_NO AND HOLDING_TB.USE_YN = 'B' )
  `;
  console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.getMaxHoldingID = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
SELECT MAX(ID) AS MAX_ID FROM HOLDING_TB
  `;
  console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.updateReasonHoldingFromIQC1 = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
    WITH IQC1TB AS (SELECT LOT_CMS, M_CODE, REMARK FROM IQC1_TABLE WHERE TOTAL_RESULT ='NG')
    UPDATE HOLDING_TB
    SET HOLDING_TB.REASON = IQC1TB.REMARK
    FROM HOLDING_TB
    INNER JOIN IQC1TB ON SUBSTRING(HOLDING_TB.M_LOT_NO,1,6) = IQC1TB.LOT_CMS AND HOLDING_TB.M_CODE = IQC1TB.M_CODE
    WHERE (HOLDING_TB.REASON = '' OR HOLDING_TB.REASON IS NULL) AND HOLDING_TB.CTR_CD='${DATA.CTR_CD}'
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.loadDTCPatrol = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
  SELECT TOP 3 ZTB_DTC_PATROL.*, M100.G_NAME_KD, M100.G_NAME, M090.M_NAME, M090.WIDTH_CD,ZTB_REL_TESTTYPE.TEST_TYPE_NAME,ZTB_REL_TESTTABLE.TEST_NAME, ZTB_REL_REQUESTTABLE.G_CODE, ZTB_REL_REQUESTTABLE.M_LOT_NO, ZTB_REL_REQUESTTABLE.M_CODE, ZTB_REL_REQUESTTABLE.WORK_POSITION_CODE , ZTBWORKPOSITION.WORK_POSITION_NAME, M110.CUST_NAME_KD, M1102.CUST_NAME_KD AS VENDOR,I222.FACTORY AS M_FACTORY, P400.FACTORY
FROM ZTB_DTC_PATROL
LEFT JOIN ZTB_REL_REQUESTTABLE ON ZTB_DTC_PATROL.CTR_CD = ZTB_REL_REQUESTTABLE.CTR_CD AND ZTB_DTC_PATROL.TEST_CODE = ZTB_REL_REQUESTTABLE.TEST_CODE AND ZTB_DTC_PATROL.TEST_TYPE_CODE = ZTB_REL_REQUESTTABLE.TEST_TYPE_CODE AND ZTB_DTC_PATROL.DTC_ID = ZTB_REL_REQUESTTABLE.DTC_ID
LEFT JOIN M100 ON M100.CTR_CD = ZTB_DTC_PATROL.CTR_CD AND M100.G_CODE = ZTB_REL_REQUESTTABLE.G_CODE
LEFT JOIN M090 ON M090.CTR_CD =ZTB_DTC_PATROL.CTR_CD AND M090.M_CODE = ZTB_REL_REQUESTTABLE.M_CODE
LEFT JOIN ZTB_REL_TESTTYPE ON ZTB_DTC_PATROL.TEST_TYPE_CODE = ZTB_REL_TESTTYPE.TEST_TYPE_CODE AND ZTB_DTC_PATROL.CTR_CD = ZTB_REL_TESTTYPE.CTR_CD
LEFT JOIN ZTB_REL_TESTTABLE ON ZTB_REL_TESTTABLE.CTR_CD = ZTB_REL_REQUESTTABLE.CTR_CD AND  ZTB_REL_TESTTABLE.TEST_CODE = ZTB_REL_REQUESTTABLE.TEST_CODE
LEFT JOIN ZTBWORKPOSITION ON ZTBWORKPOSITION.CTR_CD = ZTB_REL_REQUESTTABLE.CTR_CD AND ZTBWORKPOSITION.WORK_POSITION_CODE = ZTB_REL_REQUESTTABLE.WORK_POSITION_CODE
LEFT JOIN P400 ON ZTB_REL_REQUESTTABLE.CTR_CD = P400.CTR_CD AND ZTB_REL_REQUESTTABLE.PROD_REQUEST_NO = P400.PROD_REQUEST_NO AND ZTB_REL_REQUESTTABLE.PROD_REQUEST_DATE = P400.PROD_REQUEST_DATE
LEFT JOIN M110 ON P400.CTR_CD = M110.CTR_CD AND P400.CUST_CD = M110.CUST_CD
LEFT JOIN I222 ON I222.CTR_CD = ZTB_REL_REQUESTTABLE.CTR_CD AND I222.M_LOT_NO = ZTB_REL_REQUESTTABLE.M_LOT_NO
LEFT JOIN M110 M1102 ON M1102.CTR_CD = I222.CTR_CD AND M1102.CUST_CD = I222.CUST_CD
WHERE ZTB_DTC_PATROL.CTR_CD='${DATA.CTR_CD}' AND ZTB_DTC_PATROL.INS_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE} 23:59:59'
ORDER BY ZTB_DTC_PATROL.INS_DATE DESC
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.updateMWidthResult = async (req, res, DATA) => {
  console.log('vao update mwidth')
  let checkkq = "OK";
  let setpdQuery = `
      UPDATE IQC1_TABLE SET M_WIDTH = '${DATA.M_WIDTH}' WHERE IQC1_ID = ${DATA.IQC1_ID}
  `;
  console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.updateThickness = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
UPDATE IQC1_TABLE SET THICKNESS = '${DATA.THICKNESS}' WHERE IQC1_ID = ${DATA.IQC1_ID}
  `;
  console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.getMWidthAndThicknessResult = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
SELECT M_WIDTH, THICKNESS FROM IQC1_TABLE WHERE IQC1_ID = ${DATA.IQC1_ID}
  `;
  console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.update_M_WIDTH_AUTO_IQC1 = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
  MERGE INTO IQC1_TABLE 
  USING
  (
  SELECT IQC1_TABLE.IQC1_ID, IQC1_TABLE.M_CODE, M090.WIDTH_CD FROM IQC1_TABLE
  LEFT JOIN M090 ON IQC1_TABLE.M_CODE = M090.M_CODE
  WHERE IQC1_ID = ${DATA.IQC1_ID}
  ) AS SRC_TB
  ON (IQC1_TABLE.IQC1_ID = SRC_TB.IQC1_ID)
  WHEN MATCHED THEN
  UPDATE
  SET IQC1_TABLE.M_WIDTH = SRC_TB.WIDTH_CD;
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.checkM_LOT_NO = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
SELECT * FROM I222 WHERE M_LOT_NO='${DATA.M_LOT_NO}' AND CTR_CD='${DATA.CTR_CD}'
  `;
  console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.common = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
SELECT MAX(ID) FROM HOLDING_TB
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.common = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
SELECT MAX(ID) FROM HOLDING_TB
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
