const { queryDB, queryDB_New } = require("../config/database");
const moment = require("moment");
const { removeVietnameseTones } = require("../utils/sqlUtils");
exports.diemdanhnhom = async (req, res, DATA) => {
  let kqua;
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let JOB_NAME = req.payload_data["JOB_NAME"];
  let $team_name = DATA.team_name_list;
  let $vitrilamviec = req.payload_data["ATT_GROUP_CODE"];
  let $subdeptname = req.payload_data["SUBDEPTNAME"];
  let $condition = "";
  switch ($team_name) {
    case 0:
      $condition = " AND ZTBEMPLINFO.WORK_SHIFT_CODE <> 2";
      break;
    case 1:
      $condition = " AND ZTBEMPLINFO.WORK_SHIFT_CODE <> 1";
      break;
    case 2:
      $condition = " AND ZTBEMPLINFO.WORK_SHIFT_CODE =1";
      break;
    case 3:
      $condition = " AND ZTBEMPLINFO.WORK_SHIFT_CODE =2";
      break;
    case 4:
      $condition = " AND ZTBEMPLINFO.WORK_SHIFT_CODE =0";
      break;
    case 5:
      $condition = "";
      break;
  }
  if (
    JOB_NAME == "Leader" ||
    JOB_NAME == "Sub Leader" ||
    JOB_NAME == "Dept Staff" ||
    JOB_NAME == "ADMIN"
  ) {
    var today = new Date();
    let today_format = moment().format("YYYY-MM-DD");
    let tradiemdanhQuery = `DECLARE @tradate DATE SET @tradate='${today_format}' SELECT ZTBEMPLINFO.CALV, ZTBEMPLINFO.EMPL_NO as id,ZTBEMPLINFO.EMPL_NO,CMS_ID,MIDLAST_NAME,FIRST_NAME,PHONE_NUMBER,SEX_NAME,WORK_STATUS_NAME,FACTORY_NAME,JOB_NAME,WORK_SHIF_NAME,ZTBEMPLINFO.WORK_POSITION_CODE, WORK_POSITION_NAME,SUBDEPTNAME,MAINDEPTNAME,REQUEST_DATE,ZTBOFFREGISTRATIONTB_1.APPLY_DATE,APPROVAL_STATUS,OFF_ID,CA_NGHI,ON_OFF,OVERTIME_INFO,OVERTIME, REASON_NAME, ZTBOFFREGISTRATIONTB_1.REMARK FROM ZTBEMPLINFO LEFT JOIN ZTBSEX ON (ZTBSEX.SEX_CODE = ZTBEMPLINFO.SEX_CODE AND ZTBSEX.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBWORKSTATUS ON(ZTBWORKSTATUS.WORK_STATUS_CODE = ZTBEMPLINFO.WORK_STATUS_CODE AND ZTBWORKSTATUS.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBFACTORY ON (ZTBFACTORY.FACTORY_CODE = ZTBEMPLINFO.FACTORY_CODE AND ZTBFACTORY.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBJOB ON (ZTBJOB.JOB_CODE = ZTBEMPLINFO.JOB_CODE AND ZTBJOB.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBPOSITION ON (ZTBPOSITION.POSITION_CODE = ZTBEMPLINFO.POSITION_CODE AND ZTBPOSITION.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBWORKSHIFT ON (ZTBWORKSHIFT.WORK_SHIFT_CODE = ZTBEMPLINFO.WORK_SHIFT_CODE AND ZTBWORKSHIFT.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBWORKPOSITION ON (ZTBWORKPOSITION.WORK_POSITION_CODE = ZTBEMPLINFO.WORK_POSITION_CODE AND ZTBWORKPOSITION.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBSUBDEPARTMENT ON (ZTBSUBDEPARTMENT.SUBDEPTCODE = ZTBWORKPOSITION.SUBDEPTCODE AND ZTBSUBDEPARTMENT.CTR_CD = ZTBWORKPOSITION.CTR_CD) LEFT JOIN ZTBMAINDEPARMENT ON (ZTBMAINDEPARMENT.MAINDEPTCODE = ZTBSUBDEPARTMENT.MAINDEPTCODE AND ZTBMAINDEPARMENT.CTR_CD = ZTBSUBDEPARTMENT.CTR_CD) LEFT JOIN ( SELECT * FROM ZTBOFFREGISTRATIONTB WHERE ZTBOFFREGISTRATIONTB.APPLY_DATE = @tradate ) AS ZTBOFFREGISTRATIONTB_1 ON (ZTBOFFREGISTRATIONTB_1.EMPL_NO = ZTBEMPLINFO.EMPL_NO AND ZTBOFFREGISTRATIONTB_1.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN (	SELECT * FROM ZTBATTENDANCETB WHERE APPLY_DATE= @tradate ) AS ZTBATTENDANCETB_1 ON (ZTBATTENDANCETB_1.EMPL_NO = ZTBEMPLINFO.EMPL_NO AND ZTBATTENDANCETB_1.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBREASON ON (ZTBREASON.REASON_CODE = ZTBOFFREGISTRATIONTB_1.REASON_CODE AND ZTBREASON.CTR_CD = ZTBOFFREGISTRATIONTB_1.CTR_CD) WHERE ZTBEMPLINFO.CTR_CD='${DATA.CTR_CD}' AND ZTBWORKPOSITION.ATT_GROUP_CODE = ${$vitrilamviec} AND ZTBEMPLINFO.WORK_STATUS_CODE <> 2 AND ZTBEMPLINFO.WORK_STATUS_CODE <> 0 ${$condition}`;
    if (JOB_NAME == "Leader")
      tradiemdanhQuery = `DECLARE @tradate DATE SET @tradate='${today_format}' SELECT ZTBEMPLINFO.CALV, ZTBEMPLINFO.EMPL_NO as id,ZTBEMPLINFO.EMPL_NO,CMS_ID,MIDLAST_NAME,FIRST_NAME,PHONE_NUMBER,SEX_NAME,WORK_STATUS_NAME,FACTORY_NAME,JOB_NAME,WORK_SHIF_NAME,ZTBEMPLINFO.WORK_POSITION_CODE, WORK_POSITION_NAME,SUBDEPTNAME,MAINDEPTNAME,REQUEST_DATE,ZTBOFFREGISTRATIONTB_1.APPLY_DATE,APPROVAL_STATUS,OFF_ID,CA_NGHI,ON_OFF,OVERTIME_INFO,OVERTIME, REASON_NAME, ZTBOFFREGISTRATIONTB_1.REMARK FROM ZTBEMPLINFO LEFT JOIN ZTBSEX ON (ZTBSEX.SEX_CODE = ZTBEMPLINFO.SEX_CODE AND ZTBSEX.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBWORKSTATUS ON(ZTBWORKSTATUS.WORK_STATUS_CODE = ZTBEMPLINFO.WORK_STATUS_CODE AND ZTBWORKSTATUS.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBFACTORY ON (ZTBFACTORY.FACTORY_CODE = ZTBEMPLINFO.FACTORY_CODE AND ZTBFACTORY.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBJOB ON (ZTBJOB.JOB_CODE = ZTBEMPLINFO.JOB_CODE AND ZTBJOB.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBPOSITION ON (ZTBPOSITION.POSITION_CODE = ZTBEMPLINFO.POSITION_CODE AND ZTBPOSITION.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBWORKSHIFT ON (ZTBWORKSHIFT.WORK_SHIFT_CODE = ZTBEMPLINFO.WORK_SHIFT_CODE AND ZTBWORKSHIFT.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBWORKPOSITION ON (ZTBWORKPOSITION.WORK_POSITION_CODE = ZTBEMPLINFO.WORK_POSITION_CODE AND ZTBWORKPOSITION.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBSUBDEPARTMENT ON (ZTBSUBDEPARTMENT.SUBDEPTCODE = ZTBWORKPOSITION.SUBDEPTCODE AND ZTBSUBDEPARTMENT.CTR_CD = ZTBWORKPOSITION.CTR_CD) LEFT JOIN ZTBMAINDEPARMENT ON (ZTBMAINDEPARMENT.MAINDEPTCODE = ZTBSUBDEPARTMENT.MAINDEPTCODE AND ZTBMAINDEPARMENT.CTR_CD = ZTBSUBDEPARTMENT.CTR_CD) LEFT JOIN ( SELECT * FROM ZTBOFFREGISTRATIONTB WHERE ZTBOFFREGISTRATIONTB.APPLY_DATE = @tradate ) AS ZTBOFFREGISTRATIONTB_1 ON (ZTBOFFREGISTRATIONTB_1.EMPL_NO = ZTBEMPLINFO.EMPL_NO AND ZTBOFFREGISTRATIONTB_1.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN (	SELECT * FROM ZTBATTENDANCETB WHERE APPLY_DATE= @tradate ) AS ZTBATTENDANCETB_1 ON (ZTBATTENDANCETB_1.EMPL_NO = ZTBEMPLINFO.EMPL_NO AND ZTBATTENDANCETB_1.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBREASON ON (ZTBREASON.REASON_CODE = ZTBOFFREGISTRATIONTB_1.REASON_CODE AND ZTBREASON.CTR_CD = ZTBOFFREGISTRATIONTB_1.CTR_CD) WHERE ZTBEMPLINFO.CTR_CD='${DATA.CTR_CD}' AND   (ZTBWORKPOSITION.ATT_GROUP_CODE = ${$vitrilamviec} OR ZTBSUBDEPARTMENT.SUBDEPTNAME = '${$subdeptname}') AND ZTBEMPLINFO.WORK_STATUS_CODE <> 2 AND ZTBEMPLINFO.WORK_STATUS_CODE <> 0 ${$condition}`;
    //console.log(tradiemdanhQuery);
    checkkq = await queryDB(tradiemdanhQuery);
    res.send(checkkq);
  } else {
    res.send({ tk_status: "NG", message: "Không phải leader" });
  }
};
exports.diemdanhnhomBP = async (req, res, DATA) => {
  let kqua;
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let MAINDEPTCODE = req.payload_data["MAINDEPTCODE"];
  let JOB_NAME = req.payload_data["JOB_NAME"];
  let $team_name = DATA.team_name_list;
  let $vitrilamviec = req.payload_data["ATT_GROUP_CODE"];
  let $subdeptname = req.payload_data["SUBDEPTNAME"];
  let $condition = "";
  switch ($team_name) {
    case 0:
      $condition = " AND ZTBEMPLINFO.WORK_SHIFT_CODE <> 2";
      break;
    case 1:
      $condition = " AND ZTBEMPLINFO.WORK_SHIFT_CODE <> 1";
      break;
    case 2:
      $condition = " AND ZTBEMPLINFO.WORK_SHIFT_CODE =1";
      break;
    case 3:
      $condition = " AND ZTBEMPLINFO.WORK_SHIFT_CODE =2";
      break;
    case 4:
      $condition = " AND ZTBEMPLINFO.WORK_SHIFT_CODE =0";
      break;
    case 5:
      $condition = "";
      break;
  }
  if (
    JOB_NAME == "Leader" ||
    JOB_NAME == "Sub Leader" ||
    JOB_NAME == "Dept Staff" ||
    JOB_NAME == "ADMIN"
  ) {
    var today = new Date();
    let today_format = moment().format("YYYY-MM-DD");
    let tradiemdanhQuery = `DECLARE @tradate DATE SET @tradate='${today_format}' SELECT ZTBEMPLINFO.CALV, ZTBEMPLINFO.EMPL_NO as id,ZTBEMPLINFO.EMPL_NO,CMS_ID,MIDLAST_NAME,FIRST_NAME,PHONE_NUMBER,SEX_NAME,WORK_STATUS_NAME,FACTORY_NAME,JOB_NAME,WORK_SHIF_NAME,ZTBEMPLINFO.WORK_POSITION_CODE, WORK_POSITION_NAME,SUBDEPTNAME,MAINDEPTNAME,REQUEST_DATE,ZTBOFFREGISTRATIONTB_1.APPLY_DATE,APPROVAL_STATUS,OFF_ID,CA_NGHI,ON_OFF,OVERTIME_INFO,OVERTIME, REASON_NAME, ZTBOFFREGISTRATIONTB_1.REMARK FROM ZTBEMPLINFO LEFT JOIN ZTBSEX ON (ZTBSEX.SEX_CODE = ZTBEMPLINFO.SEX_CODE AND ZTBSEX.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBWORKSTATUS ON(ZTBWORKSTATUS.WORK_STATUS_CODE = ZTBEMPLINFO.WORK_STATUS_CODE AND ZTBWORKSTATUS.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBFACTORY ON (ZTBFACTORY.FACTORY_CODE = ZTBEMPLINFO.FACTORY_CODE AND ZTBFACTORY.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBJOB ON (ZTBJOB.JOB_CODE = ZTBEMPLINFO.JOB_CODE AND ZTBJOB.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBPOSITION ON (ZTBPOSITION.POSITION_CODE = ZTBEMPLINFO.POSITION_CODE AND ZTBPOSITION.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBWORKSHIFT ON (ZTBWORKSHIFT.WORK_SHIFT_CODE = ZTBEMPLINFO.WORK_SHIFT_CODE AND ZTBWORKSHIFT.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBWORKPOSITION ON (ZTBWORKPOSITION.WORK_POSITION_CODE = ZTBEMPLINFO.WORK_POSITION_CODE AND ZTBWORKPOSITION.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBSUBDEPARTMENT ON (ZTBSUBDEPARTMENT.SUBDEPTCODE = ZTBWORKPOSITION.SUBDEPTCODE AND ZTBSUBDEPARTMENT.CTR_CD = ZTBWORKPOSITION.CTR_CD) LEFT JOIN ZTBMAINDEPARMENT ON (ZTBMAINDEPARMENT.MAINDEPTCODE = ZTBSUBDEPARTMENT.MAINDEPTCODE AND ZTBMAINDEPARMENT.CTR_CD = ZTBSUBDEPARTMENT.CTR_CD) LEFT JOIN ( SELECT * FROM ZTBOFFREGISTRATIONTB WHERE ZTBOFFREGISTRATIONTB.APPLY_DATE = @tradate ) AS ZTBOFFREGISTRATIONTB_1 ON (ZTBOFFREGISTRATIONTB_1.EMPL_NO = ZTBEMPLINFO.EMPL_NO AND ZTBOFFREGISTRATIONTB_1.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN (	SELECT * FROM ZTBATTENDANCETB WHERE APPLY_DATE= @tradate ) AS ZTBATTENDANCETB_1 ON (ZTBATTENDANCETB_1.EMPL_NO = ZTBEMPLINFO.EMPL_NO AND ZTBATTENDANCETB_1.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBREASON ON (ZTBREASON.REASON_CODE = ZTBOFFREGISTRATIONTB_1.REASON_CODE AND ZTBREASON.CTR_CD = ZTBOFFREGISTRATIONTB_1.CTR_CD) WHERE ZTBEMPLINFO.CTR_CD='${DATA.CTR_CD}' AND ZTBMAINDEPARMENT.MAINDEPTCODE=${MAINDEPTCODE} AND ZTBEMPLINFO.WORK_STATUS_CODE <> 2 AND ZTBEMPLINFO.WORK_STATUS_CODE <> 0 ${$condition}`;
    checkkq = await queryDB(tradiemdanhQuery);
    res.send(checkkq);
  } else {
    res.send({ tk_status: "NG", message: "Không phải leader" });
  }
};
exports.diemdanhnhomNS = async (req, res, DATA) => {
  let kqua;
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let MAINDEPTCODE = req.payload_data["MAINDEPTCODE"];
  let JOB_NAME = req.payload_data["JOB_NAME"];
  let $team_name = DATA.team_name_list;
  let $vitrilamviec = req.payload_data["ATT_GROUP_CODE"];
  let $subdeptname = req.payload_data["SUBDEPTNAME"];
  let $condition = "";
  switch ($team_name) {
    case 0:
      $condition = " AND ZTBEMPLINFO.WORK_SHIFT_CODE <> 2";
      break;
    case 1:
      $condition = " AND ZTBEMPLINFO.WORK_SHIFT_CODE <> 1";
      break;
    case 2:
      $condition = " AND ZTBEMPLINFO.WORK_SHIFT_CODE =1";
      break;
    case 3:
      $condition = " AND ZTBEMPLINFO.WORK_SHIFT_CODE =2";
      break;
    case 4:
      $condition = " AND ZTBEMPLINFO.WORK_SHIFT_CODE =0";
      break;
    case 5:
      $condition = "";
      break;
  }
  if (
    JOB_NAME == "Leader" ||
    JOB_NAME == "Sub Leader" ||
    JOB_NAME == "Dept Staff" ||
    JOB_NAME == "ADMIN"
  ) {
    var today = new Date();
    let today_format = moment().format("YYYY-MM-DD");
    let tradiemdanhQuery = `DECLARE @tradate DATE SET @tradate='${today_format}' SELECT ZTBEMPLINFO.CALV, ZTBEMPLINFO.EMPL_NO as id,ZTBEMPLINFO.EMPL_NO,CMS_ID,MIDLAST_NAME,FIRST_NAME,PHONE_NUMBER,SEX_NAME,WORK_STATUS_NAME,FACTORY_NAME,JOB_NAME,WORK_SHIF_NAME,ZTBEMPLINFO.WORK_POSITION_CODE, WORK_POSITION_NAME,SUBDEPTNAME,MAINDEPTNAME,REQUEST_DATE,ZTBOFFREGISTRATIONTB_1.APPLY_DATE,APPROVAL_STATUS,OFF_ID,CA_NGHI,ON_OFF,OVERTIME_INFO,OVERTIME, REASON_NAME, ZTBOFFREGISTRATIONTB_1.REMARK FROM ZTBEMPLINFO LEFT JOIN ZTBSEX ON (ZTBSEX.SEX_CODE = ZTBEMPLINFO.SEX_CODE AND ZTBSEX.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBWORKSTATUS ON(ZTBWORKSTATUS.WORK_STATUS_CODE = ZTBEMPLINFO.WORK_STATUS_CODE AND ZTBWORKSTATUS.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBFACTORY ON (ZTBFACTORY.FACTORY_CODE = ZTBEMPLINFO.FACTORY_CODE AND ZTBFACTORY.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBJOB ON (ZTBJOB.JOB_CODE = ZTBEMPLINFO.JOB_CODE AND ZTBJOB.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBPOSITION ON (ZTBPOSITION.POSITION_CODE = ZTBEMPLINFO.POSITION_CODE AND ZTBPOSITION.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBWORKSHIFT ON (ZTBWORKSHIFT.WORK_SHIFT_CODE = ZTBEMPLINFO.WORK_SHIFT_CODE AND ZTBWORKSHIFT.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBWORKPOSITION ON (ZTBWORKPOSITION.WORK_POSITION_CODE = ZTBEMPLINFO.WORK_POSITION_CODE AND ZTBWORKPOSITION.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBSUBDEPARTMENT ON (ZTBSUBDEPARTMENT.SUBDEPTCODE = ZTBWORKPOSITION.SUBDEPTCODE AND ZTBSUBDEPARTMENT.CTR_CD = ZTBWORKPOSITION.CTR_CD) LEFT JOIN ZTBMAINDEPARMENT ON (ZTBMAINDEPARMENT.MAINDEPTCODE = ZTBSUBDEPARTMENT.MAINDEPTCODE AND ZTBMAINDEPARMENT.CTR_CD = ZTBSUBDEPARTMENT.CTR_CD) LEFT JOIN ( SELECT * FROM ZTBOFFREGISTRATIONTB WHERE ZTBOFFREGISTRATIONTB.APPLY_DATE = @tradate ) AS ZTBOFFREGISTRATIONTB_1 ON (ZTBOFFREGISTRATIONTB_1.EMPL_NO = ZTBEMPLINFO.EMPL_NO AND ZTBOFFREGISTRATIONTB_1.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN (	SELECT * FROM ZTBATTENDANCETB WHERE APPLY_DATE= @tradate ) AS ZTBATTENDANCETB_1 ON (ZTBATTENDANCETB_1.EMPL_NO = ZTBEMPLINFO.EMPL_NO AND ZTBATTENDANCETB_1.CTR_CD = ZTBEMPLINFO.CTR_CD) LEFT JOIN ZTBREASON ON (ZTBREASON.REASON_CODE = ZTBOFFREGISTRATIONTB_1.REASON_CODE AND ZTBREASON.CTR_CD = ZTBOFFREGISTRATIONTB_1.CTR_CD) WHERE ZTBEMPLINFO.CTR_CD='${DATA.CTR_CD}' AND ZTBEMPLINFO.WORK_STATUS_CODE <> 2 AND ZTBEMPLINFO.WORK_STATUS_CODE <> 0 ${$condition}`;
    checkkq = await queryDB(tradiemdanhQuery);
    res.send(checkkq);
  } else {
    res.send({ tk_status: "NG", message: "Không phải leader" });
  }
};
exports.setdiemdanhnhom = async (req, res, DATA) => {
  let kqua;
  let JOB_NAME = req.payload_data["JOB_NAME"];
  let CURRENT_TEAM = DATA.CURRENT_TEAM;
  let CURRENT_CA = DATA.CURRENT_CA;
  let diemdanhvalue = DATA.diemdanhvalue;
  let EMPL_NO = DATA.EMPL_NO;
  if (
    JOB_NAME == "Leader" ||
    JOB_NAME == "Sub Leader" ||
    JOB_NAME == "Dept Staff" ||
    JOB_NAME == "ADMIN"
  ) {
    var today = new Date();
    var today_format = moment().format("YYYY-MM-DD");
    let checkAttQuery = `SELECT ON_OFF FROM ZTBATTENDANCETB WHERE CTR_CD='${DATA.CTR_CD}' AND EMPL_NO='${EMPL_NO}' AND APPLY_DATE='${today_format}'`;
    let checkAttKQ = await queryDB(checkAttQuery);
    if (checkAttKQ.tk_status === "NG") {
      let insert_diemdanhQuery = `INSERT INTO ZTBATTENDANCETB (CTR_CD, EMPL_NO, APPLY_DATE, ON_OFF, CURRENT_TEAM, CURRENT_CA) VALUES ('${DATA.CTR_CD}', '${EMPL_NO}', '${today_format}', ${diemdanhvalue}, '${CURRENT_TEAM}', '${CURRENT_CA}')`;
      console.log(insert_diemdanhQuery);
      let insert_dd = await queryDB(insert_diemdanhQuery);
      res.send(insert_dd);
    } else {
      let update_diemdanhQuery = `UPDATE ZTBATTENDANCETB SET ON_OFF = ${diemdanhvalue}, CURRENT_TEAM='${CURRENT_TEAM}' WHERE CTR_CD='${DATA.CTR_CD}' AND EMPL_NO='${EMPL_NO}' AND APPLY_DATE='${today_format}'`;
      console.log(update_diemdanhQuery);
      let update_dd = await queryDB(update_diemdanhQuery);
      res.send(update_dd);
    }
  } else {
    res.send("NO_LEADER");
  }
};
exports.setdiemdanhnhom2 = async (req, res, DATA) => {
  let kqua;
  let JOB_NAME = req.payload_data["JOB_NAME"];
  let CURRENT_TEAM = DATA.CURRENT_TEAM;
  let CURRENT_CA = DATA.CURRENT_CA;
  let diemdanhvalue = DATA.diemdanhvalue;
  let EMPL_NO = DATA.EMPL_NO;
  if (
    JOB_NAME == "Leader" ||
    JOB_NAME == "Sub Leader" ||
    JOB_NAME == "Dept Staff" ||
    JOB_NAME == "ADMIN"
  ) {
    var today = new Date();
    var today_format = moment().format("YYYY-MM-DD");
    let checkAttQuery = `SELECT ON_OFF FROM ZTBATTENDANCETB WHERE CTR_CD='${DATA.CTR_CD}' AND EMPL_NO='${DATA.EMPL_NO}' AND APPLY_DATE='${DATA.APPLY_DATE}'`;
    let checkAttKQ = await queryDB(checkAttQuery);
    if (checkAttKQ.tk_status === "NG") {
      let insert_diemdanhQuery = `INSERT INTO ZTBATTENDANCETB (CTR_CD, EMPL_NO, APPLY_DATE, ON_OFF, CURRENT_TEAM, CURRENT_CA) VALUES ('${DATA.CTR_CD}', '${DATA.EMPL_NO}', '${DATA.APPLY_DATE}', ${diemdanhvalue}, '${CURRENT_TEAM}', '${CURRENT_CA}')`;
      let insert_dd = await queryDB(insert_diemdanhQuery);
      res.send(insert_dd);
    } else {
      let update_diemdanhQuery = `UPDATE ZTBATTENDANCETB SET ON_OFF = ${diemdanhvalue}, CURRENT_TEAM='${CURRENT_TEAM}' WHERE CTR_CD='${DATA.CTR_CD}' AND EMPL_NO='${DATA.EMPL_NO}' AND APPLY_DATE='${DATA.APPLY_DATE}'`;
      let update_dd = await queryDB(update_diemdanhQuery);
      res.send(update_dd);
    }
  } else {
    res.send("NO_LEADER");
  }
};
exports.dangkytangcanhom = async (req, res, DATA) => {
  let kqua;
  let EMPL_NO = DATA.EMPL_NO;
  let OVERTIME_INFO = DATA.overtime_info;
  let tangcavalue = DATA.tangcavalue;
  var today = new Date();
  var today_format = moment().format("YYYY-MM-DD");
  let checkkq = "OK";
  let checkAttQuery = `SELECT ON_OFF FROM ZTBATTENDANCETB WHERE CTR_CD='${DATA.CTR_CD}' AND EMPL_NO='${EMPL_NO}' AND APPLY_DATE='${today_format}'`;
  let checkAttKQ = await queryDB(checkAttQuery);
  if (checkAttKQ.tk_status == "OK") {
    let query = `UPDATE ZTBATTENDANCETB SET OVERTIME=${tangcavalue}, OVERTIME_INFO='${OVERTIME_INFO}' WHERE CTR_CD='${DATA.CTR_CD}' AND EMPL_NO='${EMPL_NO}' AND ON_OFF=1 AND APPLY_DATE='${today_format}'`;
    kqua = await queryDB(query);
    if (kqua.tk_status == "OK") {
      res.send(kqua);
    } else {
      res.send({
        tk_status: "NG",
        message: "Chưa điểm danh nên không tăng ca được",
      });
    }
  } else {
    res.send({
      tk_status: "NG",
      message: "Chưa điểm danh nên không tăng ca được",
    });
  }
};
exports.setteamnhom = async (req, res, DATA) => {
  let kqua;
  let EMPL_NO = DATA.EMPL_NO;
  let JOB_NAME = req.payload_data["JOB_NAME"];
  let $teamvalue = DATA.teamvalue;
  if (
    JOB_NAME == "Leader" ||
    JOB_NAME == "Sub Leader" ||
    JOB_NAME == "Dept Staff" ||
    JOB_NAME == "ADMIN"
  ) {
    var today = new Date();
    let checkkq = "OK";
    let setpdQuery = `UPDATE ZTBEMPLINFO SET WORK_SHIFT_CODE=${$teamvalue} WHERE CTR_CD='${DATA.CTR_CD}' AND EMPL_NO='${EMPL_NO}'`;
    let updateam_diemdanh = `UPDATE ZTBATTENDANCETB SET CURRENT_TEAM=${$teamvalue} WHERE CTR_CD='${DATA.CTR_CD}' AND APPLY_DATE ='${moment().format("YYYY-MM-DD")}' AND EMPL_NO='${DATA.EMPL_NO}'`;
    checkkq = await queryDB(setpdQuery);
    checkkq2 = await queryDB(updateam_diemdanh);
    res.send(checkkq);
  } else {
    res.send({ tk_status: "NG", message: "Không phải leader" });
  }
};
exports.dangkynghi2 = async (req, res, DATA) => {
  let kqua;
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let START_DATE = DATA.ngaybatdau;
  let END_DATE = DATA.ngayketthuc;
  let REASON_CODE = DATA.reason_code;
  let REMARK_CONTENT = DATA.remark_content;
  let CANGHI = DATA.canghi;
  var from = new Date(START_DATE);
  var to = new Date(END_DATE);
  var today = new Date();
  var today_format = moment().format("YYYY-MM-DD");
  let checkkq = "OK";
  if (CANGHI === 1) {
    for (var day = from; day <= to; day.setDate(day.getDate() + 1)) {
      let apply_date = moment(day).format("YYYY-MM-DD");
      let query = `INSERT INTO ZTBOFFREGISTRATIONTB (CTR_CD,EMPL_NO,REQUEST_DATE,APPLY_DATE,REASON_CODE,REMARK,APPROVAL_STATUS,CA_NGHI) VALUES ('${DATA.CTR_CD}','${EMPL_NO}','${today_format}','${apply_date}',${REASON_CODE},N'${REMARK_CONTENT}',2,${CANGHI})`;
      kqua = await queryDB(query);
      if (kqua.tk_status != "OK") checkkq = "NG";
    }
  } else if (CANGHI === 2) {
    for (var day = from; day < to; day.setDate(day.getDate() + 1)) {
      let apply_date = moment(day).format("YYYY-MM-DD");
      let query = `INSERT INTO ZTBOFFREGISTRATIONTB (CTR_CD,EMPL_NO,REQUEST_DATE,APPLY_DATE,REASON_CODE,REMARK,APPROVAL_STATUS,CA_NGHI) VALUES ('${DATA.CTR_CD}','${EMPL_NO}','${today_format}','${apply_date}',${REASON_CODE},N'${REMARK_CONTENT}',2,${CANGHI})`;
      kqua = await queryDB(query);
      if (kqua.tk_status != "OK") checkkq = "NG";
    }
  }
  if (checkkq === "OK") {
    res.send({ tk_status: "OK" });
  } else {
    res.send({
      tk_status: "NG",
      message: "Ngày đã được đăng ký rồi, không thể đăng ký lại",
    });
  }
};
exports.dangkynghi2_AUTO = async (req, res, DATA) => {
  let kqua;
  let EMPL_NO = DATA.EMPL_NO;
  let START_DATE = DATA.ngaybatdau;
  let END_DATE = DATA.ngayketthuc;
  let REASON_CODE = DATA.reason_code;
  let REMARK_CONTENT = DATA.remark_content;
  let CANGHI = DATA.canghi;
  var from = new Date(START_DATE);
  var to = new Date(END_DATE);
  var today = new Date();
  var today_format = moment().format("YYYY-MM-DD");
  let checkkq = "OK";
  if (CANGHI === 1) {
    for (var day = from; day <= to; day.setDate(day.getDate() + 1)) {
      let apply_date = moment(day).format("YYYY-MM-DD");
      let query = `INSERT INTO ZTBOFFREGISTRATIONTB (CTR_CD,EMPL_NO,REQUEST_DATE,APPLY_DATE,REASON_CODE,REMARK,APPROVAL_STATUS,CA_NGHI) VALUES ('${DATA.CTR_CD}','${EMPL_NO}','${today_format}','${apply_date}',${REASON_CODE},N'${REMARK_CONTENT}',1,${CANGHI})`;
      kqua = await queryDB(query);
      if (kqua.tk_status != "OK") checkkq = "NG";
    }
  } else if (CANGHI === 2) {
    for (var day = from; day < to; day.setDate(day.getDate() + 1)) {
      let apply_date = moment(day).format("YYYY-MM-DD");
      let query = `INSERT INTO ZTBOFFREGISTRATIONTB (CTR_CD,EMPL_NO,REQUEST_DATE,APPLY_DATE,REASON_CODE,REMARK,APPROVAL_STATUS,CA_NGHI) VALUES ('${DATA.CTR_CD}','${EMPL_NO}','${today_format}','${apply_date}',${REASON_CODE},N'${REMARK_CONTENT}',1,${CANGHI})`;
      kqua = await queryDB(query);
      if (kqua.tk_status != "OK") checkkq = "NG";
    }
  }
  if (checkkq === "OK") {
    res.send({ tk_status: "OK" });
  } else {
    res.send({
      tk_status: "NG",
      message: "Ngày đã được đăng ký rồi, không thể đăng ký lại",
    });
  }
};
exports.dangkytangcacanhan = async (req, res, DATA) => {
  let kqua;
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let START_TIME = DATA.over_start;
  let FINISH_TIME = DATA.over_finish;
  let OVERTIME_INFO = START_TIME + "-" + FINISH_TIME;
  if (isNumber(START_TIME) && isNumber(FINISH_TIME)) {
    var today = new Date();
    var today_format = moment().format("YYYY-MM-DD");
    let checkAttQuery = `SELECT ON_OFF FROM ZTBATTENDANCETB WHERE CTR_CD='${DATA.CTR_CD}' AND EMPL_NO='${EMPL_NO}' AND APPLY_DATE='${today_format}'`;
    console.log(checkAttQuery);
    let checkAttKQ = await queryDB(checkAttQuery);
    if (checkAttKQ.tk_status != "NG") {
      let query = `UPDATE ZTBATTENDANCETB SET OVERTIME=1, OVERTIME_INFO='${OVERTIME_INFO}' WHERE CTR_CD='${DATA.CTR_CD}' AND EMPL_NO='${EMPL_NO}' AND ON_OFF=1 AND APPLY_DATE='${today_format}'`;
      console.log(query);
      kqua = await queryDB(query);
      res.send(kqua);
    } else {
      res.send({
        tk_status: "NG",
        message: "Lỗi, chưa điểm danh nên không đăng ký tăng ca được",
      });
    }
  } else {
    res.send({
      tk_status: "NG",
      message: "Lỗi, nhập sai định dạng giờ phút",
    });
  }
};
exports.pheduyetnhom = async (req, res, DATA) => {
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let JOB_NAME = req.payload_data["JOB_NAME"];
  let $vitrilamviec = req.payload_data["ATT_GROUP_CODE"];
  let $subdeptname = req.payload_data["SUBDEPTNAME"];
  if (
    JOB_NAME == "Leader" ||
    JOB_NAME == "Sub Leader" ||
    JOB_NAME == "Dept Staff" ||
    JOB_NAME == "ADMIN"
  ) {
    let kqua;
    let query = "";
    if (JOB_NAME == "Leader") {
      query = `SELECT ZTBOFFREGISTRATIONTB.OFF_ID AS id, ZTBOFFREGISTRATIONTB.CTR_CD,ZTBOFFREGISTRATIONTB.EMPL_NO,ZTBOFFREGISTRATIONTB.REQUEST_DATE,ZTBOFFREGISTRATIONTB.APPLY_DATE,ZTBOFFREGISTRATIONTB.REASON_CODE,ZTBOFFREGISTRATIONTB.REMARK,ZTBOFFREGISTRATIONTB.APPROVAL_STATUS,ZTBOFFREGISTRATIONTB.OFF_ID,ZTBOFFREGISTRATIONTB.CA_NGHI,ZTBEMPLINFO.CMS_ID,ZTBEMPLINFO.FIRST_NAME,ZTBEMPLINFO.MIDLAST_NAME,ZTBEMPLINFO.DOB,ZTBEMPLINFO.HOMETOWN,ZTBEMPLINFO.SEX_CODE,ZTBEMPLINFO.ADD_PROVINCE,ZTBEMPLINFO.ADD_DISTRICT,ZTBEMPLINFO.ADD_COMMUNE,ZTBEMPLINFO.ADD_VILLAGE,ZTBEMPLINFO.PHONE_NUMBER,ZTBEMPLINFO.WORK_START_DATE,ZTBEMPLINFO.PASSWORD,ZTBEMPLINFO.EMAIL,ZTBEMPLINFO.WORK_POSITION_CODE,ZTBEMPLINFO.WORK_SHIFT_CODE,ZTBEMPLINFO.POSITION_CODE,ZTBEMPLINFO.JOB_CODE,ZTBEMPLINFO.FACTORY_CODE,ZTBEMPLINFO.WORK_STATUS_CODE,ZTBEMPLINFO.ONLINE_DATETIME,ZTBSEX.SEX_NAME,ZTBSEX.SEX_NAME_KR,ZTBWORKSTATUS.WORK_STATUS_NAME,ZTBWORKSTATUS.WORK_STATUS_NAME_KR,ZTBFACTORY.FACTORY_NAME,ZTBFACTORY.FACTORY_NAME_KR,ZTBJOB.JOB_NAME,ZTBJOB.JOB_NAME_KR,ZTBPOSITION.POSITION_NAME,ZTBPOSITION.POSITION_NAME_KR,ZTBWORKSHIFT.WORK_SHIF_NAME,ZTBWORKSHIFT.WORK_SHIF_NAME_KR,ZTBWORKPOSITION.SUBDEPTCODE,ZTBWORKPOSITION.WORK_POSITION_NAME,ZTBWORKPOSITION.WORK_POSITION_NAME_KR,ZTBWORKPOSITION.ATT_GROUP_CODE,ZTBSUBDEPARTMENT.MAINDEPTCODE,ZTBSUBDEPARTMENT.SUBDEPTNAME,ZTBSUBDEPARTMENT.SUBDEPTNAME_KR,ZTBMAINDEPARMENT.MAINDEPTNAME,ZTBMAINDEPARMENT.MAINDEPTNAME_KR,ZTBREASON.REASON_NAME,ZTBREASON.REASON_NAME_KR,ZTBATTENDANCETB.ON_OFF,ZTBATTENDANCETB.OVERTIME_INFO,ZTBATTENDANCETB.OVERTIME FROM ZTBOFFREGISTRATIONTB JOIN ZTBEMPLINFO ON (ZTBEMPLINFO.EMPL_NO = ZTBOFFREGISTRATIONTB.EMPL_NO AND ZTBEMPLINFO.CTR_CD = ZTBOFFREGISTRATIONTB.CTR_CD) JOIN ZTBSEX ON (ZTBSEX.SEX_CODE = ZTBEMPLINFO.SEX_CODE AND ZTBSEX.CTR_CD = ZTBEMPLINFO.CTR_CD) JOIN ZTBWORKSTATUS ON(ZTBWORKSTATUS.WORK_STATUS_CODE = ZTBEMPLINFO.WORK_STATUS_CODE AND ZTBWORKSTATUS.CTR_CD = ZTBEMPLINFO.CTR_CD) JOIN ZTBFACTORY ON (ZTBFACTORY.FACTORY_CODE = ZTBEMPLINFO.FACTORY_CODE AND ZTBFACTORY.CTR_CD = ZTBEMPLINFO.CTR_CD) JOIN ZTBJOB ON (ZTBJOB.JOB_CODE = ZTBEMPLINFO.JOB_CODE AND ZTBJOB.CTR_CD = ZTBEMPLINFO.CTR_CD) JOIN ZTBPOSITION ON (ZTBPOSITION.POSITION_CODE = ZTBEMPLINFO.POSITION_CODE AND ZTBPOSITION.CTR_CD = ZTBEMPLINFO.CTR_CD) JOIN ZTBWORKSHIFT ON (ZTBWORKSHIFT.WORK_SHIFT_CODE = ZTBEMPLINFO.WORK_SHIFT_CODE AND ZTBWORKSHIFT.CTR_CD = ZTBEMPLINFO.CTR_CD) JOIN ZTBWORKPOSITION ON (ZTBWORKPOSITION.WORK_POSITION_CODE = ZTBEMPLINFO.WORK_POSITION_CODE AND ZTBWORKPOSITION.CTR_CD = ZTBEMPLINFO.CTR_CD) JOIN ZTBSUBDEPARTMENT ON (ZTBSUBDEPARTMENT.SUBDEPTCODE = ZTBWORKPOSITION.SUBDEPTCODE AND ZTBSUBDEPARTMENT.CTR_CD = ZTBWORKPOSITION.CTR_CD) JOIN ZTBMAINDEPARMENT ON (ZTBMAINDEPARMENT.MAINDEPTCODE = ZTBSUBDEPARTMENT.MAINDEPTCODE AND ZTBMAINDEPARMENT.CTR_CD = ZTBSUBDEPARTMENT.CTR_CD) JOIN ZTBREASON ON (ZTBREASON.REASON_CODE = ZTBOFFREGISTRATIONTB.REASON_CODE AND ZTBREASON.CTR_CD = ZTBOFFREGISTRATIONTB.CTR_CD) LEFT JOIN ZTBATTENDANCETB ON (ZTBATTENDANCETB.APPLY_DATE = ZTBOFFREGISTRATIONTB.APPLY_DATE AND ZTBATTENDANCETB.EMPL_NO = ZTBOFFREGISTRATIONTB.EMPL_NO AND ZTBATTENDANCETB.CTR_CD = ZTBOFFREGISTRATIONTB.CTR_CD) WHERE ZTBOFFREGISTRATIONTB.CTR_CD='${DATA.CTR_CD}' AND  (ZTBSUBDEPARTMENT.SUBDEPTNAME='${$subdeptname}' OR ZTBWORKPOSITION.ATT_GROUP_CODE='${$vitrilamviec}') ORDER BY OFF_ID DESC`;
    } else {
      query = `SELECT ZTBOFFREGISTRATIONTB.OFF_ID AS id,ZTBOFFREGISTRATIONTB.CTR_CD,ZTBOFFREGISTRATIONTB.EMPL_NO,ZTBOFFREGISTRATIONTB.REQUEST_DATE,ZTBOFFREGISTRATIONTB.APPLY_DATE,ZTBOFFREGISTRATIONTB.REASON_CODE,ZTBOFFREGISTRATIONTB.REMARK,ZTBOFFREGISTRATIONTB.APPROVAL_STATUS,ZTBOFFREGISTRATIONTB.OFF_ID,ZTBOFFREGISTRATIONTB.CA_NGHI,ZTBEMPLINFO.CMS_ID,ZTBEMPLINFO.FIRST_NAME,ZTBEMPLINFO.MIDLAST_NAME,ZTBEMPLINFO.DOB,ZTBEMPLINFO.HOMETOWN,ZTBEMPLINFO.SEX_CODE,ZTBEMPLINFO.ADD_PROVINCE,ZTBEMPLINFO.ADD_DISTRICT,ZTBEMPLINFO.ADD_COMMUNE,ZTBEMPLINFO.ADD_VILLAGE,ZTBEMPLINFO.PHONE_NUMBER,ZTBEMPLINFO.WORK_START_DATE,ZTBEMPLINFO.PASSWORD,ZTBEMPLINFO.EMAIL,ZTBEMPLINFO.WORK_POSITION_CODE,ZTBEMPLINFO.WORK_SHIFT_CODE,ZTBEMPLINFO.POSITION_CODE,ZTBEMPLINFO.JOB_CODE,ZTBEMPLINFO.FACTORY_CODE,ZTBEMPLINFO.WORK_STATUS_CODE,ZTBEMPLINFO.ONLINE_DATETIME,ZTBSEX.SEX_NAME,ZTBSEX.SEX_NAME_KR,ZTBWORKSTATUS.WORK_STATUS_NAME,ZTBWORKSTATUS.WORK_STATUS_NAME_KR,ZTBFACTORY.FACTORY_NAME,ZTBFACTORY.FACTORY_NAME_KR,ZTBJOB.JOB_NAME,ZTBJOB.JOB_NAME_KR,ZTBPOSITION.POSITION_NAME,ZTBPOSITION.POSITION_NAME_KR,ZTBWORKSHIFT.WORK_SHIF_NAME,ZTBWORKSHIFT.WORK_SHIF_NAME_KR,ZTBWORKPOSITION.SUBDEPTCODE,ZTBWORKPOSITION.WORK_POSITION_NAME,ZTBWORKPOSITION.WORK_POSITION_NAME_KR,ZTBWORKPOSITION.ATT_GROUP_CODE,ZTBSUBDEPARTMENT.MAINDEPTCODE,ZTBSUBDEPARTMENT.SUBDEPTNAME,ZTBSUBDEPARTMENT.SUBDEPTNAME_KR,ZTBMAINDEPARMENT.MAINDEPTNAME,ZTBMAINDEPARMENT.MAINDEPTNAME_KR,ZTBREASON.REASON_NAME,ZTBREASON.REASON_NAME_KR,ZTBATTENDANCETB.ON_OFF,ZTBATTENDANCETB.OVERTIME_INFO,ZTBATTENDANCETB.OVERTIME FROM ZTBOFFREGISTRATIONTB JOIN ZTBEMPLINFO ON (ZTBEMPLINFO.EMPL_NO = ZTBOFFREGISTRATIONTB.EMPL_NO AND ZTBEMPLINFO.CTR_CD = ZTBOFFREGISTRATIONTB.CTR_CD) JOIN ZTBSEX ON (ZTBSEX.SEX_CODE = ZTBEMPLINFO.SEX_CODE AND ZTBSEX.CTR_CD = ZTBEMPLINFO.CTR_CD) JOIN ZTBWORKSTATUS ON(ZTBWORKSTATUS.WORK_STATUS_CODE = ZTBEMPLINFO.WORK_STATUS_CODE AND ZTBWORKSTATUS.CTR_CD = ZTBEMPLINFO.CTR_CD) JOIN ZTBFACTORY ON (ZTBFACTORY.FACTORY_CODE = ZTBEMPLINFO.FACTORY_CODE AND ZTBFACTORY.CTR_CD = ZTBEMPLINFO.CTR_CD) JOIN ZTBJOB ON (ZTBJOB.JOB_CODE = ZTBEMPLINFO.JOB_CODE AND ZTBJOB.CTR_CD = ZTBEMPLINFO.CTR_CD) JOIN ZTBPOSITION ON (ZTBPOSITION.POSITION_CODE = ZTBEMPLINFO.POSITION_CODE AND ZTBPOSITION.CTR_CD = ZTBEMPLINFO.CTR_CD) JOIN ZTBWORKSHIFT ON (ZTBWORKSHIFT.WORK_SHIFT_CODE = ZTBEMPLINFO.WORK_SHIFT_CODE AND ZTBWORKSHIFT.CTR_CD = ZTBEMPLINFO.CTR_CD) JOIN ZTBWORKPOSITION ON (ZTBWORKPOSITION.WORK_POSITION_CODE = ZTBEMPLINFO.WORK_POSITION_CODE AND ZTBWORKPOSITION.CTR_CD = ZTBEMPLINFO.CTR_CD) JOIN ZTBSUBDEPARTMENT ON (ZTBSUBDEPARTMENT.SUBDEPTCODE = ZTBWORKPOSITION.SUBDEPTCODE AND ZTBSUBDEPARTMENT.CTR_CD = ZTBWORKPOSITION.CTR_CD) JOIN ZTBMAINDEPARMENT ON (ZTBMAINDEPARMENT.MAINDEPTCODE = ZTBSUBDEPARTMENT.MAINDEPTCODE AND ZTBMAINDEPARMENT.CTR_CD = ZTBSUBDEPARTMENT.CTR_CD) JOIN ZTBREASON ON (ZTBREASON.REASON_CODE = ZTBOFFREGISTRATIONTB.REASON_CODE AND ZTBREASON.CTR_CD = ZTBOFFREGISTRATIONTB.CTR_CD) LEFT JOIN ZTBATTENDANCETB ON (ZTBATTENDANCETB.APPLY_DATE = ZTBOFFREGISTRATIONTB.APPLY_DATE AND ZTBATTENDANCETB.EMPL_NO = ZTBOFFREGISTRATIONTB.EMPL_NO AND ZTBATTENDANCETB.CTR_CD = ZTBOFFREGISTRATIONTB.CTR_CD) WHERE ZTBOFFREGISTRATIONTB.CTR_CD='${DATA.CTR_CD}' AND ZTBWORKPOSITION.ATT_GROUP_CODE='${$vitrilamviec}' ORDER BY OFF_ID DESC`;
    }
    kqua = await queryDB(query);
    res.send(kqua);
  } else {
    res.send({
      tk_status: "NG",
      message: "Không phải leader or staff",
    });
  }
};
exports.pheduyetnhomBP = async (req, res, DATA) => {
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let JOB_NAME = req.payload_data["JOB_NAME"];
  let MAINDEPTCODE = req.payload_data["MAINDEPTCODE"];
  let $vitrilamviec = req.payload_data["ATT_GROUP_CODE"];
  let $subdeptname = req.payload_data["SUBDEPTNAME"];
  if (
    JOB_NAME == "Leader" ||
    JOB_NAME == "Sub Leader" ||
    JOB_NAME == "Dept Staff" ||
    JOB_NAME == "ADMIN"
  ) {
    let kqua;
    let query = `SELECT ZTBOFFREGISTRATIONTB.OFF_ID AS id, ZTBOFFREGISTRATIONTB.CTR_CD,ZTBOFFREGISTRATIONTB.EMPL_NO,ZTBOFFREGISTRATIONTB.REQUEST_DATE,ZTBOFFREGISTRATIONTB.APPLY_DATE,ZTBOFFREGISTRATIONTB.REASON_CODE,ZTBOFFREGISTRATIONTB.REMARK,ZTBOFFREGISTRATIONTB.APPROVAL_STATUS,ZTBOFFREGISTRATIONTB.OFF_ID,ZTBOFFREGISTRATIONTB.CA_NGHI,ZTBEMPLINFO.CMS_ID,ZTBEMPLINFO.FIRST_NAME,ZTBEMPLINFO.MIDLAST_NAME,ZTBEMPLINFO.DOB,ZTBEMPLINFO.HOMETOWN,ZTBEMPLINFO.SEX_CODE,ZTBEMPLINFO.ADD_PROVINCE,ZTBEMPLINFO.ADD_DISTRICT,ZTBEMPLINFO.ADD_COMMUNE,ZTBEMPLINFO.ADD_VILLAGE,ZTBEMPLINFO.PHONE_NUMBER,ZTBEMPLINFO.WORK_START_DATE,ZTBEMPLINFO.PASSWORD,ZTBEMPLINFO.EMAIL,ZTBEMPLINFO.WORK_POSITION_CODE,ZTBEMPLINFO.WORK_SHIFT_CODE,ZTBEMPLINFO.POSITION_CODE,ZTBEMPLINFO.JOB_CODE,ZTBEMPLINFO.FACTORY_CODE,ZTBEMPLINFO.WORK_STATUS_CODE,ZTBEMPLINFO.ONLINE_DATETIME,ZTBSEX.SEX_NAME,ZTBSEX.SEX_NAME_KR,ZTBWORKSTATUS.WORK_STATUS_NAME,ZTBWORKSTATUS.WORK_STATUS_NAME_KR,ZTBFACTORY.FACTORY_NAME,ZTBFACTORY.FACTORY_NAME_KR,ZTBJOB.JOB_NAME,ZTBJOB.JOB_NAME_KR,ZTBPOSITION.POSITION_NAME,ZTBPOSITION.POSITION_NAME_KR,ZTBWORKSHIFT.WORK_SHIF_NAME,ZTBWORKSHIFT.WORK_SHIF_NAME_KR,ZTBWORKPOSITION.SUBDEPTCODE,ZTBWORKPOSITION.WORK_POSITION_NAME,ZTBWORKPOSITION.WORK_POSITION_NAME_KR,ZTBWORKPOSITION.ATT_GROUP_CODE,ZTBSUBDEPARTMENT.MAINDEPTCODE,ZTBSUBDEPARTMENT.SUBDEPTNAME,ZTBSUBDEPARTMENT.SUBDEPTNAME_KR,ZTBMAINDEPARMENT.MAINDEPTNAME,ZTBMAINDEPARMENT.MAINDEPTNAME_KR,ZTBREASON.REASON_NAME,ZTBREASON.REASON_NAME_KR,ZTBATTENDANCETB.ON_OFF,ZTBATTENDANCETB.OVERTIME_INFO,ZTBATTENDANCETB.OVERTIME FROM ZTBOFFREGISTRATIONTB JOIN ZTBEMPLINFO ON (ZTBEMPLINFO.EMPL_NO = ZTBOFFREGISTRATIONTB.EMPL_NO AND ZTBEMPLINFO.CTR_CD = ZTBOFFREGISTRATIONTB.CTR_CD) JOIN ZTBSEX ON (ZTBSEX.SEX_CODE = ZTBEMPLINFO.SEX_CODE AND ZTBSEX.CTR_CD = ZTBEMPLINFO.CTR_CD) JOIN ZTBWORKSTATUS ON(ZTBWORKSTATUS.WORK_STATUS_CODE = ZTBEMPLINFO.WORK_STATUS_CODE AND ZTBWORKSTATUS.CTR_CD = ZTBEMPLINFO.CTR_CD) JOIN ZTBFACTORY ON (ZTBFACTORY.FACTORY_CODE = ZTBEMPLINFO.FACTORY_CODE AND ZTBFACTORY.CTR_CD = ZTBEMPLINFO.CTR_CD) JOIN ZTBJOB ON (ZTBJOB.JOB_CODE = ZTBEMPLINFO.JOB_CODE AND ZTBJOB.CTR_CD = ZTBEMPLINFO.CTR_CD) JOIN ZTBPOSITION ON (ZTBPOSITION.POSITION_CODE = ZTBEMPLINFO.POSITION_CODE AND ZTBPOSITION.CTR_CD = ZTBEMPLINFO.CTR_CD) JOIN ZTBWORKSHIFT ON (ZTBWORKSHIFT.WORK_SHIFT_CODE = ZTBEMPLINFO.WORK_SHIFT_CODE AND ZTBWORKSHIFT.CTR_CD = ZTBEMPLINFO.CTR_CD) JOIN ZTBWORKPOSITION ON (ZTBWORKPOSITION.WORK_POSITION_CODE = ZTBEMPLINFO.WORK_POSITION_CODE AND ZTBWORKPOSITION.CTR_CD = ZTBEMPLINFO.CTR_CD) JOIN ZTBSUBDEPARTMENT ON (ZTBSUBDEPARTMENT.SUBDEPTCODE = ZTBWORKPOSITION.SUBDEPTCODE AND ZTBSUBDEPARTMENT.CTR_CD = ZTBWORKPOSITION.CTR_CD) JOIN ZTBMAINDEPARMENT ON (ZTBMAINDEPARMENT.MAINDEPTCODE = ZTBSUBDEPARTMENT.MAINDEPTCODE AND ZTBMAINDEPARMENT.CTR_CD = ZTBSUBDEPARTMENT.CTR_CD) JOIN ZTBREASON ON (ZTBREASON.REASON_CODE = ZTBOFFREGISTRATIONTB.REASON_CODE AND ZTBREASON.CTR_CD = ZTBOFFREGISTRATIONTB.CTR_CD) LEFT JOIN ZTBATTENDANCETB ON (ZTBATTENDANCETB.APPLY_DATE = ZTBOFFREGISTRATIONTB.APPLY_DATE AND ZTBATTENDANCETB.EMPL_NO = ZTBOFFREGISTRATIONTB.EMPL_NO AND ZTBATTENDANCETB.CTR_CD = ZTBOFFREGISTRATIONTB.CTR_CD) WHERE ZTBOFFREGISTRATIONTB.CTR_CD='${DATA.CTR_CD}' AND ZTBMAINDEPARMENT.MAINDEPTCODE=${MAINDEPTCODE} ORDER BY OFF_ID DESC`;
    kqua = await queryDB(query);
    res.send(kqua);
  } else {
    res.send({
      tk_status: "NG",
      message: "Không phải leader or staff",
    });
  }
};
exports.pheduyetnhomNS = async (req, res, DATA) => {
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let JOB_NAME = req.payload_data["JOB_NAME"];
  let MAINDEPTCODE = req.payload_data["MAINDEPTCODE"];
  let $vitrilamviec = req.payload_data["ATT_GROUP_CODE"];
  let $subdeptname = req.payload_data["SUBDEPTNAME"];
  if (
    JOB_NAME == "Leader" ||
    JOB_NAME == "Sub Leader" ||
    JOB_NAME == "Dept Staff" ||
    JOB_NAME == "ADMIN"
  ) {
    let kqua;
    let query = `SELECT ZTBOFFREGISTRATIONTB.OFF_ID AS id, ZTBOFFREGISTRATIONTB.CTR_CD,ZTBOFFREGISTRATIONTB.EMPL_NO,ZTBOFFREGISTRATIONTB.REQUEST_DATE,ZTBOFFREGISTRATIONTB.APPLY_DATE,ZTBOFFREGISTRATIONTB.REASON_CODE,ZTBOFFREGISTRATIONTB.REMARK,ZTBOFFREGISTRATIONTB.APPROVAL_STATUS,ZTBOFFREGISTRATIONTB.OFF_ID,ZTBOFFREGISTRATIONTB.CA_NGHI,ZTBEMPLINFO.CMS_ID,ZTBEMPLINFO.FIRST_NAME,ZTBEMPLINFO.MIDLAST_NAME,ZTBEMPLINFO.DOB,ZTBEMPLINFO.HOMETOWN,ZTBEMPLINFO.SEX_CODE,ZTBEMPLINFO.ADD_PROVINCE,ZTBEMPLINFO.ADD_DISTRICT,ZTBEMPLINFO.ADD_COMMUNE,ZTBEMPLINFO.ADD_VILLAGE,ZTBEMPLINFO.PHONE_NUMBER,ZTBEMPLINFO.WORK_START_DATE,ZTBEMPLINFO.PASSWORD,ZTBEMPLINFO.EMAIL,ZTBEMPLINFO.WORK_POSITION_CODE,ZTBEMPLINFO.WORK_SHIFT_CODE,ZTBEMPLINFO.POSITION_CODE,ZTBEMPLINFO.JOB_CODE,ZTBEMPLINFO.FACTORY_CODE,ZTBEMPLINFO.WORK_STATUS_CODE,ZTBEMPLINFO.ONLINE_DATETIME,ZTBSEX.SEX_NAME,ZTBSEX.SEX_NAME_KR,ZTBWORKSTATUS.WORK_STATUS_NAME,ZTBWORKSTATUS.WORK_STATUS_NAME_KR,ZTBFACTORY.FACTORY_NAME,ZTBFACTORY.FACTORY_NAME_KR,ZTBJOB.JOB_NAME,ZTBJOB.JOB_NAME_KR,ZTBPOSITION.POSITION_NAME,ZTBPOSITION.POSITION_NAME_KR,ZTBWORKSHIFT.WORK_SHIF_NAME,ZTBWORKSHIFT.WORK_SHIF_NAME_KR,ZTBWORKPOSITION.SUBDEPTCODE,ZTBWORKPOSITION.WORK_POSITION_NAME,ZTBWORKPOSITION.WORK_POSITION_NAME_KR,ZTBWORKPOSITION.ATT_GROUP_CODE,ZTBSUBDEPARTMENT.MAINDEPTCODE,ZTBSUBDEPARTMENT.SUBDEPTNAME,ZTBSUBDEPARTMENT.SUBDEPTNAME_KR,ZTBMAINDEPARMENT.MAINDEPTNAME,ZTBMAINDEPARMENT.MAINDEPTNAME_KR,ZTBREASON.REASON_NAME,ZTBREASON.REASON_NAME_KR,ZTBATTENDANCETB.ON_OFF,ZTBATTENDANCETB.OVERTIME_INFO,ZTBATTENDANCETB.OVERTIME FROM ZTBOFFREGISTRATIONTB JOIN ZTBEMPLINFO ON (ZTBEMPLINFO.EMPL_NO = ZTBOFFREGISTRATIONTB.EMPL_NO AND ZTBEMPLINFO.CTR_CD = ZTBOFFREGISTRATIONTB.CTR_CD) JOIN ZTBSEX ON (ZTBSEX.SEX_CODE = ZTBEMPLINFO.SEX_CODE AND ZTBSEX.CTR_CD = ZTBEMPLINFO.CTR_CD) JOIN ZTBWORKSTATUS ON(ZTBWORKSTATUS.WORK_STATUS_CODE = ZTBEMPLINFO.WORK_STATUS_CODE AND ZTBWORKSTATUS.CTR_CD = ZTBEMPLINFO.CTR_CD) JOIN ZTBFACTORY ON (ZTBFACTORY.FACTORY_CODE = ZTBEMPLINFO.FACTORY_CODE AND ZTBFACTORY.CTR_CD = ZTBEMPLINFO.CTR_CD) JOIN ZTBJOB ON (ZTBJOB.JOB_CODE = ZTBEMPLINFO.JOB_CODE AND ZTBJOB.CTR_CD = ZTBEMPLINFO.CTR_CD) JOIN ZTBPOSITION ON (ZTBPOSITION.POSITION_CODE = ZTBEMPLINFO.POSITION_CODE AND ZTBPOSITION.CTR_CD = ZTBEMPLINFO.CTR_CD) JOIN ZTBWORKSHIFT ON (ZTBWORKSHIFT.WORK_SHIFT_CODE = ZTBEMPLINFO.WORK_SHIFT_CODE AND ZTBWORKSHIFT.CTR_CD = ZTBEMPLINFO.CTR_CD) JOIN ZTBWORKPOSITION ON (ZTBWORKPOSITION.WORK_POSITION_CODE = ZTBEMPLINFO.WORK_POSITION_CODE AND ZTBWORKPOSITION.CTR_CD = ZTBEMPLINFO.CTR_CD) JOIN ZTBSUBDEPARTMENT ON (ZTBSUBDEPARTMENT.SUBDEPTCODE = ZTBWORKPOSITION.SUBDEPTCODE AND ZTBSUBDEPARTMENT.CTR_CD = ZTBWORKPOSITION.CTR_CD) JOIN ZTBMAINDEPARMENT ON (ZTBMAINDEPARMENT.MAINDEPTCODE = ZTBSUBDEPARTMENT.MAINDEPTCODE AND ZTBMAINDEPARMENT.CTR_CD = ZTBSUBDEPARTMENT.CTR_CD) JOIN ZTBREASON ON (ZTBREASON.REASON_CODE = ZTBOFFREGISTRATIONTB.REASON_CODE AND ZTBREASON.CTR_CD = ZTBOFFREGISTRATIONTB.CTR_CD) LEFT JOIN ZTBATTENDANCETB ON (ZTBATTENDANCETB.APPLY_DATE = ZTBOFFREGISTRATIONTB.APPLY_DATE AND ZTBATTENDANCETB.EMPL_NO = ZTBOFFREGISTRATIONTB.EMPL_NO AND ZTBATTENDANCETB.CTR_CD = ZTBOFFREGISTRATIONTB.CTR_CD) WHERE ZTBOFFREGISTRATIONTB.CTR_CD='${DATA.CTR_CD}' ORDER BY OFF_ID DESC`;
    kqua = await queryDB(query);
    res.send(kqua);
  } else {
    res.send({
      tk_status: "NG",
      message: "Không phải leader or staff",
    });
  }
};
exports.setpheduyetnhom = async (req, res, DATA) => {
  let kqua;
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let JOB_NAME = req.payload_data["JOB_NAME"];
  let $off_id = DATA.off_id;
  let $pheduyetvalue = DATA.pheduyetvalue;
  if (
    JOB_NAME == "Leader" ||
    JOB_NAME == "Sub Leader" ||
    JOB_NAME == "Dept Staff" ||
    JOB_NAME == "ADMIN"
  ) {
    var today = new Date();
    let checkkq = "OK";
    let setpdQuery = `UPDATE ZTBOFFREGISTRATIONTB SET APPROVAL_STATUS=${$pheduyetvalue} WHERE OFF_ID=${$off_id} AND CTR_CD='${DATA.CTR_CD}'`;
    if ($pheduyetvalue == "3")
      setpdQuery = `DELETE FROM ZTBOFFREGISTRATIONTB WHERE OFF_ID=${$off_id} AND CTR_CD='${DATA.CTR_CD}'`;
    checkkq = await queryDB(setpdQuery);
    if (checkkq.tk_status != "OK") {
      res.send({
        tk_status: "NG",
        message: "Có lỗi khi đăng ký, xem lại thông tin đã nhập đã đúng định dạng chưa",
      });
    } else {
      res.send(checkkq);
    }
  } else {
    res.send({ tk_status: "NG", message: "NO_LEADER" });
  }
};
exports.xacnhanchamcongnhom = async (req, res, DATA) => {
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let kqua;
  let query = `UPDATE ZTBATTENDANCETB SET XACNHAN='${DATA.confirm_worktime}' WHERE CTR_CD='${DATA.CTR_CD}' AND EMPL_NO='${EMPL_NO}' AND APPLY_DATE='${DATA.confirm_date}' AND XACNHAN is null`;
  //console.log(query);
  kqua = await queryDB(query);
  res.send(kqua);
};
exports.mydiemdanhnhom = async (req, res, DATA) => {
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let START_DATE = DATA.from_date;
  let END_DATE = DATA.to_date;
  let kqua;
  let query = `
  DECLARE @empl varchar(10); DECLARE @startdate DATE; DECLARE @enddate DATE        
SET @startdate='${START_DATE}';
SET @enddate='${END_DATE}';
SET @empl='${EMPL_NO}';
WITH DT AS 
(
SELECT * FROM DATETABLE WHERE DATE_COLUMN BETWEEN @startdate AND @enddate
),
CTE_ZTBATTENDANCETB AS (
  SELECT 
      DT.DATE_COLUMN,
      ATT.EMPL_NO,
      ATT.APPLY_DATE,
      ATT.ON_OFF,
      ATT.OVERTIME_INFO,
      ATT.OVERTIME,
      ATT.XACNHAN,
      ATT.CURRENT_CA,
      ATT.CTR_CD,
      ATT.IN_TIME,
      ATT.OUT_TIME,
	   CASE 
        WHEN ATT.IN_TIME != 'OFF' AND (
            (ATT.CURRENT_CA = 0 AND ATT.IN_TIME < '08:00') OR  -- Ca hành chính/ngày
            (ATT.CURRENT_CA = 1 AND ATT.IN_TIME < '08:00') OR  -- Ca ngày
            (ATT.CURRENT_CA = 2 AND ATT.IN_TIME < '20:00')     -- Ca đêm
        )
        THEN DATEDIFF(MINUTE, 
            ATT.IN_TIME, 
            CASE 
                WHEN ATT.CURRENT_CA IN (0, 1) THEN '08:00' 
                WHEN ATT.CURRENT_CA = 2 THEN '20:00' 
            END)
        ELSE 0 
    END AS EARLY_IN_MINUTES,
    -- Thời gian đến muộn
    CASE 
        WHEN ATT.IN_TIME != 'OFF' AND (
            (ATT.CURRENT_CA = 0 AND ATT.IN_TIME > '08:00') OR  -- Ca hành chính/ngày
            (ATT.CURRENT_CA = 1 AND ATT.IN_TIME > '08:00') OR  -- Ca ngày
            (ATT.CURRENT_CA = 2 AND ATT.IN_TIME > '20:00')     -- Ca đêm
        )
        THEN DATEDIFF(MINUTE, 
            CASE 
                WHEN ATT.CURRENT_CA IN (0, 1) THEN '08:00' 
                WHEN ATT.CURRENT_CA = 2 THEN '20:00' 
            END, 
            ATT.IN_TIME)
        ELSE 0 
    END AS LATE_IN_MINUTES,
    -- Thời gian về sớm
    CASE 
        WHEN ATT.OUT_TIME != 'OFF' AND (
            (ATT.CURRENT_CA = 0 AND ATT.OUT_TIME < '17:00') OR  -- Ca hành chính/ngày
            (ATT.CURRENT_CA = 1 AND ATT.OUT_TIME < '17:00') OR  -- Ca ngày
            (ATT.CURRENT_CA = 2 AND ATT.OUT_TIME < '05:00')     -- Ca đêm
        )
        THEN DATEDIFF(MINUTE, 
            ATT.OUT_TIME, 
            CASE 
                WHEN ATT.CURRENT_CA IN (0, 1) THEN '17:00' 
                WHEN ATT.CURRENT_CA = 2 THEN '05:00' 
            END)
        ELSE 0 
    END AS EARLY_OUT_MINUTES,
    -- Thời gian tăng ca
    CASE 
        WHEN ATT.OUT_TIME != 'OFF' AND (
            (ATT.CURRENT_CA = 0 AND ATT.OUT_TIME > '17:00') OR  -- Ca hành chính/ngày
            (ATT.CURRENT_CA = 1 AND ATT.OUT_TIME > '17:00') OR  -- Ca ngày
            (ATT.CURRENT_CA = 2 AND ATT.OUT_TIME > '05:00')     -- Ca đêm
        )
        THEN DATEDIFF(MINUTE, 
            CASE 
                WHEN ATT.CURRENT_CA IN (0, 1) THEN '17:00' 
                WHEN ATT.CURRENT_CA = 2 THEN '05:00' 
            END, 
            ATT.OUT_TIME)
        ELSE 0 
    END AS OVERTIME_MINUTES,
    -- Số phút làm việc hành chính (trừ 1 tiếng ăn trưa/đêm nếu OUT_TIME sau 13h hoặc 1h15)
    CASE 
        WHEN ATT.IN_TIME != 'OFF' AND ATT.OUT_TIME != 'OFF' AND ATT.CURRENT_CA IN (0, 1) THEN 
            CASE 
                -- Trường hợp 1: Từ 8h (hoặc sớm hơn) đến 17h (hoặc muộn hơn)
                WHEN ATT.IN_TIME <= '08:00' AND ATT.OUT_TIME >= '17:00' 
                THEN 480  -- 8h đến 17h = 540 phút, trừ 60 phút ăn trưa
                -- Trường hợp 2: Từ sau 8h đến 17h (hoặc muộn hơn)
                WHEN ATT.IN_TIME > '08:00' AND ATT.OUT_TIME >= '17:00' 
                THEN 
                    CASE 
                        WHEN DATEDIFF(MINUTE, ATT.IN_TIME, '17:00') > 60 
                        THEN DATEDIFF(MINUTE, ATT.IN_TIME, '17:00') - 60 
                        ELSE DATEDIFF(MINUTE, ATT.IN_TIME, '17:00') 
                    END
                -- Trường hợp 3: Từ 8h (hoặc sớm hơn) đến trước 17h
                WHEN ATT.IN_TIME <= '08:00' AND ATT.OUT_TIME < '17:00' 
                THEN 
                    CASE 
                        WHEN ATT.OUT_TIME > '13:00' AND DATEDIFF(MINUTE, '08:00', ATT.OUT_TIME) > 60 
                        THEN DATEDIFF(MINUTE, '08:00', ATT.OUT_TIME) - 60 
                        ELSE DATEDIFF(MINUTE, '08:00', ATT.OUT_TIME) 
                    END
                -- Trường hợp 4: Từ sau 8h đến trước 17h
                WHEN ATT.IN_TIME > '08:00' AND ATT.OUT_TIME < '17:00' 
                THEN 
                    CASE 
                        WHEN ATT.OUT_TIME > '13:00' AND DATEDIFF(MINUTE, ATT.IN_TIME, ATT.OUT_TIME) > 60 
                        THEN DATEDIFF(MINUTE, ATT.IN_TIME, ATT.OUT_TIME) - 60 
                        ELSE DATEDIFF(MINUTE, ATT.IN_TIME, ATT.OUT_TIME) 
                    END
                ELSE 0 
            END
        WHEN ATT.IN_TIME != 'OFF' AND ATT.OUT_TIME != 'OFF' AND ATT.CURRENT_CA = 2 THEN 
            CASE 
                -- Ca đêm: Từ 20h (hoặc sớm hơn) đến 5h (hoặc muộn hơn)
                WHEN ATT.IN_TIME <= '20:00' AND ATT.OUT_TIME >= '05:00' 
                THEN 480  -- 20h đến 5h = 540 phút, trừ 60 phút ăn đêm
                -- Từ sau 20h đến 5h (hoặc muộn hơn)
                WHEN ATT.IN_TIME > '20:00' AND ATT.OUT_TIME >= '05:00' 
                THEN 
                    CASE 
                        WHEN DATEDIFF(MINUTE, ATT.IN_TIME, '05:00') + 1440 > 60 
                        THEN DATEDIFF(MINUTE, ATT.IN_TIME, '05:00') + 1440 - 60 
                        ELSE DATEDIFF(MINUTE, ATT.IN_TIME, '05:00') + 1440 
                    END
                -- Từ 20h (hoặc sớm hơn) đến trước 5h
                WHEN ATT.IN_TIME <= '20:00' AND ATT.OUT_TIME < '05:00' 
                THEN 
                    CASE 
                        WHEN ATT.OUT_TIME > '01:15' AND DATEDIFF(MINUTE, '20:00', ATT.OUT_TIME) + 1440 > 60 
                        THEN DATEDIFF(MINUTE, '20:00', ATT.OUT_TIME) + 1440 - 60 
                        ELSE DATEDIFF(MINUTE, '20:00', ATT.OUT_TIME) + 1440 
                    END
                -- Từ sau 20h đến trước 5h
                WHEN ATT.IN_TIME > '20:00' AND ATT.OUT_TIME < '05:00' 
                THEN 
                    CASE 
                        WHEN ATT.OUT_TIME > '01:15' AND DATEDIFF(MINUTE, ATT.IN_TIME, ATT.OUT_TIME) + 1440 > 60 
                        THEN DATEDIFF(MINUTE, ATT.IN_TIME, ATT.OUT_TIME) + 1440 - 60 
                        ELSE DATEDIFF(MINUTE, ATT.IN_TIME, ATT.OUT_TIME) + 1440 
                    END
                ELSE 0 
            END
        ELSE 0 
    END AS WORKING_MINUTES,
    -- Thời gian tăng ca cuối cùng (FINAL_OVERTIMES)
    CASE 
        WHEN ATT.OUT_TIME != 'OFF' AND (
            (ATT.CURRENT_CA = 0 AND ATT.OUT_TIME > '17:00') OR  -- Ca hành chính/ngày
            (ATT.CURRENT_CA = 1 AND ATT.OUT_TIME > '17:00') OR  -- Ca ngày
            (ATT.CURRENT_CA = 2 AND ATT.OUT_TIME > '05:00')     -- Ca đêm
        ) THEN 
            CASE 
                WHEN DATEDIFF(MINUTE, 
                    CASE 
                        WHEN ATT.CURRENT_CA IN (0, 1) THEN '17:00' 
                        WHEN ATT.CURRENT_CA = 2 THEN '05:00' 
                    END, 
                    ATT.OUT_TIME) >= 30 
                THEN FLOOR(DATEDIFF(MINUTE, 
                    CASE 
                        WHEN ATT.CURRENT_CA IN (0, 1) THEN '17:00' 
                        WHEN ATT.CURRENT_CA = 2 THEN '05:00' 
                    END, 
                    ATT.OUT_TIME) / 15) * 15 
                ELSE 0 
            END
        ELSE 0 
    END AS FINAL_OVERTIMES
  FROM 
      DATETABLE DT
  LEFT JOIN 
      ZTBATTENDANCETB ATT ON DT.DATE_COLUMN = ATT.APPLY_DATE
  WHERE 
      DT.DATE_COLUMN BETWEEN @startdate AND @enddate
),
CTE_CCTB AS (
  SELECT * FROM 
(SELECT NV_CCID, CHECK_DATE, CHECK_DATETIME, RANK() OVER (PARTITION BY NV_CCID, CHECK_DATE ORDER BY CHECK_DATETIME ASC) AS CHECKNO FROM fn_cleanchamcong(10))
AS STB
PIVOT
(
MIN(STB.CHECK_DATETIME)
FOR STB.CHECKNO IN ([1],[2],[3],[4],[5],[6])
) AS pvtb
)
-- Truy vấn chính
SELECT  
  DT.DATE_COLUMN,
  E.NV_CCID,
  E.EMPL_NO,
  E.CMS_ID,
  E.MIDLAST_NAME,
  E.FIRST_NAME,
  E.PHONE_NUMBER,
  SEX.SEX_NAME,
  WORKSTATUS.WORK_STATUS_NAME,
  FACTORY.FACTORY_NAME,
  JOB.JOB_NAME,
  WORKSHIFT.WORK_SHIF_NAME,
  WORKPOSITION.WORK_POSITION_NAME,
  SUBDEPT.SUBDEPTNAME,
  MAINDEPT.MAINDEPTNAME,
  OFFREG.REQUEST_DATE,
  ATT.APPLY_DATE,
  OFFREG.APPROVAL_STATUS,
  OFFREG.OFF_ID,
  OFFREG.CA_NGHI,
  ATT.ON_OFF,
  ATT.OVERTIME_INFO,
  ATT.OVERTIME,
  ATT.EARLY_IN_MINUTES,
  ATT.EARLY_OUT_MINUTES,
  ATT.LATE_IN_MINUTES,
  ATT.OVERTIME_MINUTES,
  ATT.WORKING_MINUTES,
  ATT.FINAL_OVERTIMES,
  ATT.IN_TIME,
  ATT.OUT_TIME,
  REASON.REASON_NAME,
  OFFREG.REMARK,
  ATT.XACNHAN,
  CALV.CA_CODE,	
  CALV.CA_NAME,	
  CALV.IN_START,	
  CALV.IN_END,
  CALV.OUT_START,
  CALV.OUT_END,
  CCTB.[1] AS CHECK1,
  CCTB.[2] AS CHECK2,
  CCTB.[3] AS CHECK3    
FROM DT 
LEFT JOIN 
  ZTBEMPLINFO E ON (1=1)
LEFT JOIN 
  CTE_ZTBATTENDANCETB ATT ON 
      E.EMPL_NO = ATT.EMPL_NO AND  
  DT.DATE_COLUMN = ATT.APPLY_DATE AND
      E.CTR_CD = ATT.CTR_CD
LEFT JOIN 
  ZTBSEX SEX ON SEX.SEX_CODE = E.SEX_CODE AND SEX.CTR_CD = E.CTR_CD
LEFT JOIN 
  ZTBWORKSTATUS WORKSTATUS ON WORKSTATUS.WORK_STATUS_CODE = E.WORK_STATUS_CODE AND WORKSTATUS.CTR_CD = E.CTR_CD
LEFT JOIN 
  ZTBFACTORY FACTORY ON FACTORY.FACTORY_CODE = E.FACTORY_CODE AND FACTORY.CTR_CD = E.CTR_CD
LEFT JOIN 
  ZTBJOB JOB ON JOB.JOB_CODE = E.JOB_CODE AND JOB.CTR_CD = E.CTR_CD
LEFT JOIN 
  ZTBWORKSHIFT WORKSHIFT ON WORKSHIFT.WORK_SHIFT_CODE = E.WORK_SHIFT_CODE AND WORKSHIFT.CTR_CD = E.CTR_CD
LEFT JOIN 
  ZTBWORKPOSITION WORKPOSITION ON WORKPOSITION.WORK_POSITION_CODE = E.WORK_POSITION_CODE AND WORKPOSITION.CTR_CD = E.CTR_CD
LEFT JOIN 
  ZTBSUBDEPARTMENT SUBDEPT ON SUBDEPT.SUBDEPTCODE = WORKPOSITION.SUBDEPTCODE AND SUBDEPT.CTR_CD = WORKPOSITION.CTR_CD
LEFT JOIN 
  ZTBMAINDEPARMENT MAINDEPT ON MAINDEPT.MAINDEPTCODE = SUBDEPT.MAINDEPTCODE AND MAINDEPT.CTR_CD = SUBDEPT.CTR_CD
LEFT JOIN 
  ZTBOFFREGISTRATIONTB OFFREG ON 
      OFFREG.EMPL_NO = E.EMPL_NO AND 
      OFFREG.APPLY_DATE = DT.DATE_COLUMN AND 
      OFFREG.CTR_CD = E.CTR_CD
LEFT JOIN 
  ZTBREASON REASON ON OFFREG.REASON_CODE = REASON.REASON_CODE AND OFFREG.CTR_CD = REASON.CTR_CD
LEFT JOIN 
  ZTB_CALV CALV ON CALV.CA_CODE = ATT.CURRENT_CA AND CALV.CTR_CD = ATT.CTR_CD
LEFT JOIN 
  CTE_CCTB CCTB ON 
      CCTB.CHECK_DATE = DT.DATE_COLUMN AND 
      CCTB.NV_CCID = E.NV_CCID
WHERE 
  E.WORK_STATUS_CODE = 1  
  AND E.EMPL_NO = @empl
  AND E.CTR_CD = '${DATA.CTR_CD}'
ORDER BY DT.DATE_COLUMN DESC
`;
  //console.log(query);
  kqua = await queryDB(query);
  res.send(kqua);
};
exports.diemdanhsummarynhom = async (req, res, DATA) => {
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let JOB_NAME = req.payload_data["JOB_NAME"];
  if (
    JOB_NAME == "Leader" ||
    JOB_NAME == "Sub Leader" ||
    JOB_NAME == "Dept Staff" ||
    JOB_NAME == "ADMIN"
  ) {
    let kqua;
    let query =
      "DECLARE @tradate As DATE; SET @tradate = '" +
      DATA.todate +
      "' SELECT CONCAT(TONG_FULL.MAINDEPTNAME, TONG_FULL.SUBDEPTNAME) As id, " +
      "TONG_FULL.MAINDEPTNAME, TONG_FULL.SUBDEPTNAME, " +
      "(TONG_FULL.NhaMay1+TONG_FULL.NhaMay2) AS TOTAL_ALL, " +
      "(isnull(TONG_ON.NhaMay1,0) + isnull(TONG_ON.NhaMay2,0)) AS TOTAL_ON, " +
      "(isnull(TONG_OFF.NhaMay1,0)+ isnull(TONG_OFF.NhaMay2,0)) AS TOTAL_OFF, " +
      "(isnull(TONG_NULL.NhaMay1,0)+ isnull(TONG_NULL.NhaMay2,0)) AS TOTAL_CDD, " +
      "isnull(TONG_FULL.NhaMay1,0) as TOTAL_NM1, isnull(TONG_FULL.NhaMay2,0) as TOTAL_NM2, " +
      "isnull(TONG_ON.NhaMay1,0) as ON_NM1, isnull(TONG_ON.NhaMay2,0) as ON_NM2, " +
      "isnull(TONG_OFF.NhaMay1,0) as OFF_NM1, isnull(TONG_OFF.NhaMay2,0) as OFF_NM2, " +
      "isnull(TONG_NULL.NhaMay1,0) as CDD_NM1, isnull(TONG_NULL.NhaMay2,0) as CDD_NM2 " +
      "FROM fn_DiemDanhTong_FULL(@tradate) AS TONG_FULL " +
      "LEFT JOIN (SELECT * FROM fn_DiemDanhTong_ON(@tradate)) AS TONG_ON " +
      "ON (TONG_ON.SUBDEPTNAME = TONG_FULL.SUBDEPTNAME) " +
      "LEFT JOIN (SELECT * FROM fn_DiemDanhTong_OFF(@tradate)) AS TONG_OFF " +
      "ON (TONG_OFF.SUBDEPTNAME = TONG_FULL.SUBDEPTNAME) " +
      "LEFT JOIN (SELECT * FROM fn_DiemDanhTong_NULL(@tradate)) AS TONG_NULL " +
      "ON (TONG_NULL.SUBDEPTNAME = TONG_FULL.SUBDEPTNAME) " +
      "ORDER BY MAINDEPTNAME DESC, SUBDEPTNAME ASC";
    kqua = await queryDB(query);
    res.send(kqua);
  } else {
    res.send({ tk_status: "NG", message: "Không phải leader" });
  }
};
exports.getmaindeptlist = async (req, res, DATA) => {
  let query = `SELECT * FROM ZTBMAINDEPARMENT WHERE CTR_CD='${DATA.CTR_CD}'`;
  let kqua = await queryDB(query);
  res.send(kqua);
};
exports.workpositionlist = async (req, res, DATA) => {
  let condition = ` WHERE CTR_CD='${DATA.CTR_CD}' `;
  if (DATA.SUBDEPTCODE) {
    condition += ` AND SUBDEPTCODE = ${DATA.SUBDEPTCODE}`;
  }
  let query = `SELECT * FROM ZTBWORKPOSITION ${condition}`;
  console.log(query);
  let kqua = await queryDB(query);
  res.send(kqua);
};
exports.workpositionlist_BP = async (req, res, DATA) => {
  let MAINDEPTCODE = req.payload_data["MAINDEPTCODE"];
  let query = `
      SELECT ZTBWORKPOSITION.CTR_CD, ZTBWORKPOSITION.SUBDEPTCODE, 
             ZTBWORKPOSITION.WORK_POSITION_CODE, ZTBWORKPOSITION.WORK_POSITION_NAME, 
             ZTBWORKPOSITION.WORK_POSITION_NAME_KR, ZTBWORKPOSITION.ATT_GROUP_CODE 
      FROM ZTBWORKPOSITION 
      JOIN ZTBSUBDEPARTMENT 
          ON ZTBWORKPOSITION.SUBDEPTCODE = ZTBSUBDEPARTMENT.SUBDEPTCODE 
          AND ZTBWORKPOSITION.CTR_CD = ZTBSUBDEPARTMENT.CTR_CD 
      JOIN ZTBMAINDEPARMENT 
          ON ZTBMAINDEPARMENT.MAINDEPTCODE = ZTBSUBDEPARTMENT.MAINDEPTCODE 
          AND ZTBMAINDEPARMENT.CTR_CD = ZTBSUBDEPARTMENT.CTR_CD 
      WHERE ZTBMAINDEPARMENT.MAINDEPTCODE=${MAINDEPTCODE} 
        AND ZTBWORKPOSITION.CTR_CD='${DATA.CTR_CD}'`;
  let kqua = await queryDB(query);
  res.send(kqua);
};
exports.workpositionlist_NS = async (req, res, DATA) => {
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let JOB_NAME = req.payload_data["JOB_NAME"];
  let MAINDEPTCODE = req.payload_data["MAINDEPTCODE"];
  let kqua;
  let query = `SELECT ZTBWORKPOSITION.CTR_CD, ZTBWORKPOSITION.SUBDEPTCODE, ZTBWORKPOSITION.WORK_POSITION_CODE, 
                      ZTBWORKPOSITION.WORK_POSITION_NAME, ZTBWORKPOSITION.WORK_POSITION_NAME_KR, 
                      ZTBWORKPOSITION.ATT_GROUP_CODE  
               FROM ZTBWORKPOSITION 
               JOIN ZTBSUBDEPARTMENT 
                 ON ZTBWORKPOSITION.SUBDEPTCODE = ZTBSUBDEPARTMENT.SUBDEPTCODE 
                AND ZTBWORKPOSITION.CTR_CD = ZTBSUBDEPARTMENT.CTR_CD
               JOIN ZTBMAINDEPARMENT 
                 ON ZTBMAINDEPARMENT.MAINDEPTCODE = ZTBSUBDEPARTMENT.MAINDEPTCODE 
                AND ZTBMAINDEPARMENT.CTR_CD = ZTBSUBDEPARTMENT.CTR_CD
               WHERE ZTBWORKPOSITION.CTR_CD='${DATA.CTR_CD}'`;
  console.log(query);
  kqua = await queryDB(query);
  res.send(kqua);
};
exports.diemdanhhistorynhom = async (req, res, DATA) => {
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let JOB_NAME = req.payload_data["JOB_NAME"];
  let start_date = DATA.start_date;
  let end_date = DATA.end_date;
  let maindeptcode = DATA.MAINDEPTCODE;
  let workshiftcode = DATA.WORK_SHIFT_CODE;
  let factorycode = DATA.FACTORY_CODE;
  let condition = `DD_TT.CTR_CD='${DATA.CTR_CD}'`;
  if (maindeptcode != 0) {
    condition += ` AND DD_TT.MAINDEPTCODE = ${maindeptcode}`;
  }
  switch (workshiftcode) {
    case 1:
      condition += ` AND DD_TT.WORK_SHIFT_CODE = 1`;
      break;
    case 2:
      condition += ` AND DD_TT.WORK_SHIFT_CODE = 2`;
      break;
    case 3:
      condition += ` AND DD_TT.WORK_SHIFT_CODE = 0`;
      break;
    case 4:
      condition += ` AND DD_TT.WORK_SHIFT_CODE <> 2`;
      break;
    case 5:
      condition += ` AND DD_TT.WORK_SHIFT_CODE <> 1`;
      break;
  }
  if (factorycode != 0) {
    condition += ` AND DD_TT.FACTORY_CODE = ${factorycode}`;
  }
  if (["Leader", "Sub Leader", "Dept Staff", "ADMIN"].includes(JOB_NAME)) {
    let kqua;
    let query = `
          DECLARE @startdate DATE = '${start_date}', @enddate DATE = '${end_date}';
          SELECT DD_TT.APPLY_DATE AS id, DD_TT.APPLY_DATE, 
                 COUNT(DD_TT.ON_OFF) AS TOTAL, 
                 COUNT(CASE DD_TT.ON_OFF WHEN 1 THEN 1 ELSE NULL END) AS TOTAL_ON, 
                 COUNT(CASE DD_TT.ON_OFF WHEN 0 THEN 1 ELSE NULL END) AS TOTAL_OFF, 
                 CAST(COUNT(CASE DD_TT.ON_OFF WHEN 1 THEN 1 ELSE NULL END) AS FLOAT) / 
                 CAST(COUNT(DD_TT.ON_OFF) AS FLOAT) * 100 AS ON_RATE 
          FROM (
              SELECT ZTBATTENDANCETB.CTR_CD, ZTBEMPLINFO.EMPL_NO, CMS_ID, MIDLAST_NAME, FIRST_NAME, PHONE_NUMBER, SEX_NAME, 
                     WORK_STATUS_NAME, FACTORY_NAME, ZTBMAINDEPARMENT.MAINDEPTCODE, ZTBWORKSHIFT.WORK_SHIFT_CODE, 
                     ZTBFACTORY.FACTORY_CODE, JOB_NAME, WORK_SHIF_NAME, WORK_POSITION_NAME, SUBDEPTNAME, MAINDEPTNAME, 
                     REQUEST_DATE, ZTBATTENDANCETB.APPLY_DATE, APPROVAL_STATUS, OFF_ID, CA_NGHI, ON_OFF, OVERTIME_INFO, 
                     OVERTIME, REASON_NAME, ZTBOFFREGISTRATIONTB.REMARK, ZTBATTENDANCETB.XACNHAN 
              FROM ZTBATTENDANCETB 
              LEFT JOIN ZTBEMPLINFO ON ZTBEMPLINFO.EMPL_NO = ZTBATTENDANCETB.EMPL_NO 
                                    AND ZTBEMPLINFO.CTR_CD = ZTBATTENDANCETB.CTR_CD 
              LEFT JOIN ZTBSEX ON ZTBSEX.SEX_CODE = ZTBEMPLINFO.SEX_CODE 
                               AND ZTBSEX.CTR_CD = ZTBEMPLINFO.CTR_CD 
              LEFT JOIN ZTBWORKSTATUS ON ZTBWORKSTATUS.WORK_STATUS_CODE = ZTBEMPLINFO.WORK_STATUS_CODE 
                                      AND ZTBWORKSTATUS.CTR_CD = ZTBEMPLINFO.CTR_CD 
              LEFT JOIN ZTBFACTORY ON ZTBFACTORY.FACTORY_CODE = ZTBEMPLINFO.FACTORY_CODE 
                                   AND ZTBFACTORY.CTR_CD = ZTBEMPLINFO.CTR_CD 
              LEFT JOIN ZTBJOB ON ZTBJOB.JOB_CODE = ZTBEMPLINFO.JOB_CODE 
                               AND ZTBJOB.CTR_CD = ZTBEMPLINFO.CTR_CD 
              LEFT JOIN ZTBPOSITION ON ZTBPOSITION.POSITION_CODE = ZTBEMPLINFO.POSITION_CODE 
                                    AND ZTBPOSITION.CTR_CD = ZTBEMPLINFO.CTR_CD 
              LEFT JOIN ZTBWORKSHIFT ON ZTBWORKSHIFT.WORK_SHIFT_CODE = ZTBEMPLINFO.WORK_SHIFT_CODE 
                                     AND ZTBWORKSHIFT.CTR_CD = ZTBEMPLINFO.CTR_CD 
              LEFT JOIN ZTBWORKPOSITION ON ZTBWORKPOSITION.WORK_POSITION_CODE = ZTBEMPLINFO.WORK_POSITION_CODE 
                                        AND ZTBWORKPOSITION.CTR_CD = ZTBEMPLINFO.CTR_CD 
              LEFT JOIN ZTBSUBDEPARTMENT ON ZTBSUBDEPARTMENT.SUBDEPTCODE = ZTBWORKPOSITION.SUBDEPTCODE 
                                         AND ZTBSUBDEPARTMENT.CTR_CD = ZTBWORKPOSITION.CTR_CD 
              LEFT JOIN ZTBMAINDEPARMENT ON ZTBMAINDEPARMENT.MAINDEPTCODE = ZTBSUBDEPARTMENT.MAINDEPTCODE 
                                         AND ZTBMAINDEPARMENT.CTR_CD = ZTBSUBDEPARTMENT.CTR_CD 
              LEFT JOIN ZTBOFFREGISTRATIONTB ON ZTBOFFREGISTRATIONTB.EMPL_NO = ZTBATTENDANCETB.EMPL_NO 
                                             AND ZTBOFFREGISTRATIONTB.APPLY_DATE = ZTBATTENDANCETB.APPLY_DATE 
                                             AND ZTBOFFREGISTRATIONTB.CTR_CD = ZTBATTENDANCETB.CTR_CD 
              LEFT JOIN ZTBREASON ON ZTBOFFREGISTRATIONTB.REASON_CODE = ZTBREASON.REASON_CODE 
                                  AND ZTBOFFREGISTRATIONTB.CTR_CD = ZTBREASON.CTR_CD 
              WHERE ZTBATTENDANCETB.APPLY_DATE BETWEEN @startdate AND @enddate 
                    AND ZTBATTENDANCETB.CTR_CD='${DATA.CTR_CD}'
          ) AS DD_TT 
          WHERE ${condition} 
          GROUP BY DD_TT.APPLY_DATE 
          ORDER BY DD_TT.APPLY_DATE ASC`;
    //console.log(query);
    kqua = await queryDB(query);
    res.send(kqua);
  } else {
    res.send({ tk_status: "NG", message: "Không phải leader" });
  }
};
exports.diemdanhfull = async (req, res, DATA) => {
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let START_DATE = DATA.from_date;
  let END_DATE = DATA.to_date;
  let kqua;
  let query = `DECLARE @empl varchar(10); DECLARE @startdate DATE; DECLARE @enddate DATE        
     SET @startdate='${START_DATE}'
     SET @enddate='${END_DATE}'
     SELECT  
     ZTBEMPLINFOA.DATE_COLUMN,
       ZTBEMPLINFOA.EMPL_NO, 
       CMS_ID, 
       MIDLAST_NAME, 
       FIRST_NAME, 
       PHONE_NUMBER, 
       SEX_NAME, 
       WORK_STATUS_NAME, 
       FACTORY_NAME, 
       JOB_NAME, 
       WORK_SHIF_NAME, 
       WORK_POSITION_NAME, 
       SUBDEPTNAME, 
       MAINDEPTNAME, 
       REQUEST_DATE, 
       ZTBATTENDANCETB.APPLY_DATE, 
       APPROVAL_STATUS, 
       OFF_ID, 
       CA_NGHI, 
       ON_OFF, 
       OVERTIME_INFO, 
       OVERTIME, 
       REASON_NAME, 
       ZTBOFFREGISTRATIONTB.REMARK, 
       ZTBATTENDANCETB.XACNHAN 
     FROM 
       (SELECT DATE_COLUMN, EMPL_NO,CMS_ID,FIRST_NAME,MIDLAST_NAME,DOB,HOMETOWN,SEX_CODE,ADD_PROVINCE,ADD_DISTRICT,ADD_COMMUNE,ADD_VILLAGE,PHONE_NUMBER,WORK_START_DATE,PASSWORD,EMAIL,WORK_POSITION_CODE,WORK_SHIFT_CODE,POSITION_CODE,JOB_CODE,FACTORY_CODE,WORK_STATUS_CODE,REMARK,ONLINE_DATETIME,EMPL_IMAGE,RESIGN_DATE,DATETABLE.CTR_CD  FROM DATETABLE CROSS JOIN ZTBEMPLINFO WHERE DATETABLE.DATE_COLUMN BETWEEN @startdate AND @enddate AND ZTBEMPLINFO.WORK_STATUS_CODE<>0) AS ZTBEMPLINFOA 
       LEFT JOIN (SELECT DATETABLE.CTR_CD, DATETABLE.DATE_COLUMN, ZTBATTENDANCETB.EMPL_NO,  ZTBATTENDANCETB.APPLY_DATE,  ZTBATTENDANCETB.ON_OFF,  ZTBATTENDANCETB.REMARK,  ZTBATTENDANCETB.OVERTIME_INFO, ZTBATTENDANCETB.OVERTIME, ZTBATTENDANCETB.XACNHAN,CURRENT_TEAM FROM DATETABLE LEFT JOIN ZTBATTENDANCETB ON (DATETABLE.DATE_COLUMN = ZTBATTENDANCETB.APPLY_DATE AND DATETABLE.CTR_CD = ZTBATTENDANCETB.CTR_CD) WHERE DATETABLE.DATE_COLUMN BETWEEN @startdate AND @enddate) AS ZTBATTENDANCETB ON (
         ZTBEMPLINFOA.EMPL_NO = ZTBATTENDANCETB.EMPL_NO AND ZTBEMPLINFOA.DATE_COLUMN = ZTBATTENDANCETB.APPLY_DATE
       ) 
       LEFT JOIN ZTBSEX ON (
         ZTBSEX.SEX_CODE = ZTBEMPLINFOA.SEX_CODE AND ZTBSEX.CTR_CD = ZTBEMPLINFOA.CTR_CD
       ) 
       LEFT JOIN ZTBWORKSTATUS ON(
         ZTBWORKSTATUS.WORK_STATUS_CODE = ZTBEMPLINFOA.WORK_STATUS_CODE AND ZTBWORKSTATUS.CTR_CD = ZTBEMPLINFOA.CTR_CD
       ) 
       LEFT JOIN ZTBFACTORY ON (
         ZTBFACTORY.FACTORY_CODE = ZTBEMPLINFOA.FACTORY_CODE AND ZTBFACTORY.CTR_CD = ZTBEMPLINFOA.CTR_CD
       ) 
       LEFT JOIN ZTBJOB ON (
         ZTBJOB.JOB_CODE = ZTBEMPLINFOA.JOB_CODE AND ZTBJOB.CTR_CD = ZTBEMPLINFOA.CTR_CD
       ) 
       LEFT JOIN ZTBPOSITION ON (
         ZTBPOSITION.POSITION_CODE = ZTBEMPLINFOA.POSITION_CODE AND ZTBPOSITION.CTR_CD = ZTBEMPLINFOA.CTR_CD
       ) 
       LEFT JOIN ZTBWORKSHIFT ON (
         ZTBWORKSHIFT.WORK_SHIFT_CODE = ZTBEMPLINFOA.WORK_SHIFT_CODE AND ZTBWORKSHIFT.CTR_CD = ZTBEMPLINFOA.CTR_CD
       ) 
       LEFT JOIN ZTBWORKPOSITION ON (
         ZTBWORKPOSITION.WORK_POSITION_CODE = ZTBEMPLINFOA.WORK_POSITION_CODE AND ZTBWORKPOSITION.CTR_CD = ZTBEMPLINFOA.CTR_CD
       ) 
       LEFT JOIN ZTBSUBDEPARTMENT ON (
         ZTBSUBDEPARTMENT.SUBDEPTCODE = ZTBWORKPOSITION.SUBDEPTCODE AND ZTBSUBDEPARTMENT.CTR_CD = ZTBWORKPOSITION.CTR_CD
       ) 
       LEFT JOIN ZTBMAINDEPARMENT ON (
         ZTBMAINDEPARMENT.MAINDEPTCODE = ZTBSUBDEPARTMENT.MAINDEPTCODE AND ZTBMAINDEPARMENT.CTR_CD = ZTBSUBDEPARTMENT.CTR_CD
       ) 
       LEFT JOIN ZTBOFFREGISTRATIONTB ON (
         ZTBOFFREGISTRATIONTB.EMPL_NO = ZTBATTENDANCETB.EMPL_NO 
         AND ZTBOFFREGISTRATIONTB.APPLY_DATE = ZTBATTENDANCETB.APPLY_DATE
         AND ZTBOFFREGISTRATIONTB.CTR_CD = ZTBATTENDANCETB.CTR_CD
       ) 
       LEFT JOIN ZTBREASON ON (
         ZTBOFFREGISTRATIONTB.REASON_CODE = ZTBREASON.REASON_CODE
         AND ZTBOFFREGISTRATIONTB.CTR_CD = ZTBREASON.CTR_CD
       )   
       WHERE ZTBEMPLINFOA.WORK_STATUS_CODE =1 AND ZTBEMPLINFOA.CTR_CD='${DATA.CTR_CD}'
       ORDER BY ZTBEMPLINFOA.DATE_COLUMN DESC, ZTBEMPLINFOA.POSITION_CODE ASC`;
  kqua = await queryDB(query);
  res.send(kqua);
};
exports.getemployee_full = async (req, res, DATA) => {
  let currenttime = moment().format("YYYY-MM-DD HH:mm:ss");
  let checkkq = "OK";
  let setpdQuery = `SELECT 
      ZTBEMPLINFO.NV_CCID, 
      ZTBEMPLINFO.EMPL_NO AS id, 
      ZTBEMPLINFO.EMPL_NO, 
      ZTBEMPLINFO.CMS_ID, 
      ZTBEMPLINFO.FIRST_NAME, 
      ZTBEMPLINFO.MIDLAST_NAME, 
      ZTBEMPLINFO.DOB, 
      ZTBEMPLINFO.HOMETOWN, 
      ZTBEMPLINFO.ADD_PROVINCE, 
      ZTBEMPLINFO.ADD_DISTRICT, 
      ZTBEMPLINFO.ADD_COMMUNE, 
      ZTBEMPLINFO.ADD_VILLAGE, 
      ZTBEMPLINFO.PHONE_NUMBER, 
      ZTBEMPLINFO.WORK_START_DATE, 
      ZTBEMPLINFO.PASSWORD, 
      ZTBEMPLINFO.EMAIL, 
      ZTBEMPLINFO.REMARK, 
      ZTBEMPLINFO.ONLINE_DATETIME, 
      ZTBEMPLINFO.CTR_CD, 
      ZTBSEX.SEX_CODE, 
      ZTBSEX.SEX_NAME, 
      ZTBSEX.SEX_NAME_KR, 
      ZTBWORKSTATUS.WORK_STATUS_CODE, 
      ZTBWORKSTATUS.WORK_STATUS_NAME, 
      ZTBWORKSTATUS.WORK_STATUS_NAME_KR, 
      ZTBFACTORY.FACTORY_CODE, 
      ZTBFACTORY.FACTORY_NAME, 
      ZTBFACTORY.FACTORY_NAME_KR, 
      ZTBJOB.JOB_CODE, 
      ZTBJOB.JOB_NAME, 
      ZTBJOB.JOB_NAME_KR, 
      ZTBPOSITION.POSITION_CODE, 
      ZTBPOSITION.POSITION_NAME, 
      ZTBPOSITION.POSITION_NAME_KR, 
      ZTBWORKSHIFT.WORK_SHIFT_CODE, 
      ZTBWORKSHIFT.WORK_SHIF_NAME, 
      ZTBWORKSHIFT.WORK_SHIF_NAME_KR, 
      ZTBWORKPOSITION.WORK_POSITION_CODE, 
      ZTBWORKPOSITION.WORK_POSITION_NAME, 
      ZTBWORKPOSITION.WORK_POSITION_NAME_KR, 
      ZTBWORKPOSITION.ATT_GROUP_CODE, 
      ZTBSUBDEPARTMENT.SUBDEPTCODE, 
      ZTBSUBDEPARTMENT.SUBDEPTNAME, 
      ZTBSUBDEPARTMENT.SUBDEPTNAME_KR, 
      ZTBMAINDEPARMENT.MAINDEPTCODE, 
      ZTBMAINDEPARMENT.MAINDEPTNAME, 
      ZTBMAINDEPARMENT.MAINDEPTNAME_KR, 
      ZTBEMPLINFO.EMPL_IMAGE, 
      ZTBEMPLINFO.RESIGN_DATE  
  FROM ZTBEMPLINFO 
  LEFT JOIN ZTBSEX ON (
      ZTBSEX.SEX_CODE = ZTBEMPLINFO.SEX_CODE 
      AND ZTBSEX.CTR_CD = ZTBEMPLINFO.CTR_CD
  ) 
  LEFT JOIN ZTBWORKSTATUS ON (
      ZTBWORKSTATUS.WORK_STATUS_CODE = ZTBEMPLINFO.WORK_STATUS_CODE 
      AND ZTBWORKSTATUS.CTR_CD = ZTBEMPLINFO.CTR_CD
  ) 
  LEFT JOIN ZTBFACTORY ON (
      ZTBFACTORY.FACTORY_CODE = ZTBEMPLINFO.FACTORY_CODE 
      AND ZTBFACTORY.CTR_CD = ZTBEMPLINFO.CTR_CD
  ) 
  LEFT JOIN ZTBJOB ON (
      ZTBJOB.JOB_CODE = ZTBEMPLINFO.JOB_CODE 
      AND ZTBJOB.CTR_CD = ZTBEMPLINFO.CTR_CD
  ) 
  LEFT JOIN ZTBPOSITION ON (
      ZTBPOSITION.POSITION_CODE = ZTBEMPLINFO.POSITION_CODE 
      AND ZTBPOSITION.CTR_CD = ZTBEMPLINFO.CTR_CD
  ) 
  LEFT JOIN ZTBWORKSHIFT ON (
      ZTBWORKSHIFT.WORK_SHIFT_CODE = ZTBEMPLINFO.WORK_SHIFT_CODE 
      AND ZTBWORKSHIFT.CTR_CD = ZTBEMPLINFO.CTR_CD
  ) 
  LEFT JOIN ZTBWORKPOSITION ON (
      ZTBWORKPOSITION.WORK_POSITION_CODE = ZTBEMPLINFO.WORK_POSITION_CODE 
      AND ZTBWORKPOSITION.CTR_CD = ZTBEMPLINFO.CTR_CD
  ) 
  LEFT JOIN ZTBSUBDEPARTMENT ON (
      ZTBSUBDEPARTMENT.SUBDEPTCODE = ZTBWORKPOSITION.SUBDEPTCODE 
      AND ZTBSUBDEPARTMENT.CTR_CD = ZTBWORKPOSITION.CTR_CD
  ) 
  LEFT JOIN ZTBMAINDEPARMENT ON (
      ZTBMAINDEPARMENT.MAINDEPTCODE = ZTBSUBDEPARTMENT.MAINDEPTCODE 
      AND ZTBMAINDEPARMENT.CTR_CD = ZTBSUBDEPARTMENT.CTR_CD
  )`;
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.insertemployee = async (req, res, DATA) => {
  let JOB_NAME = req.payload_data["JOB_NAME"];
  if (JOB_NAME === "Leader" || JOB_NAME === "ADMIN") {
    let checkkq = "OK";
    let setpdQuery = `INSERT INTO ZTBEMPLINFO (CTR_CD,EMPL_NO,CMS_ID,FIRST_NAME,MIDLAST_NAME,DOB,HOMETOWN,SEX_CODE,ADD_PROVINCE,ADD_DISTRICT,ADD_COMMUNE,ADD_VILLAGE,PHONE_NUMBER,WORK_START_DATE,PASSWORD,EMAIL,WORK_POSITION_CODE,WORK_SHIFT_CODE,POSITION_CODE,JOB_CODE,FACTORY_CODE,WORK_STATUS_CODE,NV_CCID) VALUES ('${DATA.CTR_CD}',N'${DATA.EMPL_NO}' ,N'${DATA.CMS_ID}' ,N'${DATA.FIRST_NAME}' ,N'${DATA.MIDLAST_NAME}' ,N'${DATA.DOB}' ,N'${DATA.HOMETOWN}' ,N'${DATA.SEX_CODE}' ,N'${DATA.ADD_PROVINCE}' ,N'${DATA.ADD_DISTRICT}' ,N'${DATA.ADD_COMMUNE}' ,N'${DATA.ADD_VILLAGE}' ,N'${DATA.PHONE_NUMBER}' ,N'${DATA.WORK_START_DATE}' ,N'${DATA.PASSWORD}' ,N'${DATA.EMAIL}' ,N'${DATA.WORK_POSITION_CODE}' ,N'${DATA.WORK_SHIFT_CODE}' ,N'${DATA.POSITION_CODE}' ,N'${DATA.JOB_CODE}' ,N'${DATA.FACTORY_CODE}' ,N'${DATA.WORK_STATUS_CODE}',${DATA.NV_CCID})`;
    ////console.log(setpdQuery);
    let insertoldempl = `INSERT INTO M010 (CTR_CD,EMPL_NO, EMPL_NAME, PASSWD) VALUES ('${DATA.CTR_CD}','${DATA.EMPL_NO
      }','${removeVietnameseTones(
        DATA.MIDLAST_NAME
      )} ${removeVietnameseTones(DATA.FIRST_NAME)}','${DATA.PASSWORD}')`;
    //console.log(insertoldempl);
    //console.log(setpdQuery);
    checkkq = await queryDB(insertoldempl);
    checkkq = await queryDB(setpdQuery);
    //console.log(checkkq);
    res.send(checkkq);
  } else {
    res.send({ tk_status: "NG", message: "Bạn không phải leader" });
  }
};
exports.updateemployee = async (req, res, DATA) => {
  let JOB_NAME = req.payload_data["JOB_NAME"];
  if (JOB_NAME === "Leader" || JOB_NAME === "ADMIN") {
    let checkkq = "OK";
    let checkresigndate =
      DATA.WORK_STATUS_CODE === 0
        ? `, RESIGN_DATE='${DATA.RESIGN_DATE}'`
        : ``;
    let setpdQuery = `UPDATE ZTBEMPLINFO SET CMS_ID= N'${DATA.CMS_ID}' ,FIRST_NAME= N'${DATA.FIRST_NAME}' ,MIDLAST_NAME= N'${DATA.MIDLAST_NAME}' ,DOB= N'${DATA.DOB}' ,HOMETOWN= N'${DATA.HOMETOWN}' ,SEX_CODE= N'${DATA.SEX_CODE}' ,ADD_PROVINCE= N'${DATA.ADD_PROVINCE}' ,ADD_DISTRICT= N'${DATA.ADD_DISTRICT}' ,ADD_COMMUNE= N'${DATA.ADD_COMMUNE}' ,ADD_VILLAGE= N'${DATA.ADD_VILLAGE}' ,PHONE_NUMBER= N'${DATA.PHONE_NUMBER}' ,WORK_START_DATE= N'${DATA.WORK_START_DATE}' ,PASSWORD= N'${DATA.PASSWORD}' ,EMAIL= N'${DATA.EMAIL}' ,WORK_POSITION_CODE= N'${DATA.WORK_POSITION_CODE}' ,WORK_SHIFT_CODE= N'${DATA.WORK_SHIFT_CODE}' ,POSITION_CODE= N'${DATA.POSITION_CODE}' ,JOB_CODE= N'${DATA.JOB_CODE}' ,FACTORY_CODE= N'${DATA.FACTORY_CODE}' ,WORK_STATUS_CODE= N'${DATA.WORK_STATUS_CODE}', NV_CCID=${DATA.NV_CCID} ${checkresigndate} WHERE CTR_CD='${DATA.CTR_CD}' AND EMPL_NO= '${DATA.EMPL_NO}'`;
    console.log(setpdQuery);
    checkkq = await queryDB(setpdQuery);
    console.log(checkkq);
    res.send(checkkq);
  } else {
    res.send({ tk_status: "NG", message: "Bạn không phải leader" });
  }
};
exports.getmaindept = async (req, res, DATA) => {
  let currenttime = moment().format("YYYY-MM-DD HH:mm:ss");
  let checkkq = "OK";
  let setpdQuery = `SELECT MAINDEPTCODE AS id, CTR_CD, MAINDEPTCODE, MAINDEPTNAME, MAINDEPTNAME_KR FROM ZTBMAINDEPARMENT WHERE CTR_CD='${DATA.CTR_CD}'`;
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.insertmaindept = async (req, res, DATA) => {
  let JOB_NAME = req.payload_data["JOB_NAME"];
  if (JOB_NAME === "Leader" || JOB_NAME === "ADMIN") {
    let checkkq = "OK";
    let setpdQuery = `INSERT INTO ZTBMAINDEPARMENT (CTR_CD, MAINDEPTCODE, MAINDEPTNAME, MAINDEPTNAME_KR) VALUES ('${DATA.CTR_CD}',${DATA.MAINDEPTCODE},N'${DATA.MAINDEPTNAME}',N'${DATA.MAINDEPTNAME_KR}')`;
    checkkq = await queryDB(setpdQuery);
    res.send(checkkq);
  } else {
    res.send({ tk_status: "NG", message: "Bạn không phải leader" });
  }
};
exports.updatemaindept = async (req, res, DATA) => {
  let JOB_NAME = req.payload_data["JOB_NAME"];
  if (JOB_NAME === "Leader" || JOB_NAME === "ADMIN") {
    let checkkq = "OK";
    let setpdQuery = `UPDATE ZTBMAINDEPARMENT SET MAINDEPTCODE=${DATA.MAINDEPTCODE}, MAINDEPTNAME='${DATA.MAINDEPTNAME}', MAINDEPTNAME_KR ='${DATA.MAINDEPTNAME_KR}' WHERE CTR_CD='${DATA.CTR_CD}' AND MAINDEPTCODE= ${DATA.MAINDEPTCODE}`;
    checkkq = await queryDB(setpdQuery);
    res.send(checkkq);
  } else {
    res.send({ tk_status: "NG", message: "Bạn không phải leader" });
  }
};
exports.deletemaindept = async (req, res, DATA) => {
  let JOB_NAME = req.payload_data["JOB_NAME"];
  if (JOB_NAME === "Leader" || JOB_NAME === "ADMIN") {
    let checkkq = "OK";
    let setpdQuery = `DELETE FROM ZTBMAINDEPARMENT WHERE CTR_CD='${DATA.CTR_CD}' AND MAINDEPTCODE= ${DATA.MAINDEPTCODE}`;
    checkkq = await queryDB(setpdQuery);
    res.send(checkkq);
  } else {
    res.send({ tk_status: "NG", message: "Bạn không phải leader" });
  }
};
exports.getsubdept = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `SELECT SUBDEPTCODE AS id, CTR_CD, MAINDEPTCODE, SUBDEPTCODE, SUBDEPTNAME, SUBDEPTNAME_KR FROM ZTBSUBDEPARTMENT WHERE CTR_CD='${DATA.CTR_CD}' AND MAINDEPTCODE=${DATA.MAINDEPTCODE}`;
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.insertsubdept = async (req, res, DATA) => {
  let JOB_NAME = req.payload_data["JOB_NAME"];
  if (JOB_NAME === "Leader" || JOB_NAME === "ADMIN") {
    let checkkq = "OK";
    let setpdQuery = `INSERT INTO ZTBSUBDEPARTMENT (CTR_CD, MAINDEPTCODE, SUBDEPTCODE, SUBDEPTNAME, SUBDEPTNAME_KR) VALUES ('${DATA.CTR_CD}',${DATA.MAINDEPTCODE},${DATA.SUBDEPTCODE},N'${DATA.SUBDEPTNAME}',N'${DATA.SUBDEPTNAME_KR}')`;
    checkkq = await queryDB(setpdQuery);
    res.send(checkkq);
  } else {
    res.send({ tk_status: "NG", message: "Bạn không phải leader" });
  }
};
exports.updatesubdept = async (req, res, DATA) => {
  let JOB_NAME = req.payload_data["JOB_NAME"];
  if (JOB_NAME === "Leader" || JOB_NAME === "ADMIN") {
    let checkkq = "OK";
    let setpdQuery = `UPDATE ZTBSUBDEPARTMENT SET SUBDEPTCODE=${DATA.SUBDEPTCODE}, SUBDEPTNAME='${DATA.SUBDEPTNAME}', SUBDEPTNAME_KR ='${DATA.SUBDEPTNAME_KR}' WHERE CTR_CD='${DATA.CTR_CD}' AND SUBDEPTCODE=${DATA.SUBDEPTCODE}`;
    checkkq = await queryDB(setpdQuery);
    res.send(checkkq);
  } else {
    res.send({ tk_status: "NG", message: "Bạn không phải leader" });
  }
};
exports.deletesubdept = async (req, res, DATA) => {
  let JOB_NAME = req.payload_data["JOB_NAME"];
  if (JOB_NAME === "Leader" || JOB_NAME === "ADMIN") {
    let checkkq = "OK";
    let setpdQuery = `DELETE FROM ZTBSUBDEPARTMENT WHERE CTR_CD='${DATA.CTR_CD}' AND SUBDEPTCODE=${DATA.SUBDEPTCODE}`;
    checkkq = await queryDB(setpdQuery);
    res.send(checkkq);
  } else {
    res.send({ tk_status: "NG", message: "Bạn không phải leader" });
  }
};
exports.getworkposition = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `SELECT WORK_POSITION_CODE AS id, CTR_CD, SUBDEPTCODE, WORK_POSITION_CODE, WORK_POSITION_NAME, WORK_POSITION_NAME_KR, ATT_GROUP_CODE FROM ZTBWORKPOSITION WHERE CTR_CD='${DATA.CTR_CD}' AND SUBDEPTCODE=${DATA.SUBDEPTCODE}`;
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.insertworkposition = async (req, res, DATA) => {
  let JOB_NAME = req.payload_data["JOB_NAME"];
  if (JOB_NAME === "Leader" || JOB_NAME === "ADMIN") {
    let checkkq = "OK";
    let setpdQuery = `INSERT INTO ZTBWORKPOSITION (CTR_CD, SUBDEPTCODE, WORK_POSITION_CODE, WORK_POSITION_NAME, WORK_POSITION_NAME_KR, ATT_GROUP_CODE) VALUES ('${DATA.CTR_CD}',${DATA.SUBDEPTCODE},${DATA.WORK_POSITION_CODE},N'${DATA.WORK_POSITION_NAME}',N'${DATA.WORK_POSITION_NAME_KR}',${DATA.ATT_GROUP_CODE})`;
    checkkq = await queryDB(setpdQuery);
    res.send(checkkq);
  } else {
    res.send({ tk_status: "NG", message: "Bạn không phải leader" });
  }
};
exports.updateworkposition = async (req, res, DATA) => {
  let JOB_NAME = req.payload_data["JOB_NAME"];
  if (JOB_NAME === "Leader" || JOB_NAME === "ADMIN") {
    let checkkq = "OK";
    let setpdQuery = `UPDATE ZTBWORKPOSITION SET SUBDEPTCODE=${DATA.SUBDEPTCODE}, WORK_POSITION_NAME='${DATA.WORK_POSITION_NAME}', WORK_POSITION_NAME_KR ='${DATA.WORK_POSITION_NAME_KR}' WHERE CTR_CD='${DATA.CTR_CD}' AND WORK_POSITION_CODE=${DATA.WORK_POSITION_CODE}`;
    checkkq = await queryDB(setpdQuery);
    res.send(checkkq);
  } else {
    res.send({ tk_status: "NG", message: "Bạn không phải leader" });
  }
};
exports.deleteworkposition = async (req, res, DATA) => {
  let JOB_NAME = req.payload_data["JOB_NAME"];
  if (JOB_NAME === "Leader" || JOB_NAME === "ADMIN") {
    let checkkq = "OK";
    let setpdQuery = `DELETE FROM ZTBWORKPOSITION WHERE CTR_CD='${DATA.CTR_CD}' AND WORK_POSITION_CODE=${DATA.WORK_POSITION_CODE}`;
    checkkq = await queryDB(setpdQuery);
    res.send(checkkq);
  } else {
    res.send({ tk_status: "NG", message: "Bạn không phải leader" });
  }
};
exports.getsubdeptall = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = ` WHERE CTR_CD='${DATA.CTR_CD}' `;
  if (DATA.MAINDEPTCODE) {
    condition += ` AND MAINDEPTCODE = ${DATA.MAINDEPTCODE}`;
  }
  let setpdQuery = `SELECT * FROM ZTBSUBDEPARTMENT ${condition}`;
  console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.getddmaindepttb = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `DECLARE @empl varchar(10); DECLARE @startdate DATE; DECLARE @enddate DATE        
  SET @startdate='${DATA.FROM_DATE}'
  SET @enddate='${DATA.TO_DATE}'
  SELECT EMPL_LIST.MAINDEPTNAME, COUNT(EMPL_LIST.EMPL_NO) AS COUNT_TOTAL, 
      SUM(CASE WHEN ON_OFF =1 THEN 1 ELSE 0 END) AS COUT_ON, 
      SUM(CASE WHEN ON_OFF =0 THEN 1 ELSE 0 END) AS COUT_OFF, 
      SUM(CASE WHEN ON_OFF is null THEN 1 ELSE 0 END) AS COUNT_CDD, 
      SUM(CASE WHEN ON_OFF =1 THEN 1 ELSE 0 END)*1.0/COUNT(EMPL_LIST.EMPL_NO)*100 AS ON_RATE 
  FROM (
      SELECT  
          ZTBEMPLINFOA.DATE_COLUMN,
          ZTBEMPLINFOA.EMPL_NO, 
          CMS_ID, 
          MIDLAST_NAME, 
          FIRST_NAME, 
          PHONE_NUMBER, 
          SEX_NAME, 
          WORK_STATUS_NAME, 
          FACTORY_NAME, 
          JOB_NAME, 
          WORK_SHIF_NAME, 
          WORK_POSITION_NAME, 
          SUBDEPTNAME, 
          MAINDEPTNAME, 
          REQUEST_DATE, 
          ZTBATTENDANCETB.APPLY_DATE, 
          APPROVAL_STATUS, 
          OFF_ID, 
          CA_NGHI, 
          ON_OFF, 
          OVERTIME_INFO, 
          OVERTIME, 
          REASON_NAME, 
          ZTBOFFREGISTRATIONTB.REMARK, 
          ZTBATTENDANCETB.XACNHAN 
      FROM 
          (SELECT DATE_COLUMN, EMPL_NO, CMS_ID, FIRST_NAME, MIDLAST_NAME, DOB, HOMETOWN, SEX_CODE, 
                  ADD_PROVINCE, ADD_DISTRICT, ADD_COMMUNE, ADD_VILLAGE, PHONE_NUMBER, WORK_START_DATE, PASSWORD, EMAIL, 
                  WORK_POSITION_CODE, WORK_SHIFT_CODE, POSITION_CODE, JOB_CODE, FACTORY_CODE, WORK_STATUS_CODE, REMARK, 
                  ONLINE_DATETIME, EMPL_IMAGE, RESIGN_DATE, DATETABLE.CTR_CD  
           FROM DATETABLE 
           CROSS JOIN ZTBEMPLINFO 
           WHERE DATETABLE.DATE_COLUMN BETWEEN @startdate AND @enddate 
           AND ZTBEMPLINFO.WORK_STATUS_CODE<>0) AS ZTBEMPLINFOA 
      LEFT JOIN (SELECT DATETABLE.CTR_CD, DATETABLE.DATE_COLUMN, ZTBATTENDANCETB.EMPL_NO,  
                        ZTBATTENDANCETB.APPLY_DATE,  ZTBATTENDANCETB.ON_OFF,  ZTBATTENDANCETB.REMARK,  
                        ZTBATTENDANCETB.OVERTIME_INFO, ZTBATTENDANCETB.OVERTIME, ZTBATTENDANCETB.XACNHAN, CURRENT_TEAM 
                 FROM DATETABLE 
                 LEFT JOIN ZTBATTENDANCETB 
                 ON (DATETABLE.DATE_COLUMN = ZTBATTENDANCETB.APPLY_DATE 
                     AND DATETABLE.CTR_CD = ZTBATTENDANCETB.CTR_CD) 
                 WHERE DATETABLE.DATE_COLUMN BETWEEN @startdate AND @enddate) AS ZTBATTENDANCETB 
      ON (ZTBEMPLINFOA.EMPL_NO = ZTBATTENDANCETB.EMPL_NO 
          AND ZTBEMPLINFOA.DATE_COLUMN = ZTBATTENDANCETB.APPLY_DATE) 
      LEFT JOIN ZTBSEX ON (ZTBSEX.SEX_CODE = ZTBEMPLINFOA.SEX_CODE 
                           AND ZTBSEX.CTR_CD = ZTBEMPLINFOA.CTR_CD) 
      LEFT JOIN ZTBWORKSTATUS ON (ZTBWORKSTATUS.WORK_STATUS_CODE = ZTBEMPLINFOA.WORK_STATUS_CODE 
                                  AND ZTBWORKSTATUS.CTR_CD = ZTBEMPLINFOA.CTR_CD) 
      LEFT JOIN ZTBFACTORY ON (ZTBFACTORY.FACTORY_CODE = ZTBEMPLINFOA.FACTORY_CODE 
                               AND ZTBFACTORY.CTR_CD = ZTBEMPLINFOA.CTR_CD) 
      LEFT JOIN ZTBJOB ON (ZTBJOB.JOB_CODE = ZTBEMPLINFOA.JOB_CODE 
                           AND ZTBJOB.CTR_CD = ZTBEMPLINFOA.CTR_CD) 
      LEFT JOIN ZTBPOSITION ON (ZTBPOSITION.POSITION_CODE = ZTBEMPLINFOA.POSITION_CODE 
                                AND ZTBPOSITION.CTR_CD = ZTBEMPLINFOA.CTR_CD) 
      LEFT JOIN ZTBWORKSHIFT ON (ZTBWORKSHIFT.WORK_SHIFT_CODE = ZTBEMPLINFOA.WORK_SHIFT_CODE 
                                 AND ZTBWORKSHIFT.CTR_CD = ZTBEMPLINFOA.CTR_CD) 
      LEFT JOIN ZTBWORKPOSITION ON (ZTBWORKPOSITION.WORK_POSITION_CODE = ZTBEMPLINFOA.WORK_POSITION_CODE 
                                    AND ZTBWORKPOSITION.CTR_CD = ZTBEMPLINFOA.CTR_CD) 
      LEFT JOIN ZTBSUBDEPARTMENT ON (ZTBSUBDEPARTMENT.SUBDEPTCODE = ZTBWORKPOSITION.SUBDEPTCODE 
                                     AND ZTBSUBDEPARTMENT.CTR_CD = ZTBWORKPOSITION.CTR_CD) 
      LEFT JOIN ZTBMAINDEPARMENT ON (ZTBMAINDEPARMENT.MAINDEPTCODE = ZTBSUBDEPARTMENT.MAINDEPTCODE 
                                     AND ZTBMAINDEPARMENT.CTR_CD = ZTBSUBDEPARTMENT.CTR_CD) 
      LEFT JOIN ZTBOFFREGISTRATIONTB ON (ZTBOFFREGISTRATIONTB.EMPL_NO = ZTBATTENDANCETB.EMPL_NO 
                                         AND ZTBOFFREGISTRATIONTB.APPLY_DATE = ZTBATTENDANCETB.APPLY_DATE 
                                         AND ZTBOFFREGISTRATIONTB.CTR_CD = ZTBATTENDANCETB.CTR_CD) 
      LEFT JOIN ZTBREASON ON (ZTBREASON.REASON_CODE = ZTBOFFREGISTRATIONTB.REASON_CODE 
                              AND ZTBREASON.CTR_CD = ZTBOFFREGISTRATIONTB.CTR_CD)   
  WHERE ZTBEMPLINFOA.WORK_STATUS_CODE =1 
  AND ZTBEMPLINFOA.CTR_CD='${DATA.CTR_CD}'
  ) AS EMPL_LIST
  GROUP BY EMPL_LIST.MAINDEPTNAME 
  ORDER BY COUNT(EMPL_LIST.EMPL_NO) DESC`;
  // Log câu lệnh SQL nếu cần debug
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.loadDiemDanhFullSummaryTable = async (req, res, DATA) => {
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let JOB_NAME = req.payload_data["JOB_NAME"];
  let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
  let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
  let checkkq = "OK";
  let setpdQuery = `DECLARE @empl varchar(10); DECLARE @startdate DATE; DECLARE @enddate DATE        
  SET @startdate='${DATA.FROM_DATE}'
  SET @enddate='${DATA.TO_DATE}'
SELECT DIEMDANHBP.MAINDEPTNAME,DIEMDANHBP.COUNT_TOTAL,DIEMDANHBP.COUNT_ON,DIEMDANHBP.COUNT_OFF,DIEMDANHBP.COUNT_CDD,DIEMDANHBP.T1_TOTAL,DIEMDANHBP.T1_ON,DIEMDANHBP.T1_OFF,DIEMDANHBP.T1_CDD,DIEMDANHBP.T2_TOTAL,DIEMDANHBP.T2_ON,DIEMDANHBP.T2_OFF,DIEMDANHBP.T2_CDD,DIEMDANHBP.HC_TOTAL,DIEMDANHBP.HC_ON,DIEMDANHBP.HC_OFF,DIEMDANHBP.HC_CDD,DIEMDANHBP.ON_RATE,isnull(BANGNGHI.[TOTAL],0) AS [TOTAL],isnull(BANGNGHI.[Phép năm],0) AS PHEP_NAM,isnull(BANGNGHI.[Nửa phép],0) AS NUA_PHEP,isnull(BANGNGHI.[Nghỉ việc riêng],0) AS NGHI_VIEC_RIENG,isnull(BANGNGHI.[Nghỉ ốm],0) AS NGHI_OM,isnull(BANGNGHI.[Chế độ],0) AS CHE_DO,isnull(BANGNGHI.[Không lý do],0) AS KHONG_LY_DO
FROM 
(
SELECT EMPL_LIST.MAINDEPTNAME, COUNT(EMPL_LIST.EMPL_NO) AS COUNT_TOTAL, SUM(CASE WHEN ON_OFF =1 THEN 1 ELSE 0 END) AS COUNT_ON, SUM(CASE WHEN ON_OFF =0 THEN 1 ELSE 0 END) AS COUNT_OFF, SUM(CASE WHEN ON_OFF is null THEN 1 ELSE 0 END) AS COUNT_CDD, 
SUM(CASE WHEN  WORK_SHIF_NAME='TEAM 1' THEN 1 ELSE 0 END) AS T1_TOTAL,
SUM(CASE WHEN ON_OFF =1 AND WORK_SHIF_NAME='TEAM 1' THEN 1 ELSE 0 END) AS T1_ON,
SUM(CASE WHEN ON_OFF =0 AND WORK_SHIF_NAME='TEAM 1' THEN 1 ELSE 0 END) AS T1_OFF,
SUM(CASE WHEN ON_OFF is null AND WORK_SHIF_NAME='TEAM 1' THEN 1 ELSE 0 END) AS T1_CDD,
SUM(CASE WHEN  WORK_SHIF_NAME='TEAM 2' THEN 1 ELSE 0 END) AS T2_TOTAL,
SUM(CASE WHEN ON_OFF =1 AND WORK_SHIF_NAME='TEAM 2' THEN 1 ELSE 0 END) AS T2_ON,
SUM(CASE WHEN ON_OFF =0 AND WORK_SHIF_NAME='TEAM 2' THEN 1 ELSE 0 END) AS T2_OFF,
SUM(CASE WHEN ON_OFF is null AND WORK_SHIF_NAME='TEAM 2' THEN 1 ELSE 0 END) AS T2_CDD,
SUM(CASE WHEN  WORK_SHIF_NAME=N'Hành Chính' THEN 1 ELSE 0 END) AS HC_TOTAL,
SUM(CASE WHEN ON_OFF =1 AND WORK_SHIF_NAME=N'Hành Chính' THEN 1 ELSE 0 END) AS HC_ON,
SUM(CASE WHEN ON_OFF =0 AND WORK_SHIF_NAME=N'Hành Chính' THEN 1 ELSE 0 END) AS HC_OFF,	
SUM(CASE WHEN ON_OFF is null AND WORK_SHIF_NAME=N'Hành Chính' THEN 1 ELSE 0 END) AS HC_CDD, 		   
SUM(CASE WHEN ON_OFF =1 THEN 1 ELSE 0 END)*1.0/COUNT(EMPL_LIST.EMPL_NO)*100 AS ON_RATE		   
FROM
(
  SELECT  
ZTBEMPLINFOA.DATE_COLUMN,
    ZTBEMPLINFOA.EMPL_NO, 
    CMS_ID, 
    MIDLAST_NAME, 
    FIRST_NAME, 
    PHONE_NUMBER, 
    SEX_NAME, 
    WORK_STATUS_NAME, 
    FACTORY_NAME, 
    JOB_NAME, 
    WORK_SHIF_NAME, 
    WORK_POSITION_NAME, 
    SUBDEPTNAME, 
    MAINDEPTNAME, 
    REQUEST_DATE, 
    ZTBATTENDANCETB.APPLY_DATE, 
    APPROVAL_STATUS, 
    OFF_ID, 
    CA_NGHI, 
    ON_OFF, 
    OVERTIME_INFO, 
    OVERTIME, 
    REASON_NAME, 
    ZTBOFFREGISTRATIONTB.REMARK, 
    ZTBATTENDANCETB.XACNHAN,
    ZTBEMPLINFOA.CTR_CD
  FROM 
    (SELECT DATE_COLUMN, EMPL_NO,CMS_ID,FIRST_NAME,MIDLAST_NAME,DOB,HOMETOWN,SEX_CODE,ADD_PROVINCE,ADD_DISTRICT,ADD_COMMUNE,ADD_VILLAGE,PHONE_NUMBER,WORK_START_DATE,PASSWORD,EMAIL,WORK_POSITION_CODE,WORK_SHIFT_CODE,POSITION_CODE,JOB_CODE,FACTORY_CODE,WORK_STATUS_CODE,REMARK,ONLINE_DATETIME,EMPL_IMAGE,RESIGN_DATE, DATETABLE.CTR_CD FROM DATETABLE CROSS JOIN ZTBEMPLINFO WHERE DATETABLE.DATE_COLUMN BETWEEN @startdate AND @enddate AND ZTBEMPLINFO.WORK_STATUS_CODE<>0) AS ZTBEMPLINFOA 
    LEFT JOIN (SELECT DATETABLE.CTR_CD, DATETABLE.DATE_COLUMN, ZTBATTENDANCETB.EMPL_NO,  ZTBATTENDANCETB.APPLY_DATE,  ZTBATTENDANCETB.ON_OFF,  ZTBATTENDANCETB.REMARK,  ZTBATTENDANCETB.OVERTIME_INFO, ZTBATTENDANCETB.OVERTIME, ZTBATTENDANCETB.XACNHAN,CURRENT_TEAM FROM DATETABLE LEFT JOIN ZTBATTENDANCETB ON (DATETABLE.DATE_COLUMN = ZTBATTENDANCETB.APPLY_DATE AND DATETABLE.CTR_CD = ZTBATTENDANCETB.CTR_CD) WHERE DATETABLE.DATE_COLUMN BETWEEN @startdate AND @enddate) AS ZTBATTENDANCETB ON (
      ZTBEMPLINFOA.EMPL_NO = ZTBATTENDANCETB.EMPL_NO AND ZTBEMPLINFOA.DATE_COLUMN = ZTBATTENDANCETB.APPLY_DATE AND ZTBEMPLINFOA.CTR_CD = ZTBATTENDANCETB.CTR_CD
    ) 
    LEFT JOIN ZTBSEX ON (
      ZTBSEX.SEX_CODE = ZTBEMPLINFOA.SEX_CODE AND ZTBSEX.CTR_CD = ZTBEMPLINFOA.CTR_CD
    ) 
    LEFT JOIN ZTBWORKSTATUS ON(
      ZTBWORKSTATUS.WORK_STATUS_CODE = ZTBEMPLINFOA.WORK_STATUS_CODE AND ZTBWORKSTATUS.CTR_CD = ZTBEMPLINFOA.CTR_CD
    ) 
    LEFT JOIN ZTBFACTORY ON (
      ZTBFACTORY.FACTORY_CODE = ZTBEMPLINFOA.FACTORY_CODE AND ZTBFACTORY.CTR_CD = ZTBEMPLINFOA.CTR_CD
    ) 
    LEFT JOIN ZTBJOB ON (
      ZTBJOB.JOB_CODE = ZTBEMPLINFOA.JOB_CODE AND ZTBJOB.CTR_CD = ZTBEMPLINFOA.CTR_CD
    ) 
    LEFT JOIN ZTBPOSITION ON (
      ZTBPOSITION.POSITION_CODE = ZTBEMPLINFOA.POSITION_CODE AND ZTBPOSITION.CTR_CD = ZTBEMPLINFOA.CTR_CD
    ) 
    LEFT JOIN ZTBWORKSHIFT ON (
      ZTBWORKSHIFT.WORK_SHIFT_CODE = ZTBEMPLINFOA.WORK_SHIFT_CODE AND ZTBWORKSHIFT.CTR_CD = ZTBEMPLINFOA.CTR_CD
    ) 
    LEFT JOIN ZTBWORKPOSITION ON (
      ZTBWORKPOSITION.WORK_POSITION_CODE = ZTBEMPLINFOA.WORK_POSITION_CODE AND ZTBWORKPOSITION.CTR_CD = ZTBEMPLINFOA.CTR_CD
    ) 
    LEFT JOIN ZTBSUBDEPARTMENT ON (
      ZTBSUBDEPARTMENT.SUBDEPTCODE = ZTBWORKPOSITION.SUBDEPTCODE AND ZTBSUBDEPARTMENT.CTR_CD = ZTBWORKPOSITION.CTR_CD
    ) 
    LEFT JOIN ZTBMAINDEPARMENT ON (
      ZTBMAINDEPARMENT.MAINDEPTCODE = ZTBSUBDEPARTMENT.MAINDEPTCODE AND ZTBMAINDEPARMENT.CTR_CD = ZTBSUBDEPARTMENT.CTR_CD
    ) 
    LEFT JOIN ZTBOFFREGISTRATIONTB ON (
      ZTBOFFREGISTRATIONTB.EMPL_NO = ZTBATTENDANCETB.EMPL_NO 
      AND ZTBOFFREGISTRATIONTB.APPLY_DATE = ZTBATTENDANCETB.APPLY_DATE
      AND ZTBOFFREGISTRATIONTB.CTR_CD = ZTBATTENDANCETB.CTR_CD
    ) 
    LEFT JOIN ZTBREASON ON (
      ZTBOFFREGISTRATIONTB.REASON_CODE = ZTBREASON.REASON_CODE
      AND ZTBOFFREGISTRATIONTB.CTR_CD = ZTBREASON.CTR_CD
    )   
WHERE ZTBEMPLINFOA.WORK_STATUS_CODE =1 AND ZTBEMPLINFOA.CTR_CD='${DATA.CTR_CD}'
) AS EMPL_LIST
GROUP BY EMPL_LIST.MAINDEPTNAME
)AS DIEMDANHBP
LEFT JOIN 
(
SELECT pvtb.MAINDEPTNAME, (pvtb.[Phép năm]+ pvtb.[Nửa phép]+pvtb.[Nghỉ việc riêng]+pvtb.[Nghỉ ốm]+pvtb.[Chế độ]+pvtb.[Không lý do]) AS TOTAL, 
pvtb.[Phép năm], pvtb.[Nửa phép],pvtb.[Nghỉ việc riêng],pvtb.[Nghỉ ốm],pvtb.[Chế độ],pvtb.[Không lý do]
FROM 
(
SELECT XX.MAINDEPTNAME,XX.REASON_NAME FROM  (
  SELECT  
ZTBEMPLINFOA.DATE_COLUMN,
    ZTBEMPLINFOA.EMPL_NO, 
    CMS_ID, 
    MIDLAST_NAME, 
    FIRST_NAME, 
    PHONE_NUMBER, 
    SEX_NAME, 
    WORK_STATUS_NAME, 
    FACTORY_NAME, 
    JOB_NAME, 
    WORK_SHIF_NAME, 
    WORK_POSITION_NAME, 
    SUBDEPTNAME, 
    MAINDEPTNAME, 
    REQUEST_DATE, 
    ZTBATTENDANCETB.APPLY_DATE, 
    APPROVAL_STATUS, 
    OFF_ID, 
    CA_NGHI, 
    ON_OFF, 
    OVERTIME_INFO, 
    OVERTIME, 
CASE WHEN ON_OFF is null AND OFF_ID is null AND DATEPART(WEEKDAY,ZTBEMPLINFOA.DATE_COLUMN)<>1 THEN N'Không lý do' ELSE REASON_NAME END AS REASON_NAME,             
    ZTBOFFREGISTRATIONTB.REMARK, 
    ZTBATTENDANCETB.XACNHAN,
    ZTBEMPLINFOA.CTR_CD
  FROM 
    (SELECT DATE_COLUMN, EMPL_NO,CMS_ID,FIRST_NAME,MIDLAST_NAME,DOB,HOMETOWN,SEX_CODE,ADD_PROVINCE,ADD_DISTRICT,ADD_COMMUNE,ADD_VILLAGE,PHONE_NUMBER,WORK_START_DATE,PASSWORD,EMAIL,WORK_POSITION_CODE,WORK_SHIFT_CODE,POSITION_CODE,JOB_CODE,FACTORY_CODE,WORK_STATUS_CODE,REMARK,ONLINE_DATETIME,EMPL_IMAGE,RESIGN_DATE,DATETABLE.CTR_CD FROM DATETABLE CROSS JOIN ZTBEMPLINFO WHERE DATETABLE.DATE_COLUMN BETWEEN @startdate AND @enddate AND ZTBEMPLINFO.WORK_STATUS_CODE<>0) AS ZTBEMPLINFOA 
    LEFT JOIN (SELECT DATETABLE.CTR_CD, DATETABLE.DATE_COLUMN, ZTBATTENDANCETB.EMPL_NO,  ZTBATTENDANCETB.APPLY_DATE,  ZTBATTENDANCETB.ON_OFF,  ZTBATTENDANCETB.REMARK,  ZTBATTENDANCETB.OVERTIME_INFO, ZTBATTENDANCETB.OVERTIME, ZTBATTENDANCETB.XACNHAN,CURRENT_TEAM FROM DATETABLE LEFT JOIN ZTBATTENDANCETB ON (DATETABLE.DATE_COLUMN = ZTBATTENDANCETB.APPLY_DATE AND DATETABLE.CTR_CD = ZTBATTENDANCETB.CTR_CD) WHERE DATETABLE.DATE_COLUMN BETWEEN @startdate AND @enddate) AS ZTBATTENDANCETB ON (
      ZTBEMPLINFOA.EMPL_NO = ZTBATTENDANCETB.EMPL_NO AND ZTBEMPLINFOA.DATE_COLUMN = ZTBATTENDANCETB.APPLY_DATE AND ZTBEMPLINFOA.CTR_CD = ZTBATTENDANCETB.CTR_CD
    ) 
    LEFT JOIN ZTBSEX ON (
      ZTBSEX.SEX_CODE = ZTBEMPLINFOA.SEX_CODE AND ZTBSEX.CTR_CD = ZTBEMPLINFOA.CTR_CD
    ) 
    LEFT JOIN ZTBWORKSTATUS ON(
      ZTBWORKSTATUS.WORK_STATUS_CODE = ZTBEMPLINFOA.WORK_STATUS_CODE AND ZTBWORKSTATUS.CTR_CD = ZTBEMPLINFOA.CTR_CD
    ) 
    LEFT JOIN ZTBFACTORY ON (
      ZTBFACTORY.FACTORY_CODE = ZTBEMPLINFOA.FACTORY_CODE AND ZTBFACTORY.CTR_CD = ZTBEMPLINFOA.CTR_CD
    ) 
    LEFT JOIN ZTBJOB ON (
      ZTBJOB.JOB_CODE = ZTBEMPLINFOA.JOB_CODE AND ZTBJOB.CTR_CD = ZTBEMPLINFOA.CTR_CD
    ) 
    LEFT JOIN ZTBPOSITION ON (
      ZTBPOSITION.POSITION_CODE = ZTBEMPLINFOA.POSITION_CODE AND ZTBPOSITION.CTR_CD = ZTBEMPLINFOA.CTR_CD
    ) 
    LEFT JOIN ZTBWORKSHIFT ON (
      ZTBWORKSHIFT.WORK_SHIFT_CODE = ZTBEMPLINFOA.WORK_SHIFT_CODE AND ZTBWORKSHIFT.CTR_CD = ZTBEMPLINFOA.CTR_CD
    ) 
    LEFT JOIN ZTBWORKPOSITION ON (
      ZTBWORKPOSITION.WORK_POSITION_CODE = ZTBEMPLINFOA.WORK_POSITION_CODE AND ZTBWORKPOSITION.CTR_CD = ZTBEMPLINFOA.CTR_CD
    ) 
    LEFT JOIN ZTBSUBDEPARTMENT ON (
      ZTBSUBDEPARTMENT.SUBDEPTCODE = ZTBWORKPOSITION.SUBDEPTCODE AND ZTBSUBDEPARTMENT.CTR_CD = ZTBWORKPOSITION.CTR_CD
    ) 
    LEFT JOIN ZTBMAINDEPARMENT ON (
      ZTBMAINDEPARMENT.MAINDEPTCODE = ZTBSUBDEPARTMENT.MAINDEPTCODE AND ZTBMAINDEPARMENT.CTR_CD = ZTBSUBDEPARTMENT.CTR_CD
    ) 
    LEFT JOIN ZTBOFFREGISTRATIONTB ON (
      ZTBOFFREGISTRATIONTB.EMPL_NO = ZTBATTENDANCETB.EMPL_NO 
      AND ZTBOFFREGISTRATIONTB.APPLY_DATE = ZTBATTENDANCETB.APPLY_DATE
      AND ZTBOFFREGISTRATIONTB.CTR_CD = ZTBATTENDANCETB.CTR_CD
    ) 
    LEFT JOIN ZTBREASON ON (
      ZTBOFFREGISTRATIONTB.REASON_CODE = ZTBREASON.REASON_CODE
      AND ZTBOFFREGISTRATIONTB.CTR_CD = ZTBREASON.CTR_CD
    )   
WHERE ZTBEMPLINFOA.WORK_STATUS_CODE =1 AND ZTBEMPLINFOA.CTR_CD='${DATA.CTR_CD}'
AND CASE WHEN ON_OFF is null AND OFF_ID is null AND DATEPART(WEEKDAY,ZTBEMPLINFOA.DATE_COLUMN)<>1  THEN N'Không lý do' ELSE REASON_NAME END is not null) AS XX
) AS BANGNGUON
PIVOT
(
COUNT(BANGNGUON.REASON_NAME)
FOR BANGNGUON.REASON_NAME IN ([Phép năm],[Nửa phép],[Nghỉ việc riêng],[Nghỉ ốm],[Chế độ],[Không lý do])
) AS pvtb
) BANGNGHI
ON(DIEMDANHBP.MAINDEPTNAME = BANGNGHI.MAINDEPTNAME)`;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.xoadangkynghi_AUTO = async (req, res, DATA) => {
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let JOB_NAME = req.payload_data["JOB_NAME"];
  let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
  let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
  let checkkq = "OK";
  let setpdQuery = `DELETE FROM ZTBOFFREGISTRATIONTB 
                    WHERE CTR_CD='${DATA.CTR_CD}' 
                      AND APPLY_DATE='${moment().format("YYYY-MM-DD")}' 
                      AND EMPL_NO='${DATA.EMPL_NO}' 
                      AND REMARK ='AUTO'`;
  // console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
  // console.log(checkkq);
};
exports.setca = async (req, res, DATA) => {
  // console.log(DATA);
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let JOB_NAME = req.payload_data["JOB_NAME"];
  let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
  let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
  let checkkq = "OK";
  let setpdQuery = `
  UPDATE ZTBEMPLINFO SET CALV=${DATA.CALV} WHERE EMPL_NO='${DATA.EMPL_NO}'
  `;
  console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  // console.log(checkkq);
  res.send(checkkq);
};
exports.setnhamay = async (req, res, DATA) => {
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let JOB_NAME = req.payload_data["JOB_NAME"];
  let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
  let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
  let checkkq = "OK";
  let setpdQuery = `UPDATE ZTBEMPLINFO SET FACTORY_CODE = ${DATA.FACTORY} WHERE CTR_CD='${DATA.CTR_CD}' AND EMPL_NO='${DATA.EMPL_NO}'`;
  // console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
  // console.log(checkkq);
};
exports.setEMPL_WORK_POSITION = async (req, res, DATA) => {
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let JOB_NAME = req.payload_data["JOB_NAME"];
  let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
  let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
  let checkkq = "OK";
  let setpdQuery = `UPDATE ZTBEMPLINFO SET WORK_POSITION_CODE=${DATA.WORK_POSITION_CODE} WHERE CTR_CD='${DATA.CTR_CD}' AND EMPL_NO='${DATA.EMPL_NO}'`;
  // console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.updateM010 = async (req, res, DATA) => {
  let JOB_NAME = req.payload_data["JOB_NAME"];
  if (JOB_NAME === "Leader" || JOB_NAME === "ADMIN") {
    let checkkq = "OK";
    let setpdQuery = `UPDATE M010 SET EMPL_NAME='${removeVietnameseTones(DATA.MIDLAST_NAME)} ${removeVietnameseTones(DATA.FIRST_NAME)}' WHERE CTR_CD='${DATA.CTR_CD}' AND  EMPL_NO= '${DATA.EMPL_NO}'`;
    // console.log(setpdQuery);
    checkkq = await queryDB(setpdQuery);
    // console.log(checkkq);
    res.send(checkkq);
  } else {
    res.send({ tk_status: "NG", message: "Bạn không phải leader" });
  }
};
exports.loadC001 = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
      DECLARE @empl varchar(10); DECLARE @startdate DATE; DECLARE @enddate DATE;        
      SET @startdate='${DATA.FROM_DATE}';
      SET @enddate='${DATA.TO_DATE}';
      SELECT  
          ZTBEMPLINFOA.DATE_COLUMN,
          ZTBEMPLINFOA.NV_CCID,
          ZTBEMPLINFOA.EMPL_NO, 
          ZTBEMPLINFOA.CMS_ID, 
          ZTBEMPLINFOA.MIDLAST_NAME, 
          ZTBEMPLINFOA.FIRST_NAME, 
          ZTBEMPLINFOA.PHONE_NUMBER, 
          ZTBSEX.SEX_NAME, 
          ZTBWORKSTATUS.WORK_STATUS_NAME, 
          ZTBFACTORY.FACTORY_NAME, 
          ZTBJOB.JOB_NAME, 
          ZTBWORKSHIFT.WORK_SHIF_NAME, 
          ZTBWORKPOSITION.WORK_POSITION_NAME, 
          ZTBSUBDEPARTMENT.SUBDEPTNAME, 
          ZTBMAINDEPARMENT.MAINDEPTNAME, 
          ZTBOFFREGISTRATIONTB.REQUEST_DATE, 
          ZTBATTENDANCETB.APPLY_DATE, 
          ZTBOFFREGISTRATIONTB.APPROVAL_STATUS, 
          ZTBOFFREGISTRATIONTB.OFF_ID, 
          ZTBOFFREGISTRATIONTB.CA_NGHI, 
          ZTBATTENDANCETB.ON_OFF, 
          ZTBATTENDANCETB.OVERTIME_INFO, 
          ZTBATTENDANCETB.OVERTIME, 
          ZTBREASON.REASON_NAME, 
          ZTBOFFREGISTRATIONTB.REMARK, 
          ZTBATTENDANCETB.XACNHAN,
          ZTB_CALV.CA_CODE,    
          ZTB_CALV.CA_NAME,    
          ZTB_CALV.IN_START,    
          ZTB_CALV.IN_END,
          ZTB_CALV.OUT_START,
          ZTB_CALV.OUT_END,
          CHAMCONG0.CHECK_DATE AS CHECK_DATE0,
          CHAMCONG0.CHECK1 AS CHECK10,
          CHAMCONG0.CHECK2 AS CHECK20,
          CHAMCONG0.CHECK3 AS CHECK30,
          CHAMCONG0.CHECK4 AS CHECK40,
          CHAMCONG0.CHECK5 AS CHECK50,
          CHAMCONG0.CHECK6 AS CHECK60,
          CHAMCONG.CHECK_DATE,
          CHAMCONG.CHECK1,
          CHAMCONG.CHECK2,
          CHAMCONG.CHECK3,
          CHAMCONG.CHECK4,
          CHAMCONG.CHECK5,
          CHAMCONG.CHECK6,
          CHAMCONG2.CHECK_DATE AS CHECK_DATE2,
          CHAMCONG2.CHECK1 AS CHECK12,
          CHAMCONG2.CHECK2 AS CHECK22,
          CHAMCONG2.CHECK3 AS CHECK32,
          CHAMCONG2.CHECK4 AS CHECK42,
          CHAMCONG2.CHECK5 AS CHECK52,
          CHAMCONG2.CHECK6 AS CHECK62
      FROM 
      (SELECT DATE_COLUMN, NV_CCID,EMPL_NO,CMS_ID,FIRST_NAME,MIDLAST_NAME,DOB,HOMETOWN,SEX_CODE,ADD_PROVINCE,ADD_DISTRICT,ADD_COMMUNE,ADD_VILLAGE,PHONE_NUMBER,WORK_START_DATE,PASSWORD,EMAIL,WORK_POSITION_CODE,WORK_SHIFT_CODE,POSITION_CODE,JOB_CODE,FACTORY_CODE,WORK_STATUS_CODE,REMARK,ONLINE_DATETIME,EMPL_IMAGE,RESIGN_DATE  
       FROM DATETABLE CROSS JOIN ZTBEMPLINFO 
       WHERE DATETABLE.DATE_COLUMN BETWEEN @startdate AND @enddate 
       AND ZTBEMPLINFO.WORK_STATUS_CODE<>0) AS ZTBEMPLINFOA 
      LEFT JOIN ZTBATTENDANCETB ON (
          ZTBEMPLINFOA.EMPL_NO = ZTBATTENDANCETB.EMPL_NO 
          AND ZTBEMPLINFOA.DATE_COLUMN = ZTBATTENDANCETB.APPLY_DATE
      ) 
      LEFT JOIN ZTBSEX ON ZTBSEX.SEX_CODE = ZTBEMPLINFOA.SEX_CODE
      LEFT JOIN ZTBWORKSTATUS ON ZTBWORKSTATUS.WORK_STATUS_CODE = ZTBEMPLINFOA.WORK_STATUS_CODE
      LEFT JOIN ZTBFACTORY ON ZTBFACTORY.FACTORY_CODE = ZTBEMPLINFOA.FACTORY_CODE
      LEFT JOIN ZTBJOB ON ZTBJOB.JOB_CODE = ZTBEMPLINFOA.JOB_CODE
      LEFT JOIN ZTBPOSITION ON ZTBPOSITION.POSITION_CODE = ZTBEMPLINFOA.POSITION_CODE
      LEFT JOIN ZTBWORKSHIFT ON ZTBWORKSHIFT.WORK_SHIFT_CODE = ZTBEMPLINFOA.WORK_SHIFT_CODE
      LEFT JOIN ZTBWORKPOSITION ON ZTBWORKPOSITION.WORK_POSITION_CODE = ZTBEMPLINFOA.WORK_POSITION_CODE
      LEFT JOIN ZTBSUBDEPARTMENT ON ZTBSUBDEPARTMENT.SUBDEPTCODE = ZTBWORKPOSITION.SUBDEPTCODE
      LEFT JOIN ZTBMAINDEPARMENT ON ZTBMAINDEPARMENT.MAINDEPTCODE = ZTBSUBDEPARTMENT.MAINDEPTCODE
      LEFT JOIN ZTBOFFREGISTRATIONTB ON (
          ZTBOFFREGISTRATIONTB.EMPL_NO = ZTBATTENDANCETB.EMPL_NO 
          AND ZTBOFFREGISTRATIONTB.APPLY_DATE = ZTBATTENDANCETB.APPLY_DATE
      ) 
      LEFT JOIN ZTBREASON ON ZTBOFFREGISTRATIONTB.REASON_CODE = ZTBREASON.REASON_CODE  
      LEFT JOIN ZTB_CALV ON ZTB_CALV.CA_CODE = ZTBATTENDANCETB.CURRENT_CA
      WHERE ZTBEMPLINFOA.WORK_STATUS_CODE = 1 
      ORDER BY ZTBEMPLINFOA.DATE_COLUMN DESC, ZTBEMPLINFOA.POSITION_CODE ASC
  `;
  // console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  // console.log(checkkq);
  res.send(checkkq);
};
exports.loadC0012 = async (req, res, DATA) => {
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let JOB_NAME = req.payload_data["JOB_NAME"];
  let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
  let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
  let checkkq = "OK";
  let condition = ``;
  console.log(DATA.TRUNGHISINH);
  if (DATA.TRUNGHISINH === true) {
    condition += ` AND ZTBEMPLINFO.WORK_STATUS_CODE<>2 `;
  }
  if (DATA.TRUNGHIVIEC === true) {
    condition += ` AND ZTBEMPLINFO.WORK_STATUS_CODE<>0 `;
  }
  let setpdQuery = `
  DECLARE @empl varchar(10); DECLARE @startdate DATE; DECLARE @enddate DATE;         
  SET @startdate='${DATA.FROM_DATE}';
  SET @enddate='${DATA.TO_DATE}';
  -- CTE: Xử lý dữ liệu từ hàm fn_cleanchamcong
  WITH CleanChamCong AS (
      SELECT 
          NV_CCID, 
          CHECK_DATE, 
          CHECK_DATETIME, 
          RANK() OVER (PARTITION BY NV_CCID, CHECK_DATE ORDER BY CHECK_DATETIME ASC) AS CHECKNO, 
          CTR_CD
      FROM fn_cleanchamcong(10)
  ),
  PivotedChamCong AS (
      SELECT 
          NV_CCID, 
          CHECK_DATE, 
          [1] AS CHECK1, 
          [2] AS CHECK2, 
          [3] AS CHECK3,
          LEAD([1]) OVER (PARTITION BY NV_CCID ORDER BY CHECK_DATE ASC) AS NEXT_CHECK1,
          LEAD([2]) OVER (PARTITION BY NV_CCID ORDER BY CHECK_DATE ASC) AS NEXT_CHECK2,
          LEAD([3]) OVER (PARTITION BY NV_CCID ORDER BY CHECK_DATE ASC) AS NEXT_CHECK3,
          LAG([1]) OVER (PARTITION BY NV_CCID ORDER BY CHECK_DATE ASC) AS PREV_CHECK1,
          LAG([2]) OVER (PARTITION BY NV_CCID ORDER BY CHECK_DATE ASC) AS PREV_CHECK2,
          LAG([3]) OVER (PARTITION BY NV_CCID ORDER BY CHECK_DATE ASC) AS PREV_CHECK3,
          CTR_CD
      FROM 
          CleanChamCong
          PIVOT (
              MIN(CHECK_DATETIME) FOR CHECKNO IN ([1], [2], [3])
          ) AS pvtb
  ),
  DateAndEmployee AS (
      SELECT 
          DATE_COLUMN,
          CALV,
          NV_CCID,
          EMPL_NO,
          CMS_ID,
          FIRST_NAME,
          MIDLAST_NAME,
          SEX_CODE,
          WORK_STATUS_CODE,
          FACTORY_CODE,
          JOB_CODE,
          WORK_POSITION_CODE,
          WORK_SHIFT_CODE,
          DATETABLE.CTR_CD,
          PHONE_NUMBER
      FROM DATETABLE
      CROSS JOIN ZTBEMPLINFO
      WHERE 
          DATETABLE.DATE_COLUMN BETWEEN @startdate AND @enddate 
          AND ZTBEMPLINFO.CTR_CD = '${DATA.CTR_CD}' ${condition}
  ),
  AttendanceData AS (
      SELECT 
          DATETABLE.DATE_COLUMN,
          ZTBATTENDANCETB.EMPL_NO,
          ZTBATTENDANCETB.IN_TIME, 
          ZTBATTENDANCETB.OUT_TIME, 
          ZTBATTENDANCETB.APPLY_DATE, 
          ZTBATTENDANCETB.ON_OFF, 
          ZTBATTENDANCETB.REMARK, 
          ZTBATTENDANCETB.OVERTIME_INFO, 
          ZTBATTENDANCETB.OVERTIME, 
          ZTBATTENDANCETB.XACNHAN,
          CURRENT_TEAM,
          ZTBATTENDANCETB.CURRENT_CA,
          DATETABLE.CTR_CD
      FROM DATETABLE
      LEFT JOIN ZTBATTENDANCETB 
          ON DATETABLE.DATE_COLUMN = ZTBATTENDANCETB.APPLY_DATE 
          AND DATETABLE.CTR_CD = ZTBATTENDANCETB.CTR_CD
      WHERE 
          DATETABLE.DATE_COLUMN BETWEEN @startdate AND @enddate 
          AND DATETABLE.CTR_CD = '${DATA.CTR_CD}'
  )
  -- Truy vấn chính
  SELECT 
      E.DATE_COLUMN,
      E.NV_CCID,
      E.EMPL_NO, 
      E.CMS_ID, 
      E.MIDLAST_NAME, 
      E.FIRST_NAME, 
      E.PHONE_NUMBER, 
      S.SEX_NAME, 
      WS.WORK_STATUS_NAME, 
      F.FACTORY_NAME, 
      J.JOB_NAME, 
      WSH.WORK_SHIF_NAME, 
      A.CURRENT_CA AS CALV,
      WP.WORK_POSITION_NAME, 
      SD.SUBDEPTNAME, 
      MD.MAINDEPTNAME, 
      OFFTB.REQUEST_DATE, 
      A.APPLY_DATE, 
      OFFTB.APPROVAL_STATUS, 
      OFFTB.OFF_ID, 
      OFFTB.CA_NGHI, 
      A.ON_OFF, 
      A.OVERTIME_INFO, 
      A.OVERTIME,  
      R.REASON_NAME, 
      OFFTB.REMARK, 
      A.XACNHAN,
      A.IN_TIME AS FIXED_IN_TIME,
      A.OUT_TIME AS FIXED_OUT_TIME,
      P.CHECK1,
      P.CHECK2,
      P.CHECK3,
      P.PREV_CHECK1,
      P.PREV_CHECK2,
      P.PREV_CHECK3,
      P.NEXT_CHECK1,
      P.NEXT_CHECK2,
      P.NEXT_CHECK3
  FROM 
      DateAndEmployee E
  LEFT JOIN AttendanceData A 
      ON E.EMPL_NO = A.EMPL_NO 
      AND E.DATE_COLUMN = A.APPLY_DATE 
      AND E.CTR_CD = A.CTR_CD
  LEFT JOIN ZTBSEX S 
      ON S.SEX_CODE = E.SEX_CODE 
      AND S.CTR_CD = E.CTR_CD
  LEFT JOIN ZTBWORKSTATUS WS 
      ON WS.WORK_STATUS_CODE = E.WORK_STATUS_CODE 
      AND WS.CTR_CD = E.CTR_CD
  LEFT JOIN ZTBFACTORY F 
      ON F.FACTORY_CODE = E.FACTORY_CODE 
      AND F.CTR_CD = E.CTR_CD
  LEFT JOIN ZTBJOB J 
      ON J.JOB_CODE = E.JOB_CODE 
      AND J.CTR_CD = E.CTR_CD
  LEFT JOIN ZTBWORKSHIFT WSH 
      ON WSH.WORK_SHIFT_CODE = E.WORK_SHIFT_CODE 
      AND WSH.CTR_CD = E.CTR_CD
  LEFT JOIN ZTBWORKPOSITION WP 
      ON WP.WORK_POSITION_CODE = E.WORK_POSITION_CODE 
      AND WP.CTR_CD = E.CTR_CD
  LEFT JOIN ZTBSUBDEPARTMENT SD 
      ON SD.SUBDEPTCODE = WP.SUBDEPTCODE 
      AND SD.CTR_CD = WP.CTR_CD
  LEFT JOIN ZTBMAINDEPARMENT MD 
      ON MD.MAINDEPTCODE = SD.MAINDEPTCODE 
      AND MD.CTR_CD = SD.CTR_CD
  LEFT JOIN ZTBOFFREGISTRATIONTB OFFTB 
      ON OFFTB.EMPL_NO = A.EMPL_NO 
      AND OFFTB.APPLY_DATE = A.APPLY_DATE 
      AND OFFTB.CTR_CD = A.CTR_CD
  LEFT JOIN ZTBREASON R 
      ON OFFTB.REASON_CODE = R.REASON_CODE 
      AND OFFTB.CTR_CD = R.CTR_CD
  LEFT JOIN PivotedChamCong P 
      ON P.NV_CCID = E.NV_CCID 
      AND P.CHECK_DATE = E.DATE_COLUMN 
      AND P.CTR_CD = E.CTR_CD
  WHERE 
      E.CTR_CD = '${DATA.CTR_CD}'
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.loadCaInfo = async (req, res, DATA) => {
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let JOB_NAME = req.payload_data["JOB_NAME"];
  let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
  let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
  let checkkq = "OK";
  let setpdQuery = `SELECT * FROM ZTB_CALV WHERE CTR_CD='${DATA.CTR_CD}' ORDER BY CA_CODE ASC`;
  console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.setdiemdanhnhom2 = async (req, res, DATA) => {
  let JOB_NAME = req.payload_data["JOB_NAME"];
  let CURRENT_TEAM = DATA.CURRENT_TEAM;
  let CURRENT_CA = DATA.CURRENT_CA;
  let diemdanhvalue = DATA.diemdanhvalue;
  let EMPL_NO = DATA.EMPL_NO;
  if (
    JOB_NAME === "Leader" ||
    JOB_NAME === "Sub Leader" ||
    JOB_NAME === "Dept Staff" ||
    JOB_NAME === "ADMIN"
  ) {
    let today_format = moment().format("YYYY-MM-DD");
    let checkAttQuery = `
          SELECT ON_OFF 
          FROM ZTBATTENDANCETB 
          WHERE CTR_CD='${DATA.CTR_CD}' 
          AND EMPL_NO='${DATA.EMPL_NO}' 
          AND APPLY_DATE='${DATA.APPLY_DATE}'
      `;
    let checkAttKQ = await queryDB(checkAttQuery);
    if (checkAttKQ.tk_status === "NG") {
      // Chưa điểm danh, thêm mới
      let insert_diemdanhQuery = `
              INSERT INTO ZTBATTENDANCETB 
              (CTR_CD, EMPL_NO, APPLY_DATE, ON_OFF, CURRENT_TEAM, CURRENT_CA) 
              VALUES 
              ('${DATA.CTR_CD}', '${DATA.EMPL_NO}', '${DATA.APPLY_DATE}', ${diemdanhvalue}, '${CURRENT_TEAM}', '${CURRENT_CA}')
          `;
      let insert_dd = await queryDB(insert_diemdanhQuery);
      res.send(insert_dd);
    } else {
      // Đã điểm danh, cập nhật lại giá trị
      let update_diemdanhQuery = `
              UPDATE ZTBATTENDANCETB 
              SET ON_OFF = ${diemdanhvalue}, CURRENT_TEAM='${CURRENT_TEAM}' 
              WHERE CTR_CD='${DATA.CTR_CD}' 
              AND EMPL_NO='${DATA.EMPL_NO}' 
              AND APPLY_DATE='${DATA.APPLY_DATE}'
          `;
      let update_dd = await queryDB(update_diemdanhQuery);
      res.send(update_dd);
    }
  } else {
    res.send("NO_LEADER");
  }
};
exports.fixTime = async (req, res, DATA) => {
  let setpdQuery = `
      UPDATE ZTBATTENDANCETB 
      SET IN_TIME='${DATA.IN_TIME}', OUT_TIME='${DATA.OUT_TIME}' 
      WHERE EMPL_NO='${DATA.EMPL_NO}' 
      AND APPLY_DATE='${DATA.APPLY_DATE}' 
      AND CTR_CD='${DATA.CTR_CD}'
  `;
  let checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};

exports.fixTimehangloat = async (req, res, DATA) => {
  let TIME_DATA = DATA.TIME_DATA; //array
  let queries2 = [];
  let TIME_DATA_ATT = TIME_DATA.filter((item) => item.ON_OFF === null);
  for (let i = 0; i < TIME_DATA_ATT.length; i++) {        
    queries2.push(`INSERT INTO ZTBATTENDANCETB (CTR_CD, EMPL_NO, APPLY_DATE, ON_OFF, CURRENT_TEAM, CURRENT_CA) VALUES ('${DATA.CTR_CD}', '${TIME_DATA_ATT[i].EMPL_NO}', '${TIME_DATA_ATT[i].DATE_COLUMN}', ${TIME_DATA_ATT[i].IN_TIME.includes("Thiếu") && TIME_DATA_ATT[i].OUT_TIME.includes("Thiếu") ? 0 : 1}, ${TIME_DATA_ATT[i].WORK_SHIF_NAME === "Hành Chính" ? 0 : TIME_DATA_ATT[i].WORK_SHIF_NAME === "TEAM 1" ? 1 : 2}, ${TIME_DATA_ATT[i].CALV === 'Hành Chính' ? 0 : TIME_DATA_ATT[i].CALV === 'Ca Ngày' ? 1 : TIME_DATA_ATT[i].CALV === 'Ca Đêm' ? 2 : 0})`);
  }
  let query2 = queries2.join(";");
  //console.log('query2',query2);
  let kq2 = await queryDB(query2);

  let queries3 = [];
  let TIME_DATA_ATT2 = TIME_DATA.filter((item) => item.ON_OFF !== null);
  for (let i = 0; i < TIME_DATA_ATT2.length; i++) {        
    queries3.push(`UPDATE ZTBATTENDANCETB SET ON_OFF = ${TIME_DATA_ATT2[i].IN_TIME.includes("Thiếu") && TIME_DATA_ATT2[i].OUT_TIME.includes("Thiếu") ? 0 : 1}, CURRENT_TEAM = ${TIME_DATA_ATT2[i].WORK_SHIF_NAME === "Hành Chính" ? 0 : TIME_DATA_ATT2[i].WORK_SHIF_NAME === "TEAM 1" ? 1 : 2}, CURRENT_CA = ${TIME_DATA_ATT2[i].CALV === 'Hành Chính' ? 0 : TIME_DATA_ATT2[i].CALV === 'Ca Ngày' ? 1 : TIME_DATA_ATT2[i].CALV === 'Ca Đêm' ? 2 : 0} WHERE CTR_CD = '${DATA.CTR_CD}' AND EMPL_NO = '${TIME_DATA_ATT2[i].EMPL_NO}' AND APPLY_DATE = '${TIME_DATA_ATT2[i].DATE_COLUMN}'`);
  }
  let query3 = queries3.join(";");
  //console.log('query3',query3);
  let kq3 = await queryDB(query3);

  let queries = [];
  for (let i = 0; i < TIME_DATA.length; i++) {    
    queries.push(`UPDATE ZTBATTENDANCETB SET IN_TIME = ${TIME_DATA[i].IN_TIME.includes("Thiếu") ? 'NULL' : `'${TIME_DATA[i].IN_TIME}'`}, OUT_TIME = ${TIME_DATA[i].OUT_TIME.includes("Thiếu") ? 'NULL' : `'${TIME_DATA[i].OUT_TIME}'`} WHERE CTR_CD = '${DATA.CTR_CD}' AND EMPL_NO = '${TIME_DATA[i].EMPL_NO}' AND APPLY_DATE = '${TIME_DATA[i].DATE_COLUMN}'`);
  }
  let query = queries.join(";");
  //console.log('query',query);
  let kq = await queryDB(query);

  res.send({tk_status:"OK", data:{kq,kq2,kq3}});
};
exports.update_empl_image = async (req, res, DATA) => {
  let setpdQuery = `
      UPDATE ZTBEMPLINFO 
      SET EMPL_IMAGE='Y' 
      WHERE CTR_CD='${DATA.CTR_CD}' 
      AND EMPL_NO='${DATA.EMPL_NO}'
  `;
  let checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.getDepartmentList = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `          
  SELECT * FROM ZTB_DEPARTMENT_TB ORDER BY DEPT_CODE ASC
  `;
  //console.log(insertQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.checkdiemdanh = async (req, res, DATA) => {
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let checkkq = "OK";
  let setpdQuery = `SELECT * FROM ZTBATTENDANCETB WHERE CTR_CD='${DATA.CTR_CD}' AND EMPL_NO= '${EMPL_NO}' AND APPLY_DATE= '${moment().format(
    "YYYY-MM-DD"
  )}' `;
  //${moment().format('YYYY-MM-DD')}
  ////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.common = async (req, res, DATA) => {
};
exports.common = async (req, res, DATA) => {
};