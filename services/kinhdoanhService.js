const { queryDB } = require("../config/database");
const moment = require("moment");
const { generate_condition_get_invoice, generate_condition_get_po, generate_condition_get_ycsx, generate_condition_get_plan, generate_condition_get_fcst } = require("../utils/sqlUtils");
const { checkPermission } = require("../utils/permissionUtils");
exports.customerpobalancebyprodtype_new = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `WITH ZTBDLVR AS 
  (SELECT CUST_CD, G_CODE, PO_NO, CTR_CD, SUM(DELIVERY_QTY) AS DELIVERY_QTY FROM ZTBDelivery WHERE CTR_CD='${DATA.CTR_CD}' GROUP BY CUST_CD, G_CODE, PO_NO, CTR_CD),
  POTB AS
  (
  SELECT M110.CUST_NAME_KD, M100.PROD_TYPE, SUM((ZTBPOTable.PO_QTY-isnull(ZTBDLVR.DELIVERY_QTY,0))) AS PO_BALANCE,  SUM((ZTBPOTable.PO_QTY-isnull(ZTBDLVR.DELIVERY_QTY,0))* ZTBPOTable.PROD_PRICE) AS BALANCE_AMOUNT  FROM ZTBPOTable 
  LEFT JOIN ZTBDLVR ON (ZTBPOTable.G_CODE = ZTBDLVR.G_CODE AND ZTBPOTable.CUST_CD = ZTBDLVR.CUST_CD AND ZTBPOTable.PO_NO = ZTBDLVR.PO_NO AND ZTBPOTable.CTR_CD = ZTBDLVR.CTR_CD)
  LEFT JOIN M100 ON M100.G_CODE = ZTBPOTable.G_CODE AND M100.CTR_CD = ZTBPOTable.CTR_CD
  LEFT JOIN M110 ON M110.CUST_CD = ZTBPOTable.CUST_CD AND M110.CTR_CD = ZTBPOTable.CTR_CD
  WHERE ZTBPOTable.CTR_CD='${DATA.CTR_CD}'
  GROUP BY M110.CUST_NAME_KD, M100.PROD_TYPE
  ),
  BLQTYTB AS
  (
  SELECT * FROM
  (SELECT POTB.CUST_NAME_KD, POTB.PROD_TYPE, POTB.PO_BALANCE FROM POTB)
  AS srctb
  PIVOT
  (
    SUM(srctb.PO_BALANCE) FOR srctb.PROD_TYPE IN ([TSP],[LABEL],[UV],[OLED],[TAPE],[RIBBON],[SPT])
  ) AS PVTB
  ),
  BLAMOUNTTB AS
  (
  SELECT * FROM
  (SELECT POTB.CUST_NAME_KD, POTB.PROD_TYPE, POTB.BALANCE_AMOUNT FROM POTB)
  AS srctb
  PIVOT
  (
    SUM(srctb.BALANCE_AMOUNT) FOR srctb.PROD_TYPE IN ([TSP],[LABEL],[UV],[OLED],[TAPE],[RIBBON],[SPT])
  ) AS PVTB
  ),
  FN1TB AS 
  (
  SELECT AA.CUST_NAME_KD, 
  (SUM(AA.TSP_QTY) + SUM(AA.LABEL_QTY) + SUM(AA.UV_QTY) + SUM(AA.OLED_QTY) + SUM(AA.TAPE_QTY) + SUM(AA.RIBBON_QTY) + SUM(AA.SPT_QTY)) AS TOTAL_QTY, 
  (SUM(AA.TSP_AMOUNT) + SUM(AA.LABEL_AMOUNT) + SUM(AA.UV_AMOUNT) + SUM(AA.OLED_AMOUNT) + SUM(AA.TAPE_AMOUNT) + SUM(AA.RIBBON_AMOUNT) + SUM(AA.SPT_AMOUNT)) AS TOTAL_AMOUNT, 
  SUM(AA.TSP_QTY) AS TSP_QTY, SUM(AA.LABEL_QTY) AS LABEL_QTY, SUM(AA.UV_QTY) AS UV_QTY, SUM(AA.OLED_QTY) AS OLED_QTY, SUM(AA.TAPE_QTY) AS TAPE_QTY, SUM(AA.RIBBON_QTY) AS RIBBON_QTY,SUM(AA.SPT_QTY) AS SPT_QTY, SUM(AA.TSP_AMOUNT) AS TSP_AMOUNT, SUM(AA.LABEL_AMOUNT) AS LABEL_AMOUNT, SUM(AA.UV_AMOUNT) AS UV_AMOUNT, SUM(AA.OLED_AMOUNT) AS OLED_AMOUNT, SUM(AA.TAPE_AMOUNT) AS TAPE_AMOUNT, SUM(AA.RIBBON_AMOUNT) AS RIBBON_AMOUNT, SUM(AA.SPT_AMOUNT) AS SPT_AMOUNT FROM 
  (SELECT'TOTAL' AS CUST_NAME_KD, isnull(BLQTYTB.TSP,0) AS TSP_QTY, isnull(BLQTYTB.LABEL,0) AS LABEL_QTY, isnull(BLQTYTB.UV,0) AS UV_QTY, isnull(BLQTYTB.OLED,0) AS OLED_QTY, isnull(BLQTYTB.TAPE,0) AS TAPE_QTY, isnull(BLQTYTB.RIBBON,0) AS RIBBON_QTY, isnull(BLQTYTB.SPT,0) AS SPT_QTY, isnull(BLAMOUNTTB.TSP,0) AS TSP_AMOUNT, isnull(BLAMOUNTTB.LABEL,0) AS LABEL_AMOUNT, isnull(BLAMOUNTTB.UV,0) AS UV_AMOUNT, isnull(BLAMOUNTTB.OLED,0) AS OLED_AMOUNT, isnull(BLAMOUNTTB.TAPE,0) AS TAPE_AMOUNT, isnull(BLAMOUNTTB.RIBBON,0) AS RIBBON_AMOUNT, isnull(BLAMOUNTTB.SPT,0) AS SPT_AMOUNT
  FROM BLQTYTB LEFT JOIN BLAMOUNTTB ON (BLQTYTB.CUST_NAME_KD = BLAMOUNTTB.CUST_NAME_KD)
  ) AS AA GROUP BY AA.CUST_NAME_KD
  UNION ALL
  SELECT BLQTYTB.CUST_NAME_KD,
   (isnull(BLQTYTB.TSP,0)+ isnull(BLQTYTB.LABEL,0)+ isnull(BLQTYTB.UV,0) + isnull(BLQTYTB.OLED,0) + isnull(BLQTYTB.TAPE,0)+ isnull(BLQTYTB.RIBBON,0) + isnull(BLQTYTB.SPT,0)) AS TOTAL_QTY, 
   (isnull(BLAMOUNTTB.TSP,0)+ isnull(BLAMOUNTTB.LABEL,0)+ isnull(BLAMOUNTTB.UV,0)+ isnull(BLAMOUNTTB.OLED,0)+isnull(BLAMOUNTTB.TAPE,0) + isnull(BLAMOUNTTB.RIBBON,0) + isnull(BLAMOUNTTB.SPT,0)) AS TOTAL_AMOUNT,
  isnull(BLQTYTB.TSP,0) AS TSP_QTY, isnull(BLQTYTB.LABEL,0) AS LABEL_QTY, isnull(BLQTYTB.UV,0) AS UV_QTY, isnull(BLQTYTB.OLED,0) AS OLED_QTY, isnull(BLQTYTB.TAPE,0) AS TAPE_QTY, isnull(BLQTYTB.RIBBON,0) AS RIBBON_QTY, isnull(BLQTYTB.SPT,0) AS SPT_QTY, isnull(BLAMOUNTTB.TSP,0) AS TSP_AMOUNT, isnull(BLAMOUNTTB.LABEL,0) AS LABEL_AMOUNT, isnull(BLAMOUNTTB.UV,0) AS UV_AMOUNT, isnull(BLAMOUNTTB.OLED,0) AS OLED_AMOUNT, isnull(BLAMOUNTTB.TAPE,0) AS TAPE_AMOUNT, isnull(BLAMOUNTTB.RIBBON,0) AS RIBBON_AMOUNT, isnull(BLAMOUNTTB.SPT,0) AS SPT_AMOUNT
  FROM BLQTYTB LEFT JOIN BLAMOUNTTB ON (BLQTYTB.CUST_NAME_KD = BLAMOUNTTB.CUST_NAME_KD)
  )
  SELECT * FROM FN1TB
  WHERE TOTAL_QTY <>0
  ORDER BY TOTAL_AMOUNT DESC`;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.baocaofcstss = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `  
  SELECT FCST2.WEEKNO, FCST1.SEVT AS SEVT1,FCST1.SEV AS SEV1, FCST1.SAMSUNG_ASIA AS SAMSUNG_ASIA1, FCST1.TOTAL_SS AS TT_SS1, FCST2.SEVT AS SEVT2,FCST2.SEV AS SEV2, FCST2.SAMSUNG_ASIA AS SAMSUNG_ASIA2,FCST2.TOTAL_SS AS TT_SS2 FROM
   ( SELECT CASE WHEN LEN(WEEKNO) =2 THEN CONCAT('W0',SUBSTRING(WEEKNO,2,1)) ELSE WEEKNO END AS WEEKNO, isnull([SEVT],0) AS SEVT,isnull([SEV],0) AS SEV, isnull([SAMSUNG-ASIA],0) AS SAMSUNG_ASIA, (isnull([SEVT],0)+isnull([SEV],0)+ isnull([SAMSUNG-ASIA],0)) AS TOTAL_SS FROM ( SELECT CUST_NAME_KD, WEEKNO,FCST FROM (SELECT * FROM (SELECT M110. CUST_NAME_KD, SUM(ZTBFCSTTB.W1) AS W1,SUM(ZTBFCSTTB.W2) AS W2,SUM(ZTBFCSTTB.W3) AS W3,SUM(ZTBFCSTTB.W4) AS W4,SUM(ZTBFCSTTB.W5) AS W5,SUM(ZTBFCSTTB.W6) AS W6,SUM(ZTBFCSTTB.W7) AS W7,SUM(ZTBFCSTTB.W8) AS W8,SUM(ZTBFCSTTB.W9) AS W9,SUM(ZTBFCSTTB.W10) AS W10,SUM(ZTBFCSTTB.W11) AS W11,SUM(ZTBFCSTTB.W12) AS W12,SUM(ZTBFCSTTB.W13) AS W13,SUM(ZTBFCSTTB.W14) AS W14,SUM(ZTBFCSTTB.W15) AS W15,SUM(ZTBFCSTTB.W16) AS W16,SUM(ZTBFCSTTB.W17) AS W17,SUM(ZTBFCSTTB.W18) AS W18,SUM(ZTBFCSTTB.W19) AS W19,SUM(ZTBFCSTTB.W20) AS W20,SUM(ZTBFCSTTB.W21) AS W21,SUM(ZTBFCSTTB.W22) AS W22 FROM ZTBFCSTTB LEFT JOIN M110 ON (M110.CUST_CD= ZTBFCSTTB.CUST_CD AND M110.CTR_CD = ZTBFCSTTB.CTR_CD) WHERE ZTBFCSTTB.FCSTYEAR=${DATA.FCSTYEAR2} AND ZTBFCSTTB.FCSTWEEKNO=${DATA.FCSTWEEKNUM2} AND ZTBFCSTTB.CTR_CD='${DATA.CTR_CD}' GROUP BY M110. CUST_NAME_KD) AS AA) AS PVDT UNPIVOT ( FCST FOR WEEKNO IN (W1, W2, W3, W4, W5, W6, W7, W8, W9, W10, W11, W12, W13, W14, W15, W16, W17, W18, W19, W20, W21, W22) ) AS UNPV ) AS PVTB PIVOT ( SUM(FCST) FOR CUST_NAME_KD IN ([SEVT],[SEV],[SAMSUNG-ASIA]) ) AS PVT ) AS FCST2
   LEFT JOIN
   ( SELECT CASE WHEN LEN(WEEKNO) =2 THEN CONCAT('W0',SUBSTRING(WEEKNO,2,1)) ELSE WEEKNO END AS WEEKNO, isnull([SEVT],0) AS SEVT,isnull([SEV],0) AS SEV, isnull([SAMSUNG-ASIA],0) AS SAMSUNG_ASIA, (isnull([SEVT],0)+isnull([SEV],0)+ isnull([SAMSUNG-ASIA],0)) AS TOTAL_SS FROM ( SELECT CUST_NAME_KD, WEEKNO,FCST FROM (SELECT * FROM (SELECT M110. CUST_NAME_KD, SUM(ZTBFCSTTB.W1) AS W1,SUM(ZTBFCSTTB.W2) AS W2,SUM(ZTBFCSTTB.W3) AS W3,SUM(ZTBFCSTTB.W4) AS W4,SUM(ZTBFCSTTB.W5) AS W5,SUM(ZTBFCSTTB.W6) AS W6,SUM(ZTBFCSTTB.W7) AS W7,SUM(ZTBFCSTTB.W8) AS W8,SUM(ZTBFCSTTB.W9) AS W9,SUM(ZTBFCSTTB.W10) AS W10,SUM(ZTBFCSTTB.W11) AS W11,SUM(ZTBFCSTTB.W12) AS W12,SUM(ZTBFCSTTB.W13) AS W13,SUM(ZTBFCSTTB.W14) AS W14,SUM(ZTBFCSTTB.W15) AS W15,SUM(ZTBFCSTTB.W16) AS W16,SUM(ZTBFCSTTB.W17) AS W17,SUM(ZTBFCSTTB.W18) AS W18,SUM(ZTBFCSTTB.W19) AS W19,SUM(ZTBFCSTTB.W20) AS W20,SUM(ZTBFCSTTB.W21) AS W21,SUM(ZTBFCSTTB.W22) AS W22 FROM ZTBFCSTTB LEFT JOIN M110 ON (M110.CUST_CD= ZTBFCSTTB.CUST_CD AND M110.CTR_CD = ZTBFCSTTB.CTR_CD) WHERE ZTBFCSTTB.FCSTYEAR=${DATA.FCSTYEAR1} AND ZTBFCSTTB.FCSTWEEKNO=${DATA.FCSTWEEKNUM1} AND ZTBFCSTTB.CTR_CD='${DATA.CTR_CD}' GROUP BY M110. CUST_NAME_KD) AS AA) AS PVDT UNPIVOT ( FCST FOR WEEKNO IN (W1, W2, W3, W4, W5, W6, W7, W8, W9, W10, W11, W12, W13, W14, W15, W16, W17, W18, W19, W20, W21, W22) ) AS UNPV ) AS PVTB PIVOT ( SUM(FCST) FOR CUST_NAME_KD IN ([SEVT],[SEV],[SAMSUNG-ASIA]) ) AS PVT ) AS FCST1
   ON (FCST1.WEEKNO = FCST2.WEEKNO) ORDER BY FCST2.WEEKNO ASC
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.traFcstDataFull = async (req, res, DATA) => {
  let kqua;
  query = `SELECT ZTBFCSTTB.FCST_ID, ZTBFCSTTB.FCSTYEAR, ZTBFCSTTB.FCSTWEEKNO,ZTBFCSTTB.G_CODE, M100.G_NAME_KD, M100.G_NAME, M010.EMPL_NAME,ZTBFCSTTB.EMPL_NO, M110.CUST_NAME_KD, M100.DESCR, M100.PROD_PROJECT, M100.PROD_MODEL, M100.PROD_MAIN_MATERIAL, ZTBFCSTTB.PROD_PRICE,ZTBFCSTTB.W1,ZTBFCSTTB.W2,ZTBFCSTTB.W3,ZTBFCSTTB.W4,ZTBFCSTTB.W5,ZTBFCSTTB.W6,ZTBFCSTTB.W7,ZTBFCSTTB.W8,ZTBFCSTTB.W9,ZTBFCSTTB.W10,ZTBFCSTTB.W11,ZTBFCSTTB.W12,ZTBFCSTTB.W13,ZTBFCSTTB.W14,ZTBFCSTTB.W15,ZTBFCSTTB.W16,ZTBFCSTTB.W17,ZTBFCSTTB.W18,ZTBFCSTTB.W19,ZTBFCSTTB.W20,ZTBFCSTTB.W21,ZTBFCSTTB.W22, ZTBFCSTTB.PROD_PRICE * ZTBFCSTTB.W1 AS W1A,ZTBFCSTTB.PROD_PRICE * ZTBFCSTTB.W2 AS W2A,ZTBFCSTTB.PROD_PRICE * ZTBFCSTTB.W3  AS W3A,ZTBFCSTTB.PROD_PRICE * ZTBFCSTTB.W4  AS W4A,ZTBFCSTTB.PROD_PRICE * ZTBFCSTTB.W5 AS W5A,ZTBFCSTTB.PROD_PRICE * ZTBFCSTTB.W6 AS W6A,ZTBFCSTTB.PROD_PRICE * ZTBFCSTTB.W7 AS W7A,ZTBFCSTTB.PROD_PRICE * ZTBFCSTTB.W8 AS W8A,ZTBFCSTTB.PROD_PRICE * ZTBFCSTTB.W9 AS W9A,ZTBFCSTTB.PROD_PRICE * ZTBFCSTTB.W10 AS W10A,ZTBFCSTTB.PROD_PRICE * ZTBFCSTTB.W11 AS W11A,ZTBFCSTTB.PROD_PRICE * ZTBFCSTTB.W12 AS W12A,ZTBFCSTTB.PROD_PRICE * ZTBFCSTTB.W13 AS W13A,ZTBFCSTTB.PROD_PRICE * ZTBFCSTTB.W14 AS W14A,ZTBFCSTTB.PROD_PRICE * ZTBFCSTTB.W15 AS W15A,ZTBFCSTTB.PROD_PRICE * ZTBFCSTTB.W16 AS W16A,ZTBFCSTTB.PROD_PRICE * ZTBFCSTTB.W17 AS W17A,ZTBFCSTTB.PROD_PRICE * ZTBFCSTTB.W18 AS W18A,ZTBFCSTTB.PROD_PRICE * ZTBFCSTTB.W19 AS W19A,ZTBFCSTTB.PROD_PRICE * ZTBFCSTTB.W20 AS W20A,ZTBFCSTTB.PROD_PRICE * ZTBFCSTTB.W21 AS W21A,ZTBFCSTTB.PROD_PRICE * ZTBFCSTTB.W22 AS W22A  FROM ZTBFCSTTB JOIN M100 ON (M100.G_CODE = ZTBFCSTTB.G_CODE AND M100.CTR_CD = ZTBFCSTTB.CTR_CD) JOIN M110 ON(M110.CUST_CD = ZTBFCSTTB.CUST_CD AND M110.CTR_CD = ZTBFCSTTB.CTR_CD) JOIN M010 ON (M010.EMPL_NO = ZTBFCSTTB.EMPL_NO AND M010.CTR_CD = ZTBFCSTTB.CTR_CD) ${generate_condition_get_fcst(
    DATA.alltime,
    DATA.start_date,
    DATA.end_date,
    DATA.cust_name,
    DATA.codeCMS,
    DATA.codeKD,
    DATA.prod_type,
    DATA.empl_name,
    DATA.material,
    DATA.CTR_CD
  )} `;
  kqua = await queryDB(query);
  ////console.log(kqua);
  res.send(kqua);
};
exports.update_ycsx = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `UPDATE P400 SET REMK='${DATA.REMK}', CODE_50='${DATA.CODE_50}', CODE_55='${DATA.CODE_55}', PROD_REQUEST_QTY='${DATA.PROD_REQUEST_QTY}', UPD_EMPL='${DATA.EMPL_NO}', DELIVERY_DT='${DATA.DELIVERY_DT}', UPD_DATE=GETDATE() WHERE CTR_CD='${DATA.CTR_CD}' AND PROD_REQUEST_NO='${DATA.PROD_REQUEST_NO}'`;
  //////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.updateDMLOSSKT_ZTB_DM_HISTORY = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `MERGE INTO ZTB_DM_HISTORY
  USING
  (
  SELECT ZTB_DM_HISTORY.PROD_REQUEST_NO, ZTB_DM_HISTORY.CTR_CD, isnull(BB.CURRENT_LOSS_KT,0) AS CURRENT_LOSS_KT  FROM ZTB_DM_HISTORY 
  LEFT JOIN (SELECT * FROM (
  SELECT PROD_REQUEST_NO, CTR_CD, CURRENT_LOSS_KT, INS_DATE, COUNT(PROD_REQUEST_NO) OVER (PARTITION BY PROD_REQUEST_NO ORDER BY INS_DATE DESC)  AS STT FROM ZTB_QLSXPLAN WHERE CURRENT_LOSS_KT is not null AND CURRENT_LOSS_KT <> 5 AND CTR_CD='${DATA.CTR_CD}'
  ) AS AA
  ) AS BB
  ON BB.PROD_REQUEST_NO = ZTB_DM_HISTORY.PROD_REQUEST_NO AND BB.CTR_CD = ZTB_DM_HISTORY.CTR_CD
  WHERE (BB.STT = 1 OR BB.STT is null) AND ZTB_DM_HISTORY.CTR_CD='${DATA.CTR_CD}'
  ) AS SRC
  ON (SRC.PROD_REQUEST_NO = ZTB_DM_HISTORY.PROD_REQUEST_NO AND SRC.CTR_CD = ZTB_DM_HISTORY.CTR_CD)
  WHEN MATCHED THEN
  UPDATE SET ZTB_DM_HISTORY.LOSS_KT = SRC.CURRENT_LOSS_KT;`;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.traYCSXDataFull = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `WITH 
  AMAZONTB AS
  ( SELECT DISTINCT CTR_CD,PROD_REQUEST_NO FROM AMAZONE_DATA),
  PLANTABLE AS 
  (SELECT DISTINCT CTR_CD,PROD_REQUEST_NO FROM ZTB_QLSXPLAN),
  INSPECT_INPUT_TB AS 
  (
  SELECT CTR_CD,PROD_REQUEST_NO, SUM(INPUT_QTY_EA) AS LOT_TOTAL_INPUT_QTY_EA FROM ZTBINSPECTINPUTTB GROUP BY CTR_CD,PROD_REQUEST_NO
  ),
  INSPECT_OUTPUT_TB AS 
  (
  SELECT CTR_CD,PROD_REQUEST_NO, SUM(OUTPUT_QTY_EA) AS LOT_TOTAL_OUTPUT_QTY_EA FROM ZTBINSPECTOUTPUTTB WHERE SORTING='N' GROUP BY CTR_CD,PROD_REQUEST_NO
  ),
  WH_TABLE AS 
  (SELECT I660.CTR_CD, I660.PROD_REQUEST_NO, SUM(I660.IN_QTY) AS INPUT_QTY,SUM(CASE WHEN I660.SORTING='Y' THEN I660.IN_QTY ELSE 0 END) AS SORTING_INPUT, SUM(CASE WHEN I660.SORTING='N' THEN I660.IN_QTY ELSE 0 END) AS NORMAL_INPUT, SUM(CASE WHEN I660.STATUS='N' AND I660.USE_YN ='Y' THEN I660.IN_QTY ELSE 0 END) AS STOCK,SUM(CASE WHEN I660.STATUS='B' AND I660.USE_YN ='Y' THEN I660.IN_QTY ELSE 0 END) AS BLOCK_QTY,SUM(CASE WHEN I660.USE_YN <> 'Y' AND O660.CUST_CD IN ('1222','6969','KH999') THEN I660.IN_QTY ELSE 0 END) AS OUTPUTNB_QTY, SUM(CASE WHEN I660.USE_YN <> 'Y' AND O660.CUST_CD <> '1222' AND O660.CUST_CD <> '6969' AND O660.CUST_CD <> 'KH999' THEN I660.IN_QTY ELSE 0 END) AS OUTPUTKH_QTY, SUM(CASE WHEN I660.USE_YN <> 'Y' THEN I660.IN_QTY ELSE 0 END) AS OUTPUT_QTY FROM I660 
  LEFT JOIN O660 ON O660.AUTO_ID_IN = I660.AUTO_ID  AND O660.CTR_CD = I660.CTR_CD
  GROUP BY I660.CTR_CD,I660.PROD_REQUEST_NO
  ),
BOM_MAIN_M AS 
(SELECT DISTINCT M140.CTR_CD,G_CODE, M090.M_NAME  FROM M140 
LEFT JOIN M090 ON (M140.M_CODE = M090.M_CODE)
WHERE LIEUQL_SX = 1) 
  SELECT 
  P400.DELIVERY_DT,
            P400.PL_HANG,
            CASE WHEN AMAZONTB.PROD_REQUEST_NO is not null THEN '1' END AS DAUPAMZ,
            PLANTABLE.PROD_REQUEST_NO AS DACHITHI,
            M100.G_NAME_KD,
            P400.PO_NO,
            P400.G_CODE,
            M100.PROD_TYPE,
            M100.PROD_MAIN_MATERIAL,
            M100.DESCR,
            M100.PDBV,
            M100.PDBV_EMPL,
            M100.PDBV_DATE,
            M100.G_NAME,
            M100.G_WIDTH,
            M100.G_LENGTH,
            M100.PROD_PRINT_TIMES,
            M100.G_C,
            M100.G_C_R,
            M010.EMPL_NAME,
            M010.EMPL_NO,
            M110.CUST_NAME_KD,
            M110.CUST_CD,
            P400.PROD_REQUEST_NO,
            P400.PROD_REQUEST_DATE,
            P400.PROD_REQUEST_QTY,		 
            P400.USE_YN, 
            P400.MATERIAL_YN,
            P400.IS_TAM_THOI,
            P400.FL_YN,
            isnull(INSPECT_INPUT_TB.LOT_TOTAL_INPUT_QTY_EA, 0) AS LOT_TOTAL_INPUT_QTY_EA,
            isnull(INSPECT_OUTPUT_TB.LOT_TOTAL_OUTPUT_QTY_EA, 0) AS LOT_TOTAL_OUTPUT_QTY_EA,
        isnull(WH_TABLE.INPUT_QTY,0) AS INPUT_QTY,
        isnull(WH_TABLE.SORTING_INPUT,0) AS SORTING_INPUT,
        isnull(WH_TABLE.NORMAL_INPUT,0) AS NORMAL_INPUT,
isnull(WH_TABLE.OUTPUTNB_QTY,0) AS OUTPUTNB_QTY,
isnull(WH_TABLE.OUTPUTKH_QTY,0) AS OUTPUTKH_QTY,
        isnull(WH_TABLE.OUTPUT_QTY,0) AS OUTPUT_QTY,
        isnull(WH_TABLE.STOCK,0) AS STOCK,
        isnull(WH_TABLE.BLOCK_QTY,0) AS BLOCK_QTY,	
         isnull(INSPECT_INPUT_TB.LOT_TOTAL_INPUT_QTY_EA, 0) - isnull(INSPECT_OUTPUT_TB.LOT_TOTAL_OUTPUT_QTY_EA, 0) AS INSPECT_BALANCE,
          (CASE WHEN P400.YCSX_PENDING = 1 THEN (isnull(P400.PROD_REQUEST_QTY, 0) - isnull(INSPECT_OUTPUT_TB.LOT_TOTAL_OUTPUT_QTY_EA, 0)) WHEN P400.YCSX_PENDING = 0 THEN 0 END ) AS SHORTAGE_YCSX,
        CASE WHEN (P400.YCSX_PENDING =0 OR isnull(INSPECT_OUTPUT_TB.LOT_TOTAL_OUTPUT_QTY_EA, 0) >= P400.PROD_REQUEST_QTY OR M100.USE_YN='N') THEN 0 ELSE 1 END AS YCSX_PENDING,
        P400.CODE_55 AS PHAN_LOAI,
            P400.REMK AS REMARK,
            P400.PO_TDYCSX,
            (
                P400.TKHO_TDYCSX + P400.BTP_TDYCSX + P400.CK_TDYCSX - P400.BLOCK_TDYCSX
            ) AS TOTAL_TKHO_TDYCSX,
            P400.TKHO_TDYCSX,
            P400.BTP_TDYCSX,
            P400.CK_TDYCSX,
            P400.BLOCK_TDYCSX,
            P400.FCST_TDYCSX,
            P400.W1,
            P400.W2,
            P400.W3,
            P400.W4,
            P400.W5,
            P400.W6,
            P400.W7,
            P400.W8,
            P400.PDUYET,
            P400.CODE_50 AS LOAIXH,
            M100.BANVE,
            M100.NO_INSPECTION,                    
  CASE WHEN BOM_MAIN_M.M_NAME = M100.PROD_MAIN_MATERIAL THEN 'Y' ELSE 'N' END AS SETVL,
  ZTB_DM_HISTORY.LOSS_SX1,
            ZTB_DM_HISTORY.LOSS_SX2,
            ZTB_DM_HISTORY.LOSS_SX3,
            ZTB_DM_HISTORY.LOSS_SX4,
            ZTB_DM_HISTORY.LOSS_SETTING1,
            ZTB_DM_HISTORY.LOSS_SETTING2,
            ZTB_DM_HISTORY.LOSS_SETTING3,
            ZTB_DM_HISTORY.LOSS_SETTING4,
            ZTB_DM_HISTORY.LOSS_KT,
            ZTB_DM_HISTORY.INS_DATE,
            ZTB_DM_HISTORY.INS_EMPL,
            ZTB_DM_HISTORY.UPD_DATE,
            ZTB_DM_HISTORY.UPD_EMPL
  FROM P400
  LEFT JOIN AMAZONTB ON (AMAZONTB.PROD_REQUEST_NO = P400.PROD_REQUEST_NO AND AMAZONTB.CTR_CD = P400.CTR_CD)
  LEFT JOIN PLANTABLE ON (PLANTABLE.PROD_REQUEST_NO = P400.PROD_REQUEST_NO AND PLANTABLE.CTR_CD = P400.CTR_CD)
  LEFT JOIN  INSPECT_INPUT_TB ON (INSPECT_INPUT_TB.PROD_REQUEST_NO = P400.PROD_REQUEST_NO AND INSPECT_INPUT_TB.CTR_CD = P400.CTR_CD)
  LEFT JOIN INSPECT_OUTPUT_TB ON (INSPECT_OUTPUT_TB.PROD_REQUEST_NO = P400.PROD_REQUEST_NO AND INSPECT_OUTPUT_TB.CTR_CD = P400.CTR_CD)
  LEFT JOIN WH_TABLE ON (WH_TABLE.PROD_REQUEST_NO = P400.PROD_REQUEST_NO AND WH_TABLE.CTR_CD = P400.CTR_CD)
  LEFT JOIN M100 ON (P400.G_CODE = M100.G_CODE AND P400.CTR_CD = M100.CTR_CD)
LEFT JOIN BOM_MAIN_M ON (M100.G_CODE = BOM_MAIN_M.G_CODE AND M100.CTR_CD = BOM_MAIN_M.CTR_CD)
  LEFT JOIN M010 ON (P400.EMPL_NO = M010.EMPL_NO AND P400.CTR_CD = M010.CTR_CD)
  LEFT JOIN M110 ON (P400.CUST_CD = M110.CUST_CD AND P400.CTR_CD = M110.CTR_CD)
  LEFT JOIN ZTB_DM_HISTORY ON (P400.PROD_REQUEST_NO= ZTB_DM_HISTORY.PROD_REQUEST_NO AND P400.CTR_CD= ZTB_DM_HISTORY.CTR_CD)
   ${generate_condition_get_ycsx(
    DATA.alltime,
    DATA.start_date,
    DATA.end_date,
    DATA.cust_name,
    DATA.codeCMS,
    DATA.codeKD,
    DATA.prod_type,
    DATA.empl_name,
    DATA.phanloai,
    DATA.ycsx_pending,
    DATA.prod_request_no,
    DATA.material,
    DATA.inspect_inputcheck,
    DATA.phanloaihang,
    DATA.CTR_CD,
    DATA.material_yes
  )} ORDER BY P400.PROD_REQUEST_NO DESC`;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  ////console.log(checkkq);
  res.send(checkkq);
};
exports.getLastProcessLotNo = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `SELECT TOP 1 PROCESS_LOT_NO,SUBSTRING(PROCESS_LOT_NO,6,3) AS SEQ_NO, INS_DATE FROM P501 WHERE P501.CTR_CD='${DATA.CTR_CD}' AND SUBSTRING(PROCESS_LOT_NO,1,2) = '${DATA.machine}' AND PROCESS_IN_DATE = '${DATA.in_date}' ORDER BY INS_DATE DESC`;
  //////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  ////console.log(checkkq);
  res.send(checkkq);
};
exports.loadpono = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `SELECT PO_NO, CUST_CD, G_CODE, PO_DATE,RD_DATE, PO_QTY FROM ZTBPOTable WHERE CTR_CD='${DATA.CTR_CD}' AND G_CODE='${DATA.G_CODE}' AND CUST_CD ='${DATA.CUST_CD}' ORDER BY PO_DATE DESC`;
  console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.checkIDCongViecAMZ = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `SELECT TOP 1 * FROM AMAZONE_DATA WHERE CTR_CD='${DATA.CTR_CD}' AND NO_IN='${DATA.NO_IN}' OR PROD_REQUEST_NO='${DATA.PROD_REQUEST_NO}'`;
  //////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  ////console.log(checkkq);
  res.send(checkkq);
};
exports.checkmainBOM2 = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `SELECT USAGE, MAIN_M FROM ZTB_BOM2 WHERE CTR_CD='${DATA.CTR_CD}' AND G_CODE='${DATA.G_CODE}' AND USAGE='main' AND MAIN_M = 1 `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.checkmainBOM2_M140_M_CODE_MATCHING = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `SELECT COUNT(ZTB_BOM2.M_CODE) AS BOM2_M_CODE_COUNT, COUNT(M140.M_CODE) AS M140_M_CODE_COUNT, COUNT(ZTB_BOM2.M_CODE) - COUNT(M140.M_CODE) AS THIEU, ZTB_BOM2.CTR_CD FROM ZTB_BOM2 LEFT JOIN M140 ON M140.G_CODE = ZTB_BOM2.G_CODE AND M140.M_CODE = ZTB_BOM2.M_CODE AND M140.CTR_CD = ZTB_BOM2.CTR_CD WHERE ZTB_BOM2.G_CODE='${DATA.G_CODE}' AND ZTB_BOM2.CTR_CD='${DATA.CTR_CD}' GROUP BY ZTB_BOM2.CTR_CD`;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.insert_ycsx = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `INSERT INTO P400 (CTR_CD, PROD_REQUEST_DATE,PROD_REQUEST_NO,CODE_50,CODE_03,CODE_55,G_CODE,RIV_NO,PROD_REQUEST_QTY,CUST_CD,EMPL_NO,REMK,USE_YN,DELIVERY_DT,INS_DATE,INS_EMPL,UPD_DATE,UPD_EMPL,YCSX_PENDING,G_CODE2,PO_TDYCSX,TKHO_TDYCSX,FCST_TDYCSX,W1,W2,W3,W4,W5,W6,W7,W8,BTP_TDYCSX,CK_TDYCSX,PDUYET,BLOCK_TDYCSX,PO_NO, PL_HANG, MATERIAL_YN, IS_TAM_THOI, FL_YN) VALUES ('${DATA.CTR_CD}',FORMAT(GETDATE(), 'yyyyMMdd'),'${DATA.PROD_REQUEST_NO}','${DATA.CODE_50}','${DATA.CODE_03}','${DATA.CODE_55}','${DATA.G_CODE}','${DATA.RIV_NO}','${DATA.PROD_REQUEST_QTY}','${DATA.CUST_CD}','${DATA.EMPL_NO}',N'${DATA.REMK ?? ''}','${DATA.USE_YN}','${DATA.DELIVERY_DT}',GETDATE(),'${DATA.INS_EMPL}',GETDATE(),'${DATA.UPD_EMPL}','${DATA.YCSX_PENDING}','${DATA.G_CODE2}','${DATA.PO_TDYCSX}','${DATA.TKHO_TDYCSX}','${DATA.FCST_TDYCSX}','${DATA.W1}','${DATA.W2}','${DATA.W3}','${DATA.W4}','${DATA.W5}','${DATA.W6}','${DATA.W7}','${DATA.W8}','${DATA.BTP_TDYCSX}','${DATA.CK_TDYCSX}','${DATA.PDUYET}','${DATA.BLOCK_TDYCSX}','${DATA.PO_NO}','${DATA.PHANLOAI}','${DATA.MATERIAL_YN}','${DATA.IS_TAM_THOI === undefined ? 'N': DATA.IS_TAM_THOI}','${DATA.FL_YN === undefined ? 'N': DATA.FL_YN}')`;
  console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.insert_p501 = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `INSERT INTO P501 (CTR_CD,PROCESS_IN_DATE,PROCESS_IN_NO,PROCESS_IN_SEQ,M_LOT_IN_SEQ,PROCESS_PRT_SEQ,M_LOT_NO,PROCESS_LOT_NO,INS_DATE,INS_EMPL,UPD_DATE,UPD_EMPL, PLAN_ID, PROCESS_NUMBER, TEMP_QTY, USE_YN) VALUES  ('${DATA.CTR_CD}','${DATA.in_date}','${DATA.next_process_in_no}','${DATA.PROD_REQUEST_NO.substring(4, 7)}','${DATA.PROD_REQUEST_DATE.substring(5, 8)}','${DATA.next_process_prt_seq}','','${DATA.next_process_lot_no}',GETDATE(),'${DATA.EMPL_NO}',GETDATE(),'${DATA.EMPL_NO}','${DATA.PLAN_ID}',${DATA.PROCESS_NUMBER ?? 0}, ${DATA.TEMP_QTY ?? 0},'${DATA.USE_YN}')`;
  console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  console.log(checkkq);
  res.send(checkkq);
};
exports.insert_p500 = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `INSERT INTO P500 (CTR_CD, PROCESS_IN_DATE, PROCESS_IN_NO, PROCESS_IN_SEQ, M_LOT_IN_SEQ, PROD_REQUEST_DATE, PROD_REQUEST_NO, G_CODE, M_CODE, M_LOT_NO, EMPL_NO, EQUIPMENT_CD, SCAN_RESULT, INS_DATE, INS_EMPL, UPD_DATE, UPD_EMPL, FACTORY, PLAN_ID, PR_NB) VALUES ('${DATA.CTR_CD}','${DATA.in_date
    }','${DATA.next_process_in_no}','${DATA.PROD_REQUEST_NO.substring(
      4,
      7
    )}','${DATA.PROD_REQUEST_DATE.substring(5, 8)}','${DATA.PROD_REQUEST_DATE
    }','${DATA.PROD_REQUEST_NO}','${DATA.G_CODE}', '','','${DATA.EMPL_NO
    }','${DATA.phanloai}01','OK',GETDATE(),'${DATA.EMPL_NO}',GETDATE(),'${DATA.EMPL_NO
    }','NM1','${DATA.PLAN_ID}',${DATA.PR_NB ?? 0})`;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.insertDBYCSX_New = async (req, res, DATA) => {
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let checkkq = "OK";
  let setpdQuery = `
    INSERT INTO ZTB_DM_HISTORY2
    SELECT '${DATA.CTR_CD}' AS CTR_CD, '${DATA.PROD_REQUEST_NO}' AS PROD_REQUEST_NO,PROCESS_NUMBER,EQ_SERIES,SETTING_TIME,UPH,STEP,LOSS_SX,LOSS_SETTING,FACTORY,GETDATE() AS INS_DATE,'${EMPL_NO}' AS INS_EMPL,GETDATE() AS UPD_DATE,'${EMPL_NO}' AS UPD_EMPL FROM ZTB_PROD_PROCESS_TB WHERE G_CODE='${DATA.G_CODE}' AND CTR_CD='${DATA.CTR_CD}'
    `;
  console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  console.log(checkkq);
  res.send(checkkq);
};
exports.insertDBYCSX = async (req, res, DATA) => {
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let checkkq = "OK";
  let setpdQuery = `
    INSERT INTO ZTB_DM_HISTORY
    SELECT '${DATA.CTR_CD}' AS CTR_CD,'${DATA.PROD_REQUEST_NO}' AS PROD_REQUEST_NO, LOSS_SX1,LOSS_SX2,LOSS_SX3,LOSS_SX4,LOSS_SETTING1,LOSS_SETTING2,LOSS_SETTING3,LOSS_SETTING4, GETDATE() AS INS_DATE, '${EMPL_NO}' AS INS_EMPL, GETDATE() AS UPD_DATE, '${EMPL_NO}' AS UPD_EMPL, isnull(LOSS_KT,0) AS LOSS_KT FROM M100 WHERE G_CODE='${DATA.G_CODE}' AND CTR_CD='${DATA.CTR_CD}'
    `;
  setpdQuery = `
    INSERT INTO ZTB_DM_HISTORY
    SELECT '${DATA.CTR_CD}' AS CTR_CD,'${DATA.PROD_REQUEST_NO}' AS PROD_REQUEST_NO, LOSS_SX1,LOSS_SX2,LOSS_SX3,LOSS_SX4,LOSS_SETTING1,LOSS_SETTING2,LOSS_SETTING3,LOSS_SETTING4, GETDATE() AS INS_DATE, '${EMPL_NO}' AS INS_EMPL, GETDATE() AS UPD_DATE, '${EMPL_NO}' AS UPD_EMPL, 0 AS LOSS_KT FROM M100 WHERE G_CODE='${DATA.G_CODE}' AND CTR_CD='${DATA.CTR_CD}'
    `;
  console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  console.log(checkkq);
  res.send(checkkq);
};
exports.checkProcessInNoP500 = async (req, res, DATA) => {
  let in_date = moment().format("YYYYMMDD");
  let checkkq = "OK";
  let setpdQuery = `SELECT TOP 1 PROCESS_IN_DATE, PROCESS_IN_NO, EQUIPMENT_CD FROM P500 WHERE CTR_CD='${DATA.CTR_CD}' AND PROCESS_IN_DATE='${in_date}'  ORDER BY INS_DATE DESC`;
  //////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  ////console.log(checkkq);
  res.send(checkkq);
};
exports.checkLastYCSX = async (req, res, DATA) => {
  let currenttime = moment().format("YYYYMMDD");
  let checkkq = "OK";
  let setpdQuery = `SELECT TOP 1 * FROM P400 WHERE CTR_CD='${DATA.CTR_CD}' AND PROD_REQUEST_DATE='${currenttime}' ORDER BY INS_DATE DESC`;
  //////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.checkYcsxExist = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `SELECT * FROM P400 WHERE CTR_CD='${DATA.CTR_CD}' AND PROD_REQUEST_NO= ${DATA.PROD_REQUEST_NO}`;
  ////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  ////console.log(checkkq);
  res.send(checkkq);
};
exports.checkfcst_tdycsx = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `SELECT G_CODE, SUM(W1) AS W1, SUM(W2) AS W2, SUM(W3) AS W3, SUM(W4) AS W4, SUM(W5) AS W5, SUM(W6) AS W6, SUM(W7) AS W7, SUM(W8) AS W8 FROM ZTBFCSTTB WHERE FCSTYEAR = YEAR(GETDATE()) AND FCSTWEEKNO = (SELECT MAX(FCSTWEEKNO) FROM ZTBFCSTTB WHERE FCSTYEAR = YEAR(GETDATE()) AND CTR_CD='${DATA.CTR_CD}') AND G_CODE='${DATA.G_CODE}' AND ZTBFCSTTB.CTR_CD='${DATA.CTR_CD}' GROUP BY G_CODE`;
  //////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  ////console.log(checkkq);
  res.send(checkkq);
};
exports.checktrungAMZ_Full = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `SELECT VALUE, COUNT(*) as COUNT
  FROM (
      SELECT DATA_1 as VALUE FROM AMAZONE_DATA WHERE CTR_CD='${DATA.CTR_CD}'
      UNION ALL
      SELECT DATA_2 FROM AMAZONE_DATA WHERE CTR_CD='${DATA.CTR_CD}'
  ) combinedData
  GROUP BY value
  HAVING COUNT(*) > 1;`;
  //${moment().format('YYYY-MM-DD')}
  ////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.check_G_NAME_2Ver_active = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
    SELECT  DISTINCT G_NAME_KD, REV_NO ,USE_YN FROM M100 WHERE G_NAME_KD IN (
SELECT G_NAME_KD FROM M100 WHERE G_CODE='${DATA.G_CODE}') AND USE_YN='Y' AND CTR_CD='${DATA.CTR_CD}'
  `;
  console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.deleteAMZ_DATA = async (req, res, DATA) => {
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let checkkq = "OK";
  let setpdQuery = `
    DELETE FROM  AMAZONE_DATA WHERE CTR_CD='${DATA.CTR_CD}' AND PROD_REQUEST_NO='${DATA.PROD_REQUEST_NO}' AND INLAI_COUNT = 0 AND INS_EMPL='${EMPL_NO}'
      `;
  console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  console.log(checkkq);
  res.send(checkkq);
};
exports.checkInLaiCount_AMZ = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
    SELECT PROD_REQUEST_NO, SUM(INLAI_COUNT) AS IN_LAI_QTY  FROM AMAZONE_DATA WHERE CTR_CD='${DATA.CTR_CD}' AND PROD_REQUEST_NO='${DATA.PROD_REQUEST_NO}' GROUP BY PROD_REQUEST_NO
    `;
  console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  console.log(checkkq);
  res.send(checkkq);
};
exports.delete_P501_YCSX = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
    DELETE FROM P501 WHERE CTR_CD='${DATA.CTR_CD}' AND PLAN_ID='${DATA.PLAN_ID}' AND INS_EMPL='${DATA.INS_EMPL}' AND M_LOT_NO=''
      `;
  console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  console.log(checkkq);
  res.send(checkkq);
};
exports.delete_P500_YCSX = async (req, res, DATA) => {
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let JOB_NAME = req.payload_data["JOB_NAME"];
  let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
  let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
  let checkkq = "OK";
  let setpdQuery = `
    DELETE FROM P500 WHERE CTR_CD='${DATA.CTR_CD}' AND PROD_REQUEST_NO='${DATA.PROD_REQUEST_NO}' AND INS_EMPL='${DATA.INS_EMPL}' AND M_LOT_NO=''
      `;
  console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  console.log(checkkq);
  res.send(checkkq);
};
exports.delete_ycsx = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `DELETE FROM P400 WHERE CTR_CD='${DATA.CTR_CD}' AND PROD_REQUEST_NO='${DATA.PROD_REQUEST_NO}'`;
  //////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.checkYCSXQLSXPLAN = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `SELECT TOP 1 * FROM ZTB_QLSXPLAN WHERE CTR_CD='${DATA.CTR_CD}' AND PROD_REQUEST_NO = '${DATA.PROD_REQUEST_NO}'`;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  ////console.log(checkkq);
  res.send(checkkq);
};
exports.update_po = async (req, res, DATA) => {
  let userData = req.payload_data;  
  let isGranted = await checkPermission(userData, ['KD'], ['Leader','ADMIN', 'Dept Staff'], ['ALL']);
  if(!isGranted) {
    return res.send({ tk_status: "NG", message: "Permission insufficent" });   
  }
  let checkkq = "OK";
  let setpdQuery = `UPDATE ZTBPOTable SET PO_QTY=${DATA.PO_QTY}, PO_DATE='${DATA.PO_DATE}', RD_DATE='${DATA.RD_DATE}', PROD_PRICE=${DATA.PROD_PRICE},BEP=${DATA.BEP}, REMARK='${DATA.REMARK}', G_CODE='${DATA.G_CODE}',CUST_CD='${DATA.CUST_CD}', EMPL_NO='${DATA.EMPL_NO}' WHERE CTR_CD='${DATA.CTR_CD}' AND PO_ID=${DATA.PO_ID}`;
  //////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.traPODataFull = async (req, res, DATA) => {
  //if (!await checkPermission(req.payload_data, ['KD'], ['Leader','ADMIN', 'Dept Staff'], ['ALL'])) return res.send({ tk_status: "NG", message: "Permission insufficent" });

  let kqua;
  let query = `WITH ZTBDLVR AS 
(SELECT CTR_CD,CUST_CD, G_CODE, PO_NO, SUM(DELIVERY_QTY) AS DELIVERY_QTY FROM ZTBDelivery GROUP BY CTR_CD,CUST_CD, G_CODE, PO_NO),
POTB AS
(
SELECT ZTBPOTable.CTR_CD, ZTBPOTable.G_CODE, ZTBPOTable.CUST_CD, ZTBPOTable.PO_NO,ZTBPOTable.PO_QTY, isnull(ZTBDLVR.DELIVERY_QTY,0) AS DELIVERY_QTY, (ZTBPOTable.PO_QTY-isnull(ZTBDLVR.DELIVERY_QTY,0)) AS PO_BALANCE FROM ZTBPOTable LEFT JOIN ZTBDLVR ON (ZTBPOTable.G_CODE = ZTBDLVR.G_CODE AND ZTBPOTable.CUST_CD = ZTBDLVR.CUST_CD AND ZTBPOTable.PO_NO = ZTBDLVR.PO_NO AND ZTBPOTable.CTR_CD = ZTBDLVR.CTR_CD)
),
FULLBOM AS 
(
SELECT 
BBB.CTR_CD,
BBB.G_CODE, 
string_agg(BBB.M_NAME, ', ') AS M_NAME_FULLBOM 
FROM 
(
    SELECT 
    DISTINCT AAA.CTR_CD, AAA.G_CODE, 
    M090.M_NAME 
    FROM 
    (
        (
        SELECT 
            DISTINCT CTR_CD, G_CODE, 
            M_CODE 
        FROM 
            M140
        ) AS AAA 
        LEFT JOIN M090 ON (AAA.M_CODE = M090.M_CODE AND AAA.CTR_CD = M090.CTR_CD)
    )
) AS BBB 
GROUP BY 
BBB.CTR_CD,
BBB.G_CODE
), 
PRICE_STATUS AS 
(SELECT DISTINCT CTR_CD, G_CODE, ROUND(PROD_PRICE,6) AS PROD_PRICE,  FINAL FROM PROD_PRICE_TABLE)
SELECT ZTBPOTable.PO_ID, M110.CUST_NAME_KD,  ZTBPOTable.PO_NO, M100.G_NAME, M100.G_NAME_KD, M100.DESCR, ZTBPOTable.G_CODE,    ZTBPOTable.PO_DATE, ZTBPOTable.RD_DATE, ROUND(isnull(ZTBPOTable.BEP,0),6) AS BEP, ZTBPOTable.PROD_PRICE, POTB.PO_QTY, POTB.DELIVERY_QTY AS TOTAL_DELIVERED, POTB.PO_BALANCE, (ZTBPOTable.PROD_PRICE*POTB.PO_QTY) AS PO_AMOUNT, (ZTBPOTable.PROD_PRICE*POTB.DELIVERY_QTY) AS DELIVERED_AMOUNT, (ZTBPOTable.PROD_PRICE*POTB.PO_BALANCE) AS BALANCE_AMOUNT, (isnull(ZTBPOTable.BEP,0)*POTB.DELIVERY_QTY) AS DELIVERED_BEP_AMOUNT, M010.EMPL_NAME,M100.PROD_TYPE, FULLBOM.M_NAME_FULLBOM, M100.PROD_MAIN_MATERIAL, ZTBPOTable.CUST_CD,ZTBPOTable.EMPL_NO,DATEPART(MONTH, PO_DATE) AS POMONTH, DATEPART( ISOWK, DATEADD(day,1,PO_DATE))  AS POWEEKNUM, CASE WHEN (
ZTBPOTable.RD_DATE < GETDATE()-1
) 
AND (
POTB.PO_BALANCE <> 0
) THEN 'OVER' ELSE 'OK' END AS OVERDUE, ZTBPOTable.REMARK, PRICE_STATUS.FINAL, M100.QL_HSD, M100.EXP_DATE
FROM ZTBPOTable 
LEFT JOIN POTB ON ZTBPOTable.G_CODE = POTB.G_CODE AND ZTBPOTable.CUST_CD = POTB.CUST_CD AND ZTBPOTable.PO_NO = POTB.PO_NO AND ZTBPOTable.CTR_CD = POTB.CTR_CD
LEFT JOIN M110 ON (M110.CUST_CD = ZTBPOTable.CUST_CD AND M110.CTR_CD = ZTBPOTable.CTR_CD)
LEFT JOIN M100 ON (M100.G_CODE = ZTBPOTable.G_CODE AND M100.CTR_CD = ZTBPOTable.CTR_CD)
LEFT JOIN M010 ON (ZTBPOTable.EMPL_NO = M010.EMPL_NO AND ZTBPOTable.CTR_CD = M010.CTR_CD)
LEFT JOIN PRICE_STATUS ON PRICE_STATUS.G_CODE = ZTBPOTable.G_CODE AND PRICE_STATUS.PROD_PRICE = ROUND(ZTBPOTable.PROD_PRICE,6) AND PRICE_STATUS.CTR_CD = ZTBPOTable.CTR_CD
LEFT JOIN FULLBOM ON FULLBOM.G_CODE = ZTBPOTable.G_CODE AND FULLBOM.CTR_CD = ZTBPOTable.CTR_CD
 ${generate_condition_get_po(
    DATA.alltime,
    DATA.start_date,
    DATA.end_date,
    DATA.cust_name,
    DATA.codeCMS,
    DATA.codeKD,
    DATA.prod_type,
    DATA.empl_name,
    DATA.po_no,
    DATA.over,
    DATA.id,
    DATA.material,
    DATA.justPoBalance,
    DATA.CTR_CD
  )} ORDER BY ZTBPOTable.PO_ID DESC`;
  kqua = await queryDB(query);
  res.send(kqua);
};
exports.delete_po = async (req, res, DATA) => {
  if (!await checkPermission(req.payload_data, ['KD'], ['Leader','ADMIN', 'Dept Staff'], ['ALL'])) return res.send({ tk_status: "NG", message: "Permission insufficent" });
  let checkkq = "OK";
  let setpdQuery = `DELETE FROM ZTBPOTable WHERE CTR_CD='${DATA.CTR_CD}' AND PO_ID=${DATA.PO_ID}`;
  //////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.autopheduyetgiaall = async (req, res, DATA) => {
  if (!await checkPermission(req.payload_data, ['KD'], ['Leader','ADMIN', 'Dept Staff'], ['ALL'])) return res.send({ tk_status: "NG", message: "Permission insufficent" });
  let checkkq = "OK";
  let setpdQuery = `UPDATE PROD_PRICE_TABLE SET FINAL = 'Y' WHERE CTR_CD='${DATA.CTR_CD}'`;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.checkcustomerpono = async (req, res, DATA) => {  
  let checkkq = "OK";
  let setpdQuery = `
  SELECT TOP 1 PO_NO FROM ZTBPOTable WHERE CTR_CD='${DATA.CTR_CD}' AND PO_NO LIKE '%${DATA.CHECK_PO_NO}%' ORDER BY PO_NO DESC
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.updateTONKIEM_M100 = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
  WITH NEW_CHO_KIEM AS 
  (
  SELECT CTR_CD, G_CODE, SUM(INPUT_QTY_EA) AS INSPECT_BALANCE_QTY FROM ZTBINSPECTINPUTTB WHERE INSPECT_YN='Y' AND P400_YN='Y' GROUP BY CTR_CD, G_CODE
  ),
  TKTB AS
  (
  SELECT M100.CTR_CD, M100.G_CODE, M100.G_NAME, M100.G_NAME_KD, isnull(NEW_CHO_KIEM.INSPECT_BALANCE_QTY,0) AS INSPECT_BALANCE_QTY FROM M100 
  LEFT JOIN NEW_CHO_KIEM ON (NEW_CHO_KIEM.CTR_CD = M100.CTR_CD AND NEW_CHO_KIEM.G_CODE = M100.G_CODE) WHERE  M100.CTR_CD='002'
  ) 
  MERGE INTO M100 
  USING(SELECT * FROM TKTB) AS SRC_TB
  ON (SRC_TB.CTR_CD=  M100.CTR_CD AND SRC_TB.G_CODE=  M100.G_CODE)
  WHEN MATCHED THEN
  UPDATE 
  SET TONKIEM_QTY = SRC_TB.INSPECT_BALANCE_QTY;
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.updateBTP_M1002 = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
    WITH BTPTB AS
  (
  SELECT P501.CTR_CD, P501.FACTORY,P501.XUONG,P501.EQ_NAME,ZTB_QLSXPLAN.G_CODE,M100.G_NAME,M100.PROD_TYPE, (CASE WHEN M100.CODE_33='01' THEN 'EA' WHEN M100.CODE_33= '02' THEN 'ROLL' WHEN M100.CODE_33= '03' THEN 'SHEET' WHEN M100.CODE_33= '04' THEN 'MET' WHEN M100.CODE_33= '06' THEN 'PACK (BAG)' WHEN M100.CODE_33= '99' THEN 'X' END) AS UNIT,ZTB_QLSXPLAN.PROD_REQUEST_NO,P501.PLAN_ID,ZTB_QLSXPLAN.PROCESS_NUMBER,BANG_GOP.M_LOT_NO,BANG_GOP.PROCESS_LOT_NO,REMAIN_QTY AS REMAIN_QTY_M,BANG_GOP.TEMP_QTY_EA,(CASE WHEN TRANS_LOT_NO is not null THEN ZTB_GIAONHAN_M_LOT.FACTORY  ELSE P501.FACTORY  END) AS FINAL_FACTORY, (CASE WHEN TRANS_LOT_NO is not null THEN ZTB_GIAONHAN_M_LOT.XUONG  ELSE P501.XUONG  END) AS FINAL_XUONG,PHAN_LOAI,BANG_GOP.USE_YN,BANG_GOP.PD,BANG_GOP.CAVITY,ZTB_GIAONHAN_M_LOT.TRANS_LOT_NO FROM ( SELECT P501.CTR_CD,       P501.M_LOT_NO,     P501.PROCESS_LOT_NO,     FLOOR(((P501.TEMP_QTY * PD) / CAVITY) / 1000) AS REMAIN_QTY,     P501.TEMP_QTY AS TEMP_QTY_EA,     'SX_NEW' AS PHAN_LOAI,     P501.USE_YN,     ZTB_SX_RESULT.PD,     ZTB_SX_RESULT.CAVITY FROM P501 LEFT JOIN ZTB_SX_RESULT ON (ZTB_SX_RESULT.PLAN_ID = P501.PLAN_ID AND ZTB_SX_RESULT.CTR_CD = P501.CTR_CD) WHERE P501.USE_YN = 'Y' AND P501.LOT_STATUS IS NULL UNION ALL SELECT      ZTB_TON_BTP.CTR_CD,  ZTB_TON_BTP.M_LOT_NO,     ZTB_TON_BTP.PROCESS_LOT_NO,     ZTB_TON_BTP.REMAIN_QTY,     FLOOR(((ZTB_TON_BTP.REMAIN_QTY / PD) * CAVITY) * 1000) AS TEMP_QTY_EA,     'TON_BTP' AS PHAN_LOAI,     ZTB_TON_BTP.USE_YN,     ZTB_SX_RESULT.PD,     ZTB_SX_RESULT.CAVITY FROM ZTB_TON_BTP LEFT JOIN ZTB_SX_RESULT ON (ZTB_SX_RESULT.PLAN_ID = ZTB_TON_BTP.PLAN_ID_INPUT) LEFT JOIN ZTB_SX_EQ_STATUS ON (ZTB_SX_EQ_STATUS.EQ_NAME = ZTB_SX_RESULT.EQ_NAME  AND ZTB_SX_EQ_STATUS.FACTORY = ZTB_SX_RESULT.FACTORY  AND ZTB_SX_EQ_STATUS.CTR_CD = ZTB_SX_RESULT.CTR_CD) WHERE ZTB_TON_BTP.USE_YN = 'Y' ) AS BANG_GOP LEFT JOIN P501 ON(P501.PROCESS_LOT_NO = BANG_GOP.PROCESS_LOT_NO AND P501.CTR_CD = BANG_GOP.CTR_CD ) LEFT JOIN ZTB_QLSXPLAN ON(ZTB_QLSXPLAN.PLAN_ID = P501.PLAN_ID AND ZTB_QLSXPLAN.CTR_CD = P501.CTR_CD ) LEFT JOIN M100 ON(M100.G_CODE = ZTB_QLSXPLAN.G_CODE AND M100.CTR_CD = ZTB_QLSXPLAN.CTR_CD ) LEFT JOIN ZTB_GIAONHAN_M_LOT ON(ZTB_GIAONHAN_M_LOT.PROCESS_LOT_NO = BANG_GOP.PROCESS_LOT_NO AND ZTB_GIAONHAN_M_LOT.CTR_CD = BANG_GOP.CTR_CD )
  ),
THIRD AS
(
SELECT CTR_CD,G_CODE, SUM(TEMP_QTY_EA) AS FINAL_BTP FROM  BTPTB GROUP BY  CTR_CD,G_CODE
)
MERGE INTO M100 
USING 
(
  SELECT M100.CTR_CD, M100.G_CODE, SUM(isnull(FINAL_BTP,0)) AS TOTAL_BTP FROM 
M100 LEFT JOIN THIRD ON M100.G_CODE= THIRD.G_CODE AND M100.CTR_CD= THIRD.CTR_CD
GROUP BY M100.CTR_CD,M100.G_CODE
) AS SRC_TB
ON (SRC_TB.G_CODE = M100.G_CODE AND SRC_TB.CTR_CD = M100.CTR_CD)
WHEN MATCHED THEN
UPDATE 
SET BTP_QTY = SRC_TB.TOTAL_BTP;
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.updateTONTP_M100_CMS = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
  WITH CTE_THANHPHAM AS (
      SELECT 
          Product_MaVach AS G_CODE, 
          SUM(CASE WHEN IO_type = 'IN' THEN IO_Qty ELSE 0 END) AS NHAPKHO,
          SUM(CASE WHEN IO_type = 'OUT' THEN IO_Qty ELSE 0 END) AS XUATKHO,
          SUM(CASE WHEN IO_type = 'OUT' AND IO_Status = 'Pending' THEN IO_Qty ELSE 0 END) AS XUATKHO_PD,
          SUM(CASE WHEN IO_type = 'IN' THEN IO_Qty ELSE 0 END) - SUM(CASE WHEN IO_type = 'OUT' THEN IO_Qty ELSE 0 END) AS TONKHO,
          SUM(CASE WHEN IO_type = 'OUT' AND (IO_Status <> 'Pending' OR IO_Status IS NULL) THEN IO_Qty ELSE 0 END) AS XUATKHO_TT,
          SUM(CASE WHEN IO_type = 'IN' THEN IO_Qty ELSE 0 END) - SUM(CASE WHEN IO_type = 'OUT' AND (IO_Status <> 'Pending' OR IO_Status IS NULL) THEN IO_Qty ELSE 0 END) AS TONKHO_TT
      FROM tbl_InputOutput
      GROUP BY Product_MaVach
  ),
  TONKHOTB AS
  (
  SELECT M100.G_CODE , isnull(CTE_THANHPHAM.TONKHO,0) AS TONKHO  FROM M100 LEFT JOIN CTE_THANHPHAM ON M100.G_CODE = CTE_THANHPHAM.G_CODE
  )
  MERGE INTO M100 
  USING TONKHOTB
  ON M100.G_CODE = TONKHOTB.G_CODE
  WHEN MATCHED THEN
  UPDATE
  SET M100.STOCK_QTY = TONKHOTB.TONKHO;
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.tinh_hinh_kiemtra_G_CODE = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
 DECLARE @plan_date as varchar(max), @next_plan_date as varchar(max);
SET @plan_date = '${DATA.PLAN_DATE}';
SET @next_plan_date = CAST(DATEADD(DAY,1,CAST(@plan_date as date)) as varchar(max));
WITH WH_OUTPUT_RAW AS
(SELECT tbl_InputOutput.IO_Status, tbl_InputOutput.IO_Note,tbl_InputOutput.IO_Number, M110.CUST_NAME_KD, tbl_InputOutput.Product_MaVach AS G_CODE, M100.G_NAME, M100.G_NAME_KD, tbl_InputOutput.Customer_ShortName, tbl_InputOutput.IO_Date, CONVERT(datetime,tbl_InputOutput.IO_Time) AS INPUT_DATETIME, tbl_InputOutput.IO_Shift ,tbl_InputOutput.IO_Type, tbl_InputOutput.IO_Qty FROM tbl_InputOutput LEFT JOIN M100 ON (M100.G_CODE= tbl_InputOutput.Product_MaVach) 
LEFT JOIN tbl_Customer ON (tbl_Customer.Customer_SortName = tbl_InputOutput.Customer_ShortName)
LEFT JOIN M110 ON (M110.CUST_CD = tbl_Customer.CUST_CD) WHERE IO_Type='OUT' AND Customer_ShortName <> 'CMSV'
),

INSP_INPUT AS 
(
SELECT ZTB_G_CODE_PLAN_TB.CTR_CD,ZTB_G_CODE_PLAN_TB.G_CODE ,SUM(isnull(ZTBINSPECTINPUTTB.INPUT_QTY_EA,0)) AS INPUT_QTY FROM ZTB_G_CODE_PLAN_TB
LEFT JOIN ZTBINSPECTINPUTTB ON ZTBINSPECTINPUTTB.CTR_CD = ZTB_G_CODE_PLAN_TB.CTR_CD AND ZTBINSPECTINPUTTB.G_CODE = ZTB_G_CODE_PLAN_TB.G_CODE AND ZTBINSPECTINPUTTB.INPUT_DATETIME >= ZTB_G_CODE_PLAN_TB.INS_DATE
WHERE ZTB_G_CODE_PLAN_TB.PLAN_DATE=CAST(@plan_date as date)
GROUP BY ZTB_G_CODE_PLAN_TB.CTR_CD,ZTB_G_CODE_PLAN_TB.G_CODE
),
INSP_INPUT_FIRST AS 
(
SELECT ZTB_G_CODE_PLAN_TB.CTR_CD,ZTB_G_CODE_PLAN_TB.G_CODE ,MIN(ZTBINSPECTINPUTTB.INPUT_DATETIME) AS FIRST_INPUT_TIME FROM ZTB_G_CODE_PLAN_TB
LEFT JOIN ZTBINSPECTINPUTTB ON ZTBINSPECTINPUTTB.CTR_CD = ZTB_G_CODE_PLAN_TB.CTR_CD AND ZTBINSPECTINPUTTB.G_CODE = ZTB_G_CODE_PLAN_TB.G_CODE AND ZTBINSPECTINPUTTB.INPUT_DATETIME >= ZTB_G_CODE_PLAN_TB.INS_DATE
WHERE ZTB_G_CODE_PLAN_TB.PLAN_DATE=CAST(@plan_date as date)
GROUP BY ZTB_G_CODE_PLAN_TB.CTR_CD,ZTB_G_CODE_PLAN_TB.G_CODE
),

INSP_OUTPUT AS
(
SELECT ZTB_G_CODE_PLAN_TB.CTR_CD, ZTB_G_CODE_PLAN_TB.G_CODE, SUM(isnull(ZTBINSPECTOUTPUTTB.OUTPUT_QTY_EA,0)) AS OUTPUT_QTY FROM ZTB_G_CODE_PLAN_TB         
  LEFT JOIN ZTBINSPECTOUTPUTTB ON ZTBINSPECTOUTPUTTB.CTR_CD = ZTB_G_CODE_PLAN_TB.CTR_CD AND ZTBINSPECTOUTPUTTB.G_CODE = ZTB_G_CODE_PLAN_TB.G_CODE AND ZTBINSPECTOUTPUTTB.OUTPUT_DATETIME >= ZTB_G_CODE_PLAN_TB.INS_DATE
WHERE ZTB_G_CODE_PLAN_TB.PLAN_DATE=CAST(@plan_date as date)
GROUP BY ZTB_G_CODE_PLAN_TB.CTR_CD,ZTB_G_CODE_PLAN_TB.G_CODE
),
WH_OUTPUT AS
(
SELECT ZTB_G_CODE_PLAN_TB.CTR_CD, ZTB_G_CODE_PLAN_TB.G_CODE, SUM(isnull(WH_OUTPUT_RAW.IO_Qty,0)) AS WH_OUTPUT_QTY  FROM ZTB_G_CODE_PLAN_TB     
LEFT JOIN WH_OUTPUT_RAW ON WH_OUTPUT_RAW.G_CODE = ZTB_G_CODE_PLAN_TB.G_CODE AND WH_OUTPUT_RAW.INPUT_DATETIME >= ZTB_G_CODE_PLAN_TB.INS_DATE

  WHERE ZTB_G_CODE_PLAN_TB.PLAN_DATE=CAST(@plan_date as date)
  GROUP BY ZTB_G_CODE_PLAN_TB.CTR_CD, ZTB_G_CODE_PLAN_TB.G_CODE
),
  INSPECTINGTB AS
  (SELECT DISTINCT CTR_CD,G_CODE FROM ZTBLOTPRINTHISTORYTB WHERE INS_STATUS ='S'  AND ZTBLOTPRINTHISTORYTB.LOT_PRINT_DATE >=  DATEADD(DAY,-1,CAST(@plan_date as date)))

  SELECT M100.BTP_QTY AS CURRENT_BTP_QTY, M100.TONKIEM_QTY AS CURRENT_INSP_STOCK, M100.STOCK_QTY AS CURRENT_WH_STOCK, M100.G_NAME, M100.G_NAME_KD, ZTB_G_CODE_PLAN_TB.*, INSP_INPUT.INPUT_QTY, INSP_INPUT_FIRST.FIRST_INPUT_TIME,
CASE 
WHEN ZTB_G_CODE_PLAN_TB.INIT_INSP_STOCK > 0  THEN 1
WHEN INSP_INPUT_FIRST.FIRST_INPUT_TIME BETWEEN CAST(CONCAT(@plan_date,' 14:00:01') as datetime) AND CAST(CONCAT(@plan_date,' 18:00:00') as datetime) THEN 2
WHEN INSP_INPUT_FIRST.FIRST_INPUT_TIME BETWEEN CAST(CONCAT(@plan_date,' 18:00:01') as datetime) AND CAST(CONCAT(@next_plan_date,' 06:00:00') as datetime) THEN 3
WHEN INSP_INPUT_FIRST.FIRST_INPUT_TIME BETWEEN CAST(CONCAT(@next_plan_date,' 06:00:01') as datetime) AND CAST(CONCAT(@next_plan_date,' 10:00:00') as datetime) THEN 4		  
ELSE 5
END AS PRIORITY,
CASE 
WHEN ZTB_G_CODE_PLAN_TB.INIT_INSP_STOCK > 0  THEN '14h~20h'
WHEN INSP_INPUT_FIRST.FIRST_INPUT_TIME BETWEEN CAST(CONCAT(@plan_date,' 14:00:01') as datetime) AND CAST(CONCAT(@plan_date,' 18:00:00') as datetime) THEN '20h~2h'
WHEN INSP_INPUT_FIRST.FIRST_INPUT_TIME BETWEEN CAST(CONCAT(@plan_date,' 18:00:01') as datetime) AND CAST(CONCAT(@next_plan_date,' 06:00:00') as datetime) THEN '02h~08h'
WHEN INSP_INPUT_FIRST.FIRST_INPUT_TIME BETWEEN CAST(CONCAT(@next_plan_date,' 06:00:01') as datetime) AND CAST(CONCAT(@next_plan_date,' 10:00:00') as datetime) THEN '08h~14h'		  
ELSE 'No Plan'
END AS PLAN_KT,

INSP_OUTPUT.OUTPUT_QTY,WH_OUTPUT.WH_OUTPUT_QTY, INSPECTINGTB.G_CODE AS IS_INSPECTING FROM ZTB_G_CODE_PLAN_TB
  LEFT JOIN INSP_INPUT ON ZTB_G_CODE_PLAN_TB.CTR_CD = INSP_INPUT.CTR_CD AND ZTB_G_CODE_PLAN_TB.G_CODE = INSP_INPUT.G_CODE
LEFT JOIN INSP_INPUT_FIRST ON ZTB_G_CODE_PLAN_TB.CTR_CD = INSP_INPUT_FIRST.CTR_CD AND ZTB_G_CODE_PLAN_TB.G_CODE = INSP_INPUT_FIRST.G_CODE
LEFT JOIN INSP_OUTPUT ON ZTB_G_CODE_PLAN_TB.CTR_CD = INSP_OUTPUT.CTR_CD AND ZTB_G_CODE_PLAN_TB.G_CODE = INSP_OUTPUT.G_CODE
LEFT JOIN WH_OUTPUT ON ZTB_G_CODE_PLAN_TB.CTR_CD = WH_OUTPUT.CTR_CD AND ZTB_G_CODE_PLAN_TB.G_CODE = WH_OUTPUT.G_CODE
  LEFT JOIN INSPECTINGTB ON ZTB_G_CODE_PLAN_TB.CTR_CD = INSPECTINGTB.CTR_CD AND ZTB_G_CODE_PLAN_TB.G_CODE = INSPECTINGTB.G_CODE
  LEFT JOIN M100 ON M100.CTR_CD=  ZTB_G_CODE_PLAN_TB.CTR_CD AND M100.G_CODE = ZTB_G_CODE_PLAN_TB.G_CODE		
  WHERE ZTB_G_CODE_PLAN_TB.PLAN_DATE=CAST(@plan_date as date)
  ORDER BY INSPECTINGTB.G_CODE DESC
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.updateProdOverData = async (req, res, DATA) => {
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let checkkq = "OK";
  let setpdQuery = `UPDATE ZTB_PROD_OVER_TB SET KD_CFM='${DATA.KD_CFM}', KD_EMPL_NO='${EMPL_NO}', KD_CF_DATETIME=GETDATE(), KD_REMARK = N'${DATA.KD_REMARK}'  WHERE CTR_CD='${DATA.CTR_CD}' AND AUTO_ID=${DATA.AUTO_ID}`;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.loadProdOverData = async (req, res, DATA) => {
  let userData = req.payload_data;  
  let isGranted = await checkPermission(userData, ['KD'], ['Leader','ADMIN', 'Dept Staff'], ['ALL']);
  if(!isGranted) {
    return res.send({ tk_status: "NG", message: "Permission insufficent" });   
  }
  let checkkq = "OK";
  let condition = `WHERE ZTB_PROD_OVER_TB.CTR_CD='${DATA.CTR_CD}' `
  console.log(DATA.ONLY_PENDING);
  if (DATA.ONLY_PENDING === true) {
    condition += ` AND ZTB_PROD_OVER_TB.KD_CFM='P'`
  }
  let setpdQuery = `
    SELECT P400.EMPL_NO,M110.CUST_NAME_KD, M100.G_NAME, M100.G_NAME_KD, ZTB_PROD_OVER_TB.*, M100.PROD_LAST_PRICE,P400.PROD_REQUEST_QTY,(ZTB_PROD_OVER_TB.OVER_QTY*M100.PROD_LAST_PRICE) AS AMOUNT  
FROM ZTB_PROD_OVER_TB
    LEFT JOIN P400 ON P400.PROD_REQUEST_NO = ZTB_PROD_OVER_TB.PROD_REQUEST_NO AND P400.CTR_CD = ZTB_PROD_OVER_TB.CTR_CD
    LEFT JOIN M100 ON M100.G_CODE = P400.G_CODE AND M100.CTR_CD = P400.CTR_CD
    LEFT JOIN M110 ON M110.CUST_CD = P400.CUST_CD AND  M110.CTR_CD = P400.CTR_CD	
    ${condition}
    ORDER BY ZTB_PROD_OVER_TB.AUTO_ID DESC
    `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.update_invoice_no = async (req, res, DATA) => {
  let userData = req.payload_data;  
  let isGranted = await checkPermission(userData, ['KD'], ['Leader','ADMIN', 'Dept Staff'], ['ALL']);
  if(!isGranted) {
    return res.send({ tk_status: "NG", message: "Permission insufficent" });   
  }
  let checkkq = "OK";
  let setpdQuery = `UPDATE ZTBDelivery SET INVOICE_NO='${DATA.INVOICE_NO}' WHERE CTR_CD='${DATA.CTR_CD}' AND DELIVERY_ID=${DATA.DELIVERY_ID}`;
  console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.update_invoice = async (req, res, DATA) => {
  if (!await checkPermission(req.payload_data, ['KD'], ['Leader','ADMIN', 'Dept Staff'], ['ALL'])) return res.send({ tk_status: "NG", message: "Permission insufficent" });
  let checkkq = "OK";
  let setpdQuery = `UPDATE ZTBDelivery SET CUST_CD='${DATA.CUST_CD}', G_CODE='${DATA.G_CODE}', PO_NO='${DATA.PO_NO}',  DELIVERY_DATE='${DATA.DELIVERY_DATE}', EMPL_NO='${DATA.EMPL_NO}', DELIVERY_QTY='${DATA.DELIVERY_QTY}', REMARK='${DATA.REMARK}' WHERE CTR_CD='${DATA.CTR_CD}' AND DELIVERY_ID=${DATA.DELIVERY_ID}`;
  //////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.traInvoiceDataFull = async (req, res, DATA) => {
  //if (!await checkPermission(req.payload_data, ['KD'], ['Leader','ADMIN', 'Dept Staff'], ['ALL'])) return res.send({ tk_status: "NG", message: "Permission insufficent" });
  let kqua;
  query = `SELECT  ZTBDelivery.DELIVERY_ID, ZTBDelivery.CUST_CD,M110.CUST_NAME_KD,ZTBDelivery.EMPL_NO,M010.EMPL_NAME,ZTBDelivery.G_CODE,M100.G_NAME,M100.G_NAME_KD, M100.DESCR,ZTBPOTable.PO_ID, ZTBDelivery.PO_NO,ZTBPOTable.PO_DATE, ZTBPOTable.RD_DATE, ZTBDelivery.DELIVERY_DATE,ZTBDelivery.DELIVERY_QTY,isnull(ZTBPOTable.BEP,0) AS BEP, ZTBPOTable.PROD_PRICE,  (ZTBDelivery.DELIVERY_QTY*ZTBPOTable.PROD_PRICE) AS DELIVERED_AMOUNT,(isnull(ZTBPOTable.BEP,0)*ZTBDelivery.DELIVERY_QTY) AS DELIVERED_BEP_AMOUNT ,ZTBDelivery.REMARK,ZTBDelivery.INVOICE_NO,M100.PROD_MAIN_MATERIAL,M100.PROD_TYPE,M100.PROD_MODEL,M100.PROD_PROJECT, DATEPART(YEAR,DELIVERY_DATE) AS YEARNUM,DATEPART( ISOWK, DATEADD(day,1,DELIVERY_DATE)) AS WEEKNUM,CASE WHEN ZTBPOTable.RD_DATE < ZTBDelivery.DELIVERY_DATE THEN 'OVER' ELSE 'OK' END AS OVERDUE
  FROM ZTBDelivery
  LEFT JOIN M110 ON (M110.CUST_CD = ZTBDelivery.CUST_CD AND M110.CTR_CD = ZTBDelivery.CTR_CD)
  LEFT JOIN M010 ON (M010.EMPL_NO = ZTBDelivery.EMPL_NO AND M010.CTR_CD = ZTBDelivery.CTR_CD)
  LEFT JOIN M100 ON (M100.G_CODE = ZTBDelivery.G_CODE AND M100.CTR_CD = ZTBDelivery.CTR_CD)
  LEFT JOIN ZTBPOTable ON (ZTBDelivery.PO_NO = ZTBPOTable.PO_NO AND ZTBDelivery.G_CODE = ZTBPOTable.G_CODE AND ZTBDelivery.CUST_CD = ZTBPOTable.CUST_CD AND ZTBDelivery.CTR_CD = ZTBPOTable.CTR_CD)
    ${generate_condition_get_invoice(
    DATA.alltime,
    DATA.start_date,
    DATA.end_date,
    DATA.cust_name,
    DATA.codeCMS,
    DATA.codeKD,
    DATA.prod_type,
    DATA.empl_name,
    DATA.po_no,
    DATA.material,
    DATA.invoice_no,
    DATA.CTR_CD
  )} ORDER BY ZTBDelivery.DELIVERY_ID DESC`;
  ///console.log(query);
  kqua = await queryDB(query);
  res.send(kqua);
};
exports.insert_invoice = async (req, res, DATA) => {
  if (!await checkPermission(req.payload_data, ['KD'], ['Leader','ADMIN', 'Dept Staff'], ['ALL'])) return res.send({ tk_status: "NG", message: "Permission insufficent" });
  let checkkq = "OK";
  let setpdQuery = `INSERT INTO ZTBDelivery (CTR_CD, CUST_CD, EMPL_NO, G_CODE, PO_NO, DELIVERY_QTY, DELIVERY_DATE, NOCANCEL, REMARK, INVOICE_NO) VALUES ('${DATA.CTR_CD}','${DATA.CUST_CD
    }', '${DATA.EMPL_NO}', '${DATA.G_CODE}', '${DATA.PO_NO}', '${DATA.DELIVERY_QTY}', '${DATA.DELIVERY_DATE}', 1,'${DATA.REMARK}', '${DATA.INVOICE_NO === undefined ? "" : DATA.INVOICE_NO
    }')`;
  ////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.selectcodeList = async (req, res, DATA) => {
  let kqua;
  let condition = ``;
  if (DATA.G_NAME !== undefined && DATA.G_NAME !== null && DATA.G_NAME !== '') {
    condition = ` AND  M100.G_NAME LIKE '%${DATA.G_NAME}%'`;
  }
  let query = `SELECT G_CODE , G_NAME, G_NAME_KD, PROD_LAST_PRICE, USE_YN FROM M100 WHERE CTR_CD='${DATA.CTR_CD}'  ${condition}`;
  kqua = await queryDB(query);
  ////console.log(kqua);
  res.send(kqua);
};
exports.delete_invoice = async (req, res, DATA) => {
  if (!await checkPermission(req.payload_data, ['KD'], ['Leader','ADMIN', 'Dept Staff'], ['ALL'])) return res.send({ tk_status: "NG", message: "Permission insufficent" });
  let checkkq = "OK";
  let setpdQuery = `DELETE FROM ZTBDelivery WHERE CTR_CD='${DATA.CTR_CD}' AND DELIVERY_ID=${DATA.DELIVERY_ID}`;
  //////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.checkPOExist = async (req, res, DATA) => {
  let kqua;
  //let query = `SELECT * FROM ZTBPoTable WHERE G_CODE='${DATA.G_CODE}' AND CUST_CD='${DATA.CUST_CD}' AND PO_NO='${DATA.PO_NO}'`;
  let query = `SELECT  ZTBPOTable.CUST_CD,  ZTBPOTable.PO_DATE, ZTBPOTable.PO_NO, ZTBPOTable.G_CODE,(ZTBPOTable.PO_QTY-AA.TotalDelivered) As PO_BALANCE FROM (SELECT ZTBPOTable.EMPL_NO, ZTBPOTable.CUST_CD, ZTBPOTable.G_CODE, ZTBPOTable.PO_NO, isnull(SUM(ZTBDelivery.DELIVERY_QTY),0) AS TotalDelivered FROM ZTBPOTable  LEFT JOIN ZTBDelivery ON (ZTBDelivery.CTR_CD = ZTBPOTable.CTR_CD AND ZTBDelivery.CUST_CD = ZTBPOTable.CUST_CD AND ZTBDelivery.G_CODE = ZTBPOTable.G_CODE AND ZTBDelivery.PO_NO = ZTBPOTable.PO_NO) GROUP BY ZTBPOTable.CTR_CD,ZTBPOTable.EMPL_NO,ZTBPOTable.G_CODE,ZTBPOTable.CUST_CD,ZTBPOTable.PO_NO) AS AA LEFT JOIN M010 ON (M010.EMPL_NO = AA.EMPL_NO) LEFT JOIN M100 ON (M100.G_CODE = AA.G_CODE) LEFT JOIN ZTBPOTable ON (AA.CUST_CD = ZTBPOTable.CUST_CD AND AA.G_CODE = ZTBPOTable.G_CODE AND AA.PO_NO = ZTBPOTable.PO_NO) JOIN M110 ON (M110.CUST_CD = AA.CUST_CD) WHERE ZTBPOTable.G_CODE='${DATA.G_CODE}' AND ZTBPOTable.CUST_CD='${DATA.CUST_CD}' AND ZTBPOTable.PO_NO='${DATA.PO_NO}' AND ZTBPOTable.CTR_CD='${DATA.CTR_CD}'`;
  kqua = await queryDB(query);
  ////console.log(kqua);
  res.send(kqua);
};
exports.checktonkho_tdycsx = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `SELECT 
 M100.G_CODE, 
  isnull(M100.TONKIEM_QTY,0) AS CHO_KIEM, 
  0 AS CHO_CS_CHECK, 
  0 CHO_KIEM_RMA, 
  isnull(M100.TONKIEM_QTY,0) AS TONG_TON_KIEM, 
  isnull(M100.BTP_QTY,0) AS BTP, 
  isnull(THANHPHAM.TONKHO, 0) AS TON_TP, 
  isnull(tbl_Block_table2.Block_Qty, 0) AS BLOCK_QTY, 
  (
    isnull( M100.TONKIEM_QTY, 0) + isnull(M100.BTP_QTY, 0)+ isnull(THANHPHAM.TONKHO, 0) - isnull(tbl_Block_table2.Block_Qty, 0)
  ) AS GRAND_TOTAL_STOCK 
FROM 
  M100 
  LEFT JOIN (
    SELECT 
      Product_MaVach, 
      isnull([IN], 0) AS NHAPKHO, 
      isnull([OUT], 0) AS XUATKHO, 
      (
        isnull([IN], 0)- isnull([OUT], 0)
      ) AS TONKHO 
    FROM 
      (
        SELECT 
          Product_Mavach, 
          IO_Type, 
          IO_Qty 
        FROM 
          tbl_InputOutput
      ) AS SourceTable PIVOT (
        SUM(IO_Qty) FOR IO_Type IN ([IN], [OUT])
      ) AS PivotTable
  ) AS THANHPHAM ON (
    THANHPHAM.Product_MaVach = M100.G_CODE
  ) 
   
  LEFT JOIN (
    SELECT 
      Product_MaVach, 
      SUM(Block_Qty) AS Block_Qty 
    from 
      tbl_Block2 
    GROUP BY 
      Product_MaVach
  ) AS tbl_Block_table2 ON (
    tbl_Block_table2.Product_MaVach = M100.G_CODE
  )
     WHERE M100.G_CODE='${DATA.G_CODE}'`;
  //////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  ////console.log(checkkq);
  res.send(checkkq);
};
exports.checkpobalance_tdycsx = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `WITH POTB AS
  (
  SELECT CTR_CD, G_CODE, SUM(PO_QTY) AS PO_QTY FROM ZTBPOTable WHERE G_CODE='${DATA.G_CODE}' AND CTR_CD='${DATA.CTR_CD}' GROUP BY CTR_CD, G_CODE
  ),
  DLTB AS
  (
  SELECT CTR_CD, G_CODE, SUM(DELIVERY_QTY) AS DELIVERY_QTY FROM ZTBDelivery WHERE G_CODE='${DATA.G_CODE}' AND CTR_CD='${DATA.CTR_CD}' GROUP BY CTR_CD, G_CODE
  )
  SELECT POTB.G_CODE, (isnull(POTB.PO_QTY,0)- isnull(DLTB.DELIVERY_QTY,0)) AS PO_BALANCE FROM POTB LEFT JOIN DLTB ON POTB.G_CODE = DLTB.G_CODE AND POTB.CTR_CD = DLTB.CTR_CD WHERE POTB.CTR_CD='${DATA.CTR_CD}'`;
  //////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  ////console.log(checkkq);
  res.send(checkkq);
};
exports.ycsx_fullinfo = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `WITH IQCTB AS
(
SELECT CTR_CD, M_CODE, SUM(TOTAL_IN_QTY) AS IQC_STOCK  FROM ZTB_SX_NG_MATERIAL WHERE QC_PASS='Y' AND USE_YN='Y' AND PHANLOAI='NVL' GROUP BY CTR_CD, M_CODE
)
SELECT M100.USE_YN,M100.G_NAME_KD,isnull(M100.FSC_CODE,'01') AS FSC_CODE, isnull(M100.FSC,'N') AS FSC, M100.PDBV, M140.LIEUQL_SX, M100.PROD_MAIN_MATERIAL, M100.PO_TYPE, P400.REMK,P400.PROD_REQUEST_QTY,P400.PROD_REQUEST_NO,P400.PROD_REQUEST_DATE,P400.G_CODE,P400.DELIVERY_DT,P400.CODE_55,P400.CODE_50,M140.RIV_NO,M140.M_QTY,M140.M_CODE,M110.CUST_NAME,M100.ROLE_EA_QTY,M100.PACK_DRT,M100.G_WIDTH,M100.G_SG_R,M100.G_SG_L,M100.G_R,M100.G_NAME,M100.G_LG, M100.PROD_PRINT_TIMES, M100.G_LENGTH,M100.G_CODE_C,M100.G_CG,M100.G_C,M100.G_C_R,M100.PD, M100.CODE_33,M090.M_NAME,M090.WIDTH_CD,M010.EMPL_NO,M010.EMPL_NAME, P400.CODE_03,M140.REMK AS REMARK , (isnull(M090.STOCK_CFM_NM1,0) + isnull(STOCK_CFM_NM2,0)) AS TONLIEU, (isnull(M090.HOLDING_CFM_NM1,0) + isnull(M090.HOLDING_CFM_NM2,0)) AS HOLDING, (isnull(M090.STOCK_CFM_NM1,0) + isnull(STOCK_CFM_NM2,0) + isnull(M090.HOLDING_CFM_NM1,0) + isnull(M090.HOLDING_CFM_NM2,0)) AS TONG_TON_LIEU,isnull(IQCTB.IQC_STOCK,0) AS IQC_STOCK, P400.PDUYET, M100.NO_INSPECTION, M100.PROD_DIECUT_STEP, M100.PROD_PRINT_TIMES,M100.FACTORY, M100.EQ1, M100.EQ2, M100.EQ3,M100.EQ4,M100.Setting1, M100.Setting2, M100.Setting3,M100.Setting4,M100.UPH1, M100.UPH2,M100.UPH3,M100.UPH4, M100.Step1, M100.Step2, M100.Step3,M100.Step4,M100.LOSS_SX1, M100.LOSS_SX2, M100.LOSS_SX3, M100.LOSS_SX4, M100.LOSS_SETTING1 , M100.LOSS_SETTING2 ,M100.LOSS_SETTING3, M100.LOSS_SETTING4, M100.NOTE, M100.PROD_TYPE, P400.PL_HANG, M100.EXP_DATE, M100.PD_HSD, M100.QL_HSD, P400.IS_TAM_THOI FROM P400 
            LEFT JOIN M100 ON P400.G_CODE = M100.G_CODE AND P400.CTR_CD = M100.CTR_CD
            LEFT JOIN M010 ON P400.EMPL_NO = M010.EMPL_NO AND P400.CTR_CD = M010.CTR_CD
            LEFT JOIN M140 ON P400.G_CODE = M140.G_CODE AND P400.CTR_CD = M140.CTR_CD
            LEFT JOIN M090 ON M090.M_CODE = M140.M_CODE AND M090.CTR_CD = M140.CTR_CD
            LEFT JOIN M110 ON M110.CUST_CD = P400.CUST_CD AND M110.CTR_CD = P400.CTR_CD
  LEFT JOIN IQCTB ON M090.M_CODE = IQCTB.M_CODE AND M090.CTR_CD = IQCTB.CTR_CD
            WHERE P400.PROD_REQUEST_NO='${DATA.PROD_REQUEST_NO}' AND P400.CTR_CD='${DATA.CTR_CD}'`;
  //////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  ////console.log(checkkq);
  res.send(checkkq);
};
exports.checkMainMaterialFSC = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
    SELECT TOP 1 isnull(FSC,'N') AS FSC, isnull(ZTB_MATERIAL_TB.FSC_CODE,'01') AS FSC_CODE, ZTB_FSC_TB.FSC_NAME, EXP_DATE
    FROM ZTB_MATERIAL_TB 
    LEFT JOIN ZTB_FSC_TB ON ZTB_FSC_TB.FSC_CODE = ZTB_MATERIAL_TB.FSC_CODE AND ZTB_FSC_TB.CTR_CD = ZTB_MATERIAL_TB.CTR_CD
    WHERE ZTB_MATERIAL_TB.M_NAME='${DATA.M_NAME}' AND ZTB_MATERIAL_TB.CTR_CD='${DATA.CTR_CD}'
    `;
  console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.check_inventorydate = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `SELECT MAX(INVENTORY_DATE) AS INVENTORY_DATE FROM KIEMKE_NVL WHERE CTR_CD='${DATA.CTR_CD}'`;
  //////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.traDataAMZ = async (req, res, DATA) => {
  if (!await checkPermission(req.payload_data, ['KD'], ['Leader','ADMIN', 'Dept Staff'], ['ALL'])) return res.send({ tk_status: "NG", message: "Permission insufficent" });
  let condition = " WHERE 1=1";
  if (DATA.ALLTIME !== true)
    condition += ` AND AMAZONE_DATA.INS_DATE BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE} 23:59:59'`;
  if (DATA.G_NAME !== "")
    condition += `AND M100.G_NAME LIKE '%${DATA.G_NAME}%' `;
  if (DATA.NO_IN !== "")
    condition += ` AND AMAZONE_DATA.NO_IN ='${DATA.NO_IN}' `;
  if (DATA.PROD_REQUEST_NO !== "")
    condition += ` AND AMAZONE_DATA.PROD_REQUEST_NO = '${DATA.PROD_REQUEST_NO}' `;
  if (DATA.DATA_AMZ !== "")
    condition += ` AND AMAZONE_DATA.DATA_1='${DATA.DATA_AMZ}' OR AMAZONE_DATA.DATA_2='${DATA.DATA_AMZ}'`
  let checkkq = "OK";
  let setpdQuery = `SELECT M100.G_NAME, AMAZONE_DATA.G_CODE, AMAZONE_DATA.PROD_REQUEST_NO, AMAZONE_DATA.NO_IN, AMAZONE_DATA.ROW_NO, AMAZONE_DATA.DATA_1, AMAZONE_DATA.DATA_2, AMAZONE_DATA.DATA_3, AMAZONE_DATA.DATA_4, AMAZONE_DATA.PRINT_STATUS, AMAZONE_DATA.INLAI_COUNT, AMAZONE_DATA.REMARK, AMAZONE_DATA.INS_DATE, AMAZONE_DATA.INS_EMPL, AMAZONE_DATA.CTR_CD 
  FROM AMAZONE_DATA WITH (NOLOCK) 
  LEFT JOIN M100 ON (M100.G_CODE = AMAZONE_DATA.G_CODE AND M100.CTR_CD = AMAZONE_DATA.CTR_CD) 
  ${condition} AND AMAZONE_DATA.CTR_CD='${DATA.CTR_CD}' `;
  //${moment().format('YYYY-MM-DD')}
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.get_cavityAmazon = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `SELECT TOP 1 CAVITY_PRINT FROM BOM_AMAZONE LEFT JOIN DESIGN_AMAZONE ON (BOM_AMAZONE.G_CODE_MAU = DESIGN_AMAZONE.G_CODE_MAU AND  BOM_AMAZONE.DOITUONG_NO = DESIGN_AMAZONE.DOITUONG_NO) WHERE BOM_AMAZONE.CTR_CD='${DATA.CTR_CD}' AND BOM_AMAZONE.G_CODE='${DATA.g_code}'`;
  //////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.get_ycsxInfo2 = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `SELECT P400.CODE_50, P400.G_CODE, M100.G_NAME, P400.PROD_REQUEST_DATE, P400.PROD_REQUEST_NO, P400.PROD_REQUEST_QTY, M100.PROD_MODEL, P400.PL_HANG FROM P400 JOIN M100 ON (P400.G_CODE = M100.G_CODE) WHERE P400.CTR_CD='${DATA.CTR_CD}' AND P400.PROD_REQUEST_NO='${DATA.ycsxno}'`;
  //////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.setopen_ycsx = async (req, res, DATA) => {
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let checkkq = "OK";
  /* let USE_YN = DATA.YCSX_PENDING===1?'N':'Y';
  let setpdQuery = `UPDATE P400 SET YCSX_PENDING='${DATA.YCSX_PENDING}', USE_YN='${USE_YN}' WHERE PROD_REQUEST_NO='${DATA.PROD_REQUEST_NO}'`; */
  let setpdQuery = `UPDATE P400 SET USE_YN='${DATA.USE_YN}', UPD_DATE=GETDATE(), UPD_EMPL='${EMPL_NO}' WHERE CTR_CD='${DATA.CTR_CD}' AND PROD_REQUEST_NO='${DATA.PROD_REQUEST_NO}'`;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.setpending_ycsx = async (req, res, DATA) => {
  let checkkq = "OK";
  /* let USE_YN = DATA.YCSX_PENDING===1?'N':'Y';
  let setpdQuery = `UPDATE P400 SET YCSX_PENDING='${DATA.YCSX_PENDING}', USE_YN='${USE_YN}' WHERE PROD_REQUEST_NO='${DATA.PROD_REQUEST_NO}'`; */
  let setpdQuery = `UPDATE P400 SET YCSX_PENDING='${DATA.YCSX_PENDING}' WHERE CTR_CD='${DATA.CTR_CD}' AND PROD_REQUEST_NO='${DATA.PROD_REQUEST_NO}'`;
  //////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.setMaterial_YN = async (req, res, DATA) => {
  if (!await checkPermission(req.payload_data, ['MUA'], ['Leader','ADMIN', 'Dept Staff'], ['ALL'])) return res.send({ tk_status: "NG", message: "Permission insufficent" });
  let checkkq = "OK";
  let setpdQuery = `
  UPDATE P400 SET MATERIAL_YN='${DATA.MATERIAL_YN}' WHERE PROD_REQUEST_NO='${DATA.PROD_REQUEST_NO}'
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.pheduyet_ycsx = async (req, res, DATA) => {
  if (!await checkPermission(req.payload_data, ['KD'], ['Leader','ADMIN', 'Dept Staff'], ['ALL'])) return res.send({ tk_status: "NG", message: "Permission insufficent" });
  let checkkq = "OK";
  let setpdQuery = `UPDATE P400 SET PDUYET='${DATA.PDUYET}' WHERE CTR_CD='${DATA.CTR_CD}' AND PROD_REQUEST_NO='${DATA.PROD_REQUEST_NO}'`;
  //////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.insertData_Amazon_SuperFast = async (req, res, DATA) => {
  if (!await checkPermission(req.payload_data, ['KD','RND'], ['Leader','ADMIN', 'Dept Staff'], ['ALL'])) return res.send({ tk_status: "NG", message: "Permission insufficent" });
  let checkkq = "OK";
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let uploadAmazonData = DATA.AMZDATA;
  let sql_insert_string = `INSERT INTO AMAZONE_DATA (CTR_CD,G_CODE,PROD_REQUEST_NO,NO_IN,ROW_NO,DATA_1,DATA_2,DATA_3,DATA_4,PRINT_STATUS,INLAI_COUNT,REMARK,INS_DATE,INS_EMPL,UPD_DATE,UPD_EMPL) VALUES `;
  for (let i = 0; i < uploadAmazonData.length; i++) {
    sql_insert_string += `('${DATA.CTR_CD}','${uploadAmazonData[i].G_CODE}','${uploadAmazonData[i].PROD_REQUEST_NO}','${uploadAmazonData[i].NO_IN}','${uploadAmazonData[i].ROW_NO}','${uploadAmazonData[i].DATA1}','${uploadAmazonData[i].DATA2}','','','OK','${uploadAmazonData[i].INLAI_COUNT}','${uploadAmazonData[i].REMARK}',GETDATE(),'${EMPL_NO}',GETDATE(),'${EMPL_NO}'),`;
  }
  sql_insert_string = sql_insert_string.substring(
    0,
    sql_insert_string.length - 1
  );
  let setpdQuery = `
  BEGIN TRANSACTION;
  BEGIN TRY
  ${sql_insert_string} 
  COMMIT;           
  END TRY
  BEGIN CATCH
  ROLLBACK;
  PRINT 'Co Loi: ' + ERROR_MESSAGE();
  END CATCH
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.update_banve_value = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `UPDATE M100 SET BANVE='${DATA.banvevalue}' WHERE CTR_CD='${DATA.CTR_CD}'AND G_CODE= '${DATA.G_CODE}'`;
  ////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.traShortageKD = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = " WHERE 1=1  ";
  if (DATA.ALLTIME === false) {
    condition += ` AND ZTB_SHORTAGE_LIST.PLAN_DATE BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE}'`;
  }
  if (DATA.G_NAME !== "") {
    condition += ` AND M100.G_NAME LIKE '%${DATA.G_NAME}%'`;
  }
  if (DATA.G_CODE !== "") {
    condition += ` AND M100.G_CODE = '${DATA.G_CODE}'`;
  }
  if (DATA.ST_ID !== "") {
    condition += ` AND ZTB_SHORTAGE_LIST.ST_ID = '${DATA.ST_ID}'`;
  }
  if (DATA.CUST_NAME !== "") {
    condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME}%'`;
  }
  let setpdQuery = `SELECT M100.G_NAME, ZTB_SHORTAGE_LIST.G_CODE,  ZTB_SHORTAGE_LIST.ST_ID,ZTB_SHORTAGE_LIST.PLAN_DATE, M110.CUST_NAME_KD, PO_TON.PO_BALANCE, TONKHOFULL.TON_TP, TONKHOFULL.BTP, TONKHOFULL.TONG_TON_KIEM, ZTB_SHORTAGE_LIST.D1_9H, ZTB_SHORTAGE_LIST.D1_13H, ZTB_SHORTAGE_LIST.D1_19H, ZTB_SHORTAGE_LIST.D1_21H, ZTB_SHORTAGE_LIST.D1_23H, ZTB_SHORTAGE_LIST.D2_9H, ZTB_SHORTAGE_LIST.D2_13H, ZTB_SHORTAGE_LIST.D2_21H, ZTB_SHORTAGE_LIST.D3_SANG, ZTB_SHORTAGE_LIST.D3_CHIEU, ZTB_SHORTAGE_LIST.D4_SANG, ZTB_SHORTAGE_LIST.D4_CHIEU, (ZTB_SHORTAGE_LIST.D1_9H+ ZTB_SHORTAGE_LIST.D1_13H+ ZTB_SHORTAGE_LIST.D1_19H+ ZTB_SHORTAGE_LIST.D1_21H+ ZTB_SHORTAGE_LIST.D1_23H) AS TODAY_TOTAL, (TONKHOFULL.TON_TP - (ZTB_SHORTAGE_LIST.D1_9H+ ZTB_SHORTAGE_LIST.D1_13H+ ZTB_SHORTAGE_LIST.D1_19H+ ZTB_SHORTAGE_LIST.D1_21H+ ZTB_SHORTAGE_LIST.D1_23H)) AS TODAY_THIEU, CASE WHEN M100.UPH1 > M100.UPH2 THEN M100.UPH2 ELSE M100.UPH1 END AS UPH, ZTB_SHORTAGE_LIST.PRIORITY FROM ZTB_SHORTAGE_LIST LEFT JOIN M100 ON (M100.G_CODE = ZTB_SHORTAGE_LIST.G_CODE) LEFT JOIN M110 ON (M110.CUST_CD = ZTB_SHORTAGE_LIST.CUST_CD) LEFT JOIN M010 ON (M010.EMPL_NO = ZTB_SHORTAGE_LIST.EMPL_NO) LEFT JOIN (SELECT AA.G_CODE, (SUM(ZTBPOTable.PO_QTY)-SUM(AA.TotalDelivered)) As PO_BALANCE FROM (SELECT ZTBPOTable.EMPL_NO, ZTBPOTable.CUST_CD, ZTBPOTable.G_CODE, ZTBPOTable.PO_NO, isnull(SUM(ZTBDelivery.DELIVERY_QTY),0) AS TotalDelivered FROM ZTBPOTable LEFT JOIN ZTBDelivery ON (ZTBDelivery.CTR_CD = ZTBPOTable.CTR_CD AND ZTBDelivery.CUST_CD = ZTBPOTable.CUST_CD AND ZTBDelivery.G_CODE = ZTBPOTable.G_CODE AND ZTBDelivery.PO_NO = ZTBPOTable.PO_NO) GROUP BY ZTBPOTable.CTR_CD,ZTBPOTable.EMPL_NO,ZTBPOTable.G_CODE,ZTBPOTable.CUST_CD,ZTBPOTable.PO_NO) AS AA JOIN ZTBPOTable ON ( AA.CUST_CD = ZTBPOTable.CUST_CD AND AA.G_CODE = ZTBPOTable.G_CODE AND AA.PO_NO = ZTBPOTable.PO_NO) GROUP BY AA.G_CODE) AS PO_TON ON(ZTB_SHORTAGE_LIST.G_CODE = PO_TON.G_CODE) LEFT JOIN ( SELECT M100.G_CODE, M100.G_NAME, M100.G_NAME_KD, isnull(TONKIEM.INSPECT_BALANCE_QTY, 0) AS CHO_KIEM, isnull(TONKIEM.WAIT_CS_QTY, 0) AS CHO_CS_CHECK, isnull(TONKIEM.WAIT_SORTING_RMA, 0) CHO_KIEM_RMA, isnull(TONKIEM.TOTAL_WAIT, 0) AS TONG_TON_KIEM, isnull(BTP.BTP_QTY_EA, 0) AS BTP, isnull(THANHPHAM.TONKHO, 0) AS TON_TP, isnull(tbl_Block_table2.Block_Qty, 0) AS BLOCK_QTY, ( isnull(TONKIEM.TOTAL_WAIT, 0) + isnull(BTP.BTP_QTY_EA, 0)+ isnull(THANHPHAM.TONKHO, 0) - isnull(tbl_Block_table2.Block_Qty, 0) ) AS GRAND_TOTAL_STOCK FROM M100 LEFT JOIN ( SELECT Product_MaVach, isnull([IN], 0) AS NHAPKHO, isnull([OUT], 0) AS XUATKHO, ( isnull([IN], 0)- isnull([OUT], 0) ) AS TONKHO FROM ( SELECT Product_Mavach, IO_Type, IO_Qty FROM tbl_InputOutput ) AS SourceTable PIVOT ( SUM(IO_Qty) FOR IO_Type IN ([IN], [OUT]) ) AS PivotTable ) AS THANHPHAM ON ( THANHPHAM.Product_MaVach = M100.G_CODE ) LEFT JOIN ( SELECT ZTB_WAIT_INSPECT.G_CODE, M100.G_NAME, M100.G_NAME_KD, SUM(INSPECT_BALANCE_QTY) AS INSPECT_BALANCE_QTY, SUM(WAIT_CS_QTY) AS WAIT_CS_QTY, SUM(WAIT_SORTING_RMA) AS WAIT_SORTING_RMA, SUM( INSPECT_BALANCE_QTY + WAIT_CS_QTY + WAIT_SORTING_RMA ) AS TOTAL_WAIT FROM ZTB_WAIT_INSPECT JOIN M100 ON ( M100.G_CODE = ZTB_WAIT_INSPECT.G_CODE ) WHERE UPDATE_DATE = CONVERT( date, GETDATE() ) AND CALAMVIEC = 'DEM' GROUP BY ZTB_WAIT_INSPECT.G_CODE, M100.G_NAME, M100.G_NAME_KD ) AS TONKIEM ON ( THANHPHAM.Product_MaVach = TONKIEM.G_CODE ) LEFT JOIN ( SELECT Product_MaVach, SUM(Block_Qty) AS Block_Qty from tbl_Block2 GROUP BY Product_MaVach ) AS tbl_Block_table2 ON ( tbl_Block_table2.Product_MaVach = M100.G_CODE ) LEFT JOIN ( SELECT ZTB_HALF_GOODS.G_CODE, M100.G_NAME, SUM(BTP_QTY_EA) AS BTP_QTY_EA FROM ZTB_HALF_GOODS JOIN M100 ON ( M100.G_CODE = ZTB_HALF_GOODS.G_CODE ) WHERE UPDATE_DATE = CONVERT( date, GETDATE() ) GROUP BY ZTB_HALF_GOODS.G_CODE, M100.G_NAME ) AS BTP ON ( BTP.G_CODE = THANHPHAM.Product_MaVach ) ) AS TONKHOFULL ON ( TONKHOFULL.G_CODE = ZTB_SHORTAGE_LIST.G_CODE ) ${condition} ORDER BY ZTB_SHORTAGE_LIST.ST_ID DESC`;
  //${moment().format('YYYY-MM-DD')}
  ////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.delete_shortage = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `DELETE FROM ZTB_SHORTAGE_LIST WHERE CTR_CD='${DATA.CTR_CD}' AND ST_ID=${DATA.ST_ID}`;
  //////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.insert_shortage = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `INSERT INTO ZTB_SHORTAGE_LIST (CTR_CD,G_CODE,CUST_CD,EMPL_NO,PLAN_DATE,D1_9H,D1_13H,D1_19H,D1_21H,D1_23H,D1_OTHER,D2_9H,D2_13H,D2_21H,D3_SANG,D3_CHIEU,D4_SANG,D4_CHIEU,PRIORITY,INS_EMPL,INS_DATE,UPD_EMPL,UPD_DATE) VALUES ('${DATA.CTR_CD}','${DATA.G_CODE}','${DATA.CUST_CD}','${DATA.EMPL_NO}','${DATA.PLAN_DATE}','${DATA.D1_9H}','${DATA.D1_13H}','${DATA.D1_19H}','${DATA.D1_21H}','${DATA.D1_23H}','${DATA.D1_OTHER}','${DATA.D2_9H}','${DATA.D2_13H}','${DATA.D2_21H}','${DATA.D3_SANG}','${DATA.D3_CHIEU}','${DATA.D4_SANG}','${DATA.D4_CHIEU}','${DATA.PRIORITY}','${DATA.INS_EMPL}',GETDATE(),'${DATA.UPD_EMPL}',GETDATE())`;
  //////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.checkShortageExist = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `SELECT * FROM ZTBPLANTB WHERE CTR_CD='${DATA.CTR_CD}' AND G_CODE='${DATA.G_CODE}' AND CUST_CD='${DATA.CUST_CD}'  AND PLAN_DATE='${DATA.PLAN_DATE}' `;
  //////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.deletegia = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `DELETE FROM PROD_PRICE_TABLE WHERE CTR_CD='${DATA.CTR_CD}' AND G_CODE='${DATA.G_CODE
    }' AND CUST_CD ='${DATA.CUST_CD}' AND MOQ=${DATA.MOQ
    } AND PRICE_DATE='${moment
      .utc(DATA.PRICE_DATE)
      .format("YYYY-MM-DD")}'`;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.updategia = async (req, res, DATA) => {
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let checkkq = "OK";
  let setpdQuery = `UPDATE PROD_PRICE_TABLE SET FINAL='${DATA.FINAL
    }', PROD_PRICE=${DATA.PROD_PRICE}, BEP=${DATA.BEP}, MOQ = ${DATA.MOQ}, PRICE_DATE = '${DATA.PRICE_DATE}', INS_DATE=GETDATE(), INS_EMPL='${EMPL_NO}' WHERE CTR_CD='${DATA.CTR_CD}' AND PROD_ID = ${DATA.PROD_ID}`;
  console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.loadbanggia2 = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = ` WHERE 1=1`;
  if (DATA.ALLTIME !== true) {
    condition += ` AND PROD_PRICE_TABLE.PRICE_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE}'`;
  }
  if (DATA.G_CODE !== "") {
    condition += ` AND  M100.G_CODE='${DATA.G_CODE}'`;
  }
  if (DATA.G_NAME !== "") {
    condition += ` AND M100.G_NAME LIKE '%${DATA.G_NAME}%'`;
  }
  if (DATA.M_NAME !== "") {
    condition += ` AND M100.PROD_MAIN_MATERIAL LIKE '%${DATA.M_NAME}%'`;
  }
  if (DATA.CUST_NAME_KD !== "") {
    condition += ` AND M110.CUST_NAME_KD LIKE '${DATA.CUST_NAME_KD}'`;
  }
  let setpdQuery = ` 
  SELECT PROD_PRICE_TABLE.PROD_ID, M100.PROD_MAIN_MATERIAL, M110.CUST_NAME_KD ,PROD_PRICE_TABLE.CUST_CD,PROD_PRICE_TABLE.G_CODE,M100.G_NAME,M100.G_NAME_KD, M100.DESCR, M100.PROD_DVT, PROD_PRICE_TABLE.PRICE_DATE,PROD_PRICE_TABLE.MOQ,PROD_PRICE_TABLE.PROD_PRICE,PROD_PRICE_TABLE.BEP, PROD_PRICE_TABLE.INS_DATE,PROD_PRICE_TABLE.INS_EMPL,PROD_PRICE_TABLE.UPD_DATE,PROD_PRICE_TABLE.UPD_EMPL,PROD_PRICE_TABLE.REMARK,PROD_PRICE_TABLE.FINAL,AA.DUPLICATE
  FROM 
  PROD_PRICE_TABLE
  LEFT JOIN 
  M100 ON (M100.G_CODE = PROD_PRICE_TABLE.G_CODE AND M100.CTR_CD = PROD_PRICE_TABLE.CTR_CD)
  LEFT JOIN
  M110 ON (M110.CUST_CD = PROD_PRICE_TABLE.CUST_CD AND M110.CTR_CD = PROD_PRICE_TABLE.CTR_CD)       
  LEFT JOIN (
  SELECT G_CODE, CUST_CD, CTR_CD, PROD_PRICE, COUNT(G_CODE) AS DUPLICATE FROM PROD_PRICE_TABLE 
  GROUP BY G_CODE, CUST_CD, CTR_CD, PROD_PRICE
  ) AS AA ON (AA.CUST_CD = PROD_PRICE_TABLE.CUST_CD AND AA.G_CODE = PROD_PRICE_TABLE.G_CODE AND AA.CTR_CD = PROD_PRICE_TABLE.CTR_CD AND AA.PROD_PRICE=PROD_PRICE_TABLE.PROD_PRICE)
    ${condition}
    AND PROD_PRICE_TABLE.CTR_CD='${DATA.CTR_CD}'
    ORDER BY M100.G_CODE ASC, PROD_PRICE_TABLE.PRICE_DATE ASC
    `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.loadbanggia = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = ` WHERE 1=1`;
  if (DATA.ALLTIME !== true) {
    condition += ` AND BB.[1] BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE}'`;
  }
  if (DATA.G_CODE !== "") {
    condition += ` AND  M100.G_CODE='${DATA.G_CODE}'`;
  }
  if (DATA.G_NAME !== "") {
    condition += ` AND M100.G_NAME LIKE '%${DATA.G_NAME}%'`;
  }
  if (DATA.M_NAME !== "") {
    condition += ` AND M100.PROD_MAIN_MATERIAL LIKE '%${DATA.M_NAME}%'`;
  }
  if (DATA.CUST_NAME_KD !== "") {
    condition += ` AND M110.CUST_NAME_KD LIKE '${DATA.CUST_NAME_KD}'`;
  }
  let setpdQuery = ` SELECT 
    M110.CUST_NAME_KD, M100.G_CODE, M100.G_NAME, M100.G_NAME_KD, M100.PROD_MAIN_MATERIAL, AA.MOQ, AA.[1] AS PRICE1,AA.[2] AS PRICE2,AA.[3] AS PRICE3,AA.[4] AS PRICE4,AA.[5] AS PRICE5,AA.[6] AS PRICE6,AA.[7] AS PRICE7,AA.[8] AS PRICE8,AA.[9] AS PRICE9,AA.[10] AS PRICE10,AA.[11] AS PRICE11,AA.[12] AS PRICE12,AA.[13] AS PRICE13,AA.[14] AS PRICE14,AA.[15] AS PRICE15,AA.[16] AS PRICE16,AA.[17] AS PRICE17,AA.[18] AS PRICE18,AA.[19] AS PRICE19,AA.[20] AS PRICE20, BB.[1] AS PRICE_DATE1,BB.[2] AS PRICE_DATE2,BB.[3] AS PRICE_DATE3,BB.[4] AS PRICE_DATE4,BB.[5] AS PRICE_DATE5,BB.[6] AS PRICE_DATE6,BB.[7] AS PRICE_DATE7,BB.[8] AS PRICE_DATE8,BB.[9] AS PRICE_DATE9,BB.[10] AS PRICE_DATE10,BB.[11] AS PRICE_DATE11,BB.[12] AS PRICE_DATE12,BB.[13] AS PRICE_DATE13,BB.[14] AS PRICE_DATE14,BB.[15] AS PRICE_DATE15,BB.[16] AS PRICE_DATE16,BB.[17] AS PRICE_DATE17,BB.[18] AS PRICE_DATE18,BB.[19] AS PRICE_DATE19,BB.[20] AS PRICE_DATE20
    FROM 
    (
      SELECT * FROM 
      (SELECT CUST_CD, G_CODE, MOQ, CTR_CD, RANK() OVER (PARTITION BY CUST_CD, G_CODE, MOQ, CTR_CD ORDER BY PRICE_DATE ASC) AS RANK_NO, PROD_PRICE FROM PROD_PRICE_TABLE)
      as bangnguon
      PIVOT 
      ( SUM(PROD_PRICE)
      for RANK_NO IN ([1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],[19],[20])
      ) AS pvtb
    ) AS AA
    LEFT JOIN
    (
      SELECT * FROM 
      (SELECT CUST_CD, G_CODE, MOQ, CTR_CD, PRICE_DATE , RANK() OVER (PARTITION BY CUST_CD, G_CODE, MOQ, CTR_CD ORDER BY PRICE_DATE ASC) AS RANK_NO FROM PROD_PRICE_TABLE)
      as bangnguon
      PIVOT 
      ( MAX(PRICE_DATE)
      for RANK_NO IN ([1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],[19],[20])
      ) AS pvtb	
    )
    AS BB
    ON (AA.CUST_CD = BB.CUST_CD AND AA.MOQ = BB.MOQ AND AA.G_CODE = BB.G_CODE AND AA.CTR_CD = BB.CTR_CD)
    LEFT JOIN M110 ON (M110.CUST_CD = AA.CUST_CD AND M110.CTR_CD = AA.CTR_CD)
    LEFT JOIN M100 ON (M100.G_CODE = AA.G_CODE AND M100.CTR_CD = AA.CTR_CD)
    ${condition}
    AND AA.CTR_CD='${DATA.CTR_CD}'
    `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.dongbogiasptupo = async (req, res, DATA) => {
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let checkkq = "OK";
  let setpdQuery = `
  INSERT INTO PROD_PRICE_TABLE (CTR_CD, CUST_CD, G_CODE, PRICE_DATE, MOQ, PROD_PRICE, INS_DATE, INS_EMPL, UPD_DATE, UPD_EMPL, REMARK, FINAL, CURRENCY, RATE, BEP)
  SELECT '${DATA.CTR_CD}' AS CTR_CD, AA.CUST_CD, AA.G_CODE, AA.PRICE_DATE, AA.MOQ, AA.PROD_PRICE, GETDATE() AS INS_DATE,'${EMPL_NO}' AS INS_EMPL, GETDATE() AS UPD_DATE,'${EMPL_NO}' AS UPD_EMPL, 'AUTO' AS REMARK, 'N' AS FINAL, 'USD' AS CURRENCY, null as RATE, 0 as BEP FROM 
  (
  SELECT XX.CTR_CD, XX.G_CODE, XX.CUST_CD, XX.MOQ, XX.PRICE_DATE, MIN(XX.PROD_PRICE) AS PROD_PRICE FROM 
  (
  SELECT DISTINCT CTR_CD, G_CODE, CUST_CD, 1 AS MOQ, ROUND(PROD_PRICE,6) AS PROD_PRICE, MIN(PO_DATE) AS PRICE_DATE FROM ZTBPOTable GROUP BY CTR_CD, G_CODE, CUST_CD, PROD_PRICE
  ) AS XX GROUP BY XX.CTR_CD, XX.G_CODE, XX.CUST_CD, XX.MOQ, XX.PRICE_DATE
  ) AS AA
  LEFT JOIN 
  (
  SELECT CTR_CD, G_CODE, CUST_CD, MOQ, PROD_PRICE, PRICE_DATE FROM PROD_PRICE_TABLE
  ) AS BB
  ON (AA.CTR_CD = BB.CTR_CD AND AA.G_CODE = BB.G_CODE AND AA.CUST_CD = BB.CUST_CD AND AA.MOQ = BB.MOQ AND AA.PROD_PRICE = BB.PROD_PRICE AND AA.PRICE_DATE = BB.PRICE_DATE)
  WHERE AA.CTR_CD='${DATA.CTR_CD}' AND NOT EXISTS (SELECT CTR_CD, G_CODE, CUST_CD, MOQ, PROD_PRICE, PRICE_DATE FROM PROD_PRICE_TABLE WHERE PROD_PRICE_TABLE.CTR_CD = AA.CTR_CD AND PROD_PRICE_TABLE.G_CODE = AA.G_CODE AND PROD_PRICE_TABLE.CUST_CD = AA.CUST_CD AND PROD_PRICE_TABLE.PRICE_DATE = AA.PRICE_DATE AND PROD_PRICE_TABLE.MOQ = AA.MOQ) `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.loadM100UpGia = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = ` SELECT G_CODE, G_NAME, G_NAME_KD, PROD_MAIN_MATERIAL  FROM M100 WHERE CTR_CD='${DATA.CTR_CD}'`;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.pheduyetgia = async (req, res, DATA) => {
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let checkkq = "OK";
  let setpdQuery = `UPDATE PROD_PRICE_TABLE SET FINAL='${DATA.FINAL}', UPD_DATE=GETDATE(), UPD_EMPL='${EMPL_NO}' WHERE CTR_CD='${DATA.CTR_CD}' AND  G_CODE='${DATA.G_CODE}' AND CUST_CD ='${DATA.CUST_CD}' AND MOQ=${DATA.MOQ} AND PRICE_DATE='${moment.utc(DATA.PRICE_DATE).format("YYYY-MM-DD")}'`;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.updateGiaVLBOM2 = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
      UPDATE ZTB_BOM2 SET M_CMS_PRICE=${DATA.M_CMS_PRICE}, M_SS_PRICE=${DATA.M_SS_PRICE} WHERE CTR_CD='${DATA.CTR_CD}' AND G_CODE ='${DATA.G_CODE}' AND M_CODE='${DATA.M_CODE}'
  `;
  console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.updateCurrentUnit = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `UPDATE ZTB_QUOTATION_CALC_TB  SET KNIFE_UNIT=${DATA.KNIFE_UNIT} , FILM_UNIT=${DATA.FILM_UNIT} , INK_UNIT=${DATA.INK_UNIT} , LABOR_UNIT=${DATA.LABOR_UNIT} , DELIVERY_UNIT=${DATA.DELIVERY_UNIT} , DEPRECATION_UNIT=${DATA.DEPRECATION_UNIT} , GMANAGEMENT_UNIT=${DATA.GMANAGEMENT_UNIT}, M_LOSS_UNIT=${DATA.M_LOSS_UNIT}  WHERE CTR_CD='${DATA.CTR_CD}' AND G_CODE ='${DATA.G_CODE}'`;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.upgiasp = async (req, res, DATA) => {
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let checkkq = "OK";
  let setpdQuery = `INSERT INTO PROD_PRICE_TABLE (CTR_CD, CUST_CD, G_CODE, PRICE_DATE,  MOQ, PROD_PRICE, BEP,INS_DATE, INS_EMPL, UPD_DATE, UPD_EMPL, REMARK, FINAL, CURRENCY, RATE) 
  VALUES ('${DATA.CTR_CD}','${DATA.CUST_CD}','${DATA.G_CODE}','${DATA.PRICE_DATE}','${DATA.MOQ}','${DATA.PROD_PRICE}','${DATA.BEP}',GETDATE(),'${EMPL_NO}',GETDATE(),'${EMPL_NO}',N'${DATA.REMARK}','N','USD', 1)`;
  console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.updategiasp = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `UPDATE PROD_PRICE_TABLE SET PROD_PRICE=${DATA.PROD_PRICE},BEP=${DATA.BEP} WHERE CTR_CD='${DATA.CTR_CD}' AND CUST_CD ='${DATA.CUST_CD}' AND G_CODE ='${DATA.G_CODE}' AND PRICE_DATE='${DATA.PRICE_DATE}' AND MOQ='${DATA.MOQ}'`;
  console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  console.log(checkkq);
  res.send(checkkq);
};
exports.checkgiaExist = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `SELECT * FROM PROD_PRICE_TABLE WHERE CTR_CD='${DATA.CTR_CD}' AND CUST_CD ='${DATA.CUST_CD}' AND G_CODE ='${DATA.G_CODE}' AND PRICE_DATE='${DATA.PRICE_DATE}' AND MOQ='${DATA.MOQ}'`;
  console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.loadDefaultDM = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `SELECT * FROM ZTB_TBG_CONFIG2 WHERE CTR_CD='${DATA.CTR_CD}' `;
  ////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.getbomgia = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `  SELECT ZTB_BOM2.BOM_ID,ZTB_BOM2.G_CODE,ZTB_BOM2.RIV_NO,ZTB_BOM2.G_SEQ,ZTB_BOM2.CATEGORY,ZTB_BOM2.M_CODE, M140.M_CODE AS M_CODE_SX,ZTB_BOM2.CUST_CD,ZTB_BOM2.IMPORT_CAT,ZTB_BOM2.M_CMS_PRICE,ZTB_BOM2.M_SS_PRICE,ZTB_BOM2.M_SLITTING_PRICE,ZTB_BOM2.USAGE,ZTB_BOM2.MAT_MASTER_WIDTH,ZTB_BOM2.MAT_ROLL_LENGTH,ZTB_BOM2.MAT_THICKNESS,ZTB_BOM2.M_QTY,ZTB_BOM2.REMARK,ZTB_BOM2.PROCESS_ORDER,ZTB_BOM2.INS_EMPL,ZTB_BOM2.UPD_EMPL,ZTB_BOM2.INS_DATE,ZTB_BOM2.UPD_DATE,ZTB_BOM2.MAIN_M, M090.M_NAME, M090.WIDTH_CD AS MAT_CUTWIDTH FROM ZTB_BOM2 LEFT JOIN M090 ON M090.M_CODE = ZTB_BOM2.M_CODE AND M090.CTR_CD = ZTB_BOM2.CTR_CD LEFT JOIN M140 ON ZTB_BOM2.G_CODE = M140.G_CODE AND ZTB_BOM2.M_CODE = M140.M_CODE AND ZTB_BOM2.CTR_CD = M140.CTR_CD WHERE ZTB_BOM2.RIV_NO='A' AND ZTB_BOM2.G_CODE='${DATA.G_CODE}' AND ZTB_BOM2.CTR_CD='${DATA.CTR_CD}'`;
  ////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.loadlistcodequotation = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
  SELECT M110.CUST_CD, M110.CUST_NAME_KD, ZTB_QUOTATION_CALC_TB.G_CODE, M100.G_NAME, M100.G_NAME_KD, ZTB_QUOTATION_CALC_TB.WIDTH_OFFSET, ZTB_QUOTATION_CALC_TB.LENGTH_OFFSET, ZTB_QUOTATION_CALC_TB.KNIFE_UNIT, ZTB_QUOTATION_CALC_TB.FILM_UNIT, ZTB_QUOTATION_CALC_TB.INK_UNIT, ZTB_QUOTATION_CALC_TB.LABOR_UNIT, ZTB_QUOTATION_CALC_TB.DELIVERY_UNIT, ZTB_QUOTATION_CALC_TB.DEPRECATION_UNIT, ZTB_QUOTATION_CALC_TB.GMANAGEMENT_UNIT, ZTB_QUOTATION_CALC_TB.M_LOSS_UNIT, ZTB_QUOTATION_CALC_TB.G_WIDTH, ZTB_QUOTATION_CALC_TB.G_LENGTH, ZTB_QUOTATION_CALC_TB.G_C, ZTB_QUOTATION_CALC_TB.G_C_R, ZTB_QUOTATION_CALC_TB.G_LG, ZTB_QUOTATION_CALC_TB.G_CG, ZTB_QUOTATION_CALC_TB.G_SG_L, ZTB_QUOTATION_CALC_TB.G_SG_R, ZTB_QUOTATION_CALC_TB.PROD_PRINT_TIMES, ZTB_QUOTATION_CALC_TB.KNIFE_COST, ZTB_QUOTATION_CALC_TB.FILM_COST, ZTB_QUOTATION_CALC_TB.INK_COST, ZTB_QUOTATION_CALC_TB.LABOR_COST, ZTB_QUOTATION_CALC_TB.DELIVERY_COST, ZTB_QUOTATION_CALC_TB.DEPRECATION_COST, ZTB_QUOTATION_CALC_TB.GMANAGEMENT_COST, ZTB_QUOTATION_CALC_TB.MATERIAL_COST, ZTB_QUOTATION_CALC_TB.TOTAL_COST, ZTB_QUOTATION_CALC_TB.SALE_PRICE, ZTB_QUOTATION_CALC_TB.PROFIT
FROM ZTB_QUOTATION_CALC_TB 
LEFT JOIN M100 ON (M100.G_CODE = ZTB_QUOTATION_CALC_TB.G_CODE AND M100.CTR_CD = ZTB_QUOTATION_CALC_TB.CTR_CD) 
LEFT JOIN M110 ON (M110.CUST_CD = M100.CUST_CD AND M110.CTR_CD = M100.CTR_CD)
WHERE ZTB_QUOTATION_CALC_TB.CTR_CD = '${DATA.CTR_CD}'
  `;
  ///console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.loadbanggiamoinhat = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = ` WHERE 1=1`;
  if (DATA.ALLTIME !== true) {
    condition += ` AND PROD_PRICE_TABLE.PRICE_DATE BETWEEN '${DATA.FROM_DATE}' AND '${DATA.TO_DATE}'`;
  }
  if (DATA.G_CODE !== "") {
    condition += ` AND  M100.G_CODE='${DATA.G_CODE}'`;
  }
  if (DATA.G_NAME !== "") {
    condition += ` AND M100.G_NAME LIKE '%${DATA.G_NAME}%'`;
  }
  if (DATA.M_NAME !== "") {
    condition += ` AND M100.PROD_MAIN_MATERIAL LIKE '%${DATA.M_NAME}%'`;
  }
  if (DATA.CUST_NAME_KD !== "") {
    condition += ` AND M110.CUST_NAME_KD LIKE '%${DATA.CUST_NAME_KD}%'`;
  }
  if (DATA.CUST_CD !== "" && DATA.CUST_CD !== undefined) {
    condition += ` AND M110.CUST_CD = '${DATA.CUST_CD}'`;
  }
  let setpdQuery = ` 
  SELECT BB.DUPLICATE, M110.CUST_NAME_KD ,PROD_PRICE_TABLE.CUST_CD,PROD_PRICE_TABLE.PROD_ID,PROD_PRICE_TABLE.G_CODE,M100.G_NAME, M100.G_NAME_KD, M100.DESCR, M100.PROD_DVT, M100.PROD_MAIN_MATERIAL, PROD_PRICE_TABLE.PRICE_DATE,PROD_PRICE_TABLE.MOQ,PROD_PRICE_TABLE.PROD_PRICE,PROD_PRICE_TABLE.BEP, PROD_PRICE_TABLE.INS_DATE,PROD_PRICE_TABLE.INS_EMPL,PROD_PRICE_TABLE.UPD_DATE,PROD_PRICE_TABLE.UPD_EMPL,PROD_PRICE_TABLE.REMARK,PROD_PRICE_TABLE.FINAL, M100.G_WIDTH, M100.G_LENGTH, M100.G_NAME_KT,M100.EQ1, M100.EQ2, M100.EQ3, M100.EQ4
  FROM 
  (SELECT CUST_CD, G_CODE, MOQ, CTR_CD, MAX(PRICE_DATE) AS LAST_PRICE_DATE FROM PROD_PRICE_TABLE GROUP BY CUST_CD, G_CODE, MOQ, CTR_CD) AS AA
  LEFT JOIN 
  PROD_PRICE_TABLE
  ON (AA.CUST_CD = PROD_PRICE_TABLE.CUST_CD AND AA.G_CODE = PROD_PRICE_TABLE.G_CODE AND AA.LAST_PRICE_DATE = PROD_PRICE_TABLE.PRICE_DATE AND AA.MOQ = PROD_PRICE_TABLE.MOQ AND AA.CTR_CD = PROD_PRICE_TABLE.CTR_CD) 
  LEFT JOIN 
  M100 ON (M100.G_CODE = PROD_PRICE_TABLE.G_CODE AND M100.CTR_CD = PROD_PRICE_TABLE.CTR_CD)
  LEFT JOIN
  M110 ON (M110.CUST_CD = PROD_PRICE_TABLE.CUST_CD AND M110.CTR_CD = PROD_PRICE_TABLE.CTR_CD)
  LEFT JOIN (
  SELECT G_CODE, CUST_CD, PROD_PRICE, CTR_CD, COUNT(G_CODE) AS DUPLICATE FROM PROD_PRICE_TABLE 
  GROUP BY G_CODE, CUST_CD, PROD_PRICE, CTR_CD
  ) AS BB ON (BB.CUST_CD = PROD_PRICE_TABLE.CUST_CD AND BB.G_CODE = PROD_PRICE_TABLE.G_CODE AND BB.PROD_PRICE=PROD_PRICE_TABLE.PROD_PRICE AND BB.CTR_CD = PROD_PRICE_TABLE.CTR_CD)
    ${condition}
    AND PROD_PRICE_TABLE.CTR_CD='${DATA.CTR_CD}'
    ORDER BY M100.G_CODE ASC, PROD_PRICE_TABLE.MOQ DESC, PROD_PRICE_TABLE.PRICE_DATE ASC
    `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.traPOFullKD2 = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = " WHERE 1=1 ";
  if (DATA.codeSearch !== "") {
    condition += ` AND TONKHOFULL.G_NAME LIKE '%${DATA.codeSearch}%'`;
  }
  if (DATA.allcode !== false) {
    condition += ` AND PO_TABLE_1.PO_BALANCE >0 `;
  }
  let setpdQuery = `
WITH PO_BALANCE_TABLE AS (
SELECT
AA.CTR_CD,
AA.G_CODE,
ZTBPOTable.PO_QTY,
AA.TotalDelivered as TOTAL_DELIVERED,
(ZTBPOTable.PO_QTY - AA.TotalDelivered) As PO_BALANCE
FROM
(
SELECT
ZTBPOTable.CTR_CD,
 ZTBPOTable.EMPL_NO,
 ZTBPOTable.CUST_CD,
 ZTBPOTable.G_CODE,
 ZTBPOTable.PO_NO,
 isnull(SUM(ZTBDelivery.DELIVERY_QTY), 0) AS TotalDelivered
FROM
 ZTBPOTable
 LEFT JOIN ZTBDelivery ON (
   ZTBDelivery.CTR_CD = ZTBPOTable.CTR_CD
   AND ZTBDelivery.CUST_CD = ZTBPOTable.CUST_CD
   AND ZTBDelivery.G_CODE = ZTBPOTable.G_CODE
   AND ZTBDelivery.PO_NO = ZTBPOTable.PO_NO
 )
GROUP BY
 ZTBPOTable.CTR_CD,
 ZTBPOTable.EMPL_NO,
 ZTBPOTable.G_CODE,
 ZTBPOTable.CUST_CD,
 ZTBPOTable.PO_NO
) AS AA
LEFT JOIN ZTBPOTable ON (
AA.CTR_CD = ZTBPOTable.CTR_CD
AND AA.CUST_CD = ZTBPOTable.CUST_CD
AND AA.G_CODE = ZTBPOTable.G_CODE
AND AA.PO_NO = ZTBPOTable.PO_NO
)
),
PO_TABLE_1 AS (
SELECT
CTR_CD,
G_CODE,
SUM(PO_QTY) AS PO_QTY,
SUM(TOTAL_DELIVERED) AS TOTAL_DELIVERED,
SUM(PO_BALANCE) AS PO_BALANCE
FROM
PO_BALANCE_TABLE
GROUP BY
CTR_CD,
G_CODE
),
THANHPHAM AS (
SELECT AA.CTR_CD, AA.G_CODE, M100.G_NAME, M100.G_NAME_KD, M100.PROD_TYPE, AA.STOCK, AA.BLOCK_QTY, (AA.STOCK + AA.BLOCK_QTY) AS TOTAL_STOCK
FROM
(
SELECT CTR_CD,G_CODE,
 SUM(CASE WHEN STATUS='N' THEN I660.IN_QTY ELSE 0 END) AS STOCK,
 SUM(CASE WHEN STATUS='B' THEN I660.IN_QTY ELSE 0 END) AS BLOCK_QTY
FROM I660
WHERE USE_YN ='Y'  AND (I660.REMARK is null OR  I660.REMARK<> 'Pending Huy ton')
GROUP BY CTR_CD,G_CODE
) AS AA
LEFT JOIN M100 ON (M100.CTR_CD = AA.CTR_CD AND M100.G_CODE = AA.G_CODE)
),
TONKIEM AS (
SELECT
ZTB_WAIT_INSPECT.CTR_CD,
ZTB_WAIT_INSPECT.G_CODE,
M100.G_NAME,
M100.G_NAME_KD,
SUM(INSPECT_BALANCE_QTY) AS INSPECT_BALANCE_QTY,
SUM(WAIT_CS_QTY) AS WAIT_CS_QTY,
SUM(WAIT_SORTING_RMA) AS WAIT_SORTING_RMA,
SUM(INSPECT_BALANCE_QTY + WAIT_CS_QTY + WAIT_SORTING_RMA) AS TOTAL_WAIT
FROM
ZTB_WAIT_INSPECT
JOIN M100 ON (M100.CTR_CD = ZTB_WAIT_INSPECT.CTR_CD AND M100.G_CODE = ZTB_WAIT_INSPECT.G_CODE)
WHERE
UPDATE_DATE = CONVERT(date, GETDATE())
AND CALAMVIEC = 'DEM'
GROUP BY
ZTB_WAIT_INSPECT.CTR_CD,
ZTB_WAIT_INSPECT.G_CODE,
M100.G_NAME,
M100.G_NAME_KD
),
BTP AS (
SELECT
ZTB_HALF_GOODS.CTR_CD,
ZTB_HALF_GOODS.G_CODE,
M100.G_NAME,
SUM(BTP_QTY_EA) AS BTP_QTY_EA
FROM
ZTB_HALF_GOODS
JOIN M100 ON (M100.CTR_CD = ZTB_HALF_GOODS.CTR_CD AND M100.G_CODE = ZTB_HALF_GOODS.G_CODE)
WHERE
UPDATE_DATE = CONVERT(date, GETDATE())
GROUP BY
ZTB_HALF_GOODS.CTR_CD,
ZTB_HALF_GOODS.G_CODE,
M100.G_NAME
),
TONKHOFULL AS (
SELECT
M100.CTR_CD,
M100.G_CODE,
M100.G_NAME,
M100.G_NAME_KD,
isnull(TONKIEM.INSPECT_BALANCE_QTY, 0) AS CHO_KIEM,
isnull(TONKIEM.WAIT_CS_QTY, 0) AS CHO_CS_CHECK,
isnull(TONKIEM.WAIT_SORTING_RMA, 0) CHO_KIEM_RMA,
isnull(TONKIEM.TOTAL_WAIT, 0) AS TONG_TON_KIEM,
isnull(BTP.BTP_QTY_EA, 0) AS BTP,
isnull(THANHPHAM.STOCK, 0) AS TON_TP,
isnull(THANHPHAM.BLOCK_QTY, 0) AS BLOCK_QTY,
(isnull(TONKIEM.TOTAL_WAIT, 0) + isnull(BTP.BTP_QTY_EA, 0) + isnull(THANHPHAM.STOCK, 0) - isnull(THANHPHAM.BLOCK_QTY, 0)) AS GRAND_TOTAL_STOCK
FROM
M100
LEFT JOIN THANHPHAM ON (THANHPHAM.CTR_CD = M100.CTR_CD AND THANHPHAM.G_CODE = M100.G_CODE)
LEFT JOIN TONKIEM ON (TONKIEM.CTR_CD = M100.CTR_CD AND TONKIEM.G_CODE = M100.G_CODE)
LEFT JOIN BTP ON (BTP.CTR_CD = THANHPHAM.CTR_CD AND BTP.G_CODE = THANHPHAM.G_CODE)
)
SELECT
TONKHOFULL.G_NAME_KD,
SUM(PO_TABLE_1.PO_QTY) AS PO_QTY,
SUM(TOTAL_DELIVERED) AS TOTAL_DELIVERED,
SUM(PO_TABLE_1.PO_BALANCE) AS PO_BALANCE,
SUM(TONKHOFULL.CHO_KIEM) AS CHO_KIEM,
SUM(TONKHOFULL.CHO_CS_CHECK) AS CHO_CS_CHECK,
SUM(TONKHOFULL.CHO_KIEM_RMA) AS CHO_KIEM_RMA,
SUM(TONKHOFULL.TONG_TON_KIEM) AS TONG_TON_KIEM,
SUM(TONKHOFULL.BTP) AS BTP,
SUM(TONKHOFULL.TON_TP) AS TON_TP, 
SUM(TONKHOFULL.BLOCK_QTY) AS BLOCK_QTY,
SUM(TONKHOFULL.GRAND_TOTAL_STOCK) AS GRAND_TOTAL_STOCK,
SUM((TONKHOFULL.GRAND_TOTAL_STOCK - PO_TABLE_1.PO_BALANCE)) AS THUA_THIEU
FROM
PO_TABLE_1
LEFT JOIN TONKHOFULL ON (TONKHOFULL.CTR_CD = PO_TABLE_1.CTR_CD AND TONKHOFULL.G_CODE = PO_TABLE_1.G_CODE)
${condition} AND TONKHOFULL.CTR_CD='${DATA.CTR_CD}'
GROUP BY TONKHOFULL.G_NAME_KD`;
  console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  ////console.log(checkkq);
  res.send(checkkq);
};
exports.traPOFullKD_NEW = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = " WHERE 1=1 ";
  if (DATA.codeSearch !== "") {
    condition += ` AND TONKHOFULL.G_NAME_KD LIKE '%${DATA.codeSearch}%'`;
  }
  if (DATA.allcode !== false) {
    condition += ` AND PO_TABLE_1.PO_BALANCE >0 `;
  }
  let setpdQuery = `
  -- CTE để tính toán tổng số lượng giao hàng và số lượng PO còn lại
WITH POTB AS (
SELECT CTR_CD, G_CODE, SUM(PO_QTY) AS PO_QTY FROM ZTBPOTable GROUP BY CTR_CD, G_CODE
),
DLTB AS (
SELECT CTR_CD, G_CODE, SUM(DELIVERY_QTY) AS DELIVERY_QTY FROM ZTBDelivery GROUP BY CTR_CD, G_CODE
),
PO_TABLE_1 AS (
SELECT 
POTB.G_CODE, 
POTB.PO_QTY, 
isnull(DLTB.DELIVERY_QTY,0) AS TOTAL_DELIVERED, 
(POTB.PO_QTY - isnull(DLTB.DELIVERY_QTY,0)) AS PO_BALANCE 
FROM POTB LEFT JOIN DLTB ON POTB.CTR_CD = DLTB.CTR_CD AND POTB.G_CODE = DLTB.G_CODE    
),
CNK AS 
(
SELECT CTR_CD,G_CODE, SUM(OUTPUT_QTY_EA) AS WAIT_INPUT_WH FROM ZTBINSPECTOUTPUTTB WHERE STATUS='PENDING' AND OUTPUT_QTY_EA>0 AND OUTPUT_DATETIME > '2025-01-01' AND CTR_CD = '002' GROUP BY CTR_CD, G_CODE
),
-- CTE để tổng hợp dữ liệu từ các bảng kho
CTE_TONKHOFULL AS (
SELECT 
M100.G_CODE, 
M100.G_NAME_KD, 
ISNULL(TONKIEM_NEW.INSPECT_BALANCE_QTY, 0) AS CHO_KIEM, 
ISNULL(TONKIEM.WAIT_CS_QTY, 0) AS CHO_CS_CHECK, 
ISNULL(TONKIEM.WAIT_SORTING_RMA, 0) AS CHO_KIEM_RMA, 
(ISNULL(TONKIEM_NEW.INSPECT_BALANCE_QTY, 0) + ISNULL(TONKIEM.WAIT_CS_QTY, 0) + ISNULL(TONKIEM.WAIT_SORTING_RMA, 0)) AS TONG_TON_KIEM, 
ISNULL(M100.BTP_QTY, 0) AS BTP, 
ISNULL(CNK.WAIT_INPUT_WH,0) AS WAIT_INPUT_WH,
ISNULL(THANHPHAM.TONKHO, 0) AS TON_TP, 
ISNULL(tbl_Block_table2.Block_Qty, 0) AS BLOCK_QTY, 
(ISNULL(TONKIEM_NEW.INSPECT_BALANCE_QTY, 0) + ISNULL(TONKIEM.WAIT_CS_QTY, 0) + ISNULL(TONKIEM.WAIT_SORTING_RMA, 0) + ISNULL(M100.BTP_QTY, 0) + ISNULL(CNK.WAIT_INPUT_WH,0) +ISNULL(THANHPHAM.TONKHO, 0) - ISNULL(tbl_Block_table2.Block_Qty, 0)) AS GRAND_TOTAL_STOCK
FROM 
M100
LEFT JOIN (
    SELECT 
        ZTB_WAIT_INSPECT.G_CODE, 
        SUM(INSPECT_BALANCE_QTY) AS INSPECT_BALANCE_QTY, 
        SUM(WAIT_CS_QTY) AS WAIT_CS_QTY, 
        SUM(WAIT_SORTING_RMA) AS WAIT_SORTING_RMA, 
        SUM(INSPECT_BALANCE_QTY + WAIT_CS_QTY + WAIT_SORTING_RMA) AS TOTAL_WAIT
    FROM 
        ZTB_WAIT_INSPECT
    WHERE 
        UPDATE_DATE = CONVERT(date, GETDATE()) 
        AND CALAMVIEC = 'DEM'
    GROUP BY 
        ZTB_WAIT_INSPECT.G_CODE
) AS TONKIEM ON M100.G_CODE = TONKIEM.G_CODE
LEFT JOIN (SELECT CTR_CD, G_CODE, SUM(INPUT_QTY_EA) AS INSPECT_BALANCE_QTY FROM ZTBINSPECTINPUTTB WHERE INSPECT_YN='Y' AND P400_YN='Y' GROUP BY CTR_CD, G_CODE) AS TONKIEM_NEW ON TONKIEM_NEW.G_CODE = M100.G_CODE
LEFT JOIN (
    SELECT 
        Product_MaVach, 
        (ISNULL([IN], 0) - ISNULL([OUT], 0)) AS TONKHO
    FROM (
        SELECT 
            Product_Mavach, 
            IO_Type, 
            SUM(IO_Qty) AS IO_Qty
        FROM 
            tbl_InputOutput
        GROUP BY 
            Product_Mavach, IO_Type
    ) AS SourceTable
    PIVOT (
        SUM(IO_Qty) FOR IO_Type IN ([IN], [OUT])
    ) AS PivotTable
) AS THANHPHAM ON M100.G_CODE = THANHPHAM.Product_MaVach
LEFT JOIN (
    SELECT 
        Product_MaVach, 
        SUM(Block_Qty) AS Block_Qty
    FROM 
        tbl_Block2
    GROUP BY 
        Product_MaVach
) AS tbl_Block_table2 ON M100.G_CODE = tbl_Block_table2.Product_MaVach
LEFT JOIN (
    SELECT 
        ZTB_HALF_GOODS.G_CODE, 
        SUM(BTP_QTY_EA) AS BTP_QTY_EA
    FROM 
        ZTB_HALF_GOODS
    WHERE 
        UPDATE_DATE = CONVERT(date, GETDATE())
    GROUP BY 
        ZTB_HALF_GOODS.G_CODE
) AS BTP ON M100.G_CODE = BTP.G_CODE
LEFT JOIN CNK ON (CNK.G_CODE = M100.G_CODE)
)
-- Truy vấn chính
SELECT 
TONKHOFULL.G_NAME_KD, 
SUM(PO_TABLE_1.PO_QTY) AS PO_QTY, 
SUM(PO_TABLE_1.TOTAL_DELIVERED) AS TOTAL_DELIVERED, 
SUM(PO_TABLE_1.PO_BALANCE) AS PO_BALANCE, 
SUM(TONKHOFULL.CHO_KIEM) AS CHO_KIEM, 
SUM(TONKHOFULL.CHO_CS_CHECK) AS CHO_CS_CHECK, 
SUM(TONKHOFULL.CHO_KIEM_RMA) AS CHO_KIEM_RMA, 
SUM(TONKHOFULL.TONG_TON_KIEM) AS TONG_TON_KIEM, 
SUM(TONKHOFULL.BTP) AS BTP, 
SUM(TONKHOFULL.WAIT_INPUT_WH) AS WAIT_INPUT_WH, 
SUM(TONKHOFULL.TON_TP) AS TON_TP, 
SUM(TONKHOFULL.BLOCK_QTY) AS BLOCK_QTY, 
SUM(TONKHOFULL.GRAND_TOTAL_STOCK) AS GRAND_TOTAL_STOCK, 
SUM(TONKHOFULL.GRAND_TOTAL_STOCK - PO_TABLE_1.PO_BALANCE) AS THUA_THIEU 
FROM 
PO_TABLE_1
LEFT JOIN CTE_TONKHOFULL AS TONKHOFULL ON PO_TABLE_1.G_CODE = TONKHOFULL.G_CODE
${condition}
GROUP BY 
TONKHOFULL.G_NAME_KD
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  ////console.log(checkkq);
  res.send(checkkq);
};
exports.traPOFullCMS2 = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = " WHERE 1=1 ";
  if (DATA.codeSearch !== "") {
    condition += ` AND TONKHOFULL.G_NAME LIKE ''%${DATA.codeSearch}%''`;
  }
  if (DATA.allcode !== false) {
    condition += ` AND PO_TABLE_1.PO_BALANCE >0 `;
  }
  let startdate = moment().add(-7, "month").format("YYYY-MM-01");
  let enddate = moment().add(0, "day").format("YYYY-MM-DD");
  let setpdQuery = `
          DECLARE @StartDate DATE = '${startdate}'; -- Thay đổi start date tại đây
DECLARE @EndDate DATE = '${enddate}'; -- Thay đổi end date tại đây
DECLARE @CurrentDate DATE = @StartDate;
DECLARE @str1 VARCHAR(MAX) = '';
WHILE @CurrentDate <= @EndDate
BEGIN
    SET  @str1 =  @str1 + 'ISNULL([' + FORMAT(@CurrentDate, 'yyyy_MM') + '],0) + ';
    SET @CurrentDate = DATEADD(MONTH, 1, @CurrentDate);
END
-- Xóa dấu phẩy cuối cùng
SET  @str1 = LEFT( @str1, LEN( @str1) - 1);
SET @CurrentDate = @StartDate;
DECLARE @ttmonth int;
SET @ttmonth= 0;
WHILE @CurrentDate <= @EndDate
BEGIN
SET @CurrentDate = DATEADD(MONTH, 1, @CurrentDate);
SET  @ttmonth += 1;   
END
SET @CurrentDate = @StartDate;
DECLARE @str2 VARCHAR(MAX) = '';
DECLARE @stt int, @temptt int;
SET @stt= 0;
SET @temptt = 0;
WHILE @CurrentDate <= @EndDate
BEGIN
  SET @temptt = @ttmonth - @stt;
    SET  @str2 =  @str2 + 'ISNULL([' + FORMAT(@CurrentDate, 'yyyy_MM') + '],0) AS M_'+CAST(@temptt as varchar)+', ';
    SET @CurrentDate = DATEADD(MONTH, 1, @CurrentDate);
  SET @stt =  @stt + 1;
END
-- Xóa dấu phẩy cuối cùng
SET  @str2 = LEFT( @str2, LEN( @str2) - 1);
SET @CurrentDate = @StartDate;
DECLARE @str3 VARCHAR(MAX) = '';
WHILE @CurrentDate <= @EndDate
BEGIN
    SET  @str3 =  @str3 + '[' + FORMAT(@CurrentDate, 'yyyy_MM')+'], ';
    SET @CurrentDate = DATEADD(MONTH, 1, @CurrentDate);
END
-- Xóa dấu phẩy cuối cùng
SET  @str3 = LEFT( @str3, LEN( @str3) - 1);
SET @CurrentDate = @StartDate;
DECLARE @str4 VARCHAR(MAX) = '';
DECLARE @stt2 int, @temptt2 int;
SET @stt2= 0;
SET @temptt2 = 0;
WHILE @CurrentDate <= @EndDate
BEGIN
  SET @temptt2 = @ttmonth - @stt2;
    SET  @str4 =  @str4 + 'ISNULL([M_' + CAST(@temptt2 as varchar) + '],0) AS M_'+CAST(@temptt2 as varchar)+', ';
    SET @CurrentDate = DATEADD(MONTH, 1, @CurrentDate);
  SET @stt2 =  @stt2 + 1;
END
print(@str2)
declare @query varchar(max) 
select 
@query = '
SELECT 
          PO_TABLE_1.G_CODE, 
          TONKHOFULL.G_NAME, 
          TONKHOFULL.G_NAME_KD, 
      '+@str4+'
          PO_TABLE_1.PO_QTY, 
          TOTAL_DELIVERED, 
          PO_TABLE_1.PO_BALANCE, 
          TONKHOFULL.CHO_KIEM, 
          TONKHOFULL.CHO_CS_CHECK, 
          TONKHOFULL.CHO_KIEM_RMA, 
          TONKHOFULL.TONG_TON_KIEM, 
          TONKHOFULL.BTP, 
          TONKHOFULL.TON_TP, 
          TONKHOFULL.BLOCK_QTY, 
          TONKHOFULL.GRAND_TOTAL_STOCK, 
          (
            TONKHOFULL.GRAND_TOTAL_STOCK - PO_TABLE_1.PO_BALANCE
          ) AS THUA_THIEU, 
          isnull(YCSXBLTB.YCSX_BALANCE, 0) AS YCSX_BALANCE, 
          isnull(YCSXBLTB.YCSX_QTY, 0) AS YCSX_QTY, 
          isnull(YCSXBLTB.KETQUASX, 0) AS KETQUASX, 
          isnull(YCSXBLTB.NHAPKHO, 0) AS NHAPKHO 
        FROM 
          (
            SELECT 
              CTR_CD,
              G_CODE, 
              SUM(PO_QTY) AS PO_QTY, 
              SUM(TOTAL_DELIVERED) AS TOTAL_DELIVERED, 
              SUM(PO_BALANCE) AS PO_BALANCE 
            FROM 
              (
                SELECT 
                  AA.CTR_CD,
                  AA.G_CODE, 
                  ZTBPOTable.PO_QTY, 
                  AA.TotalDelivered as TOTAL_DELIVERED, 
                  (
                    ZTBPOTable.PO_QTY - AA.TotalDelivered
                  ) As PO_BALANCE 
                FROM 
                  (
                    SELECT 
                      ZTBPOTable.CTR_CD,
                      ZTBPOTable.EMPL_NO, 
                      ZTBPOTable.CUST_CD, 
                      ZTBPOTable.G_CODE, 
                      ZTBPOTable.PO_NO, 
                      isnull(
                        SUM(ZTBDelivery.DELIVERY_QTY), 
                        0
                      ) AS TotalDelivered 
                    FROM 
                      ZTBPOTable 
                      LEFT JOIN ZTBDelivery ON (
                        ZTBDelivery.CTR_CD = ZTBPOTable.CTR_CD 
                        AND ZTBDelivery.CUST_CD = ZTBPOTable.CUST_CD 
                        AND ZTBDelivery.G_CODE = ZTBPOTable.G_CODE 
                        AND ZTBDelivery.PO_NO = ZTBPOTable.PO_NO
                      ) 
                    GROUP BY 
                      ZTBPOTable.CTR_CD, 
                      ZTBPOTable.EMPL_NO, 
                      ZTBPOTable.G_CODE, 
                      ZTBPOTable.CUST_CD, 
                      ZTBPOTable.PO_NO
                  ) AS AA 
                  LEFT JOIN ZTBPOTable ON (
                    AA.CTR_CD = ZTBPOTable.CTR_CD
                    AND AA.CUST_CD = ZTBPOTable.CUST_CD 
                    AND AA.G_CODE = ZTBPOTable.G_CODE 
                    AND AA.PO_NO = ZTBPOTable.PO_NO
                  )
              ) AS PO_BALANCE_TABLE 
            GROUP BY 
              CTR_CD,
              G_CODE
          ) AS PO_TABLE_1 
          LEFT JOIN (
            SELECT 
              M100.CTR_CD,
              M100.G_CODE, 
              M100.G_NAME, 
              M100.G_NAME_KD, 
              isnull(TONKIEM.INSPECT_BALANCE_QTY, 0) AS CHO_KIEM, 
              isnull(TONKIEM.WAIT_CS_QTY, 0) AS CHO_CS_CHECK, 
              isnull(TONKIEM.WAIT_SORTING_RMA, 0) CHO_KIEM_RMA, 
              isnull(TONKIEM.TOTAL_WAIT, 0) AS TONG_TON_KIEM, 
              isnull(BTP.BTP_QTY_EA, 0) AS BTP, 
              isnull(THANHPHAM.STOCK, 0) AS TON_TP, 
              isnull(THANHPHAM.BLOCK_QTY, 0) AS BLOCK_QTY, 
              (
                isnull(TONKIEM.TOTAL_WAIT, 0) + isnull(BTP.BTP_QTY_EA, 0)+ isnull(THANHPHAM.STOCK, 0) - isnull(THANHPHAM.BLOCK_QTY, 0)
              ) AS GRAND_TOTAL_STOCK 
            FROM 
              M100 
              LEFT JOIN (
            SELECT  AA.CTR_CD, AA.G_CODE, M100.G_NAME, M100.G_NAME_KD,M100.PROD_TYPE,  AA.STOCK, AA.BLOCK_QTY, (AA.STOCK+ AA.BLOCK_QTY) AS TOTAL_STOCK FROM 
            (
            SELECT CTR_CD, G_CODE, SUM(CASE WHEN STATUS=''N'' THEN I660.IN_QTY ELSE 0 END) AS STOCK,SUM(CASE WHEN STATUS=''B'' THEN I660.IN_QTY ELSE 0 END) AS BLOCK_QTY FROM I660 WHERE USE_YN =''Y''  AND (I660.REMARK is null OR  I660.REMARK<> ''Pending Huy ton'')GROUP BY CTR_CD, G_CODE
            ) AS AA
            LEFT JOIN M100 ON (M100.CTR_CD = AA.CTR_CD AND M100.G_CODE = AA.G_CODE)        
              ) AS THANHPHAM ON (
                THANHPHAM.CTR_CD = M100.CTR_CD
                AND THANHPHAM.G_CODE = M100.G_CODE
              ) 
              LEFT JOIN (
                SELECT 
                  ZTB_WAIT_INSPECT.CTR_CD,
                  ZTB_WAIT_INSPECT.G_CODE, 
                  M100.G_NAME, 
                  M100.G_NAME_KD, 
                  SUM(INSPECT_BALANCE_QTY) AS INSPECT_BALANCE_QTY, 
                  SUM(WAIT_CS_QTY) AS WAIT_CS_QTY, 
                  SUM(WAIT_SORTING_RMA) AS WAIT_SORTING_RMA, 
                  SUM(
                    INSPECT_BALANCE_QTY + WAIT_CS_QTY + WAIT_SORTING_RMA
                  ) AS TOTAL_WAIT 
                FROM 
                  ZTB_WAIT_INSPECT 
                  JOIN M100 ON (
                    M100.CTR_CD = ZTB_WAIT_INSPECT.CTR_CD
                    AND M100.G_CODE = ZTB_WAIT_INSPECT.G_CODE
                  ) 
                WHERE 
                  UPDATE_DATE = CONVERT(
                    date, 
                    GETDATE()
                  ) 
                  AND CALAMVIEC = ''DEM'' 
                GROUP BY 
                  ZTB_WAIT_INSPECT.CTR_CD,
                  ZTB_WAIT_INSPECT.G_CODE, 
                  M100.G_NAME, 
                  M100.G_NAME_KD
              ) AS TONKIEM ON (
                M100.CTR_CD = TONKIEM.CTR_CD
                AND M100.G_CODE = TONKIEM.G_CODE
              )             
              LEFT JOIN (
                SELECT 
                  ZTB_HALF_GOODS.CTR_CD,
                  ZTB_HALF_GOODS.G_CODE, 
                  M100.G_NAME, 
                  SUM(BTP_QTY_EA) AS BTP_QTY_EA 
                FROM 
                  ZTB_HALF_GOODS 
                  JOIN M100 ON (
                    M100.CTR_CD = ZTB_HALF_GOODS.CTR_CD
                    AND M100.G_CODE = ZTB_HALF_GOODS.G_CODE
                  ) 
                WHERE 
                  UPDATE_DATE = CONVERT(
                    date, 
                    GETDATE()
                  ) 
                GROUP BY 
                  ZTB_HALF_GOODS.CTR_CD,
                  ZTB_HALF_GOODS.G_CODE, 
                  M100.G_NAME
              ) AS BTP ON (
                BTP.CTR_CD = THANHPHAM.CTR_CD
                AND BTP.G_CODE = THANHPHAM.G_CODE
              )
          ) AS TONKHOFULL ON (
            TONKHOFULL.CTR_CD = PO_TABLE_1.CTR_CD
            AND TONKHOFULL.G_CODE = PO_TABLE_1.G_CODE
          ) 
          LEFT JOIN (
            SELECT 
              P400.CTR_CD,
              P400.G_CODE, 
              SUM(P400.PROD_REQUEST_QTY) AS YCSX_QTY, 
              SUM(
                isnull(BB.KETQUASX, 0)
              ) AS KETQUASX, 
              (
                SUM(P400.PROD_REQUEST_QTY) - SUM(
                  isnull(BB.KETQUASX, 0)
                )
              ) AS YCSX_BALANCE, 
              SUM(
                isnull(INS_OUTPUT_TB.INS_OUTPUT, 0)
              ) AS NHAPKHO 
            FROM 
              P400 
              LEFT JOIN (
                SELECT 
                  CTR_CD,
                  PROD_REQUEST_NO, 
                  SUM(OUTPUT_QTY_EA) AS INS_OUTPUT 
                FROM 
                  ZTBINSPECTOUTPUTTB 
                GROUP BY 
                  CTR_CD,
                  PROD_REQUEST_NO
              ) AS INS_OUTPUT_TB ON (
                INS_OUTPUT_TB.CTR_CD = P400.CTR_CD
                AND INS_OUTPUT_TB.PROD_REQUEST_NO = P400.PROD_REQUEST_NO
              ) 
              LEFT JOIN (
                SELECT 
                  ZTB_QLSXPLAN.CTR_CD,
                  ZTB_QLSXPLAN.PROD_REQUEST_NO, 
                  SUM(
                    CASE WHEN ZTB_QLSXPLAN.PROCESS_NUMBER = 1 
                    AND ZTB_QLSXPLAN.STEP = 0 THEN isnull(SX_RESULT, 0) ELSE 0 END
                  ) AS KETQUASX 
                FROM 
                  ZTB_SX_RESULT 
                  LEFT JOIN ZTB_QLSXPLAN ON (
                    ZTB_QLSXPLAN.CTR_CD = ZTB_SX_RESULT.CTR_CD
                    AND ZTB_QLSXPLAN.PLAN_ID = ZTB_SX_RESULT.PLAN_ID
                  ) 
                WHERE 
                  ZTB_QLSXPLAN.STEP = 0 
                GROUP BY 
                  ZTB_QLSXPLAN.CTR_CD,
                  ZTB_QLSXPLAN.PROD_REQUEST_NO
              ) AS BB ON (
                BB.CTR_CD = P400.CTR_CD
                AND BB.PROD_REQUEST_NO = P400.PROD_REQUEST_NO
              ) 
            WHERE 
              P400.CODE_03 <> ''04''
              AND P400.PROD_REQUEST_QTY > INS_OUTPUT_TB.INS_OUTPUT 
              AND PROD_REQUEST_DATE > ''20230101'' 
            GROUP BY 
              P400.CTR_CD,
              P400.G_CODE
          ) AS YCSXBLTB ON (
            YCSXBLTB.CTR_CD = PO_TABLE_1.CTR_CD
            AND YCSXBLTB.G_CODE = PO_TABLE_1.G_CODE
          )
      LEFT JOIN
      (
      SELECT CTR_CD, G_CODE, '+@str2+' FROM 
      (
      SELECT CTR_CD, G_CODE, CONCAT(DEL_YEAR,''_'', DEL_MONTH) AS DEL_YM, TotalDelivered FROM 
      (
      SELECT
      ZTBPOTable.CTR_CD,
      ZTBPOTable.G_CODE,
      YEAR(ZTBDelivery.DELIVERY_DATE) AS DEL_YEAR,
      FORMAT(ZTBDelivery.DELIVERY_DATE,''MM'') AS DEL_MONTH,
      SUM(ZTBDelivery.DELIVERY_QTY) AS TotalDelivered
      FROM 
      ZTBDelivery 
      LEFT JOIN ZTBPOTable ON (
      ZTBDelivery.CTR_CD = ZTBPOTable.CTR_CD 
      AND ZTBDelivery.CUST_CD = ZTBPOTable.CUST_CD 
      AND ZTBDelivery.G_CODE = ZTBPOTable.G_CODE 
      AND ZTBDelivery.PO_NO = ZTBPOTable.PO_NO
      )
      WHERE ZTBDelivery.DELIVERY_DATE BETWEEN '''+CAST(@StartDate as varchar)+''' AND '''+CAST(@EndDate as varchar)+'''
      GROUP BY 
      ZTBPOTable.CTR_CD,
      ZTBPOTable.G_CODE,
      YEAR(ZTBDelivery.DELIVERY_DATE),
      FORMAT(ZTBDelivery.DELIVERY_DATE,''MM'')
      ) AS src
      ) AS src2
      PIVOT
      (
       SUM(TotalDelivered)
       FOR DEL_YM IN ('+@str3+')
      ) AS pvtb
      ) AS LSGH6T
      ON (LSGH6T.CTR_CD = PO_TABLE_1.CTR_CD AND LSGH6T.G_CODE = PO_TABLE_1.G_CODE)
      ${condition}
      AND PO_TABLE_1.CTR_CD = ''${DATA.CTR_CD}''
'
print(@query)
execute(@query)          
          `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  ////console.log(checkkq);
  res.send(checkkq);
};
exports.traPOFullCMS_New = async (req, res, DATA) => {
  let checkkq = "OK";
  let condition = " WHERE 1=1 ";
  if (DATA.codeSearch !== "") {
    condition += ` AND TONKHOFULL.G_NAME LIKE '%${DATA.codeSearch}%'`;
  }
  if (DATA.allcode !== false) {
    condition += ` AND PO_TABLE_1.PO_BALANCE >0 `;
  }
  let setpdQuery = `WITH POTB AS (
SELECT CTR_CD, G_CODE, SUM(PO_QTY) AS PO_QTY FROM ZTBPOTable GROUP BY CTR_CD, G_CODE
),
DLTB AS (
SELECT CTR_CD, G_CODE, SUM(DELIVERY_QTY) AS DELIVERY_QTY FROM ZTBDelivery GROUP BY CTR_CD, G_CODE
),
PO_TABLE_1 AS (
SELECT 
POTB.G_CODE, 
POTB.PO_QTY, 
isnull(DLTB.DELIVERY_QTY,0) AS TOTAL_DELIVERED, 
(POTB.PO_QTY - isnull(DLTB.DELIVERY_QTY,0)) AS PO_BALANCE 
FROM POTB LEFT JOIN DLTB ON POTB.CTR_CD = DLTB.CTR_CD AND POTB.G_CODE = DLTB.G_CODE    
),
THANHPHAM AS (
SELECT 
Product_MaVach, 
ISNULL([IN], 0) AS NHAPKHO, 
ISNULL([OUT], 0) AS XUATKHO, 
(ISNULL([IN], 0) - ISNULL([OUT], 0)) AS TONKHO 
FROM (
SELECT 
    Product_Mavach, 
    IO_Type, 
    IO_Qty 
FROM 
    tbl_InputOutput
) AS SourceTable 
PIVOT (
SUM(IO_Qty) FOR IO_Type IN ([IN], [OUT])
) AS PivotTable
),
TONKIEM AS (
SELECT 
ZTB_WAIT_INSPECT.G_CODE,         
SUM(INSPECT_BALANCE_QTY) AS INSPECT_BALANCE_QTY, 
SUM(WAIT_CS_QTY) AS WAIT_CS_QTY, 
SUM(WAIT_SORTING_RMA) AS WAIT_SORTING_RMA, 
SUM(
    INSPECT_BALANCE_QTY + WAIT_CS_QTY + WAIT_SORTING_RMA
) AS TOTAL_WAIT 
FROM  ZTB_WAIT_INSPECT
WHERE 
UPDATE_DATE = CONVERT(date, GETDATE()) 
AND CALAMVIEC = 'DEM' 
GROUP BY 
ZTB_WAIT_INSPECT.G_CODE        
),
TONKIEM_NEW AS
(
SELECT CTR_CD, G_CODE, SUM(INPUT_QTY_EA) AS INSPECT_BALANCE_QTY FROM ZTBINSPECTINPUTTB WHERE INSPECT_YN='Y' AND P400_YN='Y' GROUP BY CTR_CD, G_CODE
),
CNK AS 
(
SELECT CTR_CD,G_CODE, SUM(OUTPUT_QTY_EA) AS WAIT_INPUT_WH FROM ZTBINSPECTOUTPUTTB WHERE STATUS='PENDING' AND OUTPUT_QTY_EA>0 AND OUTPUT_DATETIME > '2025-01-01' AND CTR_CD = '002' GROUP BY CTR_CD, G_CODE
),
BTP AS (
SELECT 
ZTB_HALF_GOODS.G_CODE,
SUM(BTP_QTY_EA) AS BTP_QTY_EA 
FROM 
ZTB_HALF_GOODS 
WHERE 
UPDATE_DATE = CONVERT(date, GETDATE()) 
GROUP BY 
ZTB_HALF_GOODS.G_CODE 
),
tbl_Block_table2 AS (
SELECT 
Product_MaVach, 
SUM(Block_Qty) AS Block_Qty 
FROM 
tbl_Block2 
GROUP BY 
Product_MaVach
),
TONKHOFULL AS (
SELECT 
M100.G_CODE, 
M100.G_NAME, 
M100.USE_YN,
M100.G_NAME_KD, 
ISNULL(TONKIEM_NEW.INSPECT_BALANCE_QTY, 0) AS CHO_KIEM, 
ISNULL(TONKIEM.WAIT_CS_QTY, 0) AS CHO_CS_CHECK, 
ISNULL(TONKIEM.WAIT_SORTING_RMA, 0) AS CHO_KIEM_RMA, 
(ISNULL(TONKIEM_NEW.INSPECT_BALANCE_QTY, 0) + ISNULL(TONKIEM.WAIT_CS_QTY, 0) + ISNULL(TONKIEM.WAIT_SORTING_RMA, 0)) AS TONG_TON_KIEM, 
ISNULL(M100.BTP_QTY, 0) AS BTP, 
ISNULL(THANHPHAM.TONKHO, 0) AS TON_TP, 
ISNULL(tbl_Block_table2.Block_Qty, 0) AS BLOCK_QTY, 
ISNULL(CNK.WAIT_INPUT_WH,0) AS WAIT_INPUT_WH,
(ISNULL(TONKIEM_NEW.INSPECT_BALANCE_QTY, 0) + ISNULL(TONKIEM.WAIT_CS_QTY, 0) + ISNULL(TONKIEM.WAIT_SORTING_RMA, 0) + ISNULL(M100.BTP_QTY, 0) + ISNULL(CNK.WAIT_INPUT_WH,0)+ ISNULL(THANHPHAM.TONKHO, 0) - ISNULL(tbl_Block_table2.Block_Qty, 0)) AS GRAND_TOTAL_STOCK 
FROM 
M100 
LEFT JOIN THANHPHAM ON (
    THANHPHAM.Product_MaVach = M100.G_CODE
) 
LEFT JOIN TONKIEM ON (
    M100.G_CODE = TONKIEM.G_CODE
) 
LEFT JOIN TONKIEM_NEW ON (
    M100.G_CODE = TONKIEM_NEW.G_CODE
) 
LEFT JOIN CNK ON (
M100.G_CODE = CNK.G_CODE
)
LEFT JOIN tbl_Block_table2 ON (
    tbl_Block_table2.Product_MaVach = M100.G_CODE
) 
LEFT JOIN BTP ON (
    BTP.G_CODE = M100.G_CODE
)
)
SELECT 
PO_TABLE_1.G_CODE, 
TONKHOFULL.G_NAME, 
TONKHOFULL.G_NAME_KD, 
PO_TABLE_1.PO_QTY, 
TOTAL_DELIVERED, 
PO_TABLE_1.PO_BALANCE, 
TONKHOFULL.CHO_KIEM, 
TONKHOFULL.CHO_CS_CHECK, 
TONKHOFULL.CHO_KIEM_RMA, 
TONKHOFULL.TONG_TON_KIEM, 
TONKHOFULL.BTP, 
TONKHOFULL.WAIT_INPUT_WH,
TONKHOFULL.TON_TP, 
TONKHOFULL.BLOCK_QTY, 
TONKHOFULL.GRAND_TOTAL_STOCK, 
(TONKHOFULL.GRAND_TOTAL_STOCK - PO_TABLE_1.PO_BALANCE) AS THUA_THIEU ,
TONKHOFULL.USE_YN
FROM 
PO_TABLE_1 
LEFT JOIN TONKHOFULL ON TONKHOFULL.G_CODE = PO_TABLE_1.G_CODE  
  ${condition}`;
  //////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  ////console.log(checkkq);
  res.send(checkkq);
};
exports.delete_plan = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `DELETE FROM ZTBPLANTB WHERE CTR_CD='${DATA.CTR_CD}' AND PLAN_ID=${DATA.PLAN_ID}`;
  //////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.insert_plan = async (req, res, DATA) => {
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let checkkq = "OK";
  let setpdQuery = `INSERT INTO ZTBPLANTB (CTR_CD,EMPL_NO,CUST_CD,G_CODE,PLAN_DATE,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,REMARK, INS_DATE, INS_EMPL, UPD_DATE, UPD_EMPL) VALUES ('${DATA.CTR_CD}','${DATA.EMPL_NO}','${DATA.CUST_CD}', '${DATA.G_CODE}', '${DATA.PLAN_DATE}', ${DATA.D1},${DATA.D2},${DATA.D3},${DATA.D4},${DATA.D5},${DATA.D6},${DATA.D7},${DATA.D8},${DATA.D9},${DATA.D10},${DATA.D11},${DATA.D12},${DATA.D13},${DATA.D14},${DATA.D15},'${DATA.REMARK}', GETDATE(), '${EMPL_NO}', GETDATE(), '${EMPL_NO}')`;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.checkPlanExist = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `SELECT * FROM ZTBPLANTB WHERE CTR_CD='${DATA.CTR_CD}' AND G_CODE='${DATA.G_CODE}' AND CUST_CD='${DATA.CUST_CD}'  AND PLAN_DATE='${DATA.PLAN_DATE}' `;
  //////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.traPlanDataFull = async (req, res, DATA) => {
  let kqua;
  query = `SELECT ZTBPLANTB.PLAN_ID, M010.EMPL_NAME, ZTBPLANTB.EMPL_NO, M110.CUST_NAME_KD, ZTBPLANTB.CUST_CD, ZTBPLANTB.G_CODE, M100.G_NAME_KD, M100.G_NAME,  M100.PROD_TYPE ,M100.PROD_MAIN_MATERIAL, ZTBPLANTB.PLAN_DATE, ZTBPLANTB.D1,ZTBPLANTB.D2,ZTBPLANTB.D3,ZTBPLANTB.D4,ZTBPLANTB.D5,ZTBPLANTB.D6,ZTBPLANTB.D7,ZTBPLANTB.D8, ZTBPLANTB.D9, ZTBPLANTB.D10, ZTBPLANTB.D11, ZTBPLANTB.D12, ZTBPLANTB.D13, ZTBPLANTB.D14, ZTBPLANTB.D15,  ZTBPLANTB.REMARK  FROM ZTBPLANTB JOIN M100 ON (M100.G_CODE = ZTBPLANTB.G_CODE AND M100.CTR_CD = ZTBPLANTB.CTR_CD) JOIN M110 ON (M110.CUST_CD = ZTBPLANTB.CUST_CD AND M110.CTR_CD = ZTBPLANTB.CTR_CD) JOIN M010 ON (M010.EMPL_NO= ZTBPLANTB.EMPL_NO AND M010.CTR_CD= ZTBPLANTB.CTR_CD) ${generate_condition_get_plan(
    DATA.alltime,
    DATA.start_date,
    DATA.end_date,
    DATA.cust_name,
    DATA.codeCMS,
    DATA.codeKD,
    DATA.prod_type,
    DATA.empl_name,
    DATA.material,
    DATA.CTR_CD
  )} ORDER BY ZTBPLANTB.PLAN_ID DESC`;
  kqua = await queryDB(query);
  ////console.log(kqua);
  res.send(kqua);
};
exports.loadMonthlyRevenueByCustomer = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
  DECLARE @StartDate DATE = '${DATA.FROM_DATE}'; -- Thay đổi start date tại đây
  DECLARE @EndDate DATE = '${DATA.TO_DATE}'; -- Thay đổi end date tại đây
  DECLARE @CurrentDate DATE = @StartDate;
  DECLARE @str1 VARCHAR(MAX) = '';
  WHILE @CurrentDate <= @EndDate
  BEGIN
      SET  @str1 =  @str1 + 'ISNULL([' + FORMAT(@CurrentDate, 'yyyy_MM') + '],0) + ';
      SET @CurrentDate = DATEADD(MONTH, 1, @CurrentDate);
  END
  -- Xóa dấu phẩy cuối cùng
  SET  @str1 = LEFT( @str1, LEN( @str1) - 1);
  SET @CurrentDate = @StartDate;
  DECLARE @str2 VARCHAR(MAX) = '';
  WHILE @CurrentDate <= @EndDate
  BEGIN
      SET  @str2 =  @str2 + 'ISNULL([' + FORMAT(@CurrentDate, 'yyyy_MM') + '],0) AS [' + FORMAT(@CurrentDate, 'yyyy_MM') + '], ';
      SET @CurrentDate = DATEADD(MONTH, 1, @CurrentDate);
  END
  -- Xóa dấu phẩy cuối cùng
  SET  @str2 = LEFT( @str2, LEN( @str2) - 1);
  SET @CurrentDate = @StartDate;
  DECLARE @str3 VARCHAR(MAX) = '';
  WHILE @CurrentDate <= @EndDate
  BEGIN
      SET  @str3 =  @str3 + '[' + FORMAT(@CurrentDate, 'yyyy_MM')+'], ';
      SET @CurrentDate = DATEADD(MONTH, 1, @CurrentDate);
  END
  -- Xóa dấu phẩy cuối cùng
  SET  @str3 = LEFT( @str3, LEN( @str3) - 1);
  SET @CurrentDate = @StartDate;
  DECLARE @str4 VARCHAR(MAX) = '';
  WHILE @CurrentDate <= @EndDate
  BEGIN
      SET  @str4 =  @str4 + 'B5.[' + FORMAT(@CurrentDate, 'yyyy_MM')+'], ';
      SET @CurrentDate = DATEADD(MONTH, 1, @CurrentDate);
  END
  -- Xóa dấu phẩy cuối cùng
  SET  @str4 = LEFT( @str4, LEN( @str4) - 1);
  SET @CurrentDate = @StartDate;
  DECLARE @str5 VARCHAR(MAX) = '';
  WHILE @CurrentDate <= @EndDate
  BEGIN
      SET  @str5 =  @str5 + 'B6.[' + FORMAT(@CurrentDate, 'yyyy_MM')+'] AS [' + FORMAT(@CurrentDate, 'yyyy_MM')+'_QTY], ';
      SET @CurrentDate = DATEADD(MONTH, 1, @CurrentDate);
  END
  -- Xóa dấu phẩy cuối cùng
  SET  @str5 = LEFT( @str5, LEN( @str5) - 1);
  declare @query varchar(max) 
  select 
  @query = '
  WITH ZTBDLVR AS 
  (
  SELECT M110.CUST_NAME_KD, ZTBDelivery.DELIVERY_DATE, ZTBDelivery.DELIVERY_QTY, ZTBDelivery.DELIVERY_QTY * ZTBPOTable.PROD_PRICE AS DELIVERED_AMOUNT, ZTBDelivery.CTR_CD	
  FROM ZTBDelivery 
  LEFT JOIN ZTBPOTable ON (ZTBPOTable.CUST_CD = ZTBDelivery.CUST_CD AND ZTBPOTable.PO_NO = ZTBDelivery.PO_NO AND ZTBPOTable.G_CODE = ZTBDelivery.G_CODE AND ZTBPOTable.CTR_CD = ZTBDelivery.CTR_CD)	
  LEFT JOIN M110 ON (M110.CUST_CD = ZTBDelivery.CUST_CD AND M110.CTR_CD = ZTBDelivery.CTR_CD)
  ),
  DL2TB AS
  (
  SELECT CUST_NAME_KD, CONCAT(YEAR(DELIVERY_DATE),''_'', FORMAT(DELIVERY_DATE,''MM'')) AS DL_YM, YEAR(DELIVERY_DATE) AS DL_YEAR, FORMAT(DELIVERY_DATE,''MM'') AS DL_MONTH, DELIVERED_AMOUNT, DELIVERY_QTY, CTR_CD FROM ZTBDLVR
  ), 
  B1 as
  (
    SELECT pvtb.CUST_NAME_KD, (+ ' + @str1 + ') AS TOTAL, '+ @str2 +' FROM 
    (
    SELECT CUST_NAME_KD, DL_YM, DELIVERED_AMOUNT, CTR_CD FROM DL2TB)
    AS src
    PIVOT
    (
    SUM(DELIVERED_AMOUNT) FOR DL_YM IN ('+@str3+')
    ) as pvtb
    WHERE (' +@str1+') <> 0 AND pvtb.CTR_CD=''${DATA.CTR_CD}''
  ),
  B2 as
  (
    SELECT ''TOTAL'' AS CUST_NAME_KD, (+ ' + @str1 + ') AS TOTAL, '+ @str2 +' FROM 
    (
    SELECT DL_YM, DELIVERED_AMOUNT, CTR_CD FROM DL2TB)
    AS src
    PIVOT
    (
    SUM(DELIVERED_AMOUNT) FOR DL_YM IN ('+@str3+')
    ) as pvtb
    WHERE (' +@str1+') <> 0 AND pvtb.CTR_CD=''${DATA.CTR_CD}''
  ), 
  B3 as
  (
  SELECT pvtb.CUST_NAME_KD, ('+ @str1 +' ) AS TOTAL, '+ @str2 +' FROM 
  (
  SELECT CUST_NAME_KD, DL_YM, DELIVERY_QTY, CTR_CD FROM DL2TB)
  AS src
  PIVOT
  (
  SUM(DELIVERY_QTY) FOR DL_YM IN ('+@str3+')
  ) as pvtb
  WHERE  (' +@str1+') <> 0 AND pvtb.CTR_CD=''${DATA.CTR_CD}''
  ),
  B4 as
  (
  SELECT ''TOTAL'' AS CUST_NAME_KD, ('+ @str1 +') AS TOTAL, '+ @str2 +' FROM 
  (
  SELECT DL_YM, DELIVERY_QTY, CTR_CD FROM DL2TB)
  AS src
  PIVOT
  (
  SUM(DELIVERY_QTY) FOR DL_YM IN ('+@str3+')
  ) as pvtb
  WHERE  (' +@str1+') <> 0 AND pvtb.CTR_CD=''${DATA.CTR_CD}''
  ),
  B5 AS (SELECT * FROM B2 UNION ALL SELECT * FROM B1),
  B6 AS (SELECT * FROM B4 UNION ALL SELECT * FROM B3)
  SELECT B5.CUST_NAME_KD, B5.TOTAL AS TOTAL_AMOUNT, '+@str4+', B6.TOTAL AS TOTAL_QTY, '+@str5+'  FROM B5 LEFT JOIN B6 ON (B5.CUST_NAME_KD = B6.CUST_NAME_KD)
  ORDER BY B5.TOTAL DESC
  '
  print(@query)
  execute(@query)
    `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.kd_runningpobalance = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = ` SELECT  BB.PO_YEAR, BB.PO_WEEK, BB.YEAR_WEEK, 
  BB.RUNNING_PO_QTY, 
  CASE WHEN BB.RUNNING_DEL_QTY=0 THEN BB.PREV_RUNNING_DEL_QTY ELSE BB.RUNNING_DEL_QTY END AS RUNNING_DEL_QTY, 
  CASE WHEN BB.RUNNING_DEL_QTY=0 THEN BB.RUNNING_PO_QTY- BB.PREV_RUNNING_DEL_QTY ELSE BB.RUNNING_PO_BALANCE END AS RUNNING_PO_BALANCE, 
  BB.RUNNING_PO_AMOUNT,
  CASE WHEN BB.RUNNING_DEL_AMOUNT=0 THEN BB.PREV_RUNNING_DEL_AMOUNT ELSE BB.RUNNING_DEL_QTY END AS RUNNING_DEL_AMOUNT, 
  CASE WHEN BB.RUNNING_DEL_AMOUNT=0 THEN BB.RUNNING_PO_AMOUNT- BB.PREV_RUNNING_DEL_AMOUNT ELSE BB.RUNNING_BALANCE_AMOUNT END AS RUNNING_BALANCE_AMOUNT,
  COUNT(PO_YEAR) OVER(ORDER BY PO_YEAR ASC, PO_WEEK ASC) AS ROWNUM 
  FROM 
  ( SELECT TOP 100000 AA.PO_YEAR, AA.PO_WEEK, CONCAT(AA.PO_YEAR,'_', AA.PO_WEEK) AS YEAR_WEEK, isnull(AA.RUNNING_PO_QTY,0) AS RUNNING_PO_QTY, isnull(BB.RUNNING_DEL_QTY,0) AS RUNNING_DEL_QTY, (isnull(AA.RUNNING_PO_QTY,0)-isnull(BB.RUNNING_DEL_QTY,0)) AS RUNNING_PO_BALANCE, isnull(AA.RUNNING_PO_AMOUNT,0) AS RUNNING_PO_AMOUNT, isnull(BB.RUNNING_DEL_AMOUNT,0) AS RUNNING_DEL_AMOUNT, (isnull(AA.RUNNING_PO_AMOUNT,0)-isnull(BB.RUNNING_DEL_AMOUNT,0)) AS RUNNING_BALANCE_AMOUNT,
  isnull(LAG(BB.RUNNING_DEL_QTY) OVER (ORDER BY AA.PO_YEAR ASC, AA.PO_WEEK ASC),0) AS PREV_RUNNING_DEL_QTY,
  isnull(LAG(BB.RUNNING_DEL_AMOUNT) OVER (ORDER BY AA.PO_YEAR ASC, AA.PO_WEEK ASC),0) AS PREV_RUNNING_DEL_AMOUNT
  FROM 
  (
    SELECT XX.PO_YEAR, XX.PO_WEEK, SUM(CAST(XX.WEEKLY_PO_QTY AS Float)) OVER(ORDER BY XX.PO_YEAR ASC, XX.PO_WEEK ASC) AS RUNNING_PO_QTY,
    SUM(CAST(XX.WEEKLY_PO_AMOUNT AS Float)) OVER(ORDER BY XX.PO_YEAR ASC, XX.PO_WEEK ASC) AS RUNNING_PO_AMOUNT
    FROM 
    (
    SELECT DISTINCT YEAR(PO_DATE) AS PO_YEAR,DATEPART( ISOWK, DATEADD(day,2,PO_DATE)) As PO_WEEK, 
    SUM(ZTBPOTable.PO_QTY) OVER(PARTITION BY YEAR(PO_DATE),DATEPART(ISOWK, DATEADD(day,2,PO_DATE))) AS WEEKLY_PO_QTY,
    SUM(ZTBPOTable.PO_QTY*ZTBPOTable.PROD_PRICE) OVER(PARTITION BY YEAR(PO_DATE),DATEPART(ISOWK, DATEADD(day,2,PO_DATE))) AS WEEKLY_PO_AMOUNT
    FROM ZTBPOTable
    WHERE ZTBPOTable.PO_DATE <='${DATA.TO_DATE}' AND ZTBPOTable.CTR_CD='${DATA.CTR_CD}'
    ) AS XX
  ) AS AA
  LEFT JOIN 
  (
    SELECT XX.DEL_YEAR, XX.DEL_WEEK, SUM(CAST(XX.WEEKLY_DEL_QTY AS Float)) OVER(ORDER BY XX.DEL_YEAR ASC, XX.DEL_WEEK ASC) AS RUNNING_DEL_QTY,
    SUM(CAST(XX.WEEKLY_DEL_AMOUNT AS Float)) OVER(ORDER BY XX.DEL_YEAR ASC, XX.DEL_WEEK ASC) AS RUNNING_DEL_AMOUNT
    FROM 
    (
    SELECT DISTINCT YEAR(DELIVERY_DATE) AS DEL_YEAR,DATEPART( ISOWK, DATEADD(day,2,DELIVERY_DATE)) As DEL_WEEK, 
    SUM(ZTBDelivery.DELIVERY_QTY) OVER(PARTITION BY YEAR(DELIVERY_DATE),DATEPART(ISOWK, DATEADD(day,2,DELIVERY_DATE))) AS WEEKLY_DEL_QTY,
    SUM(ZTBDelivery.DELIVERY_QTY* ZTBPOTable.PROD_PRICE) OVER(PARTITION BY YEAR(DELIVERY_DATE),DATEPART(ISOWK, DATEADD(day,2,DELIVERY_DATE))) AS WEEKLY_DEL_AMOUNT
    FROM ZTBDelivery LEFT JOIN ZTBPOTable ON (ZTBDelivery.CUST_CD = ZTBPOTable.CUST_CD AND ZTBDelivery.G_CODE = ZTBPOTable.G_CODE AND ZTBDelivery.PO_NO = ZTBPOTable.PO_NO AND ZTBDelivery.CTR_CD = ZTBPOTable.CTR_CD)
    WHERE ZTBDelivery.DELIVERY_DATE <= '${DATA.TO_DATE}' AND ZTBDelivery.CTR_CD='${DATA.CTR_CD}'
    ) AS XX
  ) AS BB
    ON (AA.PO_WEEK = BB.DEL_WEEK AND AA.PO_YEAR = BB.DEL_YEAR)
    ORDER BY PO_YEAR ASC, PO_WEEK DESC
  ) AS BB 
  ORDER BY BB.PO_YEAR DESC, BB.PO_WEEK DESC`;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  ////console.log(checkkq);
  res.send(checkkq);
};
exports.kd_pooverweek = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `SELECT  AA.YEAR_WEEK, AA.PO_YEAR, AA.PO_WEEK, AA.WEEKLY_PO_QTY, AA.WEEKLY_PO_AMOUNT  FROM (SELECT DISTINCT  TOP 1000 YEAR(PO_DATE) AS PO_YEAR,DATEPART( ISOWK, DATEADD(day,1,PO_DATE)) As PO_WEEK, CONCAT(YEAR(PO_DATE),'_', DATEPART( ISOWK, DATEADD(day,1,PO_DATE))) AS YEAR_WEEK ,
  SUM(ZTBPOTable.PO_QTY) OVER(PARTITION BY YEAR(PO_DATE),DATEPART(ISOWK, DATEADD(day,1,PO_DATE))) AS WEEKLY_PO_QTY,
  SUM(ZTBPOTable.PO_QTY*ZTBPOTable.PROD_PRICE) OVER(PARTITION BY YEAR(PO_DATE),DATEPART(ISOWK, DATEADD(day,1,PO_DATE))) AS WEEKLY_PO_AMOUNT
  FROM ZTBPOTable  
 WHERE ZTBPOTable.CTR_CD='${DATA.CTR_CD}' AND PO_DATE BETWEEN '${DATA.FROM_DATE}' AND  '${DATA.TO_DATE}'
  ORDER BY YEAR(PO_DATE) ASC ,DATEPART( ISOWK, DATEADD(day,1,PO_DATE)) DESC) AS AA ORDER BY AA.PO_YEAR DESC, AA.PO_WEEK DESC`;
  checkkq = await queryDB(setpdQuery);
  ////console.log(checkkq);
  res.send(checkkq);
};
exports.getWeeklyClosingKD = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
  DECLARE @StartDate DATE = '${DATA.FROM_DATE}'; -- Thay đổi start date tại đây
  DECLARE @EndDate DATE = '${DATA.TO_DATE}'; -- Thay đổi end date tại đây
  DECLARE @CurrentDate DATE = @StartDate;
  DECLARE @str1 VARCHAR(MAX) = '';
  WHILE @CurrentDate <= @EndDate
  BEGIN
      SET  @str1 =  @str1 + 'ISNULL([' + CONCAT(YEAR(@CurrentDate),'_',DATEPART(WEEK,@CurrentDate)) + '],0) + ';
      SET @CurrentDate = DATEADD(WEEK, 1, @CurrentDate);
  END
  -- Xóa dấu phẩy cuối cùng
  SET  @str1 = LEFT( @str1, LEN( @str1) - 1);
  SET @CurrentDate = @StartDate;
  DECLARE @str2 VARCHAR(MAX) = '';
  WHILE @CurrentDate <= @EndDate
  BEGIN
      SET  @str2 =  @str2 + 'ISNULL([' + CONCAT(YEAR(@CurrentDate),'_',DATEPART(WEEK,@CurrentDate)) + '],0) AS [' + CONCAT(YEAR(@CurrentDate),'_',DATEPART(WEEK,@CurrentDate)) + '], ';
      SET @CurrentDate = DATEADD(WEEK, 1, @CurrentDate);
  END
  -- Xóa dấu phẩy cuối cùng
  SET  @str2 = LEFT( @str2, LEN( @str2) - 1);
  SET @CurrentDate = @StartDate;
  DECLARE @str3 VARCHAR(MAX) = '';
  WHILE @CurrentDate <= @EndDate
  BEGIN
      SET  @str3 =  @str3 + '[' + CONCAT(YEAR(@CurrentDate),'_',DATEPART(WEEK,@CurrentDate))+'], ';
      SET @CurrentDate = DATEADD(WEEK, 1, @CurrentDate);
  END
  -- Xóa dấu phẩy cuối cùng
  SET  @str3 = LEFT( @str3, LEN( @str3) - 1);
  SET @CurrentDate = @StartDate;
  DECLARE @str4 VARCHAR(MAX) = '';
  WHILE @CurrentDate <= @EndDate
  BEGIN
      SET  @str4 =  @str4 + 'B5.[' + CONCAT(YEAR(@CurrentDate),'_',DATEPART(WEEK,@CurrentDate))+'], ';
      SET @CurrentDate = DATEADD(WEEK, 1, @CurrentDate);
  END
  -- Xóa dấu phẩy cuối cùng
  SET  @str4 = LEFT( @str4, LEN( @str4) - 1);
  SET @CurrentDate = @StartDate;
  DECLARE @str5 VARCHAR(MAX) = '';
  WHILE @CurrentDate <= @EndDate
  BEGIN
      SET  @str5 =  @str5 + 'B6.[' + CONCAT(YEAR(@CurrentDate),'_',DATEPART(WEEK,@CurrentDate))+'] AS [' + CONCAT(YEAR(@CurrentDate),'_',DATEPART(WEEK,@CurrentDate))+'_QTY], ';
      SET @CurrentDate = DATEADD(WEEK, 1, @CurrentDate);
  END
  -- Xóa dấu phẩy cuối cùng
  SET  @str5 = LEFT( @str5, LEN( @str5) - 1);
  declare @query varchar(max) 
  select 
  @query = '
  WITH ZTBDLVR AS 
  (
  SELECT M110.CUST_NAME_KD,ZTBDelivery.DELIVERY_DATE, ZTBDelivery.DELIVERY_QTY, ZTBDelivery.DELIVERY_QTY * ZTBPOTable.PROD_PRICE AS DELIVERED_AMOUNT, ZTBDelivery.CTR_CD	
  FROM ZTBDelivery 
  LEFT JOIN ZTBPOTable ON (ZTBPOTable.CUST_CD = ZTBDelivery.CUST_CD AND ZTBPOTable.PO_NO = ZTBDelivery.PO_NO AND ZTBPOTable.G_CODE = ZTBDelivery.G_CODE AND ZTBPOTable.CTR_CD = ZTBDelivery.CTR_CD)	
  LEFT JOIN M110 ON (M110.CUST_CD = ZTBDelivery.CUST_CD AND M110.CTR_CD = ZTBDelivery.CTR_CD)
  WHERE ZTBDelivery.CTR_CD=''${DATA.CTR_CD}''
  ),
  DL2TB AS
  (
  SELECT CUST_NAME_KD, CONCAT(YEAR(DELIVERY_DATE),''_'', DATEPART(WEEK,DELIVERY_DATE)) AS DL_YW, YEAR(DELIVERY_DATE) AS DL_YEAR, DATEPART(WEEK,DELIVERY_DATE) AS DL_WEEK, DELIVERED_AMOUNT, DELIVERY_QTY, CTR_CD FROM ZTBDLVR
  ), 
  B1 as
  (
    SELECT pvtb.CUST_NAME_KD, (+ ' + @str1 + ') AS TOTAL, '+ @str2 +' FROM 
    (
    SELECT CUST_NAME_KD, DL_YW, DELIVERED_AMOUNT, CTR_CD FROM DL2TB)
    AS src
    PIVOT
    (
    SUM(DELIVERED_AMOUNT) FOR DL_YW IN ('+@str3+')
    ) as pvtb
    WHERE (' +@str1+') <> 0 AND CTR_CD=''${DATA.CTR_CD}''
  ),
  B2 as
  (
    SELECT ''TOTAL'' AS CUST_NAME_KD, (+ ' + @str1 + ') AS TOTAL, '+ @str2 +' FROM 
    (
    SELECT DL_YW, DELIVERED_AMOUNT, CTR_CD FROM DL2TB)
    AS src
    PIVOT
    (
    SUM(DELIVERED_AMOUNT) FOR DL_YW IN ('+@str3+')
    ) as pvtb
    WHERE (' +@str1+') <> 0 AND CTR_CD=''${DATA.CTR_CD}''
  ), 
  B3 as
  (
  SELECT pvtb.CUST_NAME_KD, ('+ @str1 +' ) AS TOTAL, '+ @str2 +' FROM 
  (
  SELECT CUST_NAME_KD, DL_YW, DELIVERY_QTY, CTR_CD FROM DL2TB)
  AS src
  PIVOT
  (
  SUM(DELIVERY_QTY) FOR DL_YW IN ('+@str3+')
  ) as pvtb
  WHERE  (' +@str1+') <> 0 AND CTR_CD=''${DATA.CTR_CD}''
  ),
  B4 as
  (
  SELECT ''TOTAL'' AS CUST_NAME_KD, ('+ @str1 +') AS TOTAL, '+ @str2 +' FROM 
  (
  SELECT DL_YW, DELIVERY_QTY, CTR_CD FROM DL2TB)
  AS src
  PIVOT
  (
  SUM(DELIVERY_QTY) FOR DL_YW IN ('+@str3+')
  ) as pvtb
  WHERE  (' +@str1+') <> 0 AND CTR_CD=''${DATA.CTR_CD}''
  ),
  B5 AS (SELECT * FROM B2 UNION ALL SELECT * FROM B1),
  B6 AS (SELECT * FROM B4 UNION ALL SELECT * FROM B3)
  SELECT B5.CUST_NAME_KD, B5.TOTAL AS TOTAL_AMOUNT, '+@str4+', B6.TOTAL AS TOTAL_QTY, '+@str5+'  FROM B5 LEFT JOIN B6 ON (B5.CUST_NAME_KD = B6.CUST_NAME_KD)
  ORDER BY B5.TOTAL DESC
  '
  print(@query)
  execute(@query)
    `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.getDailyClosingKD = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
  DECLARE @startdate date DECLARE @enddate date DECLARE @tempdate date 
  SET 
    @startdate = '${DATA.FROM_DATE}' 
  SET 
    @enddate = '${DATA.TO_DATE}' 
  SET 
    @tempdate = @startdate DECLARE @string varchar(max) DECLARE @string2 varchar(max) DECLARE @string3 varchar(max) DECLARE @countdate int 
  SET 
    @countdate = 0 
  SET 
    @string = '' 
  SET 
    @string2 = '' 
  SET 
    @string3 = '' WHILE @tempdate <= @enddate BEGIN
  SET 
    @countdate = (
      SElECT 
        COUNT(DELIVERY_DATE) AS tempdate 
      FROM 
        ZTBDelivery 
      WHERE 
        DELIVERY_DATE = @tempdate
        AND CTR_CD = '${DATA.CTR_CD}'
    ) IF (@countdate <> 0) 
  SELECT 
    @string = @string + ' isnull([' + CAST(
      @tempdate AS varchar(max)
    ) + '],0) AS [' + CAST(
      @tempdate AS varchar(max)
    ) + '],' 
  SET 
    @tempdate = DATEADD(D, 1, @tempdate) END 
  SELECT 
    @string = left(
      @string, 
      len(@string) -1
    ) 
  SET 
    @tempdate = @startdate WHILE @tempdate <= @enddate BEGIN 
  SELECT 
    @string2 = @string2 + '[' + CAST(
      @tempdate AS varchar(max)
    ) + '],' 
  SET 
    @tempdate = DATEADD(D, 1, @tempdate) END 
  SELECT 
    @string2 = left(
      @string2, 
      len(@string2) -1
    ) 
  SET 
    @tempdate = @startdate WHILE @tempdate <= @enddate BEGIN 
  SELECT 
    @string3 = @string3 + 'isnull([' + CAST(
      @tempdate AS varchar(max)
    ) + '],0) +' 
  SET 
    @tempdate = DATEADD(D, 1, @tempdate) END 
  SELECT 
    @string3 = left(
      @string3, 
      len(@string3) -1
    ) DECLARE @cols varchar(max) 
  SELECT 
    @cols = (
      SELECT 
        DISTINCT DELIVERY_DATE 
      FROM 
        ZTBDelivery 
      WHERE 
        DELIVERY_DATE BETWEEN + @startdate 
        AND @enddate 
        AND CTR_CD = '${DATA.CTR_CD}'
      ORDER BY 
        DELIVERY_DATE ASC for xml path('')
    ) 
  select 
    @cols = replace(@cols, '<DELIVERY_DATE>', '[') 
  select 
    @cols = replace(@cols, '</DELIVERY_DATE>', '],') 
  select 
    @cols = left(
      @cols, 
      len(@cols) -1
    ) DECLARE @cols2 varchar(max) 
  SELECT 
    @cols2 = (
      SELECT 
        DISTINCT DELIVERY_DATE 
      FROM 
        ZTBDelivery 
      WHERE 
        DELIVERY_DATE BETWEEN @startdate 
        AND @enddate 
        AND CTR_CD = '${DATA.CTR_CD}'
      ORDER BY 
        DELIVERY_DATE ASC for xml path('')
    ) 
  select 
    @cols2 = replace(
      @cols2, '<DELIVERY_DATE>', 'isnull(['
    ) 
  select 
    @cols2 = replace(
      @cols2, '</DELIVERY_DATE>', '],0) AS D, '
    ) 
  select 
    @cols2 = left(
      @cols2, 
      len(@cols2) -1
    ) DECLARE @cols3 varchar(max) 
  SELECT 
    @cols3 = (
      SELECT 
        DISTINCT DELIVERY_DATE 
      FROM 
        ZTBDelivery 
      WHERE 
        DELIVERY_DATE BETWEEN @startdate 
        AND @enddate 
        AND CTR_CD = '${DATA.CTR_CD}'
      ORDER BY 
        DELIVERY_DATE ASC for xml path('')
    ) 
  select 
    @cols3 = replace(
      @cols3, '<DELIVERY_DATE>', 'isnull(['
    ) 
  select 
    @cols3 = replace(
      @cols3, '</DELIVERY_DATE>', '],0) +'
    ) 
  select 
    @cols3 = left(
      @cols3, 
      len(@cols3) -1
    ) 
declare @query varchar(max) 
  select 
    @query = '
select CUST_NAME_KD, (' + @cols3 + ') AS DELIVERED_AMOUNT,  ' + @string + ' from (  select ''TOTAL'' AS CUST_NAME_KD, XX.DELIVERED_AMOUNT ,XX.DELIVERY_DATE   from  (SELECT ZTBDelivery.G_CODE, M010.EMPL_NAME, M110.CUST_NAME_KD, ZTBDelivery.DELIVERY_DATE, M100.G_NAME, M100.PROD_MAIN_MATERIAL, ZTBDelivery.DELIVERY_QTY, ZTBPOTable.PROD_PRICE, ZTBDelivery.PO_NO, (ZTBPOTable.PROD_PRICE * ZTBDelivery.DELIVERY_QTY) As DELIVERED_AMOUNT, M100.PROD_TYPE, DATEPART( MONTH, ZTBDelivery.DELIVERY_DATE) AS DELMONTH, DATEPART( ISOWK,  ZTBDelivery.DELIVERY_DATE) AS DELWEEKNUM ,ZTBDelivery.NOCANCEL , ZTBDelivery.DELIVERY_ID, ZTBDelivery.CTR_CD  FROM ZTBDelivery JOIN ZTBPOTable ON (ZTBDelivery.G_CODE = ZTBPOTable.G_CODE AND ZTBDelivery.CUST_CD = ZTBPOTable.CUST_CD AND ZTBDelivery.PO_NO = ZTBPOTable.PO_NO AND ZTBDelivery.CTR_CD = ZTBPOTable.CTR_CD) JOIN M010 ON ZTBDelivery.EMPL_NO = M010.EMPL_NO AND ZTBDelivery.CTR_CD = M010.CTR_CD JOIN M100 ON ZTBDelivery.G_CODE = M100.G_CODE AND ZTBDelivery.CTR_CD = M100.CTR_CD JOIN M110 ON M110.CUST_CD = ZTBDelivery.CUST_CD AND M110.CTR_CD = ZTBDelivery.CTR_CD WHERE ZTBDelivery.CTR_CD = ''${DATA.CTR_CD}'' ) AS XX  ) src pivot (   SUM(DELIVERED_AMOUNT)   for DELIVERY_DATE in (' + @cols + ') ) piv 
UNION ALL
select CUST_NAME_KD, (' + @cols3 + ') AS DELIVERED_AMOUNT,  ' + @string + ' from (  select XX.CUST_NAME_KD, XX.DELIVERED_AMOUNT ,XX.DELIVERY_DATE   from  (SELECT ZTBDelivery.G_CODE, M010.EMPL_NAME, M110.CUST_NAME_KD, ZTBDelivery.DELIVERY_DATE, M100.G_NAME, M100.PROD_MAIN_MATERIAL, ZTBDelivery.DELIVERY_QTY, ZTBPOTable.PROD_PRICE, ZTBDelivery.PO_NO, (ZTBPOTable.PROD_PRICE * ZTBDelivery.DELIVERY_QTY) As DELIVERED_AMOUNT, M100.PROD_TYPE, DATEPART( MONTH, ZTBDelivery.DELIVERY_DATE) AS DELMONTH, DATEPART( ISOWK,  ZTBDelivery.DELIVERY_DATE) AS DELWEEKNUM ,ZTBDelivery.NOCANCEL , ZTBDelivery.DELIVERY_ID, ZTBDelivery.CTR_CD  FROM ZTBDelivery JOIN ZTBPOTable ON (ZTBDelivery.G_CODE = ZTBPOTable.G_CODE AND ZTBDelivery.CUST_CD = ZTBPOTable.CUST_CD AND ZTBDelivery.PO_NO = ZTBPOTable.PO_NO AND ZTBDelivery.CTR_CD = ZTBPOTable.CTR_CD) JOIN M010 ON ZTBDelivery.EMPL_NO = M010.EMPL_NO AND ZTBDelivery.CTR_CD = M010.CTR_CD JOIN M100 ON ZTBDelivery.G_CODE = M100.G_CODE AND ZTBDelivery.CTR_CD = M100.CTR_CD JOIN M110 ON M110.CUST_CD = ZTBDelivery.CUST_CD AND M110.CTR_CD = ZTBDelivery.CTR_CD WHERE ZTBDelivery.CTR_CD = ''${DATA.CTR_CD}'' ) AS XX  ) src pivot (   SUM(DELIVERED_AMOUNT)   for DELIVERY_DATE in (' + @cols + ') ) piv 
WHERE (' + @cols3 + ') <>0 ORDER BY DELIVERED_AMOUNT DESC;' 
    print(@query)
    execute(@query)
    `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.selectcustomerList = async (req, res, DATA) => {
  let kqua;
  let query = `SELECT DISTINCT CUST_CD , CUST_NAME_KD  FROM M110 WHERE CTR_CD='${DATA.CTR_CD}' AND CUST_TYPE ='KH' ORDER BY CUST_NAME_KD ASC`;
  kqua = await queryDB(query);
  ////console.log(kqua);
  res.send(kqua);
};
exports.yearlyoverduedata = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
  DECLARE @D_P int;
  set @D_P =${DATA.D_PLUS};
  WITH DLVRDATA AS
  (
  SELECT  ZTBDelivery.DELIVERY_ID, ZTBDelivery.CUST_CD,M110.CUST_NAME_KD,ZTBDelivery.EMPL_NO,M010.EMPL_NAME,ZTBDelivery.G_CODE,M100.G_NAME,M100.G_NAME_KD,ZTBPOTable.PO_ID, ZTBDelivery.PO_NO,ZTBPOTable.PO_DATE, ZTBPOTable.RD_DATE,DATEDIFF(day, ZTBPOTable.PO_DATE,ZTBPOTable.RD_DATE) AS D_PLUS, ZTBDelivery.DELIVERY_DATE,ZTBDelivery.DELIVERY_QTY,isnull(ZTBPOTable.BEP,0) AS BEP, ZTBPOTable.PROD_PRICE,  (ZTBDelivery.DELIVERY_QTY*ZTBPOTable.PROD_PRICE) AS DELIVERED_AMOUNT,(isnull(ZTBPOTable.BEP,0)*ZTBPOTable.PROD_PRICE) AS DELIVERED_BEP_AMOUNT ,ZTBDelivery.REMARK,ZTBDelivery.INVOICE_NO,M100.PROD_MAIN_MATERIAL,M100.PROD_TYPE,M100.PROD_MODEL,M100.PROD_PROJECT, DATEPART(YEAR,DELIVERY_DATE) AS YEARNUM,DATEPART(ISOWK,DELIVERY_DATE) AS WEEKNUM,DATEPART(MONTH,DELIVERY_DATE) AS MONTHNUM, CASE WHEN ZTBPOTable.RD_DATE < ZTBDelivery.DELIVERY_DATE THEN 'OVER' ELSE 'OK' END AS OVERDUE, ZTBDelivery.CTR_CD
            FROM ZTBDelivery
            LEFT JOIN M110 ON (M110.CUST_CD = ZTBDelivery.CUST_CD AND M110.CTR_CD = ZTBDelivery.CTR_CD)
            LEFT JOIN M010 ON (M010.EMPL_NO = ZTBDelivery.EMPL_NO AND M010.CTR_CD = ZTBDelivery.CTR_CD)
            LEFT JOIN M100 ON (M100.G_CODE = ZTBDelivery.G_CODE AND M100.CTR_CD = ZTBDelivery.CTR_CD)
            LEFT JOIN ZTBPOTable ON (ZTBDelivery.PO_NO = ZTBPOTable.PO_NO AND ZTBDelivery.G_CODE = ZTBPOTable.G_CODE AND ZTBDelivery.CUST_CD = ZTBPOTable.CUST_CD AND ZTBDelivery.CTR_CD = ZTBPOTable.CTR_CD)
            WHERE ZTBDelivery.DELIVERY_DATE BETWEEN '${DATA.START_DATE}' AND '${DATA.END_DATE}' AND ZTBDelivery.CTR_CD='${DATA.CTR_CD}'
  )
  SELECT YEARNUM,  COUNT (DELIVERY_ID) AS TOTAL_IV, COUNT (CASE WHEN (OVERDUE = 'OK' OR D_PLUS<=@D_P) THEN 1 ELSE null END) AS OK_IV, COUNT (CASE WHEN OVERDUE = 'OVER' AND D_PLUS>@D_P THEN 1 ELSE null END) AS OVER_IV FROM DLVRDATA GROUP BY YEARNUM ORDER BY YEARNUM DESC
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.monthlyoverduedata = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
  DECLARE @D_P int;
  set @D_P =${DATA.D_PLUS};
  WITH DLVRDATA AS
  (
  SELECT  ZTBDelivery.DELIVERY_ID, ZTBDelivery.CUST_CD,M110.CUST_NAME_KD,ZTBDelivery.EMPL_NO,M010.EMPL_NAME,ZTBDelivery.G_CODE,M100.G_NAME,M100.G_NAME_KD,ZTBPOTable.PO_ID, ZTBDelivery.PO_NO,ZTBPOTable.PO_DATE, ZTBPOTable.RD_DATE,DATEDIFF(day, ZTBPOTable.PO_DATE,ZTBPOTable.RD_DATE) AS D_PLUS, ZTBDelivery.DELIVERY_DATE,ZTBDelivery.DELIVERY_QTY,isnull(ZTBPOTable.BEP,0) AS BEP, ZTBPOTable.PROD_PRICE,  (ZTBDelivery.DELIVERY_QTY*ZTBPOTable.PROD_PRICE) AS DELIVERED_AMOUNT,(isnull(ZTBPOTable.BEP,0)*ZTBPOTable.PROD_PRICE) AS DELIVERED_BEP_AMOUNT ,ZTBDelivery.REMARK,ZTBDelivery.INVOICE_NO,M100.PROD_MAIN_MATERIAL,M100.PROD_TYPE,M100.PROD_MODEL,M100.PROD_PROJECT, DATEPART(YEAR,DELIVERY_DATE) AS YEARNUM,DATEPART(ISOWK,DELIVERY_DATE) AS WEEKNUM,DATEPART(MONTH,DELIVERY_DATE) AS MONTHNUM, CASE WHEN ZTBPOTable.RD_DATE < ZTBDelivery.DELIVERY_DATE THEN 'OVER' ELSE 'OK' END AS OVERDUE, ZTBDelivery.CTR_CD
            FROM ZTBDelivery
            LEFT JOIN M110 ON (M110.CUST_CD = ZTBDelivery.CUST_CD AND M110.CTR_CD = ZTBDelivery.CTR_CD)
            LEFT JOIN M010 ON (M010.EMPL_NO = ZTBDelivery.EMPL_NO AND M010.CTR_CD = ZTBDelivery.CTR_CD)
            LEFT JOIN M100 ON (M100.G_CODE = ZTBDelivery.G_CODE AND M100.CTR_CD = ZTBDelivery.CTR_CD)
            LEFT JOIN ZTBPOTable ON (ZTBDelivery.PO_NO = ZTBPOTable.PO_NO AND ZTBDelivery.G_CODE = ZTBPOTable.G_CODE AND ZTBDelivery.CUST_CD = ZTBPOTable.CUST_CD AND ZTBDelivery.CTR_CD = ZTBPOTable.CTR_CD)
            WHERE ZTBDelivery.DELIVERY_DATE BETWEEN '${DATA.START_DATE}' AND '${DATA.END_DATE}' AND ZTBDelivery.CTR_CD='${DATA.CTR_CD}'
  )
  SELECT CONCAT(YEARNUM,'_', MONTHNUM) AS DEL_YM,YEARNUM, MONTHNUM, COUNT (DELIVERY_ID) AS TOTAL_IV, COUNT (CASE WHEN (OVERDUE = 'OK' OR D_PLUS<=@D_P) THEN 1 ELSE null END) AS OK_IV, COUNT (CASE WHEN OVERDUE = 'OVER' AND D_PLUS>@D_P THEN 1 ELSE null END) AS OVER_IV FROM DLVRDATA GROUP BY CONCAT(YEARNUM,'_', MONTHNUM), YEARNUM ,MONTHNUM ORDER BY YEARNUM DESC,MONTHNUM DESC
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.weeklyoverduedata = async (req, res, DATA) => {

  let checkkq = "OK";
  let setpdQuery = `
  DECLARE @D_P int;
  set @D_P =${DATA.D_PLUS};
  WITH DLVRDATA AS
  (
  SELECT  ZTBDelivery.DELIVERY_ID, ZTBDelivery.CUST_CD,M110.CUST_NAME_KD,ZTBDelivery.EMPL_NO,M010.EMPL_NAME,ZTBDelivery.G_CODE,M100.G_NAME,M100.G_NAME_KD,ZTBPOTable.PO_ID, ZTBDelivery.PO_NO,ZTBPOTable.PO_DATE, ZTBPOTable.RD_DATE,DATEDIFF(day, ZTBPOTable.PO_DATE,ZTBPOTable.RD_DATE) AS D_PLUS, ZTBDelivery.DELIVERY_DATE,ZTBDelivery.DELIVERY_QTY,isnull(ZTBPOTable.BEP,0) AS BEP, ZTBPOTable.PROD_PRICE,  (ZTBDelivery.DELIVERY_QTY*ZTBPOTable.PROD_PRICE) AS DELIVERED_AMOUNT,(isnull(ZTBPOTable.BEP,0)*ZTBPOTable.PROD_PRICE) AS DELIVERED_BEP_AMOUNT ,ZTBDelivery.REMARK,ZTBDelivery.INVOICE_NO,M100.PROD_MAIN_MATERIAL,M100.PROD_TYPE,M100.PROD_MODEL,M100.PROD_PROJECT, DATEPART(YEAR,DELIVERY_DATE) AS YEARNUM,DATEPART(ISOWK,DELIVERY_DATE) AS WEEKNUM,CASE WHEN ZTBPOTable.RD_DATE < ZTBDelivery.DELIVERY_DATE THEN 'OVER' ELSE 'OK' END AS OVERDUE, ZTBDelivery.CTR_CD
            FROM ZTBDelivery
            LEFT JOIN M110 ON (M110.CUST_CD = ZTBDelivery.CUST_CD AND M110.CTR_CD = ZTBDelivery.CTR_CD)
            LEFT JOIN M010 ON (M010.EMPL_NO = ZTBDelivery.EMPL_NO AND M010.CTR_CD = ZTBDelivery.CTR_CD)
            LEFT JOIN M100 ON (M100.G_CODE = ZTBDelivery.G_CODE AND M100.CTR_CD = ZTBDelivery.CTR_CD)
            LEFT JOIN ZTBPOTable ON (ZTBDelivery.PO_NO = ZTBPOTable.PO_NO AND ZTBDelivery.G_CODE = ZTBPOTable.G_CODE AND ZTBDelivery.CUST_CD = ZTBPOTable.CUST_CD AND ZTBDelivery.CTR_CD = ZTBPOTable.CTR_CD)
            WHERE ZTBDelivery.DELIVERY_DATE BETWEEN '${DATA.START_DATE}' AND '${DATA.END_DATE}' AND ZTBDelivery.CTR_CD='${DATA.CTR_CD}'
  )
  SELECT CONCAT(YEARNUM,'_', WEEKNUM) AS DEL_YW,YEARNUM, WEEKNUM, COUNT (DELIVERY_ID) AS TOTAL_IV, COUNT (CASE WHEN (OVERDUE = 'OK' OR D_PLUS<=@D_P) THEN 1 ELSE null END) AS OK_IV, COUNT (CASE WHEN OVERDUE = 'OVER' AND D_PLUS>@D_P THEN 1 ELSE null END) AS OVER_IV FROM DLVRDATA GROUP BY CONCAT(YEARNUM,'_', WEEKNUM), YEARNUM ,WEEKNUM ORDER BY YEARNUM DESC,WEEKNUM DESC
  `;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.dailyoverduedata = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `
  DECLARE @D_P int;
  set @D_P =${DATA.D_PLUS};
  WITH DLVRDATA AS
  (
  SELECT  ZTBDelivery.DELIVERY_ID, ZTBDelivery.CUST_CD,M110.CUST_NAME_KD,ZTBDelivery.EMPL_NO,M010.EMPL_NAME,ZTBDelivery.G_CODE,M100.G_NAME,M100.G_NAME_KD,ZTBPOTable.PO_ID, ZTBDelivery.PO_NO,ZTBPOTable.PO_DATE, ZTBPOTable.RD_DATE, DATEDIFF(day, ZTBPOTable.PO_DATE,ZTBPOTable.RD_DATE) AS D_PLUS, ZTBDelivery.DELIVERY_DATE,ZTBDelivery.DELIVERY_QTY,isnull(ZTBPOTable.BEP,0) AS BEP, ZTBPOTable.PROD_PRICE,  (ZTBDelivery.DELIVERY_QTY*ZTBPOTable.PROD_PRICE) AS DELIVERED_AMOUNT,(isnull(ZTBPOTable.BEP,0)*ZTBPOTable.PROD_PRICE) AS DELIVERED_BEP_AMOUNT ,ZTBDelivery.REMARK,ZTBDelivery.INVOICE_NO,M100.PROD_MAIN_MATERIAL,M100.PROD_TYPE,M100.PROD_MODEL,M100.PROD_PROJECT, DATEPART(YEAR,DELIVERY_DATE) AS YEARNUM,DATEPART(ISOWK,DELIVERY_DATE) AS WEEKNUM,CASE WHEN ZTBPOTable.RD_DATE < ZTBDelivery.DELIVERY_DATE THEN 'OVER' ELSE 'OK' END AS OVERDUE, ZTBDelivery.CTR_CD
            FROM ZTBDelivery
            LEFT JOIN M110 ON (M110.CUST_CD = ZTBDelivery.CUST_CD AND M110.CTR_CD = ZTBDelivery.CTR_CD)
            LEFT JOIN M010 ON (M010.EMPL_NO = ZTBDelivery.EMPL_NO AND M010.CTR_CD = ZTBDelivery.CTR_CD)
            LEFT JOIN M100 ON (M100.G_CODE = ZTBDelivery.G_CODE AND M100.CTR_CD = ZTBDelivery.CTR_CD)
            LEFT JOIN ZTBPOTable ON (ZTBDelivery.PO_NO = ZTBPOTable.PO_NO AND ZTBDelivery.G_CODE = ZTBPOTable.G_CODE AND ZTBDelivery.CUST_CD = ZTBPOTable.CUST_CD AND ZTBDelivery.CTR_CD = ZTBPOTable.CTR_CD)
            WHERE ZTBDelivery.DELIVERY_DATE BETWEEN '${DATA.START_DATE}' AND '${DATA.END_DATE}' AND ZTBDelivery.CTR_CD='${DATA.CTR_CD}'
  )
  SELECT DELIVERY_DATE, COUNT (DELIVERY_ID) AS TOTAL_IV, COUNT (CASE WHEN OVERDUE = 'OK' OR D_PLUS <=@D_P THEN 1 ELSE null END) AS OK_IV, COUNT (CASE WHEN OVERDUE = 'OVER'  AND D_PLUS>@D_P THEN 1 ELSE null END) AS OVER_IV FROM DLVRDATA GROUP BY DELIVERY_DATE ORDER BY DELIVERY_DATE DESC
  `;
  ///console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.PICRevenue = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = ` SELECT * FROM (
                    SELECT AA.EMPL_NAME, SUM(AA.DELIVERY_AMOUNT) AS DELIVERY_AMOUNT FROM 
                    (SELECT M010.EMPL_NAME, ZTBDelivery.G_CODE,ZTBDelivery.DELIVERY_QTY,ZTBDelivery.DELIVERY_DATE, M110.CUST_NAME_KD, (ZTBDelivery.DELIVERY_QTY * ZTBPOTable.PROD_PRICE) AS DELIVERY_AMOUNT
                    FROM ZTBDelivery
                    LEFT JOIN M110 ON (ZTBDelivery.CUST_CD = M110.CUST_CD AND ZTBDelivery.CTR_CD = M110.CTR_CD)
                    LEFT JOIN M010 ON (ZTBDelivery.EMPL_NO = M010.EMPL_NO AND ZTBDelivery.CTR_CD = M010.CTR_CD)
                    LEFT JOIN ZTBPOTable ON (ZTBDelivery.CUST_CD = ZTBPOTable.CUST_CD AND ZTBDelivery.G_CODE = ZTBPOTable.G_CODE AND ZTBDelivery.PO_NO = ZTBPOTable.PO_NO AND ZTBDelivery.CTR_CD = ZTBPOTable.CTR_CD)
                    WHERE ZTBDelivery.CTR_CD='${DATA.CTR_CD}' AND DELIVERY_DATE BETWEEN '${DATA.START_DATE}' AND '${DATA.END_DATE}') AS AA
                    GROUP BY AA.EMPL_NAME) AS BB
                    ORDER BY BB.DELIVERY_AMOUNT DESC`;
  ////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.customerRevenue = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = ` SELECT * FROM (
                    SELECT AA.CUST_NAME_KD, SUM(AA.DELIVERY_AMOUNT) AS DELIVERY_AMOUNT FROM 
                    (SELECT M010.EMPL_NAME, ZTBDelivery.G_CODE,ZTBDelivery.DELIVERY_QTY,ZTBDelivery.DELIVERY_DATE, M110.CUST_NAME_KD, (ZTBDelivery.DELIVERY_QTY * ZTBPOTable.PROD_PRICE) AS DELIVERY_AMOUNT
                    FROM ZTBDelivery
                    LEFT JOIN M110 ON (ZTBDelivery.CUST_CD = M110.CUST_CD AND ZTBDelivery.CTR_CD = M110.CTR_CD)
                    LEFT JOIN M010 ON (ZTBDelivery.EMPL_NO = M010.EMPL_NO AND ZTBDelivery.CTR_CD = M010.CTR_CD)
                    LEFT JOIN ZTBPOTable ON (ZTBDelivery.CUST_CD = ZTBPOTable.CUST_CD AND ZTBDelivery.G_CODE = ZTBPOTable.G_CODE AND ZTBDelivery.PO_NO = ZTBPOTable.PO_NO AND ZTBDelivery.CTR_CD = ZTBPOTable.CTR_CD)
                    WHERE ZTBDelivery.CTR_CD='${DATA.CTR_CD}' AND DELIVERY_DATE BETWEEN '${DATA.START_DATE}' AND '${DATA.END_DATE}') AS AA
                    GROUP BY AA.CUST_NAME_KD) AS BB
                    ORDER BY BB.DELIVERY_AMOUNT DESC `;
  ////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.traPOSummaryTotal = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `  SELECT  SUM(cast(ZTBPOTable.PO_QTY as bigint)) As PO_QTY, SUM(cast(AA.TotalDelivered as bigint)) as TOTAL_DELIVERED, SUM(cast((ZTBPOTable.PO_QTY-AA.TotalDelivered) as bigint)) As PO_BALANCE,SUM((ZTBPOTable.PO_QTY*ZTBPOTable.PROD_PRICE)) As PO_AMOUNT , SUM((AA.TotalDelivered*ZTBPOTable.PROD_PRICE)) As DELIVERED_AMOUNT, SUM(((ZTBPOTable.PO_QTY-AA.TotalDelivered)*ZTBPOTable.PROD_PRICE)) As BALANCE_AMOUNT FROM (SELECT ZTBPOTable.CTR_CD, ZTBPOTable.EMPL_NO, ZTBPOTable.CUST_CD, ZTBPOTable.G_CODE, ZTBPOTable.PO_NO, isnull(SUM(ZTBDelivery.DELIVERY_QTY),0) AS TotalDelivered FROM ZTBPOTable  LEFT JOIN ZTBDelivery  ON (ZTBDelivery.CTR_CD = ZTBPOTable.CTR_CD AND ZTBDelivery.CUST_CD = ZTBPOTable.CUST_CD AND ZTBDelivery.G_CODE = ZTBPOTable.G_CODE AND ZTBDelivery.PO_NO = ZTBPOTable.PO_NO)  GROUP BY ZTBPOTable.CTR_CD,ZTBPOTable.EMPL_NO,ZTBPOTable.G_CODE,ZTBPOTable.CUST_CD,ZTBPOTable.PO_NO) AS AA LEFT JOIN M010 ON (M010.EMPL_NO = AA.EMPL_NO AND M010.CTR_CD = AA.CTR_CD) LEFT JOIN M100 ON (M100.G_CODE = AA.G_CODE AND M100.CTR_CD = AA.CTR_CD) LEFT JOIN ZTBPOTable ON (AA.CUST_CD = ZTBPOTable.CUST_CD AND AA.G_CODE = ZTBPOTable.G_CODE AND AA.PO_NO = ZTBPOTable.PO_NO AND AA.CTR_CD = ZTBPOTable.CTR_CD)  JOIN M110 ON (M110.CUST_CD = AA.CUST_CD AND M110.CTR_CD = AA.CTR_CD) WHERE ZTBPOTable.CTR_CD='${DATA.CTR_CD}'`;
  ////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.kd_annuallyclosing = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = ` DECLARE @FROM_DATE date;
DECLARE @TO_DATE date;
DECLARE @KPI_NAME varchar(100);
DECLARE @CTR_CD  varchar(3);

SET @FROM_DATE = '${DATA.START_DATE}';
SET @TO_DATE = '${DATA.END_DATE}';
SET @KPI_NAME = 'DoanhThu';
SET @CTR_CD ='${DATA.CTR_CD}';

WITH DateRange AS (
    -- Lấy các ngày từ DATETABLE trong khoảng FROM_DATE đến TO_DATE
    SELECT 
        DATE_COLUMN AS KPI_DATE
    FROM DATETABLE
    WHERE DATE_COLUMN BETWEEN CAST(@FROM_DATE AS DATE) AND CAST(@TO_DATE AS DATE)
),
WorkingDays AS (
    -- Tính số ngày làm việc (trừ Chủ Nhật) cho toàn bộ tháng
    SELECT 
        YEAR(DATE_COLUMN) AS KPI_YEAR,
        MONTH(DATE_COLUMN) AS KPI_MONTH,
        COUNT(*) AS WORKING_DAYS
    FROM DATETABLE
    WHERE DATEPART(dw, DATE_COLUMN) != 1  -- Loại bỏ Chủ Nhật
    AND DATE_COLUMN BETWEEN 
        DATEADD(month, DATEDIFF(month, 0, CAST(@FROM_DATE AS DATE)), 0) 
        AND EOMONTH(CAST(@TO_DATE AS DATE))
    GROUP BY YEAR(DATE_COLUMN), MONTH(DATE_COLUMN)
),
KPI_TB AS
(
SELECT 
    d.KPI_DATE,
    CASE 
        WHEN DATEPART(dw, d.KPI_DATE) = 1 THEN 0  -- Chủ Nhật
        WHEN k.VALUE_TYPE = 'Number' THEN 
            ISNULL(k.KPI_VALUE / NULLIF(w.WORKING_DAYS, 0), 0)
        WHEN k.VALUE_TYPE = 'Percentage' THEN 
            ISNULL(k.KPI_VALUE, 0)
        ELSE 0
    END AS KPI_VALUE
FROM DateRange d
LEFT JOIN ZTB_KPI_TB k 
    ON k.KPI_YEAR = YEAR(d.KPI_DATE)
    AND k.KPI_MONTH = MONTH(d.KPI_DATE)
LEFT JOIN WorkingDays w
    ON w.KPI_YEAR = YEAR(d.KPI_DATE)
    AND w.KPI_MONTH = MONTH(d.KPI_DATE)
WHERE  k.KPI_NAME= @KPI_NAME
),
DATETB AS
(
SELECT * FROM DATETABLE WHERE DATE_COLUMN BETWEEN @FROM_DATE  AND @TO_DATE
),
DAILY_CLOSING_TB AS
(
SELECT  ZTBDelivery.DELIVERY_DATE, SUM(ZTBDelivery.DELIVERY_QTY) AS DELIVERY_QTY, SUM((ZTBDelivery.DELIVERY_QTY * ZTBPOTable.PROD_PRICE)) AS DELIVERED_AMOUNT 
FROM ZTBDelivery 
LEFT JOIN ZTBPOTable ON (ZTBPOTable.CTR_CD = ZTBDelivery.CTR_CD AND ZTBPOTable.CUST_CD = ZTBDelivery.CUST_CD AND ZTBPOTable.G_CODE = ZTBDelivery.G_CODE AND ZTBPOTable.PO_NO = ZTBDelivery.PO_NO)
WHERE ZTBDelivery.CTR_CD= @CTR_CD AND ZTBDelivery.DELIVERY_DATE BETWEEN @FROM_DATE AND  @TO_DATE
GROUP BY DELIVERY_DATE
)
SELECT  YEAR(DATETB.DATE_COLUMN) AS YEAR_NUM, SUM(isnull(DELIVERY_QTY,0)) AS DELIVERY_QTY, SUM(isnull(DELIVERED_AMOUNT,0)) AS DELIVERED_AMOUNT, SUM(isnull(KPI_VALUE,0)) AS KPI_VALUE 
FROM DATETB LEFT JOIN
DAILY_CLOSING_TB ON DATETB.DATE_COLUMN = DAILY_CLOSING_TB.DELIVERY_DATE 
LEFT JOIN KPI_TB ON KPI_TB.KPI_DATE =DATETB.DATE_COLUMN
GROUP BY YEAR(DATETB.DATE_COLUMN)
ORDER BY YEAR(DATETB.DATE_COLUMN) ASC `;
  ////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  ////console.log(checkkq);
  res.send(checkkq);
};
exports.kd_monthlyclosing = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = ` DECLARE @FROM_DATE date;
DECLARE @TO_DATE date;
DECLARE @KPI_NAME varchar(100);
DECLARE @CTR_CD  varchar(3);

SET @FROM_DATE = '${DATA.START_DATE}';
SET @TO_DATE = '${DATA.END_DATE}';
SET @KPI_NAME = 'DoanhThu';
SET @CTR_CD ='${DATA.CTR_CD}';

WITH DateRange AS (
    -- Lấy các ngày từ DATETABLE trong khoảng FROM_DATE đến TO_DATE
    SELECT 
        DATE_COLUMN AS KPI_DATE
    FROM DATETABLE
    WHERE DATE_COLUMN BETWEEN CAST(@FROM_DATE AS DATE) AND CAST(@TO_DATE AS DATE)
),
WorkingDays AS (
    -- Tính số ngày làm việc (trừ Chủ Nhật) cho toàn bộ tháng
    SELECT 
        YEAR(DATE_COLUMN) AS KPI_YEAR,
        MONTH(DATE_COLUMN) AS KPI_MONTH,
        COUNT(*) AS WORKING_DAYS
    FROM DATETABLE
    WHERE DATEPART(dw, DATE_COLUMN) != 1  -- Loại bỏ Chủ Nhật
    AND DATE_COLUMN BETWEEN 
        DATEADD(month, DATEDIFF(month, 0, CAST(@FROM_DATE AS DATE)), 0) 
        AND EOMONTH(CAST(@TO_DATE AS DATE))
    GROUP BY YEAR(DATE_COLUMN), MONTH(DATE_COLUMN)
),
KPI_TB AS
(
SELECT 
    d.KPI_DATE,
    CASE 
        WHEN DATEPART(dw, d.KPI_DATE) = 1 THEN 0  -- Chủ Nhật
        WHEN k.VALUE_TYPE = 'Number' THEN 
            ISNULL(k.KPI_VALUE / NULLIF(w.WORKING_DAYS, 0), 0)
        WHEN k.VALUE_TYPE = 'Percentage' THEN 
            ISNULL(k.KPI_VALUE, 0)
        ELSE 0
    END AS KPI_VALUE
FROM DateRange d
LEFT JOIN ZTB_KPI_TB k 
    ON k.KPI_YEAR = YEAR(d.KPI_DATE)
    AND k.KPI_MONTH = MONTH(d.KPI_DATE)
LEFT JOIN WorkingDays w
    ON w.KPI_YEAR = YEAR(d.KPI_DATE)
    AND w.KPI_MONTH = MONTH(d.KPI_DATE)
WHERE  k.KPI_NAME= @KPI_NAME
),
DATETB AS
(
SELECT * FROM DATETABLE WHERE DATE_COLUMN BETWEEN @FROM_DATE  AND @TO_DATE
),
DAILY_CLOSING_TB AS
(
SELECT  ZTBDelivery.DELIVERY_DATE, SUM(ZTBDelivery.DELIVERY_QTY) AS DELIVERY_QTY, SUM((ZTBDelivery.DELIVERY_QTY * ZTBPOTable.PROD_PRICE)) AS DELIVERED_AMOUNT 
FROM ZTBDelivery 
LEFT JOIN ZTBPOTable ON (ZTBPOTable.CTR_CD = ZTBDelivery.CTR_CD AND ZTBPOTable.CUST_CD = ZTBDelivery.CUST_CD AND ZTBPOTable.G_CODE = ZTBDelivery.G_CODE AND ZTBPOTable.PO_NO = ZTBDelivery.PO_NO)
WHERE ZTBDelivery.CTR_CD= @CTR_CD AND ZTBDelivery.DELIVERY_DATE BETWEEN @FROM_DATE AND  @TO_DATE
GROUP BY DELIVERY_DATE
)
SELECT  CONCAT(YEAR(DATETB.DATE_COLUMN),'_', MONTH(DATETB.DATE_COLUMN)) AS MONTH_YW, YEAR(DATETB.DATE_COLUMN) AS MONTH_YEAR, MONTH(DATETB.DATE_COLUMN) AS MONTH_NUM, SUM(isnull(DELIVERY_QTY,0)) AS DELIVERY_QTY, SUM(isnull(DELIVERED_AMOUNT,0)) AS DELIVERED_AMOUNT, SUM(isnull(KPI_VALUE,0)) AS KPI_VALUE 
FROM DATETB LEFT JOIN
DAILY_CLOSING_TB ON DATETB.DATE_COLUMN = DAILY_CLOSING_TB.DELIVERY_DATE 
LEFT JOIN KPI_TB ON KPI_TB.KPI_DATE =DATETB.DATE_COLUMN
GROUP BY YEAR(DATETB.DATE_COLUMN), MONTH(DATETB.DATE_COLUMN) 
ORDER BY YEAR(DATETB.DATE_COLUMN) DESC, MONTH(DATETB.DATE_COLUMN) DESC`;
  checkkq = await queryDB(setpdQuery);
  ////console.log(checkkq);
  res.send(checkkq);
};
exports.kd_weeklyclosing = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = ` DECLARE @FROM_DATE date;
DECLARE @TO_DATE date;
DECLARE @KPI_NAME varchar(100);
DECLARE @CTR_CD  varchar(3);

SET @FROM_DATE = '${DATA.START_DATE}';
SET @TO_DATE = '${DATA.END_DATE}';
SET @KPI_NAME = 'DoanhThu';
SET @CTR_CD ='${DATA.CTR_CD}';

WITH DateRange AS (
    -- Lấy các ngày từ DATETABLE trong khoảng FROM_DATE đến TO_DATE
    SELECT 
        DATE_COLUMN AS KPI_DATE
    FROM DATETABLE
    WHERE DATE_COLUMN BETWEEN CAST(@FROM_DATE AS DATE) AND CAST(@TO_DATE AS DATE)
),
WorkingDays AS (
    -- Tính số ngày làm việc (trừ Chủ Nhật) cho toàn bộ tháng
    SELECT 
        YEAR(DATE_COLUMN) AS KPI_YEAR,
        MONTH(DATE_COLUMN) AS KPI_MONTH,
        COUNT(*) AS WORKING_DAYS
    FROM DATETABLE
    WHERE DATEPART(dw, DATE_COLUMN) != 1  -- Loại bỏ Chủ Nhật
    AND DATE_COLUMN BETWEEN 
        DATEADD(month, DATEDIFF(month, 0, CAST(@FROM_DATE AS DATE)), 0) 
        AND EOMONTH(CAST(@TO_DATE AS DATE))
    GROUP BY YEAR(DATE_COLUMN), MONTH(DATE_COLUMN)
),
KPI_TB AS
(
SELECT 
    d.KPI_DATE,
    CASE 
        WHEN DATEPART(dw, d.KPI_DATE) = 1 THEN 0  -- Chủ Nhật
        WHEN k.VALUE_TYPE = 'Number' THEN 
            ISNULL(k.KPI_VALUE / NULLIF(w.WORKING_DAYS, 0), 0)
        WHEN k.VALUE_TYPE = 'Percentage' THEN 
            ISNULL(k.KPI_VALUE, 0)
        ELSE 0
    END AS KPI_VALUE
FROM DateRange d
LEFT JOIN ZTB_KPI_TB k 
    ON k.KPI_YEAR = YEAR(d.KPI_DATE)
    AND k.KPI_MONTH = MONTH(d.KPI_DATE)
LEFT JOIN WorkingDays w
    ON w.KPI_YEAR = YEAR(d.KPI_DATE)
    AND w.KPI_MONTH = MONTH(d.KPI_DATE)
WHERE  k.KPI_NAME= @KPI_NAME
),
DATETB AS
(
SELECT * FROM DATETABLE WHERE DATE_COLUMN BETWEEN @FROM_DATE  AND @TO_DATE
),
DAILY_CLOSING_TB AS
(
SELECT  ZTBDelivery.DELIVERY_DATE, SUM(ZTBDelivery.DELIVERY_QTY) AS DELIVERY_QTY, SUM((ZTBDelivery.DELIVERY_QTY * ZTBPOTable.PROD_PRICE)) AS DELIVERED_AMOUNT 
FROM ZTBDelivery 
LEFT JOIN ZTBPOTable ON (ZTBPOTable.CTR_CD = ZTBDelivery.CTR_CD AND ZTBPOTable.CUST_CD = ZTBDelivery.CUST_CD AND ZTBPOTable.G_CODE = ZTBDelivery.G_CODE AND ZTBPOTable.PO_NO = ZTBDelivery.PO_NO)
WHERE ZTBDelivery.CTR_CD= @CTR_CD AND ZTBDelivery.DELIVERY_DATE BETWEEN @FROM_DATE AND  @TO_DATE
GROUP BY DELIVERY_DATE
)

SELECT  CONCAT(DATEPART(YYYY, DATEADD(day,1,DATETB.DATE_COLUMN)),'_',DATEPART( ISOWK, DATEADD(day,1,DATETB.DATE_COLUMN))) AS DEL_YW, DATEPART(YYYY, DATEADD(day,1,DATETB.DATE_COLUMN)) AS DEL_YEAR, DATEPART( ISOWK, DATEADD(day,1,DATETB.DATE_COLUMN)) AS DEL_WEEK, SUM(isnull(DELIVERY_QTY,0)) AS DELIVERY_QTY, SUM(isnull(DELIVERED_AMOUNT,0)) AS DELIVERED_AMOUNT, SUM(isnull(KPI_VALUE,0)) AS KPI_VALUE 
FROM DATETB LEFT JOIN
DAILY_CLOSING_TB ON DATETB.DATE_COLUMN = DAILY_CLOSING_TB.DELIVERY_DATE
LEFT JOIN KPI_TB ON KPI_TB.KPI_DATE =DATETB.DATE_COLUMN
GROUP BY DATEPART(YYYY, DATEADD(day,1,DATETB.DATE_COLUMN)), DATEPART( ISOWK, DATEADD(day,1,DATETB.DATE_COLUMN)) 
ORDER BY DATEPART(YYYY, DATEADD(day,1,DATETB.DATE_COLUMN)) DESC, DATEPART( ISOWK, DATEADD(day,1,DATETB.DATE_COLUMN)) DESC`;
  checkkq = await queryDB(setpdQuery);
  ////console.log(checkkq);
  res.send(checkkq);
};
exports.kd_dailyclosing = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = ` -- daily closing
DECLARE @FROM_DATE date;
DECLARE @TO_DATE date;
DECLARE @KPI_NAME varchar(100);
DECLARE @CTR_CD  varchar(3);

SET @FROM_DATE = '${DATA.START_DATE}';
SET @TO_DATE = '${DATA.END_DATE}';
SET @KPI_NAME = 'DoanhThu';
SET @CTR_CD ='${DATA.CTR_CD}';

WITH DateRange AS (
    -- Lấy các ngày từ DATETABLE trong khoảng FROM_DATE đến TO_DATE
    SELECT 
        DATE_COLUMN AS KPI_DATE
    FROM DATETABLE
    WHERE DATE_COLUMN BETWEEN CAST(@FROM_DATE AS DATE) AND CAST(@TO_DATE AS DATE)
),
WorkingDays AS (
    -- Tính số ngày làm việc (trừ Chủ Nhật) cho toàn bộ tháng
    SELECT 
        YEAR(DATE_COLUMN) AS KPI_YEAR,
        MONTH(DATE_COLUMN) AS KPI_MONTH,
        COUNT(*) AS WORKING_DAYS
    FROM DATETABLE
    WHERE DATEPART(dw, DATE_COLUMN) != 1  -- Loại bỏ Chủ Nhật
    AND DATE_COLUMN BETWEEN 
        DATEADD(month, DATEDIFF(month, 0, CAST(@FROM_DATE AS DATE)), 0) 
        AND EOMONTH(CAST(@TO_DATE AS DATE))
    GROUP BY YEAR(DATE_COLUMN), MONTH(DATE_COLUMN)
),
KPI_TB AS
(
SELECT 
    d.KPI_DATE,
    CASE 
        WHEN DATEPART(dw, d.KPI_DATE) = 1 THEN 0  -- Chủ Nhật
        WHEN k.VALUE_TYPE = 'Number' THEN 
            ISNULL(k.KPI_VALUE / NULLIF(w.WORKING_DAYS, 0), 0)
        WHEN k.VALUE_TYPE = 'Percentage' THEN 
            ISNULL(k.KPI_VALUE, 0)
        ELSE 0
    END AS KPI_VALUE
FROM DateRange d
LEFT JOIN ZTB_KPI_TB k 
    ON k.KPI_YEAR = YEAR(d.KPI_DATE)
    AND k.KPI_MONTH = MONTH(d.KPI_DATE)
LEFT JOIN WorkingDays w
    ON w.KPI_YEAR = YEAR(d.KPI_DATE)
    AND w.KPI_MONTH = MONTH(d.KPI_DATE)
WHERE  k.KPI_NAME= @KPI_NAME
),
DATETB AS
(
SELECT * FROM DATETABLE WHERE DATE_COLUMN BETWEEN @FROM_DATE  AND @TO_DATE
),
DAILY_CLOSING_TB AS
(
SELECT  ZTBDelivery.DELIVERY_DATE, SUM(ZTBDelivery.DELIVERY_QTY) AS DELIVERY_QTY, SUM((ZTBDelivery.DELIVERY_QTY * ZTBPOTable.PROD_PRICE)) AS DELIVERED_AMOUNT 
FROM ZTBDelivery 
LEFT JOIN ZTBPOTable ON (ZTBPOTable.CTR_CD = ZTBDelivery.CTR_CD AND ZTBPOTable.CUST_CD = ZTBDelivery.CUST_CD AND ZTBPOTable.G_CODE = ZTBDelivery.G_CODE AND ZTBPOTable.PO_NO = ZTBDelivery.PO_NO)
WHERE ZTBDelivery.CTR_CD= @CTR_CD AND ZTBDelivery.DELIVERY_DATE BETWEEN @FROM_DATE AND  @TO_DATE
GROUP BY DELIVERY_DATE
)
SELECT DATETB.DATE_COLUMN AS DELIVERY_DATE, isnull(DAILY_CLOSING_TB.DELIVERY_QTY,0) AS DELIVERY_QTY,isnull(DAILY_CLOSING_TB.DELIVERED_AMOUNT,0) AS DELIVERED_AMOUNT, isnull(KPI_TB.KPI_VALUE,0) AS KPI_VALUE FROM 
DATETB LEFT JOIN
DAILY_CLOSING_TB ON DATETB.DATE_COLUMN = DAILY_CLOSING_TB.DELIVERY_DATE
LEFT JOIN KPI_TB ON KPI_TB.KPI_DATE =DATETB.DATE_COLUMN
ORDER BY  DELIVERY_DATE ASC `;
  ////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  ////console.log(checkkq);
  res.send(checkkq);
};
exports.fcstamount = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `SELECT FCSTYEAR,FCSTWEEKNO, SUM(W1+W2+W3+W4) AS FCST4W_QTY,  SUM((W1+W2+W3+W4)*PROD_PRICE) AS FCST4W_AMOUNT,SUM(W1+W2+W3+W4+W5+W6+W7+W8) AS FCST8W_QTY,  SUM((W1+W2+W3+W4+W5+W6+W7+W8)*PROD_PRICE) AS FCST8W_AMOUNT  FROM ZTBFCSTTB
                WHERE FCSTYEAR=${DATA.FCSTYEAR} AND FCSTWEEKNO=${DATA.FCSTWEEKNO} AND ZTBFCSTTB.CTR_CD='${DATA.CTR_CD}'
                GROUP BY FCSTYEAR,FCSTWEEKNO`;
  ////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.checklastfcstweekno = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = ` SELECT TOP 1 * FROM ZTBFCSTTB WHERE CTR_CD='${DATA.CTR_CD}' AND FCSTYEAR = '${DATA.FCSTWEEKNO}' ORDER BY FCSTWEEKNO DESC `;
  //${moment().format('YYYY-MM-DD')}
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.loadxuatkhopo = async (req, res, DATA) => {
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let JOB_NAME = req.payload_data["JOB_NAME"];
  let MAINDEPTNAME = req.payload_data["MAINDEPTNAME"];
  let SUBDEPTNAME = req.payload_data["SUBDEPTNAME"];
  let checkkq = "OK";
  let setpdQuery = `WITH WH_OUT_TB AS
  (
   SELECT  O660.OUT_DATE, O660.G_CODE, O660.CUST_CD, O660.OUT_QTY, O660.CTR_CD, P400.PO_NO,
            CASE WHEN O660.OUT_TYPE='N' THEN 'NORMAL' WHEN O660.OUT_TYPE='F' THEN 'FREE' WHEN O660.OUT_TYPE='L' THEN 'CHANGE LOT' ELSE 'OTHER' END AS OUT_TYPE ,
            CASE WHEN O660.USE_YN='T' THEN 'PREPARING' WHEN O660.USE_YN='Y' THEN 'PREPAIRED' ELSE 'COMPLETED' END AS USE_YN         
            FROM O660          
            LEFT JOIN P400 ON (P400.PROD_REQUEST_NO = O660.PROD_REQUEST_NO AND P400.CTR_CD = O660.CTR_CD)
  ),
  XUATKHOPO AS
  (
  SELECT OUT_DATE, G_CODE, CUST_CD, PO_NO, CTR_CD, SUM(OUT_QTY) AS OUT_QTY FROM WH_OUT_TB
  WHERE OUT_TYPE ='NORMAL' AND USE_YN ='COMPLETED'
  GROUP BY G_CODE, CUST_CD, PO_NO, OUT_DATE, CTR_CD
  ),
  ZTBDLVR AS 
  (SELECT CUST_CD, G_CODE, PO_NO, CTR_CD, SUM(DELIVERY_QTY) AS DELIVERY_QTY FROM ZTBDelivery GROUP BY CUST_CD, G_CODE, PO_NO, CTR_CD),
  POTB AS
  (
  SELECT ZTBPOTable.G_CODE, ZTBPOTable.CUST_CD, ZTBPOTable.PO_NO, ZTBPOTable.CTR_CD, ZTBPOTable.PO_QTY, isnull(ZTBDLVR.DELIVERY_QTY,0) AS DELIVERY_QTY, (ZTBPOTable.PO_QTY-isnull(ZTBDLVR.DELIVERY_QTY,0)) AS PO_BALANCE FROM ZTBPOTable LEFT JOIN ZTBDLVR ON (ZTBPOTable.G_CODE = ZTBDLVR.G_CODE AND ZTBPOTable.CUST_CD = ZTBDLVR.CUST_CD AND ZTBPOTable.PO_NO = ZTBDLVR.PO_NO AND ZTBPOTable.CTR_CD = ZTBDLVR.CTR_CD)
  )
  SELECT M110.CUST_CD, M110.CUST_NAME_KD, XUATKHOPO.G_CODE, M100.G_NAME_KD, M100.G_NAME, CAST(XUATKHOPO.OUT_DATE AS DATE) AS OUT_DATE, XUATKHOPO.PO_NO, POTB.PO_QTY, POTB.DELIVERY_QTY, POTB.PO_BALANCE, XUATKHOPO.OUT_QTY AS THISDAY_OUT_QTY, CASE WHEN POTB.PO_BALANCE is null THEN 'NG- KO CO PO' ELSE CASE WHEN XUATKHOPO.OUT_QTY > POTB.PO_BALANCE THEN 'NG- GIAO NHIEU HON PO BALANCE' ELSE  'OK' END END AS CHECKSTATUS FROM XUATKHOPO 
  LEFT JOIN POTB ON (XUATKHOPO.CUST_CD = POTB.CUST_CD AND XUATKHOPO.G_CODE = POTB.G_CODE AND XUATKHOPO.PO_NO = POTB.PO_NO AND XUATKHOPO.CTR_CD = POTB.CTR_CD)
  LEFT JOIN M100 ON (XUATKHOPO.G_CODE = M100.G_CODE AND XUATKHOPO.CTR_CD = M100.CTR_CD)
  LEFT JOIN M110 ON (XUATKHOPO.CUST_CD = M110.CUST_CD AND XUATKHOPO.CTR_CD = M110.CTR_CD)
  WHERE XUATKHOPO.OUT_DATE = '${DATA.OUT_DATE}' AND XUATKHOPO.CTR_CD='${DATA.CTR_CD}'
  ORDER BY OUT_DATE DESC`;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.delete_fcst = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `DELETE FROM ZTBFCSTTB WHERE CTR_CD='${DATA.CTR_CD}' AND FCST_ID=${DATA.FCST_ID}`;
  //////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  ////console.log(checkkq);
  res.send(checkkq);
};
exports.insert_fcst = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `INSERT INTO ZTBFCSTTB (CTR_CD, EMPL_NO,CUST_CD,G_CODE,PROD_PRICE,FCSTYEAR,FCSTWEEKNO,W1,W2,W3,W4,W5,W6,W7,W8,W9,W10,W11,W12,W13,W14,W15,W16,W17,W18,W19,W20,W21,W22) VALUES ('${DATA.CTR_CD}','${DATA.EMPL_NO}','${DATA.CUST_CD}','${DATA.G_CODE}','${DATA.PROD_PRICE}','${DATA.YEAR}','${DATA.WEEKNO}','${DATA.W1}','${DATA.W2}','${DATA.W3}','${DATA.W4}','${DATA.W5}','${DATA.W6}','${DATA.W7}','${DATA.W8}','${DATA.W9}','${DATA.W10}','${DATA.W11}','${DATA.W12}','${DATA.W13}','${DATA.W14}','${DATA.W15}','${DATA.W16}','${DATA.W17}','${DATA.W18}','${DATA.W19}','${DATA.W20}','${DATA.W21}','${DATA.W22}')`;
  //////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};
exports.checkGCodeVer = async (req, res, DATA) => {
  let kqua;
  let query = `SELECT USE_YN FROM M100 WHERE G_CODE='${DATA.G_CODE}' AND CTR_CD='${DATA.CTR_CD}'`;
  kqua = await queryDB(query);
  ////console.log(kqua);
  res.send(kqua);
};
exports.checkFcstExist = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `SELECT * FROM ZTBFCSTTB WHERE CTR_CD='${DATA.CTR_CD}' AND G_CODE='${DATA.G_CODE}' AND CUST_CD='${DATA.CUST_CD}'  AND FCSTYEAR=${DATA.FCSTYEAR}  AND FCSTWEEKNO= ${DATA.FCSTWEEKNO}`;
  ////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  ////console.log(checkkq);
  res.send(checkkq);
};
exports.edit_customer = async (req, res, DATA) => {
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let kqua;
  let startOfYear = moment().startOf("year").format("YYYY-MM-DD");
  let query = "";
  query = ` UPDATE M110 SET USE_YN='${DATA.USE_YN}', CUST_NAME = N'${DATA.CUST_NAME}', CUST_NAME_KD ='${DATA.CUST_NAME_KD}', CUST_ADDR1 =N'${DATA.CUST_ADDR1}', CUST_ADDR2 =N'${DATA.CUST_ADDR2}',CUST_ADDR3 =N'${DATA.CUST_ADDR3}',CHARGE_EMAIL =N'${DATA.EMAIL}',TAX_NO ='${DATA.TAX_NO}', CUST_NUMBER ='${DATA.CUST_NUMBER}',BOSS_NAME =N'${DATA.BOSS_NAME}',  TEL_NO1 ='${DATA.TEL_NO1}', FAX_NO ='${DATA.FAX_NO}', CUST_POSTAL ='${DATA.CUST_POSTAL}', REMK =N'${DATA.REMK}',CUST_TYPE =N'${DATA.CUST_TYPE}', UPD_EMPL ='${EMPL_NO}', UPD_DATE = GETDATE() WHERE CTR_CD='${DATA.CTR_CD}' AND CUST_CD='${DATA.CUST_CD}'`;
  //console.log(query);
  kqua = await queryDB(query);
  ////console.log(kqua);
  res.send(kqua);
};
exports.add_customer = async (req, res, DATA) => {
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let kqua;
  let startOfYear = moment().startOf("year").format("YYYY-MM-DD");
  let query = "";
  query = `INSERT INTO M110 (CTR_CD, CUST_TYPE, CUST_CD, CUST_NAME, CUST_NAME_KD, CUST_ADDR1, TAX_NO,CUST_NUMBER, BOSS_NAME, TEL_NO1, FAX_NO, CUST_POSTAL,REMK, INS_DATE, INS_EMPL, UPD_DATE, UPD_EMPL,CUST_ADDR2, CUST_ADDR3, CHARGE_EMAIL,USE_YN) VALUES ('${DATA.CTR_CD}','${DATA.CUST_TYPE}','${DATA.CUST_CD}', N'${DATA.CUST_NAME}','${DATA.CUST_NAME_KD}',N'${DATA.CUST_ADDR1}','${DATA.TAX_NO}','${DATA.CUST_NUMBER}',N'${DATA.BOSS_NAME}','${DATA.TEL_NO1}','${DATA.FAX_NO}','${DATA.CUST_POSTAL}',N'${DATA.REMK}',GETDATE(), '${EMPL_NO}',GETDATE(), '${EMPL_NO}',N'${DATA.ADDR2}',N'${DATA.ADDR3}',N'${DATA.EMAIL}','${DATA.USE_YN}')`;
  //console.log(query);
  kqua = await queryDB(query);
  //console.log(kqua);
  res.send(kqua);
};
exports.get_listcustomer = async (req, res, DATA) => {
  let EMPL_NO = req.payload_data["EMPL_NO"];
  let kqua;
  let startOfYear = moment().startOf("year").format("YYYY-MM-DD");
  let query = "";
  query = `SELECT USE_YN,CUST_TYPE, CUST_CD, CUST_NAME_KD, CUST_NAME,  CUST_ADDR1, CUST_ADDR2,CUST_ADDR3,TAX_NO, CUST_NUMBER,  BOSS_NAME, TEL_NO1, FAX_NO, CUST_POSTAL,  CHARGE_EMAIL AS EMAIL, REMK, INS_DATE, INS_EMPL, UPD_DATE, UPD_EMPL FROM M110 WHERE CTR_CD='${DATA.CTR_CD}'`;
  //console.log(query);
  kqua = await queryDB(query);
  ////console.log(kqua);
  res.send(kqua);
};
exports.checkcustcd = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = ` `;
  if (DATA.COMPANY_TYPE === "KH") {
    setpdQuery = `SELECT TOP 1 CUST_CD FROM M110 WHERE CTR_CD='${DATA.CTR_CD}' AND SUBSTRING(M110.CUST_CD,1,2) = 'KH' ORDER BY CUST_CD DESC`;
  } else if (DATA.COMPANY_TYPE === "NCC") {
    setpdQuery = `SELECT TOP 1 CUST_CD FROM M110 WHERE CTR_CD='${DATA.CTR_CD}' AND SUBSTRING(M110.CUST_CD,1,3) = 'NCC' ORDER BY CUST_CD DESC`;
  }
  console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  //console.log(checkkq);
  res.send(checkkq);
};

exports.POBalanceByCustomer = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `SELECT XX.CUST_NAME_KD, YY.TOTAL_PO_BALANCE, XX.TSP, XX.LABEL, XX.UV, XX.OLED, XX.TAPE, XX.RIBBON, XX.SPT, (YY.TOTAL_PO_BALANCE- XX.TSP- XX.LABEL- XX.UV- XX.OLED- XX.TAPE- XX.RIBBON- XX.SPT) AS OTHERS FROM  (SELECT  PV.CUST_NAME_KD, (isnull(PV.[TSP],0)+isnull(PV.[LABEL],0)+isnull(PV.[UV],0)+isnull(PV.[TAPE],0) + isnull(PV.[SPT],0)+ isnull(PV.[OLED],0)  + isnull(PV.[RIBBON],0)) As TOTAL_PO_BALANCE, isnull(PV.[TSP],0) As TSP, isnull(PV.[LABEL],0) As LABEL,isnull(PV.[UV],0) As UV, isnull(PV.[OLED],0) As OLED,isnull(PV.[TAPE],0) As TAPE, isnull(PV.[SPT],0) As SPT, isnull(PV.[RIBBON],0) As RIBBON FROM ( SELECT P.PO_BALANCE, P.PROD_TYPE, P.CUST_NAME_KD FROM (   SELECT AA.PO_NO,  M100.PROD_TYPE, M100.PROD_MAIN_MATERIAL, ZTBPOTable.PO_DATE,ZTBPOTable.RD_DATE, M110.CUST_NAME_KD, M100.G_NAME, M010.EMPL_NAME, AA.G_CODE, ZTBPOTable.PO_QTY, ZTBPOTable.PROD_PRICE, AA.TotalDelivered as TOTAL_DELIVERED, (ZTBPOTable.PO_QTY-AA.TotalDelivered) As PO_BALANCE,(ZTBPOTable.PO_QTY*ZTBPOTable.PROD_PRICE) As PO_AMOUNT , (AA.TotalDelivered*ZTBPOTable.PROD_PRICE) As DELIVERED_AMOUNT, ((ZTBPOTable.PO_QTY-AA.TotalDelivered)*ZTBPOTable.PROD_PRICE) As BALANCE_AMOUNT,DATEPART( MONTH, PO_DATE) AS POMONTH, DATEPART( ISOWK, PO_DATE) AS POWEEKNUM, YEAR(PO_DATE) As PO_YEAR, CASE     WHEN (ZTBPOTable.RD_DATE < GETDATE()-1) AND ((ZTBPOTable.PO_QTY-AA.TotalDelivered) <>0) THEN 'OVER'        ELSE 'OK' END AS OVERDUE, ZTBPOTable.REMARK, ZTBPOTable.PO_ID FROM (SELECT ZTBPOTable.CTR_CD, ZTBPOTable.EMPL_NO, ZTBPOTable.CUST_CD, ZTBPOTable.G_CODE, ZTBPOTable.PO_NO, isnull(SUM(ZTBDelivery.DELIVERY_QTY),0) AS TotalDelivered FROM ZTBPOTable  LEFT JOIN ZTBDelivery ON (ZTBDelivery.CTR_CD = ZTBPOTable.CTR_CD AND ZTBDelivery.CUST_CD = ZTBPOTable.CUST_CD AND ZTBDelivery.G_CODE = ZTBPOTable.G_CODE AND ZTBDelivery.PO_NO = ZTBPOTable.PO_NO) GROUP BY ZTBPOTable.CTR_CD,ZTBPOTable.EMPL_NO,ZTBPOTable.G_CODE,ZTBPOTable.CUST_CD,ZTBPOTable.PO_NO) AS AA LEFT JOIN M010 ON (M010.EMPL_NO = AA.EMPL_NO AND M010.CTR_CD = AA.CTR_CD) LEFT JOIN M100 ON (M100.G_CODE = AA.G_CODE AND M100.CTR_CD = AA.CTR_CD) LEFT JOIN ZTBPOTable ON (AA.CUST_CD = ZTBPOTable.CUST_CD AND AA.G_CODE = ZTBPOTable.G_CODE AND AA.PO_NO = ZTBPOTable.PO_NO AND AA.CTR_CD = ZTBPOTable.CTR_CD) JOIN M110 ON (M110.CUST_CD = AA.CUST_CD AND M110.CTR_CD = AA.CTR_CD) WHERE AA.CTR_CD='${DATA.CTR_CD}' ) AS P ) AS j PIVOT (SUM(j.PO_BALANCE) FOR j.PROD_TYPE IN ([TSP],[LABEL],[UV],[OLED],[TAPE],[SPT],[RIBBON])) AS PV ) AS XX JOIN /*customer sum po balance*/  (SELECT AA.CUST_NAME_KD, SUM(AA.PO_BALANCE) AS TOTAL_PO_BALANCE FROM (SELECT AA.PO_NO,  M100.PROD_TYPE, M100.PROD_MAIN_MATERIAL, ZTBPOTable.PO_DATE,ZTBPOTable.RD_DATE, M110.CUST_NAME_KD, M100.G_NAME, M010.EMPL_NAME, AA.G_CODE, ZTBPOTable.PO_QTY, ZTBPOTable.PROD_PRICE, AA.TotalDelivered as TOTAL_DELIVERED, (ZTBPOTable.PO_QTY-AA.TotalDelivered) As PO_BALANCE,(ZTBPOTable.PO_QTY*ZTBPOTable.PROD_PRICE) As PO_AMOUNT , (AA.TotalDelivered*ZTBPOTable.PROD_PRICE) As DELIVERED_AMOUNT, ((ZTBPOTable.PO_QTY-AA.TotalDelivered)*ZTBPOTable.PROD_PRICE) As BALANCE_AMOUNT,DATEPART( MONTH, PO_DATE) AS POMONTH, DATEPART( ISOWK, PO_DATE) AS POWEEKNUM, YEAR(PO_DATE) As PO_YEAR, CASE     WHEN (ZTBPOTable.RD_DATE < GETDATE()-1) AND ((ZTBPOTable.PO_QTY-AA.TotalDelivered) <>0) THEN 'OVER'        ELSE 'OK' END AS OVERDUE, ZTBPOTable.REMARK, ZTBPOTable.PO_ID FROM (SELECT ZTBPOTable.CTR_CD, ZTBPOTable.EMPL_NO, ZTBPOTable.CUST_CD, ZTBPOTable.G_CODE, ZTBPOTable.PO_NO, isnull(SUM(ZTBDelivery.DELIVERY_QTY),0) AS TotalDelivered FROM ZTBPOTable  LEFT JOIN ZTBDelivery ON (ZTBDelivery.CTR_CD = ZTBPOTable.CTR_CD AND ZTBDelivery.CUST_CD = ZTBPOTable.CUST_CD AND ZTBDelivery.G_CODE = ZTBPOTable.G_CODE AND ZTBDelivery.PO_NO = ZTBPOTable.PO_NO) GROUP BY ZTBPOTable.CTR_CD,ZTBPOTable.EMPL_NO,ZTBPOTable.G_CODE,ZTBPOTable.CUST_CD,ZTBPOTable.PO_NO) AS AA LEFT JOIN M010 ON (M010.EMPL_NO = AA.EMPL_NO AND M010.CTR_CD = AA.CTR_CD) LEFT JOIN M100 ON (M100.G_CODE = AA.G_CODE AND M100.CTR_CD = AA.CTR_CD) LEFT JOIN ZTBPOTable ON (AA.CUST_CD = ZTBPOTable.CUST_CD AND AA.G_CODE = ZTBPOTable.G_CODE AND AA.PO_NO = ZTBPOTable.PO_NO AND AA.CTR_CD = ZTBPOTable.CTR_CD) JOIN M110 ON (M110.CUST_CD = AA.CUST_CD AND M110.CTR_CD = AA.CTR_CD) WHERE AA.CTR_CD='${DATA.CTR_CD}') AS AA GROUP BY AA.CUST_NAME_KD ) AS YY ON XX.CUST_NAME_KD = YY.CUST_NAME_KD WHERE XX.TOTAL_PO_BALANCE >0 ORDER BY TOTAL_PO_BALANCE DESC`;
  ////console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  res.send(checkkq);
};
exports.insert_po = async (req, res, DATA) => {
  let checkkq = "OK";
  let setpdQuery = `INSERT INTO ZTBPOTable (CTR_CD, CUST_CD, EMPL_NO,G_CODE, PO_NO, PO_QTY, PO_DATE, RD_DATE, PROD_PRICE,BEP,REMARK) VALUES ('${DATA.CTR_CD}','${DATA.CUST_CD
    }', '${DATA.EMPL_NO}','${DATA.G_CODE}', '${DATA.PO_NO}', '${DATA.PO_QTY}', '${DATA.PO_DATE}', '${DATA.RD_DATE}', '${DATA.PROD_PRICE}','${DATA.BEP}',N'${DATA.REMARK ?? ""}')`;
  //console.log(setpdQuery);
  checkkq = await queryDB(setpdQuery);
  ////console.log(checkkq);
  res.send(checkkq);
};
exports.common = async (req, res, DATA) => {

};
exports.common = async (req, res, DATA) => {

};
exports.common = async (req, res, DATA) => {

};
exports.common = async (req, res, DATA) => {

};
exports.common = async (req, res, DATA) => {

};